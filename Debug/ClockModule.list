
ClockModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08007a60  08007a60  00017a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000055c  08007c64  08007c64  00017c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000004a8  080081c0  080081c0  000181c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   0000001c  08008668  08008668  00018668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08008684  08008684  00018684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000007c  20000000  08008688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  9 .bss          00000328  2000007c  2000007c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a4  200003a4  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f0de  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030d6  00000000  00000000  0003f18a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000070b1  00000000  00000000  00042260  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000fe8  00000000  00000000  00049318  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001250  00000000  00000000  0004a300  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000070f9  00000000  00000000  0004b550  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a5d0  00000000  00000000  00052649  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  0005cc19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b808  00000000  00000000  0005cc98  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000030  00000000  00000000  00068690  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001ed  00000000  00000000  000684a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a48 	.word	0x08007a48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08007a48 	.word	0x08007a48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000294:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000298:	f001 b8f6 	b.w	8001488 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	468c      	mov	ip, r1
 80002ba:	460d      	mov	r5, r1
 80002bc:	4604      	mov	r4, r0
 80002be:	9e08      	ldr	r6, [sp, #32]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d151      	bne.n	8000368 <__udivmoddi4+0xb4>
 80002c4:	428a      	cmp	r2, r1
 80002c6:	4617      	mov	r7, r2
 80002c8:	d96d      	bls.n	80003a6 <__udivmoddi4+0xf2>
 80002ca:	fab2 fe82 	clz	lr, r2
 80002ce:	f1be 0f00 	cmp.w	lr, #0
 80002d2:	d00b      	beq.n	80002ec <__udivmoddi4+0x38>
 80002d4:	f1ce 0c20 	rsb	ip, lr, #32
 80002d8:	fa01 f50e 	lsl.w	r5, r1, lr
 80002dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e0:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e4:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e8:	fa00 f40e 	lsl.w	r4, r0, lr
 80002ec:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002f0:	0c25      	lsrs	r5, r4, #16
 80002f2:	fbbc f8fa 	udiv	r8, ip, sl
 80002f6:	fa1f f987 	uxth.w	r9, r7
 80002fa:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fe:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000302:	fb08 f309 	mul.w	r3, r8, r9
 8000306:	42ab      	cmp	r3, r5
 8000308:	d90a      	bls.n	8000320 <__udivmoddi4+0x6c>
 800030a:	19ed      	adds	r5, r5, r7
 800030c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000310:	f080 8123 	bcs.w	800055a <__udivmoddi4+0x2a6>
 8000314:	42ab      	cmp	r3, r5
 8000316:	f240 8120 	bls.w	800055a <__udivmoddi4+0x2a6>
 800031a:	f1a8 0802 	sub.w	r8, r8, #2
 800031e:	443d      	add	r5, r7
 8000320:	1aed      	subs	r5, r5, r3
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb5 f0fa 	udiv	r0, r5, sl
 8000328:	fb0a 5510 	mls	r5, sl, r0, r5
 800032c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000330:	fb00 f909 	mul.w	r9, r0, r9
 8000334:	45a1      	cmp	r9, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x98>
 8000338:	19e4      	adds	r4, r4, r7
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 810a 	bcs.w	8000556 <__udivmoddi4+0x2a2>
 8000342:	45a1      	cmp	r9, r4
 8000344:	f240 8107 	bls.w	8000556 <__udivmoddi4+0x2a2>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	eba4 0409 	sub.w	r4, r4, r9
 8000350:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000354:	2100      	movs	r1, #0
 8000356:	2e00      	cmp	r6, #0
 8000358:	d061      	beq.n	800041e <__udivmoddi4+0x16a>
 800035a:	fa24 f40e 	lsr.w	r4, r4, lr
 800035e:	2300      	movs	r3, #0
 8000360:	6034      	str	r4, [r6, #0]
 8000362:	6073      	str	r3, [r6, #4]
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	428b      	cmp	r3, r1
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0xc8>
 800036c:	2e00      	cmp	r6, #0
 800036e:	d054      	beq.n	800041a <__udivmoddi4+0x166>
 8000370:	2100      	movs	r1, #0
 8000372:	e886 0021 	stmia.w	r6, {r0, r5}
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	f040 808e 	bne.w	80004a2 <__udivmoddi4+0x1ee>
 8000386:	42ab      	cmp	r3, r5
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xdc>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2d0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb65 0503 	sbc.w	r5, r5, r3
 8000396:	2001      	movs	r0, #1
 8000398:	46ac      	mov	ip, r5
 800039a:	2e00      	cmp	r6, #0
 800039c:	d03f      	beq.n	800041e <__udivmoddi4+0x16a>
 800039e:	e886 1010 	stmia.w	r6, {r4, ip}
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	b912      	cbnz	r2, 80003ae <__udivmoddi4+0xfa>
 80003a8:	2701      	movs	r7, #1
 80003aa:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ae:	fab7 fe87 	clz	lr, r7
 80003b2:	f1be 0f00 	cmp.w	lr, #0
 80003b6:	d134      	bne.n	8000422 <__udivmoddi4+0x16e>
 80003b8:	1beb      	subs	r3, r5, r7
 80003ba:	0c3a      	lsrs	r2, r7, #16
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c6:	0c25      	lsrs	r5, r4, #16
 80003c8:	fb02 3318 	mls	r3, r2, r8, r3
 80003cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d0:	fb0c f308 	mul.w	r3, ip, r8
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0x134>
 80003d8:	19ed      	adds	r5, r5, r7
 80003da:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x132>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	f200 80d1 	bhi.w	8000588 <__udivmoddi4+0x2d4>
 80003e6:	4680      	mov	r8, r0
 80003e8:	1aed      	subs	r5, r5, r3
 80003ea:	b2a3      	uxth	r3, r4
 80003ec:	fbb5 f0f2 	udiv	r0, r5, r2
 80003f0:	fb02 5510 	mls	r5, r2, r0, r5
 80003f4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f8:	fb0c fc00 	mul.w	ip, ip, r0
 80003fc:	45a4      	cmp	ip, r4
 80003fe:	d907      	bls.n	8000410 <__udivmoddi4+0x15c>
 8000400:	19e4      	adds	r4, r4, r7
 8000402:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000406:	d202      	bcs.n	800040e <__udivmoddi4+0x15a>
 8000408:	45a4      	cmp	ip, r4
 800040a:	f200 80b8 	bhi.w	800057e <__udivmoddi4+0x2ca>
 800040e:	4618      	mov	r0, r3
 8000410:	eba4 040c 	sub.w	r4, r4, ip
 8000414:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000418:	e79d      	b.n	8000356 <__udivmoddi4+0xa2>
 800041a:	4631      	mov	r1, r6
 800041c:	4630      	mov	r0, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1ce 0420 	rsb	r4, lr, #32
 8000426:	fa05 f30e 	lsl.w	r3, r5, lr
 800042a:	fa07 f70e 	lsl.w	r7, r7, lr
 800042e:	fa20 f804 	lsr.w	r8, r0, r4
 8000432:	0c3a      	lsrs	r2, r7, #16
 8000434:	fa25 f404 	lsr.w	r4, r5, r4
 8000438:	ea48 0803 	orr.w	r8, r8, r3
 800043c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000440:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000444:	fb02 4411 	mls	r4, r2, r1, r4
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000450:	fb01 f30c 	mul.w	r3, r1, ip
 8000454:	42ab      	cmp	r3, r5
 8000456:	fa00 f40e 	lsl.w	r4, r0, lr
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1bc>
 800045c:	19ed      	adds	r5, r5, r7
 800045e:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000462:	f080 808a 	bcs.w	800057a <__udivmoddi4+0x2c6>
 8000466:	42ab      	cmp	r3, r5
 8000468:	f240 8087 	bls.w	800057a <__udivmoddi4+0x2c6>
 800046c:	3902      	subs	r1, #2
 800046e:	443d      	add	r5, r7
 8000470:	1aeb      	subs	r3, r5, r3
 8000472:	fa1f f588 	uxth.w	r5, r8
 8000476:	fbb3 f0f2 	udiv	r0, r3, r2
 800047a:	fb02 3310 	mls	r3, r2, r0, r3
 800047e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000482:	fb00 f30c 	mul.w	r3, r0, ip
 8000486:	42ab      	cmp	r3, r5
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x1e6>
 800048a:	19ed      	adds	r5, r5, r7
 800048c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000490:	d26f      	bcs.n	8000572 <__udivmoddi4+0x2be>
 8000492:	42ab      	cmp	r3, r5
 8000494:	d96d      	bls.n	8000572 <__udivmoddi4+0x2be>
 8000496:	3802      	subs	r0, #2
 8000498:	443d      	add	r5, r7
 800049a:	1aeb      	subs	r3, r5, r3
 800049c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a0:	e78f      	b.n	80003c2 <__udivmoddi4+0x10e>
 80004a2:	f1c1 0720 	rsb	r7, r1, #32
 80004a6:	fa22 f807 	lsr.w	r8, r2, r7
 80004aa:	408b      	lsls	r3, r1
 80004ac:	fa05 f401 	lsl.w	r4, r5, r1
 80004b0:	ea48 0303 	orr.w	r3, r8, r3
 80004b4:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004bc:	40fd      	lsrs	r5, r7
 80004be:	ea4e 0e04 	orr.w	lr, lr, r4
 80004c2:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004ca:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ce:	fa1f f883 	uxth.w	r8, r3
 80004d2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d6:	fb09 f408 	mul.w	r4, r9, r8
 80004da:	42ac      	cmp	r4, r5
 80004dc:	fa02 f201 	lsl.w	r2, r2, r1
 80004e0:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x244>
 80004e6:	18ed      	adds	r5, r5, r3
 80004e8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004ec:	d243      	bcs.n	8000576 <__udivmoddi4+0x2c2>
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	d941      	bls.n	8000576 <__udivmoddi4+0x2c2>
 80004f2:	f1a9 0902 	sub.w	r9, r9, #2
 80004f6:	441d      	add	r5, r3
 80004f8:	1b2d      	subs	r5, r5, r4
 80004fa:	fa1f fe8e 	uxth.w	lr, lr
 80004fe:	fbb5 f0fc 	udiv	r0, r5, ip
 8000502:	fb0c 5510 	mls	r5, ip, r0, r5
 8000506:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800050a:	fb00 f808 	mul.w	r8, r0, r8
 800050e:	45a0      	cmp	r8, r4
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x26e>
 8000512:	18e4      	adds	r4, r4, r3
 8000514:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000518:	d229      	bcs.n	800056e <__udivmoddi4+0x2ba>
 800051a:	45a0      	cmp	r8, r4
 800051c:	d927      	bls.n	800056e <__udivmoddi4+0x2ba>
 800051e:	3802      	subs	r0, #2
 8000520:	441c      	add	r4, r3
 8000522:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000526:	eba4 0408 	sub.w	r4, r4, r8
 800052a:	fba0 8902 	umull	r8, r9, r0, r2
 800052e:	454c      	cmp	r4, r9
 8000530:	46c6      	mov	lr, r8
 8000532:	464d      	mov	r5, r9
 8000534:	d315      	bcc.n	8000562 <__udivmoddi4+0x2ae>
 8000536:	d012      	beq.n	800055e <__udivmoddi4+0x2aa>
 8000538:	b156      	cbz	r6, 8000550 <__udivmoddi4+0x29c>
 800053a:	ebba 030e 	subs.w	r3, sl, lr
 800053e:	eb64 0405 	sbc.w	r4, r4, r5
 8000542:	fa04 f707 	lsl.w	r7, r4, r7
 8000546:	40cb      	lsrs	r3, r1
 8000548:	431f      	orrs	r7, r3
 800054a:	40cc      	lsrs	r4, r1
 800054c:	6037      	str	r7, [r6, #0]
 800054e:	6074      	str	r4, [r6, #4]
 8000550:	2100      	movs	r1, #0
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	4618      	mov	r0, r3
 8000558:	e6f8      	b.n	800034c <__udivmoddi4+0x98>
 800055a:	4690      	mov	r8, r2
 800055c:	e6e0      	b.n	8000320 <__udivmoddi4+0x6c>
 800055e:	45c2      	cmp	sl, r8
 8000560:	d2ea      	bcs.n	8000538 <__udivmoddi4+0x284>
 8000562:	ebb8 0e02 	subs.w	lr, r8, r2
 8000566:	eb69 0503 	sbc.w	r5, r9, r3
 800056a:	3801      	subs	r0, #1
 800056c:	e7e4      	b.n	8000538 <__udivmoddi4+0x284>
 800056e:	4628      	mov	r0, r5
 8000570:	e7d7      	b.n	8000522 <__udivmoddi4+0x26e>
 8000572:	4640      	mov	r0, r8
 8000574:	e791      	b.n	800049a <__udivmoddi4+0x1e6>
 8000576:	4681      	mov	r9, r0
 8000578:	e7be      	b.n	80004f8 <__udivmoddi4+0x244>
 800057a:	4601      	mov	r1, r0
 800057c:	e778      	b.n	8000470 <__udivmoddi4+0x1bc>
 800057e:	3802      	subs	r0, #2
 8000580:	443c      	add	r4, r7
 8000582:	e745      	b.n	8000410 <__udivmoddi4+0x15c>
 8000584:	4608      	mov	r0, r1
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xe6>
 8000588:	f1a8 0802 	sub.w	r8, r8, #2
 800058c:	443d      	add	r5, r7
 800058e:	e72b      	b.n	80003e8 <__udivmoddi4+0x134>

08000590 <selfrel_offset31>:
 8000590:	6803      	ldr	r3, [r0, #0]
 8000592:	005a      	lsls	r2, r3, #1
 8000594:	bf4c      	ite	mi
 8000596:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800059a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800059e:	4418      	add	r0, r3
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <search_EIT_table>:
 80005a4:	b361      	cbz	r1, 8000600 <search_EIT_table+0x5c>
 80005a6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005aa:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 80005ae:	4690      	mov	r8, r2
 80005b0:	4606      	mov	r6, r0
 80005b2:	46d1      	mov	r9, sl
 80005b4:	2700      	movs	r7, #0
 80005b6:	eb07 0409 	add.w	r4, r7, r9
 80005ba:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80005be:	1064      	asrs	r4, r4, #1
 80005c0:	00e5      	lsls	r5, r4, #3
 80005c2:	1971      	adds	r1, r6, r5
 80005c4:	4608      	mov	r0, r1
 80005c6:	f7ff ffe3 	bl	8000590 <selfrel_offset31>
 80005ca:	45a2      	cmp	sl, r4
 80005cc:	4683      	mov	fp, r0
 80005ce:	f105 0008 	add.w	r0, r5, #8
 80005d2:	4430      	add	r0, r6
 80005d4:	d009      	beq.n	80005ea <search_EIT_table+0x46>
 80005d6:	f7ff ffdb 	bl	8000590 <selfrel_offset31>
 80005da:	45c3      	cmp	fp, r8
 80005dc:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80005e0:	d805      	bhi.n	80005ee <search_EIT_table+0x4a>
 80005e2:	4540      	cmp	r0, r8
 80005e4:	d209      	bcs.n	80005fa <search_EIT_table+0x56>
 80005e6:	1c67      	adds	r7, r4, #1
 80005e8:	e7e5      	b.n	80005b6 <search_EIT_table+0x12>
 80005ea:	45c3      	cmp	fp, r8
 80005ec:	d905      	bls.n	80005fa <search_EIT_table+0x56>
 80005ee:	42a7      	cmp	r7, r4
 80005f0:	d002      	beq.n	80005f8 <search_EIT_table+0x54>
 80005f2:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 80005f6:	e7de      	b.n	80005b6 <search_EIT_table+0x12>
 80005f8:	2100      	movs	r1, #0
 80005fa:	4608      	mov	r0, r1
 80005fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000600:	4608      	mov	r0, r1
 8000602:	4770      	bx	lr

08000604 <__gnu_unwind_get_pr_addr>:
 8000604:	2801      	cmp	r0, #1
 8000606:	d007      	beq.n	8000618 <__gnu_unwind_get_pr_addr+0x14>
 8000608:	2802      	cmp	r0, #2
 800060a:	d007      	beq.n	800061c <__gnu_unwind_get_pr_addr+0x18>
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <__gnu_unwind_get_pr_addr+0x1c>)
 800060e:	2800      	cmp	r0, #0
 8000610:	bf0c      	ite	eq
 8000612:	4618      	moveq	r0, r3
 8000614:	2000      	movne	r0, #0
 8000616:	4770      	bx	lr
 8000618:	4802      	ldr	r0, [pc, #8]	; (8000624 <__gnu_unwind_get_pr_addr+0x20>)
 800061a:	4770      	bx	lr
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <__gnu_unwind_get_pr_addr+0x24>)
 800061e:	4770      	bx	lr
 8000620:	08000d09 	.word	0x08000d09
 8000624:	08000d0d 	.word	0x08000d0d
 8000628:	08000d11 	.word	0x08000d11

0800062c <get_eit_entry>:
 800062c:	b530      	push	{r4, r5, lr}
 800062e:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <get_eit_entry+0x94>)
 8000630:	b083      	sub	sp, #12
 8000632:	4604      	mov	r4, r0
 8000634:	1e8d      	subs	r5, r1, #2
 8000636:	b37b      	cbz	r3, 8000698 <get_eit_entry+0x6c>
 8000638:	a901      	add	r1, sp, #4
 800063a:	4628      	mov	r0, r5
 800063c:	f3af 8000 	nop.w
 8000640:	b320      	cbz	r0, 800068c <get_eit_entry+0x60>
 8000642:	9901      	ldr	r1, [sp, #4]
 8000644:	462a      	mov	r2, r5
 8000646:	f7ff ffad 	bl	80005a4 <search_EIT_table>
 800064a:	4601      	mov	r1, r0
 800064c:	b1f0      	cbz	r0, 800068c <get_eit_entry+0x60>
 800064e:	f7ff ff9f 	bl	8000590 <selfrel_offset31>
 8000652:	684b      	ldr	r3, [r1, #4]
 8000654:	64a0      	str	r0, [r4, #72]	; 0x48
 8000656:	2b01      	cmp	r3, #1
 8000658:	d012      	beq.n	8000680 <get_eit_entry+0x54>
 800065a:	2b00      	cmp	r3, #0
 800065c:	f101 0004 	add.w	r0, r1, #4
 8000660:	db20      	blt.n	80006a4 <get_eit_entry+0x78>
 8000662:	f7ff ff95 	bl	8000590 <selfrel_offset31>
 8000666:	2300      	movs	r3, #0
 8000668:	64e0      	str	r0, [r4, #76]	; 0x4c
 800066a:	6523      	str	r3, [r4, #80]	; 0x50
 800066c:	6803      	ldr	r3, [r0, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	db1c      	blt.n	80006ac <get_eit_entry+0x80>
 8000672:	f7ff ff8d 	bl	8000590 <selfrel_offset31>
 8000676:	2300      	movs	r3, #0
 8000678:	6120      	str	r0, [r4, #16]
 800067a:	4618      	mov	r0, r3
 800067c:	b003      	add	sp, #12
 800067e:	bd30      	pop	{r4, r5, pc}
 8000680:	2300      	movs	r3, #0
 8000682:	6123      	str	r3, [r4, #16]
 8000684:	2305      	movs	r3, #5
 8000686:	4618      	mov	r0, r3
 8000688:	b003      	add	sp, #12
 800068a:	bd30      	pop	{r4, r5, pc}
 800068c:	2300      	movs	r3, #0
 800068e:	6123      	str	r3, [r4, #16]
 8000690:	2309      	movs	r3, #9
 8000692:	4618      	mov	r0, r3
 8000694:	b003      	add	sp, #12
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	490a      	ldr	r1, [pc, #40]	; (80006c4 <get_eit_entry+0x98>)
 800069a:	480b      	ldr	r0, [pc, #44]	; (80006c8 <get_eit_entry+0x9c>)
 800069c:	1a09      	subs	r1, r1, r0
 800069e:	10c9      	asrs	r1, r1, #3
 80006a0:	9101      	str	r1, [sp, #4]
 80006a2:	e7cf      	b.n	8000644 <get_eit_entry+0x18>
 80006a4:	2301      	movs	r3, #1
 80006a6:	64e0      	str	r0, [r4, #76]	; 0x4c
 80006a8:	6523      	str	r3, [r4, #80]	; 0x50
 80006aa:	e7df      	b.n	800066c <get_eit_entry+0x40>
 80006ac:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80006b0:	f7ff ffa8 	bl	8000604 <__gnu_unwind_get_pr_addr>
 80006b4:	2800      	cmp	r0, #0
 80006b6:	6120      	str	r0, [r4, #16]
 80006b8:	bf14      	ite	ne
 80006ba:	2300      	movne	r3, #0
 80006bc:	2309      	moveq	r3, #9
 80006be:	e7dc      	b.n	800067a <get_eit_entry+0x4e>
 80006c0:	00000000 	.word	0x00000000
 80006c4:	08008668 	.word	0x08008668
 80006c8:	080081c0 	.word	0x080081c0

080006cc <restore_non_core_regs>:
 80006cc:	6803      	ldr	r3, [r0, #0]
 80006ce:	07da      	lsls	r2, r3, #31
 80006d0:	b510      	push	{r4, lr}
 80006d2:	4604      	mov	r4, r0
 80006d4:	d406      	bmi.n	80006e4 <restore_non_core_regs+0x18>
 80006d6:	079b      	lsls	r3, r3, #30
 80006d8:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80006dc:	d509      	bpl.n	80006f2 <restore_non_core_regs+0x26>
 80006de:	f000 fc51 	bl	8000f84 <__gnu_Unwind_Restore_VFP_D>
 80006e2:	6823      	ldr	r3, [r4, #0]
 80006e4:	0759      	lsls	r1, r3, #29
 80006e6:	d509      	bpl.n	80006fc <restore_non_core_regs+0x30>
 80006e8:	071a      	lsls	r2, r3, #28
 80006ea:	d50e      	bpl.n	800070a <restore_non_core_regs+0x3e>
 80006ec:	06db      	lsls	r3, r3, #27
 80006ee:	d513      	bpl.n	8000718 <restore_non_core_regs+0x4c>
 80006f0:	bd10      	pop	{r4, pc}
 80006f2:	f000 fc3f 	bl	8000f74 <__gnu_Unwind_Restore_VFP>
 80006f6:	6823      	ldr	r3, [r4, #0]
 80006f8:	0759      	lsls	r1, r3, #29
 80006fa:	d4f5      	bmi.n	80006e8 <restore_non_core_regs+0x1c>
 80006fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000700:	f000 fc48 	bl	8000f94 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000704:	6823      	ldr	r3, [r4, #0]
 8000706:	071a      	lsls	r2, r3, #28
 8000708:	d4f0      	bmi.n	80006ec <restore_non_core_regs+0x20>
 800070a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800070e:	f000 fc49 	bl	8000fa4 <__gnu_Unwind_Restore_WMMXD>
 8000712:	6823      	ldr	r3, [r4, #0]
 8000714:	06db      	lsls	r3, r3, #27
 8000716:	d4eb      	bmi.n	80006f0 <restore_non_core_regs+0x24>
 8000718:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800071c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000720:	f000 bc84 	b.w	800102c <__gnu_Unwind_Restore_WMMXC>

08000724 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000724:	6803      	ldr	r3, [r0, #0]
 8000726:	b103      	cbz	r3, 800072a <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000728:	4403      	add	r3, r0
 800072a:	4618      	mov	r0, r3
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop

08000730 <__gnu_unwind_24bit.isra.1>:
 8000730:	2009      	movs	r0, #9
 8000732:	4770      	bx	lr

08000734 <_Unwind_DebugHook>:
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <unwind_phase2>:
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	4604      	mov	r4, r0
 800073c:	460d      	mov	r5, r1
 800073e:	e008      	b.n	8000752 <unwind_phase2+0x1a>
 8000740:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000742:	6163      	str	r3, [r4, #20]
 8000744:	462a      	mov	r2, r5
 8000746:	6923      	ldr	r3, [r4, #16]
 8000748:	4621      	mov	r1, r4
 800074a:	2001      	movs	r0, #1
 800074c:	4798      	blx	r3
 800074e:	2808      	cmp	r0, #8
 8000750:	d108      	bne.n	8000764 <unwind_phase2+0x2c>
 8000752:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000754:	4620      	mov	r0, r4
 8000756:	f7ff ff69 	bl	800062c <get_eit_entry>
 800075a:	4606      	mov	r6, r0
 800075c:	2800      	cmp	r0, #0
 800075e:	d0ef      	beq.n	8000740 <unwind_phase2+0x8>
 8000760:	f006 fc9e 	bl	80070a0 <abort>
 8000764:	2807      	cmp	r0, #7
 8000766:	d1fb      	bne.n	8000760 <unwind_phase2+0x28>
 8000768:	4630      	mov	r0, r6
 800076a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800076c:	f7ff ffe2 	bl	8000734 <_Unwind_DebugHook>
 8000770:	1d28      	adds	r0, r5, #4
 8000772:	f000 fbf3 	bl	8000f5c <__restore_core_regs>
 8000776:	bf00      	nop

08000778 <unwind_phase2_forced>:
 8000778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800077c:	1d0c      	adds	r4, r1, #4
 800077e:	4605      	mov	r5, r0
 8000780:	4692      	mov	sl, r2
 8000782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000784:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000788:	ae03      	add	r6, sp, #12
 800078a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800078c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800078e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000792:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000794:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000798:	ac02      	add	r4, sp, #8
 800079a:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800079e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80007a2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80007a6:	2300      	movs	r3, #0
 80007a8:	4628      	mov	r0, r5
 80007aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007ac:	6023      	str	r3, [r4, #0]
 80007ae:	f7ff ff3d 	bl	800062c <get_eit_entry>
 80007b2:	f1ba 0f00 	cmp.w	sl, #0
 80007b6:	4607      	mov	r7, r0
 80007b8:	bf14      	ite	ne
 80007ba:	260a      	movne	r6, #10
 80007bc:	2609      	moveq	r6, #9
 80007be:	b17f      	cbz	r7, 80007e0 <unwind_phase2_forced+0x68>
 80007c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80007c2:	f046 0110 	orr.w	r1, r6, #16
 80007c6:	e88d 0210 	stmia.w	sp, {r4, r9}
 80007ca:	462a      	mov	r2, r5
 80007cc:	6463      	str	r3, [r4, #68]	; 0x44
 80007ce:	2001      	movs	r0, #1
 80007d0:	462b      	mov	r3, r5
 80007d2:	47c0      	blx	r8
 80007d4:	bb78      	cbnz	r0, 8000836 <unwind_phase2_forced+0xbe>
 80007d6:	4638      	mov	r0, r7
 80007d8:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007e2:	616b      	str	r3, [r5, #20]
 80007e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80007e8:	4621      	mov	r1, r4
 80007ea:	a87a      	add	r0, sp, #488	; 0x1e8
 80007ec:	f006 fca2 	bl	8007134 <memcpy>
 80007f0:	692b      	ldr	r3, [r5, #16]
 80007f2:	aa7a      	add	r2, sp, #488	; 0x1e8
 80007f4:	4629      	mov	r1, r5
 80007f6:	4630      	mov	r0, r6
 80007f8:	4798      	blx	r3
 80007fa:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80007fc:	4682      	mov	sl, r0
 80007fe:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000802:	4631      	mov	r1, r6
 8000804:	6463      	str	r3, [r4, #68]	; 0x44
 8000806:	462a      	mov	r2, r5
 8000808:	462b      	mov	r3, r5
 800080a:	2001      	movs	r0, #1
 800080c:	47c0      	blx	r8
 800080e:	b990      	cbnz	r0, 8000836 <unwind_phase2_forced+0xbe>
 8000810:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000814:	a97a      	add	r1, sp, #488	; 0x1e8
 8000816:	4620      	mov	r0, r4
 8000818:	f006 fc8c 	bl	8007134 <memcpy>
 800081c:	f1ba 0f08 	cmp.w	sl, #8
 8000820:	d106      	bne.n	8000830 <unwind_phase2_forced+0xb8>
 8000822:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000824:	4628      	mov	r0, r5
 8000826:	f7ff ff01 	bl	800062c <get_eit_entry>
 800082a:	2609      	movs	r6, #9
 800082c:	4607      	mov	r7, r0
 800082e:	e7c6      	b.n	80007be <unwind_phase2_forced+0x46>
 8000830:	f1ba 0f07 	cmp.w	sl, #7
 8000834:	d005      	beq.n	8000842 <unwind_phase2_forced+0xca>
 8000836:	2709      	movs	r7, #9
 8000838:	4638      	mov	r0, r7
 800083a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800083e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000842:	4638      	mov	r0, r7
 8000844:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000846:	f7ff ff75 	bl	8000734 <_Unwind_DebugHook>
 800084a:	a803      	add	r0, sp, #12
 800084c:	f000 fb86 	bl	8000f5c <__restore_core_regs>

08000850 <_Unwind_GetCFA>:
 8000850:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000852:	4770      	bx	lr

08000854 <__gnu_Unwind_RaiseException>:
 8000854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000856:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000858:	640b      	str	r3, [r1, #64]	; 0x40
 800085a:	1d0e      	adds	r6, r1, #4
 800085c:	460f      	mov	r7, r1
 800085e:	4604      	mov	r4, r0
 8000860:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000862:	b0f9      	sub	sp, #484	; 0x1e4
 8000864:	ad01      	add	r5, sp, #4
 8000866:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000868:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800086a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800086c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800086e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000870:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000874:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000878:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800087c:	9600      	str	r6, [sp, #0]
 800087e:	e006      	b.n	800088e <__gnu_Unwind_RaiseException+0x3a>
 8000880:	6923      	ldr	r3, [r4, #16]
 8000882:	466a      	mov	r2, sp
 8000884:	4621      	mov	r1, r4
 8000886:	4798      	blx	r3
 8000888:	2808      	cmp	r0, #8
 800088a:	4605      	mov	r5, r0
 800088c:	d108      	bne.n	80008a0 <__gnu_Unwind_RaiseException+0x4c>
 800088e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000890:	4620      	mov	r0, r4
 8000892:	f7ff fecb 	bl	800062c <get_eit_entry>
 8000896:	2800      	cmp	r0, #0
 8000898:	d0f2      	beq.n	8000880 <__gnu_Unwind_RaiseException+0x2c>
 800089a:	2009      	movs	r0, #9
 800089c:	b079      	add	sp, #484	; 0x1e4
 800089e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a0:	4668      	mov	r0, sp
 80008a2:	f7ff ff13 	bl	80006cc <restore_non_core_regs>
 80008a6:	2d06      	cmp	r5, #6
 80008a8:	d1f7      	bne.n	800089a <__gnu_Unwind_RaiseException+0x46>
 80008aa:	4639      	mov	r1, r7
 80008ac:	4620      	mov	r0, r4
 80008ae:	f7ff ff43 	bl	8000738 <unwind_phase2>
 80008b2:	bf00      	nop

080008b4 <__gnu_Unwind_ForcedUnwind>:
 80008b4:	b430      	push	{r4, r5}
 80008b6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80008b8:	60c1      	str	r1, [r0, #12]
 80008ba:	6182      	str	r2, [r0, #24]
 80008bc:	4619      	mov	r1, r3
 80008be:	641d      	str	r5, [r3, #64]	; 0x40
 80008c0:	2200      	movs	r2, #0
 80008c2:	bc30      	pop	{r4, r5}
 80008c4:	e758      	b.n	8000778 <unwind_phase2_forced>
 80008c6:	bf00      	nop

080008c8 <__gnu_Unwind_Resume>:
 80008c8:	b570      	push	{r4, r5, r6, lr}
 80008ca:	68c6      	ldr	r6, [r0, #12]
 80008cc:	6943      	ldr	r3, [r0, #20]
 80008ce:	640b      	str	r3, [r1, #64]	; 0x40
 80008d0:	b126      	cbz	r6, 80008dc <__gnu_Unwind_Resume+0x14>
 80008d2:	2201      	movs	r2, #1
 80008d4:	f7ff ff50 	bl	8000778 <unwind_phase2_forced>
 80008d8:	f006 fbe2 	bl	80070a0 <abort>
 80008dc:	6903      	ldr	r3, [r0, #16]
 80008de:	460a      	mov	r2, r1
 80008e0:	4604      	mov	r4, r0
 80008e2:	460d      	mov	r5, r1
 80008e4:	4601      	mov	r1, r0
 80008e6:	2002      	movs	r0, #2
 80008e8:	4798      	blx	r3
 80008ea:	2807      	cmp	r0, #7
 80008ec:	d007      	beq.n	80008fe <__gnu_Unwind_Resume+0x36>
 80008ee:	2808      	cmp	r0, #8
 80008f0:	d103      	bne.n	80008fa <__gnu_Unwind_Resume+0x32>
 80008f2:	4629      	mov	r1, r5
 80008f4:	4620      	mov	r0, r4
 80008f6:	f7ff ff1f 	bl	8000738 <unwind_phase2>
 80008fa:	f006 fbd1 	bl	80070a0 <abort>
 80008fe:	4630      	mov	r0, r6
 8000900:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000902:	f7ff ff17 	bl	8000734 <_Unwind_DebugHook>
 8000906:	1d28      	adds	r0, r5, #4
 8000908:	f000 fb28 	bl	8000f5c <__restore_core_regs>

0800090c <__gnu_Unwind_Resume_or_Rethrow>:
 800090c:	68c2      	ldr	r2, [r0, #12]
 800090e:	b11a      	cbz	r2, 8000918 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000910:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000912:	640a      	str	r2, [r1, #64]	; 0x40
 8000914:	2200      	movs	r2, #0
 8000916:	e72f      	b.n	8000778 <unwind_phase2_forced>
 8000918:	e79c      	b.n	8000854 <__gnu_Unwind_RaiseException>
 800091a:	bf00      	nop

0800091c <_Unwind_Complete>:
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <_Unwind_DeleteException>:
 8000920:	6883      	ldr	r3, [r0, #8]
 8000922:	b113      	cbz	r3, 800092a <_Unwind_DeleteException+0xa>
 8000924:	4601      	mov	r1, r0
 8000926:	2001      	movs	r0, #1
 8000928:	4718      	bx	r3
 800092a:	4770      	bx	lr

0800092c <_Unwind_VRS_Get>:
 800092c:	b500      	push	{lr}
 800092e:	2904      	cmp	r1, #4
 8000930:	d807      	bhi.n	8000942 <_Unwind_VRS_Get+0x16>
 8000932:	e8df f001 	tbb	[pc, r1]
 8000936:	0903      	.short	0x0903
 8000938:	0906      	.short	0x0906
 800093a:	09          	.byte	0x09
 800093b:	00          	.byte	0x00
 800093c:	b90b      	cbnz	r3, 8000942 <_Unwind_VRS_Get+0x16>
 800093e:	2a0f      	cmp	r2, #15
 8000940:	d905      	bls.n	800094e <_Unwind_VRS_Get+0x22>
 8000942:	2002      	movs	r0, #2
 8000944:	f85d fb04 	ldr.w	pc, [sp], #4
 8000948:	2001      	movs	r0, #1
 800094a:	f85d fb04 	ldr.w	pc, [sp], #4
 800094e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000952:	4618      	mov	r0, r3
 8000954:	6853      	ldr	r3, [r2, #4]
 8000956:	9a01      	ldr	r2, [sp, #4]
 8000958:	6013      	str	r3, [r2, #0]
 800095a:	f85d fb04 	ldr.w	pc, [sp], #4
 800095e:	bf00      	nop

08000960 <_Unwind_GetGR>:
 8000960:	b510      	push	{r4, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	2300      	movs	r3, #0
 8000966:	ac03      	add	r4, sp, #12
 8000968:	460a      	mov	r2, r1
 800096a:	9400      	str	r4, [sp, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	f7ff ffdd 	bl	800092c <_Unwind_VRS_Get>
 8000972:	9803      	ldr	r0, [sp, #12]
 8000974:	b004      	add	sp, #16
 8000976:	bd10      	pop	{r4, pc}

08000978 <_Unwind_VRS_Set>:
 8000978:	b500      	push	{lr}
 800097a:	2904      	cmp	r1, #4
 800097c:	d807      	bhi.n	800098e <_Unwind_VRS_Set+0x16>
 800097e:	e8df f001 	tbb	[pc, r1]
 8000982:	0903      	.short	0x0903
 8000984:	0906      	.short	0x0906
 8000986:	09          	.byte	0x09
 8000987:	00          	.byte	0x00
 8000988:	b90b      	cbnz	r3, 800098e <_Unwind_VRS_Set+0x16>
 800098a:	2a0f      	cmp	r2, #15
 800098c:	d905      	bls.n	800099a <_Unwind_VRS_Set+0x22>
 800098e:	2002      	movs	r0, #2
 8000990:	f85d fb04 	ldr.w	pc, [sp], #4
 8000994:	2001      	movs	r0, #1
 8000996:	f85d fb04 	ldr.w	pc, [sp], #4
 800099a:	9901      	ldr	r1, [sp, #4]
 800099c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80009a0:	6809      	ldr	r1, [r1, #0]
 80009a2:	6051      	str	r1, [r2, #4]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80009aa:	bf00      	nop

080009ac <_Unwind_SetGR>:
 80009ac:	b510      	push	{r4, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	ac04      	add	r4, sp, #16
 80009b2:	2300      	movs	r3, #0
 80009b4:	f844 2d04 	str.w	r2, [r4, #-4]!
 80009b8:	460a      	mov	r2, r1
 80009ba:	9400      	str	r4, [sp, #0]
 80009bc:	4619      	mov	r1, r3
 80009be:	f7ff ffdb 	bl	8000978 <_Unwind_VRS_Set>
 80009c2:	b004      	add	sp, #16
 80009c4:	bd10      	pop	{r4, pc}
 80009c6:	bf00      	nop

080009c8 <__gnu_Unwind_Backtrace>:
 80009c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ca:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	1d15      	adds	r5, r2, #4
 80009d0:	4607      	mov	r7, r0
 80009d2:	460e      	mov	r6, r1
 80009d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d6:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80009da:	ac17      	add	r4, sp, #92	; 0x5c
 80009dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009ea:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80009ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80009f2:	9516      	str	r5, [sp, #88]	; 0x58
 80009f4:	e010      	b.n	8000a18 <__gnu_Unwind_Backtrace+0x50>
 80009f6:	a816      	add	r0, sp, #88	; 0x58
 80009f8:	f7ff ffd8 	bl	80009ac <_Unwind_SetGR>
 80009fc:	4631      	mov	r1, r6
 80009fe:	a816      	add	r0, sp, #88	; 0x58
 8000a00:	47b8      	blx	r7
 8000a02:	aa16      	add	r2, sp, #88	; 0x58
 8000a04:	4669      	mov	r1, sp
 8000a06:	b978      	cbnz	r0, 8000a28 <__gnu_Unwind_Backtrace+0x60>
 8000a08:	9b04      	ldr	r3, [sp, #16]
 8000a0a:	2008      	movs	r0, #8
 8000a0c:	4798      	blx	r3
 8000a0e:	2805      	cmp	r0, #5
 8000a10:	4604      	mov	r4, r0
 8000a12:	d00a      	beq.n	8000a2a <__gnu_Unwind_Backtrace+0x62>
 8000a14:	2809      	cmp	r0, #9
 8000a16:	d007      	beq.n	8000a28 <__gnu_Unwind_Backtrace+0x60>
 8000a18:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000a1a:	4668      	mov	r0, sp
 8000a1c:	f7ff fe06 	bl	800062c <get_eit_entry>
 8000a20:	466a      	mov	r2, sp
 8000a22:	210c      	movs	r1, #12
 8000a24:	2800      	cmp	r0, #0
 8000a26:	d0e6      	beq.n	80009f6 <__gnu_Unwind_Backtrace+0x2e>
 8000a28:	2409      	movs	r4, #9
 8000a2a:	a816      	add	r0, sp, #88	; 0x58
 8000a2c:	f7ff fe4e 	bl	80006cc <restore_non_core_regs>
 8000a30:	4620      	mov	r0, r4
 8000a32:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000a36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a38 <__gnu_unwind_pr_common>:
 8000a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a3c:	460d      	mov	r5, r1
 8000a3e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000a40:	b08b      	sub	sp, #44	; 0x2c
 8000a42:	1d0c      	adds	r4, r1, #4
 8000a44:	6809      	ldr	r1, [r1, #0]
 8000a46:	9107      	str	r1, [sp, #28]
 8000a48:	4691      	mov	r9, r2
 8000a4a:	9408      	str	r4, [sp, #32]
 8000a4c:	f000 0b03 	and.w	fp, r0, #3
 8000a50:	461e      	mov	r6, r3
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d160      	bne.n	8000b18 <__gnu_unwind_pr_common+0xe0>
 8000a56:	0209      	lsls	r1, r1, #8
 8000a58:	2303      	movs	r3, #3
 8000a5a:	9107      	str	r1, [sp, #28]
 8000a5c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000a60:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000a64:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a66:	f1bb 0f02 	cmp.w	fp, #2
 8000a6a:	bf08      	it	eq
 8000a6c:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000a6e:	f013 0301 	ands.w	r3, r3, #1
 8000a72:	d140      	bne.n	8000af6 <__gnu_unwind_pr_common+0xbe>
 8000a74:	9301      	str	r3, [sp, #4]
 8000a76:	f000 0308 	and.w	r3, r0, #8
 8000a7a:	9303      	str	r3, [sp, #12]
 8000a7c:	f8d4 8000 	ldr.w	r8, [r4]
 8000a80:	f1b8 0f00 	cmp.w	r8, #0
 8000a84:	d039      	beq.n	8000afa <__gnu_unwind_pr_common+0xc2>
 8000a86:	2e02      	cmp	r6, #2
 8000a88:	d043      	beq.n	8000b12 <__gnu_unwind_pr_common+0xda>
 8000a8a:	f8b4 8000 	ldrh.w	r8, [r4]
 8000a8e:	8867      	ldrh	r7, [r4, #2]
 8000a90:	3404      	adds	r4, #4
 8000a92:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000a94:	f027 0a01 	bic.w	sl, r7, #1
 8000a98:	210f      	movs	r1, #15
 8000a9a:	4648      	mov	r0, r9
 8000a9c:	449a      	add	sl, r3
 8000a9e:	f7ff ff5f 	bl	8000960 <_Unwind_GetGR>
 8000aa2:	4582      	cmp	sl, r0
 8000aa4:	d833      	bhi.n	8000b0e <__gnu_unwind_pr_common+0xd6>
 8000aa6:	f028 0301 	bic.w	r3, r8, #1
 8000aaa:	449a      	add	sl, r3
 8000aac:	4550      	cmp	r0, sl
 8000aae:	bf2c      	ite	cs
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	007f      	lsls	r7, r7, #1
 8000ab6:	f007 0702 	and.w	r7, r7, #2
 8000aba:	f008 0801 	and.w	r8, r8, #1
 8000abe:	ea47 0708 	orr.w	r7, r7, r8
 8000ac2:	2f01      	cmp	r7, #1
 8000ac4:	d03e      	beq.n	8000b44 <__gnu_unwind_pr_common+0x10c>
 8000ac6:	d335      	bcc.n	8000b34 <__gnu_unwind_pr_common+0xfc>
 8000ac8:	2f02      	cmp	r7, #2
 8000aca:	d11c      	bne.n	8000b06 <__gnu_unwind_pr_common+0xce>
 8000acc:	6823      	ldr	r3, [r4, #0]
 8000ace:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ad2:	9202      	str	r2, [sp, #8]
 8000ad4:	f1bb 0f00 	cmp.w	fp, #0
 8000ad8:	d176      	bne.n	8000bc8 <__gnu_unwind_pr_common+0x190>
 8000ada:	b128      	cbz	r0, 8000ae8 <__gnu_unwind_pr_common+0xb0>
 8000adc:	9903      	ldr	r1, [sp, #12]
 8000ade:	2900      	cmp	r1, #0
 8000ae0:	d07e      	beq.n	8000be0 <__gnu_unwind_pr_common+0x1a8>
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	f000 80a6 	beq.w	8000c34 <__gnu_unwind_pr_common+0x1fc>
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	db77      	blt.n	8000bdc <__gnu_unwind_pr_common+0x1a4>
 8000aec:	9b02      	ldr	r3, [sp, #8]
 8000aee:	3301      	adds	r3, #1
 8000af0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000af4:	e7c2      	b.n	8000a7c <__gnu_unwind_pr_common+0x44>
 8000af6:	2300      	movs	r3, #0
 8000af8:	9301      	str	r3, [sp, #4]
 8000afa:	2e02      	cmp	r6, #2
 8000afc:	dd3e      	ble.n	8000b7c <__gnu_unwind_pr_common+0x144>
 8000afe:	f7ff fe17 	bl	8000730 <__gnu_unwind_24bit.isra.1>
 8000b02:	2800      	cmp	r0, #0
 8000b04:	d040      	beq.n	8000b88 <__gnu_unwind_pr_common+0x150>
 8000b06:	2009      	movs	r0, #9
 8000b08:	b00b      	add	sp, #44	; 0x2c
 8000b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b0e:	2000      	movs	r0, #0
 8000b10:	e7d0      	b.n	8000ab4 <__gnu_unwind_pr_common+0x7c>
 8000b12:	6867      	ldr	r7, [r4, #4]
 8000b14:	3408      	adds	r4, #8
 8000b16:	e7bc      	b.n	8000a92 <__gnu_unwind_pr_common+0x5a>
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	dca3      	bgt.n	8000a64 <__gnu_unwind_pr_common+0x2c>
 8000b1c:	0c0b      	lsrs	r3, r1, #16
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	0409      	lsls	r1, r1, #16
 8000b22:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000b26:	2302      	movs	r3, #2
 8000b28:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000b2c:	9107      	str	r1, [sp, #28]
 8000b2e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000b32:	e797      	b.n	8000a64 <__gnu_unwind_pr_common+0x2c>
 8000b34:	f1bb 0f00 	cmp.w	fp, #0
 8000b38:	d002      	beq.n	8000b40 <__gnu_unwind_pr_common+0x108>
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	f040 80bd 	bne.w	8000cba <__gnu_unwind_pr_common+0x282>
 8000b40:	3404      	adds	r4, #4
 8000b42:	e79b      	b.n	8000a7c <__gnu_unwind_pr_common+0x44>
 8000b44:	f1bb 0f00 	cmp.w	fp, #0
 8000b48:	d125      	bne.n	8000b96 <__gnu_unwind_pr_common+0x15e>
 8000b4a:	b1a8      	cbz	r0, 8000b78 <__gnu_unwind_pr_common+0x140>
 8000b4c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000b50:	1c99      	adds	r1, r3, #2
 8000b52:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000b56:	d0d6      	beq.n	8000b06 <__gnu_unwind_pr_common+0xce>
 8000b58:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	9106      	str	r1, [sp, #24]
 8000b60:	f000 80a3 	beq.w	8000caa <__gnu_unwind_pr_common+0x272>
 8000b64:	1d20      	adds	r0, r4, #4
 8000b66:	f7ff fddd 	bl	8000724 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b6a:	ab06      	add	r3, sp, #24
 8000b6c:	4601      	mov	r1, r0
 8000b6e:	4628      	mov	r0, r5
 8000b70:	f005 fcb4 	bl	80064dc <__cxa_type_match>
 8000b74:	2800      	cmp	r0, #0
 8000b76:	d177      	bne.n	8000c68 <__gnu_unwind_pr_common+0x230>
 8000b78:	3408      	adds	r4, #8
 8000b7a:	e77f      	b.n	8000a7c <__gnu_unwind_pr_common+0x44>
 8000b7c:	a907      	add	r1, sp, #28
 8000b7e:	4648      	mov	r0, r9
 8000b80:	f000 faee 	bl	8001160 <__gnu_unwind_execute>
 8000b84:	2800      	cmp	r0, #0
 8000b86:	d1be      	bne.n	8000b06 <__gnu_unwind_pr_common+0xce>
 8000b88:	9b01      	ldr	r3, [sp, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d15c      	bne.n	8000c48 <__gnu_unwind_pr_common+0x210>
 8000b8e:	2008      	movs	r0, #8
 8000b90:	b00b      	add	sp, #44	; 0x2c
 8000b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b96:	210d      	movs	r1, #13
 8000b98:	4648      	mov	r0, r9
 8000b9a:	6a2f      	ldr	r7, [r5, #32]
 8000b9c:	f7ff fee0 	bl	8000960 <_Unwind_GetGR>
 8000ba0:	4287      	cmp	r7, r0
 8000ba2:	d1e9      	bne.n	8000b78 <__gnu_unwind_pr_common+0x140>
 8000ba4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000ba6:	429c      	cmp	r4, r3
 8000ba8:	d1e6      	bne.n	8000b78 <__gnu_unwind_pr_common+0x140>
 8000baa:	4620      	mov	r0, r4
 8000bac:	f7ff fcf0 	bl	8000590 <selfrel_offset31>
 8000bb0:	210f      	movs	r1, #15
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	4648      	mov	r0, r9
 8000bb6:	f7ff fef9 	bl	80009ac <_Unwind_SetGR>
 8000bba:	4648      	mov	r0, r9
 8000bbc:	462a      	mov	r2, r5
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f7ff fef4 	bl	80009ac <_Unwind_SetGR>
 8000bc4:	2007      	movs	r0, #7
 8000bc6:	e79f      	b.n	8000b08 <__gnu_unwind_pr_common+0xd0>
 8000bc8:	210d      	movs	r1, #13
 8000bca:	4648      	mov	r0, r9
 8000bcc:	6a2f      	ldr	r7, [r5, #32]
 8000bce:	f7ff fec7 	bl	8000960 <_Unwind_GetGR>
 8000bd2:	4287      	cmp	r7, r0
 8000bd4:	d058      	beq.n	8000c88 <__gnu_unwind_pr_common+0x250>
 8000bd6:	6823      	ldr	r3, [r4, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	da87      	bge.n	8000aec <__gnu_unwind_pr_common+0xb4>
 8000bdc:	3404      	adds	r4, #4
 8000bde:	e785      	b.n	8000aec <__gnu_unwind_pr_common+0xb4>
 8000be0:	9b02      	ldr	r3, [sp, #8]
 8000be2:	b33b      	cbz	r3, 8000c34 <__gnu_unwind_pr_common+0x1fc>
 8000be4:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000be8:	1d27      	adds	r7, r4, #4
 8000bea:	f8cd b010 	str.w	fp, [sp, #16]
 8000bee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000bf2:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000bf6:	9605      	str	r6, [sp, #20]
 8000bf8:	46a3      	mov	fp, r4
 8000bfa:	461c      	mov	r4, r3
 8000bfc:	e002      	b.n	8000c04 <__gnu_unwind_pr_common+0x1cc>
 8000bfe:	45b2      	cmp	sl, r6
 8000c00:	46b0      	mov	r8, r6
 8000c02:	d016      	beq.n	8000c32 <__gnu_unwind_pr_common+0x1fa>
 8000c04:	4638      	mov	r0, r7
 8000c06:	9406      	str	r4, [sp, #24]
 8000c08:	f7ff fd8c 	bl	8000724 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000c0c:	ab06      	add	r3, sp, #24
 8000c0e:	4601      	mov	r1, r0
 8000c10:	2200      	movs	r2, #0
 8000c12:	4628      	mov	r0, r5
 8000c14:	f005 fc62 	bl	80064dc <__cxa_type_match>
 8000c18:	f108 0601 	add.w	r6, r8, #1
 8000c1c:	3704      	adds	r7, #4
 8000c1e:	2800      	cmp	r0, #0
 8000c20:	d0ed      	beq.n	8000bfe <__gnu_unwind_pr_common+0x1c6>
 8000c22:	9b02      	ldr	r3, [sp, #8]
 8000c24:	9e05      	ldr	r6, [sp, #20]
 8000c26:	4543      	cmp	r3, r8
 8000c28:	465c      	mov	r4, fp
 8000c2a:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000c2e:	d1d2      	bne.n	8000bd6 <__gnu_unwind_pr_common+0x19e>
 8000c30:	e000      	b.n	8000c34 <__gnu_unwind_pr_common+0x1fc>
 8000c32:	465c      	mov	r4, fp
 8000c34:	4648      	mov	r0, r9
 8000c36:	210d      	movs	r1, #13
 8000c38:	f7ff fe92 	bl	8000960 <_Unwind_GetGR>
 8000c3c:	9b06      	ldr	r3, [sp, #24]
 8000c3e:	6228      	str	r0, [r5, #32]
 8000c40:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c42:	626b      	str	r3, [r5, #36]	; 0x24
 8000c44:	2006      	movs	r0, #6
 8000c46:	e75f      	b.n	8000b08 <__gnu_unwind_pr_common+0xd0>
 8000c48:	210f      	movs	r1, #15
 8000c4a:	4648      	mov	r0, r9
 8000c4c:	f7ff fe88 	bl	8000960 <_Unwind_GetGR>
 8000c50:	210e      	movs	r1, #14
 8000c52:	4602      	mov	r2, r0
 8000c54:	4648      	mov	r0, r9
 8000c56:	f7ff fea9 	bl	80009ac <_Unwind_SetGR>
 8000c5a:	4648      	mov	r0, r9
 8000c5c:	4a29      	ldr	r2, [pc, #164]	; (8000d04 <__gnu_unwind_pr_common+0x2cc>)
 8000c5e:	210f      	movs	r1, #15
 8000c60:	f7ff fea4 	bl	80009ac <_Unwind_SetGR>
 8000c64:	2007      	movs	r0, #7
 8000c66:	e74f      	b.n	8000b08 <__gnu_unwind_pr_common+0xd0>
 8000c68:	4607      	mov	r7, r0
 8000c6a:	210d      	movs	r1, #13
 8000c6c:	4648      	mov	r0, r9
 8000c6e:	f7ff fe77 	bl	8000960 <_Unwind_GetGR>
 8000c72:	2f02      	cmp	r7, #2
 8000c74:	6228      	str	r0, [r5, #32]
 8000c76:	d11d      	bne.n	8000cb4 <__gnu_unwind_pr_common+0x27c>
 8000c78:	462b      	mov	r3, r5
 8000c7a:	9a06      	ldr	r2, [sp, #24]
 8000c7c:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000c80:	626b      	str	r3, [r5, #36]	; 0x24
 8000c82:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c84:	2006      	movs	r0, #6
 8000c86:	e73f      	b.n	8000b08 <__gnu_unwind_pr_common+0xd0>
 8000c88:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c8a:	429c      	cmp	r4, r3
 8000c8c:	d1a3      	bne.n	8000bd6 <__gnu_unwind_pr_common+0x19e>
 8000c8e:	2204      	movs	r2, #4
 8000c90:	2700      	movs	r7, #0
 8000c92:	18a3      	adds	r3, r4, r2
 8000c94:	9902      	ldr	r1, [sp, #8]
 8000c96:	62a9      	str	r1, [r5, #40]	; 0x28
 8000c98:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000c9a:	632a      	str	r2, [r5, #48]	; 0x30
 8000c9c:	636b      	str	r3, [r5, #52]	; 0x34
 8000c9e:	6823      	ldr	r3, [r4, #0]
 8000ca0:	42bb      	cmp	r3, r7
 8000ca2:	db1d      	blt.n	8000ce0 <__gnu_unwind_pr_common+0x2a8>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	e720      	b.n	8000aec <__gnu_unwind_pr_common+0xb4>
 8000caa:	4648      	mov	r0, r9
 8000cac:	210d      	movs	r1, #13
 8000cae:	f7ff fe57 	bl	8000960 <_Unwind_GetGR>
 8000cb2:	6228      	str	r0, [r5, #32]
 8000cb4:	9b06      	ldr	r3, [sp, #24]
 8000cb6:	626b      	str	r3, [r5, #36]	; 0x24
 8000cb8:	e7e3      	b.n	8000c82 <__gnu_unwind_pr_common+0x24a>
 8000cba:	4620      	mov	r0, r4
 8000cbc:	f7ff fc68 	bl	8000590 <selfrel_offset31>
 8000cc0:	3404      	adds	r4, #4
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	63ac      	str	r4, [r5, #56]	; 0x38
 8000cc6:	4628      	mov	r0, r5
 8000cc8:	f005 fc66 	bl	8006598 <__cxa_begin_cleanup>
 8000ccc:	2800      	cmp	r0, #0
 8000cce:	f43f af1a 	beq.w	8000b06 <__gnu_unwind_pr_common+0xce>
 8000cd2:	4648      	mov	r0, r9
 8000cd4:	4632      	mov	r2, r6
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f7ff fe68 	bl	80009ac <_Unwind_SetGR>
 8000cdc:	2007      	movs	r0, #7
 8000cde:	e713      	b.n	8000b08 <__gnu_unwind_pr_common+0xd0>
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	3001      	adds	r0, #1
 8000ce4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000ce8:	f7ff fc52 	bl	8000590 <selfrel_offset31>
 8000cec:	210f      	movs	r1, #15
 8000cee:	4602      	mov	r2, r0
 8000cf0:	4648      	mov	r0, r9
 8000cf2:	f7ff fe5b 	bl	80009ac <_Unwind_SetGR>
 8000cf6:	4648      	mov	r0, r9
 8000cf8:	462a      	mov	r2, r5
 8000cfa:	4639      	mov	r1, r7
 8000cfc:	f7ff fe56 	bl	80009ac <_Unwind_SetGR>
 8000d00:	2007      	movs	r0, #7
 8000d02:	e701      	b.n	8000b08 <__gnu_unwind_pr_common+0xd0>
 8000d04:	08006ca7 	.word	0x08006ca7

08000d08 <__aeabi_unwind_cpp_pr0>:
 8000d08:	2300      	movs	r3, #0
 8000d0a:	e695      	b.n	8000a38 <__gnu_unwind_pr_common>

08000d0c <__aeabi_unwind_cpp_pr1>:
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e693      	b.n	8000a38 <__gnu_unwind_pr_common>

08000d10 <__aeabi_unwind_cpp_pr2>:
 8000d10:	2302      	movs	r3, #2
 8000d12:	e691      	b.n	8000a38 <__gnu_unwind_pr_common>

08000d14 <_Unwind_VRS_Pop>:
 8000d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d16:	4604      	mov	r4, r0
 8000d18:	b0c5      	sub	sp, #276	; 0x114
 8000d1a:	2904      	cmp	r1, #4
 8000d1c:	d80d      	bhi.n	8000d3a <_Unwind_VRS_Pop+0x26>
 8000d1e:	e8df f001 	tbb	[pc, r1]
 8000d22:	0353      	.short	0x0353
 8000d24:	310c      	.short	0x310c
 8000d26:	0f          	.byte	0x0f
 8000d27:	00          	.byte	0x00
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000d2e:	b295      	uxth	r5, r2
 8000d30:	d162      	bne.n	8000df8 <_Unwind_VRS_Pop+0xe4>
 8000d32:	1972      	adds	r2, r6, r5
 8000d34:	2a10      	cmp	r2, #16
 8000d36:	f240 809b 	bls.w	8000e70 <_Unwind_VRS_Pop+0x15c>
 8000d3a:	2002      	movs	r0, #2
 8000d3c:	b045      	add	sp, #276	; 0x114
 8000d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1fa      	bne.n	8000d3a <_Unwind_VRS_Pop+0x26>
 8000d44:	2a10      	cmp	r2, #16
 8000d46:	d8f8      	bhi.n	8000d3a <_Unwind_VRS_Pop+0x26>
 8000d48:	6823      	ldr	r3, [r4, #0]
 8000d4a:	06d8      	lsls	r0, r3, #27
 8000d4c:	f100 80c6 	bmi.w	8000edc <_Unwind_VRS_Pop+0x1c8>
 8000d50:	ae22      	add	r6, sp, #136	; 0x88
 8000d52:	4630      	mov	r0, r6
 8000d54:	9201      	str	r2, [sp, #4]
 8000d56:	f000 f973 	bl	8001040 <__gnu_Unwind_Save_WMMXC>
 8000d5a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d5c:	9a01      	ldr	r2, [sp, #4]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	2501      	movs	r5, #1
 8000d62:	fa05 f103 	lsl.w	r1, r5, r3
 8000d66:	4211      	tst	r1, r2
 8000d68:	d003      	beq.n	8000d72 <_Unwind_VRS_Pop+0x5e>
 8000d6a:	6801      	ldr	r1, [r0, #0]
 8000d6c:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000d70:	3004      	adds	r0, #4
 8000d72:	3301      	adds	r3, #1
 8000d74:	2b04      	cmp	r3, #4
 8000d76:	d1f4      	bne.n	8000d62 <_Unwind_VRS_Pop+0x4e>
 8000d78:	63a0      	str	r0, [r4, #56]	; 0x38
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	f000 f956 	bl	800102c <__gnu_Unwind_Restore_WMMXC>
 8000d80:	2000      	movs	r0, #0
 8000d82:	e7db      	b.n	8000d3c <_Unwind_VRS_Pop+0x28>
 8000d84:	2b03      	cmp	r3, #3
 8000d86:	d1d8      	bne.n	8000d3a <_Unwind_VRS_Pop+0x26>
 8000d88:	0c15      	lsrs	r5, r2, #16
 8000d8a:	b297      	uxth	r7, r2
 8000d8c:	19eb      	adds	r3, r5, r7
 8000d8e:	2b10      	cmp	r3, #16
 8000d90:	d8d3      	bhi.n	8000d3a <_Unwind_VRS_Pop+0x26>
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	071e      	lsls	r6, r3, #28
 8000d96:	f100 80b5 	bmi.w	8000f04 <_Unwind_VRS_Pop+0x1f0>
 8000d9a:	ae22      	add	r6, sp, #136	; 0x88
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	f000 f923 	bl	8000fe8 <__gnu_Unwind_Save_WMMXD>
 8000da2:	00ed      	lsls	r5, r5, #3
 8000da4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000da6:	b14f      	cbz	r7, 8000dbc <_Unwind_VRS_Pop+0xa8>
 8000da8:	3d04      	subs	r5, #4
 8000daa:	1971      	adds	r1, r6, r5
 8000dac:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8000db4:	f841 2f04 	str.w	r2, [r1, #4]!
 8000db8:	4283      	cmp	r3, r0
 8000dba:	d1f9      	bne.n	8000db0 <_Unwind_VRS_Pop+0x9c>
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	63a3      	str	r3, [r4, #56]	; 0x38
 8000dc0:	f000 f8f0 	bl	8000fa4 <__gnu_Unwind_Restore_WMMXD>
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	e7b9      	b.n	8000d3c <_Unwind_VRS_Pop+0x28>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1b6      	bne.n	8000d3a <_Unwind_VRS_Pop+0x26>
 8000dcc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000dce:	b297      	uxth	r7, r2
 8000dd0:	1d20      	adds	r0, r4, #4
 8000dd2:	2601      	movs	r6, #1
 8000dd4:	fa06 f103 	lsl.w	r1, r6, r3
 8000dd8:	4239      	tst	r1, r7
 8000dda:	f103 0301 	add.w	r3, r3, #1
 8000dde:	d002      	beq.n	8000de6 <_Unwind_VRS_Pop+0xd2>
 8000de0:	6829      	ldr	r1, [r5, #0]
 8000de2:	6001      	str	r1, [r0, #0]
 8000de4:	3504      	adds	r5, #4
 8000de6:	2b10      	cmp	r3, #16
 8000de8:	f100 0004 	add.w	r0, r0, #4
 8000dec:	d1f2      	bne.n	8000dd4 <_Unwind_VRS_Pop+0xc0>
 8000dee:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000df2:	d13b      	bne.n	8000e6c <_Unwind_VRS_Pop+0x158>
 8000df4:	63a5      	str	r5, [r4, #56]	; 0x38
 8000df6:	e7a1      	b.n	8000d3c <_Unwind_VRS_Pop+0x28>
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	d19e      	bne.n	8000d3a <_Unwind_VRS_Pop+0x26>
 8000dfc:	1977      	adds	r7, r6, r5
 8000dfe:	2f20      	cmp	r7, #32
 8000e00:	d89b      	bhi.n	8000d3a <_Unwind_VRS_Pop+0x26>
 8000e02:	2e0f      	cmp	r6, #15
 8000e04:	d966      	bls.n	8000ed4 <_Unwind_VRS_Pop+0x1c0>
 8000e06:	462f      	mov	r7, r5
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d13a      	bne.n	8000e82 <_Unwind_VRS_Pop+0x16e>
 8000e0c:	462a      	mov	r2, r5
 8000e0e:	2700      	movs	r7, #0
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e14:	dd72      	ble.n	8000efc <_Unwind_VRS_Pop+0x1e8>
 8000e16:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000e1a:	4601      	mov	r1, r0
 8000e1c:	a844      	add	r0, sp, #272	; 0x110
 8000e1e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000e22:	388c      	subs	r0, #140	; 0x8c
 8000e24:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e28:	f840 5f04 	str.w	r5, [r0, #4]!
 8000e2c:	4291      	cmp	r1, r2
 8000e2e:	d1f9      	bne.n	8000e24 <_Unwind_VRS_Pop+0x110>
 8000e30:	4608      	mov	r0, r1
 8000e32:	b197      	cbz	r7, 8000e5a <_Unwind_VRS_Pop+0x146>
 8000e34:	2e10      	cmp	r6, #16
 8000e36:	4632      	mov	r2, r6
 8000e38:	a944      	add	r1, sp, #272	; 0x110
 8000e3a:	bf38      	it	cc
 8000e3c:	2210      	movcc	r2, #16
 8000e3e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000e42:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000e46:	0079      	lsls	r1, r7, #1
 8000e48:	3a04      	subs	r2, #4
 8000e4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000e4e:	f850 5b04 	ldr.w	r5, [r0], #4
 8000e52:	f842 5f04 	str.w	r5, [r2, #4]!
 8000e56:	4288      	cmp	r0, r1
 8000e58:	d1f9      	bne.n	8000e4e <_Unwind_VRS_Pop+0x13a>
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d048      	beq.n	8000ef0 <_Unwind_VRS_Pop+0x1dc>
 8000e5e:	2e0f      	cmp	r6, #15
 8000e60:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e62:	d933      	bls.n	8000ecc <_Unwind_VRS_Pop+0x1b8>
 8000e64:	b117      	cbz	r7, 8000e6c <_Unwind_VRS_Pop+0x158>
 8000e66:	a802      	add	r0, sp, #8
 8000e68:	f000 f894 	bl	8000f94 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	e765      	b.n	8000d3c <_Unwind_VRS_Pop+0x28>
 8000e70:	2e0f      	cmp	r6, #15
 8000e72:	f63f af62 	bhi.w	8000d3a <_Unwind_VRS_Pop+0x26>
 8000e76:	2700      	movs	r7, #0
 8000e78:	6822      	ldr	r2, [r4, #0]
 8000e7a:	07d1      	lsls	r1, r2, #31
 8000e7c:	d417      	bmi.n	8000eae <_Unwind_VRS_Pop+0x19a>
 8000e7e:	2f00      	cmp	r7, #0
 8000e80:	d060      	beq.n	8000f44 <_Unwind_VRS_Pop+0x230>
 8000e82:	6822      	ldr	r2, [r4, #0]
 8000e84:	0751      	lsls	r1, r2, #29
 8000e86:	d445      	bmi.n	8000f14 <_Unwind_VRS_Pop+0x200>
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d04d      	beq.n	8000f28 <_Unwind_VRS_Pop+0x214>
 8000e8c:	2e0f      	cmp	r6, #15
 8000e8e:	d806      	bhi.n	8000e9e <_Unwind_VRS_Pop+0x18a>
 8000e90:	a822      	add	r0, sp, #136	; 0x88
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	f000 f87a 	bl	8000f8c <__gnu_Unwind_Save_VFP_D>
 8000e98:	9b01      	ldr	r3, [sp, #4]
 8000e9a:	2f00      	cmp	r7, #0
 8000e9c:	d0b6      	beq.n	8000e0c <_Unwind_VRS_Pop+0xf8>
 8000e9e:	a802      	add	r0, sp, #8
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	f000 f87b 	bl	8000f9c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ea6:	9b01      	ldr	r3, [sp, #4]
 8000ea8:	f1c6 0210 	rsb	r2, r6, #16
 8000eac:	e7b0      	b.n	8000e10 <_Unwind_VRS_Pop+0xfc>
 8000eae:	f022 0101 	bic.w	r1, r2, #1
 8000eb2:	2b05      	cmp	r3, #5
 8000eb4:	6021      	str	r1, [r4, #0]
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	4620      	mov	r0, r4
 8000eba:	d03b      	beq.n	8000f34 <_Unwind_VRS_Pop+0x220>
 8000ebc:	f022 0203 	bic.w	r2, r2, #3
 8000ec0:	f840 2b48 	str.w	r2, [r0], #72
 8000ec4:	f000 f85a 	bl	8000f7c <__gnu_Unwind_Save_VFP>
 8000ec8:	9b01      	ldr	r3, [sp, #4]
 8000eca:	e7d8      	b.n	8000e7e <_Unwind_VRS_Pop+0x16a>
 8000ecc:	a822      	add	r0, sp, #136	; 0x88
 8000ece:	f000 f859 	bl	8000f84 <__gnu_Unwind_Restore_VFP_D>
 8000ed2:	e7c7      	b.n	8000e64 <_Unwind_VRS_Pop+0x150>
 8000ed4:	2f10      	cmp	r7, #16
 8000ed6:	d9ce      	bls.n	8000e76 <_Unwind_VRS_Pop+0x162>
 8000ed8:	3f10      	subs	r7, #16
 8000eda:	e7cd      	b.n	8000e78 <_Unwind_VRS_Pop+0x164>
 8000edc:	f023 0310 	bic.w	r3, r3, #16
 8000ee0:	6023      	str	r3, [r4, #0]
 8000ee2:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000ee6:	9201      	str	r2, [sp, #4]
 8000ee8:	f000 f8aa 	bl	8001040 <__gnu_Unwind_Save_WMMXC>
 8000eec:	9a01      	ldr	r2, [sp, #4]
 8000eee:	e72f      	b.n	8000d50 <_Unwind_VRS_Pop+0x3c>
 8000ef0:	3104      	adds	r1, #4
 8000ef2:	63a1      	str	r1, [r4, #56]	; 0x38
 8000ef4:	a822      	add	r0, sp, #136	; 0x88
 8000ef6:	f000 f83d 	bl	8000f74 <__gnu_Unwind_Restore_VFP>
 8000efa:	e7b7      	b.n	8000e6c <_Unwind_VRS_Pop+0x158>
 8000efc:	2f00      	cmp	r7, #0
 8000efe:	d199      	bne.n	8000e34 <_Unwind_VRS_Pop+0x120>
 8000f00:	4601      	mov	r1, r0
 8000f02:	e7aa      	b.n	8000e5a <_Unwind_VRS_Pop+0x146>
 8000f04:	f023 0308 	bic.w	r3, r3, #8
 8000f08:	6023      	str	r3, [r4, #0]
 8000f0a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000f0e:	f000 f86b 	bl	8000fe8 <__gnu_Unwind_Save_WMMXD>
 8000f12:	e742      	b.n	8000d9a <_Unwind_VRS_Pop+0x86>
 8000f14:	4620      	mov	r0, r4
 8000f16:	f022 0204 	bic.w	r2, r2, #4
 8000f1a:	f840 2bd0 	str.w	r2, [r0], #208
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	f000 f83c 	bl	8000f9c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f24:	9b01      	ldr	r3, [sp, #4]
 8000f26:	e7af      	b.n	8000e88 <_Unwind_VRS_Pop+0x174>
 8000f28:	a822      	add	r0, sp, #136	; 0x88
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	f000 f826 	bl	8000f7c <__gnu_Unwind_Save_VFP>
 8000f30:	9b01      	ldr	r3, [sp, #4]
 8000f32:	e7b9      	b.n	8000ea8 <_Unwind_VRS_Pop+0x194>
 8000f34:	f041 0102 	orr.w	r1, r1, #2
 8000f38:	f840 1b48 	str.w	r1, [r0], #72
 8000f3c:	f000 f826 	bl	8000f8c <__gnu_Unwind_Save_VFP_D>
 8000f40:	9b01      	ldr	r3, [sp, #4]
 8000f42:	e79c      	b.n	8000e7e <_Unwind_VRS_Pop+0x16a>
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d003      	beq.n	8000f50 <_Unwind_VRS_Pop+0x23c>
 8000f48:	2e0f      	cmp	r6, #15
 8000f4a:	f63f af5f 	bhi.w	8000e0c <_Unwind_VRS_Pop+0xf8>
 8000f4e:	e79f      	b.n	8000e90 <_Unwind_VRS_Pop+0x17c>
 8000f50:	a822      	add	r0, sp, #136	; 0x88
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	f000 f812 	bl	8000f7c <__gnu_Unwind_Save_VFP>
 8000f58:	9b01      	ldr	r3, [sp, #4]
 8000f5a:	e757      	b.n	8000e0c <_Unwind_VRS_Pop+0xf8>

08000f5c <__restore_core_regs>:
 8000f5c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000f60:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000f64:	469c      	mov	ip, r3
 8000f66:	46a6      	mov	lr, r4
 8000f68:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000f6c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000f70:	46e5      	mov	sp, ip
 8000f72:	bd00      	pop	{pc}

08000f74 <__gnu_Unwind_Restore_VFP>:
 8000f74:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <__gnu_Unwind_Save_VFP>:
 8000f7c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <__gnu_Unwind_Restore_VFP_D>:
 8000f84:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__gnu_Unwind_Save_VFP_D>:
 8000f8c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f94:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f9c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <__gnu_Unwind_Restore_WMMXD>:
 8000fa4:	ecf0 0102 	ldfe	f0, [r0], #8
 8000fa8:	ecf0 1102 	ldfe	f1, [r0], #8
 8000fac:	ecf0 2102 	ldfe	f2, [r0], #8
 8000fb0:	ecf0 3102 	ldfe	f3, [r0], #8
 8000fb4:	ecf0 4102 	ldfe	f4, [r0], #8
 8000fb8:	ecf0 5102 	ldfe	f5, [r0], #8
 8000fbc:	ecf0 6102 	ldfe	f6, [r0], #8
 8000fc0:	ecf0 7102 	ldfe	f7, [r0], #8
 8000fc4:	ecf0 8102 	ldfp	f0, [r0], #8
 8000fc8:	ecf0 9102 	ldfp	f1, [r0], #8
 8000fcc:	ecf0 a102 	ldfp	f2, [r0], #8
 8000fd0:	ecf0 b102 	ldfp	f3, [r0], #8
 8000fd4:	ecf0 c102 	ldfp	f4, [r0], #8
 8000fd8:	ecf0 d102 	ldfp	f5, [r0], #8
 8000fdc:	ecf0 e102 	ldfp	f6, [r0], #8
 8000fe0:	ecf0 f102 	ldfp	f7, [r0], #8
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <__gnu_Unwind_Save_WMMXD>:
 8000fe8:	ece0 0102 	stfe	f0, [r0], #8
 8000fec:	ece0 1102 	stfe	f1, [r0], #8
 8000ff0:	ece0 2102 	stfe	f2, [r0], #8
 8000ff4:	ece0 3102 	stfe	f3, [r0], #8
 8000ff8:	ece0 4102 	stfe	f4, [r0], #8
 8000ffc:	ece0 5102 	stfe	f5, [r0], #8
 8001000:	ece0 6102 	stfe	f6, [r0], #8
 8001004:	ece0 7102 	stfe	f7, [r0], #8
 8001008:	ece0 8102 	stfp	f0, [r0], #8
 800100c:	ece0 9102 	stfp	f1, [r0], #8
 8001010:	ece0 a102 	stfp	f2, [r0], #8
 8001014:	ece0 b102 	stfp	f3, [r0], #8
 8001018:	ece0 c102 	stfp	f4, [r0], #8
 800101c:	ece0 d102 	stfp	f5, [r0], #8
 8001020:	ece0 e102 	stfp	f6, [r0], #8
 8001024:	ece0 f102 	stfp	f7, [r0], #8
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <__gnu_Unwind_Restore_WMMXC>:
 800102c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001030:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001034:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001038:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <__gnu_Unwind_Save_WMMXC>:
 8001040:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001044:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001048:	fca0 a101 	stc2	1, cr10, [r0], #4
 800104c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <_Unwind_RaiseException>:
 8001054:	46ec      	mov	ip, sp
 8001056:	b500      	push	{lr}
 8001058:	e92d 5000 	stmdb	sp!, {ip, lr}
 800105c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001068:	a901      	add	r1, sp, #4
 800106a:	f7ff fbf3 	bl	8000854 <__gnu_Unwind_RaiseException>
 800106e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001072:	b012      	add	sp, #72	; 0x48
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <_Unwind_Resume>:
 8001078:	46ec      	mov	ip, sp
 800107a:	b500      	push	{lr}
 800107c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001080:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001084:	f04f 0300 	mov.w	r3, #0
 8001088:	e92d 000c 	stmdb	sp!, {r2, r3}
 800108c:	a901      	add	r1, sp, #4
 800108e:	f7ff fc1b 	bl	80008c8 <__gnu_Unwind_Resume>
 8001092:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001096:	b012      	add	sp, #72	; 0x48
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <_Unwind_Resume_or_Rethrow>:
 800109c:	46ec      	mov	ip, sp
 800109e:	b500      	push	{lr}
 80010a0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010a4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010b0:	a901      	add	r1, sp, #4
 80010b2:	f7ff fc2b 	bl	800090c <__gnu_Unwind_Resume_or_Rethrow>
 80010b6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010ba:	b012      	add	sp, #72	; 0x48
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <_Unwind_ForcedUnwind>:
 80010c0:	46ec      	mov	ip, sp
 80010c2:	b500      	push	{lr}
 80010c4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010c8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010cc:	f04f 0300 	mov.w	r3, #0
 80010d0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010d4:	ab01      	add	r3, sp, #4
 80010d6:	f7ff fbed 	bl	80008b4 <__gnu_Unwind_ForcedUnwind>
 80010da:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010de:	b012      	add	sp, #72	; 0x48
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop

080010e4 <_Unwind_Backtrace>:
 80010e4:	46ec      	mov	ip, sp
 80010e6:	b500      	push	{lr}
 80010e8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010ec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010f8:	aa01      	add	r2, sp, #4
 80010fa:	f7ff fc65 	bl	80009c8 <__gnu_Unwind_Backtrace>
 80010fe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001102:	b012      	add	sp, #72	; 0x48
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop

08001108 <next_unwind_byte>:
 8001108:	7a02      	ldrb	r2, [r0, #8]
 800110a:	b91a      	cbnz	r2, 8001114 <next_unwind_byte+0xc>
 800110c:	7a43      	ldrb	r3, [r0, #9]
 800110e:	b943      	cbnz	r3, 8001122 <next_unwind_byte+0x1a>
 8001110:	20b0      	movs	r0, #176	; 0xb0
 8001112:	4770      	bx	lr
 8001114:	6803      	ldr	r3, [r0, #0]
 8001116:	3a01      	subs	r2, #1
 8001118:	7202      	strb	r2, [r0, #8]
 800111a:	021a      	lsls	r2, r3, #8
 800111c:	6002      	str	r2, [r0, #0]
 800111e:	0e18      	lsrs	r0, r3, #24
 8001120:	4770      	bx	lr
 8001122:	6842      	ldr	r2, [r0, #4]
 8001124:	3b01      	subs	r3, #1
 8001126:	b410      	push	{r4}
 8001128:	7243      	strb	r3, [r0, #9]
 800112a:	6813      	ldr	r3, [r2, #0]
 800112c:	2103      	movs	r1, #3
 800112e:	1d14      	adds	r4, r2, #4
 8001130:	7201      	strb	r1, [r0, #8]
 8001132:	021a      	lsls	r2, r3, #8
 8001134:	6044      	str	r4, [r0, #4]
 8001136:	6002      	str	r2, [r0, #0]
 8001138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800113c:	0e18      	lsrs	r0, r3, #24
 800113e:	4770      	bx	lr

08001140 <_Unwind_GetGR.constprop.0>:
 8001140:	b500      	push	{lr}
 8001142:	b085      	sub	sp, #20
 8001144:	aa03      	add	r2, sp, #12
 8001146:	2300      	movs	r3, #0
 8001148:	9200      	str	r2, [sp, #0]
 800114a:	4619      	mov	r1, r3
 800114c:	220c      	movs	r2, #12
 800114e:	f7ff fbed 	bl	800092c <_Unwind_VRS_Get>
 8001152:	9803      	ldr	r0, [sp, #12]
 8001154:	b005      	add	sp, #20
 8001156:	f85d fb04 	ldr.w	pc, [sp], #4
 800115a:	bf00      	nop

0800115c <unwind_UCB_from_context>:
 800115c:	e7f0      	b.n	8001140 <_Unwind_GetGR.constprop.0>
 800115e:	bf00      	nop

08001160 <__gnu_unwind_execute>:
 8001160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001164:	4606      	mov	r6, r0
 8001166:	b085      	sub	sp, #20
 8001168:	460f      	mov	r7, r1
 800116a:	f04f 0800 	mov.w	r8, #0
 800116e:	4638      	mov	r0, r7
 8001170:	f7ff ffca 	bl	8001108 <next_unwind_byte>
 8001174:	28b0      	cmp	r0, #176	; 0xb0
 8001176:	4604      	mov	r4, r0
 8001178:	d023      	beq.n	80011c2 <__gnu_unwind_execute+0x62>
 800117a:	0605      	lsls	r5, r0, #24
 800117c:	d427      	bmi.n	80011ce <__gnu_unwind_execute+0x6e>
 800117e:	2300      	movs	r3, #0
 8001180:	f10d 090c 	add.w	r9, sp, #12
 8001184:	4619      	mov	r1, r3
 8001186:	0085      	lsls	r5, r0, #2
 8001188:	220d      	movs	r2, #13
 800118a:	f8cd 9000 	str.w	r9, [sp]
 800118e:	4630      	mov	r0, r6
 8001190:	f7ff fbcc 	bl	800092c <_Unwind_VRS_Get>
 8001194:	b2ed      	uxtb	r5, r5
 8001196:	9b03      	ldr	r3, [sp, #12]
 8001198:	f8cd 9000 	str.w	r9, [sp]
 800119c:	0660      	lsls	r0, r4, #25
 800119e:	f105 0504 	add.w	r5, r5, #4
 80011a2:	bf4c      	ite	mi
 80011a4:	1b5d      	submi	r5, r3, r5
 80011a6:	18ed      	addpl	r5, r5, r3
 80011a8:	2300      	movs	r3, #0
 80011aa:	4619      	mov	r1, r3
 80011ac:	220d      	movs	r2, #13
 80011ae:	4630      	mov	r0, r6
 80011b0:	9503      	str	r5, [sp, #12]
 80011b2:	f7ff fbe1 	bl	8000978 <_Unwind_VRS_Set>
 80011b6:	4638      	mov	r0, r7
 80011b8:	f7ff ffa6 	bl	8001108 <next_unwind_byte>
 80011bc:	28b0      	cmp	r0, #176	; 0xb0
 80011be:	4604      	mov	r4, r0
 80011c0:	d1db      	bne.n	800117a <__gnu_unwind_execute+0x1a>
 80011c2:	f1b8 0f00 	cmp.w	r8, #0
 80011c6:	f000 8095 	beq.w	80012f4 <__gnu_unwind_execute+0x194>
 80011ca:	2000      	movs	r0, #0
 80011cc:	e01c      	b.n	8001208 <__gnu_unwind_execute+0xa8>
 80011ce:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80011d2:	2b80      	cmp	r3, #128	; 0x80
 80011d4:	d05d      	beq.n	8001292 <__gnu_unwind_execute+0x132>
 80011d6:	2b90      	cmp	r3, #144	; 0x90
 80011d8:	d019      	beq.n	800120e <__gnu_unwind_execute+0xae>
 80011da:	2ba0      	cmp	r3, #160	; 0xa0
 80011dc:	d02c      	beq.n	8001238 <__gnu_unwind_execute+0xd8>
 80011de:	2bb0      	cmp	r3, #176	; 0xb0
 80011e0:	d03f      	beq.n	8001262 <__gnu_unwind_execute+0x102>
 80011e2:	2bc0      	cmp	r3, #192	; 0xc0
 80011e4:	d06c      	beq.n	80012c0 <__gnu_unwind_execute+0x160>
 80011e6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80011ea:	2bd0      	cmp	r3, #208	; 0xd0
 80011ec:	d10b      	bne.n	8001206 <__gnu_unwind_execute+0xa6>
 80011ee:	f000 0207 	and.w	r2, r0, #7
 80011f2:	3201      	adds	r2, #1
 80011f4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011f8:	2305      	movs	r3, #5
 80011fa:	2101      	movs	r1, #1
 80011fc:	4630      	mov	r0, r6
 80011fe:	f7ff fd89 	bl	8000d14 <_Unwind_VRS_Pop>
 8001202:	2800      	cmp	r0, #0
 8001204:	d0b3      	beq.n	800116e <__gnu_unwind_execute+0xe>
 8001206:	2009      	movs	r0, #9
 8001208:	b005      	add	sp, #20
 800120a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800120e:	f000 030d 	and.w	r3, r0, #13
 8001212:	2b0d      	cmp	r3, #13
 8001214:	d0f7      	beq.n	8001206 <__gnu_unwind_execute+0xa6>
 8001216:	ad03      	add	r5, sp, #12
 8001218:	2300      	movs	r3, #0
 800121a:	f000 020f 	and.w	r2, r0, #15
 800121e:	4619      	mov	r1, r3
 8001220:	9500      	str	r5, [sp, #0]
 8001222:	4630      	mov	r0, r6
 8001224:	f7ff fb82 	bl	800092c <_Unwind_VRS_Get>
 8001228:	2300      	movs	r3, #0
 800122a:	9500      	str	r5, [sp, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	220d      	movs	r2, #13
 8001230:	4630      	mov	r0, r6
 8001232:	f7ff fba1 	bl	8000978 <_Unwind_VRS_Set>
 8001236:	e79a      	b.n	800116e <__gnu_unwind_execute+0xe>
 8001238:	43c2      	mvns	r2, r0
 800123a:	f002 0307 	and.w	r3, r2, #7
 800123e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001242:	411a      	asrs	r2, r3
 8001244:	0701      	lsls	r1, r0, #28
 8001246:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800124a:	f04f 0300 	mov.w	r3, #0
 800124e:	bf48      	it	mi
 8001250:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001254:	4619      	mov	r1, r3
 8001256:	4630      	mov	r0, r6
 8001258:	f7ff fd5c 	bl	8000d14 <_Unwind_VRS_Pop>
 800125c:	2800      	cmp	r0, #0
 800125e:	d1d2      	bne.n	8001206 <__gnu_unwind_execute+0xa6>
 8001260:	e785      	b.n	800116e <__gnu_unwind_execute+0xe>
 8001262:	28b1      	cmp	r0, #177	; 0xb1
 8001264:	d057      	beq.n	8001316 <__gnu_unwind_execute+0x1b6>
 8001266:	28b2      	cmp	r0, #178	; 0xb2
 8001268:	d068      	beq.n	800133c <__gnu_unwind_execute+0x1dc>
 800126a:	28b3      	cmp	r0, #179	; 0xb3
 800126c:	f000 8095 	beq.w	800139a <__gnu_unwind_execute+0x23a>
 8001270:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001274:	2bb4      	cmp	r3, #180	; 0xb4
 8001276:	d0c6      	beq.n	8001206 <__gnu_unwind_execute+0xa6>
 8001278:	f000 0207 	and.w	r2, r0, #7
 800127c:	3201      	adds	r2, #1
 800127e:	2301      	movs	r3, #1
 8001280:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001284:	4619      	mov	r1, r3
 8001286:	4630      	mov	r0, r6
 8001288:	f7ff fd44 	bl	8000d14 <_Unwind_VRS_Pop>
 800128c:	2800      	cmp	r0, #0
 800128e:	d1ba      	bne.n	8001206 <__gnu_unwind_execute+0xa6>
 8001290:	e76d      	b.n	800116e <__gnu_unwind_execute+0xe>
 8001292:	4638      	mov	r0, r7
 8001294:	f7ff ff38 	bl	8001108 <next_unwind_byte>
 8001298:	0224      	lsls	r4, r4, #8
 800129a:	4304      	orrs	r4, r0
 800129c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80012a0:	d0b1      	beq.n	8001206 <__gnu_unwind_execute+0xa6>
 80012a2:	0124      	lsls	r4, r4, #4
 80012a4:	2300      	movs	r3, #0
 80012a6:	b2a2      	uxth	r2, r4
 80012a8:	4619      	mov	r1, r3
 80012aa:	4630      	mov	r0, r6
 80012ac:	f7ff fd32 	bl	8000d14 <_Unwind_VRS_Pop>
 80012b0:	2800      	cmp	r0, #0
 80012b2:	d1a8      	bne.n	8001206 <__gnu_unwind_execute+0xa6>
 80012b4:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80012b8:	bf18      	it	ne
 80012ba:	f04f 0801 	movne.w	r8, #1
 80012be:	e756      	b.n	800116e <__gnu_unwind_execute+0xe>
 80012c0:	28c6      	cmp	r0, #198	; 0xc6
 80012c2:	d07d      	beq.n	80013c0 <__gnu_unwind_execute+0x260>
 80012c4:	28c7      	cmp	r0, #199	; 0xc7
 80012c6:	f000 8086 	beq.w	80013d6 <__gnu_unwind_execute+0x276>
 80012ca:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80012ce:	2bc0      	cmp	r3, #192	; 0xc0
 80012d0:	f000 8094 	beq.w	80013fc <__gnu_unwind_execute+0x29c>
 80012d4:	28c8      	cmp	r0, #200	; 0xc8
 80012d6:	f000 809f 	beq.w	8001418 <__gnu_unwind_execute+0x2b8>
 80012da:	28c9      	cmp	r0, #201	; 0xc9
 80012dc:	d193      	bne.n	8001206 <__gnu_unwind_execute+0xa6>
 80012de:	4638      	mov	r0, r7
 80012e0:	f7ff ff12 	bl	8001108 <next_unwind_byte>
 80012e4:	0302      	lsls	r2, r0, #12
 80012e6:	f000 000f 	and.w	r0, r0, #15
 80012ea:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80012ee:	3001      	adds	r0, #1
 80012f0:	4302      	orrs	r2, r0
 80012f2:	e781      	b.n	80011f8 <__gnu_unwind_execute+0x98>
 80012f4:	ac03      	add	r4, sp, #12
 80012f6:	4643      	mov	r3, r8
 80012f8:	220e      	movs	r2, #14
 80012fa:	4641      	mov	r1, r8
 80012fc:	9400      	str	r4, [sp, #0]
 80012fe:	4630      	mov	r0, r6
 8001300:	f7ff fb14 	bl	800092c <_Unwind_VRS_Get>
 8001304:	9400      	str	r4, [sp, #0]
 8001306:	4630      	mov	r0, r6
 8001308:	4643      	mov	r3, r8
 800130a:	220f      	movs	r2, #15
 800130c:	4641      	mov	r1, r8
 800130e:	f7ff fb33 	bl	8000978 <_Unwind_VRS_Set>
 8001312:	4640      	mov	r0, r8
 8001314:	e778      	b.n	8001208 <__gnu_unwind_execute+0xa8>
 8001316:	4638      	mov	r0, r7
 8001318:	f7ff fef6 	bl	8001108 <next_unwind_byte>
 800131c:	2800      	cmp	r0, #0
 800131e:	f43f af72 	beq.w	8001206 <__gnu_unwind_execute+0xa6>
 8001322:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001326:	f47f af6e 	bne.w	8001206 <__gnu_unwind_execute+0xa6>
 800132a:	4602      	mov	r2, r0
 800132c:	4619      	mov	r1, r3
 800132e:	4630      	mov	r0, r6
 8001330:	f7ff fcf0 	bl	8000d14 <_Unwind_VRS_Pop>
 8001334:	2800      	cmp	r0, #0
 8001336:	f47f af66 	bne.w	8001206 <__gnu_unwind_execute+0xa6>
 800133a:	e718      	b.n	800116e <__gnu_unwind_execute+0xe>
 800133c:	2300      	movs	r3, #0
 800133e:	f10d 090c 	add.w	r9, sp, #12
 8001342:	220d      	movs	r2, #13
 8001344:	4619      	mov	r1, r3
 8001346:	f8cd 9000 	str.w	r9, [sp]
 800134a:	4630      	mov	r0, r6
 800134c:	f7ff faee 	bl	800092c <_Unwind_VRS_Get>
 8001350:	4638      	mov	r0, r7
 8001352:	f7ff fed9 	bl	8001108 <next_unwind_byte>
 8001356:	0602      	lsls	r2, r0, #24
 8001358:	f04f 0402 	mov.w	r4, #2
 800135c:	d50c      	bpl.n	8001378 <__gnu_unwind_execute+0x218>
 800135e:	9b03      	ldr	r3, [sp, #12]
 8001360:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001364:	40a0      	lsls	r0, r4
 8001366:	4403      	add	r3, r0
 8001368:	4638      	mov	r0, r7
 800136a:	9303      	str	r3, [sp, #12]
 800136c:	f7ff fecc 	bl	8001108 <next_unwind_byte>
 8001370:	0603      	lsls	r3, r0, #24
 8001372:	f104 0407 	add.w	r4, r4, #7
 8001376:	d4f2      	bmi.n	800135e <__gnu_unwind_execute+0x1fe>
 8001378:	9b03      	ldr	r3, [sp, #12]
 800137a:	f8cd 9000 	str.w	r9, [sp]
 800137e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001382:	40a2      	lsls	r2, r4
 8001384:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001388:	2300      	movs	r3, #0
 800138a:	4414      	add	r4, r2
 800138c:	4619      	mov	r1, r3
 800138e:	220d      	movs	r2, #13
 8001390:	4630      	mov	r0, r6
 8001392:	9403      	str	r4, [sp, #12]
 8001394:	f7ff faf0 	bl	8000978 <_Unwind_VRS_Set>
 8001398:	e6e9      	b.n	800116e <__gnu_unwind_execute+0xe>
 800139a:	4638      	mov	r0, r7
 800139c:	f7ff feb4 	bl	8001108 <next_unwind_byte>
 80013a0:	0301      	lsls	r1, r0, #12
 80013a2:	f000 000f 	and.w	r0, r0, #15
 80013a6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80013aa:	1c42      	adds	r2, r0, #1
 80013ac:	2301      	movs	r3, #1
 80013ae:	430a      	orrs	r2, r1
 80013b0:	4630      	mov	r0, r6
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fcae 	bl	8000d14 <_Unwind_VRS_Pop>
 80013b8:	2800      	cmp	r0, #0
 80013ba:	f47f af24 	bne.w	8001206 <__gnu_unwind_execute+0xa6>
 80013be:	e6d6      	b.n	800116e <__gnu_unwind_execute+0xe>
 80013c0:	4638      	mov	r0, r7
 80013c2:	f7ff fea1 	bl	8001108 <next_unwind_byte>
 80013c6:	0301      	lsls	r1, r0, #12
 80013c8:	f000 000f 	and.w	r0, r0, #15
 80013cc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80013d0:	1c42      	adds	r2, r0, #1
 80013d2:	2303      	movs	r3, #3
 80013d4:	e7eb      	b.n	80013ae <__gnu_unwind_execute+0x24e>
 80013d6:	4638      	mov	r0, r7
 80013d8:	f7ff fe96 	bl	8001108 <next_unwind_byte>
 80013dc:	2800      	cmp	r0, #0
 80013de:	f43f af12 	beq.w	8001206 <__gnu_unwind_execute+0xa6>
 80013e2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80013e6:	f47f af0e 	bne.w	8001206 <__gnu_unwind_execute+0xa6>
 80013ea:	4602      	mov	r2, r0
 80013ec:	2104      	movs	r1, #4
 80013ee:	4630      	mov	r0, r6
 80013f0:	f7ff fc90 	bl	8000d14 <_Unwind_VRS_Pop>
 80013f4:	2800      	cmp	r0, #0
 80013f6:	f47f af06 	bne.w	8001206 <__gnu_unwind_execute+0xa6>
 80013fa:	e6b8      	b.n	800116e <__gnu_unwind_execute+0xe>
 80013fc:	f000 020f 	and.w	r2, r0, #15
 8001400:	3201      	adds	r2, #1
 8001402:	2303      	movs	r3, #3
 8001404:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001408:	4619      	mov	r1, r3
 800140a:	4630      	mov	r0, r6
 800140c:	f7ff fc82 	bl	8000d14 <_Unwind_VRS_Pop>
 8001410:	2800      	cmp	r0, #0
 8001412:	f47f aef8 	bne.w	8001206 <__gnu_unwind_execute+0xa6>
 8001416:	e6aa      	b.n	800116e <__gnu_unwind_execute+0xe>
 8001418:	4638      	mov	r0, r7
 800141a:	f7ff fe75 	bl	8001108 <next_unwind_byte>
 800141e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001422:	f000 030f 	and.w	r3, r0, #15
 8001426:	3210      	adds	r2, #16
 8001428:	3301      	adds	r3, #1
 800142a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800142e:	e6e3      	b.n	80011f8 <__gnu_unwind_execute+0x98>

08001430 <__gnu_unwind_frame>:
 8001430:	b510      	push	{r4, lr}
 8001432:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001434:	b084      	sub	sp, #16
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	2003      	movs	r0, #3
 800143a:	f88d 000c 	strb.w	r0, [sp, #12]
 800143e:	79dc      	ldrb	r4, [r3, #7]
 8001440:	f88d 400d 	strb.w	r4, [sp, #13]
 8001444:	0212      	lsls	r2, r2, #8
 8001446:	3308      	adds	r3, #8
 8001448:	4608      	mov	r0, r1
 800144a:	a901      	add	r1, sp, #4
 800144c:	9201      	str	r2, [sp, #4]
 800144e:	9302      	str	r3, [sp, #8]
 8001450:	f7ff fe86 	bl	8001160 <__gnu_unwind_execute>
 8001454:	b004      	add	sp, #16
 8001456:	bd10      	pop	{r4, pc}

08001458 <_Unwind_GetRegionStart>:
 8001458:	b508      	push	{r3, lr}
 800145a:	f7ff fe7f 	bl	800115c <unwind_UCB_from_context>
 800145e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001460:	bd08      	pop	{r3, pc}
 8001462:	bf00      	nop

08001464 <_Unwind_GetLanguageSpecificData>:
 8001464:	b508      	push	{r3, lr}
 8001466:	f7ff fe79 	bl	800115c <unwind_UCB_from_context>
 800146a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800146c:	79c3      	ldrb	r3, [r0, #7]
 800146e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001472:	3008      	adds	r0, #8
 8001474:	bd08      	pop	{r3, pc}
 8001476:	bf00      	nop

08001478 <_Unwind_GetTextRelBase>:
 8001478:	b508      	push	{r3, lr}
 800147a:	f005 fe11 	bl	80070a0 <abort>
 800147e:	bf00      	nop

08001480 <_Unwind_GetDataRelBase>:
 8001480:	b508      	push	{r3, lr}
 8001482:	f7ff fff9 	bl	8001478 <_Unwind_GetTextRelBase>
 8001486:	bf00      	nop

08001488 <__aeabi_idiv0>:
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop

0800148c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800148c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800148e:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <HAL_InitTick+0x3c>)
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_InitTick+0x40>)
{
 8001492:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001494:	7818      	ldrb	r0, [r3, #0]
 8001496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149a:	fbb3 f3f0 	udiv	r3, r3, r0
 800149e:	6810      	ldr	r0, [r2, #0]
 80014a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80014a4:	f000 f894 	bl	80015d0 <HAL_SYSTICK_Config>
 80014a8:	4604      	mov	r4, r0
 80014aa:	b958      	cbnz	r0, 80014c4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ac:	2d0f      	cmp	r5, #15
 80014ae:	d809      	bhi.n	80014c4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b0:	4602      	mov	r2, r0
 80014b2:	4629      	mov	r1, r5
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014b8:	f000 f84a 	bl	8001550 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <HAL_InitTick+0x44>)
 80014be:	4620      	mov	r0, r4
 80014c0:	601d      	str	r5, [r3, #0]
 80014c2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80014c4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014c6:	bd38      	pop	{r3, r4, r5, pc}
 80014c8:	2000000c 	.word	0x2000000c
 80014cc:	20000004 	.word	0x20000004
 80014d0:	20000008 	.word	0x20000008

080014d4 <HAL_Init>:
{
 80014d4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_Init+0x30>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014de:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80014e6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014ee:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f0:	2003      	movs	r0, #3
 80014f2:	f000 f81b 	bl	800152c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff ffc8 	bl	800148c <HAL_InitTick>
  HAL_MspInit();
 80014fc:	f002 f888 	bl	8003610 <HAL_MspInit>
}
 8001500:	2000      	movs	r0, #0
 8001502:	bd08      	pop	{r3, pc}
 8001504:	40023c00 	.word	0x40023c00

08001508 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001508:	4a03      	ldr	r2, [pc, #12]	; (8001518 <HAL_IncTick+0x10>)
 800150a:	4b04      	ldr	r3, [pc, #16]	; (800151c <HAL_IncTick+0x14>)
 800150c:	6811      	ldr	r1, [r2, #0]
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	440b      	add	r3, r1
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	2000039c 	.word	0x2000039c
 800151c:	20000004 	.word	0x20000004

08001520 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001520:	4b01      	ldr	r3, [pc, #4]	; (8001528 <HAL_GetTick+0x8>)
 8001522:	6818      	ldr	r0, [r3, #0]
}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	2000039c 	.word	0x2000039c

0800152c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4a07      	ldr	r2, [pc, #28]	; (800154c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800152e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001530:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001534:	041b      	lsls	r3, r3, #16
 8001536:	0c1b      	lsrs	r3, r3, #16
 8001538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800153c:	0200      	lsls	r0, r0, #8
 800153e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001542:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001546:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001548:	60d3      	str	r3, [r2, #12]
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001552:	b530      	push	{r4, r5, lr}
 8001554:	68dc      	ldr	r4, [r3, #12]
 8001556:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800155a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001560:	2b04      	cmp	r3, #4
 8001562:	bf28      	it	cs
 8001564:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001566:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	f04f 0501 	mov.w	r5, #1
 800156c:	fa05 f303 	lsl.w	r3, r5, r3
 8001570:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001574:	bf8c      	ite	hi
 8001576:	3c03      	subhi	r4, #3
 8001578:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157a:	4019      	ands	r1, r3
 800157c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800157e:	fa05 f404 	lsl.w	r4, r5, r4
 8001582:	3c01      	subs	r4, #1
 8001584:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001586:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	ea42 0201 	orr.w	r2, r2, r1
 800158c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	bfaf      	iteee	ge
 8001592:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	f000 000f 	andlt.w	r0, r0, #15
 800159a:	4b06      	ldrlt	r3, [pc, #24]	; (80015b4 <HAL_NVIC_SetPriority+0x64>)
 800159c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159e:	bfa5      	ittet	ge
 80015a0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80015a4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80015ac:	bd30      	pop	{r4, r5, pc}
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00
 80015b4:	e000ed14 	.word	0xe000ed14

080015b8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80015b8:	0942      	lsrs	r2, r0, #5
 80015ba:	2301      	movs	r3, #1
 80015bc:	f000 001f 	and.w	r0, r0, #31
 80015c0:	fa03 f000 	lsl.w	r0, r3, r0
 80015c4:	4b01      	ldr	r3, [pc, #4]	; (80015cc <HAL_NVIC_EnableIRQ+0x14>)
 80015c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80015ca:	4770      	bx	lr
 80015cc:	e000e100 	.word	0xe000e100

080015d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d0:	3801      	subs	r0, #1
 80015d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80015d6:	d20a      	bcs.n	80015ee <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015da:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015dc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015de:	21f0      	movs	r1, #240	; 0xf0
 80015e0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e010 	.word	0xe000e010
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001600:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001602:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001604:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80017b4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001608:	4a68      	ldr	r2, [pc, #416]	; (80017ac <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800160a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80017b8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800160e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001610:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001612:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001616:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001618:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800161c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001620:	45b6      	cmp	lr, r6
 8001622:	f040 80ae 	bne.w	8001782 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001626:	684c      	ldr	r4, [r1, #4]
 8001628:	f024 0710 	bic.w	r7, r4, #16
 800162c:	2f02      	cmp	r7, #2
 800162e:	d116      	bne.n	800165e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001630:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001634:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001638:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800163c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001640:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001644:	f04f 0c0f 	mov.w	ip, #15
 8001648:	fa0c fc0b 	lsl.w	ip, ip, fp
 800164c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001650:	690d      	ldr	r5, [r1, #16]
 8001652:	fa05 f50b 	lsl.w	r5, r5, fp
 8001656:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800165a:	f8ca 5020 	str.w	r5, [sl, #32]
 800165e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001662:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001664:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001668:	fa05 f50a 	lsl.w	r5, r5, sl
 800166c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800166e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001672:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001676:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800167a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800167c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001680:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001682:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001686:	d811      	bhi.n	80016ac <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001688:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800168a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800168e:	68cf      	ldr	r7, [r1, #12]
 8001690:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001694:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001698:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800169a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800169c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016a0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80016a4:	409f      	lsls	r7, r3
 80016a6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80016aa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80016ac:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ae:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b0:	688f      	ldr	r7, [r1, #8]
 80016b2:	fa07 f70a 	lsl.w	r7, r7, sl
 80016b6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80016b8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ba:	00e5      	lsls	r5, r4, #3
 80016bc:	d561      	bpl.n	8001782 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	f04f 0b00 	mov.w	fp, #0
 80016c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80016c6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ca:	4d39      	ldr	r5, [pc, #228]	; (80017b0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016cc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80016d0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80016d4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80016d8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80016dc:	9703      	str	r7, [sp, #12]
 80016de:	9f03      	ldr	r7, [sp, #12]
 80016e0:	f023 0703 	bic.w	r7, r3, #3
 80016e4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80016e8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ec:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80016f0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016f4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80016f8:	f04f 0e0f 	mov.w	lr, #15
 80016fc:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001700:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001702:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001706:	d043      	beq.n	8001790 <HAL_GPIO_Init+0x194>
 8001708:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800170c:	42a8      	cmp	r0, r5
 800170e:	d041      	beq.n	8001794 <HAL_GPIO_Init+0x198>
 8001710:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001714:	42a8      	cmp	r0, r5
 8001716:	d03f      	beq.n	8001798 <HAL_GPIO_Init+0x19c>
 8001718:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800171c:	42a8      	cmp	r0, r5
 800171e:	d03d      	beq.n	800179c <HAL_GPIO_Init+0x1a0>
 8001720:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001724:	42a8      	cmp	r0, r5
 8001726:	d03b      	beq.n	80017a0 <HAL_GPIO_Init+0x1a4>
 8001728:	4548      	cmp	r0, r9
 800172a:	d03b      	beq.n	80017a4 <HAL_GPIO_Init+0x1a8>
 800172c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001730:	42a8      	cmp	r0, r5
 8001732:	d039      	beq.n	80017a8 <HAL_GPIO_Init+0x1ac>
 8001734:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001738:	42a8      	cmp	r0, r5
 800173a:	bf14      	ite	ne
 800173c:	2508      	movne	r5, #8
 800173e:	2507      	moveq	r5, #7
 8001740:	fa05 f50c 	lsl.w	r5, r5, ip
 8001744:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001748:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800174a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800174c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800174e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001752:	bf0c      	ite	eq
 8001754:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001756:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001758:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800175a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800175c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001760:	bf0c      	ite	eq
 8001762:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001764:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001766:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001768:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800176a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800176e:	bf0c      	ite	eq
 8001770:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001772:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001774:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001776:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001778:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800177a:	bf54      	ite	pl
 800177c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800177e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001780:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001782:	3301      	adds	r3, #1
 8001784:	2b10      	cmp	r3, #16
 8001786:	f47f af44 	bne.w	8001612 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800178a:	b005      	add	sp, #20
 800178c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001790:	465d      	mov	r5, fp
 8001792:	e7d5      	b.n	8001740 <HAL_GPIO_Init+0x144>
 8001794:	2501      	movs	r5, #1
 8001796:	e7d3      	b.n	8001740 <HAL_GPIO_Init+0x144>
 8001798:	2502      	movs	r5, #2
 800179a:	e7d1      	b.n	8001740 <HAL_GPIO_Init+0x144>
 800179c:	2503      	movs	r5, #3
 800179e:	e7cf      	b.n	8001740 <HAL_GPIO_Init+0x144>
 80017a0:	2504      	movs	r5, #4
 80017a2:	e7cd      	b.n	8001740 <HAL_GPIO_Init+0x144>
 80017a4:	2505      	movs	r5, #5
 80017a6:	e7cb      	b.n	8001740 <HAL_GPIO_Init+0x144>
 80017a8:	2506      	movs	r5, #6
 80017aa:	e7c9      	b.n	8001740 <HAL_GPIO_Init+0x144>
 80017ac:	40013c00 	.word	0x40013c00
 80017b0:	40020000 	.word	0x40020000
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40021400 	.word	0x40021400

080017bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017bc:	b10a      	cbz	r2, 80017c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017be:	6181      	str	r1, [r0, #24]
 80017c0:	4770      	bx	lr
 80017c2:	0409      	lsls	r1, r1, #16
 80017c4:	e7fb      	b.n	80017be <HAL_GPIO_WritePin+0x2>
	...

080017c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017cc:	4604      	mov	r4, r0
 80017ce:	b918      	cbnz	r0, 80017d8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80017d0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80017d2:	b002      	add	sp, #8
 80017d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d8:	6803      	ldr	r3, [r0, #0]
 80017da:	07dd      	lsls	r5, r3, #31
 80017dc:	d410      	bmi.n	8001800 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017de:	6823      	ldr	r3, [r4, #0]
 80017e0:	0798      	lsls	r0, r3, #30
 80017e2:	d458      	bmi.n	8001896 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	071a      	lsls	r2, r3, #28
 80017e8:	f100 809a 	bmi.w	8001920 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	075b      	lsls	r3, r3, #29
 80017f0:	f100 80b8 	bmi.w	8001964 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f4:	69a2      	ldr	r2, [r4, #24]
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	f040 8119 	bne.w	8001a2e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80017fc:	2000      	movs	r0, #0
 80017fe:	e7e8      	b.n	80017d2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001800:	4ba6      	ldr	r3, [pc, #664]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	f002 020c 	and.w	r2, r2, #12
 8001808:	2a04      	cmp	r2, #4
 800180a:	d007      	beq.n	800181c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001812:	2a08      	cmp	r2, #8
 8001814:	d10a      	bne.n	800182c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	0259      	lsls	r1, r3, #9
 800181a:	d507      	bpl.n	800182c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181c:	4b9f      	ldr	r3, [pc, #636]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	039a      	lsls	r2, r3, #14
 8001822:	d5dc      	bpl.n	80017de <HAL_RCC_OscConfig+0x16>
 8001824:	6863      	ldr	r3, [r4, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1d9      	bne.n	80017de <HAL_RCC_OscConfig+0x16>
 800182a:	e7d1      	b.n	80017d0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182c:	6863      	ldr	r3, [r4, #4]
 800182e:	4d9b      	ldr	r5, [pc, #620]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
 8001830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001834:	d111      	bne.n	800185a <HAL_RCC_OscConfig+0x92>
 8001836:	682b      	ldr	r3, [r5, #0]
 8001838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800183c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800183e:	f7ff fe6f 	bl	8001520 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	4d96      	ldr	r5, [pc, #600]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001844:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	682b      	ldr	r3, [r5, #0]
 8001848:	039b      	lsls	r3, r3, #14
 800184a:	d4c8      	bmi.n	80017de <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff fe68 	bl	8001520 <HAL_GetTick>
 8001850:	1b80      	subs	r0, r0, r6
 8001852:	2864      	cmp	r0, #100	; 0x64
 8001854:	d9f7      	bls.n	8001846 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001856:	2003      	movs	r0, #3
 8001858:	e7bb      	b.n	80017d2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800185e:	d104      	bne.n	800186a <HAL_RCC_OscConfig+0xa2>
 8001860:	682b      	ldr	r3, [r5, #0]
 8001862:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001866:	602b      	str	r3, [r5, #0]
 8001868:	e7e5      	b.n	8001836 <HAL_RCC_OscConfig+0x6e>
 800186a:	682a      	ldr	r2, [r5, #0]
 800186c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001870:	602a      	str	r2, [r5, #0]
 8001872:	682a      	ldr	r2, [r5, #0]
 8001874:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001878:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1df      	bne.n	800183e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800187e:	f7ff fe4f 	bl	8001520 <HAL_GetTick>
 8001882:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001884:	682b      	ldr	r3, [r5, #0]
 8001886:	039f      	lsls	r7, r3, #14
 8001888:	d5a9      	bpl.n	80017de <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800188a:	f7ff fe49 	bl	8001520 <HAL_GetTick>
 800188e:	1b80      	subs	r0, r0, r6
 8001890:	2864      	cmp	r0, #100	; 0x64
 8001892:	d9f7      	bls.n	8001884 <HAL_RCC_OscConfig+0xbc>
 8001894:	e7df      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001896:	4b81      	ldr	r3, [pc, #516]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	f012 0f0c 	tst.w	r2, #12
 800189e:	d007      	beq.n	80018b0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018a6:	2a08      	cmp	r2, #8
 80018a8:	d111      	bne.n	80018ce <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	025e      	lsls	r6, r3, #9
 80018ae:	d40e      	bmi.n	80018ce <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b0:	4b7a      	ldr	r3, [pc, #488]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	0795      	lsls	r5, r2, #30
 80018b6:	d502      	bpl.n	80018be <HAL_RCC_OscConfig+0xf6>
 80018b8:	68e2      	ldr	r2, [r4, #12]
 80018ba:	2a01      	cmp	r2, #1
 80018bc:	d188      	bne.n	80017d0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	6921      	ldr	r1, [r4, #16]
 80018c2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80018c6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80018ca:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018cc:	e78a      	b.n	80017e4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018ce:	68e2      	ldr	r2, [r4, #12]
 80018d0:	4b73      	ldr	r3, [pc, #460]	; (8001aa0 <HAL_RCC_OscConfig+0x2d8>)
 80018d2:	b1b2      	cbz	r2, 8001902 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80018d4:	2201      	movs	r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018d8:	f7ff fe22 	bl	8001520 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018dc:	4d6f      	ldr	r5, [pc, #444]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80018de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e0:	682b      	ldr	r3, [r5, #0]
 80018e2:	0798      	lsls	r0, r3, #30
 80018e4:	d507      	bpl.n	80018f6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e6:	682b      	ldr	r3, [r5, #0]
 80018e8:	6922      	ldr	r2, [r4, #16]
 80018ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80018f2:	602b      	str	r3, [r5, #0]
 80018f4:	e776      	b.n	80017e4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f6:	f7ff fe13 	bl	8001520 <HAL_GetTick>
 80018fa:	1b80      	subs	r0, r0, r6
 80018fc:	2802      	cmp	r0, #2
 80018fe:	d9ef      	bls.n	80018e0 <HAL_RCC_OscConfig+0x118>
 8001900:	e7a9      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001902:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001904:	f7ff fe0c 	bl	8001520 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001908:	4d64      	ldr	r5, [pc, #400]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800190a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190c:	682b      	ldr	r3, [r5, #0]
 800190e:	0799      	lsls	r1, r3, #30
 8001910:	f57f af68 	bpl.w	80017e4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001914:	f7ff fe04 	bl	8001520 <HAL_GetTick>
 8001918:	1b80      	subs	r0, r0, r6
 800191a:	2802      	cmp	r0, #2
 800191c:	d9f6      	bls.n	800190c <HAL_RCC_OscConfig+0x144>
 800191e:	e79a      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001920:	6962      	ldr	r2, [r4, #20]
 8001922:	4b60      	ldr	r3, [pc, #384]	; (8001aa4 <HAL_RCC_OscConfig+0x2dc>)
 8001924:	b17a      	cbz	r2, 8001946 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800192a:	f7ff fdf9 	bl	8001520 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192e:	4d5b      	ldr	r5, [pc, #364]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001930:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001934:	079f      	lsls	r7, r3, #30
 8001936:	f53f af59 	bmi.w	80017ec <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193a:	f7ff fdf1 	bl	8001520 <HAL_GetTick>
 800193e:	1b80      	subs	r0, r0, r6
 8001940:	2802      	cmp	r0, #2
 8001942:	d9f6      	bls.n	8001932 <HAL_RCC_OscConfig+0x16a>
 8001944:	e787      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001946:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001948:	f7ff fdea 	bl	8001520 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194c:	4d53      	ldr	r5, [pc, #332]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800194e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001950:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001952:	0798      	lsls	r0, r3, #30
 8001954:	f57f af4a 	bpl.w	80017ec <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff fde2 	bl	8001520 <HAL_GetTick>
 800195c:	1b80      	subs	r0, r0, r6
 800195e:	2802      	cmp	r0, #2
 8001960:	d9f6      	bls.n	8001950 <HAL_RCC_OscConfig+0x188>
 8001962:	e778      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001964:	4b4d      	ldr	r3, [pc, #308]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
 8001966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001968:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800196c:	d128      	bne.n	80019c0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	9201      	str	r2, [sp, #4]
 8001970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001972:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001976:	641a      	str	r2, [r3, #64]	; 0x40
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001982:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001984:	4d48      	ldr	r5, [pc, #288]	; (8001aa8 <HAL_RCC_OscConfig+0x2e0>)
 8001986:	682b      	ldr	r3, [r5, #0]
 8001988:	05d9      	lsls	r1, r3, #23
 800198a:	d51b      	bpl.n	80019c4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198c:	68a3      	ldr	r3, [r4, #8]
 800198e:	4d43      	ldr	r5, [pc, #268]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
 8001990:	2b01      	cmp	r3, #1
 8001992:	d127      	bne.n	80019e4 <HAL_RCC_OscConfig+0x21c>
 8001994:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800199c:	f7ff fdc0 	bl	8001520 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a0:	4d3e      	ldr	r5, [pc, #248]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80019a2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019aa:	079b      	lsls	r3, r3, #30
 80019ac:	d539      	bpl.n	8001a22 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80019ae:	2e00      	cmp	r6, #0
 80019b0:	f43f af20 	beq.w	80017f4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b4:	4a39      	ldr	r2, [pc, #228]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
 80019b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80019b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	e719      	b.n	80017f4 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80019c0:	2600      	movs	r6, #0
 80019c2:	e7df      	b.n	8001984 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c4:	682b      	ldr	r3, [r5, #0]
 80019c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ca:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80019cc:	f7ff fda8 	bl	8001520 <HAL_GetTick>
 80019d0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d2:	682b      	ldr	r3, [r5, #0]
 80019d4:	05da      	lsls	r2, r3, #23
 80019d6:	d4d9      	bmi.n	800198c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d8:	f7ff fda2 	bl	8001520 <HAL_GetTick>
 80019dc:	1bc0      	subs	r0, r0, r7
 80019de:	2802      	cmp	r0, #2
 80019e0:	d9f7      	bls.n	80019d2 <HAL_RCC_OscConfig+0x20a>
 80019e2:	e738      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e4:	2b05      	cmp	r3, #5
 80019e6:	d104      	bne.n	80019f2 <HAL_RCC_OscConfig+0x22a>
 80019e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	672b      	str	r3, [r5, #112]	; 0x70
 80019f0:	e7d0      	b.n	8001994 <HAL_RCC_OscConfig+0x1cc>
 80019f2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80019f4:	f022 0201 	bic.w	r2, r2, #1
 80019f8:	672a      	str	r2, [r5, #112]	; 0x70
 80019fa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80019fc:	f022 0204 	bic.w	r2, r2, #4
 8001a00:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1ca      	bne.n	800199c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001a06:	f7ff fd8b 	bl	8001520 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a0e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a10:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a12:	0798      	lsls	r0, r3, #30
 8001a14:	d5cb      	bpl.n	80019ae <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a16:	f7ff fd83 	bl	8001520 <HAL_GetTick>
 8001a1a:	1bc0      	subs	r0, r0, r7
 8001a1c:	4540      	cmp	r0, r8
 8001a1e:	d9f7      	bls.n	8001a10 <HAL_RCC_OscConfig+0x248>
 8001a20:	e719      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a22:	f7ff fd7d 	bl	8001520 <HAL_GetTick>
 8001a26:	1bc0      	subs	r0, r0, r7
 8001a28:	4540      	cmp	r0, r8
 8001a2a:	d9bd      	bls.n	80019a8 <HAL_RCC_OscConfig+0x1e0>
 8001a2c:	e713      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a2e:	4d1b      	ldr	r5, [pc, #108]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
 8001a30:	68ab      	ldr	r3, [r5, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	f43f aeca 	beq.w	80017d0 <HAL_RCC_OscConfig+0x8>
 8001a3c:	4e1b      	ldr	r6, [pc, #108]	; (8001aac <HAL_RCC_OscConfig+0x2e4>)
 8001a3e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a40:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001a42:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a44:	d134      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001a46:	f7ff fd6b 	bl	8001520 <HAL_GetTick>
 8001a4a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4c:	682b      	ldr	r3, [r5, #0]
 8001a4e:	0199      	lsls	r1, r3, #6
 8001a50:	d41e      	bmi.n	8001a90 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a52:	6a22      	ldr	r2, [r4, #32]
 8001a54:	69e3      	ldr	r3, [r4, #28]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a5a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001a5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a60:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	4c0d      	ldr	r4, [pc, #52]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a68:	0852      	lsrs	r2, r2, #1
 8001a6a:	3a01      	subs	r2, #1
 8001a6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001a70:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001a72:	2301      	movs	r3, #1
 8001a74:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001a76:	f7ff fd53 	bl	8001520 <HAL_GetTick>
 8001a7a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	019a      	lsls	r2, r3, #6
 8001a80:	f53f aebc 	bmi.w	80017fc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff fd4c 	bl	8001520 <HAL_GetTick>
 8001a88:	1b40      	subs	r0, r0, r5
 8001a8a:	2802      	cmp	r0, #2
 8001a8c:	d9f6      	bls.n	8001a7c <HAL_RCC_OscConfig+0x2b4>
 8001a8e:	e6e2      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a90:	f7ff fd46 	bl	8001520 <HAL_GetTick>
 8001a94:	1bc0      	subs	r0, r0, r7
 8001a96:	2802      	cmp	r0, #2
 8001a98:	d9d8      	bls.n	8001a4c <HAL_RCC_OscConfig+0x284>
 8001a9a:	e6dc      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	42470000 	.word	0x42470000
 8001aa4:	42470e80 	.word	0x42470e80
 8001aa8:	40007000 	.word	0x40007000
 8001aac:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fd36 	bl	8001520 <HAL_GetTick>
 8001ab4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab6:	682b      	ldr	r3, [r5, #0]
 8001ab8:	019b      	lsls	r3, r3, #6
 8001aba:	f57f ae9f 	bpl.w	80017fc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001abe:	f7ff fd2f 	bl	8001520 <HAL_GetTick>
 8001ac2:	1b00      	subs	r0, r0, r4
 8001ac4:	2802      	cmp	r0, #2
 8001ac6:	d9f6      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x2ee>
 8001ac8:	e6c5      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
 8001aca:	bf00      	nop

08001acc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001acc:	4913      	ldr	r1, [pc, #76]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001ace:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ad0:	688b      	ldr	r3, [r1, #8]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d003      	beq.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x16>
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d003      	beq.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ade:	4810      	ldr	r0, [pc, #64]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001ae0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001ae2:	4810      	ldr	r0, [pc, #64]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x58>)
 8001ae4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ae6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ae8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aea:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aec:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af0:	bf14      	ite	ne
 8001af2:	480c      	ldrne	r0, [pc, #48]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af4:	480a      	ldreq	r0, [pc, #40]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001afa:	bf18      	it	ne
 8001afc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001afe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b02:	fba1 0100 	umull	r0, r1, r1, r0
 8001b06:	f7fe fbbd 	bl	8000284 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x50>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001b12:	3301      	adds	r3, #1
 8001b14:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001b16:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b1a:	bd08      	pop	{r3, pc}
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	00f42400 	.word	0x00f42400
 8001b24:	017d7840 	.word	0x017d7840

08001b28 <HAL_RCC_ClockConfig>:
{
 8001b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b2c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001b2e:	4604      	mov	r4, r0
 8001b30:	b910      	cbnz	r0, 8001b38 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001b32:	2001      	movs	r0, #1
 8001b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b38:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <HAL_RCC_ClockConfig+0x124>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	f002 020f 	and.w	r2, r2, #15
 8001b40:	428a      	cmp	r2, r1
 8001b42:	d328      	bcc.n	8001b96 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b44:	6821      	ldr	r1, [r4, #0]
 8001b46:	078f      	lsls	r7, r1, #30
 8001b48:	d42d      	bmi.n	8001ba6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4a:	07c8      	lsls	r0, r1, #31
 8001b4c:	d440      	bmi.n	8001bd0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b4e:	4b3f      	ldr	r3, [pc, #252]	; (8001c4c <HAL_RCC_ClockConfig+0x124>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	f002 020f 	and.w	r2, r2, #15
 8001b56:	4295      	cmp	r5, r2
 8001b58:	d366      	bcc.n	8001c28 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5a:	6822      	ldr	r2, [r4, #0]
 8001b5c:	0751      	lsls	r1, r2, #29
 8001b5e:	d46c      	bmi.n	8001c3a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b60:	0713      	lsls	r3, r2, #28
 8001b62:	d507      	bpl.n	8001b74 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b64:	4a3a      	ldr	r2, [pc, #232]	; (8001c50 <HAL_RCC_ClockConfig+0x128>)
 8001b66:	6921      	ldr	r1, [r4, #16]
 8001b68:	6893      	ldr	r3, [r2, #8]
 8001b6a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001b6e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b72:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b74:	f7ff ffaa 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8001b78:	4b35      	ldr	r3, [pc, #212]	; (8001c50 <HAL_RCC_ClockConfig+0x128>)
 8001b7a:	4a36      	ldr	r2, [pc, #216]	; (8001c54 <HAL_RCC_ClockConfig+0x12c>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b82:	5cd3      	ldrb	r3, [r2, r3]
 8001b84:	40d8      	lsrs	r0, r3
 8001b86:	4b34      	ldr	r3, [pc, #208]	; (8001c58 <HAL_RCC_ClockConfig+0x130>)
 8001b88:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f7ff fc7e 	bl	800148c <HAL_InitTick>
  return HAL_OK;
 8001b90:	2000      	movs	r0, #0
 8001b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	b2ca      	uxtb	r2, r1
 8001b98:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 030f 	and.w	r3, r3, #15
 8001ba0:	4299      	cmp	r1, r3
 8001ba2:	d1c6      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xa>
 8001ba4:	e7ce      	b.n	8001b44 <HAL_RCC_ClockConfig+0x1c>
 8001ba6:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bac:	bf1e      	ittt	ne
 8001bae:	689a      	ldrne	r2, [r3, #8]
 8001bb0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001bb4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bb8:	bf42      	ittt	mi
 8001bba:	689a      	ldrmi	r2, [r3, #8]
 8001bbc:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001bc0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	68a0      	ldr	r0, [r4, #8]
 8001bc6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001bca:	4302      	orrs	r2, r0
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	e7bc      	b.n	8001b4a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd0:	6862      	ldr	r2, [r4, #4]
 8001bd2:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <HAL_RCC_ClockConfig+0x128>)
 8001bd4:	2a01      	cmp	r2, #1
 8001bd6:	d11d      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bde:	d0a8      	beq.n	8001b32 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001be0:	4e1b      	ldr	r6, [pc, #108]	; (8001c50 <HAL_RCC_ClockConfig+0x128>)
 8001be2:	68b3      	ldr	r3, [r6, #8]
 8001be4:	f023 0303 	bic.w	r3, r3, #3
 8001be8:	4313      	orrs	r3, r2
 8001bea:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001bec:	f7ff fc98 	bl	8001520 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001bf4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf6:	68b3      	ldr	r3, [r6, #8]
 8001bf8:	6862      	ldr	r2, [r4, #4]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c02:	d0a4      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c04:	f7ff fc8c 	bl	8001520 <HAL_GetTick>
 8001c08:	1bc0      	subs	r0, r0, r7
 8001c0a:	4540      	cmp	r0, r8
 8001c0c:	d9f3      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001c0e:	2003      	movs	r0, #3
}
 8001c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c14:	1e91      	subs	r1, r2, #2
 8001c16:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c18:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c1a:	d802      	bhi.n	8001c22 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c20:	e7dd      	b.n	8001bde <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c22:	f013 0f02 	tst.w	r3, #2
 8001c26:	e7da      	b.n	8001bde <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c28:	b2ea      	uxtb	r2, r5
 8001c2a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	429d      	cmp	r5, r3
 8001c34:	f47f af7d 	bne.w	8001b32 <HAL_RCC_ClockConfig+0xa>
 8001c38:	e78f      	b.n	8001b5a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c3a:	4905      	ldr	r1, [pc, #20]	; (8001c50 <HAL_RCC_ClockConfig+0x128>)
 8001c3c:	68e0      	ldr	r0, [r4, #12]
 8001c3e:	688b      	ldr	r3, [r1, #8]
 8001c40:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001c44:	4303      	orrs	r3, r0
 8001c46:	608b      	str	r3, [r1, #8]
 8001c48:	e78a      	b.n	8001b60 <HAL_RCC_ClockConfig+0x38>
 8001c4a:	bf00      	nop
 8001c4c:	40023c00 	.word	0x40023c00
 8001c50:	40023800 	.word	0x40023800
 8001c54:	08007a8f 	.word	0x08007a8f
 8001c58:	2000000c 	.word	0x2000000c

08001c5c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001c5e:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001c66:	5cd3      	ldrb	r3, [r2, r3]
 8001c68:	4a03      	ldr	r2, [pc, #12]	; (8001c78 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001c6a:	6810      	ldr	r0, [r2, #0]
}
 8001c6c:	40d8      	lsrs	r0, r3
 8001c6e:	4770      	bx	lr
 8001c70:	40023800 	.word	0x40023800
 8001c74:	08007a9f 	.word	0x08007a9f
 8001c78:	2000000c 	.word	0x2000000c

08001c7c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001c7e:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001c86:	5cd3      	ldrb	r3, [r2, r3]
 8001c88:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001c8a:	6810      	ldr	r0, [r2, #0]
}
 8001c8c:	40d8      	lsrs	r0, r3
 8001c8e:	4770      	bx	lr
 8001c90:	40023800 	.word	0x40023800
 8001c94:	08007a9f 	.word	0x08007a9f
 8001c98:	2000000c 	.word	0x2000000c

08001c9c <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ca0:	9e06      	ldr	r6, [sp, #24]
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	4688      	mov	r8, r1
 8001ca6:	4617      	mov	r7, r2
 8001ca8:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001caa:	6822      	ldr	r2, [r4, #0]
 8001cac:	6893      	ldr	r3, [r2, #8]
 8001cae:	ea38 0303 	bics.w	r3, r8, r3
 8001cb2:	bf0c      	ite	eq
 8001cb4:	2301      	moveq	r3, #1
 8001cb6:	2300      	movne	r3, #0
 8001cb8:	429f      	cmp	r7, r3
 8001cba:	d102      	bne.n	8001cc2 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001cbc:	2000      	movs	r0, #0
}
 8001cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001cc2:	1c6b      	adds	r3, r5, #1
 8001cc4:	d0f2      	beq.n	8001cac <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001cc6:	bb55      	cbnz	r5, 8001d1e <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001cd0:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001cd2:	6862      	ldr	r2, [r4, #4]
 8001cd4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001cd8:	d10a      	bne.n	8001cf0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001cda:	68a2      	ldr	r2, [r4, #8]
 8001cdc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ce0:	d002      	beq.n	8001ce8 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8001ce2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001ce6:	d103      	bne.n	8001cf0 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cee:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001cf0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001cf2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001cf6:	d109      	bne.n	8001d0c <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cfe:	0412      	lsls	r2, r2, #16
 8001d00:	0c12      	lsrs	r2, r2, #16
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d0a:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001d12:	2300      	movs	r3, #0
 8001d14:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001d18:	2003      	movs	r0, #3
 8001d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001d1e:	f7ff fbff 	bl	8001520 <HAL_GetTick>
 8001d22:	1b80      	subs	r0, r0, r6
 8001d24:	4285      	cmp	r5, r0
 8001d26:	d8c0      	bhi.n	8001caa <SPI_WaitFlagStateUntilTimeout+0xe>
 8001d28:	e7ce      	b.n	8001cc8 <SPI_WaitFlagStateUntilTimeout+0x2c>

08001d2a <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d2a:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	9200      	str	r2, [sp, #0]
 8001d30:	2180      	movs	r1, #128	; 0x80
 8001d32:	2200      	movs	r2, #0
{
 8001d34:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d36:	f7ff ffb1 	bl	8001c9c <SPI_WaitFlagStateUntilTimeout>
 8001d3a:	b120      	cbz	r0, 8001d46 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d3e:	f043 0320 	orr.w	r3, r3, #32
 8001d42:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8001d44:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8001d46:	b002      	add	sp, #8
 8001d48:	bd10      	pop	{r4, pc}

08001d4a <HAL_SPI_Init>:
{
 8001d4a:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8001d4c:	4604      	mov	r4, r0
 8001d4e:	2800      	cmp	r0, #0
 8001d50:	d036      	beq.n	8001dc0 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8001d56:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001d5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d5e:	b91b      	cbnz	r3, 8001d68 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001d60:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001d64:	f001 fc70 	bl	8003648 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8001d68:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d6a:	68a0      	ldr	r0, [r4, #8]
 8001d6c:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001d74:	680b      	ldr	r3, [r1, #0]
 8001d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d7a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d7c:	6863      	ldr	r3, [r4, #4]
 8001d7e:	4303      	orrs	r3, r0
 8001d80:	68e0      	ldr	r0, [r4, #12]
 8001d82:	4303      	orrs	r3, r0
 8001d84:	6920      	ldr	r0, [r4, #16]
 8001d86:	4303      	orrs	r3, r0
 8001d88:	6960      	ldr	r0, [r4, #20]
 8001d8a:	4303      	orrs	r3, r0
 8001d8c:	69e0      	ldr	r0, [r4, #28]
 8001d8e:	4303      	orrs	r3, r0
 8001d90:	6a20      	ldr	r0, [r4, #32]
 8001d92:	4303      	orrs	r3, r0
 8001d94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001d96:	4303      	orrs	r3, r0
 8001d98:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001d9c:	4303      	orrs	r3, r0
 8001d9e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001da0:	0c12      	lsrs	r2, r2, #16
 8001da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001da4:	f002 0204 	and.w	r2, r2, #4
 8001da8:	431a      	orrs	r2, r3
 8001daa:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dac:	69cb      	ldr	r3, [r1, #28]
 8001dae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001db2:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001db4:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001db6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001db8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001dba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8001dbe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001dc0:	2001      	movs	r0, #1
}
 8001dc2:	bd10      	pop	{r4, pc}

08001dc4 <HAL_SPI_TransmitReceive>:
{
 8001dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dc8:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8001dca:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001dce:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8001dd0:	2b01      	cmp	r3, #1
{
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	460d      	mov	r5, r1
 8001dd6:	4616      	mov	r6, r2
 8001dd8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8001dda:	f000 80ed 	beq.w	8001fb8 <HAL_SPI_TransmitReceive+0x1f4>
 8001dde:	2301      	movs	r3, #1
 8001de0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001de4:	f7ff fb9c 	bl	8001520 <HAL_GetTick>
  tmp  = hspi->State;
 8001de8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8001dec:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8001dee:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001df0:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001df2:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001df4:	d00a      	beq.n	8001e0c <HAL_SPI_TransmitReceive+0x48>
 8001df6:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001dfa:	f040 80db 	bne.w	8001fb4 <HAL_SPI_TransmitReceive+0x1f0>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001dfe:	68a2      	ldr	r2, [r4, #8]
 8001e00:	2a00      	cmp	r2, #0
 8001e02:	f040 80d7 	bne.w	8001fb4 <HAL_SPI_TransmitReceive+0x1f0>
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	f040 80d4 	bne.w	8001fb4 <HAL_SPI_TransmitReceive+0x1f0>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8001e0c:	2d00      	cmp	r5, #0
 8001e0e:	d04e      	beq.n	8001eae <HAL_SPI_TransmitReceive+0xea>
 8001e10:	2e00      	cmp	r6, #0
 8001e12:	d04c      	beq.n	8001eae <HAL_SPI_TransmitReceive+0xea>
 8001e14:	f1b9 0f00 	cmp.w	r9, #0
 8001e18:	d049      	beq.n	8001eae <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8001e1a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e1e:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8001e20:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e22:	bf04      	itt	eq
 8001e24:	2305      	moveq	r3, #5
 8001e26:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001e2e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e30:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e32:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001e34:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001e38:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e3c:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001e3e:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e42:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001e44:	bf58      	it	pl
 8001e46:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e48:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001e4a:	bf58      	it	pl
 8001e4c:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001e50:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8001e54:	bf58      	it	pl
 8001e56:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e58:	68e2      	ldr	r2, [r4, #12]
 8001e5a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001e5e:	d15d      	bne.n	8001f1c <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001e60:	b119      	cbz	r1, 8001e6a <HAL_SPI_TransmitReceive+0xa6>
 8001e62:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001e64:	b292      	uxth	r2, r2
 8001e66:	2a01      	cmp	r2, #1
 8001e68:	d106      	bne.n	8001e78 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001e6a:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001e6e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001e70:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e72:	3b01      	subs	r3, #1
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001e78:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e7c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	b9bb      	cbnz	r3, 8001eb2 <HAL_SPI_TransmitReceive+0xee>
 8001e82:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	b9a3      	cbnz	r3, 8001eb2 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001e88:	f8cd 8000 	str.w	r8, [sp]
 8001e8c:	463b      	mov	r3, r7
 8001e8e:	2201      	movs	r2, #1
 8001e90:	2102      	movs	r1, #2
 8001e92:	4620      	mov	r0, r4
 8001e94:	f7ff ff02 	bl	8001c9c <SPI_WaitFlagStateUntilTimeout>
 8001e98:	2800      	cmp	r0, #0
 8001e9a:	d135      	bne.n	8001f08 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001e9c:	4642      	mov	r2, r8
 8001e9e:	4639      	mov	r1, r7
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f7ff ff42 	bl	8001d2a <SPI_CheckFlag_BSY>
 8001ea6:	2800      	cmp	r0, #0
 8001ea8:	d079      	beq.n	8001f9e <HAL_SPI_TransmitReceive+0x1da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001eaa:	2320      	movs	r3, #32
 8001eac:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001eae:	2001      	movs	r0, #1
 8001eb0:	e02b      	b.n	8001f0a <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001eb2:	f1b9 0f00 	cmp.w	r9, #0
 8001eb6:	d00f      	beq.n	8001ed8 <HAL_SPI_TransmitReceive+0x114>
 8001eb8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	b163      	cbz	r3, 8001ed8 <HAL_SPI_TransmitReceive+0x114>
 8001ebe:	6823      	ldr	r3, [r4, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	0791      	lsls	r1, r2, #30
 8001ec4:	d508      	bpl.n	8001ed8 <HAL_SPI_TransmitReceive+0x114>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001ec6:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001eca:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001ecc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001ed4:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001ed8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	b163      	cbz	r3, 8001ef8 <HAL_SPI_TransmitReceive+0x134>
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	07d2      	lsls	r2, r2, #31
 8001ee4:	d508      	bpl.n	8001ef8 <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8001eec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001ef4:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001ef8:	1c78      	adds	r0, r7, #1
 8001efa:	d0bf      	beq.n	8001e7c <HAL_SPI_TransmitReceive+0xb8>
 8001efc:	f7ff fb10 	bl	8001520 <HAL_GetTick>
 8001f00:	eba0 0008 	sub.w	r0, r0, r8
 8001f04:	4287      	cmp	r7, r0
 8001f06:	d8b9      	bhi.n	8001e7c <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8001f08:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001f10:	2300      	movs	r3, #0
 8001f12:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001f16:	b005      	add	sp, #20
 8001f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001f1c:	b119      	cbz	r1, 8001f26 <HAL_SPI_TransmitReceive+0x162>
 8001f1e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001f20:	b292      	uxth	r2, r2
 8001f22:	2a01      	cmp	r2, #1
 8001f24:	d106      	bne.n	8001f34 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8001f26:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001f2a:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8001f2c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001f34:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	b91b      	cbnz	r3, 8001f46 <HAL_SPI_TransmitReceive+0x182>
 8001f3e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0a0      	beq.n	8001e88 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001f46:	f1b9 0f00 	cmp.w	r9, #0
 8001f4a:	d00f      	beq.n	8001f6c <HAL_SPI_TransmitReceive+0x1a8>
 8001f4c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	b163      	cbz	r3, 8001f6c <HAL_SPI_TransmitReceive+0x1a8>
 8001f52:	6823      	ldr	r3, [r4, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	0791      	lsls	r1, r2, #30
 8001f58:	d508      	bpl.n	8001f6c <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001f5a:	782a      	ldrb	r2, [r5, #0]
 8001f5c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001f5e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001f66:	3501      	adds	r5, #1
        txallowed = 0U;
 8001f68:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001f6c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	b163      	cbz	r3, 8001f8c <HAL_SPI_TransmitReceive+0x1c8>
 8001f72:	6823      	ldr	r3, [r4, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	07d2      	lsls	r2, r2, #31
 8001f78:	d508      	bpl.n	8001f8c <HAL_SPI_TransmitReceive+0x1c8>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 8001f7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001f86:	3601      	adds	r6, #1
        txallowed = 1U;
 8001f88:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001f8c:	1c7b      	adds	r3, r7, #1
 8001f8e:	d0d3      	beq.n	8001f38 <HAL_SPI_TransmitReceive+0x174>
 8001f90:	f7ff fac6 	bl	8001520 <HAL_GetTick>
 8001f94:	eba0 0008 	sub.w	r0, r0, r8
 8001f98:	4287      	cmp	r7, r0
 8001f9a:	d8cd      	bhi.n	8001f38 <HAL_SPI_TransmitReceive+0x174>
 8001f9c:	e7b4      	b.n	8001f08 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f9e:	68a3      	ldr	r3, [r4, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1b2      	bne.n	8001f0a <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	9003      	str	r0, [sp, #12]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	9203      	str	r2, [sp, #12]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	9303      	str	r3, [sp, #12]
 8001fb0:	9b03      	ldr	r3, [sp, #12]
 8001fb2:	e7aa      	b.n	8001f0a <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	e7a8      	b.n	8001f0a <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8001fb8:	2002      	movs	r0, #2
 8001fba:	e7ac      	b.n	8001f16 <HAL_SPI_TransmitReceive+0x152>

08001fbc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fbc:	6a03      	ldr	r3, [r0, #32]
 8001fbe:	f023 0301 	bic.w	r3, r3, #1
 8001fc2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fc4:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001fc6:	6842      	ldr	r2, [r0, #4]
{
 8001fc8:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fca:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fcc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fce:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001fd2:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001fd4:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001fd6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001fda:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001fdc:	4c0c      	ldr	r4, [pc, #48]	; (8002010 <TIM_OC1_SetConfig+0x54>)
 8001fde:	42a0      	cmp	r0, r4
 8001fe0:	d009      	beq.n	8001ff6 <TIM_OC1_SetConfig+0x3a>
 8001fe2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001fe6:	42a0      	cmp	r0, r4
 8001fe8:	d005      	beq.n	8001ff6 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fea:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001fec:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001fee:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001ff0:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001ff2:	6203      	str	r3, [r0, #32]
} 
 8001ff4:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8001ff6:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ff8:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ffa:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001ffe:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002000:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002002:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002006:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002008:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800200c:	4322      	orrs	r2, r4
 800200e:	e7ec      	b.n	8001fea <TIM_OC1_SetConfig+0x2e>
 8002010:	40010000 	.word	0x40010000

08002014 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002014:	6a03      	ldr	r3, [r0, #32]
 8002016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800201a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800201c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800201e:	6842      	ldr	r2, [r0, #4]
{
 8002020:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002022:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002024:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002026:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800202a:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800202c:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800202e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002032:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002036:	4c0e      	ldr	r4, [pc, #56]	; (8002070 <TIM_OC3_SetConfig+0x5c>)
 8002038:	42a0      	cmp	r0, r4
 800203a:	d009      	beq.n	8002050 <TIM_OC3_SetConfig+0x3c>
 800203c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002040:	42a0      	cmp	r0, r4
 8002042:	d005      	beq.n	8002050 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002044:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002046:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002048:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800204a:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800204c:	6203      	str	r3, [r0, #32]
}
 800204e:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002050:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002052:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002054:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002058:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800205c:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800205e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002062:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002068:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 800206c:	e7ea      	b.n	8002044 <TIM_OC3_SetConfig+0x30>
 800206e:	bf00      	nop
 8002070:	40010000 	.word	0x40010000

08002074 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002074:	6a03      	ldr	r3, [r0, #32]
 8002076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800207a:	6203      	str	r3, [r0, #32]
{
 800207c:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800207e:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002080:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002082:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002084:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002086:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800208a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800208e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002090:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002094:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002098:	4d09      	ldr	r5, [pc, #36]	; (80020c0 <TIM_OC4_SetConfig+0x4c>)
 800209a:	42a8      	cmp	r0, r5
 800209c:	d009      	beq.n	80020b2 <TIM_OC4_SetConfig+0x3e>
 800209e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020a2:	42a8      	cmp	r0, r5
 80020a4:	d005      	beq.n	80020b2 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020a6:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80020a8:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80020aa:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80020ac:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020ae:	6204      	str	r4, [r0, #32]
}
 80020b0:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80020b2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80020b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80020b8:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80020bc:	e7f3      	b.n	80020a6 <TIM_OC4_SetConfig+0x32>
 80020be:	bf00      	nop
 80020c0:	40010000 	.word	0x40010000

080020c4 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

 /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020c4:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80020c6:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 80020c8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80020ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
{
 80020ce:	b530      	push	{r4, r5, lr}
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80020d0:	4302      	orrs	r2, r0

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80020d2:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_SMS;
 80020d4:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80020d8:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
  
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80020da:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 80020dc:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 80020de:	d021      	beq.n	8002124 <TIM_SlaveTimer_SetConfig+0x60>
 80020e0:	d802      	bhi.n	80020e8 <TIM_SlaveTimer_SetConfig+0x24>
 80020e2:	2840      	cmp	r0, #64	; 0x40
 80020e4:	d010      	beq.n	8002108 <TIM_SlaveTimer_SetConfig+0x44>
 80020e6:	bd30      	pop	{r4, r5, pc}
 80020e8:	2860      	cmp	r0, #96	; 0x60
 80020ea:	d02d      	beq.n	8002148 <TIM_SlaveTimer_SetConfig+0x84>
 80020ec:	2870      	cmp	r0, #112	; 0x70
 80020ee:	d13d      	bne.n	800216c <TIM_SlaveTimer_SetConfig+0xa8>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80020f0:	68ca      	ldr	r2, [r1, #12]
 80020f2:	688c      	ldr	r4, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 80020f4:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80020f6:	6909      	ldr	r1, [r1, #16]
 80020f8:	4322      	orrs	r2, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020fa:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80020fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002102:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	bd30      	pop	{r4, r5, pc}
      tmpccer = htim->Instance->CCER;
 8002108:	6a18      	ldr	r0, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800210a:	6a1a      	ldr	r2, [r3, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800210c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 8002114:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002116:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800211a:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800211e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;                               
 8002120:	6218      	str	r0, [r3, #32]
    break;
 8002122:	bd30      	pop	{r4, r5, pc}
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002124:	6888      	ldr	r0, [r1, #8]
 8002126:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8002128:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800212a:	6a1c      	ldr	r4, [r3, #32]
 800212c:	f024 0401 	bic.w	r4, r4, #1
 8002130:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002132:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002134:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002138:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800213c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002140:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8002142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002144:	6219      	str	r1, [r3, #32]
 8002146:	bd30      	pop	{r4, r5, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002148:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800214a:	688c      	ldr	r4, [r1, #8]
 800214c:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800214e:	f020 0010 	bic.w	r0, r0, #16
 8002152:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002154:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002156:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002158:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800215c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002160:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8002164:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8002168:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800216a:	621a      	str	r2, [r3, #32]
 800216c:	bd30      	pop	{r4, r5, pc}

0800216e <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800216e:	6803      	ldr	r3, [r0, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]
}
 8002180:	2000      	movs	r0, #0
 8002182:	4770      	bx	lr

08002184 <HAL_TIM_OC_MspInit>:
 8002184:	4770      	bx	lr

08002186 <HAL_TIM_IC_MspInit>:
 8002186:	4770      	bx	lr

08002188 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002188:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800218c:	2b01      	cmp	r3, #1
{
 800218e:	b570      	push	{r4, r5, r6, lr}
 8002190:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002194:	d01c      	beq.n	80021d0 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8002196:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 800219a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 800219c:	2201      	movs	r2, #1
 800219e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 80021a2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021a4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80021a8:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80021ac:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80021ae:	680a      	ldr	r2, [r1, #0]
 80021b0:	2a40      	cmp	r2, #64	; 0x40
 80021b2:	d079      	beq.n	80022a8 <HAL_TIM_ConfigClockSource+0x120>
 80021b4:	d819      	bhi.n	80021ea <HAL_TIM_ConfigClockSource+0x62>
 80021b6:	2a10      	cmp	r2, #16
 80021b8:	f000 8093 	beq.w	80022e2 <HAL_TIM_ConfigClockSource+0x15a>
 80021bc:	d80a      	bhi.n	80021d4 <HAL_TIM_ConfigClockSource+0x4c>
 80021be:	2a00      	cmp	r2, #0
 80021c0:	f000 8089 	beq.w	80022d6 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80021ca:	2300      	movs	r3, #0
 80021cc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80021d0:	4618      	mov	r0, r3
}
 80021d2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80021d4:	2a20      	cmp	r2, #32
 80021d6:	f000 808a 	beq.w	80022ee <HAL_TIM_ConfigClockSource+0x166>
 80021da:	2a30      	cmp	r2, #48	; 0x30
 80021dc:	d1f2      	bne.n	80021c4 <HAL_TIM_ConfigClockSource+0x3c>
   tmpsmcr = TIMx->SMCR;
 80021de:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80021e4:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80021e8:	e036      	b.n	8002258 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80021ea:	2a70      	cmp	r2, #112	; 0x70
 80021ec:	d036      	beq.n	800225c <HAL_TIM_ConfigClockSource+0xd4>
 80021ee:	d81b      	bhi.n	8002228 <HAL_TIM_ConfigClockSource+0xa0>
 80021f0:	2a50      	cmp	r2, #80	; 0x50
 80021f2:	d042      	beq.n	800227a <HAL_TIM_ConfigClockSource+0xf2>
 80021f4:	2a60      	cmp	r2, #96	; 0x60
 80021f6:	d1e5      	bne.n	80021c4 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021f8:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80021fa:	684d      	ldr	r5, [r1, #4]
 80021fc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021fe:	f024 0410 	bic.w	r4, r4, #16
 8002202:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002204:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002206:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002208:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800220c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002210:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002214:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002218:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800221a:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800221c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800221e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002222:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002226:	e017      	b.n	8002258 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002228:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800222c:	d011      	beq.n	8002252 <HAL_TIM_ConfigClockSource+0xca>
 800222e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002232:	d1c7      	bne.n	80021c4 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002234:	688a      	ldr	r2, [r1, #8]
 8002236:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002238:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800223a:	68c9      	ldr	r1, [r1, #12]
 800223c:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800223e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002242:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002246:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002248:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002250:	e002      	b.n	8002258 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	e7b3      	b.n	80021c4 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800225c:	688a      	ldr	r2, [r1, #8]
 800225e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002260:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002262:	68c9      	ldr	r1, [r1, #12]
 8002264:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002266:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800226a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800226e:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002270:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002272:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002274:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002278:	e7ee      	b.n	8002258 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800227a:	684c      	ldr	r4, [r1, #4]
 800227c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800227e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002280:	6a1d      	ldr	r5, [r3, #32]
 8002282:	f025 0501 	bic.w	r5, r5, #1
 8002286:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002288:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800228a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800228e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002292:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002296:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002298:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800229a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800229c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800229e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80022a2:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80022a6:	e7d7      	b.n	8002258 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80022a8:	684c      	ldr	r4, [r1, #4]
 80022aa:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80022ac:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022ae:	6a1d      	ldr	r5, [r3, #32]
 80022b0:	f025 0501 	bic.w	r5, r5, #1
 80022b4:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80022b6:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022b8:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022bc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022c0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80022c4:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80022c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022c8:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80022ca:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80022d0:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80022d4:	e7c0      	b.n	8002258 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80022d6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80022dc:	f042 0207 	orr.w	r2, r2, #7
 80022e0:	e7ba      	b.n	8002258 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80022e2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80022e8:	f042 0217 	orr.w	r2, r2, #23
 80022ec:	e7b4      	b.n	8002258 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80022ee:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80022f4:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80022f8:	e7ae      	b.n	8002258 <HAL_TIM_ConfigClockSource+0xd0>

080022fa <HAL_TIM_SlaveConfigSynchronization>:
{
 80022fa:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80022fc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002300:	2b01      	cmp	r3, #1
{
 8002302:	4604      	mov	r4, r0
 8002304:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002308:	d015      	beq.n	8002336 <HAL_TIM_SlaveConfigSynchronization+0x3c>
 800230a:	2501      	movs	r5, #1
 800230c:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002310:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8002314:	f7ff fed6 	bl	80020c4 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002320:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002322:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);  
 8002324:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002326:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800232a:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800232c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);  
 8002330:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8002334:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002336:	4618      	mov	r0, r3
} 
 8002338:	bd38      	pop	{r3, r4, r5, pc}

0800233a <HAL_TIM_OC_DelayElapsedCallback>:
 800233a:	4770      	bx	lr

0800233c <HAL_TIM_TriggerCallback>:
 800233c:	4770      	bx	lr

0800233e <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800233e:	6803      	ldr	r3, [r0, #0]
 8002340:	691a      	ldr	r2, [r3, #16]
 8002342:	0791      	lsls	r1, r2, #30
{
 8002344:	b510      	push	{r4, lr}
 8002346:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002348:	d50e      	bpl.n	8002368 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	0792      	lsls	r2, r2, #30
 800234e:	d50b      	bpl.n	8002368 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002350:	f06f 0202 	mvn.w	r2, #2
 8002354:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002356:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002358:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800235a:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800235c:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800235e:	d077      	beq.n	8002450 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002360:	f000 fcfe 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002364:	2300      	movs	r3, #0
 8002366:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	0750      	lsls	r0, r2, #29
 800236e:	d510      	bpl.n	8002392 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	0751      	lsls	r1, r2, #29
 8002374:	d50d      	bpl.n	8002392 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002376:	f06f 0204 	mvn.w	r2, #4
 800237a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800237c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800237e:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002380:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002384:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002386:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002388:	d068      	beq.n	800245c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800238a:	f000 fce9 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238e:	2300      	movs	r3, #0
 8002390:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002392:	6823      	ldr	r3, [r4, #0]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	0712      	lsls	r2, r2, #28
 8002398:	d50f      	bpl.n	80023ba <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	0710      	lsls	r0, r2, #28
 800239e:	d50c      	bpl.n	80023ba <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023a0:	f06f 0208 	mvn.w	r2, #8
 80023a4:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023a6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023a8:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023aa:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023ac:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80023ae:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023b0:	d05a      	beq.n	8002468 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80023b2:	f000 fcd5 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b6:	2300      	movs	r3, #0
 80023b8:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023ba:	6823      	ldr	r3, [r4, #0]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	06d2      	lsls	r2, r2, #27
 80023c0:	d510      	bpl.n	80023e4 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	06d0      	lsls	r0, r2, #27
 80023c6:	d50d      	bpl.n	80023e4 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023c8:	f06f 0210 	mvn.w	r2, #16
 80023cc:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023ce:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023d0:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023d2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023d6:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80023d8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023da:	d04b      	beq.n	8002474 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80023dc:	f000 fcc0 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e0:	2300      	movs	r3, #0
 80023e2:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023e4:	6823      	ldr	r3, [r4, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	07d1      	lsls	r1, r2, #31
 80023ea:	d508      	bpl.n	80023fe <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	07d2      	lsls	r2, r2, #31
 80023f0:	d505      	bpl.n	80023fe <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023f2:	f06f 0201 	mvn.w	r2, #1
 80023f6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80023f8:	4620      	mov	r0, r4
 80023fa:	f000 fd45 	bl	8002e88 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	0610      	lsls	r0, r2, #24
 8002404:	d508      	bpl.n	8002418 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	0611      	lsls	r1, r2, #24
 800240a:	d505      	bpl.n	8002418 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800240c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002410:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002412:	4620      	mov	r0, r4
 8002414:	f000 fad5 	bl	80029c2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	0652      	lsls	r2, r2, #25
 800241e:	d508      	bpl.n	8002432 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	0650      	lsls	r0, r2, #25
 8002424:	d505      	bpl.n	8002432 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002426:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800242a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800242c:	4620      	mov	r0, r4
 800242e:	f7ff ff85 	bl	800233c <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	0691      	lsls	r1, r2, #26
 8002438:	d522      	bpl.n	8002480 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	0692      	lsls	r2, r2, #26
 800243e:	d51f      	bpl.n	8002480 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002440:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002444:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002446:	611a      	str	r2, [r3, #16]
}
 8002448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800244c:	f000 bab8 	b.w	80029c0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002450:	f7ff ff73 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002454:	4620      	mov	r0, r4
 8002456:	f000 fccf 	bl	8002df8 <HAL_TIM_PWM_PulseFinishedCallback>
 800245a:	e783      	b.n	8002364 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245c:	f7ff ff6d 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002460:	4620      	mov	r0, r4
 8002462:	f000 fcc9 	bl	8002df8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002466:	e792      	b.n	800238e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002468:	f7ff ff67 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800246c:	4620      	mov	r0, r4
 800246e:	f000 fcc3 	bl	8002df8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002472:	e7a0      	b.n	80023b6 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002474:	f7ff ff61 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002478:	4620      	mov	r0, r4
 800247a:	f000 fcbd 	bl	8002df8 <HAL_TIM_PWM_PulseFinishedCallback>
 800247e:	e7af      	b.n	80023e0 <HAL_TIM_IRQHandler+0xa2>
 8002480:	bd10      	pop	{r4, pc}
	...

08002484 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002484:	4a2e      	ldr	r2, [pc, #184]	; (8002540 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8002486:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002488:	4290      	cmp	r0, r2
 800248a:	d012      	beq.n	80024b2 <TIM_Base_SetConfig+0x2e>
 800248c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002490:	d00f      	beq.n	80024b2 <TIM_Base_SetConfig+0x2e>
 8002492:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002496:	4290      	cmp	r0, r2
 8002498:	d00b      	beq.n	80024b2 <TIM_Base_SetConfig+0x2e>
 800249a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800249e:	4290      	cmp	r0, r2
 80024a0:	d007      	beq.n	80024b2 <TIM_Base_SetConfig+0x2e>
 80024a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024a6:	4290      	cmp	r0, r2
 80024a8:	d003      	beq.n	80024b2 <TIM_Base_SetConfig+0x2e>
 80024aa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80024ae:	4290      	cmp	r0, r2
 80024b0:	d11d      	bne.n	80024ee <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80024b2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80024b8:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80024ba:	4a21      	ldr	r2, [pc, #132]	; (8002540 <TIM_Base_SetConfig+0xbc>)
 80024bc:	4290      	cmp	r0, r2
 80024be:	d104      	bne.n	80024ca <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024c0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80024c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024c6:	4313      	orrs	r3, r2
 80024c8:	e028      	b.n	800251c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80024ca:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80024ce:	d0f7      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
 80024d0:	4a1c      	ldr	r2, [pc, #112]	; (8002544 <TIM_Base_SetConfig+0xc0>)
 80024d2:	4290      	cmp	r0, r2
 80024d4:	d0f4      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
 80024d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024da:	4290      	cmp	r0, r2
 80024dc:	d0f0      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
 80024de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024e2:	4290      	cmp	r0, r2
 80024e4:	d0ec      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
 80024e6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80024ea:	4290      	cmp	r0, r2
 80024ec:	d0e8      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
 80024ee:	4a16      	ldr	r2, [pc, #88]	; (8002548 <TIM_Base_SetConfig+0xc4>)
 80024f0:	4290      	cmp	r0, r2
 80024f2:	d0e5      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
 80024f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024f8:	4290      	cmp	r0, r2
 80024fa:	d0e1      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
 80024fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002500:	4290      	cmp	r0, r2
 8002502:	d0dd      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
 8002504:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002508:	4290      	cmp	r0, r2
 800250a:	d0d9      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
 800250c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002510:	4290      	cmp	r0, r2
 8002512:	d0d5      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
 8002514:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002518:	4290      	cmp	r0, r2
 800251a:	d0d1      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 800251c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800251e:	688b      	ldr	r3, [r1, #8]
 8002520:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002522:	680b      	ldr	r3, [r1, #0]
 8002524:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <TIM_Base_SetConfig+0xbc>)
 8002528:	4298      	cmp	r0, r3
 800252a:	d006      	beq.n	800253a <TIM_Base_SetConfig+0xb6>
 800252c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002530:	4298      	cmp	r0, r3
 8002532:	d002      	beq.n	800253a <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8002534:	2301      	movs	r3, #1
 8002536:	6143      	str	r3, [r0, #20]
}
 8002538:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800253a:	690b      	ldr	r3, [r1, #16]
 800253c:	6303      	str	r3, [r0, #48]	; 0x30
 800253e:	e7f9      	b.n	8002534 <TIM_Base_SetConfig+0xb0>
 8002540:	40010000 	.word	0x40010000
 8002544:	40000400 	.word	0x40000400
 8002548:	40014000 	.word	0x40014000

0800254c <HAL_TIM_Base_Init>:
{ 
 800254c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800254e:	4604      	mov	r4, r0
 8002550:	b1a0      	cbz	r0, 800257c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002552:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002556:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800255a:	b91b      	cbnz	r3, 8002564 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800255c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8002560:	f001 f8a8 	bl	80036b4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002564:	2302      	movs	r3, #2
 8002566:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800256a:	6820      	ldr	r0, [r4, #0]
 800256c:	1d21      	adds	r1, r4, #4
 800256e:	f7ff ff89 	bl	8002484 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002572:	2301      	movs	r3, #1
 8002574:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002578:	2000      	movs	r0, #0
 800257a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800257c:	2001      	movs	r0, #1
}
 800257e:	bd10      	pop	{r4, pc}

08002580 <HAL_TIM_OC_Init>:
{
 8002580:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002582:	4604      	mov	r4, r0
 8002584:	b1a0      	cbz	r0, 80025b0 <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002586:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800258a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800258e:	b91b      	cbnz	r3, 8002598 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002590:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_OC_MspInit(htim);
 8002594:	f7ff fdf6 	bl	8002184 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002598:	2302      	movs	r3, #2
 800259a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 800259e:	6820      	ldr	r0, [r4, #0]
 80025a0:	1d21      	adds	r1, r4, #4
 80025a2:	f7ff ff6f 	bl	8002484 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80025a6:	2301      	movs	r3, #1
 80025a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80025ac:	2000      	movs	r0, #0
 80025ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80025b0:	2001      	movs	r0, #1
}
 80025b2:	bd10      	pop	{r4, pc}

080025b4 <HAL_TIM_IC_Init>:
{
 80025b4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80025b6:	4604      	mov	r4, r0
 80025b8:	b1a0      	cbz	r0, 80025e4 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80025ba:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80025be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80025c2:	b91b      	cbnz	r3, 80025cc <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80025c4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
 80025c8:	f7ff fddd 	bl	8002186 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;   
 80025cc:	2302      	movs	r3, #2
 80025ce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80025d2:	6820      	ldr	r0, [r4, #0]
 80025d4:	1d21      	adds	r1, r4, #4
 80025d6:	f7ff ff55 	bl	8002484 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80025da:	2301      	movs	r3, #1
 80025dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80025e0:	2000      	movs	r0, #0
 80025e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80025e4:	2001      	movs	r0, #1
}
 80025e6:	bd10      	pop	{r4, pc}

080025e8 <TIM_TI1_SetConfig>:
{
 80025e8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ea:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80025ec:	4e1a      	ldr	r6, [pc, #104]	; (8002658 <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ee:	f024 0401 	bic.w	r4, r4, #1
 80025f2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025f4:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80025f6:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80025f8:	42b0      	cmp	r0, r6
 80025fa:	f024 0403 	bic.w	r4, r4, #3
 80025fe:	d01a      	beq.n	8002636 <TIM_TI1_SetConfig+0x4e>
 8002600:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002604:	d017      	beq.n	8002636 <TIM_TI1_SetConfig+0x4e>
 8002606:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800260a:	42b0      	cmp	r0, r6
 800260c:	d013      	beq.n	8002636 <TIM_TI1_SetConfig+0x4e>
 800260e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002612:	42b0      	cmp	r0, r6
 8002614:	d00f      	beq.n	8002636 <TIM_TI1_SetConfig+0x4e>
 8002616:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800261a:	42b0      	cmp	r0, r6
 800261c:	d00b      	beq.n	8002636 <TIM_TI1_SetConfig+0x4e>
 800261e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8002622:	42b0      	cmp	r0, r6
 8002624:	d007      	beq.n	8002636 <TIM_TI1_SetConfig+0x4e>
 8002626:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800262a:	42b0      	cmp	r0, r6
 800262c:	d003      	beq.n	8002636 <TIM_TI1_SetConfig+0x4e>
 800262e:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8002632:	42b0      	cmp	r0, r6
 8002634:	d10d      	bne.n	8002652 <TIM_TI1_SetConfig+0x6a>
    tmpccmr1 |= TIM_ICSelection;
 8002636:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002638:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800263a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800263e:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002640:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002644:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002648:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800264a:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 800264c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800264e:	6201      	str	r1, [r0, #32]
}
 8002650:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002652:	f044 0201 	orr.w	r2, r4, #1
 8002656:	e7ef      	b.n	8002638 <TIM_TI1_SetConfig+0x50>
 8002658:	40010000 	.word	0x40010000

0800265c <HAL_TIM_IC_ConfigChannel>:
{
 800265c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800265e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002662:	2b01      	cmp	r3, #1
{
 8002664:	4604      	mov	r4, r0
 8002666:	460d      	mov	r5, r1
 8002668:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800266c:	d019      	beq.n	80026a2 <HAL_TIM_IC_ConfigChannel+0x46>
 800266e:	2301      	movs	r3, #1
 8002670:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002674:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
 8002678:	b9a2      	cbnz	r2, 80026a4 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 800267a:	68cb      	ldr	r3, [r1, #12]
 800267c:	6820      	ldr	r0, [r4, #0]
 800267e:	c906      	ldmia	r1, {r1, r2}
 8002680:	f7ff ffb2 	bl	80025e8 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002684:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002686:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	f022 020c 	bic.w	r2, r2, #12
 800268e:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	430a      	orrs	r2, r1
 8002694:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002696:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002698:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800269a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 800269e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80026a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 80026a4:	2a04      	cmp	r2, #4
 80026a6:	688e      	ldr	r6, [r1, #8]
 80026a8:	6823      	ldr	r3, [r4, #0]
 80026aa:	68e8      	ldr	r0, [r5, #12]
 80026ac:	c982      	ldmia	r1, {r1, r7}
 80026ae:	d11f      	bne.n	80026f0 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026b0:	6a1a      	ldr	r2, [r3, #32]
 80026b2:	f022 0210 	bic.w	r2, r2, #16
 80026b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026b8:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 80026ba:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80026bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80026c0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80026c4:	0300      	lsls	r0, r0, #12
 80026c6:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026c8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80026cc:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80026ce:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80026d0:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026d4:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80026d8:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 80026da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026dc:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80026de:	699a      	ldr	r2, [r3, #24]
 80026e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80026e4:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80026e6:	699a      	ldr	r2, [r3, #24]
 80026e8:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80026ec:	619e      	str	r6, [r3, #24]
 80026ee:	e7d2      	b.n	8002696 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 80026f0:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026f2:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 80026f4:	d11c      	bne.n	8002730 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80026fc:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 80026fe:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002700:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8002704:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002706:	0100      	lsls	r0, r0, #4
 8002708:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800270a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800270e:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002710:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002712:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002716:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800271a:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 800271c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800271e:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002720:	69da      	ldr	r2, [r3, #28]
 8002722:	f022 020c 	bic.w	r2, r2, #12
 8002726:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002728:	69da      	ldr	r2, [r3, #28]
 800272a:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800272c:	61de      	str	r6, [r3, #28]
 800272e:	e7b2      	b.n	8002696 <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002730:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002734:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002736:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8002738:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800273a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800273e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002742:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002744:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002748:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800274a:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800274c:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800274e:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002752:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002756:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8002758:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 800275a:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800275c:	69da      	ldr	r2, [r3, #28]
 800275e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002762:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 800276a:	e7df      	b.n	800272c <HAL_TIM_IC_ConfigChannel+0xd0>

0800276c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800276c:	6a03      	ldr	r3, [r0, #32]
 800276e:	f023 0310 	bic.w	r3, r3, #16
 8002772:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002774:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002776:	6842      	ldr	r2, [r0, #4]
{
 8002778:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 800277a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800277c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800277e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002782:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002786:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002788:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800278c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002790:	4c0d      	ldr	r4, [pc, #52]	; (80027c8 <TIM_OC2_SetConfig+0x5c>)
 8002792:	42a0      	cmp	r0, r4
 8002794:	d009      	beq.n	80027aa <TIM_OC2_SetConfig+0x3e>
 8002796:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800279a:	42a0      	cmp	r0, r4
 800279c:	d005      	beq.n	80027aa <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 800279e:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80027a0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80027a2:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80027a4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80027a6:	6203      	str	r3, [r0, #32]
}
 80027a8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027aa:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027ac:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 80027ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027b2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027b6:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027bc:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80027be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027c2:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 80027c6:	e7ea      	b.n	800279e <TIM_OC2_SetConfig+0x32>
 80027c8:	40010000 	.word	0x40010000

080027cc <HAL_TIM_OC_ConfigChannel>:
{
 80027cc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim); 
 80027ce:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80027d2:	2b01      	cmp	r3, #1
{
 80027d4:	4604      	mov	r4, r0
 80027d6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim); 
 80027da:	d018      	beq.n	800280e <HAL_TIM_OC_ConfigChannel+0x42>
 80027dc:	2301      	movs	r3, #1
 80027de:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80027e2:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 80027e6:	461d      	mov	r5, r3
  switch (Channel)
 80027e8:	2a0c      	cmp	r2, #12
 80027ea:	d80b      	bhi.n	8002804 <HAL_TIM_OC_ConfigChannel+0x38>
 80027ec:	e8df f002 	tbb	[pc, r2]
 80027f0:	0a0a0a07 	.word	0x0a0a0a07
 80027f4:	0a0a0a10 	.word	0x0a0a0a10
 80027f8:	0a0a0a14 	.word	0x0a0a0a14
 80027fc:	18          	.byte	0x18
 80027fd:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027fe:	6820      	ldr	r0, [r4, #0]
 8002800:	f7ff fbdc 	bl	8001fbc <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim); 
 8002804:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002806:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim); 
 800280a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800280e:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002810:	6820      	ldr	r0, [r4, #0]
 8002812:	f7ff ffab 	bl	800276c <TIM_OC2_SetConfig>
    break;
 8002816:	e7f5      	b.n	8002804 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002818:	6820      	ldr	r0, [r4, #0]
 800281a:	f7ff fbfb 	bl	8002014 <TIM_OC3_SetConfig>
    break;
 800281e:	e7f1      	b.n	8002804 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002820:	6820      	ldr	r0, [r4, #0]
 8002822:	f7ff fc27 	bl	8002074 <TIM_OC4_SetConfig>
    break;
 8002826:	e7ed      	b.n	8002804 <HAL_TIM_OC_ConfigChannel+0x38>

08002828 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8002828:	6a03      	ldr	r3, [r0, #32]
{
 800282a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 800282c:	2401      	movs	r4, #1
 800282e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002830:	ea23 0304 	bic.w	r3, r3, r4
 8002834:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002836:	6a03      	ldr	r3, [r0, #32]
 8002838:	408a      	lsls	r2, r1
 800283a:	431a      	orrs	r2, r3
 800283c:	6202      	str	r2, [r0, #32]
 800283e:	bd10      	pop	{r4, pc}

08002840 <HAL_TIM_PWM_Start_IT>:
{
 8002840:	b510      	push	{r4, lr}
 8002842:	4604      	mov	r4, r0
  switch (Channel)
 8002844:	290c      	cmp	r1, #12
 8002846:	d80d      	bhi.n	8002864 <HAL_TIM_PWM_Start_IT+0x24>
 8002848:	e8df f001 	tbb	[pc, r1]
 800284c:	0c0c0c07 	.word	0x0c0c0c07
 8002850:	0c0c0c22 	.word	0x0c0c0c22
 8002854:	0c0c0c27 	.word	0x0c0c0c27
 8002858:	2c          	.byte	0x2c
 8002859:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800285a:	6802      	ldr	r2, [r0, #0]
 800285c:	68d3      	ldr	r3, [r2, #12]
 800285e:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002862:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002864:	2201      	movs	r2, #1
 8002866:	6820      	ldr	r0, [r4, #0]
 8002868:	f7ff ffde 	bl	8002828 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800286c:	6823      	ldr	r3, [r4, #0]
 800286e:	4a10      	ldr	r2, [pc, #64]	; (80028b0 <HAL_TIM_PWM_Start_IT+0x70>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d003      	beq.n	800287c <HAL_TIM_PWM_Start_IT+0x3c>
 8002874:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002878:	4293      	cmp	r3, r2
 800287a:	d103      	bne.n	8002884 <HAL_TIM_PWM_Start_IT+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 800287c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800287e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002882:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
} 
 800288c:	2000      	movs	r0, #0
 800288e:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002890:	6802      	ldr	r2, [r0, #0]
 8002892:	68d3      	ldr	r3, [r2, #12]
 8002894:	f043 0304 	orr.w	r3, r3, #4
 8002898:	e7e3      	b.n	8002862 <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800289a:	6802      	ldr	r2, [r0, #0]
 800289c:	68d3      	ldr	r3, [r2, #12]
 800289e:	f043 0308 	orr.w	r3, r3, #8
 80028a2:	e7de      	b.n	8002862 <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80028a4:	6802      	ldr	r2, [r0, #0]
 80028a6:	68d3      	ldr	r3, [r2, #12]
 80028a8:	f043 0310 	orr.w	r3, r3, #16
 80028ac:	e7d9      	b.n	8002862 <HAL_TIM_PWM_Start_IT+0x22>
 80028ae:	bf00      	nop
 80028b0:	40010000 	.word	0x40010000

080028b4 <HAL_TIM_OC_Start_IT>:
 80028b4:	f7ff bfc4 	b.w	8002840 <HAL_TIM_PWM_Start_IT>

080028b8 <HAL_TIM_IC_Start_IT>:
{
 80028b8:	b510      	push	{r4, lr}
 80028ba:	4604      	mov	r4, r0
  switch (Channel)
 80028bc:	290c      	cmp	r1, #12
 80028be:	d80d      	bhi.n	80028dc <HAL_TIM_IC_Start_IT+0x24>
 80028c0:	e8df f001 	tbb	[pc, r1]
 80028c4:	0c0c0c07 	.word	0x0c0c0c07
 80028c8:	0c0c0c17 	.word	0x0c0c0c17
 80028cc:	0c0c0c1c 	.word	0x0c0c0c1c
 80028d0:	21          	.byte	0x21
 80028d1:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80028d2:	6802      	ldr	r2, [r0, #0]
 80028d4:	68d3      	ldr	r3, [r2, #12]
 80028d6:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80028da:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028dc:	6820      	ldr	r0, [r4, #0]
 80028de:	2201      	movs	r2, #1
 80028e0:	f7ff ffa2 	bl	8002828 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 80028e4:	6822      	ldr	r2, [r4, #0]
 80028e6:	6813      	ldr	r3, [r2, #0]
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6013      	str	r3, [r2, #0]
} 
 80028ee:	2000      	movs	r0, #0
 80028f0:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80028f2:	6802      	ldr	r2, [r0, #0]
 80028f4:	68d3      	ldr	r3, [r2, #12]
 80028f6:	f043 0304 	orr.w	r3, r3, #4
 80028fa:	e7ee      	b.n	80028da <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80028fc:	6802      	ldr	r2, [r0, #0]
 80028fe:	68d3      	ldr	r3, [r2, #12]
 8002900:	f043 0308 	orr.w	r3, r3, #8
 8002904:	e7e9      	b.n	80028da <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002906:	6802      	ldr	r2, [r0, #0]
 8002908:	68d3      	ldr	r3, [r2, #12]
 800290a:	f043 0310 	orr.w	r3, r3, #16
 800290e:	e7e4      	b.n	80028da <HAL_TIM_IC_Start_IT+0x22>

08002910 <HAL_TIM_IC_Stop_IT>:
{
 8002910:	b510      	push	{r4, lr}
 8002912:	4604      	mov	r4, r0
  switch (Channel)
 8002914:	290c      	cmp	r1, #12
 8002916:	d80d      	bhi.n	8002934 <HAL_TIM_IC_Stop_IT+0x24>
 8002918:	e8df f001 	tbb	[pc, r1]
 800291c:	0c0c0c07 	.word	0x0c0c0c07
 8002920:	0c0c0c21 	.word	0x0c0c0c21
 8002924:	0c0c0c26 	.word	0x0c0c0c26
 8002928:	2b          	.byte	0x2b
 8002929:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800292a:	6802      	ldr	r2, [r0, #0]
 800292c:	68d3      	ldr	r3, [r2, #12]
 800292e:	f023 0302 	bic.w	r3, r3, #2
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002932:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE); 
 8002934:	2200      	movs	r2, #0
 8002936:	6820      	ldr	r0, [r4, #0]
 8002938:	f7ff ff76 	bl	8002828 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim); 
 800293c:	6823      	ldr	r3, [r4, #0]
 800293e:	6a19      	ldr	r1, [r3, #32]
 8002940:	f241 1211 	movw	r2, #4369	; 0x1111
 8002944:	4211      	tst	r1, r2
 8002946:	d108      	bne.n	800295a <HAL_TIM_IC_Stop_IT+0x4a>
 8002948:	6a19      	ldr	r1, [r3, #32]
 800294a:	f240 4244 	movw	r2, #1092	; 0x444
 800294e:	4211      	tst	r1, r2
 8002950:	bf02      	ittt	eq
 8002952:	681a      	ldreq	r2, [r3, #0]
 8002954:	f022 0201 	biceq.w	r2, r2, #1
 8002958:	601a      	streq	r2, [r3, #0]
}
 800295a:	2000      	movs	r0, #0
 800295c:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800295e:	6802      	ldr	r2, [r0, #0]
 8002960:	68d3      	ldr	r3, [r2, #12]
 8002962:	f023 0304 	bic.w	r3, r3, #4
 8002966:	e7e4      	b.n	8002932 <HAL_TIM_IC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002968:	6802      	ldr	r2, [r0, #0]
 800296a:	68d3      	ldr	r3, [r2, #12]
 800296c:	f023 0308 	bic.w	r3, r3, #8
 8002970:	e7df      	b.n	8002932 <HAL_TIM_IC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002972:	6802      	ldr	r2, [r0, #0]
 8002974:	68d3      	ldr	r3, [r2, #12]
 8002976:	f023 0310 	bic.w	r3, r3, #16
 800297a:	e7da      	b.n	8002932 <HAL_TIM_IC_Stop_IT+0x22>

0800297c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800297c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002980:	2b01      	cmp	r3, #1
{
 8002982:	b510      	push	{r4, lr}
 8002984:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002988:	d018      	beq.n	80029bc <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800298a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800298e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002990:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002992:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002994:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002996:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800299a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	4322      	orrs	r2, r4
 80029a0:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029a8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80029b0:	2301      	movs	r3, #1
 80029b2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80029b6:	2300      	movs	r3, #0
 80029b8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80029bc:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80029be:	bd10      	pop	{r4, pc}

080029c0 <HAL_TIMEx_CommutationCallback>:
 80029c0:	4770      	bx	lr

080029c2 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029c2:	4770      	bx	lr

080029c4 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80029c8:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80029ca:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80029cc:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029ce:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80029d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80029d4:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80029d6:	6133      	str	r3, [r6, #16]
{
 80029d8:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029da:	6883      	ldr	r3, [r0, #8]
 80029dc:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80029de:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029e0:	4303      	orrs	r3, r0
 80029e2:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80029e4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029e8:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80029ea:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029ee:	430b      	orrs	r3, r1
 80029f0:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80029f2:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80029f4:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80029f6:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80029f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80029fc:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029fe:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002a02:	6173      	str	r3, [r6, #20]
 8002a04:	4b7a      	ldr	r3, [pc, #488]	; (8002bf0 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a06:	d17c      	bne.n	8002b02 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a08:	429e      	cmp	r6, r3
 8002a0a:	d003      	beq.n	8002a14 <UART_SetConfig+0x50>
 8002a0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a10:	429e      	cmp	r6, r3
 8002a12:	d144      	bne.n	8002a9e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002a14:	f7ff f932 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002a18:	2519      	movs	r5, #25
 8002a1a:	fb05 f300 	mul.w	r3, r5, r0
 8002a1e:	6860      	ldr	r0, [r4, #4]
 8002a20:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002a24:	0040      	lsls	r0, r0, #1
 8002a26:	fbb3 f3f0 	udiv	r3, r3, r0
 8002a2a:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a32:	f7ff f923 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002a36:	6863      	ldr	r3, [r4, #4]
 8002a38:	4368      	muls	r0, r5
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fbb0 f7f3 	udiv	r7, r0, r3
 8002a40:	f7ff f91c 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002a44:	6863      	ldr	r3, [r4, #4]
 8002a46:	4368      	muls	r0, r5
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a4e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a52:	fb09 7313 	mls	r3, r9, r3, r7
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	3332      	adds	r3, #50	; 0x32
 8002a5a:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002a64:	f7ff f90a 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002a68:	6862      	ldr	r2, [r4, #4]
 8002a6a:	4368      	muls	r0, r5
 8002a6c:	0052      	lsls	r2, r2, #1
 8002a6e:	fbb0 faf2 	udiv	sl, r0, r2
 8002a72:	f7ff f903 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002a76:	6863      	ldr	r3, [r4, #4]
 8002a78:	4368      	muls	r0, r5
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a80:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a84:	fb09 a313 	mls	r3, r9, r3, sl
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	3332      	adds	r3, #50	; 0x32
 8002a8c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002a96:	443b      	add	r3, r7
 8002a98:	60b3      	str	r3, [r6, #8]
 8002a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002a9e:	f7ff f8dd 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002aa2:	2519      	movs	r5, #25
 8002aa4:	fb05 f300 	mul.w	r3, r5, r0
 8002aa8:	6860      	ldr	r0, [r4, #4]
 8002aaa:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002aae:	0040      	lsls	r0, r0, #1
 8002ab0:	fbb3 f3f0 	udiv	r3, r3, r0
 8002ab4:	fbb3 f3f9 	udiv	r3, r3, r9
 8002ab8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002abc:	f7ff f8ce 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002ac0:	6863      	ldr	r3, [r4, #4]
 8002ac2:	4368      	muls	r0, r5
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	fbb0 f7f3 	udiv	r7, r0, r3
 8002aca:	f7ff f8c7 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002ace:	6863      	ldr	r3, [r4, #4]
 8002ad0:	4368      	muls	r0, r5
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad8:	fbb3 f3f9 	udiv	r3, r3, r9
 8002adc:	fb09 7313 	mls	r3, r9, r3, r7
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	3332      	adds	r3, #50	; 0x32
 8002ae4:	fbb3 f3f9 	udiv	r3, r3, r9
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002aee:	f7ff f8b5 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002af2:	6862      	ldr	r2, [r4, #4]
 8002af4:	4368      	muls	r0, r5
 8002af6:	0052      	lsls	r2, r2, #1
 8002af8:	fbb0 faf2 	udiv	sl, r0, r2
 8002afc:	f7ff f8ae 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002b00:	e7b9      	b.n	8002a76 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b02:	429e      	cmp	r6, r3
 8002b04:	d002      	beq.n	8002b0c <UART_SetConfig+0x148>
 8002b06:	4b3b      	ldr	r3, [pc, #236]	; (8002bf4 <UART_SetConfig+0x230>)
 8002b08:	429e      	cmp	r6, r3
 8002b0a:	d140      	bne.n	8002b8e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002b0c:	f7ff f8b6 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002b10:	6867      	ldr	r7, [r4, #4]
 8002b12:	2519      	movs	r5, #25
 8002b14:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002b18:	fb05 f300 	mul.w	r3, r5, r0
 8002b1c:	00bf      	lsls	r7, r7, #2
 8002b1e:	fbb3 f3f7 	udiv	r3, r3, r7
 8002b22:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b26:	011f      	lsls	r7, r3, #4
 8002b28:	f7ff f8a8 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002b2c:	6863      	ldr	r3, [r4, #4]
 8002b2e:	4368      	muls	r0, r5
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	fbb0 f8f3 	udiv	r8, r0, r3
 8002b36:	f7ff f8a1 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002b3a:	6863      	ldr	r3, [r4, #4]
 8002b3c:	4368      	muls	r0, r5
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b44:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b48:	fb09 8313 	mls	r3, r9, r3, r8
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	3332      	adds	r3, #50	; 0x32
 8002b50:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b54:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002b58:	f7ff f890 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002b5c:	6862      	ldr	r2, [r4, #4]
 8002b5e:	4368      	muls	r0, r5
 8002b60:	0092      	lsls	r2, r2, #2
 8002b62:	fbb0 faf2 	udiv	sl, r0, r2
 8002b66:	f7ff f889 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002b6a:	6863      	ldr	r3, [r4, #4]
 8002b6c:	4368      	muls	r0, r5
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b74:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b78:	fb09 a313 	mls	r3, r9, r3, sl
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	3332      	adds	r3, #50	; 0x32
 8002b80:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	ea43 0308 	orr.w	r3, r3, r8
 8002b8c:	e783      	b.n	8002a96 <UART_SetConfig+0xd2>
 8002b8e:	f7ff f865 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002b92:	6867      	ldr	r7, [r4, #4]
 8002b94:	2519      	movs	r5, #25
 8002b96:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002b9a:	fb05 f300 	mul.w	r3, r5, r0
 8002b9e:	00bf      	lsls	r7, r7, #2
 8002ba0:	fbb3 f3f7 	udiv	r3, r3, r7
 8002ba4:	fbb3 f3f9 	udiv	r3, r3, r9
 8002ba8:	011f      	lsls	r7, r3, #4
 8002baa:	f7ff f857 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002bae:	6863      	ldr	r3, [r4, #4]
 8002bb0:	4368      	muls	r0, r5
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	fbb0 f8f3 	udiv	r8, r0, r3
 8002bb8:	f7ff f850 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002bbc:	6863      	ldr	r3, [r4, #4]
 8002bbe:	4368      	muls	r0, r5
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc6:	fbb3 f3f9 	udiv	r3, r3, r9
 8002bca:	fb09 8313 	mls	r3, r9, r3, r8
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	3332      	adds	r3, #50	; 0x32
 8002bd2:	fbb3 f3f9 	udiv	r3, r3, r9
 8002bd6:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002bda:	f7ff f83f 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002bde:	6862      	ldr	r2, [r4, #4]
 8002be0:	4368      	muls	r0, r5
 8002be2:	0092      	lsls	r2, r2, #2
 8002be4:	fbb0 faf2 	udiv	sl, r0, r2
 8002be8:	f7ff f838 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002bec:	e7bd      	b.n	8002b6a <UART_SetConfig+0x1a6>
 8002bee:	bf00      	nop
 8002bf0:	40011000 	.word	0x40011000
 8002bf4:	40011400 	.word	0x40011400

08002bf8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	4604      	mov	r4, r0
 8002bfc:	460e      	mov	r6, r1
 8002bfe:	4617      	mov	r7, r2
 8002c00:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002c02:	6821      	ldr	r1, [r4, #0]
 8002c04:	680b      	ldr	r3, [r1, #0]
 8002c06:	ea36 0303 	bics.w	r3, r6, r3
 8002c0a:	d101      	bne.n	8002c10 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002c0c:	2000      	movs	r0, #0
}
 8002c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002c10:	1c6b      	adds	r3, r5, #1
 8002c12:	d0f7      	beq.n	8002c04 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002c14:	b995      	cbnz	r5, 8002c3c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c16:	6823      	ldr	r3, [r4, #0]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c1e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	f022 0201 	bic.w	r2, r2, #1
 8002c26:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002c28:	2320      	movs	r3, #32
 8002c2a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c2e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002c32:	2300      	movs	r3, #0
 8002c34:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002c38:	2003      	movs	r0, #3
 8002c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002c3c:	f7fe fc70 	bl	8001520 <HAL_GetTick>
 8002c40:	1bc0      	subs	r0, r0, r7
 8002c42:	4285      	cmp	r5, r0
 8002c44:	d2dd      	bcs.n	8002c02 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002c46:	e7e6      	b.n	8002c16 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002c48 <HAL_UART_Init>:
{
 8002c48:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002c4a:	4604      	mov	r4, r0
 8002c4c:	b340      	cbz	r0, 8002ca0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002c4e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002c52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c56:	b91b      	cbnz	r3, 8002c60 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002c58:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002c5c:	f000 fd94 	bl	8003788 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002c60:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c62:	2324      	movs	r3, #36	; 0x24
 8002c64:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002c68:	68d3      	ldr	r3, [r2, #12]
 8002c6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c6e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002c70:	4620      	mov	r0, r4
 8002c72:	f7ff fea7 	bl	80029c4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c7e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c80:	695a      	ldr	r2, [r3, #20]
 8002c82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c86:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c8e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c90:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002c92:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c94:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002c96:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002c9a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002c9e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002ca0:	2001      	movs	r0, #1
}
 8002ca2:	bd10      	pop	{r4, pc}

08002ca4 <HAL_UART_Transmit>:
{
 8002ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ca8:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8002caa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002cae:	2b20      	cmp	r3, #32
{
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	460d      	mov	r5, r1
 8002cb4:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8002cb6:	d14f      	bne.n	8002d58 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8002cb8:	2900      	cmp	r1, #0
 8002cba:	d04a      	beq.n	8002d52 <HAL_UART_Transmit+0xae>
 8002cbc:	2a00      	cmp	r2, #0
 8002cbe:	d048      	beq.n	8002d52 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8002cc0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d047      	beq.n	8002d58 <HAL_UART_Transmit+0xb4>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cd2:	2321      	movs	r3, #33	; 0x21
 8002cd4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002cd8:	f7fe fc22 	bl	8001520 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002cdc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002ce0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002ce2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002ce6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	b96b      	cbnz	r3, 8002d08 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cec:	463b      	mov	r3, r7
 8002cee:	4632      	mov	r2, r6
 8002cf0:	2140      	movs	r1, #64	; 0x40
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	f7ff ff80 	bl	8002bf8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002cf8:	b9b0      	cbnz	r0, 8002d28 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8002cfa:	2320      	movs	r3, #32
 8002cfc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002d00:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002d08:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d10:	68a3      	ldr	r3, [r4, #8]
 8002d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d16:	4632      	mov	r2, r6
 8002d18:	463b      	mov	r3, r7
 8002d1a:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002d1e:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d20:	d10e      	bne.n	8002d40 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d22:	f7ff ff69 	bl	8002bf8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002d26:	b110      	cbz	r0, 8002d2e <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002d28:	2003      	movs	r0, #3
 8002d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002d2e:	882b      	ldrh	r3, [r5, #0]
 8002d30:	6822      	ldr	r2, [r4, #0]
 8002d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d36:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002d38:	6923      	ldr	r3, [r4, #16]
 8002d3a:	b943      	cbnz	r3, 8002d4e <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8002d3c:	3502      	adds	r5, #2
 8002d3e:	e7d2      	b.n	8002ce6 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d40:	f7ff ff5a 	bl	8002bf8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002d44:	2800      	cmp	r0, #0
 8002d46:	d1ef      	bne.n	8002d28 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	782a      	ldrb	r2, [r5, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	3501      	adds	r5, #1
 8002d50:	e7c9      	b.n	8002ce6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002d52:	2001      	movs	r0, #1
 8002d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002d58:	2002      	movs	r0, #2
}
 8002d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002d60 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	static uint32_t lastCounterValue;
	uint32_t period = TIM2->CCR1-lastCounterValue;
 8002d68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d6e:	4b20      	ldr	r3, [pc, #128]	; (8002df0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	60fb      	str	r3, [r7, #12]

	if(clock.addPeriodSample(period)){
 8002d76:	68f9      	ldr	r1, [r7, #12]
 8002d78:	481e      	ldr	r0, [pc, #120]	; (8002df4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002d7a:	f000 fdce 	bl	800391a <_ZN5Clock15addPeriodSampleEj>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bf14      	ite	ne
 8002d84:	2301      	movne	r3, #1
 8002d86:	2300      	moveq	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d023      	beq.n	8002dd6 <HAL_TIM_IC_CaptureCallback+0x76>
		clock.masterTick();
 8002d8e:	4819      	ldr	r0, [pc, #100]	; (8002df4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002d90:	f000 febb 	bl	8003b0a <_ZN5Clock10masterTickEv>
		clock.lock();
 8002d94:	4817      	ldr	r0, [pc, #92]	; (8002df4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002d96:	f000 fef8 	bl	8003b8a <_ZN5Clock4lockEv>
		clock.slaveTimer->Instance->CNT = 0;
 8002d9a:	4b16      	ldr	r3, [pc, #88]	; (8002df4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2200      	movs	r2, #0
 8002da2:	625a      	str	r2, [r3, #36]	; 0x24
		clock.slaveTimer->Instance->ARR = (clock.averagedPeriod+50)/16;
 8002da4:	4b13      	ldr	r3, [pc, #76]	; (8002df4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a12      	ldr	r2, [pc, #72]	; (8002df4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002dac:	69d2      	ldr	r2, [r2, #28]
 8002dae:	3232      	adds	r2, #50	; 0x32
 8002db0:	0912      	lsrs	r2, r2, #4
 8002db2:	62da      	str	r2, [r3, #44]	; 0x2c
		clock.slaveTimer->Instance->CCR2 = 1000;
 8002db4:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002dbe:	639a      	str	r2, [r3, #56]	; 0x38
		// Set timer 2 channel 2 to trigger after the period has elapsed
		clock.masterTimer->Instance->CCR2 = TIM2->CNT+clock.averagedPeriod;
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dca:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002dcc:	4a09      	ldr	r2, [pc, #36]	; (8002df4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002dce:	69d2      	ldr	r2, [r2, #28]
 8002dd0:	440a      	add	r2, r1
 8002dd2:	639a      	str	r2, [r3, #56]	; 0x38
 8002dd4:	e002      	b.n	8002ddc <HAL_TIM_IC_CaptureCallback+0x7c>
	}
	else{
		clock.unlock();
 8002dd6:	4807      	ldr	r0, [pc, #28]	; (8002df4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002dd8:	f000 feee 	bl	8003bb8 <_ZN5Clock6unlockEv>
	}

	lastCounterValue = TIM2->CNT;
 8002ddc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	4a03      	ldr	r2, [pc, #12]	; (8002df0 <HAL_TIM_IC_CaptureCallback+0x90>)
 8002de4:	6013      	str	r3, [r2, #0]
				clock.setSlaveDivision(16);
			}
		}
		}
		*/
}
 8002de6:	bf00      	nop
 8002de8:	3710      	adds	r7, #16
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	200002c4 	.word	0x200002c4
 8002df4:	200001e4 	.word	0x200001e4

08002df8 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e08:	d11f      	bne.n	8002e4a <HAL_TIM_PWM_PulseFinishedCallback+0x52>

		if(clock.clockSource==INTERNAL){
 8002e0a:	4b1c      	ldr	r3, [pc, #112]	; (8002e7c <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8002e0c:	7a1b      	ldrb	r3, [r3, #8]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d01b      	beq.n	8002e4a <HAL_TIM_PWM_PulseFinishedCallback+0x52>
			// HAL_GPIO_WritePin(OUT1_GPIO_Port,OUT1_Pin,GPIO_PIN_SET);
			// HAL_GPIO_WritePin(OUT2_GPIO_Port,OUT2_Pin,GPIO_PIN_SET);
			// HAL_GPIO_WritePin(OUT3_GPIO_Port,OUT3_Pin,GPIO_PIN_SET);

		}
		else if(clock.clockSource==EXTERNAL){
 8002e12:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8002e14:	7a1b      	ldrb	r3, [r3, #8]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d117      	bne.n	8002e4a <HAL_TIM_PWM_PulseFinishedCallback+0x52>
			// clock.masterTick();
			// clock.masterTimer->Instance->CCR2 = TIM2->CNT+clock.period;
			if(clock.isLocked()){
 8002e1a:	4818      	ldr	r0, [pc, #96]	; (8002e7c <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8002e1c:	f000 fed9 	bl	8003bd2 <_ZN5Clock8isLockedEv>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d011      	beq.n	8002e4a <HAL_TIM_PWM_PulseFinishedCallback+0x52>
				clock.masterTick();
 8002e26:	4815      	ldr	r0, [pc, #84]	; (8002e7c <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8002e28:	f000 fe6f 	bl	8003b0a <_ZN5Clock10masterTickEv>
				clock.slaveTimer->Instance->CNT = 0;
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	2200      	movs	r2, #0
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24
				clock.masterTimer->Instance->CCR2 = TIM2->CNT+clock.averagedPeriod;
 8002e36:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e40:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002e42:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8002e44:	69d2      	ldr	r2, [r2, #28]
 8002e46:	440a      	add	r2, r1
 8002e48:	639a      	str	r2, [r3, #56]	; 0x38
			// HAL_GPIO_WritePin(OUT3_GPIO_Port,OUT3_Pin,GPIO_PIN_SET);

		}
	}

	if(htim->Instance==TIM5){
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a0c      	ldr	r2, [pc, #48]	; (8002e80 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d10e      	bne.n	8002e72 <HAL_TIM_PWM_PulseFinishedCallback+0x7a>

		HAL_GPIO_WritePin(OUT1_GPIO_Port,OUT1_Pin,GPIO_PIN_RESET);
 8002e54:	2200      	movs	r2, #0
 8002e56:	2101      	movs	r1, #1
 8002e58:	480a      	ldr	r0, [pc, #40]	; (8002e84 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8002e5a:	f7fe fcaf 	bl	80017bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT2_GPIO_Port,OUT2_Pin,GPIO_PIN_RESET);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2102      	movs	r1, #2
 8002e62:	4808      	ldr	r0, [pc, #32]	; (8002e84 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8002e64:	f7fe fcaa 	bl	80017bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT3_GPIO_Port,OUT3_Pin,GPIO_PIN_RESET);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2104      	movs	r1, #4
 8002e6c:	4805      	ldr	r0, [pc, #20]	; (8002e84 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8002e6e:	f7fe fca5 	bl	80017bc <HAL_GPIO_WritePin>
	}
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	200001e4 	.word	0x200001e4
 8002e80:	40000c00 	.word	0x40000c00
 8002e84:	40020400 	.word	0x40020400

08002e88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM5){
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a27      	ldr	r2, [pc, #156]	; (8002f34 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d136      	bne.n	8002f08 <HAL_TIM_PeriodElapsedCallback+0x80>
		if(clock.isLocked()){
 8002e9a:	4827      	ldr	r0, [pc, #156]	; (8002f38 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002e9c:	f000 fe99 	bl	8003bd2 <_ZN5Clock8isLockedEv>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d030      	beq.n	8002f08 <HAL_TIM_PeriodElapsedCallback+0x80>
		if(clock.sub==0){HAL_GPIO_WritePin(OUT1_GPIO_Port,OUT1_Pin,GPIO_PIN_SET);}
 8002ea6:	4b24      	ldr	r3, [pc, #144]	; (8002f38 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bf0c      	ite	eq
 8002eae:	2301      	moveq	r3, #1
 8002eb0:	2300      	movne	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d004      	beq.n	8002ec2 <HAL_TIM_PeriodElapsedCallback+0x3a>
 8002eb8:	2201      	movs	r2, #1
 8002eba:	2101      	movs	r1, #1
 8002ebc:	481f      	ldr	r0, [pc, #124]	; (8002f3c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002ebe:	f7fe fc7d 	bl	80017bc <HAL_GPIO_WritePin>

		if(!(clock.sub%4)){HAL_GPIO_WritePin(OUT2_GPIO_Port,OUT2_Pin,GPIO_PIN_SET);}
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f003 0303 	and.w	r3, r3, #3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	bf0c      	ite	eq
 8002ece:	2301      	moveq	r3, #1
 8002ed0:	2300      	movne	r3, #0
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d004      	beq.n	8002ee2 <HAL_TIM_PeriodElapsedCallback+0x5a>
 8002ed8:	2201      	movs	r2, #1
 8002eda:	2102      	movs	r1, #2
 8002edc:	4817      	ldr	r0, [pc, #92]	; (8002f3c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002ede:	f7fe fc6d 	bl	80017bc <HAL_GPIO_WritePin>
		// else{HAL_GPIO_WritePin(OUT2_GPIO_Port,OUT2_Pin, GPIO_PIN_RESET);}
		if(!(clock.sub%8)){HAL_GPIO_WritePin(OUT3_GPIO_Port,OUT3_Pin, GPIO_PIN_SET);}
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	bf0c      	ite	eq
 8002eee:	2301      	moveq	r3, #1
 8002ef0:	2300      	movne	r3, #0
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d004      	beq.n	8002f02 <HAL_TIM_PeriodElapsedCallback+0x7a>
 8002ef8:	2201      	movs	r2, #1
 8002efa:	2104      	movs	r1, #4
 8002efc:	480f      	ldr	r0, [pc, #60]	; (8002f3c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002efe:	f7fe fc5d 	bl	80017bc <HAL_GPIO_WritePin>
		// else{HAL_GPIO_WritePin(OUT3_GPIO_Port,OUT3_Pin, GPIO_PIN_RESET);}
		clock.subTick();
 8002f02:	480d      	ldr	r0, [pc, #52]	; (8002f38 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002f04:	f000 fe13 	bl	8003b2e <_ZN5Clock7subTickEv>
		}
	}
	// Update gui
	if(htim->Instance==TIM10){
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0c      	ldr	r2, [pc, #48]	; (8002f40 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d10b      	bne.n	8002f2a <HAL_TIM_PeriodElapsedCallback+0xa2>
		editSwitches.update(clock.sub);
 8002f12:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	4619      	mov	r1, r3
 8002f18:	480a      	ldr	r0, [pc, #40]	; (8002f44 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002f1a:	f001 f885 	bl	8004028 <_ZN8Switches6updateEi>
		editSwitches.spi();
 8002f1e:	4809      	ldr	r0, [pc, #36]	; (8002f44 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002f20:	f001 f856 	bl	8003fd0 <_ZN8Switches3spiEv>
		TIM10->CNT=0;
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24
	}
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40000c00 	.word	0x40000c00
 8002f38:	200001e4 	.word	0x200001e4
 8002f3c:	40020400 	.word	0x40020400
 8002f40:	40014400 	.word	0x40014400
 8002f44:	2000025c 	.word	0x2000025c

08002f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b094      	sub	sp, #80	; 0x50
 8002f4c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f4e:	f7fe fac1 	bl	80014d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f52:	f000 f85f 	bl	8003014 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f56:	f000 fab3 	bl	80034c0 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8002f5a:	f000 f8ff 	bl	800315c <_ZL12MX_TIM2_Initv>
  MX_TIM5_Init();
 8002f5e:	f000 f9b5 	bl	80032cc <_ZL12MX_TIM5_Initv>
  MX_USART2_UART_Init();
 8002f62:	f000 fa7f 	bl	8003464 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8002f66:	f000 f8bd 	bl	80030e4 <_ZL12MX_SPI1_Initv>
  MX_TIM10_Init();
 8002f6a:	f000 fa57 	bl	800341c <_ZL13MX_TIM10_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 8002f6e:	4821      	ldr	r0, [pc, #132]	; (8002ff4 <main+0xac>)
 8002f70:	f7ff f8fd 	bl	800216e <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim5,TIM_CHANNEL_2);
 8002f74:	2104      	movs	r1, #4
 8002f76:	481f      	ldr	r0, [pc, #124]	; (8002ff4 <main+0xac>)
 8002f78:	f7ff fc9c 	bl	80028b4 <HAL_TIM_OC_Start_IT>
	  // HAL_TIM_IC_Start_IT(&htim5,TIM_CHANNEL_1);
  clock.setTimer(&htim2,&htim5);
 8002f7c:	4a1d      	ldr	r2, [pc, #116]	; (8002ff4 <main+0xac>)
 8002f7e:	491e      	ldr	r1, [pc, #120]	; (8002ff8 <main+0xb0>)
 8002f80:	481e      	ldr	r0, [pc, #120]	; (8002ffc <main+0xb4>)
 8002f82:	f000 fdf0 	bl	8003b66 <_ZN5Clock8setTimerEP17TIM_HandleTypeDefS1_>
  clock.setSource(EXTERNAL);
 8002f86:	2101      	movs	r1, #1
 8002f88:	481c      	ldr	r0, [pc, #112]	; (8002ffc <main+0xb4>)
 8002f8a:	f000 fe54 	bl	8003c36 <_ZN5Clock9setSourceE11ClockSource>
  clock.setPeriod(2000000);
 8002f8e:	491c      	ldr	r1, [pc, #112]	; (8003000 <main+0xb8>)
 8002f90:	481a      	ldr	r0, [pc, #104]	; (8002ffc <main+0xb4>)
 8002f92:	f000 fe2a 	bl	8003bea <_ZN5Clock9setPeriodEj>
  clock.setSlaveDivision(16);
 8002f96:	2110      	movs	r1, #16
 8002f98:	4818      	ldr	r0, [pc, #96]	; (8002ffc <main+0xb4>)
 8002f9a:	f000 fe78 	bl	8003c8e <_ZN5Clock16setSlaveDivisionEj>
  // clock.lock();
	  // HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);

  HAL_TIM_Base_Start_IT(&htim10);
 8002f9e:	4819      	ldr	r0, [pc, #100]	; (8003004 <main+0xbc>)
 8002fa0:	f7ff f8e5 	bl	800216e <HAL_TIM_Base_Start_IT>
  shiftRegInit();
 8002fa4:	f000 feb0 	bl	8003d08 <_Z12shiftRegInitv>
  editSwitches.setLedAll(FULL,PULSE_MODE_8TH);
 8002fa8:	2204      	movs	r2, #4
 8002faa:	217f      	movs	r1, #127	; 0x7f
 8002fac:	4816      	ldr	r0, [pc, #88]	; (8003008 <main+0xc0>)
 8002fae:	f001 fa41 	bl	8004434 <_ZN8Switches9setLedAllE8PWM_MODE10PULSE_MODE>

 int  temp;

  while (1)
  {
	  if(temp != clock.sub){
 8002fb2:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <main+0xb4>)
 8002fb4:	699a      	ldr	r2, [r3, #24]
 8002fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	bf14      	ite	ne
 8002fbc:	2301      	movne	r3, #1
 8002fbe:	2300      	moveq	r3, #0
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d0f5      	beq.n	8002fb2 <main+0x6a>

			//if(clock.sub > 15){
				char stringTx[64];
				sprintf((char*)stringTx," M: %d S: %d P: %d \r",clock.master,clock.sub,clock.averagedPeriod);
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <main+0xb4>)
 8002fc8:	695a      	ldr	r2, [r3, #20]
 8002fca:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <main+0xb4>)
 8002fcc:	6999      	ldr	r1, [r3, #24]
 8002fce:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <main+0xb4>)
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	1d38      	adds	r0, r7, #4
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	490c      	ldr	r1, [pc, #48]	; (800300c <main+0xc4>)
 8002fda:	f004 f9d9 	bl	8007390 <siprintf>
				HAL_UART_Transmit(&huart2,(uint8_t*)stringTx,64,100);
 8002fde:	1d39      	adds	r1, r7, #4
 8002fe0:	2364      	movs	r3, #100	; 0x64
 8002fe2:	2240      	movs	r2, #64	; 0x40
 8002fe4:	480a      	ldr	r0, [pc, #40]	; (8003010 <main+0xc8>)
 8002fe6:	f7ff fe5d 	bl	8002ca4 <HAL_UART_Transmit>
				temp = clock.sub;
 8002fea:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <main+0xb4>)
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	647b      	str	r3, [r7, #68]	; 0x44
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8002ff0:	e7df      	b.n	8002fb2 <main+0x6a>
 8002ff2:	bf00      	nop
 8002ff4:	2000012c 	.word	0x2000012c
 8002ff8:	200000f0 	.word	0x200000f0
 8002ffc:	200001e4 	.word	0x200001e4
 8003000:	001e8480 	.word	0x001e8480
 8003004:	20000168 	.word	0x20000168
 8003008:	2000025c 	.word	0x2000025c
 800300c:	08007a60 	.word	0x08007a60
 8003010:	200001a4 	.word	0x200001a4

08003014 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b094      	sub	sp, #80	; 0x50
 8003018:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800301a:	f107 0320 	add.w	r3, r7, #32
 800301e:	2230      	movs	r2, #48	; 0x30
 8003020:	2100      	movs	r1, #0
 8003022:	4618      	mov	r0, r3
 8003024:	f004 f8ab 	bl	800717e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003028:	f107 030c 	add.w	r3, r7, #12
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	609a      	str	r2, [r3, #8]
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	611a      	str	r2, [r3, #16]

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003038:	2300      	movs	r3, #0
 800303a:	60bb      	str	r3, [r7, #8]
 800303c:	4a27      	ldr	r2, [pc, #156]	; (80030dc <_Z18SystemClock_Configv+0xc8>)
 800303e:	4b27      	ldr	r3, [pc, #156]	; (80030dc <_Z18SystemClock_Configv+0xc8>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003046:	6413      	str	r3, [r2, #64]	; 0x40
 8003048:	4b24      	ldr	r3, [pc, #144]	; (80030dc <_Z18SystemClock_Configv+0xc8>)
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003050:	60bb      	str	r3, [r7, #8]
 8003052:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003054:	2300      	movs	r3, #0
 8003056:	607b      	str	r3, [r7, #4]
 8003058:	4a21      	ldr	r2, [pc, #132]	; (80030e0 <_Z18SystemClock_Configv+0xcc>)
 800305a:	4b21      	ldr	r3, [pc, #132]	; (80030e0 <_Z18SystemClock_Configv+0xcc>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	4b1e      	ldr	r3, [pc, #120]	; (80030e0 <_Z18SystemClock_Configv+0xcc>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306c:	607b      	str	r3, [r7, #4]
 800306e:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003070:	2302      	movs	r3, #2
 8003072:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003074:	2301      	movs	r3, #1
 8003076:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003078:	2310      	movs	r3, #16
 800307a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800307c:	2300      	movs	r3, #0
 800307e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003080:	f107 0320 	add.w	r3, r7, #32
 8003084:	4618      	mov	r0, r3
 8003086:	f7fe fb9f 	bl	80017c8 <HAL_RCC_OscConfig>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	bf14      	ite	ne
 8003090:	2301      	movne	r3, #1
 8003092:	2300      	moveq	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 800309a:	f000 fa77 	bl	800358c <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800309e:	230f      	movs	r3, #15
 80030a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030a6:	2300      	movs	r3, #0
 80030a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030ae:	2300      	movs	r3, #0
 80030b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80030b2:	f107 030c 	add.w	r3, r7, #12
 80030b6:	2100      	movs	r1, #0
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7fe fd35 	bl	8001b28 <HAL_RCC_ClockConfig>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	bf14      	ite	ne
 80030c4:	2301      	movne	r3, #1
 80030c6:	2300      	moveq	r3, #0
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 80030ce:	f000 fa5d 	bl	800358c <Error_Handler>
  }
}
 80030d2:	bf00      	nop
 80030d4:	3750      	adds	r7, #80	; 0x50
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40023800 	.word	0x40023800
 80030e0:	40007000 	.word	0x40007000

080030e4 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80030e8:	4b1a      	ldr	r3, [pc, #104]	; (8003154 <_ZL12MX_SPI1_Initv+0x70>)
 80030ea:	4a1b      	ldr	r2, [pc, #108]	; (8003158 <_ZL12MX_SPI1_Initv+0x74>)
 80030ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80030ee:	4b19      	ldr	r3, [pc, #100]	; (8003154 <_ZL12MX_SPI1_Initv+0x70>)
 80030f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80030f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80030f6:	4b17      	ldr	r3, [pc, #92]	; (8003154 <_ZL12MX_SPI1_Initv+0x70>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80030fc:	4b15      	ldr	r3, [pc, #84]	; (8003154 <_ZL12MX_SPI1_Initv+0x70>)
 80030fe:	2200      	movs	r2, #0
 8003100:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003102:	4b14      	ldr	r3, [pc, #80]	; (8003154 <_ZL12MX_SPI1_Initv+0x70>)
 8003104:	2200      	movs	r2, #0
 8003106:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003108:	4b12      	ldr	r3, [pc, #72]	; (8003154 <_ZL12MX_SPI1_Initv+0x70>)
 800310a:	2200      	movs	r2, #0
 800310c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800310e:	4b11      	ldr	r3, [pc, #68]	; (8003154 <_ZL12MX_SPI1_Initv+0x70>)
 8003110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003114:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003116:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <_ZL12MX_SPI1_Initv+0x70>)
 8003118:	2210      	movs	r2, #16
 800311a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800311c:	4b0d      	ldr	r3, [pc, #52]	; (8003154 <_ZL12MX_SPI1_Initv+0x70>)
 800311e:	2200      	movs	r2, #0
 8003120:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003122:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <_ZL12MX_SPI1_Initv+0x70>)
 8003124:	2200      	movs	r2, #0
 8003126:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003128:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <_ZL12MX_SPI1_Initv+0x70>)
 800312a:	2200      	movs	r2, #0
 800312c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800312e:	4b09      	ldr	r3, [pc, #36]	; (8003154 <_ZL12MX_SPI1_Initv+0x70>)
 8003130:	220a      	movs	r2, #10
 8003132:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003134:	4807      	ldr	r0, [pc, #28]	; (8003154 <_ZL12MX_SPI1_Initv+0x70>)
 8003136:	f7fe fe08 	bl	8001d4a <HAL_SPI_Init>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	bf14      	ite	ne
 8003140:	2301      	movne	r3, #1
 8003142:	2300      	moveq	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800314a:	f000 fa1f 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800314e:	bf00      	nop
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000098 	.word	0x20000098
 8003158:	40013000 	.word	0x40013000

0800315c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b092      	sub	sp, #72	; 0x48
 8003160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003162:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003166:	2200      	movs	r2, #0
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	605a      	str	r2, [r3, #4]
 800316c:	609a      	str	r2, [r3, #8]
 800316e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003170:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800317a:	f107 0320 	add.w	r3, r7, #32
 800317e:	2200      	movs	r2, #0
 8003180:	601a      	str	r2, [r3, #0]
 8003182:	605a      	str	r2, [r3, #4]
 8003184:	609a      	str	r2, [r3, #8]
 8003186:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003188:	1d3b      	adds	r3, r7, #4
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	605a      	str	r2, [r3, #4]
 8003190:	609a      	str	r2, [r3, #8]
 8003192:	60da      	str	r2, [r3, #12]
 8003194:	611a      	str	r2, [r3, #16]
 8003196:	615a      	str	r2, [r3, #20]
 8003198:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800319a:	4b4a      	ldr	r3, [pc, #296]	; (80032c4 <_ZL12MX_TIM2_Initv+0x168>)
 800319c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80031a2:	4b48      	ldr	r3, [pc, #288]	; (80032c4 <_ZL12MX_TIM2_Initv+0x168>)
 80031a4:	220f      	movs	r2, #15
 80031a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031a8:	4b46      	ldr	r3, [pc, #280]	; (80032c4 <_ZL12MX_TIM2_Initv+0x168>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000000000;
 80031ae:	4b45      	ldr	r3, [pc, #276]	; (80032c4 <_ZL12MX_TIM2_Initv+0x168>)
 80031b0:	4a45      	ldr	r2, [pc, #276]	; (80032c8 <_ZL12MX_TIM2_Initv+0x16c>)
 80031b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031b4:	4b43      	ldr	r3, [pc, #268]	; (80032c4 <_ZL12MX_TIM2_Initv+0x168>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80031ba:	4842      	ldr	r0, [pc, #264]	; (80032c4 <_ZL12MX_TIM2_Initv+0x168>)
 80031bc:	f7ff f9c6 	bl	800254c <HAL_TIM_Base_Init>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	bf14      	ite	ne
 80031c6:	2301      	movne	r3, #1
 80031c8:	2300      	moveq	r3, #0
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <_ZL12MX_TIM2_Initv+0x78>
  {
    Error_Handler();
 80031d0:	f000 f9dc 	bl	800358c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031d8:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80031da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80031de:	4619      	mov	r1, r3
 80031e0:	4838      	ldr	r0, [pc, #224]	; (80032c4 <_ZL12MX_TIM2_Initv+0x168>)
 80031e2:	f7fe ffd1 	bl	8002188 <HAL_TIM_ConfigClockSource>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf14      	ite	ne
 80031ec:	2301      	movne	r3, #1
 80031ee:	2300      	moveq	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <_ZL12MX_TIM2_Initv+0x9e>
  {
    Error_Handler();
 80031f6:	f000 f9c9 	bl	800358c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80031fa:	4832      	ldr	r0, [pc, #200]	; (80032c4 <_ZL12MX_TIM2_Initv+0x168>)
 80031fc:	f7ff f9da 	bl	80025b4 <HAL_TIM_IC_Init>
 8003200:	4603      	mov	r3, r0
 8003202:	2b00      	cmp	r3, #0
 8003204:	bf14      	ite	ne
 8003206:	2301      	movne	r3, #1
 8003208:	2300      	moveq	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <_ZL12MX_TIM2_Initv+0xb8>
  {
    Error_Handler();
 8003210:	f000 f9bc 	bl	800358c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8003214:	482b      	ldr	r0, [pc, #172]	; (80032c4 <_ZL12MX_TIM2_Initv+0x168>)
 8003216:	f7ff f9b3 	bl	8002580 <HAL_TIM_OC_Init>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	bf14      	ite	ne
 8003220:	2301      	movne	r3, #1
 8003222:	2300      	moveq	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <_ZL12MX_TIM2_Initv+0xd2>
  {
    Error_Handler();
 800322a:	f000 f9af 	bl	800358c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800322e:	2300      	movs	r3, #0
 8003230:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8003232:	2380      	movs	r3, #128	; 0x80
 8003234:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003236:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800323a:	4619      	mov	r1, r3
 800323c:	4821      	ldr	r0, [pc, #132]	; (80032c4 <_ZL12MX_TIM2_Initv+0x168>)
 800323e:	f7ff fb9d 	bl	800297c <HAL_TIMEx_MasterConfigSynchronization>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf14      	ite	ne
 8003248:	2301      	movne	r3, #1
 800324a:	2300      	moveq	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <_ZL12MX_TIM2_Initv+0xfa>
  {
    Error_Handler();
 8003252:	f000 f99b 	bl	800358c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003256:	2300      	movs	r3, #0
 8003258:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800325a:	2301      	movs	r3, #1
 800325c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800325e:	2300      	movs	r3, #0
 8003260:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003266:	f107 0320 	add.w	r3, r7, #32
 800326a:	2200      	movs	r2, #0
 800326c:	4619      	mov	r1, r3
 800326e:	4815      	ldr	r0, [pc, #84]	; (80032c4 <_ZL12MX_TIM2_Initv+0x168>)
 8003270:	f7ff f9f4 	bl	800265c <HAL_TIM_IC_ConfigChannel>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	bf14      	ite	ne
 800327a:	2301      	movne	r3, #1
 800327c:	2300      	moveq	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <_ZL12MX_TIM2_Initv+0x12c>
  {
    Error_Handler();
 8003284:	f000 f982 	bl	800358c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003288:	2300      	movs	r3, #0
 800328a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 800328c:	f242 7310 	movw	r3, #10000	; 0x2710
 8003290:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003292:	2300      	movs	r3, #0
 8003294:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800329a:	1d3b      	adds	r3, r7, #4
 800329c:	2204      	movs	r2, #4
 800329e:	4619      	mov	r1, r3
 80032a0:	4808      	ldr	r0, [pc, #32]	; (80032c4 <_ZL12MX_TIM2_Initv+0x168>)
 80032a2:	f7ff fa93 	bl	80027cc <HAL_TIM_OC_ConfigChannel>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	bf14      	ite	ne
 80032ac:	2301      	movne	r3, #1
 80032ae:	2300      	moveq	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <_ZL12MX_TIM2_Initv+0x15e>
  {
    Error_Handler();
 80032b6:	f000 f969 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80032ba:	bf00      	nop
 80032bc:	3748      	adds	r7, #72	; 0x48
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	200000f0 	.word	0x200000f0
 80032c8:	ee6b2800 	.word	0xee6b2800

080032cc <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b092      	sub	sp, #72	; 0x48
 80032d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	605a      	str	r2, [r3, #4]
 80032dc:	609a      	str	r2, [r3, #8]
 80032de:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80032e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	60da      	str	r2, [r3, #12]
 80032ee:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032f0:	f107 031c 	add.w	r3, r7, #28
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032fa:	463b      	mov	r3, r7
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	60da      	str	r2, [r3, #12]
 8003306:	611a      	str	r2, [r3, #16]
 8003308:	615a      	str	r2, [r3, #20]
 800330a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800330c:	4b40      	ldr	r3, [pc, #256]	; (8003410 <_ZL12MX_TIM5_Initv+0x144>)
 800330e:	4a41      	ldr	r2, [pc, #260]	; (8003414 <_ZL12MX_TIM5_Initv+0x148>)
 8003310:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 8003312:	4b3f      	ldr	r3, [pc, #252]	; (8003410 <_ZL12MX_TIM5_Initv+0x144>)
 8003314:	220f      	movs	r2, #15
 8003316:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003318:	4b3d      	ldr	r3, [pc, #244]	; (8003410 <_ZL12MX_TIM5_Initv+0x144>)
 800331a:	2200      	movs	r2, #0
 800331c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4000000000;
 800331e:	4b3c      	ldr	r3, [pc, #240]	; (8003410 <_ZL12MX_TIM5_Initv+0x144>)
 8003320:	4a3d      	ldr	r2, [pc, #244]	; (8003418 <_ZL12MX_TIM5_Initv+0x14c>)
 8003322:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003324:	4b3a      	ldr	r3, [pc, #232]	; (8003410 <_ZL12MX_TIM5_Initv+0x144>)
 8003326:	2200      	movs	r2, #0
 8003328:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800332a:	4839      	ldr	r0, [pc, #228]	; (8003410 <_ZL12MX_TIM5_Initv+0x144>)
 800332c:	f7ff f90e 	bl	800254c <HAL_TIM_Base_Init>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	bf14      	ite	ne
 8003336:	2301      	movne	r3, #1
 8003338:	2300      	moveq	r3, #0
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <_ZL12MX_TIM5_Initv+0x78>
  {
    Error_Handler();
 8003340:	f000 f924 	bl	800358c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003348:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800334a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800334e:	4619      	mov	r1, r3
 8003350:	482f      	ldr	r0, [pc, #188]	; (8003410 <_ZL12MX_TIM5_Initv+0x144>)
 8003352:	f7fe ff19 	bl	8002188 <HAL_TIM_ConfigClockSource>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	bf14      	ite	ne
 800335c:	2301      	movne	r3, #1
 800335e:	2300      	moveq	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <_ZL12MX_TIM5_Initv+0x9e>
  {
    Error_Handler();
 8003366:	f000 f911 	bl	800358c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 800336a:	4829      	ldr	r0, [pc, #164]	; (8003410 <_ZL12MX_TIM5_Initv+0x144>)
 800336c:	f7ff f908 	bl	8002580 <HAL_TIM_OC_Init>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	bf14      	ite	ne
 8003376:	2301      	movne	r3, #1
 8003378:	2300      	moveq	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <_ZL12MX_TIM5_Initv+0xb8>
  {
    Error_Handler();
 8003380:	f000 f904 	bl	800358c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003384:	2304      	movs	r3, #4
 8003386:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003388:	2300      	movs	r3, #0
 800338a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchronization(&htim5, &sSlaveConfig) != HAL_OK)
 800338c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003390:	4619      	mov	r1, r3
 8003392:	481f      	ldr	r0, [pc, #124]	; (8003410 <_ZL12MX_TIM5_Initv+0x144>)
 8003394:	f7fe ffb1 	bl	80022fa <HAL_TIM_SlaveConfigSynchronization>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	bf14      	ite	ne
 800339e:	2301      	movne	r3, #1
 80033a0:	2300      	moveq	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <_ZL12MX_TIM5_Initv+0xe0>
  {
    Error_Handler();
 80033a8:	f000 f8f0 	bl	800358c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033ac:	2300      	movs	r3, #0
 80033ae:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80033b4:	f107 031c 	add.w	r3, r7, #28
 80033b8:	4619      	mov	r1, r3
 80033ba:	4815      	ldr	r0, [pc, #84]	; (8003410 <_ZL12MX_TIM5_Initv+0x144>)
 80033bc:	f7ff fade 	bl	800297c <HAL_TIMEx_MasterConfigSynchronization>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	bf14      	ite	ne
 80033c6:	2301      	movne	r3, #1
 80033c8:	2300      	moveq	r3, #0
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d001      	beq.n	80033d4 <_ZL12MX_TIM5_Initv+0x108>
  {
    Error_Handler();
 80033d0:	f000 f8dc 	bl	800358c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80033d4:	2300      	movs	r3, #0
 80033d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000;
 80033d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80033dc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033de:	2300      	movs	r3, #0
 80033e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033e2:	2300      	movs	r3, #0
 80033e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033e6:	463b      	mov	r3, r7
 80033e8:	2204      	movs	r2, #4
 80033ea:	4619      	mov	r1, r3
 80033ec:	4808      	ldr	r0, [pc, #32]	; (8003410 <_ZL12MX_TIM5_Initv+0x144>)
 80033ee:	f7ff f9ed 	bl	80027cc <HAL_TIM_OC_ConfigChannel>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bf14      	ite	ne
 80033f8:	2301      	movne	r3, #1
 80033fa:	2300      	moveq	r3, #0
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <_ZL12MX_TIM5_Initv+0x13a>
  {
    Error_Handler();
 8003402:	f000 f8c3 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003406:	bf00      	nop
 8003408:	3748      	adds	r7, #72	; 0x48
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	2000012c 	.word	0x2000012c
 8003414:	40000c00 	.word	0x40000c00
 8003418:	ee6b2800 	.word	0xee6b2800

0800341c <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003420:	4b0e      	ldr	r3, [pc, #56]	; (800345c <_ZL13MX_TIM10_Initv+0x40>)
 8003422:	4a0f      	ldr	r2, [pc, #60]	; (8003460 <_ZL13MX_TIM10_Initv+0x44>)
 8003424:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16;
 8003426:	4b0d      	ldr	r3, [pc, #52]	; (800345c <_ZL13MX_TIM10_Initv+0x40>)
 8003428:	2210      	movs	r2, #16
 800342a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <_ZL13MX_TIM10_Initv+0x40>)
 800342e:	2200      	movs	r2, #0
 8003430:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 250;
 8003432:	4b0a      	ldr	r3, [pc, #40]	; (800345c <_ZL13MX_TIM10_Initv+0x40>)
 8003434:	22fa      	movs	r2, #250	; 0xfa
 8003436:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003438:	4b08      	ldr	r3, [pc, #32]	; (800345c <_ZL13MX_TIM10_Initv+0x40>)
 800343a:	2200      	movs	r2, #0
 800343c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800343e:	4807      	ldr	r0, [pc, #28]	; (800345c <_ZL13MX_TIM10_Initv+0x40>)
 8003440:	f7ff f884 	bl	800254c <HAL_TIM_Base_Init>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	bf14      	ite	ne
 800344a:	2301      	movne	r3, #1
 800344c:	2300      	moveq	r3, #0
 800344e:	b2db      	uxtb	r3, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <_ZL13MX_TIM10_Initv+0x3c>
  {
    Error_Handler();
 8003454:	f000 f89a 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003458:	bf00      	nop
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20000168 	.word	0x20000168
 8003460:	40014400 	.word	0x40014400

08003464 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003468:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800346a:	4a14      	ldr	r2, [pc, #80]	; (80034bc <_ZL19MX_USART2_UART_Initv+0x58>)
 800346c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800346e:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003470:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003474:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003478:	2200      	movs	r2, #0
 800347a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800347c:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800347e:	2200      	movs	r2, #0
 8003480:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003482:	4b0d      	ldr	r3, [pc, #52]	; (80034b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003484:	2200      	movs	r2, #0
 8003486:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003488:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800348a:	220c      	movs	r2, #12
 800348c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003490:	2200      	movs	r2, #0
 8003492:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003494:	4b08      	ldr	r3, [pc, #32]	; (80034b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003496:	2200      	movs	r2, #0
 8003498:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800349a:	4807      	ldr	r0, [pc, #28]	; (80034b8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800349c:	f7ff fbd4 	bl	8002c48 <HAL_UART_Init>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	bf14      	ite	ne
 80034a6:	2301      	movne	r3, #1
 80034a8:	2300      	moveq	r3, #0
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80034b0:	f000 f86c 	bl	800358c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80034b4:	bf00      	nop
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	200001a4 	.word	0x200001a4
 80034bc:	40004400 	.word	0x40004400

080034c0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c6:	f107 030c 	add.w	r3, r7, #12
 80034ca:	2200      	movs	r2, #0
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	605a      	str	r2, [r3, #4]
 80034d0:	609a      	str	r2, [r3, #8]
 80034d2:	60da      	str	r2, [r3, #12]
 80034d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	4a29      	ldr	r2, [pc, #164]	; (8003580 <_ZL12MX_GPIO_Initv+0xc0>)
 80034dc:	4b28      	ldr	r3, [pc, #160]	; (8003580 <_ZL12MX_GPIO_Initv+0xc0>)
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	f043 0304 	orr.w	r3, r3, #4
 80034e4:	6313      	str	r3, [r2, #48]	; 0x30
 80034e6:	4b26      	ldr	r3, [pc, #152]	; (8003580 <_ZL12MX_GPIO_Initv+0xc0>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	60bb      	str	r3, [r7, #8]
 80034f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f2:	2300      	movs	r3, #0
 80034f4:	607b      	str	r3, [r7, #4]
 80034f6:	4a22      	ldr	r2, [pc, #136]	; (8003580 <_ZL12MX_GPIO_Initv+0xc0>)
 80034f8:	4b21      	ldr	r3, [pc, #132]	; (8003580 <_ZL12MX_GPIO_Initv+0xc0>)
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	f043 0301 	orr.w	r3, r3, #1
 8003500:	6313      	str	r3, [r2, #48]	; 0x30
 8003502:	4b1f      	ldr	r3, [pc, #124]	; (8003580 <_ZL12MX_GPIO_Initv+0xc0>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	607b      	str	r3, [r7, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800350e:	2300      	movs	r3, #0
 8003510:	603b      	str	r3, [r7, #0]
 8003512:	4a1b      	ldr	r2, [pc, #108]	; (8003580 <_ZL12MX_GPIO_Initv+0xc0>)
 8003514:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <_ZL12MX_GPIO_Initv+0xc0>)
 8003516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003518:	f043 0302 	orr.w	r3, r3, #2
 800351c:	6313      	str	r3, [r2, #48]	; 0x30
 800351e:	4b18      	ldr	r3, [pc, #96]	; (8003580 <_ZL12MX_GPIO_Initv+0xc0>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD_Pin|RCLK_Pin|SRCLR_Pin, GPIO_PIN_RESET);
 800352a:	2200      	movs	r2, #0
 800352c:	2131      	movs	r1, #49	; 0x31
 800352e:	4815      	ldr	r0, [pc, #84]	; (8003584 <_ZL12MX_GPIO_Initv+0xc4>)
 8003530:	f7fe f944 	bl	80017bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin, GPIO_PIN_RESET);
 8003534:	2200      	movs	r2, #0
 8003536:	2117      	movs	r1, #23
 8003538:	4813      	ldr	r0, [pc, #76]	; (8003588 <_ZL12MX_GPIO_Initv+0xc8>)
 800353a:	f7fe f93f 	bl	80017bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD_Pin RCLK_Pin SRCLR_Pin */
  GPIO_InitStruct.Pin = LD_Pin|RCLK_Pin|SRCLR_Pin;
 800353e:	2331      	movs	r3, #49	; 0x31
 8003540:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003542:	2301      	movs	r3, #1
 8003544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800354a:	2300      	movs	r3, #0
 800354c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800354e:	f107 030c 	add.w	r3, r7, #12
 8003552:	4619      	mov	r1, r3
 8003554:	480b      	ldr	r0, [pc, #44]	; (8003584 <_ZL12MX_GPIO_Initv+0xc4>)
 8003556:	f7fe f851 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT1_Pin OUT2_Pin OUT3_Pin OUT4_Pin */
  GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin;
 800355a:	2317      	movs	r3, #23
 800355c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800355e:	2301      	movs	r3, #1
 8003560:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003562:	2300      	movs	r3, #0
 8003564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003566:	2300      	movs	r3, #0
 8003568:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800356a:	f107 030c 	add.w	r3, r7, #12
 800356e:	4619      	mov	r1, r3
 8003570:	4805      	ldr	r0, [pc, #20]	; (8003588 <_ZL12MX_GPIO_Initv+0xc8>)
 8003572:	f7fe f843 	bl	80015fc <HAL_GPIO_Init>

}
 8003576:	bf00      	nop
 8003578:	3720      	adds	r7, #32
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	40023800 	.word	0x40023800
 8003584:	40020800 	.word	0x40020800
 8003588:	40020400 	.word	0x40020400

0800358c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
	...

0800359c <_Z41__static_initialization_and_destruction_0ii>:
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d119      	bne.n	80035e0 <_Z41__static_initialization_and_destruction_0ii+0x44>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d114      	bne.n	80035e0 <_Z41__static_initialization_and_destruction_0ii+0x44>
Clock clock;
 80035b6:	480c      	ldr	r0, [pc, #48]	; (80035e8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80035b8:	f000 f990 	bl	80038dc <_ZN5ClockC1Ev>
 80035bc:	4a0b      	ldr	r2, [pc, #44]	; (80035ec <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80035be:	490c      	ldr	r1, [pc, #48]	; (80035f0 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80035c0:	4809      	ldr	r0, [pc, #36]	; (80035e8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80035c2:	f002 fe82 	bl	80062ca <__aeabi_atexit>
Switches editSwitches(3,4,0,&hspi1);
 80035c6:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	2300      	movs	r3, #0
 80035cc:	2204      	movs	r2, #4
 80035ce:	2103      	movs	r1, #3
 80035d0:	4809      	ldr	r0, [pc, #36]	; (80035f8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80035d2:	f000 fbaf 	bl	8003d34 <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef>
 80035d6:	4a05      	ldr	r2, [pc, #20]	; (80035ec <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80035d8:	4908      	ldr	r1, [pc, #32]	; (80035fc <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80035da:	4807      	ldr	r0, [pc, #28]	; (80035f8 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80035dc:	f002 fe75 	bl	80062ca <__aeabi_atexit>
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	200001e4 	.word	0x200001e4
 80035ec:	20000000 	.word	0x20000000
 80035f0:	08003905 	.word	0x08003905
 80035f4:	20000098 	.word	0x20000098
 80035f8:	2000025c 	.word	0x2000025c
 80035fc:	08003f15 	.word	0x08003f15

08003600 <_GLOBAL__sub_I_hspi1>:
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
 8003604:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003608:	2001      	movs	r0, #1
 800360a:	f7ff ffc7 	bl	800359c <_Z41__static_initialization_and_destruction_0ii>
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003610:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003612:	4b0c      	ldr	r3, [pc, #48]	; (8003644 <HAL_MspInit+0x34>)
 8003614:	2100      	movs	r1, #0
 8003616:	9100      	str	r1, [sp, #0]
 8003618:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800361a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800361e:	645a      	str	r2, [r3, #68]	; 0x44
 8003620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003622:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003626:	9200      	str	r2, [sp, #0]
 8003628:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800362a:	9101      	str	r1, [sp, #4]
 800362c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800362e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003632:	641a      	str	r2, [r3, #64]	; 0x40
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363a:	9301      	str	r3, [sp, #4]
 800363c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800363e:	b002      	add	sp, #8
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	40023800 	.word	0x40023800

08003648 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003648:	b510      	push	{r4, lr}
 800364a:	4604      	mov	r4, r0
 800364c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800364e:	2214      	movs	r2, #20
 8003650:	2100      	movs	r1, #0
 8003652:	a803      	add	r0, sp, #12
 8003654:	f003 fd93 	bl	800717e <memset>
  if(hspi->Instance==SPI1)
 8003658:	6822      	ldr	r2, [r4, #0]
 800365a:	4b14      	ldr	r3, [pc, #80]	; (80036ac <HAL_SPI_MspInit+0x64>)
 800365c:	429a      	cmp	r2, r3
 800365e:	d122      	bne.n	80036a6 <HAL_SPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003660:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8003664:	2100      	movs	r1, #0
 8003666:	9101      	str	r1, [sp, #4]
 8003668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800366a:	4811      	ldr	r0, [pc, #68]	; (80036b0 <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800366c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003670:	645a      	str	r2, [r3, #68]	; 0x44
 8003672:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003674:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003678:	9201      	str	r2, [sp, #4]
 800367a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800367c:	9102      	str	r1, [sp, #8]
 800367e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003680:	f042 0201 	orr.w	r2, r2, #1
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	f003 0301 	and.w	r3, r3, #1
 800368c:	9302      	str	r3, [sp, #8]
 800368e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003690:	23e0      	movs	r3, #224	; 0xe0
 8003692:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003694:	2302      	movs	r3, #2
 8003696:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003698:	2303      	movs	r3, #3
 800369a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800369c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800369e:	2305      	movs	r3, #5
 80036a0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036a2:	f7fd ffab 	bl	80015fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80036a6:	b008      	add	sp, #32
 80036a8:	bd10      	pop	{r4, pc}
 80036aa:	bf00      	nop
 80036ac:	40013000 	.word	0x40013000
 80036b0:	40020000 	.word	0x40020000

080036b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036b4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036b6:	2214      	movs	r2, #20
{
 80036b8:	b08a      	sub	sp, #40	; 0x28
 80036ba:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036bc:	2100      	movs	r1, #0
 80036be:	eb0d 0002 	add.w	r0, sp, r2
 80036c2:	f003 fd5c 	bl	800717e <memset>
  if(htim_base->Instance==TIM2)
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036cc:	d129      	bne.n	8003722 <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036ce:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80036d2:	2400      	movs	r4, #0
 80036d4:	9401      	str	r4, [sp, #4]
 80036d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d8:	4827      	ldr	r0, [pc, #156]	; (8003778 <HAL_TIM_Base_MspInit+0xc4>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036da:	f042 0201 	orr.w	r2, r2, #1
 80036de:	641a      	str	r2, [r3, #64]	; 0x40
 80036e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036e2:	f002 0201 	and.w	r2, r2, #1
 80036e6:	9201      	str	r2, [sp, #4]
 80036e8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ea:	9402      	str	r4, [sp, #8]
 80036ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fc:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036fe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003700:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003702:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003704:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003706:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003708:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800370a:	f7fd ff77 	bl	80015fc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800370e:	201c      	movs	r0, #28
 8003710:	4622      	mov	r2, r4
 8003712:	4621      	mov	r1, r4
 8003714:	f7fd ff1c 	bl	8001550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003718:	201c      	movs	r0, #28
  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 6, 0);
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800371a:	f7fd ff4d 	bl	80015b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800371e:	b00a      	add	sp, #40	; 0x28
 8003720:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM5)
 8003722:	4a16      	ldr	r2, [pc, #88]	; (800377c <HAL_TIM_Base_MspInit+0xc8>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d111      	bne.n	800374c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003728:	4b15      	ldr	r3, [pc, #84]	; (8003780 <HAL_TIM_Base_MspInit+0xcc>)
 800372a:	2200      	movs	r2, #0
 800372c:	9203      	str	r2, [sp, #12]
 800372e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003730:	f041 0108 	orr.w	r1, r1, #8
 8003734:	6419      	str	r1, [r3, #64]	; 0x40
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 800373e:	2032      	movs	r0, #50	; 0x32
 8003740:	2101      	movs	r1, #1
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003742:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8003744:	f7fd ff04 	bl	8001550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003748:	2032      	movs	r0, #50	; 0x32
 800374a:	e7e6      	b.n	800371a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 800374c:	4a0d      	ldr	r2, [pc, #52]	; (8003784 <HAL_TIM_Base_MspInit+0xd0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d1e5      	bne.n	800371e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <HAL_TIM_Base_MspInit+0xcc>)
 8003754:	2200      	movs	r2, #0
 8003756:	9204      	str	r2, [sp, #16]
 8003758:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800375a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800375e:	6459      	str	r1, [r3, #68]	; 0x44
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003766:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 6, 0);
 8003768:	2019      	movs	r0, #25
 800376a:	2106      	movs	r1, #6
    __HAL_RCC_TIM10_CLK_ENABLE();
 800376c:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 6, 0);
 800376e:	f7fd feef 	bl	8001550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003772:	2019      	movs	r0, #25
 8003774:	e7d1      	b.n	800371a <HAL_TIM_Base_MspInit+0x66>
 8003776:	bf00      	nop
 8003778:	40020000 	.word	0x40020000
 800377c:	40000c00 	.word	0x40000c00
 8003780:	40023800 	.word	0x40023800
 8003784:	40014400 	.word	0x40014400

08003788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003788:	b510      	push	{r4, lr}
 800378a:	4604      	mov	r4, r0
 800378c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800378e:	2214      	movs	r2, #20
 8003790:	2100      	movs	r1, #0
 8003792:	a803      	add	r0, sp, #12
 8003794:	f003 fcf3 	bl	800717e <memset>
  if(huart->Instance==USART2)
 8003798:	6822      	ldr	r2, [r4, #0]
 800379a:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <HAL_UART_MspInit+0x68>)
 800379c:	429a      	cmp	r2, r3
 800379e:	d124      	bne.n	80037ea <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037a0:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80037a4:	2100      	movs	r1, #0
 80037a6:	9101      	str	r1, [sp, #4]
 80037a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037aa:	4812      	ldr	r0, [pc, #72]	; (80037f4 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80037ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40
 80037b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037b4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80037b8:	9201      	str	r2, [sp, #4]
 80037ba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037bc:	9102      	str	r1, [sp, #8]
 80037be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037c0:	f042 0201 	orr.w	r2, r2, #1
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30
 80037c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	9302      	str	r3, [sp, #8]
 80037ce:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80037d0:	230c      	movs	r3, #12
 80037d2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d4:	2302      	movs	r3, #2
 80037d6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037d8:	2301      	movs	r3, #1
 80037da:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037dc:	2303      	movs	r3, #3
 80037de:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80037e2:	2307      	movs	r3, #7
 80037e4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e6:	f7fd ff09 	bl	80015fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80037ea:	b008      	add	sp, #32
 80037ec:	bd10      	pop	{r4, pc}
 80037ee:	bf00      	nop
 80037f0:	40004400 	.word	0x40004400
 80037f4:	40020000 	.word	0x40020000

080037f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800380a:	e7fe      	b.n	800380a <HardFault_Handler+0x4>

0800380c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003810:	e7fe      	b.n	8003810 <MemManage_Handler+0x4>

08003812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003816:	e7fe      	b.n	8003816 <BusFault_Handler+0x4>

08003818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800381c:	e7fe      	b.n	800381c <UsageFault_Handler+0x4>

0800381e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800381e:	b480      	push	{r7}
 8003820:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003822:	bf00      	nop
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003830:	bf00      	nop
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800383a:	b480      	push	{r7}
 800383c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800383e:	bf00      	nop
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0




  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800384c:	f7fd fe5c 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003850:	bf00      	nop
 8003852:	bd80      	pop	{r7, pc}

08003854 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8003858:	4802      	ldr	r0, [pc, #8]	; (8003864 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800385a:	f7fe fd70 	bl	800233e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800385e:	bf00      	nop
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	20000168 	.word	0x20000168

08003868 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800386c:	4802      	ldr	r0, [pc, #8]	; (8003878 <TIM2_IRQHandler+0x10>)
 800386e:	f7fe fd66 	bl	800233e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // htim5.Instance->CCR2=htim2.Instance->CCR1/2;

  /* USER CODE END TIM2_IRQn 1 */
}
 8003872:	bf00      	nop
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	200000f0 	.word	0x200000f0

0800387c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  // HAL_GPIO_TogglePin(OUT3_GPIO_Port,OUT3_Pin);
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003880:	4802      	ldr	r0, [pc, #8]	; (800388c <TIM5_IRQHandler+0x10>)
 8003882:	f7fe fd5c 	bl	800233e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	2000012c 	.word	0x2000012c

08003890 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003890:	490f      	ldr	r1, [pc, #60]	; (80038d0 <SystemInit+0x40>)
 8003892:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003896:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800389a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800389e:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <SystemInit+0x44>)
 80038a0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80038a2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80038a4:	f042 0201 	orr.w	r2, r2, #1
 80038a8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80038aa:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80038b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038b6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80038b8:	4a07      	ldr	r2, [pc, #28]	; (80038d8 <SystemInit+0x48>)
 80038ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038c2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80038c4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80038c6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80038ca:	608b      	str	r3, [r1, #8]
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	e000ed00 	.word	0xe000ed00
 80038d4:	40023800 	.word	0x40023800
 80038d8:	24003010 	.word	0x24003010

080038dc <_ZN5ClockC1Ev>:
 */
#include "clock.hpp"
#include "stm32f4xx.h"

// Constructor
Clock::Clock(){
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
	averagingWindow = 8;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2208      	movs	r2, #8
 80038e8:	625a      	str	r2, [r3, #36]	; 0x24
	acceptableOutlierPercentage = 0.2;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a04      	ldr	r2, [pc, #16]	; (8003900 <_ZN5ClockC1Ev+0x24>)
 80038ee:	62da      	str	r2, [r3, #44]	; 0x2c
	;
}
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4618      	mov	r0, r3
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	3e4ccccd 	.word	0x3e4ccccd

08003904 <_ZN5ClockD1Ev>:
// Destructor
Clock::~Clock(void){
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
	;
}
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4618      	mov	r0, r3
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <_ZN5Clock15addPeriodSampleEj>:
//
unsigned int Clock::addPeriodSample(unsigned int periodSample){
 800391a:	b480      	push	{r7}
 800391c:	b089      	sub	sp, #36	; 0x24
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
 8003922:	6039      	str	r1, [r7, #0]

	// If the sample buffer has not overflown and this is one of the first samples always add it
	if((sampleIndex  == 0) && (sampleBufferFull == false)){
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003928:	2b00      	cmp	r3, #0
 800392a:	d124      	bne.n	8003976 <_ZN5Clock15addPeriodSampleEj+0x5c>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003932:	2b00      	cmp	r3, #0
 8003934:	d11f      	bne.n	8003976 <_ZN5Clock15addPeriodSampleEj+0x5c>
		sampleBuffer[sampleIndex] = periodSample;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	320e      	adds	r2, #14
 800393e:	6839      	ldr	r1, [r7, #0]
 8003940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		acceptableDeviation = periodSample*acceptableOutlierPercentage;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	ee07 3a90 	vmov	s15, r3
 800394a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003954:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800395c:	ee17 2a90 	vmov	r2, s15
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
		averagedPeriod = periodSample;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	61da      	str	r2, [r3, #28]
		sampleIndex++;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	629a      	str	r2, [r3, #40]	; 0x28
 8003974:	e057      	b.n	8003a26 <_ZN5Clock15addPeriodSampleEj+0x10c>
	}
	else if(sampleIndex < averagingWindow){
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	429a      	cmp	r2, r3
 8003980:	da3e      	bge.n	8003a00 <_ZN5Clock15addPeriodSampleEj+0xe6>
		// Check if the sample falls within the acceptable deviation bounds
		if(((periodSample+acceptableDeviation)>averagedPeriod)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003986:	461a      	mov	r2, r3
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	441a      	add	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	429a      	cmp	r2, r3
 8003992:	d915      	bls.n	80039c0 <_ZN5Clock15addPeriodSampleEj+0xa6>
			&& ((periodSample-acceptableDeviation)<averagedPeriod)){
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	461a      	mov	r2, r3
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	1a9a      	subs	r2, r3, r2
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d20c      	bcs.n	80039c0 <_ZN5Clock15addPeriodSampleEj+0xa6>

			// Add the sampled clock period to the cyclic buffer
			sampleBuffer[sampleIndex] = periodSample;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	320e      	adds	r2, #14
 80039ae:	6839      	ldr	r1, [r7, #0]
 80039b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			sampleIndex++;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	629a      	str	r2, [r3, #40]	; 0x28
 80039be:	e032      	b.n	8003a26 <_ZN5Clock15addPeriodSampleEj+0x10c>
		}
		else{
			// Reset the buffer, store the sample anyway.
			sampleIndex = 0; sampleBufferFull = false;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	629a      	str	r2, [r3, #40]	; 0x28
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			for(int i = 0; i < averagingWindow; i++){
 80039ce:	2300      	movs	r3, #0
 80039d0:	61fb      	str	r3, [r7, #28]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	429a      	cmp	r2, r3
 80039da:	dd09      	ble.n	80039f0 <_ZN5Clock15addPeriodSampleEj+0xd6>
				sampleBuffer[i] = 0;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	69fa      	ldr	r2, [r7, #28]
 80039e0:	320e      	adds	r2, #14
 80039e2:	2100      	movs	r1, #0
 80039e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(int i = 0; i < averagingWindow; i++){
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	3301      	adds	r3, #1
 80039ec:	61fb      	str	r3, [r7, #28]
 80039ee:	e7f0      	b.n	80039d2 <_ZN5Clock15addPeriodSampleEj+0xb8>
			}
			sampleBuffer[sampleIndex] = periodSample;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	320e      	adds	r2, #14
 80039f8:	6839      	ldr	r1, [r7, #0]
 80039fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80039fe:	e012      	b.n	8003a26 <_ZN5Clock15addPeriodSampleEj+0x10c>
			// sampleIndex++;
		}
	}
	else{sampleIndex = 0; sampleBufferFull = true;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	629a      	str	r2, [r3, #40]	; 0x28
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			sampleBuffer[sampleIndex] = periodSample;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	320e      	adds	r2, #14
 8003a16:	6839      	ldr	r1, [r7, #0]
 8003a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			sampleIndex++;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	629a      	str	r2, [r3, #40]	; 0x28
	}

	// Check if there is more than 1 sample, then average and calculate bounds. If there is only 1 sample return false.
	// We need 2 edges to capture a period length...
	if(sampleBufferFull){
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d030      	beq.n	8003a92 <_ZN5Clock15addPeriodSampleEj+0x178>
		unsigned int temp = 0;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61bb      	str	r3, [r7, #24]
		for(int i = 0; i < averagingWindow ; i++){
 8003a34:	2300      	movs	r3, #0
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	dd0b      	ble.n	8003a5a <_ZN5Clock15addPeriodSampleEj+0x140>
			temp+=sampleBuffer[i];
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	320e      	adds	r2, #14
 8003a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4413      	add	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
		for(int i = 0; i < averagingWindow ; i++){
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	3301      	adds	r3, #1
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	e7ee      	b.n	8003a38 <_ZN5Clock15addPeriodSampleEj+0x11e>
		}
		averagedPeriod = temp/(averagingWindow);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	461a      	mov	r2, r3
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	61da      	str	r2, [r3, #28]

		// Calculate the bounds for the next sample<
		acceptableDeviation = averagedPeriod*acceptableOutlierPercentage;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	ee07 3a90 	vmov	s15, r3
 8003a72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a84:	ee17 2a90 	vmov	r2, s15
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
		return averagedPeriod;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	e035      	b.n	8003afe <_ZN5Clock15addPeriodSampleEj+0x1e4>
	}
	else if(sampleIndex > 0){
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	dd30      	ble.n	8003afc <_ZN5Clock15addPeriodSampleEj+0x1e2>
		unsigned int temp = 0;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	613b      	str	r3, [r7, #16]
		for(int i = 0; i < sampleIndex; i++){
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	dd0b      	ble.n	8003ac4 <_ZN5Clock15addPeriodSampleEj+0x1aa>
			temp+=sampleBuffer[i];
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	320e      	adds	r2, #14
 8003ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	4413      	add	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
		for(int i = 0; i < sampleIndex; i++){
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	e7ee      	b.n	8003aa2 <_ZN5Clock15addPeriodSampleEj+0x188>
		}
		averagedPeriod = temp/(sampleIndex);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	461a      	mov	r2, r3
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	61da      	str	r2, [r3, #28]

		acceptableDeviation = averagedPeriod*acceptableOutlierPercentage;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	69db      	ldr	r3, [r3, #28]
 8003ad8:	ee07 3a90 	vmov	s15, r3
 8003adc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003aee:	ee17 2a90 	vmov	r2, s15
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
		return averagedPeriod;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	e000      	b.n	8003afe <_ZN5Clock15addPeriodSampleEj+0x1e4>
	}
	else{
		// If only 1 sample has been captured:

		return 0;
 8003afc:	2300      	movs	r3, #0
	}
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3724      	adds	r7, #36	; 0x24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr

08003b0a <_ZN5Clock10masterTickEv>:
void Clock::masterTick(void){
 8003b0a:	b480      	push	{r7}
 8003b0c:	b083      	sub	sp, #12
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
	master++;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	615a      	str	r2, [r3, #20]
	sub = 0;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	619a      	str	r2, [r3, #24]
}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <_ZN5Clock7subTickEv>:
void Clock::subTick(void){
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
	if(++sub < subDiv){
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	6193      	str	r3, [r2, #24]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6912      	ldr	r2, [r2, #16]
 8003b44:	4293      	cmp	r3, r2
 8003b46:	bf34      	ite	cc
 8003b48:	2301      	movcc	r3, #1
 8003b4a:	2300      	movcs	r3, #0
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d103      	bne.n	8003b5a <_ZN5Clock7subTickEv+0x2c>
	}
	else{
	   sub = subDiv;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	691a      	ldr	r2, [r3, #16]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	619a      	str	r2, [r3, #24]
	}
}
 8003b5a:	bf00      	nop
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <_ZN5Clock8setTimerEP17TIM_HandleTypeDefS1_>:
// This should happen in the constructor!
void Clock::setTimer(TIM_HandleTypeDef* master, TIM_HandleTypeDef* slave){
 8003b66:	b480      	push	{r7}
 8003b68:	b085      	sub	sp, #20
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
	masterTimer = master;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	601a      	str	r2, [r3, #0]
	slaveTimer = slave;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	605a      	str	r2, [r3, #4]
}
 8003b7e:	bf00      	nop
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <_ZN5Clock4lockEv>:

// Implement averaging routine! and Reset on master pulse.
// Maybe inline these functions!
void Clock::lock(){
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
	if(!lockState){
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	7a5b      	ldrb	r3, [r3, #9]
 8003b96:	f083 0301 	eor.w	r3, r3, #1
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d005      	beq.n	8003bac <_ZN5Clock4lockEv+0x22>
		lockState = true;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	725a      	strb	r2, [r3, #9]
		sub = 0;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	619a      	str	r2, [r3, #24]
	}
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <_ZN5Clock6unlockEv>:
void Clock::unlock(){
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
	lockState = false;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	725a      	strb	r2, [r3, #9]
}
 8003bc6:	bf00      	nop
 8003bc8:	370c      	adds	r7, #12
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <_ZN5Clock8isLockedEv>:
bool Clock::isLocked(void){
 8003bd2:	b480      	push	{r7}
 8003bd4:	b083      	sub	sp, #12
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
	return lockState;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	7a5b      	ldrb	r3, [r3, #9]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <_ZN5Clock9setPeriodEj>:
	else if(clockSource == EXTERNAL){
	     period = masterTimer->Instance->CCR1;
	     masterTimer->Instance->CCR2 = period;
	}
}
void Clock::setPeriod(unsigned int value){
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	6039      	str	r1, [r7, #0]
	if(clockSource == INTERNAL){
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	7a1b      	ldrb	r3, [r3, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d109      	bne.n	8003c10 <_ZN5Clock9setPeriodEj+0x26>
		period = value;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	60da      	str	r2, [r3, #12]
		masterTimer->Instance->CCR2 = period;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	68d2      	ldr	r2, [r2, #12]
 8003c0c:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else if(clockSource == EXTERNAL){
		period = value;
		masterTimer->Instance->CCR2 = period;
	}
}
 8003c0e:	e00c      	b.n	8003c2a <_ZN5Clock9setPeriodEj+0x40>
	else if(clockSource == EXTERNAL){
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	7a1b      	ldrb	r3, [r3, #8]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d108      	bne.n	8003c2a <_ZN5Clock9setPeriodEj+0x40>
		period = value;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	60da      	str	r2, [r3, #12]
		masterTimer->Instance->CCR2 = period;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	68d2      	ldr	r2, [r2, #12]
 8003c28:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <_ZN5Clock9setSourceE11ClockSource>:

void Clock::setSource(enum ClockSource source){
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b082      	sub	sp, #8
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	70fb      	strb	r3, [r7, #3]
	clockSource = source;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	78fa      	ldrb	r2, [r7, #3]
 8003c46:	721a      	strb	r2, [r3, #8]
	if(source == INTERNAL){
 8003c48:	78fb      	ldrb	r3, [r7, #3]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10c      	bne.n	8003c68 <_ZN5Clock9setSourceE11ClockSource+0x32>
		// Do not use the external trigger
		HAL_TIM_IC_Stop_IT(masterTimer, TIM_CHANNEL_1);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2100      	movs	r1, #0
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fe fe5b 	bl	8002910 <HAL_TIM_IC_Stop_IT>
		HAL_TIM_OC_Start_IT(masterTimer, TIM_CHANNEL_2);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2104      	movs	r1, #4
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fe fe27 	bl	80028b4 <HAL_TIM_OC_Start_IT>
	else if(source == EXTERNAL){
		HAL_TIM_IC_Start_IT(masterTimer, TIM_CHANNEL_2);
		HAL_TIM_IC_Start_IT(masterTimer, TIM_CHANNEL_1);

	}
}
 8003c66:	e00e      	b.n	8003c86 <_ZN5Clock9setSourceE11ClockSource+0x50>
	else if(source == EXTERNAL){
 8003c68:	78fb      	ldrb	r3, [r7, #3]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d10b      	bne.n	8003c86 <_ZN5Clock9setSourceE11ClockSource+0x50>
		HAL_TIM_IC_Start_IT(masterTimer, TIM_CHANNEL_2);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	2104      	movs	r1, #4
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fe fe1f 	bl	80028b8 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start_IT(masterTimer, TIM_CHANNEL_1);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2100      	movs	r1, #0
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fe fe19 	bl	80028b8 <HAL_TIM_IC_Start_IT>
}
 8003c86:	bf00      	nop
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <_ZN5Clock16setSlaveDivisionEj>:
volatile unsigned int Clock::getPeriod(void){
	return period;
}

void Clock::setSlaveDivision(unsigned int division){
 8003c8e:	b480      	push	{r7}
 8003c90:	b083      	sub	sp, #12
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	6039      	str	r1, [r7, #0]
	subDiv = division;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	683a      	ldr	r2, [r7, #0]
 8003c9c:	611a      	str	r2, [r3, #16]
	// Bit hacky, to make sure there are only 'division' amounts of pulses in a period.
	// This may be necessary if a shoddy clock input is used
	slaveTimer->Instance->CNT = 0;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	625a      	str	r2, [r3, #36]	; 0x24
	slaveTimer->Instance->ARR = (period+50)/subDiv;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68d2      	ldr	r2, [r2, #12]
 8003cb2:	f102 0132 	add.w	r1, r2, #50	; 0x32
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6912      	ldr	r2, [r2, #16]
 8003cba:	fbb1 f2f2 	udiv	r2, r1, r2
 8003cbe:	62da      	str	r2, [r3, #44]	; 0x2c
	slaveTimer->Instance->CCR2 = 1000;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cca:	639a      	str	r2, [r3, #56]	; 0x38

	// slaveTimer->Instance->ARR = ((period)/division);//+(period%division);
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <_ZnwjPv>:
  __attribute__((__externally_visible__));
#endif

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <_ZdlPvS_>:
inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }

// Default placement versions of operator delete.
inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <_Z12shiftRegInitv>:


uint8_t ui_spi_in[NUM_OF_REGISTERS];
uint8_t ui_spi_out[NUM_OF_REGISTERS];

void shiftRegInit(void){
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SRCLR_GPIO_Port,SRCLR_Pin,GPIO_PIN_SET);
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	2120      	movs	r1, #32
 8003d10:	4807      	ldr	r0, [pc, #28]	; (8003d30 <_Z12shiftRegInitv+0x28>)
 8003d12:	f7fd fd53 	bl	80017bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD_GPIO_Port,LD_Pin,GPIO_PIN_SET);
 8003d16:	2201      	movs	r2, #1
 8003d18:	2101      	movs	r1, #1
 8003d1a:	4805      	ldr	r0, [pc, #20]	; (8003d30 <_Z12shiftRegInitv+0x28>)
 8003d1c:	f7fd fd4e 	bl	80017bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RCLK_GPIO_Port, RCLK_Pin,GPIO_PIN_SET);
 8003d20:	2201      	movs	r2, #1
 8003d22:	2110      	movs	r1, #16
 8003d24:	4802      	ldr	r0, [pc, #8]	; (8003d30 <_Z12shiftRegInitv+0x28>)
 8003d26:	f7fd fd49 	bl	80017bc <HAL_GPIO_WritePin>
}
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40020800 	.word	0x40020800

08003d34 <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef>:
// Switch debouncer
Switches::Switches(uint8_t nRegisters, uint8_t nStates, uint8_t srOffset, SPI_HandleTypeDef* spi){
 8003d34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d36:	b089      	sub	sp, #36	; 0x24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	4608      	mov	r0, r1
 8003d3e:	4611      	mov	r1, r2
 8003d40:	461a      	mov	r2, r3
 8003d42:	4603      	mov	r3, r0
 8003d44:	70fb      	strb	r3, [r7, #3]
 8003d46:	460b      	mov	r3, r1
 8003d48:	70bb      	strb	r3, [r7, #2]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	707b      	strb	r3, [r7, #1]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3308      	adds	r3, #8
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fb9a 	bl	800448c <_ZNSt6vectorIhSaIhEEC1Ev>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3314      	adds	r3, #20
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 fbc4 	bl	80044ea <_ZNSt6vectorIS_IhSaIhEESaIS1_EEC1Ev>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	3320      	adds	r3, #32
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fb90 	bl	800448c <_ZNSt6vectorIhSaIhEEC1Ev>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	332c      	adds	r3, #44	; 0x2c
 8003d70:	4618      	mov	r0, r3
 8003d72:	f000 fb8b 	bl	800448c <_ZNSt6vectorIhSaIhEEC1Ev>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3338      	adds	r3, #56	; 0x38
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 fb86 	bl	800448c <_ZNSt6vectorIhSaIhEEC1Ev>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	3344      	adds	r3, #68	; 0x44
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 fb81 	bl	800448c <_ZNSt6vectorIhSaIhEEC1Ev>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3350      	adds	r3, #80	; 0x50
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fb7c 	bl	800448c <_ZNSt6vectorIhSaIhEEC1Ev>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	335c      	adds	r3, #92	; 0x5c
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fb77 	bl	800448c <_ZNSt6vectorIhSaIhEEC1Ev>
	numOfRegisters = nRegisters;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	705a      	strb	r2, [r3, #1]
	numOfStates = nStates;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	78ba      	ldrb	r2, [r7, #2]
 8003da8:	709a      	strb	r2, [r3, #2]
	offset = srOffset;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	787a      	ldrb	r2, [r7, #1]
 8003dae:	701a      	strb	r2, [r3, #0]

	spi_interface = spi;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003db4:	605a      	str	r2, [r3, #4]

	state.resize(numOfRegisters, std::vector<uint8_t>(numOfStates));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f103 0414 	add.w	r4, r3, #20
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	785b      	ldrb	r3, [r3, #1]
 8003dc0:	461d      	mov	r5, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	789b      	ldrb	r3, [r3, #2]
 8003dc6:	461e      	mov	r6, r3
 8003dc8:	2300      	movs	r3, #0
 8003dca:	76fb      	strb	r3, [r7, #27]
 8003dcc:	f107 031c 	add.w	r3, r7, #28
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 fbb9 	bl	8004548 <_ZNSaIhEC1Ev>
 8003dd6:	f107 031c 	add.w	r3, r7, #28
 8003dda:	f107 021b 	add.w	r2, r7, #27
 8003dde:	f107 000c 	add.w	r0, r7, #12
 8003de2:	4631      	mov	r1, r6
 8003de4:	f000 fbc8 	bl	8004578 <_ZNSt6vectorIhSaIhEEC1EjRKhRKS0_>
 8003de8:	f107 030c 	add.w	r3, r7, #12
 8003dec:	461a      	mov	r2, r3
 8003dee:	4629      	mov	r1, r5
 8003df0:	4620      	mov	r0, r4
 8003df2:	f000 fc1a 	bl	800462a <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEjS1_>
 8003df6:	f107 030c 	add.w	r3, r7, #12
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fb53 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8003e00:	f107 031c 	add.w	r3, r7, #28
 8003e04:	4618      	mov	r0, r3
 8003e06:	f000 fbab 	bl	8004560 <_ZNSaIhED1Ev>
	debouncedState.resize(numOfRegisters);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f103 0020 	add.w	r0, r3, #32
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	785b      	ldrb	r3, [r3, #1]
 8003e14:	2200      	movs	r2, #0
 8003e16:	4619      	mov	r1, r3
 8003e18:	f000 fc45 	bl	80046a6 <_ZNSt6vectorIhSaIhEE6resizeEjh>
	changed.resize(numOfRegisters);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	785b      	ldrb	r3, [r3, #1]
 8003e26:	2200      	movs	r2, #0
 8003e28:	4619      	mov	r1, r3
 8003e2a:	f000 fc3c 	bl	80046a6 <_ZNSt6vectorIhSaIhEE6resizeEjh>
	index.resize(numOfRegisters);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f103 0008 	add.w	r0, r3, #8
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	785b      	ldrb	r3, [r3, #1]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	f000 fc33 	bl	80046a6 <_ZNSt6vectorIhSaIhEE6resizeEjh>

	holdTimer.resize(numOfRegisters*8);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	785b      	ldrb	r3, [r3, #1]
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	4619      	mov	r1, r3
 8003e50:	f000 fc29 	bl	80046a6 <_ZNSt6vectorIhSaIhEE6resizeEjh>

	leds.resize(numOfRegisters);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	785b      	ldrb	r3, [r3, #1]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	4619      	mov	r1, r3
 8003e62:	f000 fc20 	bl	80046a6 <_ZNSt6vectorIhSaIhEE6resizeEjh>
	ledPWM.resize(numOfRegisters*8, 0);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	785b      	ldrb	r3, [r3, #1]
 8003e70:	00db      	lsls	r3, r3, #3
 8003e72:	2200      	movs	r2, #0
 8003e74:	4619      	mov	r1, r3
 8003e76:	f000 fc16 	bl	80046a6 <_ZNSt6vectorIhSaIhEE6resizeEjh>
	ledPulse.resize(numOfRegisters*8, 0);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	785b      	ldrb	r3, [r3, #1]
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	2200      	movs	r2, #0
 8003e88:	4619      	mov	r1, r3
 8003e8a:	f000 fc0c 	bl	80046a6 <_ZNSt6vectorIhSaIhEE6resizeEjh>

}
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	e03c      	b.n	8003f0c <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x1d8>
	state.resize(numOfRegisters, std::vector<uint8_t>(numOfStates));
 8003e92:	f107 030c 	add.w	r3, r7, #12
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fb05 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8003e9c:	e7ff      	b.n	8003e9e <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x16a>
 8003e9e:	f107 031c 	add.w	r3, r7, #28
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fb5c 	bl	8004560 <_ZNSaIhED1Ev>
 8003ea8:	e7ff      	b.n	8003eaa <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x176>
Switches::Switches(uint8_t nRegisters, uint8_t nStates, uint8_t srOffset, SPI_HandleTypeDef* spi){
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	335c      	adds	r3, #92	; 0x5c
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 faf9 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8003eb4:	e7ff      	b.n	8003eb6 <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x182>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3350      	adds	r3, #80	; 0x50
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 faf3 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8003ec0:	e7ff      	b.n	8003ec2 <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x18e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	3344      	adds	r3, #68	; 0x44
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f000 faed 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8003ecc:	e7ff      	b.n	8003ece <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x19a>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3338      	adds	r3, #56	; 0x38
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 fae7 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8003ed8:	e7ff      	b.n	8003eda <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x1a6>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	332c      	adds	r3, #44	; 0x2c
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 fae1 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8003ee4:	e7ff      	b.n	8003ee6 <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x1b2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	3320      	adds	r3, #32
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 fadb 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8003ef0:	e7ff      	b.n	8003ef2 <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x1be>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	3314      	adds	r3, #20
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fb04 	bl	8004504 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
 8003efc:	e7ff      	b.n	8003efe <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x1ca>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3308      	adds	r3, #8
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 facf 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8003f08:	f002 fac4 	bl	8006494 <__cxa_end_cleanup>
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3724      	adds	r7, #36	; 0x24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f14 <_ZN8SwitchesD1Ev>:

Switches::~Switches(void){
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	335c      	adds	r3, #92	; 0x5c
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fac0 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3350      	adds	r3, #80	; 0x50
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fabb 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3344      	adds	r3, #68	; 0x44
 8003f34:	4618      	mov	r0, r3
 8003f36:	f000 fab6 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3338      	adds	r3, #56	; 0x38
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fab1 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	332c      	adds	r3, #44	; 0x2c
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 faac 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3320      	adds	r3, #32
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 faa7 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3314      	adds	r3, #20
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 fad1 	bl	8004504 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3308      	adds	r3, #8
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fa9d 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
	;
}
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	e02a      	b.n	8003fc6 <_ZN8SwitchesD1Ev+0xb2>
Switches::~Switches(void){
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3350      	adds	r3, #80	; 0x50
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fa96 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8003f7a:	e7ff      	b.n	8003f7c <_ZN8SwitchesD1Ev+0x68>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3344      	adds	r3, #68	; 0x44
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 fa90 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8003f86:	e7ff      	b.n	8003f88 <_ZN8SwitchesD1Ev+0x74>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3338      	adds	r3, #56	; 0x38
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fa8a 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8003f92:	e7ff      	b.n	8003f94 <_ZN8SwitchesD1Ev+0x80>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	332c      	adds	r3, #44	; 0x2c
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fa84 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8003f9e:	e7ff      	b.n	8003fa0 <_ZN8SwitchesD1Ev+0x8c>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	3320      	adds	r3, #32
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fa7e 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8003faa:	e7ff      	b.n	8003fac <_ZN8SwitchesD1Ev+0x98>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	3314      	adds	r3, #20
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 faa7 	bl	8004504 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
 8003fb6:	e7ff      	b.n	8003fb8 <_ZN8SwitchesD1Ev+0xa4>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3308      	adds	r3, #8
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fa72 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8003fc2:	f002 fa67 	bl	8006494 <__cxa_end_cleanup>
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <_ZN8Switches3spiEv>:

void Switches::spi(void){
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af02      	add	r7, sp, #8
 8003fd6:	6078      	str	r0, [r7, #4]
		// Clear output shift register, unnecessary...
		// HAL_GPIO_WritePin(SRCLR_GPIO_Port,SRCLR_Pin,GPIO_PIN_RESET);
		// HAL_GPIO_WritePin(SRCLR_GPIO_Port,SRCLR_Pin,GPIO_PIN_SET);

		// Latch inputs
		HAL_GPIO_WritePin(LD_GPIO_Port,LD_Pin,GPIO_PIN_RESET);
 8003fd8:	2200      	movs	r2, #0
 8003fda:	2101      	movs	r1, #1
 8003fdc:	480f      	ldr	r0, [pc, #60]	; (800401c <_ZN8Switches3spiEv+0x4c>)
 8003fde:	f7fd fbed 	bl	80017bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD_GPIO_Port,LD_Pin,GPIO_PIN_SET);
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	480d      	ldr	r0, [pc, #52]	; (800401c <_ZN8Switches3spiEv+0x4c>)
 8003fe8:	f7fd fbe8 	bl	80017bc <HAL_GPIO_WritePin>


		HAL_SPI_TransmitReceive(spi_interface, ui_spi_out, ui_spi_in, NUM_OF_REGISTERS, 10);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6858      	ldr	r0, [r3, #4]
 8003ff0:	230a      	movs	r3, #10
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	4a0a      	ldr	r2, [pc, #40]	; (8004020 <_ZN8Switches3spiEv+0x50>)
 8003ff8:	490a      	ldr	r1, [pc, #40]	; (8004024 <_ZN8Switches3spiEv+0x54>)
 8003ffa:	f7fd fee3 	bl	8001dc4 <HAL_SPI_TransmitReceive>

		// Transfer shift register contents to storage register
		HAL_GPIO_WritePin(RCLK_GPIO_Port, RCLK_Pin,GPIO_PIN_RESET);
 8003ffe:	2200      	movs	r2, #0
 8004000:	2110      	movs	r1, #16
 8004002:	4806      	ldr	r0, [pc, #24]	; (800401c <_ZN8Switches3spiEv+0x4c>)
 8004004:	f7fd fbda 	bl	80017bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RCLK_GPIO_Port, RCLK_Pin,GPIO_PIN_SET);
 8004008:	2201      	movs	r2, #1
 800400a:	2110      	movs	r1, #16
 800400c:	4803      	ldr	r0, [pc, #12]	; (800401c <_ZN8Switches3spiEv+0x4c>)
 800400e:	f7fd fbd5 	bl	80017bc <HAL_GPIO_WritePin>
}
 8004012:	bf00      	nop
 8004014:	3708      	adds	r7, #8
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	40020800 	.word	0x40020800
 8004020:	200002c8 	.word	0x200002c8
 8004024:	200002cc 	.word	0x200002cc

08004028 <_ZN8Switches6updateEi>:
void Switches::update(int subTick){
 8004028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800402c:	b08d      	sub	sp, #52	; 0x34
 800402e:	af00      	add	r7, sp, #0
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	60b9      	str	r1, [r7, #8]
			index[x] = 0;
		}

		changed[x] = debouncedState[x] ^ lastDebouncedState[x];

	}
 8004034:	466a      	mov	r2, sp
 8004036:	607a      	str	r2, [r7, #4]
	uint8_t lastDebouncedState[numOfRegisters];
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	7852      	ldrb	r2, [r2, #1]
 800403c:	1e50      	subs	r0, r2, #1
 800403e:	62b8      	str	r0, [r7, #40]	; 0x28
 8004040:	4602      	mov	r2, r0
 8004042:	3201      	adds	r2, #1
 8004044:	4611      	mov	r1, r2
 8004046:	f04f 0200 	mov.w	r2, #0
 800404a:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 800404e:	ea4b 7b51 	orr.w	fp, fp, r1, lsr #29
 8004052:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 8004056:	4602      	mov	r2, r0
 8004058:	3201      	adds	r2, #1
 800405a:	4611      	mov	r1, r2
 800405c:	f04f 0200 	mov.w	r2, #0
 8004060:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 8004064:	ea49 7951 	orr.w	r9, r9, r1, lsr #29
 8004068:	ea4f 08c1 	mov.w	r8, r1, lsl #3
 800406c:	4602      	mov	r2, r0
 800406e:	3201      	adds	r2, #1
 8004070:	3207      	adds	r2, #7
 8004072:	08d2      	lsrs	r2, r2, #3
 8004074:	00d2      	lsls	r2, r2, #3
 8004076:	ebad 0d02 	sub.w	sp, sp, r2
 800407a:	466a      	mov	r2, sp
 800407c:	3200      	adds	r2, #0
 800407e:	627a      	str	r2, [r7, #36]	; 0x24
	uint8_t ledMask[numOfRegisters];
 8004080:	68fa      	ldr	r2, [r7, #12]
 8004082:	7852      	ldrb	r2, [r2, #1]
 8004084:	1e50      	subs	r0, r2, #1
 8004086:	6238      	str	r0, [r7, #32]
 8004088:	4602      	mov	r2, r0
 800408a:	3201      	adds	r2, #1
 800408c:	4611      	mov	r1, r2
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	00d6      	lsls	r6, r2, #3
 8004094:	ea46 7651 	orr.w	r6, r6, r1, lsr #29
 8004098:	00cd      	lsls	r5, r1, #3
 800409a:	4602      	mov	r2, r0
 800409c:	3201      	adds	r2, #1
 800409e:	4611      	mov	r1, r2
 80040a0:	f04f 0200 	mov.w	r2, #0
 80040a4:	00d4      	lsls	r4, r2, #3
 80040a6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80040aa:	00cb      	lsls	r3, r1, #3
 80040ac:	4603      	mov	r3, r0
 80040ae:	3301      	adds	r3, #1
 80040b0:	3307      	adds	r3, #7
 80040b2:	08db      	lsrs	r3, r3, #3
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	ebad 0d03 	sub.w	sp, sp, r3
 80040ba:	466b      	mov	r3, sp
 80040bc:	3300      	adds	r3, #0
 80040be:	61fb      	str	r3, [r7, #28]
	uint8_t step = subTick;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	76fb      	strb	r3, [r7, #27]
	PWMcounter++;
 80040c4:	4bae      	ldr	r3, [pc, #696]	; (8004380 <_ZN8Switches6updateEi+0x358>)
 80040c6:	781b      	ldrb	r3, [r3, #0]
 80040c8:	3301      	adds	r3, #1
 80040ca:	b2da      	uxtb	r2, r3
 80040cc:	4bac      	ldr	r3, [pc, #688]	; (8004380 <_ZN8Switches6updateEi+0x358>)
 80040ce:	701a      	strb	r2, [r3, #0]
	for(x = 0; x < numOfRegisters; x++){
 80040d0:	2300      	movs	r3, #0
 80040d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80040d6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	7852      	ldrb	r2, [r2, #1]
 80040de:	4293      	cmp	r3, r2
 80040e0:	f280 81a0 	bge.w	8004424 <_ZN8Switches6updateEi+0x3fc>
		for(j = 0; j<8; j++){
 80040e4:	2300      	movs	r3, #0
 80040e6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80040ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80040ee:	2b07      	cmp	r3, #7
 80040f0:	f300 80be 	bgt.w	8004270 <_ZN8Switches6updateEi+0x248>
			shift = (x*8)+j;
 80040f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80040f8:	00da      	lsls	r2, r3, #3
 80040fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80040fe:	4413      	add	r3, r2
 8004100:	617b      	str	r3, [r7, #20]
			if(ledPulse[shift]){
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	335c      	adds	r3, #92	; 0x5c
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4611      	mov	r1, r2
 800410a:	4618      	mov	r0, r3
 800410c:	f000 fb06 	bl	800471c <_ZNSt6vectorIhSaIhEEixEj>
 8004110:	4603      	mov	r3, r0
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf14      	ite	ne
 8004118:	2301      	movne	r3, #1
 800411a:	2300      	moveq	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d066      	beq.n	80041f0 <_ZN8Switches6updateEi+0x1c8>
				if(!(step%ledPulse[shift])){
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	335c      	adds	r3, #92	; 0x5c
 8004126:	697a      	ldr	r2, [r7, #20]
 8004128:	4611      	mov	r1, r2
 800412a:	4618      	mov	r0, r3
 800412c:	f000 faf6 	bl	800471c <_ZNSt6vectorIhSaIhEEixEj>
 8004130:	4603      	mov	r3, r0
 8004132:	781a      	ldrb	r2, [r3, #0]
 8004134:	7efb      	ldrb	r3, [r7, #27]
 8004136:	fbb3 f1f2 	udiv	r1, r3, r2
 800413a:	fb02 f201 	mul.w	r2, r2, r1
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	bf0c      	ite	eq
 8004146:	2301      	moveq	r3, #1
 8004148:	2300      	movne	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d03a      	beq.n	80041c6 <_ZN8Switches6updateEi+0x19e>
					if(PWMcounter<ledPWM[shift]){
 8004150:	4b8b      	ldr	r3, [pc, #556]	; (8004380 <_ZN8Switches6updateEi+0x358>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	461c      	mov	r4, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	3350      	adds	r3, #80	; 0x50
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	4611      	mov	r1, r2
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fadc 	bl	800471c <_ZNSt6vectorIhSaIhEEixEj>
 8004164:	4603      	mov	r3, r0
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	429c      	cmp	r4, r3
 800416a:	bfb4      	ite	lt
 800416c:	2301      	movlt	r3, #1
 800416e:	2300      	movge	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d012      	beq.n	800419c <_ZN8Switches6updateEi+0x174>
						ledMask[x] |= (1 << j);
 8004176:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800417a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800417e:	69f9      	ldr	r1, [r7, #28]
 8004180:	5c8a      	ldrb	r2, [r1, r2]
 8004182:	b251      	sxtb	r1, r2
 8004184:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004188:	2001      	movs	r0, #1
 800418a:	fa00 f202 	lsl.w	r2, r0, r2
 800418e:	b252      	sxtb	r2, r2
 8004190:	430a      	orrs	r2, r1
 8004192:	b252      	sxtb	r2, r2
 8004194:	b2d1      	uxtb	r1, r2
 8004196:	69fa      	ldr	r2, [r7, #28]
 8004198:	54d1      	strb	r1, [r2, r3]
 800419a:	e063      	b.n	8004264 <_ZN8Switches6updateEi+0x23c>
						ledMask[x] &= ~(1 << j);
 800419c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80041a0:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80041a4:	69f9      	ldr	r1, [r7, #28]
 80041a6:	5c8a      	ldrb	r2, [r1, r2]
 80041a8:	b251      	sxtb	r1, r2
 80041aa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80041ae:	2001      	movs	r0, #1
 80041b0:	fa00 f202 	lsl.w	r2, r0, r2
 80041b4:	b252      	sxtb	r2, r2
 80041b6:	43d2      	mvns	r2, r2
 80041b8:	b252      	sxtb	r2, r2
 80041ba:	400a      	ands	r2, r1
 80041bc:	b252      	sxtb	r2, r2
 80041be:	b2d1      	uxtb	r1, r2
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	54d1      	strb	r1, [r2, r3]
 80041c4:	e04e      	b.n	8004264 <_ZN8Switches6updateEi+0x23c>
					ledMask[x] &= ~(1 << j);
 80041c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80041ca:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80041ce:	69f9      	ldr	r1, [r7, #28]
 80041d0:	5c8a      	ldrb	r2, [r1, r2]
 80041d2:	b251      	sxtb	r1, r2
 80041d4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80041d8:	2001      	movs	r0, #1
 80041da:	fa00 f202 	lsl.w	r2, r0, r2
 80041de:	b252      	sxtb	r2, r2
 80041e0:	43d2      	mvns	r2, r2
 80041e2:	b252      	sxtb	r2, r2
 80041e4:	400a      	ands	r2, r1
 80041e6:	b252      	sxtb	r2, r2
 80041e8:	b2d1      	uxtb	r1, r2
 80041ea:	69fa      	ldr	r2, [r7, #28]
 80041ec:	54d1      	strb	r1, [r2, r3]
 80041ee:	e039      	b.n	8004264 <_ZN8Switches6updateEi+0x23c>
				if(PWMcounter<ledPWM[shift]){
 80041f0:	4b63      	ldr	r3, [pc, #396]	; (8004380 <_ZN8Switches6updateEi+0x358>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	461c      	mov	r4, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	3350      	adds	r3, #80	; 0x50
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	4611      	mov	r1, r2
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 fa8c 	bl	800471c <_ZNSt6vectorIhSaIhEEixEj>
 8004204:	4603      	mov	r3, r0
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	429c      	cmp	r4, r3
 800420a:	bfb4      	ite	lt
 800420c:	2301      	movlt	r3, #1
 800420e:	2300      	movge	r3, #0
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d012      	beq.n	800423c <_ZN8Switches6updateEi+0x214>
					ledMask[x] |= (1 << j);
 8004216:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800421a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800421e:	69f9      	ldr	r1, [r7, #28]
 8004220:	5c8a      	ldrb	r2, [r1, r2]
 8004222:	b251      	sxtb	r1, r2
 8004224:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004228:	2001      	movs	r0, #1
 800422a:	fa00 f202 	lsl.w	r2, r0, r2
 800422e:	b252      	sxtb	r2, r2
 8004230:	430a      	orrs	r2, r1
 8004232:	b252      	sxtb	r2, r2
 8004234:	b2d1      	uxtb	r1, r2
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	54d1      	strb	r1, [r2, r3]
 800423a:	e013      	b.n	8004264 <_ZN8Switches6updateEi+0x23c>
					ledMask[x] &= ~(1 << j);
 800423c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004240:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004244:	69f9      	ldr	r1, [r7, #28]
 8004246:	5c8a      	ldrb	r2, [r1, r2]
 8004248:	b251      	sxtb	r1, r2
 800424a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800424e:	2001      	movs	r0, #1
 8004250:	fa00 f202 	lsl.w	r2, r0, r2
 8004254:	b252      	sxtb	r2, r2
 8004256:	43d2      	mvns	r2, r2
 8004258:	b252      	sxtb	r2, r2
 800425a:	400a      	ands	r2, r1
 800425c:	b252      	sxtb	r2, r2
 800425e:	b2d1      	uxtb	r1, r2
 8004260:	69fa      	ldr	r2, [r7, #28]
 8004262:	54d1      	strb	r1, [r2, r3]
		for(j = 0; j<8; j++){
 8004264:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8004268:	3301      	adds	r3, #1
 800426a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800426e:	e73c      	b.n	80040ea <_ZN8Switches6updateEi+0xc2>
		if(PWMcounter == 127){
 8004270:	4b43      	ldr	r3, [pc, #268]	; (8004380 <_ZN8Switches6updateEi+0x358>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	2b7f      	cmp	r3, #127	; 0x7f
 8004276:	d102      	bne.n	800427e <_ZN8Switches6updateEi+0x256>
			PWMcounter = 0;
 8004278:	4b41      	ldr	r3, [pc, #260]	; (8004380 <_ZN8Switches6updateEi+0x358>)
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
		ui_spi_out[NUM_OF_REGISTERS-(1+offset+x)] = leds[x] | ledMask[x];
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004288:	4413      	add	r3, r2
 800428a:	f1c3 0403 	rsb	r4, r3, #3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	3344      	adds	r3, #68	; 0x44
 8004292:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004296:	4611      	mov	r1, r2
 8004298:	4618      	mov	r0, r3
 800429a:	f000 fa3f 	bl	800471c <_ZNSt6vectorIhSaIhEEixEj>
 800429e:	4603      	mov	r3, r0
 80042a0:	781a      	ldrb	r2, [r3, #0]
 80042a2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80042a6:	69f9      	ldr	r1, [r7, #28]
 80042a8:	5ccb      	ldrb	r3, [r1, r3]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	4b35      	ldr	r3, [pc, #212]	; (8004384 <_ZN8Switches6updateEi+0x35c>)
 80042b0:	551a      	strb	r2, [r3, r4]
		lastDebouncedState[x] = debouncedState[x];
 80042b2:	f897 402e 	ldrb.w	r4, [r7, #46]	; 0x2e
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	3320      	adds	r3, #32
 80042ba:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80042be:	4611      	mov	r1, r2
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 fa2b 	bl	800471c <_ZNSt6vectorIhSaIhEEixEj>
 80042c6:	4603      	mov	r3, r0
 80042c8:	781a      	ldrb	r2, [r3, #0]
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	551a      	strb	r2, [r3, r4]
		debouncedState[x] = 0xFF;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3320      	adds	r3, #32
 80042d2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80042d6:	4611      	mov	r1, r2
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fa1f 	bl	800471c <_ZNSt6vectorIhSaIhEEixEj>
 80042de:	4603      	mov	r3, r0
 80042e0:	22ff      	movs	r2, #255	; 0xff
 80042e2:	701a      	strb	r2, [r3, #0]
		state[x][index[x]] = ui_spi_in[x+offset];
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	3314      	adds	r3, #20
 80042e8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80042ec:	4611      	mov	r1, r2
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fa23 	bl	800473a <_ZNSt6vectorIS_IhSaIhEESaIS1_EEixEj>
 80042f4:	4604      	mov	r4, r0
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3308      	adds	r3, #8
 80042fa:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80042fe:	4611      	mov	r1, r2
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fa0b 	bl	800471c <_ZNSt6vectorIhSaIhEEixEj>
 8004306:	4603      	mov	r3, r0
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	4619      	mov	r1, r3
 800430c:	4620      	mov	r0, r4
 800430e:	f000 fa05 	bl	800471c <_ZNSt6vectorIhSaIhEEixEj>
 8004312:	4601      	mov	r1, r0
 8004314:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	7812      	ldrb	r2, [r2, #0]
 800431c:	4413      	add	r3, r2
 800431e:	4a1a      	ldr	r2, [pc, #104]	; (8004388 <_ZN8Switches6updateEi+0x360>)
 8004320:	5cd3      	ldrb	r3, [r2, r3]
 8004322:	700b      	strb	r3, [r1, #0]
		for(i = 0; i < numOfStates; i++){
 8004324:	2300      	movs	r3, #0
 8004326:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800432a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800432e:	68fa      	ldr	r2, [r7, #12]
 8004330:	7892      	ldrb	r2, [r2, #2]
 8004332:	4293      	cmp	r3, r2
 8004334:	da2a      	bge.n	800438c <_ZN8Switches6updateEi+0x364>
			debouncedState[x] &= state[x][i];
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3314      	adds	r3, #20
 800433a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800433e:	4611      	mov	r1, r2
 8004340:	4618      	mov	r0, r3
 8004342:	f000 f9fa 	bl	800473a <_ZNSt6vectorIS_IhSaIhEESaIS1_EEixEj>
 8004346:	4602      	mov	r2, r0
 8004348:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800434c:	4619      	mov	r1, r3
 800434e:	4610      	mov	r0, r2
 8004350:	f000 f9e4 	bl	800471c <_ZNSt6vectorIhSaIhEEixEj>
 8004354:	4603      	mov	r3, r0
 8004356:	781c      	ldrb	r4, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3320      	adds	r3, #32
 800435c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004360:	4611      	mov	r1, r2
 8004362:	4618      	mov	r0, r3
 8004364:	f000 f9da 	bl	800471c <_ZNSt6vectorIhSaIhEEixEj>
 8004368:	4603      	mov	r3, r0
 800436a:	781a      	ldrb	r2, [r3, #0]
 800436c:	4022      	ands	r2, r4
 800436e:	b2d2      	uxtb	r2, r2
 8004370:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < numOfStates; i++){
 8004372:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004376:	3301      	adds	r3, #1
 8004378:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800437c:	e7d5      	b.n	800432a <_ZN8Switches6updateEi+0x302>
 800437e:	bf00      	nop
 8004380:	200002cf 	.word	0x200002cf
 8004384:	200002cc 	.word	0x200002cc
 8004388:	200002c8 	.word	0x200002c8
		index[x]++;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	3308      	adds	r3, #8
 8004390:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004394:	4611      	mov	r1, r2
 8004396:	4618      	mov	r0, r3
 8004398:	f000 f9c0 	bl	800471c <_ZNSt6vectorIhSaIhEEixEj>
 800439c:	4603      	mov	r3, r0
 800439e:	781a      	ldrb	r2, [r3, #0]
 80043a0:	3201      	adds	r2, #1
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	701a      	strb	r2, [r3, #0]
		if(index[x] >= numOfStates){
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3308      	adds	r3, #8
 80043aa:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80043ae:	4611      	mov	r1, r2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 f9b3 	bl	800471c <_ZNSt6vectorIhSaIhEEixEj>
 80043b6:	4603      	mov	r3, r0
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	461a      	mov	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	789b      	ldrb	r3, [r3, #2]
 80043c0:	429a      	cmp	r2, r3
 80043c2:	bfac      	ite	ge
 80043c4:	2301      	movge	r3, #1
 80043c6:	2300      	movlt	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <_ZN8Switches6updateEi+0x3bc>
			index[x] = 0;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3308      	adds	r3, #8
 80043d2:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80043d6:	4611      	mov	r1, r2
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 f99f 	bl	800471c <_ZNSt6vectorIhSaIhEEixEj>
 80043de:	4603      	mov	r3, r0
 80043e0:	2200      	movs	r2, #0
 80043e2:	701a      	strb	r2, [r3, #0]
		changed[x] = debouncedState[x] ^ lastDebouncedState[x];
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	332c      	adds	r3, #44	; 0x2c
 80043e8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80043ec:	4611      	mov	r1, r2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 f994 	bl	800471c <_ZNSt6vectorIhSaIhEEixEj>
 80043f4:	4604      	mov	r4, r0
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	3320      	adds	r3, #32
 80043fa:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80043fe:	4611      	mov	r1, r2
 8004400:	4618      	mov	r0, r3
 8004402:	f000 f98b 	bl	800471c <_ZNSt6vectorIhSaIhEEixEj>
 8004406:	4603      	mov	r3, r0
 8004408:	781a      	ldrb	r2, [r3, #0]
 800440a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800440e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004410:	5ccb      	ldrb	r3, [r1, r3]
 8004412:	4053      	eors	r3, r2
 8004414:	b2db      	uxtb	r3, r3
 8004416:	7023      	strb	r3, [r4, #0]
	for(x = 0; x < numOfRegisters; x++){
 8004418:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800441c:	3301      	adds	r3, #1
 800441e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004422:	e658      	b.n	80040d6 <_ZN8Switches6updateEi+0xae>
 8004424:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8004428:	bf00      	nop
 800442a:	3734      	adds	r7, #52	; 0x34
 800442c:	46bd      	mov	sp, r7
 800442e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004432:	bf00      	nop

08004434 <_ZN8Switches9setLedAllE8PWM_MODE10PULSE_MODE>:
	for(int i = 0; i < numOfRegisters*8; i++){
		ledPulse[i] = pulse;
		ledPWM[i] = FULL;
	}
}
void Switches::setLedAll(PWM_MODE pwm, PULSE_MODE pulse){
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	460b      	mov	r3, r1
 800443e:	70fb      	strb	r3, [r7, #3]
 8004440:	4613      	mov	r3, r2
 8004442:	70bb      	strb	r3, [r7, #2]
	for(int i = 0; i < numOfRegisters*8; i++){
 8004444:	2300      	movs	r3, #0
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	785b      	ldrb	r3, [r3, #1]
 800444c:	00da      	lsls	r2, r3, #3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	429a      	cmp	r2, r3
 8004452:	dd17      	ble.n	8004484 <_ZN8Switches9setLedAllE8PWM_MODE10PULSE_MODE+0x50>
		ledPWM[i] = pwm;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3350      	adds	r3, #80	; 0x50
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	4611      	mov	r1, r2
 800445c:	4618      	mov	r0, r3
 800445e:	f000 f95d 	bl	800471c <_ZNSt6vectorIhSaIhEEixEj>
 8004462:	4602      	mov	r2, r0
 8004464:	78fb      	ldrb	r3, [r7, #3]
 8004466:	7013      	strb	r3, [r2, #0]
		ledPulse[i] = pulse;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	335c      	adds	r3, #92	; 0x5c
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4611      	mov	r1, r2
 8004470:	4618      	mov	r0, r3
 8004472:	f000 f953 	bl	800471c <_ZNSt6vectorIhSaIhEEixEj>
 8004476:	4602      	mov	r2, r0
 8004478:	78bb      	ldrb	r3, [r7, #2]
 800447a:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < numOfRegisters*8; i++){
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3301      	adds	r3, #1
 8004480:	60fb      	str	r3, [r7, #12]
 8004482:	e7e1      	b.n	8004448 <_ZN8Switches9setLedAllE8PWM_MODE10PULSE_MODE+0x14>
	}
}
 8004484:	bf00      	nop
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <_ZNSt6vectorIhSaIhEEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	4618      	mov	r0, r3
 8004498:	f000 f96e 	bl	8004778 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80044a6:	b5b0      	push	{r4, r5, r7, lr}
 80044a8:	b082      	sub	sp, #8
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681c      	ldr	r4, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 f98a 	bl	80047d2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80044be:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80044c0:	461a      	mov	r2, r3
 80044c2:	4629      	mov	r1, r5
 80044c4:	4620      	mov	r0, r4
 80044c6:	f000 f98f 	bl	80047e8 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 f960 	bl	8004792 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	e005      	b.n	80044e2 <_ZNSt6vectorIhSaIhEED1Ev+0x3c>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4618      	mov	r0, r3
 80044da:	f000 f95a 	bl	8004792 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80044de:	f001 ffd9 	bl	8006494 <__cxa_end_cleanup>
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bdb0      	pop	{r4, r5, r7, pc}

080044ea <_ZNSt6vectorIS_IhSaIhEESaIS1_EEC1Ev>:
      vector()
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
      : _Base() { }
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f000 f991 	bl	800481c <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EEC1Ev>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8004504:	b5b0      	push	{r4, r5, r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681c      	ldr	r4, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	4618      	mov	r0, r3
 8004518:	f000 f9b4 	bl	8004884 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 800451c:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800451e:	461a      	mov	r2, r3
 8004520:	4629      	mov	r1, r5
 8004522:	4620      	mov	r0, r4
 8004524:	f000 f9b9 	bl	800489a <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4618      	mov	r0, r3
 800452c:	f000 f984 	bl	8004838 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EED1Ev>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	e005      	b.n	8004540 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev+0x3c>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f97e 	bl	8004838 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EED1Ev>
 800453c:	f001 ffaa 	bl	8006494 <__cxa_end_cleanup>
 8004540:	4618      	mov	r0, r3
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bdb0      	pop	{r4, r5, r7, pc}

08004548 <_ZNSaIhEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f000 f9b0 	bl	80048b6 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <_ZNSaIhED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f9af 	bl	80048cc <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4618      	mov	r0, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <_ZNSt6vectorIhSaIhEEC1EjRKhRKS0_>:
      vector(size_type __n, const value_type& __value = value_type(),
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
 8004584:	603b      	str	r3, [r7, #0]
      : _Base(__n, __a)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	68b9      	ldr	r1, [r7, #8]
 800458c:	4618      	mov	r0, r3
 800458e:	f000 f9a8 	bl	80048e2 <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>
      { _M_fill_initialize(__n, __value); }
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 f9be 	bl	8004918 <_ZNSt6vectorIhSaIhEE18_M_fill_initializeEjRKh>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	e005      	b.n	80045ac <_ZNSt6vectorIhSaIhEEC1EjRKhRKS0_+0x34>
      : _Base(__n, __a)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 f8f5 	bl	8004792 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 80045a8:	f001 ff74 	bl	8006494 <__cxa_end_cleanup>
      { _M_fill_initialize(__n, __value); }
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <_ZNSt6vectorIhSaIhEEC1ERKS1_>:
      vector(const vector& __x)
 80045b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 80045be:	687c      	ldr	r4, [r7, #4]
 80045c0:	6838      	ldr	r0, [r7, #0]
 80045c2:	f000 f9c2 	bl	800494a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80045c6:	4605      	mov	r5, r0
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f000 f9d8 	bl	8004980 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80045d0:	4603      	mov	r3, r0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 f9c9 	bl	800496a <_ZN9__gnu_cxx14__alloc_traitsISaIhEE17_S_select_on_copyERKS1_>
 80045d8:	4603      	mov	r3, r0
 80045da:	461a      	mov	r2, r3
 80045dc:	4629      	mov	r1, r5
 80045de:	4620      	mov	r0, r4
 80045e0:	f000 f97f 	bl	80048e2 <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 80045e4:	6838      	ldr	r0, [r7, #0]
 80045e6:	f000 f9d6 	bl	8004996 <_ZNKSt6vectorIhSaIhEE5beginEv>
 80045ea:	4605      	mov	r5, r0
 80045ec:	6838      	ldr	r0, [r7, #0]
 80045ee:	f000 f9e6 	bl	80049be <_ZNKSt6vectorIhSaIhEE3endEv>
 80045f2:	4606      	mov	r6, r0
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 f8e9 	bl	80047d2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8004600:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8004602:	4622      	mov	r2, r4
 8004604:	4631      	mov	r1, r6
 8004606:	4628      	mov	r0, r5
 8004608:	f000 f9ed 	bl	80049e6 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
 800460c:	4602      	mov	r2, r0
      { this->_M_impl._M_finish =
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	605a      	str	r2, [r3, #4]
      }
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	e005      	b.n	8004622 <_ZNSt6vectorIhSaIhEEC1ERKS1_+0x6e>
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4618      	mov	r0, r3
 800461a:	f000 f8ba 	bl	8004792 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800461e:	f001 ff39 	bl	8006494 <__cxa_end_cleanup>
      }
 8004622:	4618      	mov	r0, r3
 8004624:	370c      	adds	r7, #12
 8004626:	46bd      	mov	sp, r7
 8004628:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800462a <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEjS1_>:
       *  %vector's current size the %vector is truncated, otherwise
       *  the %vector is extended and new elements are populated with
       *  given data.
       */
      void
      resize(size_type __new_size, value_type __x = value_type())
 800462a:	b590      	push	{r4, r7, lr}
 800462c:	b085      	sub	sp, #20
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
      {
	if (__new_size > size())
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 f9e6 	bl	8004a08 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 800463c:	4602      	mov	r2, r0
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	429a      	cmp	r2, r3
 8004642:	bf34      	ite	cc
 8004644:	2301      	movcc	r3, #1
 8004646:	2300      	movcs	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00f      	beq.n	800466e <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEjS1_+0x44>
	  insert(end(), __new_size - size(), __x);
 800464e:	68f8      	ldr	r0, [r7, #12]
 8004650:	f000 f9f0 	bl	8004a34 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE3endEv>
 8004654:	4604      	mov	r4, r0
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f9d6 	bl	8004a08 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 800465c:	4602      	mov	r2, r0
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	1a9a      	subs	r2, r3, r2
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4621      	mov	r1, r4
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 f9f5 	bl	8004a56 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_>
	else if (__new_size < size())
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
 800466c:	e017      	b.n	800469e <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEjS1_+0x74>
	else if (__new_size < size())
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 f9ca 	bl	8004a08 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 8004674:	4602      	mov	r2, r0
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	429a      	cmp	r2, r3
 800467a:	bf8c      	ite	hi
 800467c:	2301      	movhi	r3, #1
 800467e:	2300      	movls	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00b      	beq.n	800469e <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEjS1_+0x74>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6819      	ldr	r1, [r3, #0]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	4613      	mov	r3, r2
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	4413      	add	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	4619      	mov	r1, r3
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f9ed 	bl	8004a78 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE15_M_erase_at_endEPS1_>
      }
 800469e:	bf00      	nop
 80046a0:	3714      	adds	r7, #20
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd90      	pop	{r4, r7, pc}

080046a6 <_ZNSt6vectorIhSaIhEE6resizeEjh>:
      resize(size_type __new_size, value_type __x = value_type())
 80046a6:	b590      	push	{r4, r7, lr}
 80046a8:	b085      	sub	sp, #20
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	4613      	mov	r3, r2
 80046b2:	71fb      	strb	r3, [r7, #7]
	if (__new_size > size())
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f000 f948 	bl	800494a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80046ba:	4602      	mov	r2, r0
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	bf34      	ite	cc
 80046c2:	2301      	movcc	r3, #1
 80046c4:	2300      	movcs	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00f      	beq.n	80046ec <_ZNSt6vectorIhSaIhEE6resizeEjh+0x46>
	  insert(end(), __new_size - size(), __x);
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f9eb 	bl	8004aa8 <_ZNSt6vectorIhSaIhEE3endEv>
 80046d2:	4604      	mov	r4, r0
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f938 	bl	800494a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80046da:	4602      	mov	r2, r0
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	1a9a      	subs	r2, r3, r2
 80046e0:	1dfb      	adds	r3, r7, #7
 80046e2:	4621      	mov	r1, r4
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 f9f0 	bl	8004aca <_ZNSt6vectorIhSaIhEE6insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh>
      }
 80046ea:	e013      	b.n	8004714 <_ZNSt6vectorIhSaIhEE6resizeEjh+0x6e>
	else if (__new_size < size())
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 f92c 	bl	800494a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80046f2:	4602      	mov	r2, r0
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	bf8c      	ite	hi
 80046fa:	2301      	movhi	r3, #1
 80046fc:	2300      	movls	r3, #0
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d007      	beq.n	8004714 <_ZNSt6vectorIhSaIhEE6resizeEjh+0x6e>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4413      	add	r3, r2
 800470c:	4619      	mov	r1, r3
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 f9ec 	bl	8004aec <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
      }
 8004714:	bf00      	nop
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	bd90      	pop	{r4, r7, pc}

0800471c <_ZNSt6vectorIhSaIhEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
      { return *(this->_M_impl._M_start + __n); }
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	4413      	add	r3, r2
 800472e:	4618      	mov	r0, r3
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <_ZNSt6vectorIS_IhSaIhEESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	6039      	str	r1, [r7, #0]
      { return *(this->_M_impl._M_start + __n); }
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6819      	ldr	r1, [r3, #0]
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	4613      	mov	r3, r2
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	4413      	add	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	440b      	add	r3, r1
 8004754:	4618      	mov	r0, r3
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
      struct _Vector_impl 
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff fef9 	bl	8004560 <_ZNSaIhED1Ev>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4618      	mov	r0, r3
 8004772:	3708      	adds	r7, #8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      _Vector_base()
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4618      	mov	r0, r3
 8004784:	f000 f9ca 	bl	8004b1c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8004792:	b580      	push	{r7, lr}
 8004794:	b082      	sub	sp, #8
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6819      	ldr	r1, [r3, #0]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80047a2:	461a      	mov	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	1ad3      	subs	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80047aa:	461a      	mov	r2, r3
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f9ca 	bl	8004b46 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		      - this->_M_impl._M_start); }
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff ffd3 	bl	8004760 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	e005      	b.n	80047ca <_ZNSt12_Vector_baseIhSaIhEED1Ev+0x38>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7ff ffcd 	bl	8004760 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 80047c6:	f001 fe65 	bl	8006494 <__cxa_end_cleanup>
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4618      	mov	r0, r3
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80047f4:	68b9      	ldr	r1, [r7, #8]
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 f9b8 	bl	8004b6c <_ZSt8_DestroyIPhEvT_S1_>
    }
 80047fc:	bf00      	nop
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl 
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f000 f9cf 	bl	8004bb0 <_ZNSaISt6vectorIhSaIhEEED1Ev>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4618      	mov	r0, r3
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EEC1Ev>:
      _Vector_base()
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4618      	mov	r0, r3
 8004828:	f000 f9ad 	bl	8004b86 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implC1Ev>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4618      	mov	r0, r3
 8004830:	3708      	adds	r7, #8
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
	...

08004838 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6819      	ldr	r1, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8004848:	461a      	mov	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	1ad3      	subs	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8004850:	109b      	asrs	r3, r3, #2
 8004852:	4a0b      	ldr	r2, [pc, #44]	; (8004880 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EED1Ev+0x48>)
 8004854:	fb02 f303 	mul.w	r3, r2, r3
 8004858:	461a      	mov	r2, r3
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f9b4 	bl	8004bc8 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j>
		      - this->_M_impl._M_start); }
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff ffce 	bl	8004804 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implD1Ev>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	e005      	b.n	8004878 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EED1Ev+0x40>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4618      	mov	r0, r3
 8004870:	f7ff ffc8 	bl	8004804 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implD1Ev>
 8004874:	f001 fe0e 	bl	8006494 <__cxa_end_cleanup>
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	aaaaaaab 	.word	0xaaaaaaab

08004884 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4618      	mov	r0, r3
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800489a:	b580      	push	{r7, lr}
 800489c:	b084      	sub	sp, #16
 800489e:	af00      	add	r7, sp, #0
 80048a0:	60f8      	str	r0, [r7, #12]
 80048a2:	60b9      	str	r1, [r7, #8]
 80048a4:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80048a6:	68b9      	ldr	r1, [r7, #8]
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 f9a0 	bl	8004bee <_ZSt8_DestroyIPSt6vectorIhSaIhEEEvT_S4_>
    }
 80048ae:	bf00      	nop
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80048b6:	b480      	push	{r7}
 80048b8:	b083      	sub	sp, #12
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4618      	mov	r0, r3
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4618      	mov	r0, r3
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 80048e2:	b580      	push	{r7, lr}
 80048e4:	b084      	sub	sp, #16
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 f988 	bl	8004c08 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 80048f8:	68b9      	ldr	r1, [r7, #8]
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 f99b 	bl	8004c36 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	e005      	b.n	8004910 <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_+0x2e>
      : _M_impl(__a)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff ff2a 	bl	8004760 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 800490c:	f001 fdc2 	bl	8006494 <__cxa_end_cleanup>
      { _M_create_storage(__n); }
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <_ZNSt6vectorIhSaIhEE18_M_fill_initializeEjRKh>:
	}

      // Called by the first initialize_dispatch above and by the
      // vector(n,value,a) constructor.
      void
      _M_fill_initialize(size_type __n, const value_type& __value)
 8004918:	b590      	push	{r4, r7, lr}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	60b9      	str	r1, [r7, #8]
 8004922:	607a      	str	r2, [r7, #4]
      {
	this->_M_impl._M_finish =
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff ff51 	bl	80047d2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8004930:	4603      	mov	r3, r0
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68b9      	ldr	r1, [r7, #8]
 8004936:	4620      	mov	r0, r4
 8004938:	f000 f997 	bl	8004c6a <_ZSt24__uninitialized_fill_n_aIPhjhhET_S1_T0_RKT1_RSaIT2_E>
 800493c:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	605a      	str	r2, [r3, #4]
      }
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	bd90      	pop	{r4, r7, pc}

0800494a <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	461a      	mov	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	4618      	mov	r0, r3
 8004960:	370c      	adds	r7, #12
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <_ZN9__gnu_cxx14__alloc_traitsISaIhEE17_S_select_on_copyERKS1_>:
    { __a.destroy(__p); }

    static size_type max_size(const _Alloc& __a)
    { return __a.max_size(); }

    static const _Alloc& _S_select_on_copy(const _Alloc& __a) { return __a; }
 800496a:	b480      	push	{r7}
 800496c:	b083      	sub	sp, #12
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4618      	mov	r0, r3
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4618      	mov	r0, r3
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8004996:	b580      	push	{r7, lr}
 8004998:	b084      	sub	sp, #16
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	f107 020c 	add.w	r2, r7, #12
 80049a8:	f107 0308 	add.w	r3, r7, #8
 80049ac:	4611      	mov	r1, r2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f000 f96c 	bl	8004c8c <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80049be:	b580      	push	{r7, lr}
 80049c0:	b084      	sub	sp, #16
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	f107 020c 	add.w	r2, r7, #12
 80049d0:	f107 0308 	add.w	r3, r7, #8
 80049d4:	4611      	mov	r1, r2
 80049d6:	4618      	mov	r0, r3
 80049d8:	f000 f958 	bl	8004c8c <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	4618      	mov	r0, r3
 80049e0:	3710      	adds	r7, #16
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	60f8      	str	r0, [r7, #12]
 80049ee:	60b9      	str	r1, [r7, #8]
 80049f0:	607a      	str	r2, [r7, #4]
 80049f2:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	68b9      	ldr	r1, [r7, #8]
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f000 f957 	bl	8004cac <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 80049fe:	4603      	mov	r3, r0
 8004a00:	4618      	mov	r0, r3
 8004a02:	3710      	adds	r7, #16
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	461a      	mov	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	109b      	asrs	r3, r3, #2
 8004a1e:	4a04      	ldr	r2, [pc, #16]	; (8004a30 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv+0x28>)
 8004a20:	fb02 f303 	mul.w	r3, r2, r3
 8004a24:	4618      	mov	r0, r3
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	aaaaaaab 	.word	0xaaaaaaab

08004a34 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	1d1a      	adds	r2, r3, #4
 8004a40:	f107 030c 	add.w	r3, r7, #12
 8004a44:	4611      	mov	r1, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 f942 	bl	8004cd0 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEC1ERKS4_>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_>:
      insert(iterator __position, size_type __n, const value_type& __x)
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b084      	sub	sp, #16
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	607a      	str	r2, [r7, #4]
 8004a62:	603b      	str	r3, [r7, #0]
      { _M_fill_insert(__position, __n, __x); }
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 f940 	bl	8004cf0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_>
 8004a70:	bf00      	nop
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8004a78:	b590      	push	{r4, r7, lr}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685c      	ldr	r4, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f7ff fefb 	bl	8004884 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	461a      	mov	r2, r3
 8004a92:	4621      	mov	r1, r4
 8004a94:	6838      	ldr	r0, [r7, #0]
 8004a96:	f7ff ff00 	bl	800489a <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	605a      	str	r2, [r3, #4]
      }
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd90      	pop	{r4, r7, pc}

08004aa8 <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	1d1a      	adds	r2, r3, #4
 8004ab4:	f107 030c 	add.w	r3, r7, #12
 8004ab8:	4611      	mov	r1, r2
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 fabe 	bl	800503c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3710      	adds	r7, #16
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <_ZNSt6vectorIhSaIhEE6insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh>:
      insert(iterator __position, size_type __n, const value_type& __x)
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	60f8      	str	r0, [r7, #12]
 8004ad2:	60b9      	str	r1, [r7, #8]
 8004ad4:	607a      	str	r2, [r7, #4]
 8004ad6:	603b      	str	r3, [r7, #0]
      { _M_fill_insert(__position, __n, __x); }
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 fabc 	bl	800505c <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh>
 8004ae4:	bf00      	nop
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8004aec:	b590      	push	{r4, r7, lr}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685c      	ldr	r4, [r3, #4]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f7ff fe68 	bl	80047d2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8004b02:	4603      	mov	r3, r0
 8004b04:	461a      	mov	r2, r3
 8004b06:	4621      	mov	r1, r4
 8004b08:	6838      	ldr	r0, [r7, #0]
 8004b0a:	f7ff fe6d 	bl	80047e8 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	605a      	str	r2, [r3, #4]
      }
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd90      	pop	{r4, r7, pc}

08004b1c <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl()
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7ff fd0f 	bl	8004548 <_ZNSaIhEC1Ev>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	605a      	str	r2, [r3, #4]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	609a      	str	r2, [r3, #8]
	{ }
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
	if (__p)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	68b9      	ldr	r1, [r7, #8]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fbdc 	bl	800531c <_ZN9__gnu_cxx14__alloc_traitsISaIhEE10deallocateERS1_Phj>
      }
 8004b64:	bf00      	nop
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <_ZSt8_DestroyIPhEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 8004b76:	6839      	ldr	r1, [r7, #0]
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 fbde 	bl	800533a <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 8004b7e:	bf00      	nop
 8004b80:	3708      	adds	r7, #8
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fbde 	bl	8005350 <_ZNSaISt6vectorIhSaIhEEEC1Ev>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	605a      	str	r2, [r3, #4]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	609a      	str	r2, [r3, #8]
	{ }
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3708      	adds	r7, #8
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <_ZNSaISt6vectorIhSaIhEEED1Ev>:
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fbd5 	bl	8005368 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEED1Ev>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3708      	adds	r7, #8
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
	if (__p)
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d005      	beq.n	8004be6 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	68b9      	ldr	r1, [r7, #8]
 8004be0:	4618      	mov	r0, r3
 8004be2:	f000 fbcc 	bl	800537e <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIhSaIhEEEE10deallocateERS4_PS3_j>
      }
 8004be6:	bf00      	nop
 8004be8:	3710      	adds	r7, #16
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <_ZSt8_DestroyIPSt6vectorIhSaIhEEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b082      	sub	sp, #8
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
 8004bf6:	6039      	str	r1, [r7, #0]
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 8004bf8:	6839      	ldr	r1, [r7, #0]
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fbce 	bl	800539c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_>
    }
 8004c00:	bf00      	nop
 8004c02:	3708      	adds	r7, #8
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 8004c12:	6839      	ldr	r1, [r7, #0]
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fbd9 	bl	80053cc <_ZNSaIhEC1ERKS_>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	605a      	str	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	609a      	str	r2, [r3, #8]
	{ }
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
 8004c3e:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8004c40:	6839      	ldr	r1, [r7, #0]
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fbd0 	bl	80053e8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681a      	ldr	r2, [r3, #0]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	441a      	add	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	609a      	str	r2, [r3, #8]
      }
 8004c62:	bf00      	nop
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <_ZSt24__uninitialized_fill_n_aIPhjhhET_S1_T0_RKT1_RSaIT2_E>:
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
	   typename _Tp2>
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
 8004c76:	603b      	str	r3, [r7, #0]
			     const _Tp& __x, allocator<_Tp2>&)
    { return std::uninitialized_fill_n(__first, __n, __x); }
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	68b9      	ldr	r1, [r7, #8]
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 fbc7 	bl	8005410 <_ZSt20uninitialized_fill_nIPhjhET_S1_T0_RKT1_>
 8004c82:	4603      	mov	r3, r0
 8004c84:	4618      	mov	r0, r3
 8004c86:	3710      	adds	r7, #16
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	601a      	str	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
      const bool __assignable = true;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	68b9      	ldr	r1, [r7, #8]
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fbb7 	bl	8005434 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>
 8004cc6:	4603      	mov	r3, r0
    }
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 8004cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cf2:	b091      	sub	sp, #68	; 0x44
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
 8004cfc:	603b      	str	r3, [r7, #0]
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f000 8197 	beq.w	8005034 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x344>
	{
	  if (size_type(this->_M_impl._M_end_of_storage
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	689b      	ldr	r3, [r3, #8]
			- this->_M_impl._M_finish) >= __n)
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	109b      	asrs	r3, r3, #2
 8004d14:	4aba      	ldr	r2, [pc, #744]	; (8005000 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x310>)
 8004d16:	fb02 f303 	mul.w	r3, r2, r3
 8004d1a:	461a      	mov	r2, r3
	  if (size_type(this->_M_impl._M_end_of_storage
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	f0c0 80ae 	bcc.w	8004e80 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x190>
	    {
	      value_type __x_copy = __x;
 8004d24:	f107 0314 	add.w	r3, r7, #20
 8004d28:	6839      	ldr	r1, [r7, #0]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f7ff fc42 	bl	80045b4 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
	      const size_type __elems_after = end() - __position;
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f7ff fe7f 	bl	8004a34 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE3endEv>
 8004d36:	4603      	mov	r3, r0
 8004d38:	623b      	str	r3, [r7, #32]
 8004d3a:	f107 0208 	add.w	r2, r7, #8
 8004d3e:	f107 0320 	add.w	r3, r7, #32
 8004d42:	4611      	mov	r1, r2
 8004d44:	4618      	mov	r0, r3
 8004d46:	f000 fb85 	bl	8005454 <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	63bb      	str	r3, [r7, #56]	; 0x38
	      pointer __old_finish(this->_M_impl._M_finish);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	637b      	str	r3, [r7, #52]	; 0x34
	      if (__elems_after > __n)
 8004d54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d94e      	bls.n	8004dfa <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x10a>
		{
		  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6859      	ldr	r1, [r3, #4]
 8004d60:	687a      	ldr	r2, [r7, #4]
 8004d62:	4613      	mov	r3, r2
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	4413      	add	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	425b      	negs	r3, r3
 8004d6c:	18cc      	adds	r4, r1, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	685d      	ldr	r5, [r3, #4]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	685e      	ldr	r6, [r3, #4]
					      this->_M_impl._M_finish,
					      this->_M_impl._M_finish,
					      _M_get_Tp_allocator());
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7ff fd83 	bl	8004884 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004d7e:	4603      	mov	r3, r0
		  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8004d80:	4632      	mov	r2, r6
 8004d82:	4629      	mov	r1, r5
 8004d84:	4620      	mov	r0, r4
 8004d86:	f000 fb81 	bl	800548c <_ZSt22__uninitialized_move_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>
		  this->_M_impl._M_finish += __n;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6859      	ldr	r1, [r3, #4]
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	4613      	mov	r3, r2
 8004d92:	005b      	lsls	r3, r3, #1
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	18ca      	adds	r2, r1, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	605a      	str	r2, [r3, #4]
		  _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 8004d9e:	f107 0308 	add.w	r3, r7, #8
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 fb84 	bl	80054b0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8004da8:	4603      	mov	r3, r0
 8004daa:	6818      	ldr	r0, [r3, #0]
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	005b      	lsls	r3, r3, #1
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	425b      	negs	r3, r3
 8004db8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dba:	4413      	add	r3, r2
 8004dbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	f000 fb81 	bl	80054c6 <_ZSt13copy_backwardIPSt6vectorIhSaIhEES3_ET0_T_S5_S4_>
					  __old_finish - __n, __old_finish);
		  std::fill(__position.base(), __position.base() + __n,
 8004dc4:	f107 0308 	add.w	r3, r7, #8
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fb71 	bl	80054b0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	681c      	ldr	r4, [r3, #0]
 8004dd2:	f107 0308 	add.w	r3, r7, #8
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 fb6a 	bl	80054b0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	6819      	ldr	r1, [r3, #0]
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	4413      	add	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	440b      	add	r3, r1
 8004dec:	f107 0214 	add.w	r2, r7, #20
 8004df0:	4619      	mov	r1, r3
 8004df2:	4620      	mov	r0, r4
 8004df4:	f000 fb7f 	bl	80054f6 <_ZSt4fillIPSt6vectorIhSaIhEES2_EvT_S4_RKT0_>
 8004df8:	e03c      	b.n	8004e74 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x184>
			    __x_copy);
		}
	      else
		{
		  this->_M_impl._M_finish =
		    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	685c      	ldr	r4, [r3, #4]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e02:	1ad5      	subs	r5, r2, r3
						  __n - __elems_after,
						  __x_copy,
						  _M_get_Tp_allocator());
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7ff fd3c 	bl	8004884 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004e0c:	4603      	mov	r3, r0
		    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 8004e0e:	f107 0214 	add.w	r2, r7, #20
 8004e12:	4629      	mov	r1, r5
 8004e14:	4620      	mov	r0, r4
 8004e16:	f000 fb85 	bl	8005524 <_ZSt24__uninitialized_fill_n_aIPSt6vectorIhSaIhEEjS2_S2_ET_S4_T0_RKT1_RSaIT2_E>
 8004e1a:	4602      	mov	r2, r0
		  this->_M_impl._M_finish =
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	605a      	str	r2, [r3, #4]
		  std::__uninitialized_move_a(__position.base(), __old_finish,
 8004e20:	f107 0308 	add.w	r3, r7, #8
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 fb43 	bl	80054b0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	681c      	ldr	r4, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	685d      	ldr	r5, [r3, #4]
					      this->_M_impl._M_finish,
					      _M_get_Tp_allocator());
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff fd25 	bl	8004884 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004e3a:	4603      	mov	r3, r0
		  std::__uninitialized_move_a(__position.base(), __old_finish,
 8004e3c:	462a      	mov	r2, r5
 8004e3e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e40:	4620      	mov	r0, r4
 8004e42:	f000 fb23 	bl	800548c <_ZSt22__uninitialized_move_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>
		  this->_M_impl._M_finish += __elems_after;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6859      	ldr	r1, [r3, #4]
 8004e4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	005b      	lsls	r3, r3, #1
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	18ca      	adds	r2, r1, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	605a      	str	r2, [r3, #4]
		  std::fill(__position.base(), __old_finish, __x_copy);
 8004e5a:	f107 0308 	add.w	r3, r7, #8
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fb26 	bl	80054b0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8004e64:	4603      	mov	r3, r0
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f107 0214 	add.w	r2, r7, #20
 8004e6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fb41 	bl	80054f6 <_ZSt4fillIPSt6vectorIhSaIhEES2_EvT_S4_RKT0_>
	      value_type __x_copy = __x;
 8004e74:	f107 0314 	add.w	r3, r7, #20
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7ff fb14 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_finish;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 8004e7e:	e0d9      	b.n	8005034 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x344>
		_M_check_len(__n, "vector::_M_fill_insert");
 8004e80:	4a60      	ldr	r2, [pc, #384]	; (8005004 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x314>)
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 fb5e 	bl	8005546 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	633b      	str	r3, [r7, #48]	; 0x30
	      const size_type __elems_before = __position - begin();
 8004e8e:	68f8      	ldr	r0, [r7, #12]
 8004e90:	f000 fba0 	bl	80055d4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE5beginEv>
 8004e94:	4603      	mov	r3, r0
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24
 8004e98:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004e9c:	f107 0308 	add.w	r3, r7, #8
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fad6 	bl	8005454 <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	      pointer __new_start(this->_M_allocate(__len));
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fb9f 	bl	80055f4 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE11_M_allocateEj>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	62bb      	str	r3, [r7, #40]	; 0x28
	      pointer __new_finish(__new_start);
 8004eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 8004ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	005b      	lsls	r3, r3, #1
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	461a      	mov	r2, r3
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	189c      	adds	r4, r3, r2
						_M_get_Tp_allocator());
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7ff fcd7 	bl	8004884 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004ed6:	4603      	mov	r3, r0
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	6879      	ldr	r1, [r7, #4]
 8004edc:	4620      	mov	r0, r4
 8004ede:	f000 fb21 	bl	8005524 <_ZSt24__uninitialized_fill_n_aIPSt6vectorIhSaIhEEjS2_S2_ET_S4_T0_RKT1_RSaIT2_E>
		  __new_finish = pointer();
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
		    (this->_M_impl._M_start, __position.base(),
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681c      	ldr	r4, [r3, #0]
 8004eea:	f107 0308 	add.w	r3, r7, #8
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fade 	bl	80054b0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	681d      	ldr	r5, [r3, #0]
		     __new_start, _M_get_Tp_allocator());
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4618      	mov	r0, r3
 8004efc:	f7ff fcc2 	bl	8004884 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004f00:	4603      	mov	r3, r0
		  __new_finish
 8004f02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f04:	4629      	mov	r1, r5
 8004f06:	4620      	mov	r0, r4
 8004f08:	f000 fb88 	bl	800561c <_ZSt34__uninitialized_move_if_noexcept_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
		  __new_finish += __n;
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	005b      	lsls	r3, r3, #1
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f1e:	4413      	add	r3, r2
 8004f20:	63fb      	str	r3, [r7, #60]	; 0x3c
		    (__position.base(), this->_M_impl._M_finish,
 8004f22:	f107 0308 	add.w	r3, r7, #8
 8004f26:	4618      	mov	r0, r3
 8004f28:	f000 fac2 	bl	80054b0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	681c      	ldr	r4, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	685d      	ldr	r5, [r3, #4]
		     __new_finish, _M_get_Tp_allocator());
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7ff fca4 	bl	8004884 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004f3c:	4603      	mov	r3, r0
		  __new_finish
 8004f3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f40:	4629      	mov	r1, r5
 8004f42:	4620      	mov	r0, r4
 8004f44:	f000 fb6a 	bl	800561c <_ZSt34__uninitialized_move_if_noexcept_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681c      	ldr	r4, [r3, #0]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff fc94 	bl	8004884 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004f5c:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004f5e:	461a      	mov	r2, r3
 8004f60:	4629      	mov	r1, r5
 8004f62:	4620      	mov	r0, r4
 8004f64:	f7ff fc99 	bl	800489a <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 8004f72:	461a      	mov	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8004f7a:	109b      	asrs	r3, r3, #2
 8004f7c:	4a20      	ldr	r2, [pc, #128]	; (8005000 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x310>)
 8004f7e:	fb02 f303 	mul.w	r3, r2, r3
 8004f82:	461a      	mov	r2, r3
 8004f84:	f7ff fe20 	bl	8004bc8 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j>
	      this->_M_impl._M_start = __new_start;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f8c:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_finish;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f92:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8004f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f96:	4613      	mov	r3, r2
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	4413      	add	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa2:	441a      	add	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	609a      	str	r2, [r3, #8]
    }
 8004fa8:	e044      	b.n	8005034 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x344>
	      value_type __x_copy = __x;
 8004faa:	f107 0314 	add.w	r3, r7, #20
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7ff fa79 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8004fb4:	f001 fa6e 	bl	8006494 <__cxa_end_cleanup>
 8004fb8:	4603      	mov	r3, r0
	      __catch(...)
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f001 f9a7 	bl	800630e <__cxa_begin_catch>
		  if (!__new_finish)
 8004fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d120      	bne.n	8005008 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x318>
		    std::_Destroy(__new_start + __elems_before,
 8004fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fc8:	4613      	mov	r3, r2
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	189c      	adds	r4, r3, r2
				  __new_start + __elems_before + __n,
 8004fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	441a      	add	r2, r3
 8004fdc:	4613      	mov	r3, r2
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	4413      	add	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	461a      	mov	r2, r3
		    std::_Destroy(__new_start + __elems_before,
 8004fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe8:	189d      	adds	r5, r3, r2
				  _M_get_Tp_allocator());
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f7ff fc49 	bl	8004884 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004ff2:	4603      	mov	r3, r0
		    std::_Destroy(__new_start + __elems_before,
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	4629      	mov	r1, r5
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	f7ff fc4e 	bl	800489a <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
 8004ffe:	e00d      	b.n	800501c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x32c>
 8005000:	aaaaaaab 	.word	0xaaaaaaab
 8005004:	08007a78 	.word	0x08007a78
				  _M_get_Tp_allocator());
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff fc3a 	bl	8004884 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8005010:	4603      	mov	r3, r0
		    std::_Destroy(__new_start, __new_finish,
 8005012:	461a      	mov	r2, r3
 8005014:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005016:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005018:	f7ff fc3f 	bl	800489a <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
		  _M_deallocate(__new_start, __len);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005020:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005022:	4618      	mov	r0, r3
 8005024:	f7ff fdd0 	bl	8004bc8 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j>
		  __throw_exception_again;
 8005028:	f001 f9f4 	bl	8006414 <__cxa_rethrow>
	      __catch(...)
 800502c:	f001 f999 	bl	8006362 <__cxa_end_catch>
 8005030:	f001 fa30 	bl	8006494 <__cxa_end_cleanup>
    }
 8005034:	bf00      	nop
 8005036:	3744      	adds	r7, #68	; 0x44
 8005038:	46bd      	mov	sp, r7
 800503a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800503c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4618      	mov	r0, r3
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr

0800505c <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh>:
    vector<_Tp, _Alloc>::
 800505c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800505e:	b08f      	sub	sp, #60	; 0x3c
 8005060:	af00      	add	r7, sp, #0
 8005062:	60f8      	str	r0, [r7, #12]
 8005064:	60b9      	str	r1, [r7, #8]
 8005066:	607a      	str	r2, [r7, #4]
 8005068:	603b      	str	r3, [r7, #0]
      if (__n != 0)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 814f 	beq.w	8005310 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x2b4>
	  if (size_type(this->_M_impl._M_end_of_storage
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	689b      	ldr	r3, [r3, #8]
			- this->_M_impl._M_finish) >= __n)
 8005076:	461a      	mov	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	461a      	mov	r2, r3
	  if (size_type(this->_M_impl._M_end_of_storage
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	429a      	cmp	r2, r3
 8005084:	f0c0 8092 	bcc.w	80051ac <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x150>
	      value_type __x_copy = __x;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	75fb      	strb	r3, [r7, #23]
	      const size_type __elems_after = end() - __position;
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f7ff fd0a 	bl	8004aa8 <_ZNSt6vectorIhSaIhEE3endEv>
 8005094:	4603      	mov	r3, r0
 8005096:	61bb      	str	r3, [r7, #24]
 8005098:	f107 0208 	add.w	r2, r7, #8
 800509c:	f107 0318 	add.w	r3, r7, #24
 80050a0:	4611      	mov	r1, r2
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 facc 	bl	8005640 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80050a8:	4603      	mov	r3, r0
 80050aa:	633b      	str	r3, [r7, #48]	; 0x30
	      pointer __old_finish(this->_M_impl._M_finish);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	      if (__elems_after > __n)
 80050b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d93e      	bls.n	8005138 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0xdc>
		  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	425b      	negs	r3, r3
 80050c2:	18d4      	adds	r4, r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	685d      	ldr	r5, [r3, #4]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	685e      	ldr	r6, [r3, #4]
					      _M_get_Tp_allocator());
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff fb7f 	bl	80047d2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80050d4:	4603      	mov	r3, r0
		  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 80050d6:	4632      	mov	r2, r6
 80050d8:	4629      	mov	r1, r5
 80050da:	4620      	mov	r0, r4
 80050dc:	f000 fac5 	bl	800566a <_ZSt22__uninitialized_move_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
		  this->_M_impl._M_finish += __n;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	441a      	add	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	605a      	str	r2, [r3, #4]
		  _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 80050ec:	f107 0308 	add.w	r3, r7, #8
 80050f0:	4618      	mov	r0, r3
 80050f2:	f000 facc 	bl	800568e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 80050f6:	4603      	mov	r3, r0
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	425b      	negs	r3, r3
 80050fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005100:	4413      	add	r3, r2
 8005102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005104:	4619      	mov	r1, r3
 8005106:	f000 facd 	bl	80056a4 <_ZSt13copy_backwardIPhS0_ET0_T_S2_S1_>
		  std::fill(__position.base(), __position.base() + __n,
 800510a:	f107 0308 	add.w	r3, r7, #8
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fabd 	bl	800568e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8005114:	4603      	mov	r3, r0
 8005116:	681c      	ldr	r4, [r3, #0]
 8005118:	f107 0308 	add.w	r3, r7, #8
 800511c:	4618      	mov	r0, r3
 800511e:	f000 fab6 	bl	800568e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8005122:	4603      	mov	r3, r0
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4413      	add	r3, r2
 800512a:	f107 0217 	add.w	r2, r7, #23
 800512e:	4619      	mov	r1, r3
 8005130:	4620      	mov	r0, r4
 8005132:	f000 facf 	bl	80056d4 <_ZSt4fillIPhhEvT_S1_RKT0_>
    }
 8005136:	e0eb      	b.n	8005310 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x2b4>
		    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	685c      	ldr	r4, [r3, #4]
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	1ad5      	subs	r5, r2, r3
						  _M_get_Tp_allocator());
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff fb44 	bl	80047d2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800514a:	4603      	mov	r3, r0
		    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 800514c:	f107 0217 	add.w	r2, r7, #23
 8005150:	4629      	mov	r1, r5
 8005152:	4620      	mov	r0, r4
 8005154:	f7ff fd89 	bl	8004c6a <_ZSt24__uninitialized_fill_n_aIPhjhhET_S1_T0_RKT1_RSaIT2_E>
 8005158:	4602      	mov	r2, r0
		  this->_M_impl._M_finish =
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	605a      	str	r2, [r3, #4]
		  std::__uninitialized_move_a(__position.base(), __old_finish,
 800515e:	f107 0308 	add.w	r3, r7, #8
 8005162:	4618      	mov	r0, r3
 8005164:	f000 fa93 	bl	800568e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8005168:	4603      	mov	r3, r0
 800516a:	681c      	ldr	r4, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	685d      	ldr	r5, [r3, #4]
					      _M_get_Tp_allocator());
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	4618      	mov	r0, r3
 8005174:	f7ff fb2d 	bl	80047d2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8005178:	4603      	mov	r3, r0
		  std::__uninitialized_move_a(__position.base(), __old_finish,
 800517a:	462a      	mov	r2, r5
 800517c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800517e:	4620      	mov	r0, r4
 8005180:	f000 fa73 	bl	800566a <_ZSt22__uninitialized_move_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
		  this->_M_impl._M_finish += __elems_after;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518a:	441a      	add	r2, r3
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	605a      	str	r2, [r3, #4]
		  std::fill(__position.base(), __old_finish, __x_copy);
 8005190:	f107 0308 	add.w	r3, r7, #8
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fa7a 	bl	800568e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800519a:	4603      	mov	r3, r0
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f107 0217 	add.w	r2, r7, #23
 80051a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051a4:	4618      	mov	r0, r3
 80051a6:	f000 fa95 	bl	80056d4 <_ZSt4fillIPhhEvT_S1_RKT0_>
    }
 80051aa:	e0b1      	b.n	8005310 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x2b4>
		_M_check_len(__n, "vector::_M_fill_insert");
 80051ac:	4a5a      	ldr	r2, [pc, #360]	; (8005318 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x2bc>)
 80051ae:	6879      	ldr	r1, [r7, #4]
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f000 faa6 	bl	8005702 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 80051b6:	4603      	mov	r3, r0
 80051b8:	62bb      	str	r3, [r7, #40]	; 0x28
	      const size_type __elems_before = __position - begin();
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 fae8 	bl	8005790 <_ZNSt6vectorIhSaIhEE5beginEv>
 80051c0:	4603      	mov	r3, r0
 80051c2:	61fb      	str	r3, [r7, #28]
 80051c4:	f107 021c 	add.w	r2, r7, #28
 80051c8:	f107 0308 	add.w	r3, r7, #8
 80051cc:	4611      	mov	r1, r2
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fa36 	bl	8005640 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 80051d4:	4603      	mov	r3, r0
 80051d6:	627b      	str	r3, [r7, #36]	; 0x24
	      pointer __new_start(this->_M_allocate(__len));
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 f903 	bl	80053e8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 80051e2:	4603      	mov	r3, r0
 80051e4:	623b      	str	r3, [r7, #32]
	      pointer __new_finish(__new_start);
 80051e6:	6a3b      	ldr	r3, [r7, #32]
 80051e8:	637b      	str	r3, [r7, #52]	; 0x34
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 80051ea:	6a3a      	ldr	r2, [r7, #32]
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	18d4      	adds	r4, r2, r3
						_M_get_Tp_allocator());
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff faed 	bl	80047d2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80051f8:	4603      	mov	r3, r0
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	6879      	ldr	r1, [r7, #4]
 80051fe:	4620      	mov	r0, r4
 8005200:	f7ff fd33 	bl	8004c6a <_ZSt24__uninitialized_fill_n_aIPhjhhET_S1_T0_RKT1_RSaIT2_E>
		  __new_finish = pointer();
 8005204:	2300      	movs	r3, #0
 8005206:	637b      	str	r3, [r7, #52]	; 0x34
		    (this->_M_impl._M_start, __position.base(),
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681c      	ldr	r4, [r3, #0]
 800520c:	f107 0308 	add.w	r3, r7, #8
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fa3c 	bl	800568e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8005216:	4603      	mov	r3, r0
 8005218:	681d      	ldr	r5, [r3, #0]
		     __new_start, _M_get_Tp_allocator());
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4618      	mov	r0, r3
 800521e:	f7ff fad8 	bl	80047d2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8005222:	4603      	mov	r3, r0
		  __new_finish
 8005224:	6a3a      	ldr	r2, [r7, #32]
 8005226:	4629      	mov	r1, r5
 8005228:	4620      	mov	r0, r4
 800522a:	f000 fac1 	bl	80057b0 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 800522e:	4603      	mov	r3, r0
 8005230:	637b      	str	r3, [r7, #52]	; 0x34
		  __new_finish += __n;
 8005232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4413      	add	r3, r2
 8005238:	637b      	str	r3, [r7, #52]	; 0x34
		    (__position.base(), this->_M_impl._M_finish,
 800523a:	f107 0308 	add.w	r3, r7, #8
 800523e:	4618      	mov	r0, r3
 8005240:	f000 fa25 	bl	800568e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8005244:	4603      	mov	r3, r0
 8005246:	681c      	ldr	r4, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	685d      	ldr	r5, [r3, #4]
		     __new_finish, _M_get_Tp_allocator());
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff fabf 	bl	80047d2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8005254:	4603      	mov	r3, r0
		  __new_finish
 8005256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005258:	4629      	mov	r1, r5
 800525a:	4620      	mov	r0, r4
 800525c:	f000 faa8 	bl	80057b0 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 8005260:	4603      	mov	r3, r0
 8005262:	637b      	str	r3, [r7, #52]	; 0x34
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681c      	ldr	r4, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4618      	mov	r0, r3
 8005270:	f7ff faaf 	bl	80047d2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8005274:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005276:	461a      	mov	r2, r3
 8005278:	4629      	mov	r1, r5
 800527a:	4620      	mov	r0, r4
 800527c:	f7ff fab4 	bl	80047e8 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8005280:	68f8      	ldr	r0, [r7, #12]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 800528a:	461a      	mov	r2, r3
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8005292:	461a      	mov	r2, r3
 8005294:	f7ff fc57 	bl	8004b46 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __new_start;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6a3a      	ldr	r2, [r7, #32]
 800529c:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_finish;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052a2:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 80052a4:	6a3a      	ldr	r2, [r7, #32]
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	441a      	add	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	609a      	str	r2, [r3, #8]
    }
 80052ae:	e02f      	b.n	8005310 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x2b4>
 80052b0:	4603      	mov	r3, r0
	      __catch(...)
 80052b2:	4618      	mov	r0, r3
 80052b4:	f001 f82b 	bl	800630e <__cxa_begin_catch>
		  if (!__new_finish)
 80052b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d112      	bne.n	80052e4 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x288>
		    std::_Destroy(__new_start + __elems_before,
 80052be:	6a3a      	ldr	r2, [r7, #32]
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	18d4      	adds	r4, r2, r3
				  __new_start + __elems_before + __n,
 80052c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4413      	add	r3, r2
		    std::_Destroy(__new_start + __elems_before,
 80052ca:	6a3a      	ldr	r2, [r7, #32]
 80052cc:	18d5      	adds	r5, r2, r3
				  _M_get_Tp_allocator());
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7ff fa7e 	bl	80047d2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80052d6:	4603      	mov	r3, r0
		    std::_Destroy(__new_start + __elems_before,
 80052d8:	461a      	mov	r2, r3
 80052da:	4629      	mov	r1, r5
 80052dc:	4620      	mov	r0, r4
 80052de:	f7ff fa83 	bl	80047e8 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
 80052e2:	e009      	b.n	80052f8 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x29c>
				  _M_get_Tp_allocator());
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7ff fa73 	bl	80047d2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80052ec:	4603      	mov	r3, r0
		    std::_Destroy(__new_start, __new_finish,
 80052ee:	461a      	mov	r2, r3
 80052f0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80052f2:	6a38      	ldr	r0, [r7, #32]
 80052f4:	f7ff fa78 	bl	80047e8 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
		  _M_deallocate(__new_start, __len);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052fc:	6a39      	ldr	r1, [r7, #32]
 80052fe:	4618      	mov	r0, r3
 8005300:	f7ff fc21 	bl	8004b46 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		  __throw_exception_again;
 8005304:	f001 f886 	bl	8006414 <__cxa_rethrow>
	      __catch(...)
 8005308:	f001 f82b 	bl	8006362 <__cxa_end_catch>
 800530c:	f001 f8c2 	bl	8006494 <__cxa_end_cleanup>
    }
 8005310:	bf00      	nop
 8005312:	373c      	adds	r7, #60	; 0x3c
 8005314:	46bd      	mov	sp, r7
 8005316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005318:	08007a78 	.word	0x08007a78

0800531c <_ZN9__gnu_cxx14__alloc_traitsISaIhEE10deallocateERS1_Phj>:
    static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 800531c:	b580      	push	{r7, lr}
 800531e:	b084      	sub	sp, #16
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
    { __a.deallocate(__p, __n); }
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	68b9      	ldr	r1, [r7, #8]
 800532c:	68f8      	ldr	r0, [r7, #12]
 800532e:	f000 fa51 	bl	80057d4 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 8005332:	bf00      	nop
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800533a:	b480      	push	{r7}
 800533c:	b083      	sub	sp, #12
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	6039      	str	r1, [r7, #0]
 8005344:	bf00      	nop
 8005346:	370c      	adds	r7, #12
 8005348:	46bd      	mov	sp, r7
 800534a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534e:	4770      	bx	lr

08005350 <_ZNSaISt6vectorIhSaIhEEEC1Ev>:
      allocator() throw() { }
 8005350:	b580      	push	{r7, lr}
 8005352:	b082      	sub	sp, #8
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 fa48 	bl	80057ee <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEEC1Ev>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4618      	mov	r0, r3
 8005362:	3708      	adds	r7, #8
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}

08005368 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEED1Ev>:
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4618      	mov	r0, r3
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr

0800537e <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIhSaIhEEEE10deallocateERS4_PS3_j>:
    static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 800537e:	b580      	push	{r7, lr}
 8005380:	b084      	sub	sp, #16
 8005382:	af00      	add	r7, sp, #0
 8005384:	60f8      	str	r0, [r7, #12]
 8005386:	60b9      	str	r1, [r7, #8]
 8005388:	607a      	str	r2, [r7, #4]
    { __a.deallocate(__p, __n); }
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	68b9      	ldr	r1, [r7, #8]
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f000 fa38 	bl	8005804 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE10deallocateEPS3_j>
 8005394:	bf00      	nop
 8005396:	3710      	adds	r7, #16
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d00a      	beq.n	80053c4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fa35 	bl	800581e <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>
 80053b4:	4603      	mov	r3, r0
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 fa3c 	bl	8005834 <_ZSt8_DestroyISt6vectorIhSaIhEEEvPT_>
	  for (; __first != __last; ++__first)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	330c      	adds	r3, #12
 80053c0:	607b      	str	r3, [r7, #4]
 80053c2:	e7f0      	b.n	80053a6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_+0xa>
	}
 80053c4:	bf00      	nop
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) throw()
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b082      	sub	sp, #8
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80053d6:	6839      	ldr	r1, [r7, #0]
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fa36 	bl	800584a <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4618      	mov	r0, r3
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d006      	beq.n	8005406 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6839      	ldr	r1, [r7, #0]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fa30 	bl	8005862 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE8allocateERS1_j>
 8005402:	4603      	mov	r3, r0
 8005404:	e000      	b.n	8005408 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8005406:	2300      	movs	r3, #0
      }
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <_ZSt20uninitialized_fill_nIPhjhET_S1_T0_RKT1_>:
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
      const bool __assignable = true;
 800541c:	2301      	movs	r3, #1
 800541e:	75fb      	strb	r3, [r7, #23]
	__uninit_fill_n(__first, __n, __x);
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	68b9      	ldr	r1, [r7, #8]
 8005424:	68f8      	ldr	r0, [r7, #12]
 8005426:	f000 fa2b 	bl	8005880 <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPhjhEET_S3_T0_RKT1_>
 800542a:	4603      	mov	r3, r0
    }
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	60f8      	str	r0, [r7, #12]
 800543c:	60b9      	str	r1, [r7, #8]
 800543e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	68b9      	ldr	r1, [r7, #8]
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 fa2b 	bl	80058a0 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 800544a:	4603      	mov	r3, r0
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005454:	b590      	push	{r4, r7, lr}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f826 	bl	80054b0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8005464:	4603      	mov	r3, r0
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	461c      	mov	r4, r3
 800546a:	6838      	ldr	r0, [r7, #0]
 800546c:	f000 f820 	bl	80054b0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8005470:	4603      	mov	r3, r0
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	1ae3      	subs	r3, r4, r3
 8005476:	109b      	asrs	r3, r3, #2
 8005478:	4a03      	ldr	r2, [pc, #12]	; (8005488 <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x34>)
 800547a:	fb02 f303 	mul.w	r3, r2, r3
 800547e:	4618      	mov	r0, r3
 8005480:	370c      	adds	r7, #12
 8005482:	46bd      	mov	sp, r7
 8005484:	bd90      	pop	{r4, r7, pc}
 8005486:	bf00      	nop
 8005488:	aaaaaaab 	.word	0xaaaaaaab

0800548c <_ZSt22__uninitialized_move_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]
					 __result, __alloc);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	68b9      	ldr	r1, [r7, #8]
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 fa15 	bl	80058d0 <_ZSt22__uninitialized_copy_aIPSt6vectorIhSaIhEES3_S2_ET0_T_S5_S4_RSaIT1_E>
 80054a6:	4603      	mov	r3, r0
    }
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4618      	mov	r0, r3
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr

080054c6 <_ZSt13copy_backwardIPSt6vectorIhSaIhEES3_ET0_T_S5_S4_>:
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80054c6:	b590      	push	{r4, r7, lr}
 80054c8:	b085      	sub	sp, #20
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	60f8      	str	r0, [r7, #12]
 80054ce:	60b9      	str	r1, [r7, #8]
 80054d0:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 fa0d 	bl	80058f2 <_ZSt12__miter_baseIPSt6vectorIhSaIhEEET_S4_>
 80054d8:	4604      	mov	r4, r0
 80054da:	68b8      	ldr	r0, [r7, #8]
 80054dc:	f000 fa09 	bl	80058f2 <_ZSt12__miter_baseIPSt6vectorIhSaIhEEET_S4_>
 80054e0:	4603      	mov	r3, r0
	       __result));
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	4619      	mov	r1, r3
 80054e6:	4620      	mov	r0, r4
 80054e8:	f000 fa0e 	bl	8005908 <_ZSt23__copy_move_backward_a2ILb0EPSt6vectorIhSaIhEES3_ET1_T0_S5_S4_>
 80054ec:	4603      	mov	r3, r0
    }
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd90      	pop	{r4, r7, pc}

080054f6 <_ZSt4fillIPSt6vectorIhSaIhEES2_EvT_S4_RKT0_>:
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 80054f6:	b590      	push	{r4, r7, lr}
 80054f8:	b085      	sub	sp, #20
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	60f8      	str	r0, [r7, #12]
 80054fe:	60b9      	str	r1, [r7, #8]
 8005500:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	f000 fa1c 	bl	8005940 <_ZSt12__niter_baseIPSt6vectorIhSaIhEEET_S4_>
 8005508:	4604      	mov	r4, r0
 800550a:	68b8      	ldr	r0, [r7, #8]
 800550c:	f000 fa18 	bl	8005940 <_ZSt12__niter_baseIPSt6vectorIhSaIhEEET_S4_>
 8005510:	4603      	mov	r3, r0
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	4619      	mov	r1, r3
 8005516:	4620      	mov	r0, r4
 8005518:	f000 fa1d 	bl	8005956 <_ZSt8__fill_aIPSt6vectorIhSaIhEES2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SB_RKS7_>
		    __value);
    }
 800551c:	bf00      	nop
 800551e:	3714      	adds	r7, #20
 8005520:	46bd      	mov	sp, r7
 8005522:	bd90      	pop	{r4, r7, pc}

08005524 <_ZSt24__uninitialized_fill_n_aIPSt6vectorIhSaIhEEjS2_S2_ET_S4_T0_RKT1_RSaIT2_E>:
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	60f8      	str	r0, [r7, #12]
 800552c:	60b9      	str	r1, [r7, #8]
 800552e:	607a      	str	r2, [r7, #4]
 8005530:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_fill_n(__first, __n, __x); }
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	68b9      	ldr	r1, [r7, #8]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 fa23 	bl	8005982 <_ZSt20uninitialized_fill_nIPSt6vectorIhSaIhEEjS2_ET_S4_T0_RKT1_>
 800553c:	4603      	mov	r3, r0
 800553e:	4618      	mov	r0, r3
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8005546:	b590      	push	{r4, r7, lr}
 8005548:	b087      	sub	sp, #28
 800554a:	af00      	add	r7, sp, #0
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	60b9      	str	r1, [r7, #8]
 8005550:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8005552:	68f8      	ldr	r0, [r7, #12]
 8005554:	f000 fa27 	bl	80059a6 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE8max_sizeEv>
 8005558:	4604      	mov	r4, r0
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f7ff fa54 	bl	8004a08 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 8005560:	4603      	mov	r3, r0
 8005562:	1ae2      	subs	r2, r4, r3
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	429a      	cmp	r2, r3
 8005568:	bf34      	ite	cc
 800556a:	2301      	movcc	r3, #1
 800556c:	2300      	movcs	r3, #0
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f001 fae4 	bl	8006b42 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f7ff fa44 	bl	8004a08 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 8005580:	4604      	mov	r4, r0
 8005582:	68f8      	ldr	r0, [r7, #12]
 8005584:	f7ff fa40 	bl	8004a08 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 8005588:	4603      	mov	r3, r0
 800558a:	613b      	str	r3, [r7, #16]
 800558c:	f107 0208 	add.w	r2, r7, #8
 8005590:	f107 0310 	add.w	r3, r7, #16
 8005594:	4611      	mov	r1, r2
 8005596:	4618      	mov	r0, r3
 8005598:	f000 fa16 	bl	80059c8 <_ZSt3maxIjERKT_S2_S2_>
 800559c:	4603      	mov	r3, r0
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4423      	add	r3, r4
 80055a2:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f7ff fa2f 	bl	8004a08 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 80055aa:	4602      	mov	r2, r0
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d806      	bhi.n	80055c0 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc+0x7a>
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 f9f7 	bl	80059a6 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE8max_sizeEv>
 80055b8:	4602      	mov	r2, r0
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d204      	bcs.n	80055ca <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc+0x84>
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 f9f0 	bl	80059a6 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE8max_sizeEv>
 80055c6:	4603      	mov	r3, r0
 80055c8:	e000      	b.n	80055cc <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc+0x86>
 80055ca:	697b      	ldr	r3, [r7, #20]
      }
 80055cc:	4618      	mov	r0, r3
 80055ce:	371c      	adds	r7, #28
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd90      	pop	{r4, r7, pc}

080055d4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	f107 030c 	add.w	r3, r7, #12
 80055e2:	4611      	mov	r1, r2
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7ff fb73 	bl	8004cd0 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEC1ERKS4_>
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d006      	beq.n	8005612 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE11_M_allocateEj+0x1e>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6839      	ldr	r1, [r7, #0]
 8005608:	4618      	mov	r0, r3
 800560a:	f000 f9f1 	bl	80059f0 <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIhSaIhEEEE8allocateERS4_j>
 800560e:	4603      	mov	r3, r0
 8005610:	e000      	b.n	8005614 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE11_M_allocateEj+0x20>
 8005612:	2300      	movs	r3, #0
      }
 8005614:	4618      	mov	r0, r3
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <_ZSt34__uninitialized_move_if_noexcept_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	60f8      	str	r0, [r7, #12]
 8005624:	60b9      	str	r1, [r7, #8]
 8005626:	607a      	str	r2, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	68b9      	ldr	r1, [r7, #8]
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 f94d 	bl	80058d0 <_ZSt22__uninitialized_copy_aIPSt6vectorIhSaIhEES3_S2_ET0_T_S5_S4_RSaIT1_E>
 8005636:	4603      	mov	r3, r0
    }
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005640:	b590      	push	{r4, r7, lr}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f81f 	bl	800568e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8005650:	4603      	mov	r3, r0
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	461c      	mov	r4, r3
 8005656:	6838      	ldr	r0, [r7, #0]
 8005658:	f000 f819 	bl	800568e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800565c:	4603      	mov	r3, r0
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	1ae3      	subs	r3, r4, r3
 8005662:	4618      	mov	r0, r3
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	bd90      	pop	{r4, r7, pc}

0800566a <_ZSt22__uninitialized_move_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 800566a:	b580      	push	{r7, lr}
 800566c:	b084      	sub	sp, #16
 800566e:	af00      	add	r7, sp, #0
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	607a      	str	r2, [r7, #4]
 8005676:	603b      	str	r3, [r7, #0]
					 __result, __alloc);
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	68b9      	ldr	r1, [r7, #8]
 800567e:	68f8      	ldr	r0, [r7, #12]
 8005680:	f000 f9c5 	bl	8005a0e <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
 8005684:	4603      	mov	r3, r0
    }
 8005686:	4618      	mov	r0, r3
 8005688:	3710      	adds	r7, #16
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800568e:	b480      	push	{r7}
 8005690:	b083      	sub	sp, #12
 8005692:	af00      	add	r7, sp, #0
 8005694:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4618      	mov	r0, r3
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <_ZSt13copy_backwardIPhS0_ET0_T_S2_S1_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80056a4:	b590      	push	{r4, r7, lr}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 f9bd 	bl	8005a30 <_ZSt12__miter_baseIPhET_S1_>
 80056b6:	4604      	mov	r4, r0
 80056b8:	68b8      	ldr	r0, [r7, #8]
 80056ba:	f000 f9b9 	bl	8005a30 <_ZSt12__miter_baseIPhET_S1_>
 80056be:	4603      	mov	r3, r0
	       __result));
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	4619      	mov	r1, r3
 80056c4:	4620      	mov	r0, r4
 80056c6:	f000 f9be 	bl	8005a46 <_ZSt23__copy_move_backward_a2ILb0EPhS0_ET1_T0_S2_S1_>
 80056ca:	4603      	mov	r3, r0
    }
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd90      	pop	{r4, r7, pc}

080056d4 <_ZSt4fillIPhhEvT_S1_RKT0_>:
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 80056d4:	b590      	push	{r4, r7, lr}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
 80056e0:	68f8      	ldr	r0, [r7, #12]
 80056e2:	f000 f9cc 	bl	8005a7e <_ZSt12__niter_baseIPhET_S1_>
 80056e6:	4604      	mov	r4, r0
 80056e8:	68b8      	ldr	r0, [r7, #8]
 80056ea:	f000 f9c8 	bl	8005a7e <_ZSt12__niter_baseIPhET_S1_>
 80056ee:	4603      	mov	r3, r0
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	4619      	mov	r1, r3
 80056f4:	4620      	mov	r0, r4
 80056f6:	f000 f9cd 	bl	8005a94 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
    }
 80056fa:	bf00      	nop
 80056fc:	3714      	adds	r7, #20
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd90      	pop	{r4, r7, pc}

08005702 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8005702:	b590      	push	{r4, r7, lr}
 8005704:	b087      	sub	sp, #28
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f000 f9da 	bl	8005ac8 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8005714:	4604      	mov	r4, r0
 8005716:	68f8      	ldr	r0, [r7, #12]
 8005718:	f7ff f917 	bl	800494a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800571c:	4603      	mov	r3, r0
 800571e:	1ae2      	subs	r2, r4, r3
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	429a      	cmp	r2, r3
 8005724:	bf34      	ite	cc
 8005726:	2301      	movcc	r3, #1
 8005728:	2300      	movcs	r3, #0
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d002      	beq.n	8005736 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	f001 fa06 	bl	8006b42 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f7ff f907 	bl	800494a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800573c:	4604      	mov	r4, r0
 800573e:	68f8      	ldr	r0, [r7, #12]
 8005740:	f7ff f903 	bl	800494a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8005744:	4603      	mov	r3, r0
 8005746:	613b      	str	r3, [r7, #16]
 8005748:	f107 0208 	add.w	r2, r7, #8
 800574c:	f107 0310 	add.w	r3, r7, #16
 8005750:	4611      	mov	r1, r2
 8005752:	4618      	mov	r0, r3
 8005754:	f000 f938 	bl	80059c8 <_ZSt3maxIjERKT_S2_S2_>
 8005758:	4603      	mov	r3, r0
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4423      	add	r3, r4
 800575e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f7ff f8f2 	bl	800494a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8005766:	4602      	mov	r2, r0
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	429a      	cmp	r2, r3
 800576c:	d806      	bhi.n	800577c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f000 f9aa 	bl	8005ac8 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8005774:	4602      	mov	r2, r0
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	429a      	cmp	r2, r3
 800577a:	d204      	bcs.n	8005786 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 f9a3 	bl	8005ac8 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8005782:	4603      	mov	r3, r0
 8005784:	e000      	b.n	8005788 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 8005786:	697b      	ldr	r3, [r7, #20]
      }
 8005788:	4618      	mov	r0, r3
 800578a:	371c      	adds	r7, #28
 800578c:	46bd      	mov	sp, r7
 800578e:	bd90      	pop	{r4, r7, pc}

08005790 <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	f107 030c 	add.w	r3, r7, #12
 800579e:	4611      	mov	r1, r2
 80057a0:	4618      	mov	r0, r3
 80057a2:	f7ff fc4b 	bl	800503c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
 80057bc:	603b      	str	r3, [r7, #0]
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	68b9      	ldr	r1, [r7, #8]
 80057c4:	68f8      	ldr	r0, [r7, #12]
 80057c6:	f000 f922 	bl	8005a0e <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
 80057ca:	4603      	mov	r3, r0
    }
 80057cc:	4618      	mov	r0, r3
 80057ce:	3710      	adds	r7, #16
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b084      	sub	sp, #16
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
      { ::operator delete(__p); }
 80057e0:	68b8      	ldr	r0, [r7, #8]
 80057e2:	f000 fd70 	bl	80062c6 <_ZdlPv>
 80057e6:	bf00      	nop
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4618      	mov	r0, r3
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE10deallocateEPS3_j>:
      deallocate(pointer __p, size_type)
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
      { ::operator delete(__p); }
 8005810:	68b8      	ldr	r0, [r7, #8]
 8005812:	f000 fd58 	bl	80062c6 <_ZdlPv>
 8005816:	bf00      	nop
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
    {
      return reinterpret_cast<_Tp*>
	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
 8005826:	687b      	ldr	r3, [r7, #4]
    }
 8005828:	4618      	mov	r0, r3
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <_ZSt8_DestroyISt6vectorIhSaIhEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f7fe fe32 	bl	80044a6 <_ZNSt6vectorIhSaIhEED1Ev>
 8005842:	bf00      	nop
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	6039      	str	r1, [r7, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE8allocateERS1_j>:
    allocate(_Alloc& __a, size_type __n)
 8005862:	b580      	push	{r7, lr}
 8005864:	b082      	sub	sp, #8
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
 800586a:	6039      	str	r1, [r7, #0]
    { return __a.allocate(__n); }
 800586c:	2200      	movs	r2, #0
 800586e:	6839      	ldr	r1, [r7, #0]
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f93a 	bl	8005aea <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 8005876:	4603      	mov	r3, r0
 8005878:	4618      	mov	r0, r3
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPhjhEET_S3_T0_RKT1_>:
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
        { return std::fill_n(__first, __n, __x); }
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	68b9      	ldr	r1, [r7, #8]
 8005890:	68f8      	ldr	r0, [r7, #12]
 8005892:	f000 f946 	bl	8005b22 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 8005896:	4603      	mov	r3, r0
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 80058a0:	b590      	push	{r4, r7, lr}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 f94c 	bl	8005b4a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 80058b2:	4604      	mov	r4, r0
 80058b4:	68b8      	ldr	r0, [r7, #8]
 80058b6:	f000 f948 	bl	8005b4a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 80058ba:	4603      	mov	r3, r0
	       __result));
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	4619      	mov	r1, r3
 80058c0:	4620      	mov	r0, r4
 80058c2:	f000 f94d 	bl	8005b60 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>
 80058c6:	4603      	mov	r3, r0
    }
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd90      	pop	{r4, r7, pc}

080058d0 <_ZSt22__uninitialized_copy_aIPSt6vectorIhSaIhEES3_S2_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
 80058dc:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f000 f958 	bl	8005b98 <_ZSt18uninitialized_copyIPSt6vectorIhSaIhEES3_ET0_T_S5_S4_>
 80058e8:	4603      	mov	r3, r0
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <_ZSt12__miter_baseIPSt6vectorIhSaIhEEET_S4_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4618      	mov	r0, r3
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <_ZSt23__copy_move_backward_a2ILb0EPSt6vectorIhSaIhEES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8005908:	b5b0      	push	{r4, r5, r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
		  (std::__niter_base(__first), std::__niter_base(__last),
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 f813 	bl	8005940 <_ZSt12__niter_baseIPSt6vectorIhSaIhEEET_S4_>
 800591a:	4604      	mov	r4, r0
 800591c:	68b8      	ldr	r0, [r7, #8]
 800591e:	f000 f80f 	bl	8005940 <_ZSt12__niter_baseIPSt6vectorIhSaIhEEET_S4_>
 8005922:	4605      	mov	r5, r0
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f80b 	bl	8005940 <_ZSt12__niter_baseIPSt6vectorIhSaIhEEET_S4_>
 800592a:	4603      	mov	r3, r0
		   std::__niter_base(__result)));
 800592c:	461a      	mov	r2, r3
 800592e:	4629      	mov	r1, r5
 8005930:	4620      	mov	r0, r4
 8005932:	f000 f943 	bl	8005bbc <_ZSt22__copy_move_backward_aILb0EPSt6vectorIhSaIhEES3_ET1_T0_S5_S4_>
 8005936:	4603      	mov	r3, r0
    }
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bdb0      	pop	{r4, r5, r7, pc}

08005940 <_ZSt12__niter_baseIPSt6vectorIhSaIhEEET_S4_>:
    __niter_base(_Iterator __it)
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4618      	mov	r0, r3
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <_ZSt8__fill_aIPSt6vectorIhSaIhEES2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SB_RKS7_>:
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	60f8      	str	r0, [r7, #12]
 800595e:	60b9      	str	r1, [r7, #8]
 8005960:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	429a      	cmp	r2, r3
 8005968:	d007      	beq.n	800597a <_ZSt8__fill_aIPSt6vectorIhSaIhEES2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SB_RKS7_+0x24>
	*__first = __value;
 800596a:	6879      	ldr	r1, [r7, #4]
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 f937 	bl	8005be0 <_ZNSt6vectorIhSaIhEEaSERKS1_>
      for (; __first != __last; ++__first)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	330c      	adds	r3, #12
 8005976:	60fb      	str	r3, [r7, #12]
 8005978:	e7f3      	b.n	8005962 <_ZSt8__fill_aIPSt6vectorIhSaIhEES2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SB_RKS7_+0xc>
    }
 800597a:	bf00      	nop
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <_ZSt20uninitialized_fill_nIPSt6vectorIhSaIhEEjS2_ET_S4_T0_RKT1_>:
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 8005982:	b580      	push	{r7, lr}
 8005984:	b086      	sub	sp, #24
 8005986:	af00      	add	r7, sp, #0
 8005988:	60f8      	str	r0, [r7, #12]
 800598a:	60b9      	str	r1, [r7, #8]
 800598c:	607a      	str	r2, [r7, #4]
      const bool __assignable = true;
 800598e:	2301      	movs	r3, #1
 8005990:	75fb      	strb	r3, [r7, #23]
	__uninit_fill_n(__first, __n, __x);
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	68b9      	ldr	r1, [r7, #8]
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 f9cb 	bl	8005d32 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIhSaIhEEjS4_EET_S6_T0_RKT1_>
 800599c:	4603      	mov	r3, r0
    }
 800599e:	4618      	mov	r0, r3
 80059a0:	3718      	adds	r7, #24
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b082      	sub	sp, #8
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 f9f8 	bl	8005da6 <_ZNKSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 80059b6:	4603      	mov	r3, r0
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 f9e8 	bl	8005d8e <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIhSaIhEEEE8max_sizeERKS4_>
 80059be:	4603      	mov	r3, r0
 80059c0:	4618      	mov	r0, r3
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	429a      	cmp	r2, r3
 80059dc:	d201      	bcs.n	80059e2 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	e000      	b.n	80059e4 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80059e2:	687b      	ldr	r3, [r7, #4]
    }
 80059e4:	4618      	mov	r0, r3
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIhSaIhEEEE8allocateERS4_j>:
    allocate(_Alloc& __a, size_type __n)
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
    { return __a.allocate(__n); }
 80059fa:	2200      	movs	r2, #0
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f9dc 	bl	8005dbc <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8allocateEjPKv>
 8005a04:	4603      	mov	r3, r0
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}

08005a0e <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005a0e:	b580      	push	{r7, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	607a      	str	r2, [r7, #4]
 8005a1a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	68b9      	ldr	r1, [r7, #8]
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 f9ec 	bl	8005dfe <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>
 8005a26:	4603      	mov	r3, r0
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <_ZSt12__miter_baseIPhET_S1_>:
    __miter_base(_Iterator __it)
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <_ZSt23__copy_move_backward_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8005a46:	b5b0      	push	{r4, r5, r7, lr}
 8005a48:	b084      	sub	sp, #16
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	60f8      	str	r0, [r7, #12]
 8005a4e:	60b9      	str	r1, [r7, #8]
 8005a50:	607a      	str	r2, [r7, #4]
		  (std::__niter_base(__first), std::__niter_base(__last),
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 f813 	bl	8005a7e <_ZSt12__niter_baseIPhET_S1_>
 8005a58:	4604      	mov	r4, r0
 8005a5a:	68b8      	ldr	r0, [r7, #8]
 8005a5c:	f000 f80f 	bl	8005a7e <_ZSt12__niter_baseIPhET_S1_>
 8005a60:	4605      	mov	r5, r0
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f80b 	bl	8005a7e <_ZSt12__niter_baseIPhET_S1_>
 8005a68:	4603      	mov	r3, r0
		   std::__niter_base(__result)));
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	4629      	mov	r1, r5
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f000 f9d7 	bl	8005e22 <_ZSt22__copy_move_backward_aILb0EPhS0_ET1_T0_S2_S1_>
 8005a74:	4603      	mov	r3, r0
    }
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bdb0      	pop	{r4, r5, r7, pc}

08005a7e <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8005a7e:	b480      	push	{r7}
 8005a80:	b083      	sub	sp, #12
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b086      	sub	sp, #24
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	613b      	str	r3, [r7, #16]
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d005      	beq.n	8005ac0 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	4619      	mov	r1, r3
 8005aba:	68f8      	ldr	r0, [r7, #12]
 8005abc:	f001 fb5f 	bl	800717e <memset>
    }
 8005ac0:	bf00      	nop
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fe ff54 	bl	8004980 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 f9b3 	bl	8005e46 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE8max_sizeERKS1_>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = 0)
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b084      	sub	sp, #16
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	60f8      	str	r0, [r7, #12]
 8005af2:	60b9      	str	r1, [r7, #8]
 8005af4:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 f9b1 	bl	8005e5e <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8005afc:	4602      	mov	r2, r0
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	bf34      	ite	cc
 8005b04:	2301      	movcc	r3, #1
 8005b06:	2300      	movcs	r3, #0
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005b0e:	f001 f815 	bl	8006b3c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005b12:	68b8      	ldr	r0, [r7, #8]
 8005b14:	f000 fc6d 	bl	80063f2 <_Znwj>
 8005b18:	4603      	mov	r3, r0
      }
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b084      	sub	sp, #16
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	60f8      	str	r0, [r7, #12]
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f7ff ffa5 	bl	8005a7e <_ZSt12__niter_baseIPhET_S1_>
 8005b34:	4603      	mov	r3, r0
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	68b9      	ldr	r1, [r7, #8]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 f99b 	bl	8005e76 <_ZSt10__fill_n_aIjhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_>
 8005b40:	4603      	mov	r3, r0
    }
 8005b42:	4618      	mov	r0, r3
 8005b44:	3710      	adds	r7, #16
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}

08005b4a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>:
    __miter_base(_Iterator __it)
 8005b4a:	b480      	push	{r7}
 8005b4c:	b083      	sub	sp, #12
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	4618      	mov	r0, r3
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005b60:	b5b0      	push	{r4, r5, r7, lr}
 8005b62:	b084      	sub	sp, #16
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8005b6c:	68f8      	ldr	r0, [r7, #12]
 8005b6e:	f000 f997 	bl	8005ea0 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8005b72:	4604      	mov	r4, r0
 8005b74:	68b8      	ldr	r0, [r7, #8]
 8005b76:	f000 f993 	bl	8005ea0 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8005b7a:	4605      	mov	r5, r0
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f7ff ff7e 	bl	8005a7e <_ZSt12__niter_baseIPhET_S1_>
 8005b82:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8005b84:	461a      	mov	r2, r3
 8005b86:	4629      	mov	r1, r5
 8005b88:	4620      	mov	r0, r4
 8005b8a:	f000 f997 	bl	8005ebc <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>
 8005b8e:	4603      	mov	r3, r0
    }
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bdb0      	pop	{r4, r5, r7, pc}

08005b98 <_ZSt18uninitialized_copyIPSt6vectorIhSaIhEES3_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
      const bool __assignable = true;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	68b9      	ldr	r1, [r7, #8]
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f997 	bl	8005ee0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIhSaIhEES5_EET0_T_S7_S6_>
 8005bb2:	4603      	mov	r3, r0
    }
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3718      	adds	r7, #24
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <_ZSt22__copy_move_backward_aILb0EPSt6vectorIhSaIhEES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
			     && __are_same<_ValueType1, _ValueType2>::__value);
 8005bc8:	2300      	movs	r3, #0
 8005bca:	75fb      	strb	r3, [r7, #23]
								 __result);
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f9b5 	bl	8005f40 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt6vectorIhSaIhEES6_EET0_T_S8_S7_>
 8005bd6:	4603      	mov	r3, r0
    }
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3718      	adds	r7, #24
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <_ZNSt6vectorIhSaIhEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 8005be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	f000 809a 	beq.w	8005d28 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x148>
	  const size_type __xlen = __x.size();
 8005bf4:	6838      	ldr	r0, [r7, #0]
 8005bf6:	f7fe fea8 	bl	800494a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8005bfa:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f9c5 	bl	8005f8c <_ZNKSt6vectorIhSaIhEE8capacityEv>
 8005c02:	4602      	mov	r2, r0
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	bf34      	ite	cc
 8005c0a:	2301      	movcc	r3, #1
 8005c0c:	2300      	movcs	r3, #0
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d032      	beq.n	8005c7a <_ZNSt6vectorIhSaIhEEaSERKS1_+0x9a>
						   __x.end());
 8005c14:	6838      	ldr	r0, [r7, #0]
 8005c16:	f7fe febe 	bl	8004996 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	6838      	ldr	r0, [r7, #0]
 8005c1e:	f7fe fece 	bl	80049be <_ZNKSt6vectorIhSaIhEE3endEv>
 8005c22:	4603      	mov	r3, r0
 8005c24:	4622      	mov	r2, r4
 8005c26:	68f9      	ldr	r1, [r7, #12]
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 f9bf 	bl	8005fac <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	60bb      	str	r3, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681c      	ldr	r4, [r3, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7fe fdc8 	bl	80047d2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8005c42:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005c44:	461a      	mov	r2, r3
 8005c46:	4629      	mov	r1, r5
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f7fe fdcd 	bl	80047e8 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 8005c58:	461a      	mov	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8005c60:	461a      	mov	r2, r3
 8005c62:	f7fe ff70 	bl	8004b46 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __tmp;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68ba      	ldr	r2, [r7, #8]
 8005c6a:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	441a      	add	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	609a      	str	r2, [r3, #8]
 8005c78:	e050      	b.n	8005d1c <_ZNSt6vectorIhSaIhEEaSERKS1_+0x13c>
	  else if (size() >= __xlen)
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f7fe fe65 	bl	800494a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8005c80:	4602      	mov	r2, r0
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	bf2c      	ite	cs
 8005c88:	2301      	movcs	r3, #1
 8005c8a:	2300      	movcc	r3, #0
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d020      	beq.n	8005cd4 <_ZNSt6vectorIhSaIhEEaSERKS1_+0xf4>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8005c92:	6838      	ldr	r0, [r7, #0]
 8005c94:	f7fe fe7f 	bl	8004996 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8005c98:	4604      	mov	r4, r0
 8005c9a:	6838      	ldr	r0, [r7, #0]
 8005c9c:	f7fe fe8f 	bl	80049be <_ZNKSt6vectorIhSaIhEE3endEv>
 8005ca0:	4605      	mov	r5, r0
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7ff fd74 	bl	8005790 <_ZNSt6vectorIhSaIhEE5beginEv>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	461a      	mov	r2, r3
 8005cac:	4629      	mov	r1, r5
 8005cae:	4620      	mov	r0, r4
 8005cb0:	f000 f9aa 	bl	8006008 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fe fef6 	bl	8004aa8 <_ZNSt6vectorIhSaIhEE3endEv>
 8005cbc:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fe fd86 	bl	80047d2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8005cc6:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8005cc8:	461a      	mov	r2, r3
 8005cca:	4629      	mov	r1, r5
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f000 f9b3 	bl	8006038 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>
 8005cd2:	e023      	b.n	8005d1c <_ZNSt6vectorIhSaIhEEaSERKS1_+0x13c>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681d      	ldr	r5, [r3, #0]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681c      	ldr	r4, [r3, #0]
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7fe fe34 	bl	800494a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	18e1      	adds	r1, r4, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	461a      	mov	r2, r3
 8005cec:	4628      	mov	r0, r5
 8005cee:	f000 f9b1 	bl	8006054 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	681c      	ldr	r4, [r3, #0]
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fe fe27 	bl	800494a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fe fd61 	bl	80047d2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8005d10:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8005d12:	4632      	mov	r2, r6
 8005d14:	4629      	mov	r1, r5
 8005d16:	4620      	mov	r0, r4
 8005d18:	f7ff fe79 	bl	8005a0e <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	441a      	add	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	605a      	str	r2, [r3, #4]
      return *this;
 8005d28:	687b      	ldr	r3, [r7, #4]
    }
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d32 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIhSaIhEEjS4_EET_S6_T0_RKT1_>:
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b086      	sub	sp, #24
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __first;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	617b      	str	r3, [r7, #20]
	      for (; __n > 0; --__n, ++__cur)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00e      	beq.n	8005d66 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIhSaIhEEjS4_EET_S6_T0_RKT1_+0x34>
		std::_Construct(std::__addressof(*__cur), __x);
 8005d48:	6978      	ldr	r0, [r7, #20]
 8005d4a:	f7ff fd68 	bl	800581e <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	6879      	ldr	r1, [r7, #4]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 f996 	bl	8006084 <_ZSt10_ConstructISt6vectorIhSaIhEES2_EvPT_RKT0_>
	      for (; __n > 0; --__n, ++__cur)
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	60bb      	str	r3, [r7, #8]
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	330c      	adds	r3, #12
 8005d62:	617b      	str	r3, [r7, #20]
 8005d64:	e7ed      	b.n	8005d42 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIhSaIhEEjS4_EET_S6_T0_RKT1_+0x10>
	      return __cur;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	e00d      	b.n	8005d86 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIhSaIhEEjS4_EET_S6_T0_RKT1_+0x54>
 8005d6a:	4603      	mov	r3, r0
	  __catch(...)
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 face 	bl	800630e <__cxa_begin_catch>
	      std::_Destroy(__first, __cur);
 8005d72:	6979      	ldr	r1, [r7, #20]
 8005d74:	68f8      	ldr	r0, [r7, #12]
 8005d76:	f7fe ff3a 	bl	8004bee <_ZSt8_DestroyIPSt6vectorIhSaIhEEEvT_S4_>
	      __throw_exception_again;
 8005d7a:	f000 fb4b 	bl	8006414 <__cxa_rethrow>
	  __catch(...)
 8005d7e:	f000 faf0 	bl	8006362 <__cxa_end_catch>
 8005d82:	f000 fb87 	bl	8006494 <__cxa_end_cleanup>
	}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3718      	adds	r7, #24
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIhSaIhEEEE8max_sizeERKS4_>:
    static size_type max_size(const _Alloc& __a)
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b082      	sub	sp, #8
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
    { return __a.max_size(); }
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f990 	bl	80060bc <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <_ZNKSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4618      	mov	r0, r3
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = 0)
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005dc8:	68f8      	ldr	r0, [r7, #12]
 8005dca:	f000 f977 	bl	80060bc <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	bf34      	ite	cc
 8005dd6:	2301      	movcc	r3, #1
 8005dd8:	2300      	movcs	r3, #0
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005de0:	f000 feac 	bl	8006b3c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	4613      	mov	r3, r2
 8005de8:	005b      	lsls	r3, r3, #1
 8005dea:	4413      	add	r3, r2
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	4618      	mov	r0, r3
 8005df0:	f000 faff 	bl	80063f2 <_Znwj>
 8005df4:	4603      	mov	r3, r0
      }
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}

08005dfe <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b086      	sub	sp, #24
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	60f8      	str	r0, [r7, #12]
 8005e06:	60b9      	str	r1, [r7, #8]
 8005e08:	607a      	str	r2, [r7, #4]
      const bool __assignable = true;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	68b9      	ldr	r1, [r7, #8]
 8005e12:	68f8      	ldr	r0, [r7, #12]
 8005e14:	f000 f960 	bl	80060d8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>
 8005e18:	4603      	mov	r3, r0
    }
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <_ZSt22__copy_move_backward_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 8005e22:	b580      	push	{r7, lr}
 8005e24:	b086      	sub	sp, #24
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	60f8      	str	r0, [r7, #12]
 8005e2a:	60b9      	str	r1, [r7, #8]
 8005e2c:	607a      	str	r2, [r7, #4]
			     && __are_same<_ValueType1, _ValueType2>::__value);
 8005e2e:	2301      	movs	r3, #1
 8005e30:	75fb      	strb	r3, [r7, #23]
								 __result);
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	68b9      	ldr	r1, [r7, #8]
 8005e36:	68f8      	ldr	r0, [r7, #12]
 8005e38:	f000 f95e 	bl	80060f8 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIhEEPT_PKS3_S6_S4_>
 8005e3c:	4603      	mov	r3, r0
    }
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3718      	adds	r7, #24
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE8max_sizeERKS1_>:
    static size_type max_size(const _Alloc& __a)
 8005e46:	b580      	push	{r7, lr}
 8005e48:	b082      	sub	sp, #8
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
    { return __a.max_size(); }
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f805 	bl	8005e5e <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8005e54:	4603      	mov	r3, r0
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8005e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <_ZSt10__fill_n_aIjhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_>:
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	607a      	str	r2, [r7, #4]
      std::__fill_a(__first, __first + __n, __c);
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4413      	add	r3, r2
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f7ff fe01 	bl	8005a94 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
      return __first + __n;
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4413      	add	r3, r2
    }
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8005ea8:	1d3b      	adds	r3, r7, #4
 8005eaa:	4618      	mov	r0, r3
 8005eac:	f000 f942 	bl	8006134 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3708      	adds	r7, #8
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 8005ec8:	2301      	movs	r3, #1
 8005eca:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	68b9      	ldr	r1, [r7, #8]
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 f93a 	bl	800614a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8005ed6:	4603      	mov	r3, r0
    }
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3718      	adds	r7, #24
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIhSaIhEES5_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d00e      	beq.n	8005f16 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIhSaIhEES5_EET0_T_S7_S6_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 8005ef8:	6978      	ldr	r0, [r7, #20]
 8005efa:	f7ff fc90 	bl	800581e <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>
 8005efe:	4603      	mov	r3, r0
 8005f00:	68f9      	ldr	r1, [r7, #12]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 f8be 	bl	8006084 <_ZSt10_ConstructISt6vectorIhSaIhEES2_EvPT_RKT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	330c      	adds	r3, #12
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	330c      	adds	r3, #12
 8005f12:	617b      	str	r3, [r7, #20]
 8005f14:	e7ec      	b.n	8005ef0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIhSaIhEES5_EET0_T_S7_S6_+0x10>
	      return __cur;
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	e00d      	b.n	8005f36 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIhSaIhEES5_EET0_T_S7_S6_+0x56>
 8005f1a:	4603      	mov	r3, r0
	  __catch(...)
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 f9f6 	bl	800630e <__cxa_begin_catch>
	      std::_Destroy(__result, __cur);
 8005f22:	6979      	ldr	r1, [r7, #20]
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f7fe fe62 	bl	8004bee <_ZSt8_DestroyIPSt6vectorIhSaIhEEEvT_S4_>
	      __throw_exception_again;
 8005f2a:	f000 fa73 	bl	8006414 <__cxa_rethrow>
	  __catch(...)
 8005f2e:	f000 fa18 	bl	8006362 <__cxa_end_catch>
 8005f32:	f000 faaf 	bl	8006494 <__cxa_end_cleanup>
	}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
	...

08005f40 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt6vectorIhSaIhEES6_EET0_T_S8_S7_>:
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b086      	sub	sp, #24
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	60b9      	str	r1, [r7, #8]
 8005f4a:	607a      	str	r2, [r7, #4]
	  for (__n = __last - __first; __n > 0; --__n)
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	109b      	asrs	r3, r3, #2
 8005f54:	4a0c      	ldr	r2, [pc, #48]	; (8005f88 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt6vectorIhSaIhEES6_EET0_T_S8_S7_+0x48>)
 8005f56:	fb02 f303 	mul.w	r3, r2, r3
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	dd0d      	ble.n	8005f7e <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt6vectorIhSaIhEES6_EET0_T_S8_S7_+0x3e>
	    *--__result = *--__last;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	3b0c      	subs	r3, #12
 8005f66:	607b      	str	r3, [r7, #4]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	3b0c      	subs	r3, #12
 8005f6c:	60bb      	str	r3, [r7, #8]
 8005f6e:	68b9      	ldr	r1, [r7, #8]
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff fe35 	bl	8005be0 <_ZNSt6vectorIhSaIhEEaSERKS1_>
	  for (__n = __last - __first; __n > 0; --__n)
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	617b      	str	r3, [r7, #20]
 8005f7c:	e7ee      	b.n	8005f5c <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt6vectorIhSaIhEES6_EET0_T_S8_S7_+0x1c>
	  return __result;
 8005f7e:	687b      	ldr	r3, [r7, #4]
	}
 8005f80:	4618      	mov	r0, r3
 8005f82:	3718      	adds	r7, #24
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	aaaaaaab 	.word	0xaaaaaaab

08005f8c <_ZNKSt6vectorIhSaIhEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	689b      	ldr	r3, [r3, #8]
			 - this->_M_impl._M_start); }
 8005f98:	461a      	mov	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>:
        _M_allocate_and_copy(size_type __n,
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	68b9      	ldr	r1, [r7, #8]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff fa12 	bl	80053e8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	617b      	str	r3, [r7, #20]
					  _M_get_Tp_allocator());
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fe fc01 	bl	80047d2 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8005fd0:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	6839      	ldr	r1, [r7, #0]
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7fe fd05 	bl	80049e6 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
	      return __result;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	e00f      	b.n	8006000 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_+0x54>
 8005fe0:	4603      	mov	r3, r0
	  __catch(...)
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f000 f993 	bl	800630e <__cxa_begin_catch>
	      _M_deallocate(__result, __n);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	6979      	ldr	r1, [r7, #20]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fe fda9 	bl	8004b46 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      __throw_exception_again;
 8005ff4:	f000 fa0e 	bl	8006414 <__cxa_rethrow>
	  __catch(...)
 8005ff8:	f000 f9b3 	bl	8006362 <__cxa_end_catch>
 8005ffc:	f000 fa4a 	bl	8006494 <__cxa_end_cleanup>
	}
 8006000:	4618      	mov	r0, r3
 8006002:	3718      	adds	r7, #24
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 8006008:	b590      	push	{r4, r7, lr}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f7ff fd98 	bl	8005b4a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 800601a:	4604      	mov	r4, r0
 800601c:	68b8      	ldr	r0, [r7, #8]
 800601e:	f7ff fd94 	bl	8005b4a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8006022:	4603      	mov	r3, r0
	       __result));
 8006024:	687a      	ldr	r2, [r7, #4]
 8006026:	4619      	mov	r1, r3
 8006028:	4620      	mov	r0, r4
 800602a:	f000 f8a8 	bl	800617e <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>
 800602e:	4603      	mov	r3, r0
    }
 8006030:	4618      	mov	r0, r3
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	bd90      	pop	{r4, r7, pc}

08006038 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8006044:	68b9      	ldr	r1, [r7, #8]
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 f8bf 	bl	80061ca <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>
    }
 800604c:	bf00      	nop
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 8006054:	b590      	push	{r4, r7, lr}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f7ff fce5 	bl	8005a30 <_ZSt12__miter_baseIPhET_S1_>
 8006066:	4604      	mov	r4, r0
 8006068:	68b8      	ldr	r0, [r7, #8]
 800606a:	f7ff fce1 	bl	8005a30 <_ZSt12__miter_baseIPhET_S1_>
 800606e:	4603      	mov	r3, r0
	       __result));
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	4619      	mov	r1, r3
 8006074:	4620      	mov	r0, r4
 8006076:	f000 f8b5 	bl	80061e4 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 800607a:	4603      	mov	r3, r0
    }
 800607c:	4618      	mov	r0, r3
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	bd90      	pop	{r4, r7, pc}

08006084 <_ZSt10_ConstructISt6vectorIhSaIhEES2_EvPT_RKT0_>:
    _Construct(_T1* __p, const _T2& __value)
 8006084:	b5b0      	push	{r4, r5, r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
      ::new(static_cast<void*>(__p)) _T1(__value);
 800608e:	687d      	ldr	r5, [r7, #4]
 8006090:	4629      	mov	r1, r5
 8006092:	200c      	movs	r0, #12
 8006094:	f7fd fe20 	bl	8003cd8 <_ZnwjPv>
 8006098:	4604      	mov	r4, r0
 800609a:	2c00      	cmp	r4, #0
 800609c:	d00a      	beq.n	80060b4 <_ZSt10_ConstructISt6vectorIhSaIhEES2_EvPT_RKT0_+0x30>
 800609e:	6839      	ldr	r1, [r7, #0]
 80060a0:	4620      	mov	r0, r4
 80060a2:	f7fe fa87 	bl	80045b4 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
    }
 80060a6:	e005      	b.n	80060b4 <_ZSt10_ConstructISt6vectorIhSaIhEES2_EvPT_RKT0_+0x30>
      ::new(static_cast<void*>(__p)) _T1(__value);
 80060a8:	4629      	mov	r1, r5
 80060aa:	4620      	mov	r0, r4
 80060ac:	f7fd fe20 	bl	8003cf0 <_ZdlPvS_>
 80060b0:	f000 f9f0 	bl	8006494 <__cxa_end_cleanup>
    }
 80060b4:	bf00      	nop
 80060b6:	3708      	adds	r7, #8
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bdb0      	pop	{r4, r5, r7, pc}

080060bc <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 80060c4:	4b03      	ldr	r3, [pc, #12]	; (80060d4 <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv+0x18>)
 80060c6:	4618      	mov	r0, r3
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	15555555 	.word	0x15555555

080060d8 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	68b9      	ldr	r1, [r7, #8]
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f7ff ffb3 	bl	8006054 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 80060ee:	4603      	mov	r3, r0
 80060f0:	4618      	mov	r0, r3
 80060f2:	3710      	adds	r7, #16
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIhEEPT_PKS3_S6_S4_>:
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d008      	beq.n	8006124 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIhEEPT_PKS3_S6_S4_+0x2c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	425b      	negs	r3, r3
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	4413      	add	r3, r2
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	68f9      	ldr	r1, [r7, #12]
 800611e:	4618      	mov	r0, r3
 8006120:	f001 f813 	bl	800714a <memmove>
	  return __result - _Num;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	425b      	negs	r3, r3
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	4413      	add	r3, r2
	}
 800612c:	4618      	mov	r0, r3
 800612e:	3718      	adds	r7, #24
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800614a:	b580      	push	{r7, lr}
 800614c:	b086      	sub	sp, #24
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	1ad3      	subs	r3, r2, r3
 800615c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d005      	beq.n	8006170 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	461a      	mov	r2, r3
 8006168:	68f9      	ldr	r1, [r7, #12]
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 ffed 	bl	800714a <memmove>
	  return __result + _Num;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	4413      	add	r3, r2
	}
 8006176:	4618      	mov	r0, r3
 8006178:	3718      	adds	r7, #24
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800617e:	b5b0      	push	{r4, r5, r7, lr}
 8006180:	b086      	sub	sp, #24
 8006182:	af00      	add	r7, sp, #0
 8006184:	60f8      	str	r0, [r7, #12]
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f7ff fe88 	bl	8005ea0 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8006190:	4604      	mov	r4, r0
 8006192:	68b8      	ldr	r0, [r7, #8]
 8006194:	f7ff fe84 	bl	8005ea0 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8006198:	4605      	mov	r5, r0
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f83e 	bl	800621c <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80061a0:	4603      	mov	r3, r0
 80061a2:	461a      	mov	r2, r3
 80061a4:	4629      	mov	r1, r5
 80061a6:	4620      	mov	r0, r4
 80061a8:	f7ff fe88 	bl	8005ebc <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>
 80061ac:	4603      	mov	r3, r0
 80061ae:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 80061b0:	f107 0214 	add.w	r2, r7, #20
 80061b4:	f107 0310 	add.w	r3, r7, #16
 80061b8:	4611      	mov	r1, r2
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fe ff3e 	bl	800503c <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 80061c0:	693b      	ldr	r3, [r7, #16]
    }
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bdb0      	pop	{r4, r5, r7, pc}

080061ca <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b082      	sub	sp, #8
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
 80061d2:	6039      	str	r1, [r7, #0]
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f82e 	bl	8006238 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>
    }
 80061dc:	bf00      	nop
 80061de:	3708      	adds	r7, #8
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80061e4:	b5b0      	push	{r4, r5, r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f7ff fc44 	bl	8005a7e <_ZSt12__niter_baseIPhET_S1_>
 80061f6:	4604      	mov	r4, r0
 80061f8:	68b8      	ldr	r0, [r7, #8]
 80061fa:	f7ff fc40 	bl	8005a7e <_ZSt12__niter_baseIPhET_S1_>
 80061fe:	4605      	mov	r5, r0
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f7ff fc3c 	bl	8005a7e <_ZSt12__niter_baseIPhET_S1_>
 8006206:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8006208:	461a      	mov	r2, r3
 800620a:	4629      	mov	r1, r5
 800620c:	4620      	mov	r0, r4
 800620e:	f000 f81e 	bl	800624e <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 8006212:	4603      	mov	r3, r0
    }
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bdb0      	pop	{r4, r5, r7, pc}

0800621c <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800621c:	b580      	push	{r7, lr}
 800621e:	b082      	sub	sp, #8
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8006224:	1d3b      	adds	r3, r7, #4
 8006226:	4618      	mov	r0, r3
 8006228:	f7ff fa31 	bl	800568e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800622c:	4603      	mov	r3, r0
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4618      	mov	r0, r3
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}

08006238 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800624e:	b580      	push	{r7, lr}
 8006250:	b086      	sub	sp, #24
 8006252:	af00      	add	r7, sp, #0
 8006254:	60f8      	str	r0, [r7, #12]
 8006256:	60b9      	str	r1, [r7, #8]
 8006258:	607a      	str	r2, [r7, #4]
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 800625a:	2301      	movs	r3, #1
 800625c:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	68b9      	ldr	r1, [r7, #8]
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f7ff ff71 	bl	800614a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8006268:	4603      	mov	r3, r0
    }
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
	...

08006274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80062ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006278:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800627a:	e003      	b.n	8006284 <LoopCopyDataInit>

0800627c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800627c:	4b0c      	ldr	r3, [pc, #48]	; (80062b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800627e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006280:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006282:	3104      	adds	r1, #4

08006284 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006284:	480b      	ldr	r0, [pc, #44]	; (80062b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006286:	4b0c      	ldr	r3, [pc, #48]	; (80062b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006288:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800628a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800628c:	d3f6      	bcc.n	800627c <CopyDataInit>
  ldr  r2, =_sbss
 800628e:	4a0b      	ldr	r2, [pc, #44]	; (80062bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006290:	e002      	b.n	8006298 <LoopFillZerobss>

08006292 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006292:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006294:	f842 3b04 	str.w	r3, [r2], #4

08006298 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006298:	4b09      	ldr	r3, [pc, #36]	; (80062c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800629a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800629c:	d3f9      	bcc.n	8006292 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800629e:	f7fd faf7 	bl	8003890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80062a2:	f000 ff13 	bl	80070cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80062a6:	f7fc fe4f 	bl	8002f48 <main>
  bx  lr    
 80062aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80062ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80062b0:	08008688 	.word	0x08008688
  ldr  r0, =_sdata
 80062b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80062b8:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 80062bc:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 80062c0:	200003a4 	.word	0x200003a4

080062c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80062c4:	e7fe      	b.n	80062c4 <ADC_IRQHandler>

080062c6 <_ZdlPv>:
 80062c6:	f000 bf2d 	b.w	8007124 <free>

080062ca <__aeabi_atexit>:
 80062ca:	460b      	mov	r3, r1
 80062cc:	4601      	mov	r1, r0
 80062ce:	4618      	mov	r0, r3
 80062d0:	f000 beee 	b.w	80070b0 <__cxa_atexit>

080062d4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80062d4:	7803      	ldrb	r3, [r0, #0]
 80062d6:	2b47      	cmp	r3, #71	; 0x47
 80062d8:	d117      	bne.n	800630a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80062da:	7843      	ldrb	r3, [r0, #1]
 80062dc:	2b4e      	cmp	r3, #78	; 0x4e
 80062de:	d114      	bne.n	800630a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80062e0:	7883      	ldrb	r3, [r0, #2]
 80062e2:	2b55      	cmp	r3, #85	; 0x55
 80062e4:	d111      	bne.n	800630a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80062e6:	78c3      	ldrb	r3, [r0, #3]
 80062e8:	2b43      	cmp	r3, #67	; 0x43
 80062ea:	d10e      	bne.n	800630a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80062ec:	7903      	ldrb	r3, [r0, #4]
 80062ee:	2b43      	cmp	r3, #67	; 0x43
 80062f0:	d10b      	bne.n	800630a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80062f2:	7943      	ldrb	r3, [r0, #5]
 80062f4:	2b2b      	cmp	r3, #43	; 0x2b
 80062f6:	d108      	bne.n	800630a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80062f8:	7983      	ldrb	r3, [r0, #6]
 80062fa:	2b2b      	cmp	r3, #43	; 0x2b
 80062fc:	d105      	bne.n	800630a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80062fe:	79c0      	ldrb	r0, [r0, #7]
 8006300:	2801      	cmp	r0, #1
 8006302:	bf8c      	ite	hi
 8006304:	2000      	movhi	r0, #0
 8006306:	2001      	movls	r0, #1
 8006308:	4770      	bx	lr
 800630a:	2000      	movs	r0, #0
 800630c:	4770      	bx	lr

0800630e <__cxa_begin_catch>:
 800630e:	b538      	push	{r3, r4, r5, lr}
 8006310:	4605      	mov	r5, r0
 8006312:	f000 f8bb 	bl	800648c <__cxa_get_globals>
 8006316:	4601      	mov	r1, r0
 8006318:	6802      	ldr	r2, [r0, #0]
 800631a:	4628      	mov	r0, r5
 800631c:	f1a5 0420 	sub.w	r4, r5, #32
 8006320:	f7ff ffd8 	bl	80062d4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006324:	b930      	cbnz	r0, 8006334 <__cxa_begin_catch+0x26>
 8006326:	b10a      	cbz	r2, 800632c <__cxa_begin_catch+0x1e>
 8006328:	f000 f84c 	bl	80063c4 <_ZSt9terminatev>
 800632c:	600c      	str	r4, [r1, #0]
 800632e:	4614      	mov	r4, r2
 8006330:	4620      	mov	r0, r4
 8006332:	bd38      	pop	{r3, r4, r5, pc}
 8006334:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	bfb4      	ite	lt
 800633c:	f1c3 0301 	rsblt	r3, r3, #1
 8006340:	3301      	addge	r3, #1
 8006342:	f845 3c0c 	str.w	r3, [r5, #-12]
 8006346:	684b      	ldr	r3, [r1, #4]
 8006348:	42a2      	cmp	r2, r4
 800634a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800634e:	604b      	str	r3, [r1, #4]
 8006350:	4628      	mov	r0, r5
 8006352:	bf1c      	itt	ne
 8006354:	f845 2c10 	strne.w	r2, [r5, #-16]
 8006358:	600c      	strne	r4, [r1, #0]
 800635a:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 800635c:	f7fa fade 	bl	800091c <_Unwind_Complete>
 8006360:	e7e6      	b.n	8006330 <__cxa_begin_catch+0x22>

08006362 <__cxa_end_catch>:
 8006362:	b510      	push	{r4, lr}
 8006364:	f000 f88e 	bl	8006484 <__cxa_get_globals_fast>
 8006368:	6802      	ldr	r2, [r0, #0]
 800636a:	4601      	mov	r1, r0
 800636c:	b19a      	cbz	r2, 8006396 <__cxa_end_catch+0x34>
 800636e:	f102 0420 	add.w	r4, r2, #32
 8006372:	4620      	mov	r0, r4
 8006374:	f7ff ffae 	bl	80062d4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006378:	b928      	cbnz	r0, 8006386 <__cxa_end_catch+0x24>
 800637a:	6008      	str	r0, [r1, #0]
 800637c:	4620      	mov	r0, r4
 800637e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006382:	f7fa bacd 	b.w	8000920 <_Unwind_DeleteException>
 8006386:	6953      	ldr	r3, [r2, #20]
 8006388:	2b00      	cmp	r3, #0
 800638a:	da05      	bge.n	8006398 <__cxa_end_catch+0x36>
 800638c:	3301      	adds	r3, #1
 800638e:	d101      	bne.n	8006394 <__cxa_end_catch+0x32>
 8006390:	6910      	ldr	r0, [r2, #16]
 8006392:	6008      	str	r0, [r1, #0]
 8006394:	6153      	str	r3, [r2, #20]
 8006396:	bd10      	pop	{r4, pc}
 8006398:	3b01      	subs	r3, #1
 800639a:	d102      	bne.n	80063a2 <__cxa_end_catch+0x40>
 800639c:	6913      	ldr	r3, [r2, #16]
 800639e:	600b      	str	r3, [r1, #0]
 80063a0:	e7ec      	b.n	800637c <__cxa_end_catch+0x1a>
 80063a2:	1c59      	adds	r1, r3, #1
 80063a4:	d1f6      	bne.n	8006394 <__cxa_end_catch+0x32>
 80063a6:	f000 f80d 	bl	80063c4 <_ZSt9terminatev>

080063aa <_ZN10__cxxabiv111__terminateEPFvvE>:
 80063aa:	b508      	push	{r3, lr}
 80063ac:	4780      	blx	r0
 80063ae:	f000 fe77 	bl	80070a0 <abort>
	...

080063b4 <_ZSt13get_terminatev>:
 80063b4:	4b02      	ldr	r3, [pc, #8]	; (80063c0 <_ZSt13get_terminatev+0xc>)
 80063b6:	6818      	ldr	r0, [r3, #0]
 80063b8:	f3bf 8f5b 	dmb	ish
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	20000010 	.word	0x20000010

080063c4 <_ZSt9terminatev>:
 80063c4:	b508      	push	{r3, lr}
 80063c6:	f7ff fff5 	bl	80063b4 <_ZSt13get_terminatev>
 80063ca:	f7ff ffee 	bl	80063aa <_ZN10__cxxabiv111__terminateEPFvvE>

080063ce <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 80063ce:	b508      	push	{r3, lr}
 80063d0:	4780      	blx	r0
 80063d2:	f7ff fff7 	bl	80063c4 <_ZSt9terminatev>
	...

080063d8 <_ZSt14get_unexpectedv>:
 80063d8:	4b02      	ldr	r3, [pc, #8]	; (80063e4 <_ZSt14get_unexpectedv+0xc>)
 80063da:	6818      	ldr	r0, [r3, #0]
 80063dc:	f3bf 8f5b 	dmb	ish
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	20000014 	.word	0x20000014

080063e8 <_ZSt10unexpectedv>:
 80063e8:	b508      	push	{r3, lr}
 80063ea:	f7ff fff5 	bl	80063d8 <_ZSt14get_unexpectedv>
 80063ee:	f7ff ffee 	bl	80063ce <_ZN10__cxxabiv112__unexpectedEPFvvE>

080063f2 <_Znwj>:
 80063f2:	b510      	push	{r4, lr}
 80063f4:	2800      	cmp	r0, #0
 80063f6:	bf14      	ite	ne
 80063f8:	4604      	movne	r4, r0
 80063fa:	2401      	moveq	r4, #1
 80063fc:	4620      	mov	r0, r4
 80063fe:	f000 fe89 	bl	8007114 <malloc>
 8006402:	b930      	cbnz	r0, 8006412 <_Znwj+0x20>
 8006404:	f000 fb92 	bl	8006b2c <_ZSt15get_new_handlerv>
 8006408:	b908      	cbnz	r0, 800640e <_Znwj+0x1c>
 800640a:	f000 fe49 	bl	80070a0 <abort>
 800640e:	4780      	blx	r0
 8006410:	e7f4      	b.n	80063fc <_Znwj+0xa>
 8006412:	bd10      	pop	{r4, pc}

08006414 <__cxa_rethrow>:
 8006414:	b508      	push	{r3, lr}
 8006416:	f000 f839 	bl	800648c <__cxa_get_globals>
 800641a:	6842      	ldr	r2, [r0, #4]
 800641c:	6804      	ldr	r4, [r0, #0]
 800641e:	3201      	adds	r2, #1
 8006420:	6042      	str	r2, [r0, #4]
 8006422:	b34c      	cbz	r4, 8006478 <__cxa_rethrow+0x64>
 8006424:	f894 2020 	ldrb.w	r2, [r4, #32]
 8006428:	2a47      	cmp	r2, #71	; 0x47
 800642a:	d127      	bne.n	800647c <__cxa_rethrow+0x68>
 800642c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8006430:	2a4e      	cmp	r2, #78	; 0x4e
 8006432:	d123      	bne.n	800647c <__cxa_rethrow+0x68>
 8006434:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8006438:	2a55      	cmp	r2, #85	; 0x55
 800643a:	d11f      	bne.n	800647c <__cxa_rethrow+0x68>
 800643c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8006440:	2a43      	cmp	r2, #67	; 0x43
 8006442:	d11b      	bne.n	800647c <__cxa_rethrow+0x68>
 8006444:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8006448:	2a43      	cmp	r2, #67	; 0x43
 800644a:	d117      	bne.n	800647c <__cxa_rethrow+0x68>
 800644c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8006450:	2a2b      	cmp	r2, #43	; 0x2b
 8006452:	d113      	bne.n	800647c <__cxa_rethrow+0x68>
 8006454:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8006458:	2a2b      	cmp	r2, #43	; 0x2b
 800645a:	d10f      	bne.n	800647c <__cxa_rethrow+0x68>
 800645c:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8006460:	2a01      	cmp	r2, #1
 8006462:	d80b      	bhi.n	800647c <__cxa_rethrow+0x68>
 8006464:	6962      	ldr	r2, [r4, #20]
 8006466:	4252      	negs	r2, r2
 8006468:	6162      	str	r2, [r4, #20]
 800646a:	3420      	adds	r4, #32
 800646c:	4620      	mov	r0, r4
 800646e:	f7fa fe15 	bl	800109c <_Unwind_Resume_or_Rethrow>
 8006472:	4620      	mov	r0, r4
 8006474:	f7ff ff4b 	bl	800630e <__cxa_begin_catch>
 8006478:	f7ff ffa4 	bl	80063c4 <_ZSt9terminatev>
 800647c:	2200      	movs	r2, #0
 800647e:	6002      	str	r2, [r0, #0]
 8006480:	e7f3      	b.n	800646a <__cxa_rethrow+0x56>
	...

08006484 <__cxa_get_globals_fast>:
 8006484:	4800      	ldr	r0, [pc, #0]	; (8006488 <__cxa_get_globals_fast+0x4>)
 8006486:	4770      	bx	lr
 8006488:	200002d0 	.word	0x200002d0

0800648c <__cxa_get_globals>:
 800648c:	4800      	ldr	r0, [pc, #0]	; (8006490 <__cxa_get_globals+0x4>)
 800648e:	4770      	bx	lr
 8006490:	200002d0 	.word	0x200002d0

08006494 <__cxa_end_cleanup>:
 8006494:	b41e      	push	{r1, r2, r3, r4}
 8006496:	f000 f89c 	bl	80065d2 <__gnu_end_cleanup>
 800649a:	bc1e      	pop	{r1, r2, r3, r4}
 800649c:	f7fa fdec 	bl	8001078 <_Unwind_Resume>

080064a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80064a0:	7803      	ldrb	r3, [r0, #0]
 80064a2:	2b47      	cmp	r3, #71	; 0x47
 80064a4:	d117      	bne.n	80064d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80064a6:	7843      	ldrb	r3, [r0, #1]
 80064a8:	2b4e      	cmp	r3, #78	; 0x4e
 80064aa:	d114      	bne.n	80064d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80064ac:	7883      	ldrb	r3, [r0, #2]
 80064ae:	2b55      	cmp	r3, #85	; 0x55
 80064b0:	d111      	bne.n	80064d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80064b2:	78c3      	ldrb	r3, [r0, #3]
 80064b4:	2b43      	cmp	r3, #67	; 0x43
 80064b6:	d10e      	bne.n	80064d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80064b8:	7903      	ldrb	r3, [r0, #4]
 80064ba:	2b43      	cmp	r3, #67	; 0x43
 80064bc:	d10b      	bne.n	80064d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80064be:	7943      	ldrb	r3, [r0, #5]
 80064c0:	2b2b      	cmp	r3, #43	; 0x2b
 80064c2:	d108      	bne.n	80064d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80064c4:	7983      	ldrb	r3, [r0, #6]
 80064c6:	2b2b      	cmp	r3, #43	; 0x2b
 80064c8:	d105      	bne.n	80064d6 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80064ca:	79c0      	ldrb	r0, [r0, #7]
 80064cc:	2801      	cmp	r0, #1
 80064ce:	bf8c      	ite	hi
 80064d0:	2000      	movhi	r0, #0
 80064d2:	2001      	movls	r0, #1
 80064d4:	4770      	bx	lr
 80064d6:	2000      	movs	r0, #0
 80064d8:	4770      	bx	lr
	...

080064dc <__cxa_type_match>:
 80064dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80064e0:	461e      	mov	r6, r3
 80064e2:	7803      	ldrb	r3, [r0, #0]
 80064e4:	2b47      	cmp	r3, #71	; 0x47
 80064e6:	460d      	mov	r5, r1
 80064e8:	4602      	mov	r2, r0
 80064ea:	79c1      	ldrb	r1, [r0, #7]
 80064ec:	d148      	bne.n	8006580 <__cxa_type_match+0xa4>
 80064ee:	7843      	ldrb	r3, [r0, #1]
 80064f0:	2b4e      	cmp	r3, #78	; 0x4e
 80064f2:	d145      	bne.n	8006580 <__cxa_type_match+0xa4>
 80064f4:	7883      	ldrb	r3, [r0, #2]
 80064f6:	2b55      	cmp	r3, #85	; 0x55
 80064f8:	d142      	bne.n	8006580 <__cxa_type_match+0xa4>
 80064fa:	78c3      	ldrb	r3, [r0, #3]
 80064fc:	2b43      	cmp	r3, #67	; 0x43
 80064fe:	d13f      	bne.n	8006580 <__cxa_type_match+0xa4>
 8006500:	7903      	ldrb	r3, [r0, #4]
 8006502:	2b46      	cmp	r3, #70	; 0x46
 8006504:	d13c      	bne.n	8006580 <__cxa_type_match+0xa4>
 8006506:	7943      	ldrb	r3, [r0, #5]
 8006508:	2b4f      	cmp	r3, #79	; 0x4f
 800650a:	d139      	bne.n	8006580 <__cxa_type_match+0xa4>
 800650c:	7983      	ldrb	r3, [r0, #6]
 800650e:	2b52      	cmp	r3, #82	; 0x52
 8006510:	d136      	bne.n	8006580 <__cxa_type_match+0xa4>
 8006512:	2900      	cmp	r1, #0
 8006514:	d134      	bne.n	8006580 <__cxa_type_match+0xa4>
 8006516:	2301      	movs	r3, #1
 8006518:	4608      	mov	r0, r1
 800651a:	2400      	movs	r4, #0
 800651c:	9401      	str	r4, [sp, #4]
 800651e:	bb3b      	cbnz	r3, 8006570 <__cxa_type_match+0x94>
 8006520:	bb40      	cbnz	r0, 8006574 <__cxa_type_match+0x98>
 8006522:	2901      	cmp	r1, #1
 8006524:	bf0a      	itet	eq
 8006526:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 800652a:	f1a2 0320 	subne.w	r3, r2, #32
 800652e:	3b78      	subeq	r3, #120	; 0x78
 8006530:	2901      	cmp	r1, #1
 8006532:	bf08      	it	eq
 8006534:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8006538:	681c      	ldr	r4, [r3, #0]
 800653a:	bf18      	it	ne
 800653c:	3258      	addne	r2, #88	; 0x58
 800653e:	9201      	str	r2, [sp, #4]
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	4620      	mov	r0, r4
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	4798      	blx	r3
 8006548:	b1b0      	cbz	r0, 8006578 <__cxa_type_match+0x9c>
 800654a:	9b01      	ldr	r3, [sp, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	2702      	movs	r7, #2
 8006552:	682b      	ldr	r3, [r5, #0]
 8006554:	aa01      	add	r2, sp, #4
 8006556:	f8d3 8010 	ldr.w	r8, [r3, #16]
 800655a:	4621      	mov	r1, r4
 800655c:	2301      	movs	r3, #1
 800655e:	4628      	mov	r0, r5
 8006560:	47c0      	blx	r8
 8006562:	b158      	cbz	r0, 800657c <__cxa_type_match+0xa0>
 8006564:	9b01      	ldr	r3, [sp, #4]
 8006566:	6033      	str	r3, [r6, #0]
 8006568:	4638      	mov	r0, r7
 800656a:	b002      	add	sp, #8
 800656c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006570:	4c07      	ldr	r4, [pc, #28]	; (8006590 <__cxa_type_match+0xb4>)
 8006572:	e7e5      	b.n	8006540 <__cxa_type_match+0x64>
 8006574:	4c07      	ldr	r4, [pc, #28]	; (8006594 <__cxa_type_match+0xb8>)
 8006576:	e7e3      	b.n	8006540 <__cxa_type_match+0x64>
 8006578:	2701      	movs	r7, #1
 800657a:	e7ea      	b.n	8006552 <__cxa_type_match+0x76>
 800657c:	4607      	mov	r7, r0
 800657e:	e7f3      	b.n	8006568 <__cxa_type_match+0x8c>
 8006580:	4610      	mov	r0, r2
 8006582:	f7ff ff8d 	bl	80064a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006586:	f080 0001 	eor.w	r0, r0, #1
 800658a:	b2c0      	uxtb	r0, r0
 800658c:	2300      	movs	r3, #0
 800658e:	e7c4      	b.n	800651a <__cxa_type_match+0x3e>
 8006590:	08007aa8 	.word	0x08007aa8
 8006594:	08007ab0 	.word	0x08007ab0

08006598 <__cxa_begin_cleanup>:
 8006598:	b510      	push	{r4, lr}
 800659a:	4604      	mov	r4, r0
 800659c:	f7ff ff76 	bl	800648c <__cxa_get_globals>
 80065a0:	4602      	mov	r2, r0
 80065a2:	4620      	mov	r0, r4
 80065a4:	f1a4 0120 	sub.w	r1, r4, #32
 80065a8:	f7ff ff7a 	bl	80064a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80065ac:	b160      	cbz	r0, 80065c8 <__cxa_begin_cleanup+0x30>
 80065ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80065b2:	3301      	adds	r3, #1
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	f844 3c04 	str.w	r3, [r4, #-4]
 80065ba:	d103      	bne.n	80065c4 <__cxa_begin_cleanup+0x2c>
 80065bc:	6893      	ldr	r3, [r2, #8]
 80065be:	f844 3c08 	str.w	r3, [r4, #-8]
 80065c2:	6091      	str	r1, [r2, #8]
 80065c4:	2001      	movs	r0, #1
 80065c6:	bd10      	pop	{r4, pc}
 80065c8:	6893      	ldr	r3, [r2, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d0f9      	beq.n	80065c2 <__cxa_begin_cleanup+0x2a>
 80065ce:	f7ff fef9 	bl	80063c4 <_ZSt9terminatev>

080065d2 <__gnu_end_cleanup>:
 80065d2:	b510      	push	{r4, lr}
 80065d4:	f7ff ff5a 	bl	800648c <__cxa_get_globals>
 80065d8:	6882      	ldr	r2, [r0, #8]
 80065da:	4601      	mov	r1, r0
 80065dc:	b90a      	cbnz	r2, 80065e2 <__gnu_end_cleanup+0x10>
 80065de:	f7ff fef1 	bl	80063c4 <_ZSt9terminatev>
 80065e2:	f102 0420 	add.w	r4, r2, #32
 80065e6:	4620      	mov	r0, r4
 80065e8:	f7ff ff5a 	bl	80064a0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80065ec:	b140      	cbz	r0, 8006600 <__gnu_end_cleanup+0x2e>
 80065ee:	69d3      	ldr	r3, [r2, #28]
 80065f0:	3b01      	subs	r3, #1
 80065f2:	61d3      	str	r3, [r2, #28]
 80065f4:	b913      	cbnz	r3, 80065fc <__gnu_end_cleanup+0x2a>
 80065f6:	6990      	ldr	r0, [r2, #24]
 80065f8:	6088      	str	r0, [r1, #8]
 80065fa:	6193      	str	r3, [r2, #24]
 80065fc:	4620      	mov	r0, r4
 80065fe:	bd10      	pop	{r4, pc}
 8006600:	6088      	str	r0, [r1, #8]
 8006602:	e7fb      	b.n	80065fc <__gnu_end_cleanup+0x2a>

08006604 <_ZL12read_uleb128PKhPm>:
 8006604:	b570      	push	{r4, r5, r6, lr}
 8006606:	2300      	movs	r3, #0
 8006608:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 800660c:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 8006610:	f810 5b01 	ldrb.w	r5, [r0], #1
 8006614:	1994      	adds	r4, r2, r6
 8006616:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 800661a:	40a2      	lsls	r2, r4
 800661c:	4313      	orrs	r3, r2
 800661e:	062a      	lsls	r2, r5, #24
 8006620:	d4f4      	bmi.n	800660c <_ZL12read_uleb128PKhPm+0x8>
 8006622:	600b      	str	r3, [r1, #0]
 8006624:	bd70      	pop	{r4, r5, r6, pc}

08006626 <_ZL12read_sleb128PKhPl>:
 8006626:	b530      	push	{r4, r5, lr}
 8006628:	2300      	movs	r3, #0
 800662a:	461a      	mov	r2, r3
 800662c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8006630:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8006634:	4095      	lsls	r5, r2
 8006636:	432b      	orrs	r3, r5
 8006638:	0625      	lsls	r5, r4, #24
 800663a:	f102 0207 	add.w	r2, r2, #7
 800663e:	d4f5      	bmi.n	800662c <_ZL12read_sleb128PKhPl+0x6>
 8006640:	2a1f      	cmp	r2, #31
 8006642:	d806      	bhi.n	8006652 <_ZL12read_sleb128PKhPl+0x2c>
 8006644:	0664      	lsls	r4, r4, #25
 8006646:	bf42      	ittt	mi
 8006648:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
 800664c:	fa04 f202 	lslmi.w	r2, r4, r2
 8006650:	4313      	orrmi	r3, r2
 8006652:	600b      	str	r3, [r1, #0]
 8006654:	bd30      	pop	{r4, r5, pc}

08006656 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8006656:	2850      	cmp	r0, #80	; 0x50
 8006658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800665a:	4605      	mov	r5, r0
 800665c:	460e      	mov	r6, r1
 800665e:	4614      	mov	r4, r2
 8006660:	461f      	mov	r7, r3
 8006662:	d107      	bne.n	8006674 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
 8006664:	1cd0      	adds	r0, r2, #3
 8006666:	f020 0003 	bic.w	r0, r0, #3
 800666a:	f850 3b04 	ldr.w	r3, [r0], #4
 800666e:	603b      	str	r3, [r7, #0]
 8006670:	b003      	add	sp, #12
 8006672:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006674:	f000 030f 	and.w	r3, r0, #15
 8006678:	2b0c      	cmp	r3, #12
 800667a:	d82e      	bhi.n	80066da <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 800667c:	e8df f003 	tbb	[pc, r3]
 8006680:	251d0725 	.word	0x251d0725
 8006684:	2d2d2d29 	.word	0x2d2d2d29
 8006688:	2521182d 	.word	0x2521182d
 800668c:	29          	.byte	0x29
 800668d:	00          	.byte	0x00
 800668e:	a901      	add	r1, sp, #4
 8006690:	4620      	mov	r0, r4
 8006692:	f7ff ffb7 	bl	8006604 <_ZL12read_uleb128PKhPm>
 8006696:	9b01      	ldr	r3, [sp, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d0e8      	beq.n	800666e <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 800669c:	f005 0270 	and.w	r2, r5, #112	; 0x70
 80066a0:	2a10      	cmp	r2, #16
 80066a2:	bf08      	it	eq
 80066a4:	4626      	moveq	r6, r4
 80066a6:	4433      	add	r3, r6
 80066a8:	062a      	lsls	r2, r5, #24
 80066aa:	bf48      	it	mi
 80066ac:	681b      	ldrmi	r3, [r3, #0]
 80066ae:	e7de      	b.n	800666e <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 80066b0:	a901      	add	r1, sp, #4
 80066b2:	4620      	mov	r0, r4
 80066b4:	f7ff ffb7 	bl	8006626 <_ZL12read_sleb128PKhPl>
 80066b8:	e7ed      	b.n	8006696 <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 80066ba:	4620      	mov	r0, r4
 80066bc:	f830 3b02 	ldrh.w	r3, [r0], #2
 80066c0:	e7ea      	b.n	8006698 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80066c2:	4620      	mov	r0, r4
 80066c4:	f930 3b02 	ldrsh.w	r3, [r0], #2
 80066c8:	e7e6      	b.n	8006698 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80066ca:	4620      	mov	r0, r4
 80066cc:	f850 3b04 	ldr.w	r3, [r0], #4
 80066d0:	e7e2      	b.n	8006698 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80066d2:	4620      	mov	r0, r4
 80066d4:	f850 3b08 	ldr.w	r3, [r0], #8
 80066d8:	e7de      	b.n	8006698 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 80066da:	f000 fce1 	bl	80070a0 <abort>

080066de <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 80066de:	b508      	push	{r3, lr}
 80066e0:	4603      	mov	r3, r0
 80066e2:	2bff      	cmp	r3, #255	; 0xff
 80066e4:	4608      	mov	r0, r1
 80066e6:	d007      	beq.n	80066f8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 80066e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066ec:	2b20      	cmp	r3, #32
 80066ee:	d00d      	beq.n	800670c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 80066f0:	d804      	bhi.n	80066fc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 80066f2:	b10b      	cbz	r3, 80066f8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 80066f4:	2b10      	cmp	r3, #16
 80066f6:	d107      	bne.n	8006708 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 80066f8:	2000      	movs	r0, #0
 80066fa:	bd08      	pop	{r3, pc}
 80066fc:	2b40      	cmp	r3, #64	; 0x40
 80066fe:	d00d      	beq.n	800671c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3e>
 8006700:	2b50      	cmp	r3, #80	; 0x50
 8006702:	d0f9      	beq.n	80066f8 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8006704:	2b30      	cmp	r3, #48	; 0x30
 8006706:	d005      	beq.n	8006714 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
 8006708:	f000 fcca 	bl	80070a0 <abort>
 800670c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006710:	f7fa beb2 	b.w	8001478 <_Unwind_GetTextRelBase>
 8006714:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006718:	f7fa beb2 	b.w	8001480 <_Unwind_GetDataRelBase>
 800671c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006720:	f7fa be9a 	b.w	8001458 <_Unwind_GetRegionStart>

08006724 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8006724:	b570      	push	{r4, r5, r6, lr}
 8006726:	460c      	mov	r4, r1
 8006728:	4601      	mov	r1, r0
 800672a:	4620      	mov	r0, r4
 800672c:	4615      	mov	r5, r2
 800672e:	461e      	mov	r6, r3
 8006730:	f7ff ffd5 	bl	80066de <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8006734:	4633      	mov	r3, r6
 8006736:	462a      	mov	r2, r5
 8006738:	4601      	mov	r1, r0
 800673a:	4620      	mov	r0, r4
 800673c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006740:	f7ff bf89 	b.w	8006656 <_ZL28read_encoded_value_with_basehjPKhPj>

08006744 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8006744:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006746:	460e      	mov	r6, r1
 8006748:	4614      	mov	r4, r2
 800674a:	4605      	mov	r5, r0
 800674c:	b328      	cbz	r0, 800679a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 800674e:	f7fa fe83 	bl	8001458 <_Unwind_GetRegionStart>
 8006752:	6020      	str	r0, [r4, #0]
 8006754:	7831      	ldrb	r1, [r6, #0]
 8006756:	29ff      	cmp	r1, #255	; 0xff
 8006758:	f106 0201 	add.w	r2, r6, #1
 800675c:	d01e      	beq.n	800679c <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 800675e:	1d23      	adds	r3, r4, #4
 8006760:	4628      	mov	r0, r5
 8006762:	f7ff ffdf 	bl	8006724 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006766:	4602      	mov	r2, r0
 8006768:	7813      	ldrb	r3, [r2, #0]
 800676a:	7523      	strb	r3, [r4, #20]
 800676c:	2bff      	cmp	r3, #255	; 0xff
 800676e:	f102 0001 	add.w	r0, r2, #1
 8006772:	d015      	beq.n	80067a0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5c>
 8006774:	2310      	movs	r3, #16
 8006776:	7523      	strb	r3, [r4, #20]
 8006778:	a901      	add	r1, sp, #4
 800677a:	f7ff ff43 	bl	8006604 <_ZL12read_uleb128PKhPm>
 800677e:	9b01      	ldr	r3, [sp, #4]
 8006780:	4403      	add	r3, r0
 8006782:	60e3      	str	r3, [r4, #12]
 8006784:	7803      	ldrb	r3, [r0, #0]
 8006786:	7563      	strb	r3, [r4, #21]
 8006788:	a901      	add	r1, sp, #4
 800678a:	3001      	adds	r0, #1
 800678c:	f7ff ff3a 	bl	8006604 <_ZL12read_uleb128PKhPm>
 8006790:	9b01      	ldr	r3, [sp, #4]
 8006792:	4403      	add	r3, r0
 8006794:	6123      	str	r3, [r4, #16]
 8006796:	b002      	add	sp, #8
 8006798:	bd70      	pop	{r4, r5, r6, pc}
 800679a:	e7da      	b.n	8006752 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 800679c:	6060      	str	r0, [r4, #4]
 800679e:	e7e3      	b.n	8006768 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 80067a0:	2300      	movs	r3, #0
 80067a2:	e7ee      	b.n	8006782 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

080067a4 <_Unwind_GetGR>:
 80067a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80067a6:	ab03      	add	r3, sp, #12
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	2300      	movs	r3, #0
 80067ac:	460a      	mov	r2, r1
 80067ae:	4619      	mov	r1, r3
 80067b0:	f7fa f8bc 	bl	800092c <_Unwind_VRS_Get>
 80067b4:	9803      	ldr	r0, [sp, #12]
 80067b6:	b005      	add	sp, #20
 80067b8:	f85d fb04 	ldr.w	pc, [sp], #4

080067bc <__gxx_personality_v0>:
 80067bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c0:	b091      	sub	sp, #68	; 0x44
 80067c2:	2300      	movs	r3, #0
 80067c4:	9304      	str	r3, [sp, #16]
 80067c6:	f000 0303 	and.w	r3, r0, #3
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	4607      	mov	r7, r0
 80067ce:	460c      	mov	r4, r1
 80067d0:	4616      	mov	r6, r2
 80067d2:	d011      	beq.n	80067f8 <__gxx_personality_v0+0x3c>
 80067d4:	d303      	bcc.n	80067de <__gxx_personality_v0+0x22>
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d003      	beq.n	80067e2 <__gxx_personality_v0+0x26>
 80067da:	f000 fc61 	bl	80070a0 <abort>
 80067de:	0702      	lsls	r2, r0, #28
 80067e0:	d51a      	bpl.n	8006818 <__gxx_personality_v0+0x5c>
 80067e2:	4631      	mov	r1, r6
 80067e4:	4620      	mov	r0, r4
 80067e6:	f7fa fe23 	bl	8001430 <__gnu_unwind_frame>
 80067ea:	b118      	cbz	r0, 80067f4 <__gxx_personality_v0+0x38>
 80067ec:	2009      	movs	r0, #9
 80067ee:	b011      	add	sp, #68	; 0x44
 80067f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f4:	2008      	movs	r0, #8
 80067f6:	e7fa      	b.n	80067ee <__gxx_personality_v0+0x32>
 80067f8:	f000 0508 	and.w	r5, r0, #8
 80067fc:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 8006800:	bb85      	cbnz	r5, 8006864 <__gxx_personality_v0+0xa8>
 8006802:	f8d1 9020 	ldr.w	r9, [r1, #32]
 8006806:	4610      	mov	r0, r2
 8006808:	210d      	movs	r1, #13
 800680a:	f7ff ffcb 	bl	80067a4 <_Unwind_GetGR>
 800680e:	4581      	cmp	r9, r0
 8006810:	f040 8140 	bne.w	8006a94 <__gxx_personality_v0+0x2d8>
 8006814:	2506      	movs	r5, #6
 8006816:	e000      	b.n	800681a <__gxx_personality_v0+0x5e>
 8006818:	2501      	movs	r5, #1
 800681a:	ab10      	add	r3, sp, #64	; 0x40
 800681c:	f007 0708 	and.w	r7, r7, #8
 8006820:	f843 4d2c 	str.w	r4, [r3, #-44]!
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	2300      	movs	r3, #0
 8006828:	433d      	orrs	r5, r7
 800682a:	220c      	movs	r2, #12
 800682c:	4619      	mov	r1, r3
 800682e:	4630      	mov	r0, r6
 8006830:	f7fa f8a2 	bl	8000978 <_Unwind_VRS_Set>
 8006834:	2d06      	cmp	r5, #6
 8006836:	f040 8139 	bne.w	8006aac <__gxx_personality_v0+0x2f0>
 800683a:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 800683e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006840:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006842:	f1b8 0f00 	cmp.w	r8, #0
 8006846:	bf0c      	ite	eq
 8006848:	f04f 0a01 	moveq.w	sl, #1
 800684c:	f04f 0a03 	movne.w	sl, #3
 8006850:	f015 0508 	ands.w	r5, r5, #8
 8006854:	f000 80ce 	beq.w	80069f4 <__gxx_personality_v0+0x238>
 8006858:	f1ba 0f01 	cmp.w	sl, #1
 800685c:	f040 80c6 	bne.w	80069ec <__gxx_personality_v0+0x230>
 8006860:	f7ff fdb0 	bl	80063c4 <_ZSt9terminatev>
 8006864:	2502      	movs	r5, #2
 8006866:	e7d8      	b.n	800681a <__gxx_personality_v0+0x5e>
 8006868:	9a07      	ldr	r2, [sp, #28]
 800686a:	4413      	add	r3, r2
 800686c:	429f      	cmp	r7, r3
 800686e:	f080 8137 	bcs.w	8006ae0 <__gxx_personality_v0+0x324>
 8006872:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006876:	f1b8 0f00 	cmp.w	r8, #0
 800687a:	d001      	beq.n	8006880 <__gxx_personality_v0+0xc4>
 800687c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800687e:	4498      	add	r8, r3
 8006880:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006882:	b117      	cbz	r7, 800688a <__gxx_personality_v0+0xce>
 8006884:	1e78      	subs	r0, r7, #1
 8006886:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8006888:	4407      	add	r7, r0
 800688a:	f1b8 0f00 	cmp.w	r8, #0
 800688e:	d0a8      	beq.n	80067e2 <__gxx_personality_v0+0x26>
 8006890:	2f00      	cmp	r7, #0
 8006892:	f000 80a1 	beq.w	80069d8 <__gxx_personality_v0+0x21c>
 8006896:	f015 0308 	ands.w	r3, r5, #8
 800689a:	9302      	str	r3, [sp, #8]
 800689c:	d036      	beq.n	800690c <__gxx_personality_v0+0x150>
 800689e:	2347      	movs	r3, #71	; 0x47
 80068a0:	7023      	strb	r3, [r4, #0]
 80068a2:	234e      	movs	r3, #78	; 0x4e
 80068a4:	7063      	strb	r3, [r4, #1]
 80068a6:	2355      	movs	r3, #85	; 0x55
 80068a8:	70a3      	strb	r3, [r4, #2]
 80068aa:	2343      	movs	r3, #67	; 0x43
 80068ac:	70e3      	strb	r3, [r4, #3]
 80068ae:	2346      	movs	r3, #70	; 0x46
 80068b0:	7123      	strb	r3, [r4, #4]
 80068b2:	234f      	movs	r3, #79	; 0x4f
 80068b4:	7163      	strb	r3, [r4, #5]
 80068b6:	2352      	movs	r3, #82	; 0x52
 80068b8:	71a3      	strb	r3, [r4, #6]
 80068ba:	2300      	movs	r3, #0
 80068bc:	71e3      	strb	r3, [r4, #7]
 80068be:	f04f 0a00 	mov.w	sl, #0
 80068c2:	f06f 0b03 	mvn.w	fp, #3
 80068c6:	a907      	add	r1, sp, #28
 80068c8:	4638      	mov	r0, r7
 80068ca:	f7ff feac 	bl	8006626 <_ZL12read_sleb128PKhPl>
 80068ce:	a908      	add	r1, sp, #32
 80068d0:	9003      	str	r0, [sp, #12]
 80068d2:	f7ff fea8 	bl	8006626 <_ZL12read_sleb128PKhPl>
 80068d6:	9a07      	ldr	r2, [sp, #28]
 80068d8:	2a00      	cmp	r2, #0
 80068da:	d076      	beq.n	80069ca <__gxx_personality_v0+0x20e>
 80068dc:	dd3d      	ble.n	800695a <__gxx_personality_v0+0x19e>
 80068de:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80068e2:	28ff      	cmp	r0, #255	; 0xff
 80068e4:	d035      	beq.n	8006952 <__gxx_personality_v0+0x196>
 80068e6:	f000 0307 	and.w	r3, r0, #7
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	f63f af75 	bhi.w	80067da <__gxx_personality_v0+0x1e>
 80068f0:	a101      	add	r1, pc, #4	; (adr r1, 80068f8 <__gxx_personality_v0+0x13c>)
 80068f2:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068f6:	bf00      	nop
 80068f8:	08006957 	.word	0x08006957
 80068fc:	080067db 	.word	0x080067db
 8006900:	0800691f 	.word	0x0800691f
 8006904:	08006957 	.word	0x08006957
 8006908:	0800694f 	.word	0x0800694f
 800690c:	79e3      	ldrb	r3, [r4, #7]
 800690e:	2b01      	cmp	r3, #1
 8006910:	bf0c      	ite	eq
 8006912:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8006916:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 800691a:	9304      	str	r3, [sp, #16]
 800691c:	e7cf      	b.n	80068be <__gxx_personality_v0+0x102>
 800691e:	2702      	movs	r7, #2
 8006920:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006922:	ab09      	add	r3, sp, #36	; 0x24
 8006924:	fb07 1212 	mls	r2, r7, r2, r1
 8006928:	990c      	ldr	r1, [sp, #48]	; 0x30
 800692a:	f7ff fe94 	bl	8006656 <_ZL28read_encoded_value_with_basehjPKhPj>
 800692e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006930:	b369      	cbz	r1, 800698e <__gxx_personality_v0+0x1d2>
 8006932:	b12c      	cbz	r4, 8006940 <__gxx_personality_v0+0x184>
 8006934:	ab04      	add	r3, sp, #16
 8006936:	2200      	movs	r2, #0
 8006938:	4620      	mov	r0, r4
 800693a:	f7ff fdcf 	bl	80064dc <__cxa_type_match>
 800693e:	bb30      	cbnz	r0, 800698e <__gxx_personality_v0+0x1d2>
 8006940:	9f08      	ldr	r7, [sp, #32]
 8006942:	2f00      	cmp	r7, #0
 8006944:	d044      	beq.n	80069d0 <__gxx_personality_v0+0x214>
 8006946:	9b03      	ldr	r3, [sp, #12]
 8006948:	443b      	add	r3, r7
 800694a:	461f      	mov	r7, r3
 800694c:	e7bb      	b.n	80068c6 <__gxx_personality_v0+0x10a>
 800694e:	2708      	movs	r7, #8
 8006950:	e7e6      	b.n	8006920 <__gxx_personality_v0+0x164>
 8006952:	2700      	movs	r7, #0
 8006954:	e7e4      	b.n	8006920 <__gxx_personality_v0+0x164>
 8006956:	2704      	movs	r7, #4
 8006958:	e7e2      	b.n	8006920 <__gxx_personality_v0+0x164>
 800695a:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800695c:	3201      	adds	r2, #1
 800695e:	b36c      	cbz	r4, 80069bc <__gxx_personality_v0+0x200>
 8006960:	9b02      	ldr	r3, [sp, #8]
 8006962:	bb5b      	cbnz	r3, 80069bc <__gxx_personality_v0+0x200>
 8006964:	9b04      	ldr	r3, [sp, #16]
 8006966:	9306      	str	r3, [sp, #24]
 8006968:	fb0b 7202 	mla	r2, fp, r2, r7
 800696c:	1f17      	subs	r7, r2, #4
 800696e:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8006972:	b141      	cbz	r1, 8006986 <__gxx_personality_v0+0x1ca>
 8006974:	ab06      	add	r3, sp, #24
 8006976:	2200      	movs	r2, #0
 8006978:	4439      	add	r1, r7
 800697a:	4620      	mov	r0, r4
 800697c:	f7ff fdae 	bl	80064dc <__cxa_type_match>
 8006980:	2800      	cmp	r0, #0
 8006982:	d0f4      	beq.n	800696e <__gxx_personality_v0+0x1b2>
 8006984:	2101      	movs	r1, #1
 8006986:	f081 0101 	eor.w	r1, r1, #1
 800698a:	2900      	cmp	r1, #0
 800698c:	d0d8      	beq.n	8006940 <__gxx_personality_v0+0x184>
 800698e:	9f07      	ldr	r7, [sp, #28]
 8006990:	f04f 0a03 	mov.w	sl, #3
 8006994:	07eb      	lsls	r3, r5, #31
 8006996:	d527      	bpl.n	80069e8 <__gxx_personality_v0+0x22c>
 8006998:	f1ba 0f02 	cmp.w	sl, #2
 800699c:	f43f af21 	beq.w	80067e2 <__gxx_personality_v0+0x26>
 80069a0:	210d      	movs	r1, #13
 80069a2:	4630      	mov	r0, r6
 80069a4:	9d04      	ldr	r5, [sp, #16]
 80069a6:	f7ff fefd 	bl	80067a4 <_Unwind_GetGR>
 80069aa:	6265      	str	r5, [r4, #36]	; 0x24
 80069ac:	6220      	str	r0, [r4, #32]
 80069ae:	62a7      	str	r7, [r4, #40]	; 0x28
 80069b0:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 80069b4:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 80069b8:	2006      	movs	r0, #6
 80069ba:	e718      	b.n	80067ee <__gxx_personality_v0+0x32>
 80069bc:	fb0b f202 	mul.w	r2, fp, r2
 80069c0:	58b9      	ldr	r1, [r7, r2]
 80069c2:	fab1 f181 	clz	r1, r1
 80069c6:	0949      	lsrs	r1, r1, #5
 80069c8:	e7df      	b.n	800698a <__gxx_personality_v0+0x1ce>
 80069ca:	f04f 0a01 	mov.w	sl, #1
 80069ce:	e7b7      	b.n	8006940 <__gxx_personality_v0+0x184>
 80069d0:	f1ba 0f00 	cmp.w	sl, #0
 80069d4:	f43f af05 	beq.w	80067e2 <__gxx_personality_v0+0x26>
 80069d8:	f04f 0a02 	mov.w	sl, #2
 80069dc:	e7da      	b.n	8006994 <__gxx_personality_v0+0x1d8>
 80069de:	2700      	movs	r7, #0
 80069e0:	46b8      	mov	r8, r7
 80069e2:	f04f 0a01 	mov.w	sl, #1
 80069e6:	e7d5      	b.n	8006994 <__gxx_personality_v0+0x1d8>
 80069e8:	4649      	mov	r1, r9
 80069ea:	e731      	b.n	8006850 <__gxx_personality_v0+0x94>
 80069ec:	2f00      	cmp	r7, #0
 80069ee:	da23      	bge.n	8006a38 <__gxx_personality_v0+0x27c>
 80069f0:	f7ff fcfa 	bl	80063e8 <_ZSt10unexpectedv>
 80069f4:	f1ba 0f01 	cmp.w	sl, #1
 80069f8:	d102      	bne.n	8006a00 <__gxx_personality_v0+0x244>
 80069fa:	4620      	mov	r0, r4
 80069fc:	f000 f944 	bl	8006c88 <__cxa_call_terminate>
 8006a00:	2f00      	cmp	r7, #0
 8006a02:	da19      	bge.n	8006a38 <__gxx_personality_v0+0x27c>
 8006a04:	aa0a      	add	r2, sp, #40	; 0x28
 8006a06:	4630      	mov	r0, r6
 8006a08:	f7ff fe9c 	bl	8006744 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8006a0c:	4631      	mov	r1, r6
 8006a0e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8006a12:	f7ff fe64 	bl	80066de <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8006a16:	f06f 0303 	mvn.w	r3, #3
 8006a1a:	fb07 3203 	mla	r2, r7, r3, r3
 8006a1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a20:	900c      	str	r0, [sp, #48]	; 0x30
 8006a22:	4413      	add	r3, r2
 8006a24:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8006a28:	b10a      	cbz	r2, 8006a2e <__gxx_personality_v0+0x272>
 8006a2a:	3501      	adds	r5, #1
 8006a2c:	e7fa      	b.n	8006a24 <__gxx_personality_v0+0x268>
 8006a2e:	2204      	movs	r2, #4
 8006a30:	62a5      	str	r5, [r4, #40]	; 0x28
 8006a32:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006a34:	6322      	str	r2, [r4, #48]	; 0x30
 8006a36:	6363      	str	r3, [r4, #52]	; 0x34
 8006a38:	ab10      	add	r3, sp, #64	; 0x40
 8006a3a:	4630      	mov	r0, r6
 8006a3c:	f843 4d1c 	str.w	r4, [r3, #-28]!
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	2300      	movs	r3, #0
 8006a44:	461a      	mov	r2, r3
 8006a46:	4619      	mov	r1, r3
 8006a48:	f7f9 ff96 	bl	8000978 <_Unwind_VRS_Set>
 8006a4c:	ab10      	add	r3, sp, #64	; 0x40
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f843 7d20 	str.w	r7, [r3, #-32]!
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	2300      	movs	r3, #0
 8006a58:	4619      	mov	r1, r3
 8006a5a:	4630      	mov	r0, r6
 8006a5c:	f7f9 ff8c 	bl	8000978 <_Unwind_VRS_Set>
 8006a60:	210f      	movs	r1, #15
 8006a62:	4630      	mov	r0, r6
 8006a64:	f7ff fe9e 	bl	80067a4 <_Unwind_GetGR>
 8006a68:	ab10      	add	r3, sp, #64	; 0x40
 8006a6a:	f000 0001 	and.w	r0, r0, #1
 8006a6e:	ea40 0008 	orr.w	r0, r0, r8
 8006a72:	f843 0d24 	str.w	r0, [r3, #-36]!
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	2300      	movs	r3, #0
 8006a7a:	220f      	movs	r2, #15
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	4630      	mov	r0, r6
 8006a80:	f7f9 ff7a 	bl	8000978 <_Unwind_VRS_Set>
 8006a84:	f1ba 0f02 	cmp.w	sl, #2
 8006a88:	d102      	bne.n	8006a90 <__gxx_personality_v0+0x2d4>
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f7ff fd84 	bl	8006598 <__cxa_begin_cleanup>
 8006a90:	2007      	movs	r0, #7
 8006a92:	e6ac      	b.n	80067ee <__gxx_personality_v0+0x32>
 8006a94:	aa10      	add	r2, sp, #64	; 0x40
 8006a96:	4643      	mov	r3, r8
 8006a98:	f842 4d2c 	str.w	r4, [r2, #-44]!
 8006a9c:	4641      	mov	r1, r8
 8006a9e:	9200      	str	r2, [sp, #0]
 8006aa0:	4630      	mov	r0, r6
 8006aa2:	220c      	movs	r2, #12
 8006aa4:	f045 0502 	orr.w	r5, r5, #2
 8006aa8:	f7f9 ff66 	bl	8000978 <_Unwind_VRS_Set>
 8006aac:	4630      	mov	r0, r6
 8006aae:	f7fa fcd9 	bl	8001464 <_Unwind_GetLanguageSpecificData>
 8006ab2:	4681      	mov	r9, r0
 8006ab4:	2800      	cmp	r0, #0
 8006ab6:	f43f ae94 	beq.w	80067e2 <__gxx_personality_v0+0x26>
 8006aba:	aa0a      	add	r2, sp, #40	; 0x28
 8006abc:	4601      	mov	r1, r0
 8006abe:	4630      	mov	r0, r6
 8006ac0:	f7ff fe40 	bl	8006744 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8006ac4:	4631      	mov	r1, r6
 8006ac6:	4680      	mov	r8, r0
 8006ac8:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8006acc:	f7ff fe07 	bl	80066de <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8006ad0:	210f      	movs	r1, #15
 8006ad2:	900c      	str	r0, [sp, #48]	; 0x30
 8006ad4:	4630      	mov	r0, r6
 8006ad6:	f7ff fe65 	bl	80067a4 <_Unwind_GetGR>
 8006ada:	f020 0001 	bic.w	r0, r0, #1
 8006ade:	1e47      	subs	r7, r0, #1
 8006ae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ae2:	4598      	cmp	r8, r3
 8006ae4:	f4bf af7b 	bcs.w	80069de <__gxx_personality_v0+0x222>
 8006ae8:	4642      	mov	r2, r8
 8006aea:	ab06      	add	r3, sp, #24
 8006aec:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8006af0:	2000      	movs	r0, #0
 8006af2:	f7ff fe17 	bl	8006724 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006af6:	ab07      	add	r3, sp, #28
 8006af8:	4602      	mov	r2, r0
 8006afa:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8006afe:	2000      	movs	r0, #0
 8006b00:	f7ff fe10 	bl	8006724 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006b04:	ab08      	add	r3, sp, #32
 8006b06:	4602      	mov	r2, r0
 8006b08:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8006b0c:	2000      	movs	r0, #0
 8006b0e:	f7ff fe09 	bl	8006724 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006b12:	a909      	add	r1, sp, #36	; 0x24
 8006b14:	f7ff fd76 	bl	8006604 <_ZL12read_uleb128PKhPm>
 8006b18:	9a06      	ldr	r2, [sp, #24]
 8006b1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b1c:	4413      	add	r3, r2
 8006b1e:	429f      	cmp	r7, r3
 8006b20:	4680      	mov	r8, r0
 8006b22:	f4bf aea1 	bcs.w	8006868 <__gxx_personality_v0+0xac>
 8006b26:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8006b2a:	e7d9      	b.n	8006ae0 <__gxx_personality_v0+0x324>

08006b2c <_ZSt15get_new_handlerv>:
 8006b2c:	4b02      	ldr	r3, [pc, #8]	; (8006b38 <_ZSt15get_new_handlerv+0xc>)
 8006b2e:	6818      	ldr	r0, [r3, #0]
 8006b30:	f3bf 8f5b 	dmb	ish
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	200002dc 	.word	0x200002dc

08006b3c <_ZSt17__throw_bad_allocv>:
 8006b3c:	b508      	push	{r3, lr}
 8006b3e:	f000 faaf 	bl	80070a0 <abort>

08006b42 <_ZSt20__throw_length_errorPKc>:
 8006b42:	b508      	push	{r3, lr}
 8006b44:	f000 faac 	bl	80070a0 <abort>

08006b48 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8006b48:	b510      	push	{r4, lr}
 8006b4a:	4b03      	ldr	r3, [pc, #12]	; (8006b58 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8006b4c:	6003      	str	r3, [r0, #0]
 8006b4e:	4604      	mov	r4, r0
 8006b50:	f000 f8f4 	bl	8006d3c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8006b54:	4620      	mov	r0, r4
 8006b56:	bd10      	pop	{r4, pc}
 8006b58:	08007b38 	.word	0x08007b38

08006b5c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8006b5c:	b510      	push	{r4, lr}
 8006b5e:	4604      	mov	r4, r0
 8006b60:	f7ff fff2 	bl	8006b48 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8006b64:	4620      	mov	r0, r4
 8006b66:	210c      	movs	r1, #12
 8006b68:	f000 f8c6 	bl	8006cf8 <_ZdlPvj>
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	bd10      	pop	{r4, pc}

08006b70 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8006b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b74:	9e06      	ldr	r6, [sp, #24]
 8006b76:	4296      	cmp	r6, r2
 8006b78:	4680      	mov	r8, r0
 8006b7a:	460f      	mov	r7, r1
 8006b7c:	4614      	mov	r4, r2
 8006b7e:	461d      	mov	r5, r3
 8006b80:	d103      	bne.n	8006b8a <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 8006b82:	4619      	mov	r1, r3
 8006b84:	f000 f92e 	bl	8006de4 <_ZNKSt9type_infoeqERKS_>
 8006b88:	b958      	cbnz	r0, 8006ba2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 8006b8a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006b8e:	6803      	ldr	r3, [r0, #0]
 8006b90:	9606      	str	r6, [sp, #24]
 8006b92:	6a1e      	ldr	r6, [r3, #32]
 8006b94:	4622      	mov	r2, r4
 8006b96:	462b      	mov	r3, r5
 8006b98:	4639      	mov	r1, r7
 8006b9a:	46b4      	mov	ip, r6
 8006b9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba0:	4760      	bx	ip
 8006ba2:	2006      	movs	r0, #6
 8006ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006ba8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8006ba8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bac:	460e      	mov	r6, r1
 8006bae:	4619      	mov	r1, r3
 8006bb0:	4683      	mov	fp, r0
 8006bb2:	4617      	mov	r7, r2
 8006bb4:	4699      	mov	r9, r3
 8006bb6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006bb8:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8006bbc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8006bc0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006bc2:	f000 f90f 	bl	8006de4 <_ZNKSt9type_infoeqERKS_>
 8006bc6:	b190      	cbz	r0, 8006bee <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 8006bc8:	2e00      	cmp	r6, #0
 8006bca:	602c      	str	r4, [r5, #0]
 8006bcc:	712f      	strb	r7, [r5, #4]
 8006bce:	db09      	blt.n	8006be4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8006bd0:	4434      	add	r4, r6
 8006bd2:	45a0      	cmp	r8, r4
 8006bd4:	bf0c      	ite	eq
 8006bd6:	2406      	moveq	r4, #6
 8006bd8:	2401      	movne	r4, #1
 8006bda:	71ac      	strb	r4, [r5, #6]
 8006bdc:	2000      	movs	r0, #0
 8006bde:	b001      	add	sp, #4
 8006be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be4:	3602      	adds	r6, #2
 8006be6:	d1f9      	bne.n	8006bdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8006be8:	2301      	movs	r3, #1
 8006bea:	71ab      	strb	r3, [r5, #6]
 8006bec:	e7f6      	b.n	8006bdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8006bee:	4544      	cmp	r4, r8
 8006bf0:	d104      	bne.n	8006bfc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8006bf2:	4651      	mov	r1, sl
 8006bf4:	4658      	mov	r0, fp
 8006bf6:	f000 f8f5 	bl	8006de4 <_ZNKSt9type_infoeqERKS_>
 8006bfa:	b988      	cbnz	r0, 8006c20 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 8006bfc:	f8db 0008 	ldr.w	r0, [fp, #8]
 8006c00:	6803      	ldr	r3, [r0, #0]
 8006c02:	950d      	str	r5, [sp, #52]	; 0x34
 8006c04:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006c08:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8006c0c:	940a      	str	r4, [sp, #40]	; 0x28
 8006c0e:	69dc      	ldr	r4, [r3, #28]
 8006c10:	463a      	mov	r2, r7
 8006c12:	464b      	mov	r3, r9
 8006c14:	4631      	mov	r1, r6
 8006c16:	46a4      	mov	ip, r4
 8006c18:	b001      	add	sp, #4
 8006c1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1e:	4760      	bx	ip
 8006c20:	716f      	strb	r7, [r5, #5]
 8006c22:	e7db      	b.n	8006bdc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

08006c24 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8006c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c28:	4604      	mov	r4, r0
 8006c2a:	460d      	mov	r5, r1
 8006c2c:	4616      	mov	r6, r2
 8006c2e:	461f      	mov	r7, r3
 8006c30:	f000 f898 	bl	8006d64 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8006c34:	b948      	cbnz	r0, 8006c4a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8006c36:	68a0      	ldr	r0, [r4, #8]
 8006c38:	6803      	ldr	r3, [r0, #0]
 8006c3a:	699c      	ldr	r4, [r3, #24]
 8006c3c:	4632      	mov	r2, r6
 8006c3e:	463b      	mov	r3, r7
 8006c40:	4629      	mov	r1, r5
 8006c42:	46a4      	mov	ip, r4
 8006c44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c48:	4760      	bx	ip
 8006c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006c4e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8006c4e:	7803      	ldrb	r3, [r0, #0]
 8006c50:	2b47      	cmp	r3, #71	; 0x47
 8006c52:	d117      	bne.n	8006c84 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006c54:	7843      	ldrb	r3, [r0, #1]
 8006c56:	2b4e      	cmp	r3, #78	; 0x4e
 8006c58:	d114      	bne.n	8006c84 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006c5a:	7883      	ldrb	r3, [r0, #2]
 8006c5c:	2b55      	cmp	r3, #85	; 0x55
 8006c5e:	d111      	bne.n	8006c84 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006c60:	78c3      	ldrb	r3, [r0, #3]
 8006c62:	2b43      	cmp	r3, #67	; 0x43
 8006c64:	d10e      	bne.n	8006c84 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006c66:	7903      	ldrb	r3, [r0, #4]
 8006c68:	2b43      	cmp	r3, #67	; 0x43
 8006c6a:	d10b      	bne.n	8006c84 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006c6c:	7943      	ldrb	r3, [r0, #5]
 8006c6e:	2b2b      	cmp	r3, #43	; 0x2b
 8006c70:	d108      	bne.n	8006c84 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006c72:	7983      	ldrb	r3, [r0, #6]
 8006c74:	2b2b      	cmp	r3, #43	; 0x2b
 8006c76:	d105      	bne.n	8006c84 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006c78:	79c0      	ldrb	r0, [r0, #7]
 8006c7a:	2801      	cmp	r0, #1
 8006c7c:	bf8c      	ite	hi
 8006c7e:	2000      	movhi	r0, #0
 8006c80:	2001      	movls	r0, #1
 8006c82:	4770      	bx	lr
 8006c84:	2000      	movs	r0, #0
 8006c86:	4770      	bx	lr

08006c88 <__cxa_call_terminate>:
 8006c88:	b510      	push	{r4, lr}
 8006c8a:	4604      	mov	r4, r0
 8006c8c:	b148      	cbz	r0, 8006ca2 <__cxa_call_terminate+0x1a>
 8006c8e:	f7ff fb3e 	bl	800630e <__cxa_begin_catch>
 8006c92:	4620      	mov	r0, r4
 8006c94:	f7ff ffdb 	bl	8006c4e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006c98:	b118      	cbz	r0, 8006ca2 <__cxa_call_terminate+0x1a>
 8006c9a:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8006c9e:	f7ff fb84 	bl	80063aa <_ZN10__cxxabiv111__terminateEPFvvE>
 8006ca2:	f7ff fb8f 	bl	80063c4 <_ZSt9terminatev>

08006ca6 <__cxa_call_unexpected>:
 8006ca6:	b538      	push	{r3, r4, r5, lr}
 8006ca8:	4602      	mov	r2, r0
 8006caa:	f7ff ffd0 	bl	8006c4e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006cae:	b140      	cbz	r0, 8006cc2 <__cxa_call_unexpected+0x1c>
 8006cb0:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8006cb4:	2500      	movs	r5, #0
 8006cb6:	4610      	mov	r0, r2
 8006cb8:	f7ff fb29 	bl	800630e <__cxa_begin_catch>
 8006cbc:	b125      	cbz	r5, 8006cc8 <__cxa_call_unexpected+0x22>
 8006cbe:	f7ff fb93 	bl	80063e8 <_ZSt10unexpectedv>
 8006cc2:	4604      	mov	r4, r0
 8006cc4:	2501      	movs	r5, #1
 8006cc6:	e7f6      	b.n	8006cb6 <__cxa_call_unexpected+0x10>
 8006cc8:	4620      	mov	r0, r4
 8006cca:	f7ff fb80 	bl	80063ce <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

08006cd0 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 8006cd0:	b538      	push	{r3, r4, r5, lr}
 8006cd2:	4c08      	ldr	r4, [pc, #32]	; (8006cf4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8006cd4:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 8006cd8:	4628      	mov	r0, r5
 8006cda:	60e5      	str	r5, [r4, #12]
 8006cdc:	f000 fa1a 	bl	8007114 <malloc>
 8006ce0:	60a0      	str	r0, [r4, #8]
 8006ce2:	b910      	cbnz	r0, 8006cea <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 8006ce4:	60e0      	str	r0, [r4, #12]
 8006ce6:	6060      	str	r0, [r4, #4]
 8006ce8:	bd38      	pop	{r3, r4, r5, pc}
 8006cea:	2300      	movs	r3, #0
 8006cec:	6060      	str	r0, [r4, #4]
 8006cee:	6005      	str	r5, [r0, #0]
 8006cf0:	6043      	str	r3, [r0, #4]
 8006cf2:	bd38      	pop	{r3, r4, r5, pc}
 8006cf4:	200002e0 	.word	0x200002e0

08006cf8 <_ZdlPvj>:
 8006cf8:	f7ff bae5 	b.w	80062c6 <_ZdlPv>

08006cfc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8006cfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006cfe:	2310      	movs	r3, #16
 8006d00:	9302      	str	r3, [sp, #8]
 8006d02:	6803      	ldr	r3, [r0, #0]
 8006d04:	2400      	movs	r4, #0
 8006d06:	4615      	mov	r5, r2
 8006d08:	699e      	ldr	r6, [r3, #24]
 8006d0a:	9400      	str	r4, [sp, #0]
 8006d0c:	466b      	mov	r3, sp
 8006d0e:	f88d 4004 	strb.w	r4, [sp, #4]
 8006d12:	9403      	str	r4, [sp, #12]
 8006d14:	6812      	ldr	r2, [r2, #0]
 8006d16:	47b0      	blx	r6
 8006d18:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006d1c:	f003 0306 	and.w	r3, r3, #6
 8006d20:	2b06      	cmp	r3, #6
 8006d22:	bf03      	ittte	eq
 8006d24:	9b00      	ldreq	r3, [sp, #0]
 8006d26:	602b      	streq	r3, [r5, #0]
 8006d28:	2001      	moveq	r0, #1
 8006d2a:	4620      	movne	r0, r4
 8006d2c:	b004      	add	sp, #16
 8006d2e:	bd70      	pop	{r4, r5, r6, pc}

08006d30 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8006d30:	9800      	ldr	r0, [sp, #0]
 8006d32:	4290      	cmp	r0, r2
 8006d34:	bf0c      	ite	eq
 8006d36:	2006      	moveq	r0, #6
 8006d38:	2001      	movne	r0, #1
 8006d3a:	4770      	bx	lr

08006d3c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8006d3c:	b510      	push	{r4, lr}
 8006d3e:	4b03      	ldr	r3, [pc, #12]	; (8006d4c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8006d40:	6003      	str	r3, [r0, #0]
 8006d42:	4604      	mov	r4, r0
 8006d44:	f000 f84b 	bl	8006dde <_ZNSt9type_infoD1Ev>
 8006d48:	4620      	mov	r0, r4
 8006d4a:	bd10      	pop	{r4, pc}
 8006d4c:	08007b94 	.word	0x08007b94

08006d50 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8006d50:	b510      	push	{r4, lr}
 8006d52:	4604      	mov	r4, r0
 8006d54:	f7ff fff2 	bl	8006d3c <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8006d58:	4620      	mov	r0, r4
 8006d5a:	2108      	movs	r1, #8
 8006d5c:	f7ff ffcc 	bl	8006cf8 <_ZdlPvj>
 8006d60:	4620      	mov	r0, r4
 8006d62:	bd10      	pop	{r4, pc}

08006d64 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8006d64:	b538      	push	{r3, r4, r5, lr}
 8006d66:	4615      	mov	r5, r2
 8006d68:	461c      	mov	r4, r3
 8006d6a:	f000 f83b 	bl	8006de4 <_ZNKSt9type_infoeqERKS_>
 8006d6e:	b120      	cbz	r0, 8006d7a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8006d70:	2308      	movs	r3, #8
 8006d72:	60e3      	str	r3, [r4, #12]
 8006d74:	2306      	movs	r3, #6
 8006d76:	6025      	str	r5, [r4, #0]
 8006d78:	7123      	strb	r3, [r4, #4]
 8006d7a:	bd38      	pop	{r3, r4, r5, pc}

08006d7c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8006d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d80:	4605      	mov	r5, r0
 8006d82:	460c      	mov	r4, r1
 8006d84:	4616      	mov	r6, r2
 8006d86:	461f      	mov	r7, r3
 8006d88:	f000 f82c 	bl	8006de4 <_ZNKSt9type_infoeqERKS_>
 8006d8c:	b948      	cbnz	r0, 8006da2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8006d8e:	2f03      	cmp	r7, #3
 8006d90:	d807      	bhi.n	8006da2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8006d92:	6823      	ldr	r3, [r4, #0]
 8006d94:	4632      	mov	r2, r6
 8006d96:	4629      	mov	r1, r5
 8006d98:	4620      	mov	r0, r4
 8006d9a:	695b      	ldr	r3, [r3, #20]
 8006d9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006da0:	4718      	bx	r3
 8006da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006da6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8006da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006daa:	9e06      	ldr	r6, [sp, #24]
 8006dac:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006dae:	4698      	mov	r8, r3
 8006db0:	9b08      	ldr	r3, [sp, #32]
 8006db2:	429e      	cmp	r6, r3
 8006db4:	4607      	mov	r7, r0
 8006db6:	4615      	mov	r5, r2
 8006db8:	d103      	bne.n	8006dc2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 8006dba:	9907      	ldr	r1, [sp, #28]
 8006dbc:	f000 f812 	bl	8006de4 <_ZNKSt9type_infoeqERKS_>
 8006dc0:	b958      	cbnz	r0, 8006dda <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 8006dc2:	4641      	mov	r1, r8
 8006dc4:	4638      	mov	r0, r7
 8006dc6:	f000 f80d 	bl	8006de4 <_ZNKSt9type_infoeqERKS_>
 8006dca:	b118      	cbz	r0, 8006dd4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 8006dcc:	2301      	movs	r3, #1
 8006dce:	6026      	str	r6, [r4, #0]
 8006dd0:	7125      	strb	r5, [r4, #4]
 8006dd2:	71a3      	strb	r3, [r4, #6]
 8006dd4:	2000      	movs	r0, #0
 8006dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dda:	7165      	strb	r5, [r4, #5]
 8006ddc:	e7fa      	b.n	8006dd4 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

08006dde <_ZNSt9type_infoD1Ev>:
 8006dde:	4770      	bx	lr

08006de0 <_ZNKSt9type_info14__is_pointer_pEv>:
 8006de0:	2000      	movs	r0, #0
 8006de2:	4770      	bx	lr

08006de4 <_ZNKSt9type_infoeqERKS_>:
 8006de4:	4281      	cmp	r1, r0
 8006de6:	b508      	push	{r3, lr}
 8006de8:	d00e      	beq.n	8006e08 <_ZNKSt9type_infoeqERKS_+0x24>
 8006dea:	6840      	ldr	r0, [r0, #4]
 8006dec:	7803      	ldrb	r3, [r0, #0]
 8006dee:	2b2a      	cmp	r3, #42	; 0x2a
 8006df0:	d00c      	beq.n	8006e0c <_ZNKSt9type_infoeqERKS_+0x28>
 8006df2:	6849      	ldr	r1, [r1, #4]
 8006df4:	780b      	ldrb	r3, [r1, #0]
 8006df6:	2b2a      	cmp	r3, #42	; 0x2a
 8006df8:	bf08      	it	eq
 8006dfa:	3101      	addeq	r1, #1
 8006dfc:	f7f9 fa38 	bl	8000270 <strcmp>
 8006e00:	fab0 f080 	clz	r0, r0
 8006e04:	0940      	lsrs	r0, r0, #5
 8006e06:	bd08      	pop	{r3, pc}
 8006e08:	2001      	movs	r0, #1
 8006e0a:	bd08      	pop	{r3, pc}
 8006e0c:	2000      	movs	r0, #0
 8006e0e:	bd08      	pop	{r3, pc}

08006e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8006e10:	4b24      	ldr	r3, [pc, #144]	; (8006ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	07d0      	lsls	r0, r2, #31
 8006e16:	bf5c      	itt	pl
 8006e18:	2201      	movpl	r2, #1
 8006e1a:	601a      	strpl	r2, [r3, #0]
 8006e1c:	4b22      	ldr	r3, [pc, #136]	; (8006ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	07d1      	lsls	r1, r2, #31
 8006e22:	bf5c      	itt	pl
 8006e24:	2201      	movpl	r2, #1
 8006e26:	601a      	strpl	r2, [r3, #0]
 8006e28:	4b20      	ldr	r3, [pc, #128]	; (8006eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	07d2      	lsls	r2, r2, #31
 8006e2e:	bf5c      	itt	pl
 8006e30:	2201      	movpl	r2, #1
 8006e32:	601a      	strpl	r2, [r3, #0]
 8006e34:	4b1e      	ldr	r3, [pc, #120]	; (8006eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	07d0      	lsls	r0, r2, #31
 8006e3a:	bf5c      	itt	pl
 8006e3c:	2201      	movpl	r2, #1
 8006e3e:	601a      	strpl	r2, [r3, #0]
 8006e40:	4b1c      	ldr	r3, [pc, #112]	; (8006eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8006e42:	681a      	ldr	r2, [r3, #0]
 8006e44:	07d1      	lsls	r1, r2, #31
 8006e46:	bf5c      	itt	pl
 8006e48:	2201      	movpl	r2, #1
 8006e4a:	601a      	strpl	r2, [r3, #0]
 8006e4c:	4b1a      	ldr	r3, [pc, #104]	; (8006eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	07d2      	lsls	r2, r2, #31
 8006e52:	bf5c      	itt	pl
 8006e54:	2201      	movpl	r2, #1
 8006e56:	601a      	strpl	r2, [r3, #0]
 8006e58:	4b18      	ldr	r3, [pc, #96]	; (8006ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	07d0      	lsls	r0, r2, #31
 8006e5e:	bf5c      	itt	pl
 8006e60:	2201      	movpl	r2, #1
 8006e62:	601a      	strpl	r2, [r3, #0]
 8006e64:	4b16      	ldr	r3, [pc, #88]	; (8006ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	07d1      	lsls	r1, r2, #31
 8006e6a:	bf5c      	itt	pl
 8006e6c:	2201      	movpl	r2, #1
 8006e6e:	601a      	strpl	r2, [r3, #0]
 8006e70:	4b14      	ldr	r3, [pc, #80]	; (8006ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	07d2      	lsls	r2, r2, #31
 8006e76:	bf5c      	itt	pl
 8006e78:	2201      	movpl	r2, #1
 8006e7a:	601a      	strpl	r2, [r3, #0]
 8006e7c:	4b12      	ldr	r3, [pc, #72]	; (8006ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	07d0      	lsls	r0, r2, #31
 8006e82:	bf5c      	itt	pl
 8006e84:	2201      	movpl	r2, #1
 8006e86:	601a      	strpl	r2, [r3, #0]
 8006e88:	4b10      	ldr	r3, [pc, #64]	; (8006ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	07d1      	lsls	r1, r2, #31
 8006e8e:	bf5c      	itt	pl
 8006e90:	2201      	movpl	r2, #1
 8006e92:	601a      	strpl	r2, [r3, #0]
 8006e94:	4b0e      	ldr	r3, [pc, #56]	; (8006ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	07d2      	lsls	r2, r2, #31
 8006e9a:	bf5c      	itt	pl
 8006e9c:	2201      	movpl	r2, #1
 8006e9e:	601a      	strpl	r2, [r3, #0]
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	2000031c 	.word	0x2000031c
 8006ea8:	20000318 	.word	0x20000318
 8006eac:	20000314 	.word	0x20000314
 8006eb0:	20000310 	.word	0x20000310
 8006eb4:	2000030c 	.word	0x2000030c
 8006eb8:	20000308 	.word	0x20000308
 8006ebc:	20000304 	.word	0x20000304
 8006ec0:	20000300 	.word	0x20000300
 8006ec4:	200002fc 	.word	0x200002fc
 8006ec8:	200002f8 	.word	0x200002f8
 8006ecc:	200002f4 	.word	0x200002f4
 8006ed0:	200002f0 	.word	0x200002f0

08006ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8006ed4:	4b18      	ldr	r3, [pc, #96]	; (8006f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	07d1      	lsls	r1, r2, #31
 8006eda:	bf5c      	itt	pl
 8006edc:	2201      	movpl	r2, #1
 8006ede:	601a      	strpl	r2, [r3, #0]
 8006ee0:	4b16      	ldr	r3, [pc, #88]	; (8006f3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	07d2      	lsls	r2, r2, #31
 8006ee6:	bf5c      	itt	pl
 8006ee8:	2201      	movpl	r2, #1
 8006eea:	601a      	strpl	r2, [r3, #0]
 8006eec:	4b14      	ldr	r3, [pc, #80]	; (8006f40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	07d0      	lsls	r0, r2, #31
 8006ef2:	bf5c      	itt	pl
 8006ef4:	2201      	movpl	r2, #1
 8006ef6:	601a      	strpl	r2, [r3, #0]
 8006ef8:	4b12      	ldr	r3, [pc, #72]	; (8006f44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	07d1      	lsls	r1, r2, #31
 8006efe:	bf5c      	itt	pl
 8006f00:	2201      	movpl	r2, #1
 8006f02:	601a      	strpl	r2, [r3, #0]
 8006f04:	4b10      	ldr	r3, [pc, #64]	; (8006f48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	07d2      	lsls	r2, r2, #31
 8006f0a:	bf5c      	itt	pl
 8006f0c:	2201      	movpl	r2, #1
 8006f0e:	601a      	strpl	r2, [r3, #0]
 8006f10:	4b0e      	ldr	r3, [pc, #56]	; (8006f4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	07d0      	lsls	r0, r2, #31
 8006f16:	bf5c      	itt	pl
 8006f18:	2201      	movpl	r2, #1
 8006f1a:	601a      	strpl	r2, [r3, #0]
 8006f1c:	4b0c      	ldr	r3, [pc, #48]	; (8006f50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	07d1      	lsls	r1, r2, #31
 8006f22:	bf5c      	itt	pl
 8006f24:	2201      	movpl	r2, #1
 8006f26:	601a      	strpl	r2, [r3, #0]
 8006f28:	4b0a      	ldr	r3, [pc, #40]	; (8006f54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	07d2      	lsls	r2, r2, #31
 8006f2e:	bf5c      	itt	pl
 8006f30:	2201      	movpl	r2, #1
 8006f32:	601a      	strpl	r2, [r3, #0]
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	2000033c 	.word	0x2000033c
 8006f3c:	20000338 	.word	0x20000338
 8006f40:	20000334 	.word	0x20000334
 8006f44:	20000330 	.word	0x20000330
 8006f48:	2000032c 	.word	0x2000032c
 8006f4c:	20000328 	.word	0x20000328
 8006f50:	20000324 	.word	0x20000324
 8006f54:	20000320 	.word	0x20000320

08006f58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8006f58:	4b24      	ldr	r3, [pc, #144]	; (8006fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	07d0      	lsls	r0, r2, #31
 8006f5e:	bf5c      	itt	pl
 8006f60:	2201      	movpl	r2, #1
 8006f62:	601a      	strpl	r2, [r3, #0]
 8006f64:	4b22      	ldr	r3, [pc, #136]	; (8006ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	07d1      	lsls	r1, r2, #31
 8006f6a:	bf5c      	itt	pl
 8006f6c:	2201      	movpl	r2, #1
 8006f6e:	601a      	strpl	r2, [r3, #0]
 8006f70:	4b20      	ldr	r3, [pc, #128]	; (8006ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	07d2      	lsls	r2, r2, #31
 8006f76:	bf5c      	itt	pl
 8006f78:	2201      	movpl	r2, #1
 8006f7a:	601a      	strpl	r2, [r3, #0]
 8006f7c:	4b1e      	ldr	r3, [pc, #120]	; (8006ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	07d0      	lsls	r0, r2, #31
 8006f82:	bf5c      	itt	pl
 8006f84:	2201      	movpl	r2, #1
 8006f86:	601a      	strpl	r2, [r3, #0]
 8006f88:	4b1c      	ldr	r3, [pc, #112]	; (8006ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	07d1      	lsls	r1, r2, #31
 8006f8e:	bf5c      	itt	pl
 8006f90:	2201      	movpl	r2, #1
 8006f92:	601a      	strpl	r2, [r3, #0]
 8006f94:	4b1a      	ldr	r3, [pc, #104]	; (8007000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	07d2      	lsls	r2, r2, #31
 8006f9a:	bf5c      	itt	pl
 8006f9c:	2201      	movpl	r2, #1
 8006f9e:	601a      	strpl	r2, [r3, #0]
 8006fa0:	4b18      	ldr	r3, [pc, #96]	; (8007004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8006fa2:	681a      	ldr	r2, [r3, #0]
 8006fa4:	07d0      	lsls	r0, r2, #31
 8006fa6:	bf5c      	itt	pl
 8006fa8:	2201      	movpl	r2, #1
 8006faa:	601a      	strpl	r2, [r3, #0]
 8006fac:	4b16      	ldr	r3, [pc, #88]	; (8007008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	07d1      	lsls	r1, r2, #31
 8006fb2:	bf5c      	itt	pl
 8006fb4:	2201      	movpl	r2, #1
 8006fb6:	601a      	strpl	r2, [r3, #0]
 8006fb8:	4b14      	ldr	r3, [pc, #80]	; (800700c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	07d2      	lsls	r2, r2, #31
 8006fbe:	bf5c      	itt	pl
 8006fc0:	2201      	movpl	r2, #1
 8006fc2:	601a      	strpl	r2, [r3, #0]
 8006fc4:	4b12      	ldr	r3, [pc, #72]	; (8007010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	07d0      	lsls	r0, r2, #31
 8006fca:	bf5c      	itt	pl
 8006fcc:	2201      	movpl	r2, #1
 8006fce:	601a      	strpl	r2, [r3, #0]
 8006fd0:	4b10      	ldr	r3, [pc, #64]	; (8007014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	07d1      	lsls	r1, r2, #31
 8006fd6:	bf5c      	itt	pl
 8006fd8:	2201      	movpl	r2, #1
 8006fda:	601a      	strpl	r2, [r3, #0]
 8006fdc:	4b0e      	ldr	r3, [pc, #56]	; (8007018 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	07d2      	lsls	r2, r2, #31
 8006fe2:	bf5c      	itt	pl
 8006fe4:	2201      	movpl	r2, #1
 8006fe6:	601a      	strpl	r2, [r3, #0]
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	2000036c 	.word	0x2000036c
 8006ff0:	20000368 	.word	0x20000368
 8006ff4:	20000364 	.word	0x20000364
 8006ff8:	20000360 	.word	0x20000360
 8006ffc:	2000035c 	.word	0x2000035c
 8007000:	20000358 	.word	0x20000358
 8007004:	20000354 	.word	0x20000354
 8007008:	20000350 	.word	0x20000350
 800700c:	2000034c 	.word	0x2000034c
 8007010:	20000348 	.word	0x20000348
 8007014:	20000344 	.word	0x20000344
 8007018:	20000340 	.word	0x20000340

0800701c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 800701c:	4b18      	ldr	r3, [pc, #96]	; (8007080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	07d1      	lsls	r1, r2, #31
 8007022:	bf5c      	itt	pl
 8007024:	2201      	movpl	r2, #1
 8007026:	601a      	strpl	r2, [r3, #0]
 8007028:	4b16      	ldr	r3, [pc, #88]	; (8007084 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	07d2      	lsls	r2, r2, #31
 800702e:	bf5c      	itt	pl
 8007030:	2201      	movpl	r2, #1
 8007032:	601a      	strpl	r2, [r3, #0]
 8007034:	4b14      	ldr	r3, [pc, #80]	; (8007088 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	07d0      	lsls	r0, r2, #31
 800703a:	bf5c      	itt	pl
 800703c:	2201      	movpl	r2, #1
 800703e:	601a      	strpl	r2, [r3, #0]
 8007040:	4b12      	ldr	r3, [pc, #72]	; (800708c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	07d1      	lsls	r1, r2, #31
 8007046:	bf5c      	itt	pl
 8007048:	2201      	movpl	r2, #1
 800704a:	601a      	strpl	r2, [r3, #0]
 800704c:	4b10      	ldr	r3, [pc, #64]	; (8007090 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	07d2      	lsls	r2, r2, #31
 8007052:	bf5c      	itt	pl
 8007054:	2201      	movpl	r2, #1
 8007056:	601a      	strpl	r2, [r3, #0]
 8007058:	4b0e      	ldr	r3, [pc, #56]	; (8007094 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	07d0      	lsls	r0, r2, #31
 800705e:	bf5c      	itt	pl
 8007060:	2201      	movpl	r2, #1
 8007062:	601a      	strpl	r2, [r3, #0]
 8007064:	4b0c      	ldr	r3, [pc, #48]	; (8007098 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	07d1      	lsls	r1, r2, #31
 800706a:	bf5c      	itt	pl
 800706c:	2201      	movpl	r2, #1
 800706e:	601a      	strpl	r2, [r3, #0]
 8007070:	4b0a      	ldr	r3, [pc, #40]	; (800709c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	07d2      	lsls	r2, r2, #31
 8007076:	bf5c      	itt	pl
 8007078:	2201      	movpl	r2, #1
 800707a:	601a      	strpl	r2, [r3, #0]
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	2000038c 	.word	0x2000038c
 8007084:	20000388 	.word	0x20000388
 8007088:	20000384 	.word	0x20000384
 800708c:	20000380 	.word	0x20000380
 8007090:	2000037c 	.word	0x2000037c
 8007094:	20000378 	.word	0x20000378
 8007098:	20000374 	.word	0x20000374
 800709c:	20000370 	.word	0x20000370

080070a0 <abort>:
 80070a0:	b508      	push	{r3, lr}
 80070a2:	2006      	movs	r0, #6
 80070a4:	f000 f958 	bl	8007358 <raise>
 80070a8:	2001      	movs	r0, #1
 80070aa:	f000 fccb 	bl	8007a44 <_exit>
	...

080070b0 <__cxa_atexit>:
 80070b0:	b510      	push	{r4, lr}
 80070b2:	4c05      	ldr	r4, [pc, #20]	; (80070c8 <__cxa_atexit+0x18>)
 80070b4:	4613      	mov	r3, r2
 80070b6:	b12c      	cbz	r4, 80070c4 <__cxa_atexit+0x14>
 80070b8:	460a      	mov	r2, r1
 80070ba:	4601      	mov	r1, r0
 80070bc:	2002      	movs	r0, #2
 80070be:	f3af 8000 	nop.w
 80070c2:	bd10      	pop	{r4, pc}
 80070c4:	4620      	mov	r0, r4
 80070c6:	bd10      	pop	{r4, pc}
 80070c8:	00000000 	.word	0x00000000

080070cc <__libc_init_array>:
 80070cc:	b570      	push	{r4, r5, r6, lr}
 80070ce:	4e0d      	ldr	r6, [pc, #52]	; (8007104 <__libc_init_array+0x38>)
 80070d0:	4c0d      	ldr	r4, [pc, #52]	; (8007108 <__libc_init_array+0x3c>)
 80070d2:	1ba4      	subs	r4, r4, r6
 80070d4:	10a4      	asrs	r4, r4, #2
 80070d6:	2500      	movs	r5, #0
 80070d8:	42a5      	cmp	r5, r4
 80070da:	d109      	bne.n	80070f0 <__libc_init_array+0x24>
 80070dc:	4e0b      	ldr	r6, [pc, #44]	; (800710c <__libc_init_array+0x40>)
 80070de:	4c0c      	ldr	r4, [pc, #48]	; (8007110 <__libc_init_array+0x44>)
 80070e0:	f000 fcb2 	bl	8007a48 <_init>
 80070e4:	1ba4      	subs	r4, r4, r6
 80070e6:	10a4      	asrs	r4, r4, #2
 80070e8:	2500      	movs	r5, #0
 80070ea:	42a5      	cmp	r5, r4
 80070ec:	d105      	bne.n	80070fa <__libc_init_array+0x2e>
 80070ee:	bd70      	pop	{r4, r5, r6, pc}
 80070f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070f4:	4798      	blx	r3
 80070f6:	3501      	adds	r5, #1
 80070f8:	e7ee      	b.n	80070d8 <__libc_init_array+0xc>
 80070fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80070fe:	4798      	blx	r3
 8007100:	3501      	adds	r5, #1
 8007102:	e7f2      	b.n	80070ea <__libc_init_array+0x1e>
 8007104:	08008668 	.word	0x08008668
 8007108:	08008668 	.word	0x08008668
 800710c:	08008668 	.word	0x08008668
 8007110:	08008684 	.word	0x08008684

08007114 <malloc>:
 8007114:	4b02      	ldr	r3, [pc, #8]	; (8007120 <malloc+0xc>)
 8007116:	4601      	mov	r1, r0
 8007118:	6818      	ldr	r0, [r3, #0]
 800711a:	f000 b887 	b.w	800722c <_malloc_r>
 800711e:	bf00      	nop
 8007120:	20000018 	.word	0x20000018

08007124 <free>:
 8007124:	4b02      	ldr	r3, [pc, #8]	; (8007130 <free+0xc>)
 8007126:	4601      	mov	r1, r0
 8007128:	6818      	ldr	r0, [r3, #0]
 800712a:	f000 b831 	b.w	8007190 <_free_r>
 800712e:	bf00      	nop
 8007130:	20000018 	.word	0x20000018

08007134 <memcpy>:
 8007134:	b510      	push	{r4, lr}
 8007136:	1e43      	subs	r3, r0, #1
 8007138:	440a      	add	r2, r1
 800713a:	4291      	cmp	r1, r2
 800713c:	d100      	bne.n	8007140 <memcpy+0xc>
 800713e:	bd10      	pop	{r4, pc}
 8007140:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007144:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007148:	e7f7      	b.n	800713a <memcpy+0x6>

0800714a <memmove>:
 800714a:	4288      	cmp	r0, r1
 800714c:	b510      	push	{r4, lr}
 800714e:	eb01 0302 	add.w	r3, r1, r2
 8007152:	d803      	bhi.n	800715c <memmove+0x12>
 8007154:	1e42      	subs	r2, r0, #1
 8007156:	4299      	cmp	r1, r3
 8007158:	d10c      	bne.n	8007174 <memmove+0x2a>
 800715a:	bd10      	pop	{r4, pc}
 800715c:	4298      	cmp	r0, r3
 800715e:	d2f9      	bcs.n	8007154 <memmove+0xa>
 8007160:	1881      	adds	r1, r0, r2
 8007162:	1ad2      	subs	r2, r2, r3
 8007164:	42d3      	cmn	r3, r2
 8007166:	d100      	bne.n	800716a <memmove+0x20>
 8007168:	bd10      	pop	{r4, pc}
 800716a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800716e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007172:	e7f7      	b.n	8007164 <memmove+0x1a>
 8007174:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007178:	f802 4f01 	strb.w	r4, [r2, #1]!
 800717c:	e7eb      	b.n	8007156 <memmove+0xc>

0800717e <memset>:
 800717e:	4402      	add	r2, r0
 8007180:	4603      	mov	r3, r0
 8007182:	4293      	cmp	r3, r2
 8007184:	d100      	bne.n	8007188 <memset+0xa>
 8007186:	4770      	bx	lr
 8007188:	f803 1b01 	strb.w	r1, [r3], #1
 800718c:	e7f9      	b.n	8007182 <memset+0x4>
	...

08007190 <_free_r>:
 8007190:	b538      	push	{r3, r4, r5, lr}
 8007192:	4605      	mov	r5, r0
 8007194:	2900      	cmp	r1, #0
 8007196:	d045      	beq.n	8007224 <_free_r+0x94>
 8007198:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800719c:	1f0c      	subs	r4, r1, #4
 800719e:	2b00      	cmp	r3, #0
 80071a0:	bfb8      	it	lt
 80071a2:	18e4      	addlt	r4, r4, r3
 80071a4:	f000 f918 	bl	80073d8 <__malloc_lock>
 80071a8:	4a1f      	ldr	r2, [pc, #124]	; (8007228 <_free_r+0x98>)
 80071aa:	6813      	ldr	r3, [r2, #0]
 80071ac:	4610      	mov	r0, r2
 80071ae:	b933      	cbnz	r3, 80071be <_free_r+0x2e>
 80071b0:	6063      	str	r3, [r4, #4]
 80071b2:	6014      	str	r4, [r2, #0]
 80071b4:	4628      	mov	r0, r5
 80071b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071ba:	f000 b90e 	b.w	80073da <__malloc_unlock>
 80071be:	42a3      	cmp	r3, r4
 80071c0:	d90c      	bls.n	80071dc <_free_r+0x4c>
 80071c2:	6821      	ldr	r1, [r4, #0]
 80071c4:	1862      	adds	r2, r4, r1
 80071c6:	4293      	cmp	r3, r2
 80071c8:	bf04      	itt	eq
 80071ca:	681a      	ldreq	r2, [r3, #0]
 80071cc:	685b      	ldreq	r3, [r3, #4]
 80071ce:	6063      	str	r3, [r4, #4]
 80071d0:	bf04      	itt	eq
 80071d2:	1852      	addeq	r2, r2, r1
 80071d4:	6022      	streq	r2, [r4, #0]
 80071d6:	6004      	str	r4, [r0, #0]
 80071d8:	e7ec      	b.n	80071b4 <_free_r+0x24>
 80071da:	4613      	mov	r3, r2
 80071dc:	685a      	ldr	r2, [r3, #4]
 80071de:	b10a      	cbz	r2, 80071e4 <_free_r+0x54>
 80071e0:	42a2      	cmp	r2, r4
 80071e2:	d9fa      	bls.n	80071da <_free_r+0x4a>
 80071e4:	6819      	ldr	r1, [r3, #0]
 80071e6:	1858      	adds	r0, r3, r1
 80071e8:	42a0      	cmp	r0, r4
 80071ea:	d10b      	bne.n	8007204 <_free_r+0x74>
 80071ec:	6820      	ldr	r0, [r4, #0]
 80071ee:	4401      	add	r1, r0
 80071f0:	1858      	adds	r0, r3, r1
 80071f2:	4282      	cmp	r2, r0
 80071f4:	6019      	str	r1, [r3, #0]
 80071f6:	d1dd      	bne.n	80071b4 <_free_r+0x24>
 80071f8:	6810      	ldr	r0, [r2, #0]
 80071fa:	6852      	ldr	r2, [r2, #4]
 80071fc:	605a      	str	r2, [r3, #4]
 80071fe:	4401      	add	r1, r0
 8007200:	6019      	str	r1, [r3, #0]
 8007202:	e7d7      	b.n	80071b4 <_free_r+0x24>
 8007204:	d902      	bls.n	800720c <_free_r+0x7c>
 8007206:	230c      	movs	r3, #12
 8007208:	602b      	str	r3, [r5, #0]
 800720a:	e7d3      	b.n	80071b4 <_free_r+0x24>
 800720c:	6820      	ldr	r0, [r4, #0]
 800720e:	1821      	adds	r1, r4, r0
 8007210:	428a      	cmp	r2, r1
 8007212:	bf04      	itt	eq
 8007214:	6811      	ldreq	r1, [r2, #0]
 8007216:	6852      	ldreq	r2, [r2, #4]
 8007218:	6062      	str	r2, [r4, #4]
 800721a:	bf04      	itt	eq
 800721c:	1809      	addeq	r1, r1, r0
 800721e:	6021      	streq	r1, [r4, #0]
 8007220:	605c      	str	r4, [r3, #4]
 8007222:	e7c7      	b.n	80071b4 <_free_r+0x24>
 8007224:	bd38      	pop	{r3, r4, r5, pc}
 8007226:	bf00      	nop
 8007228:	20000390 	.word	0x20000390

0800722c <_malloc_r>:
 800722c:	b570      	push	{r4, r5, r6, lr}
 800722e:	1ccd      	adds	r5, r1, #3
 8007230:	f025 0503 	bic.w	r5, r5, #3
 8007234:	3508      	adds	r5, #8
 8007236:	2d0c      	cmp	r5, #12
 8007238:	bf38      	it	cc
 800723a:	250c      	movcc	r5, #12
 800723c:	2d00      	cmp	r5, #0
 800723e:	4606      	mov	r6, r0
 8007240:	db01      	blt.n	8007246 <_malloc_r+0x1a>
 8007242:	42a9      	cmp	r1, r5
 8007244:	d903      	bls.n	800724e <_malloc_r+0x22>
 8007246:	230c      	movs	r3, #12
 8007248:	6033      	str	r3, [r6, #0]
 800724a:	2000      	movs	r0, #0
 800724c:	bd70      	pop	{r4, r5, r6, pc}
 800724e:	f000 f8c3 	bl	80073d8 <__malloc_lock>
 8007252:	4a23      	ldr	r2, [pc, #140]	; (80072e0 <_malloc_r+0xb4>)
 8007254:	6814      	ldr	r4, [r2, #0]
 8007256:	4621      	mov	r1, r4
 8007258:	b991      	cbnz	r1, 8007280 <_malloc_r+0x54>
 800725a:	4c22      	ldr	r4, [pc, #136]	; (80072e4 <_malloc_r+0xb8>)
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	b91b      	cbnz	r3, 8007268 <_malloc_r+0x3c>
 8007260:	4630      	mov	r0, r6
 8007262:	f000 f841 	bl	80072e8 <_sbrk_r>
 8007266:	6020      	str	r0, [r4, #0]
 8007268:	4629      	mov	r1, r5
 800726a:	4630      	mov	r0, r6
 800726c:	f000 f83c 	bl	80072e8 <_sbrk_r>
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	d126      	bne.n	80072c2 <_malloc_r+0x96>
 8007274:	230c      	movs	r3, #12
 8007276:	6033      	str	r3, [r6, #0]
 8007278:	4630      	mov	r0, r6
 800727a:	f000 f8ae 	bl	80073da <__malloc_unlock>
 800727e:	e7e4      	b.n	800724a <_malloc_r+0x1e>
 8007280:	680b      	ldr	r3, [r1, #0]
 8007282:	1b5b      	subs	r3, r3, r5
 8007284:	d41a      	bmi.n	80072bc <_malloc_r+0x90>
 8007286:	2b0b      	cmp	r3, #11
 8007288:	d90f      	bls.n	80072aa <_malloc_r+0x7e>
 800728a:	600b      	str	r3, [r1, #0]
 800728c:	50cd      	str	r5, [r1, r3]
 800728e:	18cc      	adds	r4, r1, r3
 8007290:	4630      	mov	r0, r6
 8007292:	f000 f8a2 	bl	80073da <__malloc_unlock>
 8007296:	f104 000b 	add.w	r0, r4, #11
 800729a:	1d23      	adds	r3, r4, #4
 800729c:	f020 0007 	bic.w	r0, r0, #7
 80072a0:	1ac3      	subs	r3, r0, r3
 80072a2:	d01b      	beq.n	80072dc <_malloc_r+0xb0>
 80072a4:	425a      	negs	r2, r3
 80072a6:	50e2      	str	r2, [r4, r3]
 80072a8:	bd70      	pop	{r4, r5, r6, pc}
 80072aa:	428c      	cmp	r4, r1
 80072ac:	bf0d      	iteet	eq
 80072ae:	6863      	ldreq	r3, [r4, #4]
 80072b0:	684b      	ldrne	r3, [r1, #4]
 80072b2:	6063      	strne	r3, [r4, #4]
 80072b4:	6013      	streq	r3, [r2, #0]
 80072b6:	bf18      	it	ne
 80072b8:	460c      	movne	r4, r1
 80072ba:	e7e9      	b.n	8007290 <_malloc_r+0x64>
 80072bc:	460c      	mov	r4, r1
 80072be:	6849      	ldr	r1, [r1, #4]
 80072c0:	e7ca      	b.n	8007258 <_malloc_r+0x2c>
 80072c2:	1cc4      	adds	r4, r0, #3
 80072c4:	f024 0403 	bic.w	r4, r4, #3
 80072c8:	42a0      	cmp	r0, r4
 80072ca:	d005      	beq.n	80072d8 <_malloc_r+0xac>
 80072cc:	1a21      	subs	r1, r4, r0
 80072ce:	4630      	mov	r0, r6
 80072d0:	f000 f80a 	bl	80072e8 <_sbrk_r>
 80072d4:	3001      	adds	r0, #1
 80072d6:	d0cd      	beq.n	8007274 <_malloc_r+0x48>
 80072d8:	6025      	str	r5, [r4, #0]
 80072da:	e7d9      	b.n	8007290 <_malloc_r+0x64>
 80072dc:	bd70      	pop	{r4, r5, r6, pc}
 80072de:	bf00      	nop
 80072e0:	20000390 	.word	0x20000390
 80072e4:	20000394 	.word	0x20000394

080072e8 <_sbrk_r>:
 80072e8:	b538      	push	{r3, r4, r5, lr}
 80072ea:	4c06      	ldr	r4, [pc, #24]	; (8007304 <_sbrk_r+0x1c>)
 80072ec:	2300      	movs	r3, #0
 80072ee:	4605      	mov	r5, r0
 80072f0:	4608      	mov	r0, r1
 80072f2:	6023      	str	r3, [r4, #0]
 80072f4:	f000 fb98 	bl	8007a28 <_sbrk>
 80072f8:	1c43      	adds	r3, r0, #1
 80072fa:	d102      	bne.n	8007302 <_sbrk_r+0x1a>
 80072fc:	6823      	ldr	r3, [r4, #0]
 80072fe:	b103      	cbz	r3, 8007302 <_sbrk_r+0x1a>
 8007300:	602b      	str	r3, [r5, #0]
 8007302:	bd38      	pop	{r3, r4, r5, pc}
 8007304:	200003a0 	.word	0x200003a0

08007308 <_raise_r>:
 8007308:	291f      	cmp	r1, #31
 800730a:	b538      	push	{r3, r4, r5, lr}
 800730c:	4604      	mov	r4, r0
 800730e:	460d      	mov	r5, r1
 8007310:	d904      	bls.n	800731c <_raise_r+0x14>
 8007312:	2316      	movs	r3, #22
 8007314:	6003      	str	r3, [r0, #0]
 8007316:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800731a:	bd38      	pop	{r3, r4, r5, pc}
 800731c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800731e:	b112      	cbz	r2, 8007326 <_raise_r+0x1e>
 8007320:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007324:	b94b      	cbnz	r3, 800733a <_raise_r+0x32>
 8007326:	4620      	mov	r0, r4
 8007328:	f000 f830 	bl	800738c <_getpid_r>
 800732c:	462a      	mov	r2, r5
 800732e:	4601      	mov	r1, r0
 8007330:	4620      	mov	r0, r4
 8007332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007336:	f000 b817 	b.w	8007368 <_kill_r>
 800733a:	2b01      	cmp	r3, #1
 800733c:	d00a      	beq.n	8007354 <_raise_r+0x4c>
 800733e:	1c59      	adds	r1, r3, #1
 8007340:	d103      	bne.n	800734a <_raise_r+0x42>
 8007342:	2316      	movs	r3, #22
 8007344:	6003      	str	r3, [r0, #0]
 8007346:	2001      	movs	r0, #1
 8007348:	bd38      	pop	{r3, r4, r5, pc}
 800734a:	2400      	movs	r4, #0
 800734c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007350:	4628      	mov	r0, r5
 8007352:	4798      	blx	r3
 8007354:	2000      	movs	r0, #0
 8007356:	bd38      	pop	{r3, r4, r5, pc}

08007358 <raise>:
 8007358:	4b02      	ldr	r3, [pc, #8]	; (8007364 <raise+0xc>)
 800735a:	4601      	mov	r1, r0
 800735c:	6818      	ldr	r0, [r3, #0]
 800735e:	f7ff bfd3 	b.w	8007308 <_raise_r>
 8007362:	bf00      	nop
 8007364:	20000018 	.word	0x20000018

08007368 <_kill_r>:
 8007368:	b538      	push	{r3, r4, r5, lr}
 800736a:	4c07      	ldr	r4, [pc, #28]	; (8007388 <_kill_r+0x20>)
 800736c:	2300      	movs	r3, #0
 800736e:	4605      	mov	r5, r0
 8007370:	4608      	mov	r0, r1
 8007372:	4611      	mov	r1, r2
 8007374:	6023      	str	r3, [r4, #0]
 8007376:	f000 fb4f 	bl	8007a18 <_kill>
 800737a:	1c43      	adds	r3, r0, #1
 800737c:	d102      	bne.n	8007384 <_kill_r+0x1c>
 800737e:	6823      	ldr	r3, [r4, #0]
 8007380:	b103      	cbz	r3, 8007384 <_kill_r+0x1c>
 8007382:	602b      	str	r3, [r5, #0]
 8007384:	bd38      	pop	{r3, r4, r5, pc}
 8007386:	bf00      	nop
 8007388:	200003a0 	.word	0x200003a0

0800738c <_getpid_r>:
 800738c:	f000 bb3c 	b.w	8007a08 <_getpid>

08007390 <siprintf>:
 8007390:	b40e      	push	{r1, r2, r3}
 8007392:	b500      	push	{lr}
 8007394:	b09c      	sub	sp, #112	; 0x70
 8007396:	f44f 7102 	mov.w	r1, #520	; 0x208
 800739a:	ab1d      	add	r3, sp, #116	; 0x74
 800739c:	f8ad 1014 	strh.w	r1, [sp, #20]
 80073a0:	9002      	str	r0, [sp, #8]
 80073a2:	9006      	str	r0, [sp, #24]
 80073a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073a8:	480a      	ldr	r0, [pc, #40]	; (80073d4 <siprintf+0x44>)
 80073aa:	9104      	str	r1, [sp, #16]
 80073ac:	9107      	str	r1, [sp, #28]
 80073ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80073b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073b6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80073ba:	6800      	ldr	r0, [r0, #0]
 80073bc:	9301      	str	r3, [sp, #4]
 80073be:	a902      	add	r1, sp, #8
 80073c0:	f000 f868 	bl	8007494 <_svfiprintf_r>
 80073c4:	9b02      	ldr	r3, [sp, #8]
 80073c6:	2200      	movs	r2, #0
 80073c8:	701a      	strb	r2, [r3, #0]
 80073ca:	b01c      	add	sp, #112	; 0x70
 80073cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80073d0:	b003      	add	sp, #12
 80073d2:	4770      	bx	lr
 80073d4:	20000018 	.word	0x20000018

080073d8 <__malloc_lock>:
 80073d8:	4770      	bx	lr

080073da <__malloc_unlock>:
 80073da:	4770      	bx	lr

080073dc <__ssputs_r>:
 80073dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073e0:	688e      	ldr	r6, [r1, #8]
 80073e2:	429e      	cmp	r6, r3
 80073e4:	4682      	mov	sl, r0
 80073e6:	460c      	mov	r4, r1
 80073e8:	4691      	mov	r9, r2
 80073ea:	4698      	mov	r8, r3
 80073ec:	d835      	bhi.n	800745a <__ssputs_r+0x7e>
 80073ee:	898a      	ldrh	r2, [r1, #12]
 80073f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073f4:	d031      	beq.n	800745a <__ssputs_r+0x7e>
 80073f6:	6825      	ldr	r5, [r4, #0]
 80073f8:	6909      	ldr	r1, [r1, #16]
 80073fa:	1a6f      	subs	r7, r5, r1
 80073fc:	6965      	ldr	r5, [r4, #20]
 80073fe:	2302      	movs	r3, #2
 8007400:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007404:	fb95 f5f3 	sdiv	r5, r5, r3
 8007408:	f108 0301 	add.w	r3, r8, #1
 800740c:	443b      	add	r3, r7
 800740e:	429d      	cmp	r5, r3
 8007410:	bf38      	it	cc
 8007412:	461d      	movcc	r5, r3
 8007414:	0553      	lsls	r3, r2, #21
 8007416:	d531      	bpl.n	800747c <__ssputs_r+0xa0>
 8007418:	4629      	mov	r1, r5
 800741a:	f7ff ff07 	bl	800722c <_malloc_r>
 800741e:	4606      	mov	r6, r0
 8007420:	b950      	cbnz	r0, 8007438 <__ssputs_r+0x5c>
 8007422:	230c      	movs	r3, #12
 8007424:	f8ca 3000 	str.w	r3, [sl]
 8007428:	89a3      	ldrh	r3, [r4, #12]
 800742a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800742e:	81a3      	strh	r3, [r4, #12]
 8007430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007438:	463a      	mov	r2, r7
 800743a:	6921      	ldr	r1, [r4, #16]
 800743c:	f7ff fe7a 	bl	8007134 <memcpy>
 8007440:	89a3      	ldrh	r3, [r4, #12]
 8007442:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800744a:	81a3      	strh	r3, [r4, #12]
 800744c:	6126      	str	r6, [r4, #16]
 800744e:	6165      	str	r5, [r4, #20]
 8007450:	443e      	add	r6, r7
 8007452:	1bed      	subs	r5, r5, r7
 8007454:	6026      	str	r6, [r4, #0]
 8007456:	60a5      	str	r5, [r4, #8]
 8007458:	4646      	mov	r6, r8
 800745a:	4546      	cmp	r6, r8
 800745c:	bf28      	it	cs
 800745e:	4646      	movcs	r6, r8
 8007460:	4632      	mov	r2, r6
 8007462:	4649      	mov	r1, r9
 8007464:	6820      	ldr	r0, [r4, #0]
 8007466:	f7ff fe70 	bl	800714a <memmove>
 800746a:	68a3      	ldr	r3, [r4, #8]
 800746c:	1b9b      	subs	r3, r3, r6
 800746e:	60a3      	str	r3, [r4, #8]
 8007470:	6823      	ldr	r3, [r4, #0]
 8007472:	441e      	add	r6, r3
 8007474:	6026      	str	r6, [r4, #0]
 8007476:	2000      	movs	r0, #0
 8007478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800747c:	462a      	mov	r2, r5
 800747e:	f000 fa93 	bl	80079a8 <_realloc_r>
 8007482:	4606      	mov	r6, r0
 8007484:	2800      	cmp	r0, #0
 8007486:	d1e1      	bne.n	800744c <__ssputs_r+0x70>
 8007488:	6921      	ldr	r1, [r4, #16]
 800748a:	4650      	mov	r0, sl
 800748c:	f7ff fe80 	bl	8007190 <_free_r>
 8007490:	e7c7      	b.n	8007422 <__ssputs_r+0x46>
	...

08007494 <_svfiprintf_r>:
 8007494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007498:	b09d      	sub	sp, #116	; 0x74
 800749a:	4680      	mov	r8, r0
 800749c:	9303      	str	r3, [sp, #12]
 800749e:	898b      	ldrh	r3, [r1, #12]
 80074a0:	061c      	lsls	r4, r3, #24
 80074a2:	460d      	mov	r5, r1
 80074a4:	4616      	mov	r6, r2
 80074a6:	d50f      	bpl.n	80074c8 <_svfiprintf_r+0x34>
 80074a8:	690b      	ldr	r3, [r1, #16]
 80074aa:	b96b      	cbnz	r3, 80074c8 <_svfiprintf_r+0x34>
 80074ac:	2140      	movs	r1, #64	; 0x40
 80074ae:	f7ff febd 	bl	800722c <_malloc_r>
 80074b2:	6028      	str	r0, [r5, #0]
 80074b4:	6128      	str	r0, [r5, #16]
 80074b6:	b928      	cbnz	r0, 80074c4 <_svfiprintf_r+0x30>
 80074b8:	230c      	movs	r3, #12
 80074ba:	f8c8 3000 	str.w	r3, [r8]
 80074be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074c2:	e0c5      	b.n	8007650 <_svfiprintf_r+0x1bc>
 80074c4:	2340      	movs	r3, #64	; 0x40
 80074c6:	616b      	str	r3, [r5, #20]
 80074c8:	2300      	movs	r3, #0
 80074ca:	9309      	str	r3, [sp, #36]	; 0x24
 80074cc:	2320      	movs	r3, #32
 80074ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074d2:	2330      	movs	r3, #48	; 0x30
 80074d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074d8:	f04f 0b01 	mov.w	fp, #1
 80074dc:	4637      	mov	r7, r6
 80074de:	463c      	mov	r4, r7
 80074e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d13c      	bne.n	8007562 <_svfiprintf_r+0xce>
 80074e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80074ec:	d00b      	beq.n	8007506 <_svfiprintf_r+0x72>
 80074ee:	4653      	mov	r3, sl
 80074f0:	4632      	mov	r2, r6
 80074f2:	4629      	mov	r1, r5
 80074f4:	4640      	mov	r0, r8
 80074f6:	f7ff ff71 	bl	80073dc <__ssputs_r>
 80074fa:	3001      	adds	r0, #1
 80074fc:	f000 80a3 	beq.w	8007646 <_svfiprintf_r+0x1b2>
 8007500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007502:	4453      	add	r3, sl
 8007504:	9309      	str	r3, [sp, #36]	; 0x24
 8007506:	783b      	ldrb	r3, [r7, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	f000 809c 	beq.w	8007646 <_svfiprintf_r+0x1b2>
 800750e:	2300      	movs	r3, #0
 8007510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007514:	9304      	str	r3, [sp, #16]
 8007516:	9307      	str	r3, [sp, #28]
 8007518:	9205      	str	r2, [sp, #20]
 800751a:	9306      	str	r3, [sp, #24]
 800751c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007520:	931a      	str	r3, [sp, #104]	; 0x68
 8007522:	2205      	movs	r2, #5
 8007524:	7821      	ldrb	r1, [r4, #0]
 8007526:	4850      	ldr	r0, [pc, #320]	; (8007668 <_svfiprintf_r+0x1d4>)
 8007528:	f7f8 fe52 	bl	80001d0 <memchr>
 800752c:	1c67      	adds	r7, r4, #1
 800752e:	9b04      	ldr	r3, [sp, #16]
 8007530:	b9d8      	cbnz	r0, 800756a <_svfiprintf_r+0xd6>
 8007532:	06d9      	lsls	r1, r3, #27
 8007534:	bf44      	itt	mi
 8007536:	2220      	movmi	r2, #32
 8007538:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800753c:	071a      	lsls	r2, r3, #28
 800753e:	bf44      	itt	mi
 8007540:	222b      	movmi	r2, #43	; 0x2b
 8007542:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007546:	7822      	ldrb	r2, [r4, #0]
 8007548:	2a2a      	cmp	r2, #42	; 0x2a
 800754a:	d016      	beq.n	800757a <_svfiprintf_r+0xe6>
 800754c:	9a07      	ldr	r2, [sp, #28]
 800754e:	2100      	movs	r1, #0
 8007550:	200a      	movs	r0, #10
 8007552:	4627      	mov	r7, r4
 8007554:	3401      	adds	r4, #1
 8007556:	783b      	ldrb	r3, [r7, #0]
 8007558:	3b30      	subs	r3, #48	; 0x30
 800755a:	2b09      	cmp	r3, #9
 800755c:	d951      	bls.n	8007602 <_svfiprintf_r+0x16e>
 800755e:	b1c9      	cbz	r1, 8007594 <_svfiprintf_r+0x100>
 8007560:	e011      	b.n	8007586 <_svfiprintf_r+0xf2>
 8007562:	2b25      	cmp	r3, #37	; 0x25
 8007564:	d0c0      	beq.n	80074e8 <_svfiprintf_r+0x54>
 8007566:	4627      	mov	r7, r4
 8007568:	e7b9      	b.n	80074de <_svfiprintf_r+0x4a>
 800756a:	4a3f      	ldr	r2, [pc, #252]	; (8007668 <_svfiprintf_r+0x1d4>)
 800756c:	1a80      	subs	r0, r0, r2
 800756e:	fa0b f000 	lsl.w	r0, fp, r0
 8007572:	4318      	orrs	r0, r3
 8007574:	9004      	str	r0, [sp, #16]
 8007576:	463c      	mov	r4, r7
 8007578:	e7d3      	b.n	8007522 <_svfiprintf_r+0x8e>
 800757a:	9a03      	ldr	r2, [sp, #12]
 800757c:	1d11      	adds	r1, r2, #4
 800757e:	6812      	ldr	r2, [r2, #0]
 8007580:	9103      	str	r1, [sp, #12]
 8007582:	2a00      	cmp	r2, #0
 8007584:	db01      	blt.n	800758a <_svfiprintf_r+0xf6>
 8007586:	9207      	str	r2, [sp, #28]
 8007588:	e004      	b.n	8007594 <_svfiprintf_r+0x100>
 800758a:	4252      	negs	r2, r2
 800758c:	f043 0302 	orr.w	r3, r3, #2
 8007590:	9207      	str	r2, [sp, #28]
 8007592:	9304      	str	r3, [sp, #16]
 8007594:	783b      	ldrb	r3, [r7, #0]
 8007596:	2b2e      	cmp	r3, #46	; 0x2e
 8007598:	d10e      	bne.n	80075b8 <_svfiprintf_r+0x124>
 800759a:	787b      	ldrb	r3, [r7, #1]
 800759c:	2b2a      	cmp	r3, #42	; 0x2a
 800759e:	f107 0101 	add.w	r1, r7, #1
 80075a2:	d132      	bne.n	800760a <_svfiprintf_r+0x176>
 80075a4:	9b03      	ldr	r3, [sp, #12]
 80075a6:	1d1a      	adds	r2, r3, #4
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	9203      	str	r2, [sp, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	bfb8      	it	lt
 80075b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80075b4:	3702      	adds	r7, #2
 80075b6:	9305      	str	r3, [sp, #20]
 80075b8:	4c2c      	ldr	r4, [pc, #176]	; (800766c <_svfiprintf_r+0x1d8>)
 80075ba:	7839      	ldrb	r1, [r7, #0]
 80075bc:	2203      	movs	r2, #3
 80075be:	4620      	mov	r0, r4
 80075c0:	f7f8 fe06 	bl	80001d0 <memchr>
 80075c4:	b138      	cbz	r0, 80075d6 <_svfiprintf_r+0x142>
 80075c6:	2340      	movs	r3, #64	; 0x40
 80075c8:	1b00      	subs	r0, r0, r4
 80075ca:	fa03 f000 	lsl.w	r0, r3, r0
 80075ce:	9b04      	ldr	r3, [sp, #16]
 80075d0:	4303      	orrs	r3, r0
 80075d2:	9304      	str	r3, [sp, #16]
 80075d4:	3701      	adds	r7, #1
 80075d6:	7839      	ldrb	r1, [r7, #0]
 80075d8:	4825      	ldr	r0, [pc, #148]	; (8007670 <_svfiprintf_r+0x1dc>)
 80075da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075de:	2206      	movs	r2, #6
 80075e0:	1c7e      	adds	r6, r7, #1
 80075e2:	f7f8 fdf5 	bl	80001d0 <memchr>
 80075e6:	2800      	cmp	r0, #0
 80075e8:	d035      	beq.n	8007656 <_svfiprintf_r+0x1c2>
 80075ea:	4b22      	ldr	r3, [pc, #136]	; (8007674 <_svfiprintf_r+0x1e0>)
 80075ec:	b9fb      	cbnz	r3, 800762e <_svfiprintf_r+0x19a>
 80075ee:	9b03      	ldr	r3, [sp, #12]
 80075f0:	3307      	adds	r3, #7
 80075f2:	f023 0307 	bic.w	r3, r3, #7
 80075f6:	3308      	adds	r3, #8
 80075f8:	9303      	str	r3, [sp, #12]
 80075fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075fc:	444b      	add	r3, r9
 80075fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007600:	e76c      	b.n	80074dc <_svfiprintf_r+0x48>
 8007602:	fb00 3202 	mla	r2, r0, r2, r3
 8007606:	2101      	movs	r1, #1
 8007608:	e7a3      	b.n	8007552 <_svfiprintf_r+0xbe>
 800760a:	2300      	movs	r3, #0
 800760c:	9305      	str	r3, [sp, #20]
 800760e:	4618      	mov	r0, r3
 8007610:	240a      	movs	r4, #10
 8007612:	460f      	mov	r7, r1
 8007614:	3101      	adds	r1, #1
 8007616:	783a      	ldrb	r2, [r7, #0]
 8007618:	3a30      	subs	r2, #48	; 0x30
 800761a:	2a09      	cmp	r2, #9
 800761c:	d903      	bls.n	8007626 <_svfiprintf_r+0x192>
 800761e:	2b00      	cmp	r3, #0
 8007620:	d0ca      	beq.n	80075b8 <_svfiprintf_r+0x124>
 8007622:	9005      	str	r0, [sp, #20]
 8007624:	e7c8      	b.n	80075b8 <_svfiprintf_r+0x124>
 8007626:	fb04 2000 	mla	r0, r4, r0, r2
 800762a:	2301      	movs	r3, #1
 800762c:	e7f1      	b.n	8007612 <_svfiprintf_r+0x17e>
 800762e:	ab03      	add	r3, sp, #12
 8007630:	9300      	str	r3, [sp, #0]
 8007632:	462a      	mov	r2, r5
 8007634:	4b10      	ldr	r3, [pc, #64]	; (8007678 <_svfiprintf_r+0x1e4>)
 8007636:	a904      	add	r1, sp, #16
 8007638:	4640      	mov	r0, r8
 800763a:	f3af 8000 	nop.w
 800763e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007642:	4681      	mov	r9, r0
 8007644:	d1d9      	bne.n	80075fa <_svfiprintf_r+0x166>
 8007646:	89ab      	ldrh	r3, [r5, #12]
 8007648:	065b      	lsls	r3, r3, #25
 800764a:	f53f af38 	bmi.w	80074be <_svfiprintf_r+0x2a>
 800764e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007650:	b01d      	add	sp, #116	; 0x74
 8007652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007656:	ab03      	add	r3, sp, #12
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	462a      	mov	r2, r5
 800765c:	4b06      	ldr	r3, [pc, #24]	; (8007678 <_svfiprintf_r+0x1e4>)
 800765e:	a904      	add	r1, sp, #16
 8007660:	4640      	mov	r0, r8
 8007662:	f000 f881 	bl	8007768 <_printf_i>
 8007666:	e7ea      	b.n	800763e <_svfiprintf_r+0x1aa>
 8007668:	08007c30 	.word	0x08007c30
 800766c:	08007c36 	.word	0x08007c36
 8007670:	08007c3a 	.word	0x08007c3a
 8007674:	00000000 	.word	0x00000000
 8007678:	080073dd 	.word	0x080073dd

0800767c <_printf_common>:
 800767c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007680:	4691      	mov	r9, r2
 8007682:	461f      	mov	r7, r3
 8007684:	688a      	ldr	r2, [r1, #8]
 8007686:	690b      	ldr	r3, [r1, #16]
 8007688:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800768c:	4293      	cmp	r3, r2
 800768e:	bfb8      	it	lt
 8007690:	4613      	movlt	r3, r2
 8007692:	f8c9 3000 	str.w	r3, [r9]
 8007696:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800769a:	4606      	mov	r6, r0
 800769c:	460c      	mov	r4, r1
 800769e:	b112      	cbz	r2, 80076a6 <_printf_common+0x2a>
 80076a0:	3301      	adds	r3, #1
 80076a2:	f8c9 3000 	str.w	r3, [r9]
 80076a6:	6823      	ldr	r3, [r4, #0]
 80076a8:	0699      	lsls	r1, r3, #26
 80076aa:	bf42      	ittt	mi
 80076ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80076b0:	3302      	addmi	r3, #2
 80076b2:	f8c9 3000 	strmi.w	r3, [r9]
 80076b6:	6825      	ldr	r5, [r4, #0]
 80076b8:	f015 0506 	ands.w	r5, r5, #6
 80076bc:	d107      	bne.n	80076ce <_printf_common+0x52>
 80076be:	f104 0a19 	add.w	sl, r4, #25
 80076c2:	68e3      	ldr	r3, [r4, #12]
 80076c4:	f8d9 2000 	ldr.w	r2, [r9]
 80076c8:	1a9b      	subs	r3, r3, r2
 80076ca:	429d      	cmp	r5, r3
 80076cc:	db29      	blt.n	8007722 <_printf_common+0xa6>
 80076ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80076d2:	6822      	ldr	r2, [r4, #0]
 80076d4:	3300      	adds	r3, #0
 80076d6:	bf18      	it	ne
 80076d8:	2301      	movne	r3, #1
 80076da:	0692      	lsls	r2, r2, #26
 80076dc:	d42e      	bmi.n	800773c <_printf_common+0xc0>
 80076de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076e2:	4639      	mov	r1, r7
 80076e4:	4630      	mov	r0, r6
 80076e6:	47c0      	blx	r8
 80076e8:	3001      	adds	r0, #1
 80076ea:	d021      	beq.n	8007730 <_printf_common+0xb4>
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	68e5      	ldr	r5, [r4, #12]
 80076f0:	f8d9 2000 	ldr.w	r2, [r9]
 80076f4:	f003 0306 	and.w	r3, r3, #6
 80076f8:	2b04      	cmp	r3, #4
 80076fa:	bf08      	it	eq
 80076fc:	1aad      	subeq	r5, r5, r2
 80076fe:	68a3      	ldr	r3, [r4, #8]
 8007700:	6922      	ldr	r2, [r4, #16]
 8007702:	bf0c      	ite	eq
 8007704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007708:	2500      	movne	r5, #0
 800770a:	4293      	cmp	r3, r2
 800770c:	bfc4      	itt	gt
 800770e:	1a9b      	subgt	r3, r3, r2
 8007710:	18ed      	addgt	r5, r5, r3
 8007712:	f04f 0900 	mov.w	r9, #0
 8007716:	341a      	adds	r4, #26
 8007718:	454d      	cmp	r5, r9
 800771a:	d11b      	bne.n	8007754 <_printf_common+0xd8>
 800771c:	2000      	movs	r0, #0
 800771e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007722:	2301      	movs	r3, #1
 8007724:	4652      	mov	r2, sl
 8007726:	4639      	mov	r1, r7
 8007728:	4630      	mov	r0, r6
 800772a:	47c0      	blx	r8
 800772c:	3001      	adds	r0, #1
 800772e:	d103      	bne.n	8007738 <_printf_common+0xbc>
 8007730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007738:	3501      	adds	r5, #1
 800773a:	e7c2      	b.n	80076c2 <_printf_common+0x46>
 800773c:	18e1      	adds	r1, r4, r3
 800773e:	1c5a      	adds	r2, r3, #1
 8007740:	2030      	movs	r0, #48	; 0x30
 8007742:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007746:	4422      	add	r2, r4
 8007748:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800774c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007750:	3302      	adds	r3, #2
 8007752:	e7c4      	b.n	80076de <_printf_common+0x62>
 8007754:	2301      	movs	r3, #1
 8007756:	4622      	mov	r2, r4
 8007758:	4639      	mov	r1, r7
 800775a:	4630      	mov	r0, r6
 800775c:	47c0      	blx	r8
 800775e:	3001      	adds	r0, #1
 8007760:	d0e6      	beq.n	8007730 <_printf_common+0xb4>
 8007762:	f109 0901 	add.w	r9, r9, #1
 8007766:	e7d7      	b.n	8007718 <_printf_common+0x9c>

08007768 <_printf_i>:
 8007768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800776c:	4617      	mov	r7, r2
 800776e:	7e0a      	ldrb	r2, [r1, #24]
 8007770:	b085      	sub	sp, #20
 8007772:	2a6e      	cmp	r2, #110	; 0x6e
 8007774:	4698      	mov	r8, r3
 8007776:	4606      	mov	r6, r0
 8007778:	460c      	mov	r4, r1
 800777a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800777c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8007780:	f000 80bc 	beq.w	80078fc <_printf_i+0x194>
 8007784:	d81a      	bhi.n	80077bc <_printf_i+0x54>
 8007786:	2a63      	cmp	r2, #99	; 0x63
 8007788:	d02e      	beq.n	80077e8 <_printf_i+0x80>
 800778a:	d80a      	bhi.n	80077a2 <_printf_i+0x3a>
 800778c:	2a00      	cmp	r2, #0
 800778e:	f000 80c8 	beq.w	8007922 <_printf_i+0x1ba>
 8007792:	2a58      	cmp	r2, #88	; 0x58
 8007794:	f000 808a 	beq.w	80078ac <_printf_i+0x144>
 8007798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800779c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80077a0:	e02a      	b.n	80077f8 <_printf_i+0x90>
 80077a2:	2a64      	cmp	r2, #100	; 0x64
 80077a4:	d001      	beq.n	80077aa <_printf_i+0x42>
 80077a6:	2a69      	cmp	r2, #105	; 0x69
 80077a8:	d1f6      	bne.n	8007798 <_printf_i+0x30>
 80077aa:	6821      	ldr	r1, [r4, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	f011 0f80 	tst.w	r1, #128	; 0x80
 80077b2:	d023      	beq.n	80077fc <_printf_i+0x94>
 80077b4:	1d11      	adds	r1, r2, #4
 80077b6:	6019      	str	r1, [r3, #0]
 80077b8:	6813      	ldr	r3, [r2, #0]
 80077ba:	e027      	b.n	800780c <_printf_i+0xa4>
 80077bc:	2a73      	cmp	r2, #115	; 0x73
 80077be:	f000 80b4 	beq.w	800792a <_printf_i+0x1c2>
 80077c2:	d808      	bhi.n	80077d6 <_printf_i+0x6e>
 80077c4:	2a6f      	cmp	r2, #111	; 0x6f
 80077c6:	d02a      	beq.n	800781e <_printf_i+0xb6>
 80077c8:	2a70      	cmp	r2, #112	; 0x70
 80077ca:	d1e5      	bne.n	8007798 <_printf_i+0x30>
 80077cc:	680a      	ldr	r2, [r1, #0]
 80077ce:	f042 0220 	orr.w	r2, r2, #32
 80077d2:	600a      	str	r2, [r1, #0]
 80077d4:	e003      	b.n	80077de <_printf_i+0x76>
 80077d6:	2a75      	cmp	r2, #117	; 0x75
 80077d8:	d021      	beq.n	800781e <_printf_i+0xb6>
 80077da:	2a78      	cmp	r2, #120	; 0x78
 80077dc:	d1dc      	bne.n	8007798 <_printf_i+0x30>
 80077de:	2278      	movs	r2, #120	; 0x78
 80077e0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80077e4:	496e      	ldr	r1, [pc, #440]	; (80079a0 <_printf_i+0x238>)
 80077e6:	e064      	b.n	80078b2 <_printf_i+0x14a>
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80077ee:	1d11      	adds	r1, r2, #4
 80077f0:	6019      	str	r1, [r3, #0]
 80077f2:	6813      	ldr	r3, [r2, #0]
 80077f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077f8:	2301      	movs	r3, #1
 80077fa:	e0a3      	b.n	8007944 <_printf_i+0x1dc>
 80077fc:	f011 0f40 	tst.w	r1, #64	; 0x40
 8007800:	f102 0104 	add.w	r1, r2, #4
 8007804:	6019      	str	r1, [r3, #0]
 8007806:	d0d7      	beq.n	80077b8 <_printf_i+0x50>
 8007808:	f9b2 3000 	ldrsh.w	r3, [r2]
 800780c:	2b00      	cmp	r3, #0
 800780e:	da03      	bge.n	8007818 <_printf_i+0xb0>
 8007810:	222d      	movs	r2, #45	; 0x2d
 8007812:	425b      	negs	r3, r3
 8007814:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007818:	4962      	ldr	r1, [pc, #392]	; (80079a4 <_printf_i+0x23c>)
 800781a:	220a      	movs	r2, #10
 800781c:	e017      	b.n	800784e <_printf_i+0xe6>
 800781e:	6820      	ldr	r0, [r4, #0]
 8007820:	6819      	ldr	r1, [r3, #0]
 8007822:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007826:	d003      	beq.n	8007830 <_printf_i+0xc8>
 8007828:	1d08      	adds	r0, r1, #4
 800782a:	6018      	str	r0, [r3, #0]
 800782c:	680b      	ldr	r3, [r1, #0]
 800782e:	e006      	b.n	800783e <_printf_i+0xd6>
 8007830:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007834:	f101 0004 	add.w	r0, r1, #4
 8007838:	6018      	str	r0, [r3, #0]
 800783a:	d0f7      	beq.n	800782c <_printf_i+0xc4>
 800783c:	880b      	ldrh	r3, [r1, #0]
 800783e:	4959      	ldr	r1, [pc, #356]	; (80079a4 <_printf_i+0x23c>)
 8007840:	2a6f      	cmp	r2, #111	; 0x6f
 8007842:	bf14      	ite	ne
 8007844:	220a      	movne	r2, #10
 8007846:	2208      	moveq	r2, #8
 8007848:	2000      	movs	r0, #0
 800784a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800784e:	6865      	ldr	r5, [r4, #4]
 8007850:	60a5      	str	r5, [r4, #8]
 8007852:	2d00      	cmp	r5, #0
 8007854:	f2c0 809c 	blt.w	8007990 <_printf_i+0x228>
 8007858:	6820      	ldr	r0, [r4, #0]
 800785a:	f020 0004 	bic.w	r0, r0, #4
 800785e:	6020      	str	r0, [r4, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d13f      	bne.n	80078e4 <_printf_i+0x17c>
 8007864:	2d00      	cmp	r5, #0
 8007866:	f040 8095 	bne.w	8007994 <_printf_i+0x22c>
 800786a:	4675      	mov	r5, lr
 800786c:	2a08      	cmp	r2, #8
 800786e:	d10b      	bne.n	8007888 <_printf_i+0x120>
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	07da      	lsls	r2, r3, #31
 8007874:	d508      	bpl.n	8007888 <_printf_i+0x120>
 8007876:	6923      	ldr	r3, [r4, #16]
 8007878:	6862      	ldr	r2, [r4, #4]
 800787a:	429a      	cmp	r2, r3
 800787c:	bfde      	ittt	le
 800787e:	2330      	movle	r3, #48	; 0x30
 8007880:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007884:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007888:	ebae 0305 	sub.w	r3, lr, r5
 800788c:	6123      	str	r3, [r4, #16]
 800788e:	f8cd 8000 	str.w	r8, [sp]
 8007892:	463b      	mov	r3, r7
 8007894:	aa03      	add	r2, sp, #12
 8007896:	4621      	mov	r1, r4
 8007898:	4630      	mov	r0, r6
 800789a:	f7ff feef 	bl	800767c <_printf_common>
 800789e:	3001      	adds	r0, #1
 80078a0:	d155      	bne.n	800794e <_printf_i+0x1e6>
 80078a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078a6:	b005      	add	sp, #20
 80078a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80078ac:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80078b0:	493c      	ldr	r1, [pc, #240]	; (80079a4 <_printf_i+0x23c>)
 80078b2:	6822      	ldr	r2, [r4, #0]
 80078b4:	6818      	ldr	r0, [r3, #0]
 80078b6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80078ba:	f100 0504 	add.w	r5, r0, #4
 80078be:	601d      	str	r5, [r3, #0]
 80078c0:	d001      	beq.n	80078c6 <_printf_i+0x15e>
 80078c2:	6803      	ldr	r3, [r0, #0]
 80078c4:	e002      	b.n	80078cc <_printf_i+0x164>
 80078c6:	0655      	lsls	r5, r2, #25
 80078c8:	d5fb      	bpl.n	80078c2 <_printf_i+0x15a>
 80078ca:	8803      	ldrh	r3, [r0, #0]
 80078cc:	07d0      	lsls	r0, r2, #31
 80078ce:	bf44      	itt	mi
 80078d0:	f042 0220 	orrmi.w	r2, r2, #32
 80078d4:	6022      	strmi	r2, [r4, #0]
 80078d6:	b91b      	cbnz	r3, 80078e0 <_printf_i+0x178>
 80078d8:	6822      	ldr	r2, [r4, #0]
 80078da:	f022 0220 	bic.w	r2, r2, #32
 80078de:	6022      	str	r2, [r4, #0]
 80078e0:	2210      	movs	r2, #16
 80078e2:	e7b1      	b.n	8007848 <_printf_i+0xe0>
 80078e4:	4675      	mov	r5, lr
 80078e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80078ea:	fb02 3310 	mls	r3, r2, r0, r3
 80078ee:	5ccb      	ldrb	r3, [r1, r3]
 80078f0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80078f4:	4603      	mov	r3, r0
 80078f6:	2800      	cmp	r0, #0
 80078f8:	d1f5      	bne.n	80078e6 <_printf_i+0x17e>
 80078fa:	e7b7      	b.n	800786c <_printf_i+0x104>
 80078fc:	6808      	ldr	r0, [r1, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	6949      	ldr	r1, [r1, #20]
 8007902:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007906:	d004      	beq.n	8007912 <_printf_i+0x1aa>
 8007908:	1d10      	adds	r0, r2, #4
 800790a:	6018      	str	r0, [r3, #0]
 800790c:	6813      	ldr	r3, [r2, #0]
 800790e:	6019      	str	r1, [r3, #0]
 8007910:	e007      	b.n	8007922 <_printf_i+0x1ba>
 8007912:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007916:	f102 0004 	add.w	r0, r2, #4
 800791a:	6018      	str	r0, [r3, #0]
 800791c:	6813      	ldr	r3, [r2, #0]
 800791e:	d0f6      	beq.n	800790e <_printf_i+0x1a6>
 8007920:	8019      	strh	r1, [r3, #0]
 8007922:	2300      	movs	r3, #0
 8007924:	6123      	str	r3, [r4, #16]
 8007926:	4675      	mov	r5, lr
 8007928:	e7b1      	b.n	800788e <_printf_i+0x126>
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	1d11      	adds	r1, r2, #4
 800792e:	6019      	str	r1, [r3, #0]
 8007930:	6815      	ldr	r5, [r2, #0]
 8007932:	6862      	ldr	r2, [r4, #4]
 8007934:	2100      	movs	r1, #0
 8007936:	4628      	mov	r0, r5
 8007938:	f7f8 fc4a 	bl	80001d0 <memchr>
 800793c:	b108      	cbz	r0, 8007942 <_printf_i+0x1da>
 800793e:	1b40      	subs	r0, r0, r5
 8007940:	6060      	str	r0, [r4, #4]
 8007942:	6863      	ldr	r3, [r4, #4]
 8007944:	6123      	str	r3, [r4, #16]
 8007946:	2300      	movs	r3, #0
 8007948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800794c:	e79f      	b.n	800788e <_printf_i+0x126>
 800794e:	6923      	ldr	r3, [r4, #16]
 8007950:	462a      	mov	r2, r5
 8007952:	4639      	mov	r1, r7
 8007954:	4630      	mov	r0, r6
 8007956:	47c0      	blx	r8
 8007958:	3001      	adds	r0, #1
 800795a:	d0a2      	beq.n	80078a2 <_printf_i+0x13a>
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	079b      	lsls	r3, r3, #30
 8007960:	d507      	bpl.n	8007972 <_printf_i+0x20a>
 8007962:	2500      	movs	r5, #0
 8007964:	f104 0919 	add.w	r9, r4, #25
 8007968:	68e3      	ldr	r3, [r4, #12]
 800796a:	9a03      	ldr	r2, [sp, #12]
 800796c:	1a9b      	subs	r3, r3, r2
 800796e:	429d      	cmp	r5, r3
 8007970:	db05      	blt.n	800797e <_printf_i+0x216>
 8007972:	68e0      	ldr	r0, [r4, #12]
 8007974:	9b03      	ldr	r3, [sp, #12]
 8007976:	4298      	cmp	r0, r3
 8007978:	bfb8      	it	lt
 800797a:	4618      	movlt	r0, r3
 800797c:	e793      	b.n	80078a6 <_printf_i+0x13e>
 800797e:	2301      	movs	r3, #1
 8007980:	464a      	mov	r2, r9
 8007982:	4639      	mov	r1, r7
 8007984:	4630      	mov	r0, r6
 8007986:	47c0      	blx	r8
 8007988:	3001      	adds	r0, #1
 800798a:	d08a      	beq.n	80078a2 <_printf_i+0x13a>
 800798c:	3501      	adds	r5, #1
 800798e:	e7eb      	b.n	8007968 <_printf_i+0x200>
 8007990:	2b00      	cmp	r3, #0
 8007992:	d1a7      	bne.n	80078e4 <_printf_i+0x17c>
 8007994:	780b      	ldrb	r3, [r1, #0]
 8007996:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800799a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800799e:	e765      	b.n	800786c <_printf_i+0x104>
 80079a0:	08007c52 	.word	0x08007c52
 80079a4:	08007c41 	.word	0x08007c41

080079a8 <_realloc_r>:
 80079a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079aa:	4607      	mov	r7, r0
 80079ac:	4614      	mov	r4, r2
 80079ae:	460e      	mov	r6, r1
 80079b0:	b921      	cbnz	r1, 80079bc <_realloc_r+0x14>
 80079b2:	4611      	mov	r1, r2
 80079b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80079b8:	f7ff bc38 	b.w	800722c <_malloc_r>
 80079bc:	b922      	cbnz	r2, 80079c8 <_realloc_r+0x20>
 80079be:	f7ff fbe7 	bl	8007190 <_free_r>
 80079c2:	4625      	mov	r5, r4
 80079c4:	4628      	mov	r0, r5
 80079c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c8:	f000 f814 	bl	80079f4 <_malloc_usable_size_r>
 80079cc:	4284      	cmp	r4, r0
 80079ce:	d90f      	bls.n	80079f0 <_realloc_r+0x48>
 80079d0:	4621      	mov	r1, r4
 80079d2:	4638      	mov	r0, r7
 80079d4:	f7ff fc2a 	bl	800722c <_malloc_r>
 80079d8:	4605      	mov	r5, r0
 80079da:	2800      	cmp	r0, #0
 80079dc:	d0f2      	beq.n	80079c4 <_realloc_r+0x1c>
 80079de:	4631      	mov	r1, r6
 80079e0:	4622      	mov	r2, r4
 80079e2:	f7ff fba7 	bl	8007134 <memcpy>
 80079e6:	4631      	mov	r1, r6
 80079e8:	4638      	mov	r0, r7
 80079ea:	f7ff fbd1 	bl	8007190 <_free_r>
 80079ee:	e7e9      	b.n	80079c4 <_realloc_r+0x1c>
 80079f0:	4635      	mov	r5, r6
 80079f2:	e7e7      	b.n	80079c4 <_realloc_r+0x1c>

080079f4 <_malloc_usable_size_r>:
 80079f4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80079f8:	2800      	cmp	r0, #0
 80079fa:	f1a0 0004 	sub.w	r0, r0, #4
 80079fe:	bfbc      	itt	lt
 8007a00:	580b      	ldrlt	r3, [r1, r0]
 8007a02:	18c0      	addlt	r0, r0, r3
 8007a04:	4770      	bx	lr
	...

08007a08 <_getpid>:
 8007a08:	4b02      	ldr	r3, [pc, #8]	; (8007a14 <_getpid+0xc>)
 8007a0a:	2258      	movs	r2, #88	; 0x58
 8007a0c:	601a      	str	r2, [r3, #0]
 8007a0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a12:	4770      	bx	lr
 8007a14:	200003a0 	.word	0x200003a0

08007a18 <_kill>:
 8007a18:	4b02      	ldr	r3, [pc, #8]	; (8007a24 <_kill+0xc>)
 8007a1a:	2258      	movs	r2, #88	; 0x58
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a22:	4770      	bx	lr
 8007a24:	200003a0 	.word	0x200003a0

08007a28 <_sbrk>:
 8007a28:	4b04      	ldr	r3, [pc, #16]	; (8007a3c <_sbrk+0x14>)
 8007a2a:	6819      	ldr	r1, [r3, #0]
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	b909      	cbnz	r1, 8007a34 <_sbrk+0xc>
 8007a30:	4903      	ldr	r1, [pc, #12]	; (8007a40 <_sbrk+0x18>)
 8007a32:	6019      	str	r1, [r3, #0]
 8007a34:	6818      	ldr	r0, [r3, #0]
 8007a36:	4402      	add	r2, r0
 8007a38:	601a      	str	r2, [r3, #0]
 8007a3a:	4770      	bx	lr
 8007a3c:	20000398 	.word	0x20000398
 8007a40:	200003a4 	.word	0x200003a4

08007a44 <_exit>:
 8007a44:	e7fe      	b.n	8007a44 <_exit>
	...

08007a48 <_init>:
 8007a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a4a:	bf00      	nop
 8007a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4e:	bc08      	pop	{r3}
 8007a50:	469e      	mov	lr, r3
 8007a52:	4770      	bx	lr

08007a54 <_fini>:
 8007a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a56:	bf00      	nop
 8007a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5a:	bc08      	pop	{r3}
 8007a5c:	469e      	mov	lr, r3
 8007a5e:	4770      	bx	lr
