
ClockModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000792c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000214  08007abc  08007abc  00017abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000055c  08007cd0  08007cd0  00017cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000004a8  0800822c  0800822c  0001822c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   0000001c  080086d4  080086d4  000186d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080086f0  080086f0  000186f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000007c  20000000  080086f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  9 .bss          00000328  2000007c  2000007c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a4  200003a4  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f102  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030dd  00000000  00000000  0003f1ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000070b1  00000000  00000000  0004228b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000fe8  00000000  00000000  00049340  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001268  00000000  00000000  0004a328  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007103  00000000  00000000  0004b590  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000a5d0  00000000  00000000  00052693  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  0005cc63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b80c  00000000  00000000  0005cce0  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000030  00000000  00000000  000686dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001ed  00000000  00000000  000684ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007aa4 	.word	0x08007aa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08007aa4 	.word	0x08007aa4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strcmp>:
 8000270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000274:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000278:	2a01      	cmp	r2, #1
 800027a:	bf28      	it	cs
 800027c:	429a      	cmpcs	r2, r3
 800027e:	d0f7      	beq.n	8000270 <strcmp>
 8000280:	1ad0      	subs	r0, r2, r3
 8000282:	4770      	bx	lr

08000284 <__aeabi_uldivmod>:
 8000284:	b953      	cbnz	r3, 800029c <__aeabi_uldivmod+0x18>
 8000286:	b94a      	cbnz	r2, 800029c <__aeabi_uldivmod+0x18>
 8000288:	2900      	cmp	r1, #0
 800028a:	bf08      	it	eq
 800028c:	2800      	cmpeq	r0, #0
 800028e:	bf1c      	itt	ne
 8000290:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000294:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000298:	f001 b8f6 	b.w	8001488 <__aeabi_idiv0>
 800029c:	f1ad 0c08 	sub.w	ip, sp, #8
 80002a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a4:	f000 f806 	bl	80002b4 <__udivmoddi4>
 80002a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002b0:	b004      	add	sp, #16
 80002b2:	4770      	bx	lr

080002b4 <__udivmoddi4>:
 80002b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b8:	468c      	mov	ip, r1
 80002ba:	460d      	mov	r5, r1
 80002bc:	4604      	mov	r4, r0
 80002be:	9e08      	ldr	r6, [sp, #32]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d151      	bne.n	8000368 <__udivmoddi4+0xb4>
 80002c4:	428a      	cmp	r2, r1
 80002c6:	4617      	mov	r7, r2
 80002c8:	d96d      	bls.n	80003a6 <__udivmoddi4+0xf2>
 80002ca:	fab2 fe82 	clz	lr, r2
 80002ce:	f1be 0f00 	cmp.w	lr, #0
 80002d2:	d00b      	beq.n	80002ec <__udivmoddi4+0x38>
 80002d4:	f1ce 0c20 	rsb	ip, lr, #32
 80002d8:	fa01 f50e 	lsl.w	r5, r1, lr
 80002dc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e0:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e4:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e8:	fa00 f40e 	lsl.w	r4, r0, lr
 80002ec:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002f0:	0c25      	lsrs	r5, r4, #16
 80002f2:	fbbc f8fa 	udiv	r8, ip, sl
 80002f6:	fa1f f987 	uxth.w	r9, r7
 80002fa:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fe:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000302:	fb08 f309 	mul.w	r3, r8, r9
 8000306:	42ab      	cmp	r3, r5
 8000308:	d90a      	bls.n	8000320 <__udivmoddi4+0x6c>
 800030a:	19ed      	adds	r5, r5, r7
 800030c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000310:	f080 8123 	bcs.w	800055a <__udivmoddi4+0x2a6>
 8000314:	42ab      	cmp	r3, r5
 8000316:	f240 8120 	bls.w	800055a <__udivmoddi4+0x2a6>
 800031a:	f1a8 0802 	sub.w	r8, r8, #2
 800031e:	443d      	add	r5, r7
 8000320:	1aed      	subs	r5, r5, r3
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb5 f0fa 	udiv	r0, r5, sl
 8000328:	fb0a 5510 	mls	r5, sl, r0, r5
 800032c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000330:	fb00 f909 	mul.w	r9, r0, r9
 8000334:	45a1      	cmp	r9, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x98>
 8000338:	19e4      	adds	r4, r4, r7
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 810a 	bcs.w	8000556 <__udivmoddi4+0x2a2>
 8000342:	45a1      	cmp	r9, r4
 8000344:	f240 8107 	bls.w	8000556 <__udivmoddi4+0x2a2>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	eba4 0409 	sub.w	r4, r4, r9
 8000350:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000354:	2100      	movs	r1, #0
 8000356:	2e00      	cmp	r6, #0
 8000358:	d061      	beq.n	800041e <__udivmoddi4+0x16a>
 800035a:	fa24 f40e 	lsr.w	r4, r4, lr
 800035e:	2300      	movs	r3, #0
 8000360:	6034      	str	r4, [r6, #0]
 8000362:	6073      	str	r3, [r6, #4]
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	428b      	cmp	r3, r1
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0xc8>
 800036c:	2e00      	cmp	r6, #0
 800036e:	d054      	beq.n	800041a <__udivmoddi4+0x166>
 8000370:	2100      	movs	r1, #0
 8000372:	e886 0021 	stmia.w	r6, {r0, r5}
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	f040 808e 	bne.w	80004a2 <__udivmoddi4+0x1ee>
 8000386:	42ab      	cmp	r3, r5
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xdc>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2d0>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb65 0503 	sbc.w	r5, r5, r3
 8000396:	2001      	movs	r0, #1
 8000398:	46ac      	mov	ip, r5
 800039a:	2e00      	cmp	r6, #0
 800039c:	d03f      	beq.n	800041e <__udivmoddi4+0x16a>
 800039e:	e886 1010 	stmia.w	r6, {r4, ip}
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	b912      	cbnz	r2, 80003ae <__udivmoddi4+0xfa>
 80003a8:	2701      	movs	r7, #1
 80003aa:	fbb7 f7f2 	udiv	r7, r7, r2
 80003ae:	fab7 fe87 	clz	lr, r7
 80003b2:	f1be 0f00 	cmp.w	lr, #0
 80003b6:	d134      	bne.n	8000422 <__udivmoddi4+0x16e>
 80003b8:	1beb      	subs	r3, r5, r7
 80003ba:	0c3a      	lsrs	r2, r7, #16
 80003bc:	fa1f fc87 	uxth.w	ip, r7
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c6:	0c25      	lsrs	r5, r4, #16
 80003c8:	fb02 3318 	mls	r3, r2, r8, r3
 80003cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003d0:	fb0c f308 	mul.w	r3, ip, r8
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d907      	bls.n	80003e8 <__udivmoddi4+0x134>
 80003d8:	19ed      	adds	r5, r5, r7
 80003da:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x132>
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	f200 80d1 	bhi.w	8000588 <__udivmoddi4+0x2d4>
 80003e6:	4680      	mov	r8, r0
 80003e8:	1aed      	subs	r5, r5, r3
 80003ea:	b2a3      	uxth	r3, r4
 80003ec:	fbb5 f0f2 	udiv	r0, r5, r2
 80003f0:	fb02 5510 	mls	r5, r2, r0, r5
 80003f4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f8:	fb0c fc00 	mul.w	ip, ip, r0
 80003fc:	45a4      	cmp	ip, r4
 80003fe:	d907      	bls.n	8000410 <__udivmoddi4+0x15c>
 8000400:	19e4      	adds	r4, r4, r7
 8000402:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000406:	d202      	bcs.n	800040e <__udivmoddi4+0x15a>
 8000408:	45a4      	cmp	ip, r4
 800040a:	f200 80b8 	bhi.w	800057e <__udivmoddi4+0x2ca>
 800040e:	4618      	mov	r0, r3
 8000410:	eba4 040c 	sub.w	r4, r4, ip
 8000414:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000418:	e79d      	b.n	8000356 <__udivmoddi4+0xa2>
 800041a:	4631      	mov	r1, r6
 800041c:	4630      	mov	r0, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1ce 0420 	rsb	r4, lr, #32
 8000426:	fa05 f30e 	lsl.w	r3, r5, lr
 800042a:	fa07 f70e 	lsl.w	r7, r7, lr
 800042e:	fa20 f804 	lsr.w	r8, r0, r4
 8000432:	0c3a      	lsrs	r2, r7, #16
 8000434:	fa25 f404 	lsr.w	r4, r5, r4
 8000438:	ea48 0803 	orr.w	r8, r8, r3
 800043c:	fbb4 f1f2 	udiv	r1, r4, r2
 8000440:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000444:	fb02 4411 	mls	r4, r2, r1, r4
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000450:	fb01 f30c 	mul.w	r3, r1, ip
 8000454:	42ab      	cmp	r3, r5
 8000456:	fa00 f40e 	lsl.w	r4, r0, lr
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1bc>
 800045c:	19ed      	adds	r5, r5, r7
 800045e:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000462:	f080 808a 	bcs.w	800057a <__udivmoddi4+0x2c6>
 8000466:	42ab      	cmp	r3, r5
 8000468:	f240 8087 	bls.w	800057a <__udivmoddi4+0x2c6>
 800046c:	3902      	subs	r1, #2
 800046e:	443d      	add	r5, r7
 8000470:	1aeb      	subs	r3, r5, r3
 8000472:	fa1f f588 	uxth.w	r5, r8
 8000476:	fbb3 f0f2 	udiv	r0, r3, r2
 800047a:	fb02 3310 	mls	r3, r2, r0, r3
 800047e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000482:	fb00 f30c 	mul.w	r3, r0, ip
 8000486:	42ab      	cmp	r3, r5
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x1e6>
 800048a:	19ed      	adds	r5, r5, r7
 800048c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000490:	d26f      	bcs.n	8000572 <__udivmoddi4+0x2be>
 8000492:	42ab      	cmp	r3, r5
 8000494:	d96d      	bls.n	8000572 <__udivmoddi4+0x2be>
 8000496:	3802      	subs	r0, #2
 8000498:	443d      	add	r5, r7
 800049a:	1aeb      	subs	r3, r5, r3
 800049c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a0:	e78f      	b.n	80003c2 <__udivmoddi4+0x10e>
 80004a2:	f1c1 0720 	rsb	r7, r1, #32
 80004a6:	fa22 f807 	lsr.w	r8, r2, r7
 80004aa:	408b      	lsls	r3, r1
 80004ac:	fa05 f401 	lsl.w	r4, r5, r1
 80004b0:	ea48 0303 	orr.w	r3, r8, r3
 80004b4:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004bc:	40fd      	lsrs	r5, r7
 80004be:	ea4e 0e04 	orr.w	lr, lr, r4
 80004c2:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004ca:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ce:	fa1f f883 	uxth.w	r8, r3
 80004d2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d6:	fb09 f408 	mul.w	r4, r9, r8
 80004da:	42ac      	cmp	r4, r5
 80004dc:	fa02 f201 	lsl.w	r2, r2, r1
 80004e0:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x244>
 80004e6:	18ed      	adds	r5, r5, r3
 80004e8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004ec:	d243      	bcs.n	8000576 <__udivmoddi4+0x2c2>
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	d941      	bls.n	8000576 <__udivmoddi4+0x2c2>
 80004f2:	f1a9 0902 	sub.w	r9, r9, #2
 80004f6:	441d      	add	r5, r3
 80004f8:	1b2d      	subs	r5, r5, r4
 80004fa:	fa1f fe8e 	uxth.w	lr, lr
 80004fe:	fbb5 f0fc 	udiv	r0, r5, ip
 8000502:	fb0c 5510 	mls	r5, ip, r0, r5
 8000506:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800050a:	fb00 f808 	mul.w	r8, r0, r8
 800050e:	45a0      	cmp	r8, r4
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x26e>
 8000512:	18e4      	adds	r4, r4, r3
 8000514:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000518:	d229      	bcs.n	800056e <__udivmoddi4+0x2ba>
 800051a:	45a0      	cmp	r8, r4
 800051c:	d927      	bls.n	800056e <__udivmoddi4+0x2ba>
 800051e:	3802      	subs	r0, #2
 8000520:	441c      	add	r4, r3
 8000522:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000526:	eba4 0408 	sub.w	r4, r4, r8
 800052a:	fba0 8902 	umull	r8, r9, r0, r2
 800052e:	454c      	cmp	r4, r9
 8000530:	46c6      	mov	lr, r8
 8000532:	464d      	mov	r5, r9
 8000534:	d315      	bcc.n	8000562 <__udivmoddi4+0x2ae>
 8000536:	d012      	beq.n	800055e <__udivmoddi4+0x2aa>
 8000538:	b156      	cbz	r6, 8000550 <__udivmoddi4+0x29c>
 800053a:	ebba 030e 	subs.w	r3, sl, lr
 800053e:	eb64 0405 	sbc.w	r4, r4, r5
 8000542:	fa04 f707 	lsl.w	r7, r4, r7
 8000546:	40cb      	lsrs	r3, r1
 8000548:	431f      	orrs	r7, r3
 800054a:	40cc      	lsrs	r4, r1
 800054c:	6037      	str	r7, [r6, #0]
 800054e:	6074      	str	r4, [r6, #4]
 8000550:	2100      	movs	r1, #0
 8000552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000556:	4618      	mov	r0, r3
 8000558:	e6f8      	b.n	800034c <__udivmoddi4+0x98>
 800055a:	4690      	mov	r8, r2
 800055c:	e6e0      	b.n	8000320 <__udivmoddi4+0x6c>
 800055e:	45c2      	cmp	sl, r8
 8000560:	d2ea      	bcs.n	8000538 <__udivmoddi4+0x284>
 8000562:	ebb8 0e02 	subs.w	lr, r8, r2
 8000566:	eb69 0503 	sbc.w	r5, r9, r3
 800056a:	3801      	subs	r0, #1
 800056c:	e7e4      	b.n	8000538 <__udivmoddi4+0x284>
 800056e:	4628      	mov	r0, r5
 8000570:	e7d7      	b.n	8000522 <__udivmoddi4+0x26e>
 8000572:	4640      	mov	r0, r8
 8000574:	e791      	b.n	800049a <__udivmoddi4+0x1e6>
 8000576:	4681      	mov	r9, r0
 8000578:	e7be      	b.n	80004f8 <__udivmoddi4+0x244>
 800057a:	4601      	mov	r1, r0
 800057c:	e778      	b.n	8000470 <__udivmoddi4+0x1bc>
 800057e:	3802      	subs	r0, #2
 8000580:	443c      	add	r4, r7
 8000582:	e745      	b.n	8000410 <__udivmoddi4+0x15c>
 8000584:	4608      	mov	r0, r1
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xe6>
 8000588:	f1a8 0802 	sub.w	r8, r8, #2
 800058c:	443d      	add	r5, r7
 800058e:	e72b      	b.n	80003e8 <__udivmoddi4+0x134>

08000590 <selfrel_offset31>:
 8000590:	6803      	ldr	r3, [r0, #0]
 8000592:	005a      	lsls	r2, r3, #1
 8000594:	bf4c      	ite	mi
 8000596:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800059a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800059e:	4418      	add	r0, r3
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <search_EIT_table>:
 80005a4:	b361      	cbz	r1, 8000600 <search_EIT_table+0x5c>
 80005a6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005aa:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 80005ae:	4690      	mov	r8, r2
 80005b0:	4606      	mov	r6, r0
 80005b2:	46d1      	mov	r9, sl
 80005b4:	2700      	movs	r7, #0
 80005b6:	eb07 0409 	add.w	r4, r7, r9
 80005ba:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80005be:	1064      	asrs	r4, r4, #1
 80005c0:	00e5      	lsls	r5, r4, #3
 80005c2:	1971      	adds	r1, r6, r5
 80005c4:	4608      	mov	r0, r1
 80005c6:	f7ff ffe3 	bl	8000590 <selfrel_offset31>
 80005ca:	45a2      	cmp	sl, r4
 80005cc:	4683      	mov	fp, r0
 80005ce:	f105 0008 	add.w	r0, r5, #8
 80005d2:	4430      	add	r0, r6
 80005d4:	d009      	beq.n	80005ea <search_EIT_table+0x46>
 80005d6:	f7ff ffdb 	bl	8000590 <selfrel_offset31>
 80005da:	45c3      	cmp	fp, r8
 80005dc:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80005e0:	d805      	bhi.n	80005ee <search_EIT_table+0x4a>
 80005e2:	4540      	cmp	r0, r8
 80005e4:	d209      	bcs.n	80005fa <search_EIT_table+0x56>
 80005e6:	1c67      	adds	r7, r4, #1
 80005e8:	e7e5      	b.n	80005b6 <search_EIT_table+0x12>
 80005ea:	45c3      	cmp	fp, r8
 80005ec:	d905      	bls.n	80005fa <search_EIT_table+0x56>
 80005ee:	42a7      	cmp	r7, r4
 80005f0:	d002      	beq.n	80005f8 <search_EIT_table+0x54>
 80005f2:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 80005f6:	e7de      	b.n	80005b6 <search_EIT_table+0x12>
 80005f8:	2100      	movs	r1, #0
 80005fa:	4608      	mov	r0, r1
 80005fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000600:	4608      	mov	r0, r1
 8000602:	4770      	bx	lr

08000604 <__gnu_unwind_get_pr_addr>:
 8000604:	2801      	cmp	r0, #1
 8000606:	d007      	beq.n	8000618 <__gnu_unwind_get_pr_addr+0x14>
 8000608:	2802      	cmp	r0, #2
 800060a:	d007      	beq.n	800061c <__gnu_unwind_get_pr_addr+0x18>
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <__gnu_unwind_get_pr_addr+0x1c>)
 800060e:	2800      	cmp	r0, #0
 8000610:	bf0c      	ite	eq
 8000612:	4618      	moveq	r0, r3
 8000614:	2000      	movne	r0, #0
 8000616:	4770      	bx	lr
 8000618:	4802      	ldr	r0, [pc, #8]	; (8000624 <__gnu_unwind_get_pr_addr+0x20>)
 800061a:	4770      	bx	lr
 800061c:	4802      	ldr	r0, [pc, #8]	; (8000628 <__gnu_unwind_get_pr_addr+0x24>)
 800061e:	4770      	bx	lr
 8000620:	08000d09 	.word	0x08000d09
 8000624:	08000d0d 	.word	0x08000d0d
 8000628:	08000d11 	.word	0x08000d11

0800062c <get_eit_entry>:
 800062c:	b530      	push	{r4, r5, lr}
 800062e:	4b24      	ldr	r3, [pc, #144]	; (80006c0 <get_eit_entry+0x94>)
 8000630:	b083      	sub	sp, #12
 8000632:	4604      	mov	r4, r0
 8000634:	1e8d      	subs	r5, r1, #2
 8000636:	b37b      	cbz	r3, 8000698 <get_eit_entry+0x6c>
 8000638:	a901      	add	r1, sp, #4
 800063a:	4628      	mov	r0, r5
 800063c:	f3af 8000 	nop.w
 8000640:	b320      	cbz	r0, 800068c <get_eit_entry+0x60>
 8000642:	9901      	ldr	r1, [sp, #4]
 8000644:	462a      	mov	r2, r5
 8000646:	f7ff ffad 	bl	80005a4 <search_EIT_table>
 800064a:	4601      	mov	r1, r0
 800064c:	b1f0      	cbz	r0, 800068c <get_eit_entry+0x60>
 800064e:	f7ff ff9f 	bl	8000590 <selfrel_offset31>
 8000652:	684b      	ldr	r3, [r1, #4]
 8000654:	64a0      	str	r0, [r4, #72]	; 0x48
 8000656:	2b01      	cmp	r3, #1
 8000658:	d012      	beq.n	8000680 <get_eit_entry+0x54>
 800065a:	2b00      	cmp	r3, #0
 800065c:	f101 0004 	add.w	r0, r1, #4
 8000660:	db20      	blt.n	80006a4 <get_eit_entry+0x78>
 8000662:	f7ff ff95 	bl	8000590 <selfrel_offset31>
 8000666:	2300      	movs	r3, #0
 8000668:	64e0      	str	r0, [r4, #76]	; 0x4c
 800066a:	6523      	str	r3, [r4, #80]	; 0x50
 800066c:	6803      	ldr	r3, [r0, #0]
 800066e:	2b00      	cmp	r3, #0
 8000670:	db1c      	blt.n	80006ac <get_eit_entry+0x80>
 8000672:	f7ff ff8d 	bl	8000590 <selfrel_offset31>
 8000676:	2300      	movs	r3, #0
 8000678:	6120      	str	r0, [r4, #16]
 800067a:	4618      	mov	r0, r3
 800067c:	b003      	add	sp, #12
 800067e:	bd30      	pop	{r4, r5, pc}
 8000680:	2300      	movs	r3, #0
 8000682:	6123      	str	r3, [r4, #16]
 8000684:	2305      	movs	r3, #5
 8000686:	4618      	mov	r0, r3
 8000688:	b003      	add	sp, #12
 800068a:	bd30      	pop	{r4, r5, pc}
 800068c:	2300      	movs	r3, #0
 800068e:	6123      	str	r3, [r4, #16]
 8000690:	2309      	movs	r3, #9
 8000692:	4618      	mov	r0, r3
 8000694:	b003      	add	sp, #12
 8000696:	bd30      	pop	{r4, r5, pc}
 8000698:	490a      	ldr	r1, [pc, #40]	; (80006c4 <get_eit_entry+0x98>)
 800069a:	480b      	ldr	r0, [pc, #44]	; (80006c8 <get_eit_entry+0x9c>)
 800069c:	1a09      	subs	r1, r1, r0
 800069e:	10c9      	asrs	r1, r1, #3
 80006a0:	9101      	str	r1, [sp, #4]
 80006a2:	e7cf      	b.n	8000644 <get_eit_entry+0x18>
 80006a4:	2301      	movs	r3, #1
 80006a6:	64e0      	str	r0, [r4, #76]	; 0x4c
 80006a8:	6523      	str	r3, [r4, #80]	; 0x50
 80006aa:	e7df      	b.n	800066c <get_eit_entry+0x40>
 80006ac:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80006b0:	f7ff ffa8 	bl	8000604 <__gnu_unwind_get_pr_addr>
 80006b4:	2800      	cmp	r0, #0
 80006b6:	6120      	str	r0, [r4, #16]
 80006b8:	bf14      	ite	ne
 80006ba:	2300      	movne	r3, #0
 80006bc:	2309      	moveq	r3, #9
 80006be:	e7dc      	b.n	800067a <get_eit_entry+0x4e>
 80006c0:	00000000 	.word	0x00000000
 80006c4:	080086d4 	.word	0x080086d4
 80006c8:	0800822c 	.word	0x0800822c

080006cc <restore_non_core_regs>:
 80006cc:	6803      	ldr	r3, [r0, #0]
 80006ce:	07da      	lsls	r2, r3, #31
 80006d0:	b510      	push	{r4, lr}
 80006d2:	4604      	mov	r4, r0
 80006d4:	d406      	bmi.n	80006e4 <restore_non_core_regs+0x18>
 80006d6:	079b      	lsls	r3, r3, #30
 80006d8:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80006dc:	d509      	bpl.n	80006f2 <restore_non_core_regs+0x26>
 80006de:	f000 fc51 	bl	8000f84 <__gnu_Unwind_Restore_VFP_D>
 80006e2:	6823      	ldr	r3, [r4, #0]
 80006e4:	0759      	lsls	r1, r3, #29
 80006e6:	d509      	bpl.n	80006fc <restore_non_core_regs+0x30>
 80006e8:	071a      	lsls	r2, r3, #28
 80006ea:	d50e      	bpl.n	800070a <restore_non_core_regs+0x3e>
 80006ec:	06db      	lsls	r3, r3, #27
 80006ee:	d513      	bpl.n	8000718 <restore_non_core_regs+0x4c>
 80006f0:	bd10      	pop	{r4, pc}
 80006f2:	f000 fc3f 	bl	8000f74 <__gnu_Unwind_Restore_VFP>
 80006f6:	6823      	ldr	r3, [r4, #0]
 80006f8:	0759      	lsls	r1, r3, #29
 80006fa:	d4f5      	bmi.n	80006e8 <restore_non_core_regs+0x1c>
 80006fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000700:	f000 fc48 	bl	8000f94 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000704:	6823      	ldr	r3, [r4, #0]
 8000706:	071a      	lsls	r2, r3, #28
 8000708:	d4f0      	bmi.n	80006ec <restore_non_core_regs+0x20>
 800070a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 800070e:	f000 fc49 	bl	8000fa4 <__gnu_Unwind_Restore_WMMXD>
 8000712:	6823      	ldr	r3, [r4, #0]
 8000714:	06db      	lsls	r3, r3, #27
 8000716:	d4eb      	bmi.n	80006f0 <restore_non_core_regs+0x24>
 8000718:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 800071c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000720:	f000 bc84 	b.w	800102c <__gnu_Unwind_Restore_WMMXC>

08000724 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000724:	6803      	ldr	r3, [r0, #0]
 8000726:	b103      	cbz	r3, 800072a <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000728:	4403      	add	r3, r0
 800072a:	4618      	mov	r0, r3
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop

08000730 <__gnu_unwind_24bit.isra.1>:
 8000730:	2009      	movs	r0, #9
 8000732:	4770      	bx	lr

08000734 <_Unwind_DebugHook>:
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <unwind_phase2>:
 8000738:	b570      	push	{r4, r5, r6, lr}
 800073a:	4604      	mov	r4, r0
 800073c:	460d      	mov	r5, r1
 800073e:	e008      	b.n	8000752 <unwind_phase2+0x1a>
 8000740:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000742:	6163      	str	r3, [r4, #20]
 8000744:	462a      	mov	r2, r5
 8000746:	6923      	ldr	r3, [r4, #16]
 8000748:	4621      	mov	r1, r4
 800074a:	2001      	movs	r0, #1
 800074c:	4798      	blx	r3
 800074e:	2808      	cmp	r0, #8
 8000750:	d108      	bne.n	8000764 <unwind_phase2+0x2c>
 8000752:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000754:	4620      	mov	r0, r4
 8000756:	f7ff ff69 	bl	800062c <get_eit_entry>
 800075a:	4606      	mov	r6, r0
 800075c:	2800      	cmp	r0, #0
 800075e:	d0ef      	beq.n	8000740 <unwind_phase2+0x8>
 8000760:	f006 fccc 	bl	80070fc <abort>
 8000764:	2807      	cmp	r0, #7
 8000766:	d1fb      	bne.n	8000760 <unwind_phase2+0x28>
 8000768:	4630      	mov	r0, r6
 800076a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800076c:	f7ff ffe2 	bl	8000734 <_Unwind_DebugHook>
 8000770:	1d28      	adds	r0, r5, #4
 8000772:	f000 fbf3 	bl	8000f5c <__restore_core_regs>
 8000776:	bf00      	nop

08000778 <unwind_phase2_forced>:
 8000778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800077c:	1d0c      	adds	r4, r1, #4
 800077e:	4605      	mov	r5, r0
 8000780:	4692      	mov	sl, r2
 8000782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000784:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000788:	ae03      	add	r6, sp, #12
 800078a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800078c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800078e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000792:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000794:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000798:	ac02      	add	r4, sp, #8
 800079a:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800079e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 80007a2:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80007a6:	2300      	movs	r3, #0
 80007a8:	4628      	mov	r0, r5
 80007aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80007ac:	6023      	str	r3, [r4, #0]
 80007ae:	f7ff ff3d 	bl	800062c <get_eit_entry>
 80007b2:	f1ba 0f00 	cmp.w	sl, #0
 80007b6:	4607      	mov	r7, r0
 80007b8:	bf14      	ite	ne
 80007ba:	260a      	movne	r6, #10
 80007bc:	2609      	moveq	r6, #9
 80007be:	b17f      	cbz	r7, 80007e0 <unwind_phase2_forced+0x68>
 80007c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80007c2:	f046 0110 	orr.w	r1, r6, #16
 80007c6:	e88d 0210 	stmia.w	sp, {r4, r9}
 80007ca:	462a      	mov	r2, r5
 80007cc:	6463      	str	r3, [r4, #68]	; 0x44
 80007ce:	2001      	movs	r0, #1
 80007d0:	462b      	mov	r3, r5
 80007d2:	47c0      	blx	r8
 80007d4:	bb78      	cbnz	r0, 8000836 <unwind_phase2_forced+0xbe>
 80007d6:	4638      	mov	r0, r7
 80007d8:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007e2:	616b      	str	r3, [r5, #20]
 80007e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80007e8:	4621      	mov	r1, r4
 80007ea:	a87a      	add	r0, sp, #488	; 0x1e8
 80007ec:	f006 fcd0 	bl	8007190 <memcpy>
 80007f0:	692b      	ldr	r3, [r5, #16]
 80007f2:	aa7a      	add	r2, sp, #488	; 0x1e8
 80007f4:	4629      	mov	r1, r5
 80007f6:	4630      	mov	r0, r6
 80007f8:	4798      	blx	r3
 80007fa:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80007fc:	4682      	mov	sl, r0
 80007fe:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000802:	4631      	mov	r1, r6
 8000804:	6463      	str	r3, [r4, #68]	; 0x44
 8000806:	462a      	mov	r2, r5
 8000808:	462b      	mov	r3, r5
 800080a:	2001      	movs	r0, #1
 800080c:	47c0      	blx	r8
 800080e:	b990      	cbnz	r0, 8000836 <unwind_phase2_forced+0xbe>
 8000810:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000814:	a97a      	add	r1, sp, #488	; 0x1e8
 8000816:	4620      	mov	r0, r4
 8000818:	f006 fcba 	bl	8007190 <memcpy>
 800081c:	f1ba 0f08 	cmp.w	sl, #8
 8000820:	d106      	bne.n	8000830 <unwind_phase2_forced+0xb8>
 8000822:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000824:	4628      	mov	r0, r5
 8000826:	f7ff ff01 	bl	800062c <get_eit_entry>
 800082a:	2609      	movs	r6, #9
 800082c:	4607      	mov	r7, r0
 800082e:	e7c6      	b.n	80007be <unwind_phase2_forced+0x46>
 8000830:	f1ba 0f07 	cmp.w	sl, #7
 8000834:	d005      	beq.n	8000842 <unwind_phase2_forced+0xca>
 8000836:	2709      	movs	r7, #9
 8000838:	4638      	mov	r0, r7
 800083a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800083e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000842:	4638      	mov	r0, r7
 8000844:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000846:	f7ff ff75 	bl	8000734 <_Unwind_DebugHook>
 800084a:	a803      	add	r0, sp, #12
 800084c:	f000 fb86 	bl	8000f5c <__restore_core_regs>

08000850 <_Unwind_GetCFA>:
 8000850:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000852:	4770      	bx	lr

08000854 <__gnu_Unwind_RaiseException>:
 8000854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000856:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000858:	640b      	str	r3, [r1, #64]	; 0x40
 800085a:	1d0e      	adds	r6, r1, #4
 800085c:	460f      	mov	r7, r1
 800085e:	4604      	mov	r4, r0
 8000860:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000862:	b0f9      	sub	sp, #484	; 0x1e4
 8000864:	ad01      	add	r5, sp, #4
 8000866:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000868:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800086a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800086c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800086e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000870:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000874:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000878:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800087c:	9600      	str	r6, [sp, #0]
 800087e:	e006      	b.n	800088e <__gnu_Unwind_RaiseException+0x3a>
 8000880:	6923      	ldr	r3, [r4, #16]
 8000882:	466a      	mov	r2, sp
 8000884:	4621      	mov	r1, r4
 8000886:	4798      	blx	r3
 8000888:	2808      	cmp	r0, #8
 800088a:	4605      	mov	r5, r0
 800088c:	d108      	bne.n	80008a0 <__gnu_Unwind_RaiseException+0x4c>
 800088e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000890:	4620      	mov	r0, r4
 8000892:	f7ff fecb 	bl	800062c <get_eit_entry>
 8000896:	2800      	cmp	r0, #0
 8000898:	d0f2      	beq.n	8000880 <__gnu_Unwind_RaiseException+0x2c>
 800089a:	2009      	movs	r0, #9
 800089c:	b079      	add	sp, #484	; 0x1e4
 800089e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a0:	4668      	mov	r0, sp
 80008a2:	f7ff ff13 	bl	80006cc <restore_non_core_regs>
 80008a6:	2d06      	cmp	r5, #6
 80008a8:	d1f7      	bne.n	800089a <__gnu_Unwind_RaiseException+0x46>
 80008aa:	4639      	mov	r1, r7
 80008ac:	4620      	mov	r0, r4
 80008ae:	f7ff ff43 	bl	8000738 <unwind_phase2>
 80008b2:	bf00      	nop

080008b4 <__gnu_Unwind_ForcedUnwind>:
 80008b4:	b430      	push	{r4, r5}
 80008b6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80008b8:	60c1      	str	r1, [r0, #12]
 80008ba:	6182      	str	r2, [r0, #24]
 80008bc:	4619      	mov	r1, r3
 80008be:	641d      	str	r5, [r3, #64]	; 0x40
 80008c0:	2200      	movs	r2, #0
 80008c2:	bc30      	pop	{r4, r5}
 80008c4:	e758      	b.n	8000778 <unwind_phase2_forced>
 80008c6:	bf00      	nop

080008c8 <__gnu_Unwind_Resume>:
 80008c8:	b570      	push	{r4, r5, r6, lr}
 80008ca:	68c6      	ldr	r6, [r0, #12]
 80008cc:	6943      	ldr	r3, [r0, #20]
 80008ce:	640b      	str	r3, [r1, #64]	; 0x40
 80008d0:	b126      	cbz	r6, 80008dc <__gnu_Unwind_Resume+0x14>
 80008d2:	2201      	movs	r2, #1
 80008d4:	f7ff ff50 	bl	8000778 <unwind_phase2_forced>
 80008d8:	f006 fc10 	bl	80070fc <abort>
 80008dc:	6903      	ldr	r3, [r0, #16]
 80008de:	460a      	mov	r2, r1
 80008e0:	4604      	mov	r4, r0
 80008e2:	460d      	mov	r5, r1
 80008e4:	4601      	mov	r1, r0
 80008e6:	2002      	movs	r0, #2
 80008e8:	4798      	blx	r3
 80008ea:	2807      	cmp	r0, #7
 80008ec:	d007      	beq.n	80008fe <__gnu_Unwind_Resume+0x36>
 80008ee:	2808      	cmp	r0, #8
 80008f0:	d103      	bne.n	80008fa <__gnu_Unwind_Resume+0x32>
 80008f2:	4629      	mov	r1, r5
 80008f4:	4620      	mov	r0, r4
 80008f6:	f7ff ff1f 	bl	8000738 <unwind_phase2>
 80008fa:	f006 fbff 	bl	80070fc <abort>
 80008fe:	4630      	mov	r0, r6
 8000900:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000902:	f7ff ff17 	bl	8000734 <_Unwind_DebugHook>
 8000906:	1d28      	adds	r0, r5, #4
 8000908:	f000 fb28 	bl	8000f5c <__restore_core_regs>

0800090c <__gnu_Unwind_Resume_or_Rethrow>:
 800090c:	68c2      	ldr	r2, [r0, #12]
 800090e:	b11a      	cbz	r2, 8000918 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 8000910:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8000912:	640a      	str	r2, [r1, #64]	; 0x40
 8000914:	2200      	movs	r2, #0
 8000916:	e72f      	b.n	8000778 <unwind_phase2_forced>
 8000918:	e79c      	b.n	8000854 <__gnu_Unwind_RaiseException>
 800091a:	bf00      	nop

0800091c <_Unwind_Complete>:
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <_Unwind_DeleteException>:
 8000920:	6883      	ldr	r3, [r0, #8]
 8000922:	b113      	cbz	r3, 800092a <_Unwind_DeleteException+0xa>
 8000924:	4601      	mov	r1, r0
 8000926:	2001      	movs	r0, #1
 8000928:	4718      	bx	r3
 800092a:	4770      	bx	lr

0800092c <_Unwind_VRS_Get>:
 800092c:	b500      	push	{lr}
 800092e:	2904      	cmp	r1, #4
 8000930:	d807      	bhi.n	8000942 <_Unwind_VRS_Get+0x16>
 8000932:	e8df f001 	tbb	[pc, r1]
 8000936:	0903      	.short	0x0903
 8000938:	0906      	.short	0x0906
 800093a:	09          	.byte	0x09
 800093b:	00          	.byte	0x00
 800093c:	b90b      	cbnz	r3, 8000942 <_Unwind_VRS_Get+0x16>
 800093e:	2a0f      	cmp	r2, #15
 8000940:	d905      	bls.n	800094e <_Unwind_VRS_Get+0x22>
 8000942:	2002      	movs	r0, #2
 8000944:	f85d fb04 	ldr.w	pc, [sp], #4
 8000948:	2001      	movs	r0, #1
 800094a:	f85d fb04 	ldr.w	pc, [sp], #4
 800094e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000952:	4618      	mov	r0, r3
 8000954:	6853      	ldr	r3, [r2, #4]
 8000956:	9a01      	ldr	r2, [sp, #4]
 8000958:	6013      	str	r3, [r2, #0]
 800095a:	f85d fb04 	ldr.w	pc, [sp], #4
 800095e:	bf00      	nop

08000960 <_Unwind_GetGR>:
 8000960:	b510      	push	{r4, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	2300      	movs	r3, #0
 8000966:	ac03      	add	r4, sp, #12
 8000968:	460a      	mov	r2, r1
 800096a:	9400      	str	r4, [sp, #0]
 800096c:	4619      	mov	r1, r3
 800096e:	f7ff ffdd 	bl	800092c <_Unwind_VRS_Get>
 8000972:	9803      	ldr	r0, [sp, #12]
 8000974:	b004      	add	sp, #16
 8000976:	bd10      	pop	{r4, pc}

08000978 <_Unwind_VRS_Set>:
 8000978:	b500      	push	{lr}
 800097a:	2904      	cmp	r1, #4
 800097c:	d807      	bhi.n	800098e <_Unwind_VRS_Set+0x16>
 800097e:	e8df f001 	tbb	[pc, r1]
 8000982:	0903      	.short	0x0903
 8000984:	0906      	.short	0x0906
 8000986:	09          	.byte	0x09
 8000987:	00          	.byte	0x00
 8000988:	b90b      	cbnz	r3, 800098e <_Unwind_VRS_Set+0x16>
 800098a:	2a0f      	cmp	r2, #15
 800098c:	d905      	bls.n	800099a <_Unwind_VRS_Set+0x22>
 800098e:	2002      	movs	r0, #2
 8000990:	f85d fb04 	ldr.w	pc, [sp], #4
 8000994:	2001      	movs	r0, #1
 8000996:	f85d fb04 	ldr.w	pc, [sp], #4
 800099a:	9901      	ldr	r1, [sp, #4]
 800099c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80009a0:	6809      	ldr	r1, [r1, #0]
 80009a2:	6051      	str	r1, [r2, #4]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80009aa:	bf00      	nop

080009ac <_Unwind_SetGR>:
 80009ac:	b510      	push	{r4, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	ac04      	add	r4, sp, #16
 80009b2:	2300      	movs	r3, #0
 80009b4:	f844 2d04 	str.w	r2, [r4, #-4]!
 80009b8:	460a      	mov	r2, r1
 80009ba:	9400      	str	r4, [sp, #0]
 80009bc:	4619      	mov	r1, r3
 80009be:	f7ff ffdb 	bl	8000978 <_Unwind_VRS_Set>
 80009c2:	b004      	add	sp, #16
 80009c4:	bd10      	pop	{r4, pc}
 80009c6:	bf00      	nop

080009c8 <__gnu_Unwind_Backtrace>:
 80009c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009ca:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
 80009ce:	1d15      	adds	r5, r2, #4
 80009d0:	4607      	mov	r7, r0
 80009d2:	460e      	mov	r6, r1
 80009d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d6:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80009da:	ac17      	add	r4, sp, #92	; 0x5c
 80009dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009ea:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80009ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80009f2:	9516      	str	r5, [sp, #88]	; 0x58
 80009f4:	e010      	b.n	8000a18 <__gnu_Unwind_Backtrace+0x50>
 80009f6:	a816      	add	r0, sp, #88	; 0x58
 80009f8:	f7ff ffd8 	bl	80009ac <_Unwind_SetGR>
 80009fc:	4631      	mov	r1, r6
 80009fe:	a816      	add	r0, sp, #88	; 0x58
 8000a00:	47b8      	blx	r7
 8000a02:	aa16      	add	r2, sp, #88	; 0x58
 8000a04:	4669      	mov	r1, sp
 8000a06:	b978      	cbnz	r0, 8000a28 <__gnu_Unwind_Backtrace+0x60>
 8000a08:	9b04      	ldr	r3, [sp, #16]
 8000a0a:	2008      	movs	r0, #8
 8000a0c:	4798      	blx	r3
 8000a0e:	2805      	cmp	r0, #5
 8000a10:	4604      	mov	r4, r0
 8000a12:	d00a      	beq.n	8000a2a <__gnu_Unwind_Backtrace+0x62>
 8000a14:	2809      	cmp	r0, #9
 8000a16:	d007      	beq.n	8000a28 <__gnu_Unwind_Backtrace+0x60>
 8000a18:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000a1a:	4668      	mov	r0, sp
 8000a1c:	f7ff fe06 	bl	800062c <get_eit_entry>
 8000a20:	466a      	mov	r2, sp
 8000a22:	210c      	movs	r1, #12
 8000a24:	2800      	cmp	r0, #0
 8000a26:	d0e6      	beq.n	80009f6 <__gnu_Unwind_Backtrace+0x2e>
 8000a28:	2409      	movs	r4, #9
 8000a2a:	a816      	add	r0, sp, #88	; 0x58
 8000a2c:	f7ff fe4e 	bl	80006cc <restore_non_core_regs>
 8000a30:	4620      	mov	r0, r4
 8000a32:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000a36:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a38 <__gnu_unwind_pr_common>:
 8000a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a3c:	460d      	mov	r5, r1
 8000a3e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000a40:	b08b      	sub	sp, #44	; 0x2c
 8000a42:	1d0c      	adds	r4, r1, #4
 8000a44:	6809      	ldr	r1, [r1, #0]
 8000a46:	9107      	str	r1, [sp, #28]
 8000a48:	4691      	mov	r9, r2
 8000a4a:	9408      	str	r4, [sp, #32]
 8000a4c:	f000 0b03 	and.w	fp, r0, #3
 8000a50:	461e      	mov	r6, r3
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d160      	bne.n	8000b18 <__gnu_unwind_pr_common+0xe0>
 8000a56:	0209      	lsls	r1, r1, #8
 8000a58:	2303      	movs	r3, #3
 8000a5a:	9107      	str	r1, [sp, #28]
 8000a5c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000a60:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000a64:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a66:	f1bb 0f02 	cmp.w	fp, #2
 8000a6a:	bf08      	it	eq
 8000a6c:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000a6e:	f013 0301 	ands.w	r3, r3, #1
 8000a72:	d140      	bne.n	8000af6 <__gnu_unwind_pr_common+0xbe>
 8000a74:	9301      	str	r3, [sp, #4]
 8000a76:	f000 0308 	and.w	r3, r0, #8
 8000a7a:	9303      	str	r3, [sp, #12]
 8000a7c:	f8d4 8000 	ldr.w	r8, [r4]
 8000a80:	f1b8 0f00 	cmp.w	r8, #0
 8000a84:	d039      	beq.n	8000afa <__gnu_unwind_pr_common+0xc2>
 8000a86:	2e02      	cmp	r6, #2
 8000a88:	d043      	beq.n	8000b12 <__gnu_unwind_pr_common+0xda>
 8000a8a:	f8b4 8000 	ldrh.w	r8, [r4]
 8000a8e:	8867      	ldrh	r7, [r4, #2]
 8000a90:	3404      	adds	r4, #4
 8000a92:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000a94:	f027 0a01 	bic.w	sl, r7, #1
 8000a98:	210f      	movs	r1, #15
 8000a9a:	4648      	mov	r0, r9
 8000a9c:	449a      	add	sl, r3
 8000a9e:	f7ff ff5f 	bl	8000960 <_Unwind_GetGR>
 8000aa2:	4582      	cmp	sl, r0
 8000aa4:	d833      	bhi.n	8000b0e <__gnu_unwind_pr_common+0xd6>
 8000aa6:	f028 0301 	bic.w	r3, r8, #1
 8000aaa:	449a      	add	sl, r3
 8000aac:	4550      	cmp	r0, sl
 8000aae:	bf2c      	ite	cs
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	007f      	lsls	r7, r7, #1
 8000ab6:	f007 0702 	and.w	r7, r7, #2
 8000aba:	f008 0801 	and.w	r8, r8, #1
 8000abe:	ea47 0708 	orr.w	r7, r7, r8
 8000ac2:	2f01      	cmp	r7, #1
 8000ac4:	d03e      	beq.n	8000b44 <__gnu_unwind_pr_common+0x10c>
 8000ac6:	d335      	bcc.n	8000b34 <__gnu_unwind_pr_common+0xfc>
 8000ac8:	2f02      	cmp	r7, #2
 8000aca:	d11c      	bne.n	8000b06 <__gnu_unwind_pr_common+0xce>
 8000acc:	6823      	ldr	r3, [r4, #0]
 8000ace:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000ad2:	9202      	str	r2, [sp, #8]
 8000ad4:	f1bb 0f00 	cmp.w	fp, #0
 8000ad8:	d176      	bne.n	8000bc8 <__gnu_unwind_pr_common+0x190>
 8000ada:	b128      	cbz	r0, 8000ae8 <__gnu_unwind_pr_common+0xb0>
 8000adc:	9903      	ldr	r1, [sp, #12]
 8000ade:	2900      	cmp	r1, #0
 8000ae0:	d07e      	beq.n	8000be0 <__gnu_unwind_pr_common+0x1a8>
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	f000 80a6 	beq.w	8000c34 <__gnu_unwind_pr_common+0x1fc>
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	db77      	blt.n	8000bdc <__gnu_unwind_pr_common+0x1a4>
 8000aec:	9b02      	ldr	r3, [sp, #8]
 8000aee:	3301      	adds	r3, #1
 8000af0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000af4:	e7c2      	b.n	8000a7c <__gnu_unwind_pr_common+0x44>
 8000af6:	2300      	movs	r3, #0
 8000af8:	9301      	str	r3, [sp, #4]
 8000afa:	2e02      	cmp	r6, #2
 8000afc:	dd3e      	ble.n	8000b7c <__gnu_unwind_pr_common+0x144>
 8000afe:	f7ff fe17 	bl	8000730 <__gnu_unwind_24bit.isra.1>
 8000b02:	2800      	cmp	r0, #0
 8000b04:	d040      	beq.n	8000b88 <__gnu_unwind_pr_common+0x150>
 8000b06:	2009      	movs	r0, #9
 8000b08:	b00b      	add	sp, #44	; 0x2c
 8000b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b0e:	2000      	movs	r0, #0
 8000b10:	e7d0      	b.n	8000ab4 <__gnu_unwind_pr_common+0x7c>
 8000b12:	6867      	ldr	r7, [r4, #4]
 8000b14:	3408      	adds	r4, #8
 8000b16:	e7bc      	b.n	8000a92 <__gnu_unwind_pr_common+0x5a>
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	dca3      	bgt.n	8000a64 <__gnu_unwind_pr_common+0x2c>
 8000b1c:	0c0b      	lsrs	r3, r1, #16
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	0409      	lsls	r1, r1, #16
 8000b22:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000b26:	2302      	movs	r3, #2
 8000b28:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000b2c:	9107      	str	r1, [sp, #28]
 8000b2e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000b32:	e797      	b.n	8000a64 <__gnu_unwind_pr_common+0x2c>
 8000b34:	f1bb 0f00 	cmp.w	fp, #0
 8000b38:	d002      	beq.n	8000b40 <__gnu_unwind_pr_common+0x108>
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	f040 80bd 	bne.w	8000cba <__gnu_unwind_pr_common+0x282>
 8000b40:	3404      	adds	r4, #4
 8000b42:	e79b      	b.n	8000a7c <__gnu_unwind_pr_common+0x44>
 8000b44:	f1bb 0f00 	cmp.w	fp, #0
 8000b48:	d125      	bne.n	8000b96 <__gnu_unwind_pr_common+0x15e>
 8000b4a:	b1a8      	cbz	r0, 8000b78 <__gnu_unwind_pr_common+0x140>
 8000b4c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000b50:	1c99      	adds	r1, r3, #2
 8000b52:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000b56:	d0d6      	beq.n	8000b06 <__gnu_unwind_pr_common+0xce>
 8000b58:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	9106      	str	r1, [sp, #24]
 8000b60:	f000 80a3 	beq.w	8000caa <__gnu_unwind_pr_common+0x272>
 8000b64:	1d20      	adds	r0, r4, #4
 8000b66:	f7ff fddd 	bl	8000724 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b6a:	ab06      	add	r3, sp, #24
 8000b6c:	4601      	mov	r1, r0
 8000b6e:	4628      	mov	r0, r5
 8000b70:	f005 fce2 	bl	8006538 <__cxa_type_match>
 8000b74:	2800      	cmp	r0, #0
 8000b76:	d177      	bne.n	8000c68 <__gnu_unwind_pr_common+0x230>
 8000b78:	3408      	adds	r4, #8
 8000b7a:	e77f      	b.n	8000a7c <__gnu_unwind_pr_common+0x44>
 8000b7c:	a907      	add	r1, sp, #28
 8000b7e:	4648      	mov	r0, r9
 8000b80:	f000 faee 	bl	8001160 <__gnu_unwind_execute>
 8000b84:	2800      	cmp	r0, #0
 8000b86:	d1be      	bne.n	8000b06 <__gnu_unwind_pr_common+0xce>
 8000b88:	9b01      	ldr	r3, [sp, #4]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d15c      	bne.n	8000c48 <__gnu_unwind_pr_common+0x210>
 8000b8e:	2008      	movs	r0, #8
 8000b90:	b00b      	add	sp, #44	; 0x2c
 8000b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b96:	210d      	movs	r1, #13
 8000b98:	4648      	mov	r0, r9
 8000b9a:	6a2f      	ldr	r7, [r5, #32]
 8000b9c:	f7ff fee0 	bl	8000960 <_Unwind_GetGR>
 8000ba0:	4287      	cmp	r7, r0
 8000ba2:	d1e9      	bne.n	8000b78 <__gnu_unwind_pr_common+0x140>
 8000ba4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000ba6:	429c      	cmp	r4, r3
 8000ba8:	d1e6      	bne.n	8000b78 <__gnu_unwind_pr_common+0x140>
 8000baa:	4620      	mov	r0, r4
 8000bac:	f7ff fcf0 	bl	8000590 <selfrel_offset31>
 8000bb0:	210f      	movs	r1, #15
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	4648      	mov	r0, r9
 8000bb6:	f7ff fef9 	bl	80009ac <_Unwind_SetGR>
 8000bba:	4648      	mov	r0, r9
 8000bbc:	462a      	mov	r2, r5
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f7ff fef4 	bl	80009ac <_Unwind_SetGR>
 8000bc4:	2007      	movs	r0, #7
 8000bc6:	e79f      	b.n	8000b08 <__gnu_unwind_pr_common+0xd0>
 8000bc8:	210d      	movs	r1, #13
 8000bca:	4648      	mov	r0, r9
 8000bcc:	6a2f      	ldr	r7, [r5, #32]
 8000bce:	f7ff fec7 	bl	8000960 <_Unwind_GetGR>
 8000bd2:	4287      	cmp	r7, r0
 8000bd4:	d058      	beq.n	8000c88 <__gnu_unwind_pr_common+0x250>
 8000bd6:	6823      	ldr	r3, [r4, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	da87      	bge.n	8000aec <__gnu_unwind_pr_common+0xb4>
 8000bdc:	3404      	adds	r4, #4
 8000bde:	e785      	b.n	8000aec <__gnu_unwind_pr_common+0xb4>
 8000be0:	9b02      	ldr	r3, [sp, #8]
 8000be2:	b33b      	cbz	r3, 8000c34 <__gnu_unwind_pr_common+0x1fc>
 8000be4:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000be8:	1d27      	adds	r7, r4, #4
 8000bea:	f8cd b010 	str.w	fp, [sp, #16]
 8000bee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000bf2:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000bf6:	9605      	str	r6, [sp, #20]
 8000bf8:	46a3      	mov	fp, r4
 8000bfa:	461c      	mov	r4, r3
 8000bfc:	e002      	b.n	8000c04 <__gnu_unwind_pr_common+0x1cc>
 8000bfe:	45b2      	cmp	sl, r6
 8000c00:	46b0      	mov	r8, r6
 8000c02:	d016      	beq.n	8000c32 <__gnu_unwind_pr_common+0x1fa>
 8000c04:	4638      	mov	r0, r7
 8000c06:	9406      	str	r4, [sp, #24]
 8000c08:	f7ff fd8c 	bl	8000724 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000c0c:	ab06      	add	r3, sp, #24
 8000c0e:	4601      	mov	r1, r0
 8000c10:	2200      	movs	r2, #0
 8000c12:	4628      	mov	r0, r5
 8000c14:	f005 fc90 	bl	8006538 <__cxa_type_match>
 8000c18:	f108 0601 	add.w	r6, r8, #1
 8000c1c:	3704      	adds	r7, #4
 8000c1e:	2800      	cmp	r0, #0
 8000c20:	d0ed      	beq.n	8000bfe <__gnu_unwind_pr_common+0x1c6>
 8000c22:	9b02      	ldr	r3, [sp, #8]
 8000c24:	9e05      	ldr	r6, [sp, #20]
 8000c26:	4543      	cmp	r3, r8
 8000c28:	465c      	mov	r4, fp
 8000c2a:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000c2e:	d1d2      	bne.n	8000bd6 <__gnu_unwind_pr_common+0x19e>
 8000c30:	e000      	b.n	8000c34 <__gnu_unwind_pr_common+0x1fc>
 8000c32:	465c      	mov	r4, fp
 8000c34:	4648      	mov	r0, r9
 8000c36:	210d      	movs	r1, #13
 8000c38:	f7ff fe92 	bl	8000960 <_Unwind_GetGR>
 8000c3c:	9b06      	ldr	r3, [sp, #24]
 8000c3e:	6228      	str	r0, [r5, #32]
 8000c40:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c42:	626b      	str	r3, [r5, #36]	; 0x24
 8000c44:	2006      	movs	r0, #6
 8000c46:	e75f      	b.n	8000b08 <__gnu_unwind_pr_common+0xd0>
 8000c48:	210f      	movs	r1, #15
 8000c4a:	4648      	mov	r0, r9
 8000c4c:	f7ff fe88 	bl	8000960 <_Unwind_GetGR>
 8000c50:	210e      	movs	r1, #14
 8000c52:	4602      	mov	r2, r0
 8000c54:	4648      	mov	r0, r9
 8000c56:	f7ff fea9 	bl	80009ac <_Unwind_SetGR>
 8000c5a:	4648      	mov	r0, r9
 8000c5c:	4a29      	ldr	r2, [pc, #164]	; (8000d04 <__gnu_unwind_pr_common+0x2cc>)
 8000c5e:	210f      	movs	r1, #15
 8000c60:	f7ff fea4 	bl	80009ac <_Unwind_SetGR>
 8000c64:	2007      	movs	r0, #7
 8000c66:	e74f      	b.n	8000b08 <__gnu_unwind_pr_common+0xd0>
 8000c68:	4607      	mov	r7, r0
 8000c6a:	210d      	movs	r1, #13
 8000c6c:	4648      	mov	r0, r9
 8000c6e:	f7ff fe77 	bl	8000960 <_Unwind_GetGR>
 8000c72:	2f02      	cmp	r7, #2
 8000c74:	6228      	str	r0, [r5, #32]
 8000c76:	d11d      	bne.n	8000cb4 <__gnu_unwind_pr_common+0x27c>
 8000c78:	462b      	mov	r3, r5
 8000c7a:	9a06      	ldr	r2, [sp, #24]
 8000c7c:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000c80:	626b      	str	r3, [r5, #36]	; 0x24
 8000c82:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c84:	2006      	movs	r0, #6
 8000c86:	e73f      	b.n	8000b08 <__gnu_unwind_pr_common+0xd0>
 8000c88:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c8a:	429c      	cmp	r4, r3
 8000c8c:	d1a3      	bne.n	8000bd6 <__gnu_unwind_pr_common+0x19e>
 8000c8e:	2204      	movs	r2, #4
 8000c90:	2700      	movs	r7, #0
 8000c92:	18a3      	adds	r3, r4, r2
 8000c94:	9902      	ldr	r1, [sp, #8]
 8000c96:	62a9      	str	r1, [r5, #40]	; 0x28
 8000c98:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000c9a:	632a      	str	r2, [r5, #48]	; 0x30
 8000c9c:	636b      	str	r3, [r5, #52]	; 0x34
 8000c9e:	6823      	ldr	r3, [r4, #0]
 8000ca0:	42bb      	cmp	r3, r7
 8000ca2:	db1d      	blt.n	8000ce0 <__gnu_unwind_pr_common+0x2a8>
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	9301      	str	r3, [sp, #4]
 8000ca8:	e720      	b.n	8000aec <__gnu_unwind_pr_common+0xb4>
 8000caa:	4648      	mov	r0, r9
 8000cac:	210d      	movs	r1, #13
 8000cae:	f7ff fe57 	bl	8000960 <_Unwind_GetGR>
 8000cb2:	6228      	str	r0, [r5, #32]
 8000cb4:	9b06      	ldr	r3, [sp, #24]
 8000cb6:	626b      	str	r3, [r5, #36]	; 0x24
 8000cb8:	e7e3      	b.n	8000c82 <__gnu_unwind_pr_common+0x24a>
 8000cba:	4620      	mov	r0, r4
 8000cbc:	f7ff fc68 	bl	8000590 <selfrel_offset31>
 8000cc0:	3404      	adds	r4, #4
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	63ac      	str	r4, [r5, #56]	; 0x38
 8000cc6:	4628      	mov	r0, r5
 8000cc8:	f005 fc94 	bl	80065f4 <__cxa_begin_cleanup>
 8000ccc:	2800      	cmp	r0, #0
 8000cce:	f43f af1a 	beq.w	8000b06 <__gnu_unwind_pr_common+0xce>
 8000cd2:	4648      	mov	r0, r9
 8000cd4:	4632      	mov	r2, r6
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f7ff fe68 	bl	80009ac <_Unwind_SetGR>
 8000cdc:	2007      	movs	r0, #7
 8000cde:	e713      	b.n	8000b08 <__gnu_unwind_pr_common+0xd0>
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	3001      	adds	r0, #1
 8000ce4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000ce8:	f7ff fc52 	bl	8000590 <selfrel_offset31>
 8000cec:	210f      	movs	r1, #15
 8000cee:	4602      	mov	r2, r0
 8000cf0:	4648      	mov	r0, r9
 8000cf2:	f7ff fe5b 	bl	80009ac <_Unwind_SetGR>
 8000cf6:	4648      	mov	r0, r9
 8000cf8:	462a      	mov	r2, r5
 8000cfa:	4639      	mov	r1, r7
 8000cfc:	f7ff fe56 	bl	80009ac <_Unwind_SetGR>
 8000d00:	2007      	movs	r0, #7
 8000d02:	e701      	b.n	8000b08 <__gnu_unwind_pr_common+0xd0>
 8000d04:	08006d03 	.word	0x08006d03

08000d08 <__aeabi_unwind_cpp_pr0>:
 8000d08:	2300      	movs	r3, #0
 8000d0a:	e695      	b.n	8000a38 <__gnu_unwind_pr_common>

08000d0c <__aeabi_unwind_cpp_pr1>:
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e693      	b.n	8000a38 <__gnu_unwind_pr_common>

08000d10 <__aeabi_unwind_cpp_pr2>:
 8000d10:	2302      	movs	r3, #2
 8000d12:	e691      	b.n	8000a38 <__gnu_unwind_pr_common>

08000d14 <_Unwind_VRS_Pop>:
 8000d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d16:	4604      	mov	r4, r0
 8000d18:	b0c5      	sub	sp, #276	; 0x114
 8000d1a:	2904      	cmp	r1, #4
 8000d1c:	d80d      	bhi.n	8000d3a <_Unwind_VRS_Pop+0x26>
 8000d1e:	e8df f001 	tbb	[pc, r1]
 8000d22:	0353      	.short	0x0353
 8000d24:	310c      	.short	0x310c
 8000d26:	0f          	.byte	0x0f
 8000d27:	00          	.byte	0x00
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000d2e:	b295      	uxth	r5, r2
 8000d30:	d162      	bne.n	8000df8 <_Unwind_VRS_Pop+0xe4>
 8000d32:	1972      	adds	r2, r6, r5
 8000d34:	2a10      	cmp	r2, #16
 8000d36:	f240 809b 	bls.w	8000e70 <_Unwind_VRS_Pop+0x15c>
 8000d3a:	2002      	movs	r0, #2
 8000d3c:	b045      	add	sp, #276	; 0x114
 8000d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d1fa      	bne.n	8000d3a <_Unwind_VRS_Pop+0x26>
 8000d44:	2a10      	cmp	r2, #16
 8000d46:	d8f8      	bhi.n	8000d3a <_Unwind_VRS_Pop+0x26>
 8000d48:	6823      	ldr	r3, [r4, #0]
 8000d4a:	06d8      	lsls	r0, r3, #27
 8000d4c:	f100 80c6 	bmi.w	8000edc <_Unwind_VRS_Pop+0x1c8>
 8000d50:	ae22      	add	r6, sp, #136	; 0x88
 8000d52:	4630      	mov	r0, r6
 8000d54:	9201      	str	r2, [sp, #4]
 8000d56:	f000 f973 	bl	8001040 <__gnu_Unwind_Save_WMMXC>
 8000d5a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d5c:	9a01      	ldr	r2, [sp, #4]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	2501      	movs	r5, #1
 8000d62:	fa05 f103 	lsl.w	r1, r5, r3
 8000d66:	4211      	tst	r1, r2
 8000d68:	d003      	beq.n	8000d72 <_Unwind_VRS_Pop+0x5e>
 8000d6a:	6801      	ldr	r1, [r0, #0]
 8000d6c:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000d70:	3004      	adds	r0, #4
 8000d72:	3301      	adds	r3, #1
 8000d74:	2b04      	cmp	r3, #4
 8000d76:	d1f4      	bne.n	8000d62 <_Unwind_VRS_Pop+0x4e>
 8000d78:	63a0      	str	r0, [r4, #56]	; 0x38
 8000d7a:	4630      	mov	r0, r6
 8000d7c:	f000 f956 	bl	800102c <__gnu_Unwind_Restore_WMMXC>
 8000d80:	2000      	movs	r0, #0
 8000d82:	e7db      	b.n	8000d3c <_Unwind_VRS_Pop+0x28>
 8000d84:	2b03      	cmp	r3, #3
 8000d86:	d1d8      	bne.n	8000d3a <_Unwind_VRS_Pop+0x26>
 8000d88:	0c15      	lsrs	r5, r2, #16
 8000d8a:	b297      	uxth	r7, r2
 8000d8c:	19eb      	adds	r3, r5, r7
 8000d8e:	2b10      	cmp	r3, #16
 8000d90:	d8d3      	bhi.n	8000d3a <_Unwind_VRS_Pop+0x26>
 8000d92:	6823      	ldr	r3, [r4, #0]
 8000d94:	071e      	lsls	r6, r3, #28
 8000d96:	f100 80b5 	bmi.w	8000f04 <_Unwind_VRS_Pop+0x1f0>
 8000d9a:	ae22      	add	r6, sp, #136	; 0x88
 8000d9c:	4630      	mov	r0, r6
 8000d9e:	f000 f923 	bl	8000fe8 <__gnu_Unwind_Save_WMMXD>
 8000da2:	00ed      	lsls	r5, r5, #3
 8000da4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000da6:	b14f      	cbz	r7, 8000dbc <_Unwind_VRS_Pop+0xa8>
 8000da8:	3d04      	subs	r5, #4
 8000daa:	1971      	adds	r1, r6, r5
 8000dac:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8000db4:	f841 2f04 	str.w	r2, [r1, #4]!
 8000db8:	4283      	cmp	r3, r0
 8000dba:	d1f9      	bne.n	8000db0 <_Unwind_VRS_Pop+0x9c>
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	63a3      	str	r3, [r4, #56]	; 0x38
 8000dc0:	f000 f8f0 	bl	8000fa4 <__gnu_Unwind_Restore_WMMXD>
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	e7b9      	b.n	8000d3c <_Unwind_VRS_Pop+0x28>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1b6      	bne.n	8000d3a <_Unwind_VRS_Pop+0x26>
 8000dcc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000dce:	b297      	uxth	r7, r2
 8000dd0:	1d20      	adds	r0, r4, #4
 8000dd2:	2601      	movs	r6, #1
 8000dd4:	fa06 f103 	lsl.w	r1, r6, r3
 8000dd8:	4239      	tst	r1, r7
 8000dda:	f103 0301 	add.w	r3, r3, #1
 8000dde:	d002      	beq.n	8000de6 <_Unwind_VRS_Pop+0xd2>
 8000de0:	6829      	ldr	r1, [r5, #0]
 8000de2:	6001      	str	r1, [r0, #0]
 8000de4:	3504      	adds	r5, #4
 8000de6:	2b10      	cmp	r3, #16
 8000de8:	f100 0004 	add.w	r0, r0, #4
 8000dec:	d1f2      	bne.n	8000dd4 <_Unwind_VRS_Pop+0xc0>
 8000dee:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000df2:	d13b      	bne.n	8000e6c <_Unwind_VRS_Pop+0x158>
 8000df4:	63a5      	str	r5, [r4, #56]	; 0x38
 8000df6:	e7a1      	b.n	8000d3c <_Unwind_VRS_Pop+0x28>
 8000df8:	2b05      	cmp	r3, #5
 8000dfa:	d19e      	bne.n	8000d3a <_Unwind_VRS_Pop+0x26>
 8000dfc:	1977      	adds	r7, r6, r5
 8000dfe:	2f20      	cmp	r7, #32
 8000e00:	d89b      	bhi.n	8000d3a <_Unwind_VRS_Pop+0x26>
 8000e02:	2e0f      	cmp	r6, #15
 8000e04:	d966      	bls.n	8000ed4 <_Unwind_VRS_Pop+0x1c0>
 8000e06:	462f      	mov	r7, r5
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d13a      	bne.n	8000e82 <_Unwind_VRS_Pop+0x16e>
 8000e0c:	462a      	mov	r2, r5
 8000e0e:	2700      	movs	r7, #0
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e14:	dd72      	ble.n	8000efc <_Unwind_VRS_Pop+0x1e8>
 8000e16:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000e1a:	4601      	mov	r1, r0
 8000e1c:	a844      	add	r0, sp, #272	; 0x110
 8000e1e:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000e22:	388c      	subs	r0, #140	; 0x8c
 8000e24:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e28:	f840 5f04 	str.w	r5, [r0, #4]!
 8000e2c:	4291      	cmp	r1, r2
 8000e2e:	d1f9      	bne.n	8000e24 <_Unwind_VRS_Pop+0x110>
 8000e30:	4608      	mov	r0, r1
 8000e32:	b197      	cbz	r7, 8000e5a <_Unwind_VRS_Pop+0x146>
 8000e34:	2e10      	cmp	r6, #16
 8000e36:	4632      	mov	r2, r6
 8000e38:	a944      	add	r1, sp, #272	; 0x110
 8000e3a:	bf38      	it	cc
 8000e3c:	2210      	movcc	r2, #16
 8000e3e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000e42:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000e46:	0079      	lsls	r1, r7, #1
 8000e48:	3a04      	subs	r2, #4
 8000e4a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000e4e:	f850 5b04 	ldr.w	r5, [r0], #4
 8000e52:	f842 5f04 	str.w	r5, [r2, #4]!
 8000e56:	4288      	cmp	r0, r1
 8000e58:	d1f9      	bne.n	8000e4e <_Unwind_VRS_Pop+0x13a>
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d048      	beq.n	8000ef0 <_Unwind_VRS_Pop+0x1dc>
 8000e5e:	2e0f      	cmp	r6, #15
 8000e60:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e62:	d933      	bls.n	8000ecc <_Unwind_VRS_Pop+0x1b8>
 8000e64:	b117      	cbz	r7, 8000e6c <_Unwind_VRS_Pop+0x158>
 8000e66:	a802      	add	r0, sp, #8
 8000e68:	f000 f894 	bl	8000f94 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000e6c:	2000      	movs	r0, #0
 8000e6e:	e765      	b.n	8000d3c <_Unwind_VRS_Pop+0x28>
 8000e70:	2e0f      	cmp	r6, #15
 8000e72:	f63f af62 	bhi.w	8000d3a <_Unwind_VRS_Pop+0x26>
 8000e76:	2700      	movs	r7, #0
 8000e78:	6822      	ldr	r2, [r4, #0]
 8000e7a:	07d1      	lsls	r1, r2, #31
 8000e7c:	d417      	bmi.n	8000eae <_Unwind_VRS_Pop+0x19a>
 8000e7e:	2f00      	cmp	r7, #0
 8000e80:	d060      	beq.n	8000f44 <_Unwind_VRS_Pop+0x230>
 8000e82:	6822      	ldr	r2, [r4, #0]
 8000e84:	0751      	lsls	r1, r2, #29
 8000e86:	d445      	bmi.n	8000f14 <_Unwind_VRS_Pop+0x200>
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d04d      	beq.n	8000f28 <_Unwind_VRS_Pop+0x214>
 8000e8c:	2e0f      	cmp	r6, #15
 8000e8e:	d806      	bhi.n	8000e9e <_Unwind_VRS_Pop+0x18a>
 8000e90:	a822      	add	r0, sp, #136	; 0x88
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	f000 f87a 	bl	8000f8c <__gnu_Unwind_Save_VFP_D>
 8000e98:	9b01      	ldr	r3, [sp, #4]
 8000e9a:	2f00      	cmp	r7, #0
 8000e9c:	d0b6      	beq.n	8000e0c <_Unwind_VRS_Pop+0xf8>
 8000e9e:	a802      	add	r0, sp, #8
 8000ea0:	9301      	str	r3, [sp, #4]
 8000ea2:	f000 f87b 	bl	8000f9c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ea6:	9b01      	ldr	r3, [sp, #4]
 8000ea8:	f1c6 0210 	rsb	r2, r6, #16
 8000eac:	e7b0      	b.n	8000e10 <_Unwind_VRS_Pop+0xfc>
 8000eae:	f022 0101 	bic.w	r1, r2, #1
 8000eb2:	2b05      	cmp	r3, #5
 8000eb4:	6021      	str	r1, [r4, #0]
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	4620      	mov	r0, r4
 8000eba:	d03b      	beq.n	8000f34 <_Unwind_VRS_Pop+0x220>
 8000ebc:	f022 0203 	bic.w	r2, r2, #3
 8000ec0:	f840 2b48 	str.w	r2, [r0], #72
 8000ec4:	f000 f85a 	bl	8000f7c <__gnu_Unwind_Save_VFP>
 8000ec8:	9b01      	ldr	r3, [sp, #4]
 8000eca:	e7d8      	b.n	8000e7e <_Unwind_VRS_Pop+0x16a>
 8000ecc:	a822      	add	r0, sp, #136	; 0x88
 8000ece:	f000 f859 	bl	8000f84 <__gnu_Unwind_Restore_VFP_D>
 8000ed2:	e7c7      	b.n	8000e64 <_Unwind_VRS_Pop+0x150>
 8000ed4:	2f10      	cmp	r7, #16
 8000ed6:	d9ce      	bls.n	8000e76 <_Unwind_VRS_Pop+0x162>
 8000ed8:	3f10      	subs	r7, #16
 8000eda:	e7cd      	b.n	8000e78 <_Unwind_VRS_Pop+0x164>
 8000edc:	f023 0310 	bic.w	r3, r3, #16
 8000ee0:	6023      	str	r3, [r4, #0]
 8000ee2:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000ee6:	9201      	str	r2, [sp, #4]
 8000ee8:	f000 f8aa 	bl	8001040 <__gnu_Unwind_Save_WMMXC>
 8000eec:	9a01      	ldr	r2, [sp, #4]
 8000eee:	e72f      	b.n	8000d50 <_Unwind_VRS_Pop+0x3c>
 8000ef0:	3104      	adds	r1, #4
 8000ef2:	63a1      	str	r1, [r4, #56]	; 0x38
 8000ef4:	a822      	add	r0, sp, #136	; 0x88
 8000ef6:	f000 f83d 	bl	8000f74 <__gnu_Unwind_Restore_VFP>
 8000efa:	e7b7      	b.n	8000e6c <_Unwind_VRS_Pop+0x158>
 8000efc:	2f00      	cmp	r7, #0
 8000efe:	d199      	bne.n	8000e34 <_Unwind_VRS_Pop+0x120>
 8000f00:	4601      	mov	r1, r0
 8000f02:	e7aa      	b.n	8000e5a <_Unwind_VRS_Pop+0x146>
 8000f04:	f023 0308 	bic.w	r3, r3, #8
 8000f08:	6023      	str	r3, [r4, #0]
 8000f0a:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000f0e:	f000 f86b 	bl	8000fe8 <__gnu_Unwind_Save_WMMXD>
 8000f12:	e742      	b.n	8000d9a <_Unwind_VRS_Pop+0x86>
 8000f14:	4620      	mov	r0, r4
 8000f16:	f022 0204 	bic.w	r2, r2, #4
 8000f1a:	f840 2bd0 	str.w	r2, [r0], #208
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	f000 f83c 	bl	8000f9c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f24:	9b01      	ldr	r3, [sp, #4]
 8000f26:	e7af      	b.n	8000e88 <_Unwind_VRS_Pop+0x174>
 8000f28:	a822      	add	r0, sp, #136	; 0x88
 8000f2a:	9301      	str	r3, [sp, #4]
 8000f2c:	f000 f826 	bl	8000f7c <__gnu_Unwind_Save_VFP>
 8000f30:	9b01      	ldr	r3, [sp, #4]
 8000f32:	e7b9      	b.n	8000ea8 <_Unwind_VRS_Pop+0x194>
 8000f34:	f041 0102 	orr.w	r1, r1, #2
 8000f38:	f840 1b48 	str.w	r1, [r0], #72
 8000f3c:	f000 f826 	bl	8000f8c <__gnu_Unwind_Save_VFP_D>
 8000f40:	9b01      	ldr	r3, [sp, #4]
 8000f42:	e79c      	b.n	8000e7e <_Unwind_VRS_Pop+0x16a>
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d003      	beq.n	8000f50 <_Unwind_VRS_Pop+0x23c>
 8000f48:	2e0f      	cmp	r6, #15
 8000f4a:	f63f af5f 	bhi.w	8000e0c <_Unwind_VRS_Pop+0xf8>
 8000f4e:	e79f      	b.n	8000e90 <_Unwind_VRS_Pop+0x17c>
 8000f50:	a822      	add	r0, sp, #136	; 0x88
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	f000 f812 	bl	8000f7c <__gnu_Unwind_Save_VFP>
 8000f58:	9b01      	ldr	r3, [sp, #4]
 8000f5a:	e757      	b.n	8000e0c <_Unwind_VRS_Pop+0xf8>

08000f5c <__restore_core_regs>:
 8000f5c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000f60:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000f64:	469c      	mov	ip, r3
 8000f66:	46a6      	mov	lr, r4
 8000f68:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000f6c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000f70:	46e5      	mov	sp, ip
 8000f72:	bd00      	pop	{pc}

08000f74 <__gnu_Unwind_Restore_VFP>:
 8000f74:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop

08000f7c <__gnu_Unwind_Save_VFP>:
 8000f7c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <__gnu_Unwind_Restore_VFP_D>:
 8000f84:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <__gnu_Unwind_Save_VFP_D>:
 8000f8c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f94:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f9c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <__gnu_Unwind_Restore_WMMXD>:
 8000fa4:	ecf0 0102 	ldfe	f0, [r0], #8
 8000fa8:	ecf0 1102 	ldfe	f1, [r0], #8
 8000fac:	ecf0 2102 	ldfe	f2, [r0], #8
 8000fb0:	ecf0 3102 	ldfe	f3, [r0], #8
 8000fb4:	ecf0 4102 	ldfe	f4, [r0], #8
 8000fb8:	ecf0 5102 	ldfe	f5, [r0], #8
 8000fbc:	ecf0 6102 	ldfe	f6, [r0], #8
 8000fc0:	ecf0 7102 	ldfe	f7, [r0], #8
 8000fc4:	ecf0 8102 	ldfp	f0, [r0], #8
 8000fc8:	ecf0 9102 	ldfp	f1, [r0], #8
 8000fcc:	ecf0 a102 	ldfp	f2, [r0], #8
 8000fd0:	ecf0 b102 	ldfp	f3, [r0], #8
 8000fd4:	ecf0 c102 	ldfp	f4, [r0], #8
 8000fd8:	ecf0 d102 	ldfp	f5, [r0], #8
 8000fdc:	ecf0 e102 	ldfp	f6, [r0], #8
 8000fe0:	ecf0 f102 	ldfp	f7, [r0], #8
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <__gnu_Unwind_Save_WMMXD>:
 8000fe8:	ece0 0102 	stfe	f0, [r0], #8
 8000fec:	ece0 1102 	stfe	f1, [r0], #8
 8000ff0:	ece0 2102 	stfe	f2, [r0], #8
 8000ff4:	ece0 3102 	stfe	f3, [r0], #8
 8000ff8:	ece0 4102 	stfe	f4, [r0], #8
 8000ffc:	ece0 5102 	stfe	f5, [r0], #8
 8001000:	ece0 6102 	stfe	f6, [r0], #8
 8001004:	ece0 7102 	stfe	f7, [r0], #8
 8001008:	ece0 8102 	stfp	f0, [r0], #8
 800100c:	ece0 9102 	stfp	f1, [r0], #8
 8001010:	ece0 a102 	stfp	f2, [r0], #8
 8001014:	ece0 b102 	stfp	f3, [r0], #8
 8001018:	ece0 c102 	stfp	f4, [r0], #8
 800101c:	ece0 d102 	stfp	f5, [r0], #8
 8001020:	ece0 e102 	stfp	f6, [r0], #8
 8001024:	ece0 f102 	stfp	f7, [r0], #8
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <__gnu_Unwind_Restore_WMMXC>:
 800102c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001030:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001034:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001038:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <__gnu_Unwind_Save_WMMXC>:
 8001040:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001044:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001048:	fca0 a101 	stc2	1, cr10, [r0], #4
 800104c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <_Unwind_RaiseException>:
 8001054:	46ec      	mov	ip, sp
 8001056:	b500      	push	{lr}
 8001058:	e92d 5000 	stmdb	sp!, {ip, lr}
 800105c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001068:	a901      	add	r1, sp, #4
 800106a:	f7ff fbf3 	bl	8000854 <__gnu_Unwind_RaiseException>
 800106e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001072:	b012      	add	sp, #72	; 0x48
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <_Unwind_Resume>:
 8001078:	46ec      	mov	ip, sp
 800107a:	b500      	push	{lr}
 800107c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001080:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001084:	f04f 0300 	mov.w	r3, #0
 8001088:	e92d 000c 	stmdb	sp!, {r2, r3}
 800108c:	a901      	add	r1, sp, #4
 800108e:	f7ff fc1b 	bl	80008c8 <__gnu_Unwind_Resume>
 8001092:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001096:	b012      	add	sp, #72	; 0x48
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <_Unwind_Resume_or_Rethrow>:
 800109c:	46ec      	mov	ip, sp
 800109e:	b500      	push	{lr}
 80010a0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010a4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010a8:	f04f 0300 	mov.w	r3, #0
 80010ac:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010b0:	a901      	add	r1, sp, #4
 80010b2:	f7ff fc2b 	bl	800090c <__gnu_Unwind_Resume_or_Rethrow>
 80010b6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010ba:	b012      	add	sp, #72	; 0x48
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <_Unwind_ForcedUnwind>:
 80010c0:	46ec      	mov	ip, sp
 80010c2:	b500      	push	{lr}
 80010c4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010c8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010cc:	f04f 0300 	mov.w	r3, #0
 80010d0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010d4:	ab01      	add	r3, sp, #4
 80010d6:	f7ff fbed 	bl	80008b4 <__gnu_Unwind_ForcedUnwind>
 80010da:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010de:	b012      	add	sp, #72	; 0x48
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop

080010e4 <_Unwind_Backtrace>:
 80010e4:	46ec      	mov	ip, sp
 80010e6:	b500      	push	{lr}
 80010e8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010ec:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010f8:	aa01      	add	r2, sp, #4
 80010fa:	f7ff fc65 	bl	80009c8 <__gnu_Unwind_Backtrace>
 80010fe:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001102:	b012      	add	sp, #72	; 0x48
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop

08001108 <next_unwind_byte>:
 8001108:	7a02      	ldrb	r2, [r0, #8]
 800110a:	b91a      	cbnz	r2, 8001114 <next_unwind_byte+0xc>
 800110c:	7a43      	ldrb	r3, [r0, #9]
 800110e:	b943      	cbnz	r3, 8001122 <next_unwind_byte+0x1a>
 8001110:	20b0      	movs	r0, #176	; 0xb0
 8001112:	4770      	bx	lr
 8001114:	6803      	ldr	r3, [r0, #0]
 8001116:	3a01      	subs	r2, #1
 8001118:	7202      	strb	r2, [r0, #8]
 800111a:	021a      	lsls	r2, r3, #8
 800111c:	6002      	str	r2, [r0, #0]
 800111e:	0e18      	lsrs	r0, r3, #24
 8001120:	4770      	bx	lr
 8001122:	6842      	ldr	r2, [r0, #4]
 8001124:	3b01      	subs	r3, #1
 8001126:	b410      	push	{r4}
 8001128:	7243      	strb	r3, [r0, #9]
 800112a:	6813      	ldr	r3, [r2, #0]
 800112c:	2103      	movs	r1, #3
 800112e:	1d14      	adds	r4, r2, #4
 8001130:	7201      	strb	r1, [r0, #8]
 8001132:	021a      	lsls	r2, r3, #8
 8001134:	6044      	str	r4, [r0, #4]
 8001136:	6002      	str	r2, [r0, #0]
 8001138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800113c:	0e18      	lsrs	r0, r3, #24
 800113e:	4770      	bx	lr

08001140 <_Unwind_GetGR.constprop.0>:
 8001140:	b500      	push	{lr}
 8001142:	b085      	sub	sp, #20
 8001144:	aa03      	add	r2, sp, #12
 8001146:	2300      	movs	r3, #0
 8001148:	9200      	str	r2, [sp, #0]
 800114a:	4619      	mov	r1, r3
 800114c:	220c      	movs	r2, #12
 800114e:	f7ff fbed 	bl	800092c <_Unwind_VRS_Get>
 8001152:	9803      	ldr	r0, [sp, #12]
 8001154:	b005      	add	sp, #20
 8001156:	f85d fb04 	ldr.w	pc, [sp], #4
 800115a:	bf00      	nop

0800115c <unwind_UCB_from_context>:
 800115c:	e7f0      	b.n	8001140 <_Unwind_GetGR.constprop.0>
 800115e:	bf00      	nop

08001160 <__gnu_unwind_execute>:
 8001160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001164:	4606      	mov	r6, r0
 8001166:	b085      	sub	sp, #20
 8001168:	460f      	mov	r7, r1
 800116a:	f04f 0800 	mov.w	r8, #0
 800116e:	4638      	mov	r0, r7
 8001170:	f7ff ffca 	bl	8001108 <next_unwind_byte>
 8001174:	28b0      	cmp	r0, #176	; 0xb0
 8001176:	4604      	mov	r4, r0
 8001178:	d023      	beq.n	80011c2 <__gnu_unwind_execute+0x62>
 800117a:	0605      	lsls	r5, r0, #24
 800117c:	d427      	bmi.n	80011ce <__gnu_unwind_execute+0x6e>
 800117e:	2300      	movs	r3, #0
 8001180:	f10d 090c 	add.w	r9, sp, #12
 8001184:	4619      	mov	r1, r3
 8001186:	0085      	lsls	r5, r0, #2
 8001188:	220d      	movs	r2, #13
 800118a:	f8cd 9000 	str.w	r9, [sp]
 800118e:	4630      	mov	r0, r6
 8001190:	f7ff fbcc 	bl	800092c <_Unwind_VRS_Get>
 8001194:	b2ed      	uxtb	r5, r5
 8001196:	9b03      	ldr	r3, [sp, #12]
 8001198:	f8cd 9000 	str.w	r9, [sp]
 800119c:	0660      	lsls	r0, r4, #25
 800119e:	f105 0504 	add.w	r5, r5, #4
 80011a2:	bf4c      	ite	mi
 80011a4:	1b5d      	submi	r5, r3, r5
 80011a6:	18ed      	addpl	r5, r5, r3
 80011a8:	2300      	movs	r3, #0
 80011aa:	4619      	mov	r1, r3
 80011ac:	220d      	movs	r2, #13
 80011ae:	4630      	mov	r0, r6
 80011b0:	9503      	str	r5, [sp, #12]
 80011b2:	f7ff fbe1 	bl	8000978 <_Unwind_VRS_Set>
 80011b6:	4638      	mov	r0, r7
 80011b8:	f7ff ffa6 	bl	8001108 <next_unwind_byte>
 80011bc:	28b0      	cmp	r0, #176	; 0xb0
 80011be:	4604      	mov	r4, r0
 80011c0:	d1db      	bne.n	800117a <__gnu_unwind_execute+0x1a>
 80011c2:	f1b8 0f00 	cmp.w	r8, #0
 80011c6:	f000 8095 	beq.w	80012f4 <__gnu_unwind_execute+0x194>
 80011ca:	2000      	movs	r0, #0
 80011cc:	e01c      	b.n	8001208 <__gnu_unwind_execute+0xa8>
 80011ce:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80011d2:	2b80      	cmp	r3, #128	; 0x80
 80011d4:	d05d      	beq.n	8001292 <__gnu_unwind_execute+0x132>
 80011d6:	2b90      	cmp	r3, #144	; 0x90
 80011d8:	d019      	beq.n	800120e <__gnu_unwind_execute+0xae>
 80011da:	2ba0      	cmp	r3, #160	; 0xa0
 80011dc:	d02c      	beq.n	8001238 <__gnu_unwind_execute+0xd8>
 80011de:	2bb0      	cmp	r3, #176	; 0xb0
 80011e0:	d03f      	beq.n	8001262 <__gnu_unwind_execute+0x102>
 80011e2:	2bc0      	cmp	r3, #192	; 0xc0
 80011e4:	d06c      	beq.n	80012c0 <__gnu_unwind_execute+0x160>
 80011e6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80011ea:	2bd0      	cmp	r3, #208	; 0xd0
 80011ec:	d10b      	bne.n	8001206 <__gnu_unwind_execute+0xa6>
 80011ee:	f000 0207 	and.w	r2, r0, #7
 80011f2:	3201      	adds	r2, #1
 80011f4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011f8:	2305      	movs	r3, #5
 80011fa:	2101      	movs	r1, #1
 80011fc:	4630      	mov	r0, r6
 80011fe:	f7ff fd89 	bl	8000d14 <_Unwind_VRS_Pop>
 8001202:	2800      	cmp	r0, #0
 8001204:	d0b3      	beq.n	800116e <__gnu_unwind_execute+0xe>
 8001206:	2009      	movs	r0, #9
 8001208:	b005      	add	sp, #20
 800120a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800120e:	f000 030d 	and.w	r3, r0, #13
 8001212:	2b0d      	cmp	r3, #13
 8001214:	d0f7      	beq.n	8001206 <__gnu_unwind_execute+0xa6>
 8001216:	ad03      	add	r5, sp, #12
 8001218:	2300      	movs	r3, #0
 800121a:	f000 020f 	and.w	r2, r0, #15
 800121e:	4619      	mov	r1, r3
 8001220:	9500      	str	r5, [sp, #0]
 8001222:	4630      	mov	r0, r6
 8001224:	f7ff fb82 	bl	800092c <_Unwind_VRS_Get>
 8001228:	2300      	movs	r3, #0
 800122a:	9500      	str	r5, [sp, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	220d      	movs	r2, #13
 8001230:	4630      	mov	r0, r6
 8001232:	f7ff fba1 	bl	8000978 <_Unwind_VRS_Set>
 8001236:	e79a      	b.n	800116e <__gnu_unwind_execute+0xe>
 8001238:	43c2      	mvns	r2, r0
 800123a:	f002 0307 	and.w	r3, r2, #7
 800123e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001242:	411a      	asrs	r2, r3
 8001244:	0701      	lsls	r1, r0, #28
 8001246:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800124a:	f04f 0300 	mov.w	r3, #0
 800124e:	bf48      	it	mi
 8001250:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001254:	4619      	mov	r1, r3
 8001256:	4630      	mov	r0, r6
 8001258:	f7ff fd5c 	bl	8000d14 <_Unwind_VRS_Pop>
 800125c:	2800      	cmp	r0, #0
 800125e:	d1d2      	bne.n	8001206 <__gnu_unwind_execute+0xa6>
 8001260:	e785      	b.n	800116e <__gnu_unwind_execute+0xe>
 8001262:	28b1      	cmp	r0, #177	; 0xb1
 8001264:	d057      	beq.n	8001316 <__gnu_unwind_execute+0x1b6>
 8001266:	28b2      	cmp	r0, #178	; 0xb2
 8001268:	d068      	beq.n	800133c <__gnu_unwind_execute+0x1dc>
 800126a:	28b3      	cmp	r0, #179	; 0xb3
 800126c:	f000 8095 	beq.w	800139a <__gnu_unwind_execute+0x23a>
 8001270:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001274:	2bb4      	cmp	r3, #180	; 0xb4
 8001276:	d0c6      	beq.n	8001206 <__gnu_unwind_execute+0xa6>
 8001278:	f000 0207 	and.w	r2, r0, #7
 800127c:	3201      	adds	r2, #1
 800127e:	2301      	movs	r3, #1
 8001280:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001284:	4619      	mov	r1, r3
 8001286:	4630      	mov	r0, r6
 8001288:	f7ff fd44 	bl	8000d14 <_Unwind_VRS_Pop>
 800128c:	2800      	cmp	r0, #0
 800128e:	d1ba      	bne.n	8001206 <__gnu_unwind_execute+0xa6>
 8001290:	e76d      	b.n	800116e <__gnu_unwind_execute+0xe>
 8001292:	4638      	mov	r0, r7
 8001294:	f7ff ff38 	bl	8001108 <next_unwind_byte>
 8001298:	0224      	lsls	r4, r4, #8
 800129a:	4304      	orrs	r4, r0
 800129c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80012a0:	d0b1      	beq.n	8001206 <__gnu_unwind_execute+0xa6>
 80012a2:	0124      	lsls	r4, r4, #4
 80012a4:	2300      	movs	r3, #0
 80012a6:	b2a2      	uxth	r2, r4
 80012a8:	4619      	mov	r1, r3
 80012aa:	4630      	mov	r0, r6
 80012ac:	f7ff fd32 	bl	8000d14 <_Unwind_VRS_Pop>
 80012b0:	2800      	cmp	r0, #0
 80012b2:	d1a8      	bne.n	8001206 <__gnu_unwind_execute+0xa6>
 80012b4:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80012b8:	bf18      	it	ne
 80012ba:	f04f 0801 	movne.w	r8, #1
 80012be:	e756      	b.n	800116e <__gnu_unwind_execute+0xe>
 80012c0:	28c6      	cmp	r0, #198	; 0xc6
 80012c2:	d07d      	beq.n	80013c0 <__gnu_unwind_execute+0x260>
 80012c4:	28c7      	cmp	r0, #199	; 0xc7
 80012c6:	f000 8086 	beq.w	80013d6 <__gnu_unwind_execute+0x276>
 80012ca:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80012ce:	2bc0      	cmp	r3, #192	; 0xc0
 80012d0:	f000 8094 	beq.w	80013fc <__gnu_unwind_execute+0x29c>
 80012d4:	28c8      	cmp	r0, #200	; 0xc8
 80012d6:	f000 809f 	beq.w	8001418 <__gnu_unwind_execute+0x2b8>
 80012da:	28c9      	cmp	r0, #201	; 0xc9
 80012dc:	d193      	bne.n	8001206 <__gnu_unwind_execute+0xa6>
 80012de:	4638      	mov	r0, r7
 80012e0:	f7ff ff12 	bl	8001108 <next_unwind_byte>
 80012e4:	0302      	lsls	r2, r0, #12
 80012e6:	f000 000f 	and.w	r0, r0, #15
 80012ea:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80012ee:	3001      	adds	r0, #1
 80012f0:	4302      	orrs	r2, r0
 80012f2:	e781      	b.n	80011f8 <__gnu_unwind_execute+0x98>
 80012f4:	ac03      	add	r4, sp, #12
 80012f6:	4643      	mov	r3, r8
 80012f8:	220e      	movs	r2, #14
 80012fa:	4641      	mov	r1, r8
 80012fc:	9400      	str	r4, [sp, #0]
 80012fe:	4630      	mov	r0, r6
 8001300:	f7ff fb14 	bl	800092c <_Unwind_VRS_Get>
 8001304:	9400      	str	r4, [sp, #0]
 8001306:	4630      	mov	r0, r6
 8001308:	4643      	mov	r3, r8
 800130a:	220f      	movs	r2, #15
 800130c:	4641      	mov	r1, r8
 800130e:	f7ff fb33 	bl	8000978 <_Unwind_VRS_Set>
 8001312:	4640      	mov	r0, r8
 8001314:	e778      	b.n	8001208 <__gnu_unwind_execute+0xa8>
 8001316:	4638      	mov	r0, r7
 8001318:	f7ff fef6 	bl	8001108 <next_unwind_byte>
 800131c:	2800      	cmp	r0, #0
 800131e:	f43f af72 	beq.w	8001206 <__gnu_unwind_execute+0xa6>
 8001322:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001326:	f47f af6e 	bne.w	8001206 <__gnu_unwind_execute+0xa6>
 800132a:	4602      	mov	r2, r0
 800132c:	4619      	mov	r1, r3
 800132e:	4630      	mov	r0, r6
 8001330:	f7ff fcf0 	bl	8000d14 <_Unwind_VRS_Pop>
 8001334:	2800      	cmp	r0, #0
 8001336:	f47f af66 	bne.w	8001206 <__gnu_unwind_execute+0xa6>
 800133a:	e718      	b.n	800116e <__gnu_unwind_execute+0xe>
 800133c:	2300      	movs	r3, #0
 800133e:	f10d 090c 	add.w	r9, sp, #12
 8001342:	220d      	movs	r2, #13
 8001344:	4619      	mov	r1, r3
 8001346:	f8cd 9000 	str.w	r9, [sp]
 800134a:	4630      	mov	r0, r6
 800134c:	f7ff faee 	bl	800092c <_Unwind_VRS_Get>
 8001350:	4638      	mov	r0, r7
 8001352:	f7ff fed9 	bl	8001108 <next_unwind_byte>
 8001356:	0602      	lsls	r2, r0, #24
 8001358:	f04f 0402 	mov.w	r4, #2
 800135c:	d50c      	bpl.n	8001378 <__gnu_unwind_execute+0x218>
 800135e:	9b03      	ldr	r3, [sp, #12]
 8001360:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001364:	40a0      	lsls	r0, r4
 8001366:	4403      	add	r3, r0
 8001368:	4638      	mov	r0, r7
 800136a:	9303      	str	r3, [sp, #12]
 800136c:	f7ff fecc 	bl	8001108 <next_unwind_byte>
 8001370:	0603      	lsls	r3, r0, #24
 8001372:	f104 0407 	add.w	r4, r4, #7
 8001376:	d4f2      	bmi.n	800135e <__gnu_unwind_execute+0x1fe>
 8001378:	9b03      	ldr	r3, [sp, #12]
 800137a:	f8cd 9000 	str.w	r9, [sp]
 800137e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001382:	40a2      	lsls	r2, r4
 8001384:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001388:	2300      	movs	r3, #0
 800138a:	4414      	add	r4, r2
 800138c:	4619      	mov	r1, r3
 800138e:	220d      	movs	r2, #13
 8001390:	4630      	mov	r0, r6
 8001392:	9403      	str	r4, [sp, #12]
 8001394:	f7ff faf0 	bl	8000978 <_Unwind_VRS_Set>
 8001398:	e6e9      	b.n	800116e <__gnu_unwind_execute+0xe>
 800139a:	4638      	mov	r0, r7
 800139c:	f7ff feb4 	bl	8001108 <next_unwind_byte>
 80013a0:	0301      	lsls	r1, r0, #12
 80013a2:	f000 000f 	and.w	r0, r0, #15
 80013a6:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80013aa:	1c42      	adds	r2, r0, #1
 80013ac:	2301      	movs	r3, #1
 80013ae:	430a      	orrs	r2, r1
 80013b0:	4630      	mov	r0, r6
 80013b2:	4619      	mov	r1, r3
 80013b4:	f7ff fcae 	bl	8000d14 <_Unwind_VRS_Pop>
 80013b8:	2800      	cmp	r0, #0
 80013ba:	f47f af24 	bne.w	8001206 <__gnu_unwind_execute+0xa6>
 80013be:	e6d6      	b.n	800116e <__gnu_unwind_execute+0xe>
 80013c0:	4638      	mov	r0, r7
 80013c2:	f7ff fea1 	bl	8001108 <next_unwind_byte>
 80013c6:	0301      	lsls	r1, r0, #12
 80013c8:	f000 000f 	and.w	r0, r0, #15
 80013cc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80013d0:	1c42      	adds	r2, r0, #1
 80013d2:	2303      	movs	r3, #3
 80013d4:	e7eb      	b.n	80013ae <__gnu_unwind_execute+0x24e>
 80013d6:	4638      	mov	r0, r7
 80013d8:	f7ff fe96 	bl	8001108 <next_unwind_byte>
 80013dc:	2800      	cmp	r0, #0
 80013de:	f43f af12 	beq.w	8001206 <__gnu_unwind_execute+0xa6>
 80013e2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80013e6:	f47f af0e 	bne.w	8001206 <__gnu_unwind_execute+0xa6>
 80013ea:	4602      	mov	r2, r0
 80013ec:	2104      	movs	r1, #4
 80013ee:	4630      	mov	r0, r6
 80013f0:	f7ff fc90 	bl	8000d14 <_Unwind_VRS_Pop>
 80013f4:	2800      	cmp	r0, #0
 80013f6:	f47f af06 	bne.w	8001206 <__gnu_unwind_execute+0xa6>
 80013fa:	e6b8      	b.n	800116e <__gnu_unwind_execute+0xe>
 80013fc:	f000 020f 	and.w	r2, r0, #15
 8001400:	3201      	adds	r2, #1
 8001402:	2303      	movs	r3, #3
 8001404:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001408:	4619      	mov	r1, r3
 800140a:	4630      	mov	r0, r6
 800140c:	f7ff fc82 	bl	8000d14 <_Unwind_VRS_Pop>
 8001410:	2800      	cmp	r0, #0
 8001412:	f47f aef8 	bne.w	8001206 <__gnu_unwind_execute+0xa6>
 8001416:	e6aa      	b.n	800116e <__gnu_unwind_execute+0xe>
 8001418:	4638      	mov	r0, r7
 800141a:	f7ff fe75 	bl	8001108 <next_unwind_byte>
 800141e:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001422:	f000 030f 	and.w	r3, r0, #15
 8001426:	3210      	adds	r2, #16
 8001428:	3301      	adds	r3, #1
 800142a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800142e:	e6e3      	b.n	80011f8 <__gnu_unwind_execute+0x98>

08001430 <__gnu_unwind_frame>:
 8001430:	b510      	push	{r4, lr}
 8001432:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001434:	b084      	sub	sp, #16
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	2003      	movs	r0, #3
 800143a:	f88d 000c 	strb.w	r0, [sp, #12]
 800143e:	79dc      	ldrb	r4, [r3, #7]
 8001440:	f88d 400d 	strb.w	r4, [sp, #13]
 8001444:	0212      	lsls	r2, r2, #8
 8001446:	3308      	adds	r3, #8
 8001448:	4608      	mov	r0, r1
 800144a:	a901      	add	r1, sp, #4
 800144c:	9201      	str	r2, [sp, #4]
 800144e:	9302      	str	r3, [sp, #8]
 8001450:	f7ff fe86 	bl	8001160 <__gnu_unwind_execute>
 8001454:	b004      	add	sp, #16
 8001456:	bd10      	pop	{r4, pc}

08001458 <_Unwind_GetRegionStart>:
 8001458:	b508      	push	{r3, lr}
 800145a:	f7ff fe7f 	bl	800115c <unwind_UCB_from_context>
 800145e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001460:	bd08      	pop	{r3, pc}
 8001462:	bf00      	nop

08001464 <_Unwind_GetLanguageSpecificData>:
 8001464:	b508      	push	{r3, lr}
 8001466:	f7ff fe79 	bl	800115c <unwind_UCB_from_context>
 800146a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800146c:	79c3      	ldrb	r3, [r0, #7]
 800146e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001472:	3008      	adds	r0, #8
 8001474:	bd08      	pop	{r3, pc}
 8001476:	bf00      	nop

08001478 <_Unwind_GetTextRelBase>:
 8001478:	b508      	push	{r3, lr}
 800147a:	f005 fe3f 	bl	80070fc <abort>
 800147e:	bf00      	nop

08001480 <_Unwind_GetDataRelBase>:
 8001480:	b508      	push	{r3, lr}
 8001482:	f7ff fff9 	bl	8001478 <_Unwind_GetTextRelBase>
 8001486:	bf00      	nop

08001488 <__aeabi_idiv0>:
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop

0800148c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800148c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800148e:	4a0e      	ldr	r2, [pc, #56]	; (80014c8 <HAL_InitTick+0x3c>)
 8001490:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <HAL_InitTick+0x40>)
{
 8001492:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001494:	7818      	ldrb	r0, [r3, #0]
 8001496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800149a:	fbb3 f3f0 	udiv	r3, r3, r0
 800149e:	6810      	ldr	r0, [r2, #0]
 80014a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80014a4:	f000 f894 	bl	80015d0 <HAL_SYSTICK_Config>
 80014a8:	4604      	mov	r4, r0
 80014aa:	b958      	cbnz	r0, 80014c4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ac:	2d0f      	cmp	r5, #15
 80014ae:	d809      	bhi.n	80014c4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014b0:	4602      	mov	r2, r0
 80014b2:	4629      	mov	r1, r5
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014b8:	f000 f84a 	bl	8001550 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <HAL_InitTick+0x44>)
 80014be:	4620      	mov	r0, r4
 80014c0:	601d      	str	r5, [r3, #0]
 80014c2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80014c4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014c6:	bd38      	pop	{r3, r4, r5, pc}
 80014c8:	2000000c 	.word	0x2000000c
 80014cc:	20000004 	.word	0x20000004
 80014d0:	20000008 	.word	0x20000008

080014d4 <HAL_Init>:
{
 80014d4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_Init+0x30>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014de:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80014e6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014ee:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f0:	2003      	movs	r0, #3
 80014f2:	f000 f81b 	bl	800152c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f7ff ffc8 	bl	800148c <HAL_InitTick>
  HAL_MspInit();
 80014fc:	f002 f8b6 	bl	800366c <HAL_MspInit>
}
 8001500:	2000      	movs	r0, #0
 8001502:	bd08      	pop	{r3, pc}
 8001504:	40023c00 	.word	0x40023c00

08001508 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001508:	4a03      	ldr	r2, [pc, #12]	; (8001518 <HAL_IncTick+0x10>)
 800150a:	4b04      	ldr	r3, [pc, #16]	; (800151c <HAL_IncTick+0x14>)
 800150c:	6811      	ldr	r1, [r2, #0]
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	440b      	add	r3, r1
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	2000039c 	.word	0x2000039c
 800151c:	20000004 	.word	0x20000004

08001520 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001520:	4b01      	ldr	r3, [pc, #4]	; (8001528 <HAL_GetTick+0x8>)
 8001522:	6818      	ldr	r0, [r3, #0]
}
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	2000039c 	.word	0x2000039c

0800152c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4a07      	ldr	r2, [pc, #28]	; (800154c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800152e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001530:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001534:	041b      	lsls	r3, r3, #16
 8001536:	0c1b      	lsrs	r3, r3, #16
 8001538:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800153c:	0200      	lsls	r0, r0, #8
 800153e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001542:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001546:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001548:	60d3      	str	r3, [r2, #12]
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001552:	b530      	push	{r4, r5, lr}
 8001554:	68dc      	ldr	r4, [r3, #12]
 8001556:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800155a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001560:	2b04      	cmp	r3, #4
 8001562:	bf28      	it	cs
 8001564:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001566:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	f04f 0501 	mov.w	r5, #1
 800156c:	fa05 f303 	lsl.w	r3, r5, r3
 8001570:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001574:	bf8c      	ite	hi
 8001576:	3c03      	subhi	r4, #3
 8001578:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157a:	4019      	ands	r1, r3
 800157c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800157e:	fa05 f404 	lsl.w	r4, r5, r4
 8001582:	3c01      	subs	r4, #1
 8001584:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001586:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	ea42 0201 	orr.w	r2, r2, r1
 800158c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001590:	bfaf      	iteee	ge
 8001592:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	f000 000f 	andlt.w	r0, r0, #15
 800159a:	4b06      	ldrlt	r3, [pc, #24]	; (80015b4 <HAL_NVIC_SetPriority+0x64>)
 800159c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159e:	bfa5      	ittet	ge
 80015a0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80015a4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80015ac:	bd30      	pop	{r4, r5, pc}
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00
 80015b4:	e000ed14 	.word	0xe000ed14

080015b8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80015b8:	0942      	lsrs	r2, r0, #5
 80015ba:	2301      	movs	r3, #1
 80015bc:	f000 001f 	and.w	r0, r0, #31
 80015c0:	fa03 f000 	lsl.w	r0, r3, r0
 80015c4:	4b01      	ldr	r3, [pc, #4]	; (80015cc <HAL_NVIC_EnableIRQ+0x14>)
 80015c6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80015ca:	4770      	bx	lr
 80015cc:	e000e100 	.word	0xe000e100

080015d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d0:	3801      	subs	r0, #1
 80015d2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80015d6:	d20a      	bcs.n	80015ee <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015da:	4a07      	ldr	r2, [pc, #28]	; (80015f8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015dc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015de:	21f0      	movs	r1, #240	; 0xf0
 80015e0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015e6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000e010 	.word	0xe000e010
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001600:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001602:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001604:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80017b4 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001608:	4a68      	ldr	r2, [pc, #416]	; (80017ac <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800160a:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80017b8 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800160e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001610:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001612:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001616:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001618:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800161c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001620:	45b6      	cmp	lr, r6
 8001622:	f040 80ae 	bne.w	8001782 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001626:	684c      	ldr	r4, [r1, #4]
 8001628:	f024 0710 	bic.w	r7, r4, #16
 800162c:	2f02      	cmp	r7, #2
 800162e:	d116      	bne.n	800165e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001630:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001634:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001638:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800163c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001640:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001644:	f04f 0c0f 	mov.w	ip, #15
 8001648:	fa0c fc0b 	lsl.w	ip, ip, fp
 800164c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001650:	690d      	ldr	r5, [r1, #16]
 8001652:	fa05 f50b 	lsl.w	r5, r5, fp
 8001656:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800165a:	f8ca 5020 	str.w	r5, [sl, #32]
 800165e:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001662:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001664:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001668:	fa05 f50a 	lsl.w	r5, r5, sl
 800166c:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800166e:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001672:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001676:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800167a:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800167c:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001680:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001682:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001686:	d811      	bhi.n	80016ac <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001688:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800168a:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800168e:	68cf      	ldr	r7, [r1, #12]
 8001690:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001694:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001698:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800169a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800169c:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016a0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80016a4:	409f      	lsls	r7, r3
 80016a6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80016aa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80016ac:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ae:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b0:	688f      	ldr	r7, [r1, #8]
 80016b2:	fa07 f70a 	lsl.w	r7, r7, sl
 80016b6:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80016b8:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ba:	00e5      	lsls	r5, r4, #3
 80016bc:	d561      	bpl.n	8001782 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016be:	f04f 0b00 	mov.w	fp, #0
 80016c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80016c6:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ca:	4d39      	ldr	r5, [pc, #228]	; (80017b0 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016cc:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80016d0:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80016d4:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80016d8:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80016dc:	9703      	str	r7, [sp, #12]
 80016de:	9f03      	ldr	r7, [sp, #12]
 80016e0:	f023 0703 	bic.w	r7, r3, #3
 80016e4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80016e8:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ec:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80016f0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016f4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80016f8:	f04f 0e0f 	mov.w	lr, #15
 80016fc:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001700:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001702:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001706:	d043      	beq.n	8001790 <HAL_GPIO_Init+0x194>
 8001708:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800170c:	42a8      	cmp	r0, r5
 800170e:	d041      	beq.n	8001794 <HAL_GPIO_Init+0x198>
 8001710:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001714:	42a8      	cmp	r0, r5
 8001716:	d03f      	beq.n	8001798 <HAL_GPIO_Init+0x19c>
 8001718:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800171c:	42a8      	cmp	r0, r5
 800171e:	d03d      	beq.n	800179c <HAL_GPIO_Init+0x1a0>
 8001720:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001724:	42a8      	cmp	r0, r5
 8001726:	d03b      	beq.n	80017a0 <HAL_GPIO_Init+0x1a4>
 8001728:	4548      	cmp	r0, r9
 800172a:	d03b      	beq.n	80017a4 <HAL_GPIO_Init+0x1a8>
 800172c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001730:	42a8      	cmp	r0, r5
 8001732:	d039      	beq.n	80017a8 <HAL_GPIO_Init+0x1ac>
 8001734:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001738:	42a8      	cmp	r0, r5
 800173a:	bf14      	ite	ne
 800173c:	2508      	movne	r5, #8
 800173e:	2507      	moveq	r5, #7
 8001740:	fa05 f50c 	lsl.w	r5, r5, ip
 8001744:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001748:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800174a:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800174c:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800174e:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001752:	bf0c      	ite	eq
 8001754:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001756:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001758:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800175a:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800175c:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001760:	bf0c      	ite	eq
 8001762:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001764:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001766:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001768:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800176a:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800176e:	bf0c      	ite	eq
 8001770:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001772:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001774:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001776:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001778:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800177a:	bf54      	ite	pl
 800177c:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800177e:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001780:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001782:	3301      	adds	r3, #1
 8001784:	2b10      	cmp	r3, #16
 8001786:	f47f af44 	bne.w	8001612 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800178a:	b005      	add	sp, #20
 800178c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001790:	465d      	mov	r5, fp
 8001792:	e7d5      	b.n	8001740 <HAL_GPIO_Init+0x144>
 8001794:	2501      	movs	r5, #1
 8001796:	e7d3      	b.n	8001740 <HAL_GPIO_Init+0x144>
 8001798:	2502      	movs	r5, #2
 800179a:	e7d1      	b.n	8001740 <HAL_GPIO_Init+0x144>
 800179c:	2503      	movs	r5, #3
 800179e:	e7cf      	b.n	8001740 <HAL_GPIO_Init+0x144>
 80017a0:	2504      	movs	r5, #4
 80017a2:	e7cd      	b.n	8001740 <HAL_GPIO_Init+0x144>
 80017a4:	2505      	movs	r5, #5
 80017a6:	e7cb      	b.n	8001740 <HAL_GPIO_Init+0x144>
 80017a8:	2506      	movs	r5, #6
 80017aa:	e7c9      	b.n	8001740 <HAL_GPIO_Init+0x144>
 80017ac:	40013c00 	.word	0x40013c00
 80017b0:	40020000 	.word	0x40020000
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40021400 	.word	0x40021400

080017bc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017bc:	b10a      	cbz	r2, 80017c2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017be:	6181      	str	r1, [r0, #24]
 80017c0:	4770      	bx	lr
 80017c2:	0409      	lsls	r1, r1, #16
 80017c4:	e7fb      	b.n	80017be <HAL_GPIO_WritePin+0x2>
	...

080017c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017cc:	4604      	mov	r4, r0
 80017ce:	b918      	cbnz	r0, 80017d8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80017d0:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80017d2:	b002      	add	sp, #8
 80017d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d8:	6803      	ldr	r3, [r0, #0]
 80017da:	07dd      	lsls	r5, r3, #31
 80017dc:	d410      	bmi.n	8001800 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017de:	6823      	ldr	r3, [r4, #0]
 80017e0:	0798      	lsls	r0, r3, #30
 80017e2:	d458      	bmi.n	8001896 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	071a      	lsls	r2, r3, #28
 80017e8:	f100 809a 	bmi.w	8001920 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	075b      	lsls	r3, r3, #29
 80017f0:	f100 80b8 	bmi.w	8001964 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f4:	69a2      	ldr	r2, [r4, #24]
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	f040 8119 	bne.w	8001a2e <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80017fc:	2000      	movs	r0, #0
 80017fe:	e7e8      	b.n	80017d2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001800:	4ba6      	ldr	r3, [pc, #664]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	f002 020c 	and.w	r2, r2, #12
 8001808:	2a04      	cmp	r2, #4
 800180a:	d007      	beq.n	800181c <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001812:	2a08      	cmp	r2, #8
 8001814:	d10a      	bne.n	800182c <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	0259      	lsls	r1, r3, #9
 800181a:	d507      	bpl.n	800182c <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181c:	4b9f      	ldr	r3, [pc, #636]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	039a      	lsls	r2, r3, #14
 8001822:	d5dc      	bpl.n	80017de <HAL_RCC_OscConfig+0x16>
 8001824:	6863      	ldr	r3, [r4, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1d9      	bne.n	80017de <HAL_RCC_OscConfig+0x16>
 800182a:	e7d1      	b.n	80017d0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800182c:	6863      	ldr	r3, [r4, #4]
 800182e:	4d9b      	ldr	r5, [pc, #620]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
 8001830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001834:	d111      	bne.n	800185a <HAL_RCC_OscConfig+0x92>
 8001836:	682b      	ldr	r3, [r5, #0]
 8001838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800183c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800183e:	f7ff fe6f 	bl	8001520 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001842:	4d96      	ldr	r5, [pc, #600]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001844:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001846:	682b      	ldr	r3, [r5, #0]
 8001848:	039b      	lsls	r3, r3, #14
 800184a:	d4c8      	bmi.n	80017de <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800184c:	f7ff fe68 	bl	8001520 <HAL_GetTick>
 8001850:	1b80      	subs	r0, r0, r6
 8001852:	2864      	cmp	r0, #100	; 0x64
 8001854:	d9f7      	bls.n	8001846 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001856:	2003      	movs	r0, #3
 8001858:	e7bb      	b.n	80017d2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800185a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800185e:	d104      	bne.n	800186a <HAL_RCC_OscConfig+0xa2>
 8001860:	682b      	ldr	r3, [r5, #0]
 8001862:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001866:	602b      	str	r3, [r5, #0]
 8001868:	e7e5      	b.n	8001836 <HAL_RCC_OscConfig+0x6e>
 800186a:	682a      	ldr	r2, [r5, #0]
 800186c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001870:	602a      	str	r2, [r5, #0]
 8001872:	682a      	ldr	r2, [r5, #0]
 8001874:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001878:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1df      	bne.n	800183e <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800187e:	f7ff fe4f 	bl	8001520 <HAL_GetTick>
 8001882:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001884:	682b      	ldr	r3, [r5, #0]
 8001886:	039f      	lsls	r7, r3, #14
 8001888:	d5a9      	bpl.n	80017de <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800188a:	f7ff fe49 	bl	8001520 <HAL_GetTick>
 800188e:	1b80      	subs	r0, r0, r6
 8001890:	2864      	cmp	r0, #100	; 0x64
 8001892:	d9f7      	bls.n	8001884 <HAL_RCC_OscConfig+0xbc>
 8001894:	e7df      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001896:	4b81      	ldr	r3, [pc, #516]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	f012 0f0c 	tst.w	r2, #12
 800189e:	d007      	beq.n	80018b0 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018a6:	2a08      	cmp	r2, #8
 80018a8:	d111      	bne.n	80018ce <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	025e      	lsls	r6, r3, #9
 80018ae:	d40e      	bmi.n	80018ce <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b0:	4b7a      	ldr	r3, [pc, #488]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	0795      	lsls	r5, r2, #30
 80018b6:	d502      	bpl.n	80018be <HAL_RCC_OscConfig+0xf6>
 80018b8:	68e2      	ldr	r2, [r4, #12]
 80018ba:	2a01      	cmp	r2, #1
 80018bc:	d188      	bne.n	80017d0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	6921      	ldr	r1, [r4, #16]
 80018c2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80018c6:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80018ca:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018cc:	e78a      	b.n	80017e4 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018ce:	68e2      	ldr	r2, [r4, #12]
 80018d0:	4b73      	ldr	r3, [pc, #460]	; (8001aa0 <HAL_RCC_OscConfig+0x2d8>)
 80018d2:	b1b2      	cbz	r2, 8001902 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80018d4:	2201      	movs	r2, #1
 80018d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018d8:	f7ff fe22 	bl	8001520 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018dc:	4d6f      	ldr	r5, [pc, #444]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80018de:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e0:	682b      	ldr	r3, [r5, #0]
 80018e2:	0798      	lsls	r0, r3, #30
 80018e4:	d507      	bpl.n	80018f6 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e6:	682b      	ldr	r3, [r5, #0]
 80018e8:	6922      	ldr	r2, [r4, #16]
 80018ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018ee:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80018f2:	602b      	str	r3, [r5, #0]
 80018f4:	e776      	b.n	80017e4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f6:	f7ff fe13 	bl	8001520 <HAL_GetTick>
 80018fa:	1b80      	subs	r0, r0, r6
 80018fc:	2802      	cmp	r0, #2
 80018fe:	d9ef      	bls.n	80018e0 <HAL_RCC_OscConfig+0x118>
 8001900:	e7a9      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001902:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001904:	f7ff fe0c 	bl	8001520 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001908:	4d64      	ldr	r5, [pc, #400]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800190a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190c:	682b      	ldr	r3, [r5, #0]
 800190e:	0799      	lsls	r1, r3, #30
 8001910:	f57f af68 	bpl.w	80017e4 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001914:	f7ff fe04 	bl	8001520 <HAL_GetTick>
 8001918:	1b80      	subs	r0, r0, r6
 800191a:	2802      	cmp	r0, #2
 800191c:	d9f6      	bls.n	800190c <HAL_RCC_OscConfig+0x144>
 800191e:	e79a      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001920:	6962      	ldr	r2, [r4, #20]
 8001922:	4b60      	ldr	r3, [pc, #384]	; (8001aa4 <HAL_RCC_OscConfig+0x2dc>)
 8001924:	b17a      	cbz	r2, 8001946 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800192a:	f7ff fdf9 	bl	8001520 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192e:	4d5b      	ldr	r5, [pc, #364]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001930:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001932:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001934:	079f      	lsls	r7, r3, #30
 8001936:	f53f af59 	bmi.w	80017ec <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800193a:	f7ff fdf1 	bl	8001520 <HAL_GetTick>
 800193e:	1b80      	subs	r0, r0, r6
 8001940:	2802      	cmp	r0, #2
 8001942:	d9f6      	bls.n	8001932 <HAL_RCC_OscConfig+0x16a>
 8001944:	e787      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001946:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001948:	f7ff fdea 	bl	8001520 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800194c:	4d53      	ldr	r5, [pc, #332]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800194e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001950:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001952:	0798      	lsls	r0, r3, #30
 8001954:	f57f af4a 	bpl.w	80017ec <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001958:	f7ff fde2 	bl	8001520 <HAL_GetTick>
 800195c:	1b80      	subs	r0, r0, r6
 800195e:	2802      	cmp	r0, #2
 8001960:	d9f6      	bls.n	8001950 <HAL_RCC_OscConfig+0x188>
 8001962:	e778      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001964:	4b4d      	ldr	r3, [pc, #308]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
 8001966:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001968:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800196c:	d128      	bne.n	80019c0 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	9201      	str	r2, [sp, #4]
 8001970:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001972:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001976:	641a      	str	r2, [r3, #64]	; 0x40
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	9301      	str	r3, [sp, #4]
 8001980:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001982:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001984:	4d48      	ldr	r5, [pc, #288]	; (8001aa8 <HAL_RCC_OscConfig+0x2e0>)
 8001986:	682b      	ldr	r3, [r5, #0]
 8001988:	05d9      	lsls	r1, r3, #23
 800198a:	d51b      	bpl.n	80019c4 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198c:	68a3      	ldr	r3, [r4, #8]
 800198e:	4d43      	ldr	r5, [pc, #268]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
 8001990:	2b01      	cmp	r3, #1
 8001992:	d127      	bne.n	80019e4 <HAL_RCC_OscConfig+0x21c>
 8001994:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001996:	f043 0301 	orr.w	r3, r3, #1
 800199a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800199c:	f7ff fdc0 	bl	8001520 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a0:	4d3e      	ldr	r5, [pc, #248]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80019a2:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a4:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019aa:	079b      	lsls	r3, r3, #30
 80019ac:	d539      	bpl.n	8001a22 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80019ae:	2e00      	cmp	r6, #0
 80019b0:	f43f af20 	beq.w	80017f4 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b4:	4a39      	ldr	r2, [pc, #228]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
 80019b6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80019b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	e719      	b.n	80017f4 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80019c0:	2600      	movs	r6, #0
 80019c2:	e7df      	b.n	8001984 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019c4:	682b      	ldr	r3, [r5, #0]
 80019c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ca:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80019cc:	f7ff fda8 	bl	8001520 <HAL_GetTick>
 80019d0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d2:	682b      	ldr	r3, [r5, #0]
 80019d4:	05da      	lsls	r2, r3, #23
 80019d6:	d4d9      	bmi.n	800198c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d8:	f7ff fda2 	bl	8001520 <HAL_GetTick>
 80019dc:	1bc0      	subs	r0, r0, r7
 80019de:	2802      	cmp	r0, #2
 80019e0:	d9f7      	bls.n	80019d2 <HAL_RCC_OscConfig+0x20a>
 80019e2:	e738      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e4:	2b05      	cmp	r3, #5
 80019e6:	d104      	bne.n	80019f2 <HAL_RCC_OscConfig+0x22a>
 80019e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019ea:	f043 0304 	orr.w	r3, r3, #4
 80019ee:	672b      	str	r3, [r5, #112]	; 0x70
 80019f0:	e7d0      	b.n	8001994 <HAL_RCC_OscConfig+0x1cc>
 80019f2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80019f4:	f022 0201 	bic.w	r2, r2, #1
 80019f8:	672a      	str	r2, [r5, #112]	; 0x70
 80019fa:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80019fc:	f022 0204 	bic.w	r2, r2, #4
 8001a00:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1ca      	bne.n	800199c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001a06:	f7ff fd8b 	bl	8001520 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a0e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a10:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a12:	0798      	lsls	r0, r3, #30
 8001a14:	d5cb      	bpl.n	80019ae <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a16:	f7ff fd83 	bl	8001520 <HAL_GetTick>
 8001a1a:	1bc0      	subs	r0, r0, r7
 8001a1c:	4540      	cmp	r0, r8
 8001a1e:	d9f7      	bls.n	8001a10 <HAL_RCC_OscConfig+0x248>
 8001a20:	e719      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a22:	f7ff fd7d 	bl	8001520 <HAL_GetTick>
 8001a26:	1bc0      	subs	r0, r0, r7
 8001a28:	4540      	cmp	r0, r8
 8001a2a:	d9bd      	bls.n	80019a8 <HAL_RCC_OscConfig+0x1e0>
 8001a2c:	e713      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a2e:	4d1b      	ldr	r5, [pc, #108]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
 8001a30:	68ab      	ldr	r3, [r5, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	2b08      	cmp	r3, #8
 8001a38:	f43f aeca 	beq.w	80017d0 <HAL_RCC_OscConfig+0x8>
 8001a3c:	4e1b      	ldr	r6, [pc, #108]	; (8001aac <HAL_RCC_OscConfig+0x2e4>)
 8001a3e:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a40:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001a42:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a44:	d134      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001a46:	f7ff fd6b 	bl	8001520 <HAL_GetTick>
 8001a4a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4c:	682b      	ldr	r3, [r5, #0]
 8001a4e:	0199      	lsls	r1, r3, #6
 8001a50:	d41e      	bmi.n	8001a90 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a52:	6a22      	ldr	r2, [r4, #32]
 8001a54:	69e3      	ldr	r3, [r4, #28]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a5a:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001a5e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a60:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a64:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a66:	4c0d      	ldr	r4, [pc, #52]	; (8001a9c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a68:	0852      	lsrs	r2, r2, #1
 8001a6a:	3a01      	subs	r2, #1
 8001a6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001a70:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001a72:	2301      	movs	r3, #1
 8001a74:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001a76:	f7ff fd53 	bl	8001520 <HAL_GetTick>
 8001a7a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	019a      	lsls	r2, r3, #6
 8001a80:	f53f aebc 	bmi.w	80017fc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff fd4c 	bl	8001520 <HAL_GetTick>
 8001a88:	1b40      	subs	r0, r0, r5
 8001a8a:	2802      	cmp	r0, #2
 8001a8c:	d9f6      	bls.n	8001a7c <HAL_RCC_OscConfig+0x2b4>
 8001a8e:	e6e2      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a90:	f7ff fd46 	bl	8001520 <HAL_GetTick>
 8001a94:	1bc0      	subs	r0, r0, r7
 8001a96:	2802      	cmp	r0, #2
 8001a98:	d9d8      	bls.n	8001a4c <HAL_RCC_OscConfig+0x284>
 8001a9a:	e6dc      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
 8001a9c:	40023800 	.word	0x40023800
 8001aa0:	42470000 	.word	0x42470000
 8001aa4:	42470e80 	.word	0x42470e80
 8001aa8:	40007000 	.word	0x40007000
 8001aac:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fd36 	bl	8001520 <HAL_GetTick>
 8001ab4:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab6:	682b      	ldr	r3, [r5, #0]
 8001ab8:	019b      	lsls	r3, r3, #6
 8001aba:	f57f ae9f 	bpl.w	80017fc <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001abe:	f7ff fd2f 	bl	8001520 <HAL_GetTick>
 8001ac2:	1b00      	subs	r0, r0, r4
 8001ac4:	2802      	cmp	r0, #2
 8001ac6:	d9f6      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x2ee>
 8001ac8:	e6c5      	b.n	8001856 <HAL_RCC_OscConfig+0x8e>
 8001aca:	bf00      	nop

08001acc <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001acc:	4913      	ldr	r1, [pc, #76]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001ace:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ad0:	688b      	ldr	r3, [r1, #8]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d003      	beq.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x16>
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d003      	beq.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ade:	4810      	ldr	r0, [pc, #64]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001ae0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001ae2:	4810      	ldr	r0, [pc, #64]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x58>)
 8001ae4:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ae6:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ae8:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aea:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001aec:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af0:	bf14      	ite	ne
 8001af2:	480c      	ldrne	r0, [pc, #48]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af4:	480a      	ldreq	r0, [pc, #40]	; (8001b20 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001afa:	bf18      	it	ne
 8001afc:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001afe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b02:	fba1 0100 	umull	r0, r1, r1, r0
 8001b06:	f7fe fbbd 	bl	8000284 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b0a:	4b04      	ldr	r3, [pc, #16]	; (8001b1c <HAL_RCC_GetSysClockFreq+0x50>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001b12:	3301      	adds	r3, #1
 8001b14:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001b16:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b1a:	bd08      	pop	{r3, pc}
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	00f42400 	.word	0x00f42400
 8001b24:	017d7840 	.word	0x017d7840

08001b28 <HAL_RCC_ClockConfig>:
{
 8001b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b2c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001b2e:	4604      	mov	r4, r0
 8001b30:	b910      	cbnz	r0, 8001b38 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001b32:	2001      	movs	r0, #1
 8001b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b38:	4b44      	ldr	r3, [pc, #272]	; (8001c4c <HAL_RCC_ClockConfig+0x124>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	f002 020f 	and.w	r2, r2, #15
 8001b40:	428a      	cmp	r2, r1
 8001b42:	d328      	bcc.n	8001b96 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b44:	6821      	ldr	r1, [r4, #0]
 8001b46:	078f      	lsls	r7, r1, #30
 8001b48:	d42d      	bmi.n	8001ba6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b4a:	07c8      	lsls	r0, r1, #31
 8001b4c:	d440      	bmi.n	8001bd0 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b4e:	4b3f      	ldr	r3, [pc, #252]	; (8001c4c <HAL_RCC_ClockConfig+0x124>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	f002 020f 	and.w	r2, r2, #15
 8001b56:	4295      	cmp	r5, r2
 8001b58:	d366      	bcc.n	8001c28 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5a:	6822      	ldr	r2, [r4, #0]
 8001b5c:	0751      	lsls	r1, r2, #29
 8001b5e:	d46c      	bmi.n	8001c3a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b60:	0713      	lsls	r3, r2, #28
 8001b62:	d507      	bpl.n	8001b74 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b64:	4a3a      	ldr	r2, [pc, #232]	; (8001c50 <HAL_RCC_ClockConfig+0x128>)
 8001b66:	6921      	ldr	r1, [r4, #16]
 8001b68:	6893      	ldr	r3, [r2, #8]
 8001b6a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001b6e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b72:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b74:	f7ff ffaa 	bl	8001acc <HAL_RCC_GetSysClockFreq>
 8001b78:	4b35      	ldr	r3, [pc, #212]	; (8001c50 <HAL_RCC_ClockConfig+0x128>)
 8001b7a:	4a36      	ldr	r2, [pc, #216]	; (8001c54 <HAL_RCC_ClockConfig+0x12c>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b82:	5cd3      	ldrb	r3, [r2, r3]
 8001b84:	40d8      	lsrs	r0, r3
 8001b86:	4b34      	ldr	r3, [pc, #208]	; (8001c58 <HAL_RCC_ClockConfig+0x130>)
 8001b88:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f7ff fc7e 	bl	800148c <HAL_InitTick>
  return HAL_OK;
 8001b90:	2000      	movs	r0, #0
 8001b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	b2ca      	uxtb	r2, r1
 8001b98:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 030f 	and.w	r3, r3, #15
 8001ba0:	4299      	cmp	r1, r3
 8001ba2:	d1c6      	bne.n	8001b32 <HAL_RCC_ClockConfig+0xa>
 8001ba4:	e7ce      	b.n	8001b44 <HAL_RCC_ClockConfig+0x1c>
 8001ba6:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ba8:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bac:	bf1e      	ittt	ne
 8001bae:	689a      	ldrne	r2, [r3, #8]
 8001bb0:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001bb4:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb6:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bb8:	bf42      	ittt	mi
 8001bba:	689a      	ldrmi	r2, [r3, #8]
 8001bbc:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001bc0:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	68a0      	ldr	r0, [r4, #8]
 8001bc6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001bca:	4302      	orrs	r2, r0
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	e7bc      	b.n	8001b4a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd0:	6862      	ldr	r2, [r4, #4]
 8001bd2:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <HAL_RCC_ClockConfig+0x128>)
 8001bd4:	2a01      	cmp	r2, #1
 8001bd6:	d11d      	bne.n	8001c14 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bde:	d0a8      	beq.n	8001b32 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001be0:	4e1b      	ldr	r6, [pc, #108]	; (8001c50 <HAL_RCC_ClockConfig+0x128>)
 8001be2:	68b3      	ldr	r3, [r6, #8]
 8001be4:	f023 0303 	bic.w	r3, r3, #3
 8001be8:	4313      	orrs	r3, r2
 8001bea:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001bec:	f7ff fc98 	bl	8001520 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf0:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001bf4:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf6:	68b3      	ldr	r3, [r6, #8]
 8001bf8:	6862      	ldr	r2, [r4, #4]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c02:	d0a4      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c04:	f7ff fc8c 	bl	8001520 <HAL_GetTick>
 8001c08:	1bc0      	subs	r0, r0, r7
 8001c0a:	4540      	cmp	r0, r8
 8001c0c:	d9f3      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001c0e:	2003      	movs	r0, #3
}
 8001c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c14:	1e91      	subs	r1, r2, #2
 8001c16:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c18:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c1a:	d802      	bhi.n	8001c22 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c1c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c20:	e7dd      	b.n	8001bde <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c22:	f013 0f02 	tst.w	r3, #2
 8001c26:	e7da      	b.n	8001bde <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c28:	b2ea      	uxtb	r2, r5
 8001c2a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	429d      	cmp	r5, r3
 8001c34:	f47f af7d 	bne.w	8001b32 <HAL_RCC_ClockConfig+0xa>
 8001c38:	e78f      	b.n	8001b5a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c3a:	4905      	ldr	r1, [pc, #20]	; (8001c50 <HAL_RCC_ClockConfig+0x128>)
 8001c3c:	68e0      	ldr	r0, [r4, #12]
 8001c3e:	688b      	ldr	r3, [r1, #8]
 8001c40:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001c44:	4303      	orrs	r3, r0
 8001c46:	608b      	str	r3, [r1, #8]
 8001c48:	e78a      	b.n	8001b60 <HAL_RCC_ClockConfig+0x38>
 8001c4a:	bf00      	nop
 8001c4c:	40023c00 	.word	0x40023c00
 8001c50:	40023800 	.word	0x40023800
 8001c54:	08007afb 	.word	0x08007afb
 8001c58:	2000000c 	.word	0x2000000c

08001c5c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001c5e:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001c66:	5cd3      	ldrb	r3, [r2, r3]
 8001c68:	4a03      	ldr	r2, [pc, #12]	; (8001c78 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001c6a:	6810      	ldr	r0, [r2, #0]
}
 8001c6c:	40d8      	lsrs	r0, r3
 8001c6e:	4770      	bx	lr
 8001c70:	40023800 	.word	0x40023800
 8001c74:	08007b0b 	.word	0x08007b0b
 8001c78:	2000000c 	.word	0x2000000c

08001c7c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001c7e:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001c86:	5cd3      	ldrb	r3, [r2, r3]
 8001c88:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001c8a:	6810      	ldr	r0, [r2, #0]
}
 8001c8c:	40d8      	lsrs	r0, r3
 8001c8e:	4770      	bx	lr
 8001c90:	40023800 	.word	0x40023800
 8001c94:	08007b0b 	.word	0x08007b0b
 8001c98:	2000000c 	.word	0x2000000c

08001c9c <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8001c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ca0:	9e06      	ldr	r6, [sp, #24]
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	4688      	mov	r8, r1
 8001ca6:	4617      	mov	r7, r2
 8001ca8:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8001caa:	6822      	ldr	r2, [r4, #0]
 8001cac:	6893      	ldr	r3, [r2, #8]
 8001cae:	ea38 0303 	bics.w	r3, r8, r3
 8001cb2:	bf0c      	ite	eq
 8001cb4:	2301      	moveq	r3, #1
 8001cb6:	2300      	movne	r3, #0
 8001cb8:	429f      	cmp	r7, r3
 8001cba:	d102      	bne.n	8001cc2 <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8001cbc:	2000      	movs	r0, #0
}
 8001cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001cc2:	1c6b      	adds	r3, r5, #1
 8001cc4:	d0f2      	beq.n	8001cac <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001cc6:	bb55      	cbnz	r5, 8001d1e <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001cd0:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001cd2:	6862      	ldr	r2, [r4, #4]
 8001cd4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001cd8:	d10a      	bne.n	8001cf0 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001cda:	68a2      	ldr	r2, [r4, #8]
 8001cdc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ce0:	d002      	beq.n	8001ce8 <SPI_WaitFlagStateUntilTimeout+0x4c>
 8001ce2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001ce6:	d103      	bne.n	8001cf0 <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cee:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001cf0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001cf2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001cf6:	d109      	bne.n	8001d0c <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cfe:	0412      	lsls	r2, r2, #16
 8001d00:	0c12      	lsrs	r2, r2, #16
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d0a:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001d12:	2300      	movs	r3, #0
 8001d14:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8001d18:	2003      	movs	r0, #3
 8001d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8001d1e:	f7ff fbff 	bl	8001520 <HAL_GetTick>
 8001d22:	1b80      	subs	r0, r0, r6
 8001d24:	4285      	cmp	r5, r0
 8001d26:	d8c0      	bhi.n	8001caa <SPI_WaitFlagStateUntilTimeout+0xe>
 8001d28:	e7ce      	b.n	8001cc8 <SPI_WaitFlagStateUntilTimeout+0x2c>

08001d2a <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001d2a:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	9200      	str	r2, [sp, #0]
 8001d30:	2180      	movs	r1, #128	; 0x80
 8001d32:	2200      	movs	r2, #0
{
 8001d34:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001d36:	f7ff ffb1 	bl	8001c9c <SPI_WaitFlagStateUntilTimeout>
 8001d3a:	b120      	cbz	r0, 8001d46 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001d3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001d3e:	f043 0320 	orr.w	r3, r3, #32
 8001d42:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8001d44:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8001d46:	b002      	add	sp, #8
 8001d48:	bd10      	pop	{r4, pc}

08001d4a <HAL_SPI_Init>:
{
 8001d4a:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8001d4c:	4604      	mov	r4, r0
 8001d4e:	2800      	cmp	r0, #0
 8001d50:	d036      	beq.n	8001dc0 <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8001d56:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001d5a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d5e:	b91b      	cbnz	r3, 8001d68 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001d60:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001d64:	f001 fc9e 	bl	80036a4 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8001d68:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d6a:	68a0      	ldr	r0, [r4, #8]
 8001d6c:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001d74:	680b      	ldr	r3, [r1, #0]
 8001d76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d7a:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d7c:	6863      	ldr	r3, [r4, #4]
 8001d7e:	4303      	orrs	r3, r0
 8001d80:	68e0      	ldr	r0, [r4, #12]
 8001d82:	4303      	orrs	r3, r0
 8001d84:	6920      	ldr	r0, [r4, #16]
 8001d86:	4303      	orrs	r3, r0
 8001d88:	6960      	ldr	r0, [r4, #20]
 8001d8a:	4303      	orrs	r3, r0
 8001d8c:	69e0      	ldr	r0, [r4, #28]
 8001d8e:	4303      	orrs	r3, r0
 8001d90:	6a20      	ldr	r0, [r4, #32]
 8001d92:	4303      	orrs	r3, r0
 8001d94:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001d96:	4303      	orrs	r3, r0
 8001d98:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001d9c:	4303      	orrs	r3, r0
 8001d9e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001da0:	0c12      	lsrs	r2, r2, #16
 8001da2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001da4:	f002 0204 	and.w	r2, r2, #4
 8001da8:	431a      	orrs	r2, r3
 8001daa:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dac:	69cb      	ldr	r3, [r1, #28]
 8001dae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001db2:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001db4:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001db6:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001db8:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001dba:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8001dbe:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001dc0:	2001      	movs	r0, #1
}
 8001dc2:	bd10      	pop	{r4, pc}

08001dc4 <HAL_SPI_TransmitReceive>:
{
 8001dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dc8:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 8001dca:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001dce:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8001dd0:	2b01      	cmp	r3, #1
{
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	460d      	mov	r5, r1
 8001dd6:	4616      	mov	r6, r2
 8001dd8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8001dda:	f000 80ed 	beq.w	8001fb8 <HAL_SPI_TransmitReceive+0x1f4>
 8001dde:	2301      	movs	r3, #1
 8001de0:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001de4:	f7ff fb9c 	bl	8001520 <HAL_GetTick>
  tmp  = hspi->State;
 8001de8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8001dec:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8001dee:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001df0:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001df2:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8001df4:	d00a      	beq.n	8001e0c <HAL_SPI_TransmitReceive+0x48>
 8001df6:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001dfa:	f040 80db 	bne.w	8001fb4 <HAL_SPI_TransmitReceive+0x1f0>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001dfe:	68a2      	ldr	r2, [r4, #8]
 8001e00:	2a00      	cmp	r2, #0
 8001e02:	f040 80d7 	bne.w	8001fb4 <HAL_SPI_TransmitReceive+0x1f0>
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	f040 80d4 	bne.w	8001fb4 <HAL_SPI_TransmitReceive+0x1f0>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8001e0c:	2d00      	cmp	r5, #0
 8001e0e:	d04e      	beq.n	8001eae <HAL_SPI_TransmitReceive+0xea>
 8001e10:	2e00      	cmp	r6, #0
 8001e12:	d04c      	beq.n	8001eae <HAL_SPI_TransmitReceive+0xea>
 8001e14:	f1b9 0f00 	cmp.w	r9, #0
 8001e18:	d049      	beq.n	8001eae <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8001e1a:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001e1e:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 8001e20:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001e22:	bf04      	itt	eq
 8001e24:	2305      	moveq	r3, #5
 8001e26:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001e2e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e30:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e32:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001e34:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001e38:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e3c:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8001e3e:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e42:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8001e44:	bf58      	it	pl
 8001e46:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001e48:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001e4a:	bf58      	it	pl
 8001e4c:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001e50:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8001e54:	bf58      	it	pl
 8001e56:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e58:	68e2      	ldr	r2, [r4, #12]
 8001e5a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001e5e:	d15d      	bne.n	8001f1c <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001e60:	b119      	cbz	r1, 8001e6a <HAL_SPI_TransmitReceive+0xa6>
 8001e62:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001e64:	b292      	uxth	r2, r2
 8001e66:	2a01      	cmp	r2, #1
 8001e68:	d106      	bne.n	8001e78 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001e6a:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001e6e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001e70:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e72:	3b01      	subs	r3, #1
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001e78:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e7c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	b9bb      	cbnz	r3, 8001eb2 <HAL_SPI_TransmitReceive+0xee>
 8001e82:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	b9a3      	cbnz	r3, 8001eb2 <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 8001e88:	f8cd 8000 	str.w	r8, [sp]
 8001e8c:	463b      	mov	r3, r7
 8001e8e:	2201      	movs	r2, #1
 8001e90:	2102      	movs	r1, #2
 8001e92:	4620      	mov	r0, r4
 8001e94:	f7ff ff02 	bl	8001c9c <SPI_WaitFlagStateUntilTimeout>
 8001e98:	2800      	cmp	r0, #0
 8001e9a:	d135      	bne.n	8001f08 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8001e9c:	4642      	mov	r2, r8
 8001e9e:	4639      	mov	r1, r7
 8001ea0:	4620      	mov	r0, r4
 8001ea2:	f7ff ff42 	bl	8001d2a <SPI_CheckFlag_BSY>
 8001ea6:	2800      	cmp	r0, #0
 8001ea8:	d079      	beq.n	8001f9e <HAL_SPI_TransmitReceive+0x1da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001eaa:	2320      	movs	r3, #32
 8001eac:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001eae:	2001      	movs	r0, #1
 8001eb0:	e02b      	b.n	8001f0a <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001eb2:	f1b9 0f00 	cmp.w	r9, #0
 8001eb6:	d00f      	beq.n	8001ed8 <HAL_SPI_TransmitReceive+0x114>
 8001eb8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	b163      	cbz	r3, 8001ed8 <HAL_SPI_TransmitReceive+0x114>
 8001ebe:	6823      	ldr	r3, [r4, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	0791      	lsls	r1, r2, #30
 8001ec4:	d508      	bpl.n	8001ed8 <HAL_SPI_TransmitReceive+0x114>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001ec6:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001eca:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001ecc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001ed4:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001ed8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	b163      	cbz	r3, 8001ef8 <HAL_SPI_TransmitReceive+0x134>
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	07d2      	lsls	r2, r2, #31
 8001ee4:	d508      	bpl.n	8001ef8 <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8001eec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001ef4:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001ef8:	1c78      	adds	r0, r7, #1
 8001efa:	d0bf      	beq.n	8001e7c <HAL_SPI_TransmitReceive+0xb8>
 8001efc:	f7ff fb10 	bl	8001520 <HAL_GetTick>
 8001f00:	eba0 0008 	sub.w	r0, r0, r8
 8001f04:	4287      	cmp	r7, r0
 8001f06:	d8b9      	bhi.n	8001e7c <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8001f08:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001f10:	2300      	movs	r3, #0
 8001f12:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001f16:	b005      	add	sp, #20
 8001f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8001f1c:	b119      	cbz	r1, 8001f26 <HAL_SPI_TransmitReceive+0x162>
 8001f1e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001f20:	b292      	uxth	r2, r2
 8001f22:	2a01      	cmp	r2, #1
 8001f24:	d106      	bne.n	8001f34 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8001f26:	f815 2b01 	ldrb.w	r2, [r5], #1
 8001f2a:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8001f2c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001f34:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f38:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f3a:	b29b      	uxth	r3, r3
 8001f3c:	b91b      	cbnz	r3, 8001f46 <HAL_SPI_TransmitReceive+0x182>
 8001f3e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0a0      	beq.n	8001e88 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001f46:	f1b9 0f00 	cmp.w	r9, #0
 8001f4a:	d00f      	beq.n	8001f6c <HAL_SPI_TransmitReceive+0x1a8>
 8001f4c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	b163      	cbz	r3, 8001f6c <HAL_SPI_TransmitReceive+0x1a8>
 8001f52:	6823      	ldr	r3, [r4, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	0791      	lsls	r1, r2, #30
 8001f58:	d508      	bpl.n	8001f6c <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001f5a:	782a      	ldrb	r2, [r5, #0]
 8001f5c:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8001f5e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f60:	3b01      	subs	r3, #1
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8001f66:	3501      	adds	r5, #1
        txallowed = 0U;
 8001f68:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001f6c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	b163      	cbz	r3, 8001f8c <HAL_SPI_TransmitReceive+0x1c8>
 8001f72:	6823      	ldr	r3, [r4, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	07d2      	lsls	r2, r2, #31
 8001f78:	d508      	bpl.n	8001f8c <HAL_SPI_TransmitReceive+0x1c8>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 8001f7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 8001f86:	3601      	adds	r6, #1
        txallowed = 1U;
 8001f88:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8001f8c:	1c7b      	adds	r3, r7, #1
 8001f8e:	d0d3      	beq.n	8001f38 <HAL_SPI_TransmitReceive+0x174>
 8001f90:	f7ff fac6 	bl	8001520 <HAL_GetTick>
 8001f94:	eba0 0008 	sub.w	r0, r0, r8
 8001f98:	4287      	cmp	r7, r0
 8001f9a:	d8cd      	bhi.n	8001f38 <HAL_SPI_TransmitReceive+0x174>
 8001f9c:	e7b4      	b.n	8001f08 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f9e:	68a3      	ldr	r3, [r4, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1b2      	bne.n	8001f0a <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	9003      	str	r0, [sp, #12]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	9203      	str	r2, [sp, #12]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	9303      	str	r3, [sp, #12]
 8001fb0:	9b03      	ldr	r3, [sp, #12]
 8001fb2:	e7aa      	b.n	8001f0a <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	e7a8      	b.n	8001f0a <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 8001fb8:	2002      	movs	r0, #2
 8001fba:	e7ac      	b.n	8001f16 <HAL_SPI_TransmitReceive+0x152>

08001fbc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fbc:	6a03      	ldr	r3, [r0, #32]
 8001fbe:	f023 0301 	bic.w	r3, r3, #1
 8001fc2:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fc4:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001fc6:	6842      	ldr	r2, [r0, #4]
{
 8001fc8:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001fca:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fcc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001fce:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001fd2:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001fd4:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001fd6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001fda:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001fdc:	4c0c      	ldr	r4, [pc, #48]	; (8002010 <TIM_OC1_SetConfig+0x54>)
 8001fde:	42a0      	cmp	r0, r4
 8001fe0:	d009      	beq.n	8001ff6 <TIM_OC1_SetConfig+0x3a>
 8001fe2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001fe6:	42a0      	cmp	r0, r4
 8001fe8:	d005      	beq.n	8001ff6 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001fea:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001fec:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001fee:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001ff0:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001ff2:	6203      	str	r3, [r0, #32]
} 
 8001ff4:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8001ff6:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ff8:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ffa:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001ffe:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002000:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002002:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002006:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8002008:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800200c:	4322      	orrs	r2, r4
 800200e:	e7ec      	b.n	8001fea <TIM_OC1_SetConfig+0x2e>
 8002010:	40010000 	.word	0x40010000

08002014 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002014:	6a03      	ldr	r3, [r0, #32]
 8002016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800201a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800201c:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800201e:	6842      	ldr	r2, [r0, #4]
{
 8002020:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002022:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002024:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8002026:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800202a:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800202c:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800202e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002032:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002036:	4c0e      	ldr	r4, [pc, #56]	; (8002070 <TIM_OC3_SetConfig+0x5c>)
 8002038:	42a0      	cmp	r0, r4
 800203a:	d009      	beq.n	8002050 <TIM_OC3_SetConfig+0x3c>
 800203c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002040:	42a0      	cmp	r0, r4
 8002042:	d005      	beq.n	8002050 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002044:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002046:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002048:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800204a:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800204c:	6203      	str	r3, [r0, #32]
}
 800204e:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002050:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002052:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002054:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002058:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800205c:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800205e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002062:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002068:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 800206c:	e7ea      	b.n	8002044 <TIM_OC3_SetConfig+0x30>
 800206e:	bf00      	nop
 8002070:	40010000 	.word	0x40010000

08002074 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002074:	6a03      	ldr	r3, [r0, #32]
 8002076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800207a:	6203      	str	r3, [r0, #32]
{
 800207c:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800207e:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002080:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002082:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002084:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002086:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800208a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800208e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002090:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002094:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002098:	4d09      	ldr	r5, [pc, #36]	; (80020c0 <TIM_OC4_SetConfig+0x4c>)
 800209a:	42a8      	cmp	r0, r5
 800209c:	d009      	beq.n	80020b2 <TIM_OC4_SetConfig+0x3e>
 800209e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020a2:	42a8      	cmp	r0, r5
 80020a4:	d005      	beq.n	80020b2 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80020a6:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80020a8:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80020aa:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80020ac:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80020ae:	6204      	str	r4, [r0, #32]
}
 80020b0:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80020b2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80020b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80020b8:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80020bc:	e7f3      	b.n	80020a6 <TIM_OC4_SetConfig+0x32>
 80020be:	bf00      	nop
 80020c0:	40010000 	.word	0x40010000

080020c4 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

 /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80020c4:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80020c6:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 80020c8:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80020ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
{
 80020ce:	b530      	push	{r4, r5, lr}
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80020d0:	4302      	orrs	r2, r0

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80020d2:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_SMS;
 80020d4:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80020d8:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
  
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80020da:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 80020dc:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 80020de:	d021      	beq.n	8002124 <TIM_SlaveTimer_SetConfig+0x60>
 80020e0:	d802      	bhi.n	80020e8 <TIM_SlaveTimer_SetConfig+0x24>
 80020e2:	2840      	cmp	r0, #64	; 0x40
 80020e4:	d010      	beq.n	8002108 <TIM_SlaveTimer_SetConfig+0x44>
 80020e6:	bd30      	pop	{r4, r5, pc}
 80020e8:	2860      	cmp	r0, #96	; 0x60
 80020ea:	d02d      	beq.n	8002148 <TIM_SlaveTimer_SetConfig+0x84>
 80020ec:	2870      	cmp	r0, #112	; 0x70
 80020ee:	d13d      	bne.n	800216c <TIM_SlaveTimer_SetConfig+0xa8>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80020f0:	68ca      	ldr	r2, [r1, #12]
 80020f2:	688c      	ldr	r4, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 80020f4:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80020f6:	6909      	ldr	r1, [r1, #16]
 80020f8:	4322      	orrs	r2, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020fa:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80020fe:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002102:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	bd30      	pop	{r4, r5, pc}
      tmpccer = htim->Instance->CCER;
 8002108:	6a18      	ldr	r0, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800210a:	6a1a      	ldr	r2, [r3, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800210c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 8002114:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002116:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800211a:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800211e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;                               
 8002120:	6218      	str	r0, [r3, #32]
    break;
 8002122:	bd30      	pop	{r4, r5, pc}
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002124:	6888      	ldr	r0, [r1, #8]
 8002126:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8002128:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800212a:	6a1c      	ldr	r4, [r3, #32]
 800212c:	f024 0401 	bic.w	r4, r4, #1
 8002130:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002132:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002134:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002138:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800213c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002140:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8002142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002144:	6219      	str	r1, [r3, #32]
 8002146:	bd30      	pop	{r4, r5, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002148:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800214a:	688c      	ldr	r4, [r1, #8]
 800214c:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800214e:	f020 0010 	bic.w	r0, r0, #16
 8002152:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002154:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002156:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002158:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800215c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002160:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8002164:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8002168:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800216a:	621a      	str	r2, [r3, #32]
 800216c:	bd30      	pop	{r4, r5, pc}

0800216e <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800216e:	6803      	ldr	r3, [r0, #0]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	f042 0201 	orr.w	r2, r2, #1
 8002176:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	f042 0201 	orr.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]
}
 8002180:	2000      	movs	r0, #0
 8002182:	4770      	bx	lr

08002184 <HAL_TIM_OC_MspInit>:
 8002184:	4770      	bx	lr

08002186 <HAL_TIM_IC_MspInit>:
 8002186:	4770      	bx	lr

08002188 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002188:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800218c:	2b01      	cmp	r3, #1
{
 800218e:	b570      	push	{r4, r5, r6, lr}
 8002190:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002194:	d01c      	beq.n	80021d0 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8002196:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 800219a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 800219c:	2201      	movs	r2, #1
 800219e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 80021a2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021a4:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80021a8:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80021ac:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80021ae:	680a      	ldr	r2, [r1, #0]
 80021b0:	2a40      	cmp	r2, #64	; 0x40
 80021b2:	d079      	beq.n	80022a8 <HAL_TIM_ConfigClockSource+0x120>
 80021b4:	d819      	bhi.n	80021ea <HAL_TIM_ConfigClockSource+0x62>
 80021b6:	2a10      	cmp	r2, #16
 80021b8:	f000 8093 	beq.w	80022e2 <HAL_TIM_ConfigClockSource+0x15a>
 80021bc:	d80a      	bhi.n	80021d4 <HAL_TIM_ConfigClockSource+0x4c>
 80021be:	2a00      	cmp	r2, #0
 80021c0:	f000 8089 	beq.w	80022d6 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80021c4:	2301      	movs	r3, #1
 80021c6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80021ca:	2300      	movs	r3, #0
 80021cc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80021d0:	4618      	mov	r0, r3
}
 80021d2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80021d4:	2a20      	cmp	r2, #32
 80021d6:	f000 808a 	beq.w	80022ee <HAL_TIM_ConfigClockSource+0x166>
 80021da:	2a30      	cmp	r2, #48	; 0x30
 80021dc:	d1f2      	bne.n	80021c4 <HAL_TIM_ConfigClockSource+0x3c>
   tmpsmcr = TIMx->SMCR;
 80021de:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80021e0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80021e4:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80021e8:	e036      	b.n	8002258 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80021ea:	2a70      	cmp	r2, #112	; 0x70
 80021ec:	d036      	beq.n	800225c <HAL_TIM_ConfigClockSource+0xd4>
 80021ee:	d81b      	bhi.n	8002228 <HAL_TIM_ConfigClockSource+0xa0>
 80021f0:	2a50      	cmp	r2, #80	; 0x50
 80021f2:	d042      	beq.n	800227a <HAL_TIM_ConfigClockSource+0xf2>
 80021f4:	2a60      	cmp	r2, #96	; 0x60
 80021f6:	d1e5      	bne.n	80021c4 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021f8:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80021fa:	684d      	ldr	r5, [r1, #4]
 80021fc:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021fe:	f024 0410 	bic.w	r4, r4, #16
 8002202:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002204:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8002206:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002208:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800220c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002210:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002214:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002218:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800221a:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800221c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800221e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8002222:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8002226:	e017      	b.n	8002258 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8002228:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800222c:	d011      	beq.n	8002252 <HAL_TIM_ConfigClockSource+0xca>
 800222e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002232:	d1c7      	bne.n	80021c4 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002234:	688a      	ldr	r2, [r1, #8]
 8002236:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002238:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800223a:	68c9      	ldr	r1, [r1, #12]
 800223c:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800223e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002242:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002246:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002248:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002250:	e002      	b.n	8002258 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	e7b3      	b.n	80021c4 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800225c:	688a      	ldr	r2, [r1, #8]
 800225e:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8002260:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8002262:	68c9      	ldr	r1, [r1, #12]
 8002264:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002266:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800226a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800226e:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8002270:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002272:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002274:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8002278:	e7ee      	b.n	8002258 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800227a:	684c      	ldr	r4, [r1, #4]
 800227c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800227e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002280:	6a1d      	ldr	r5, [r3, #32]
 8002282:	f025 0501 	bic.w	r5, r5, #1
 8002286:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002288:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800228a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800228e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002292:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002296:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8002298:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800229a:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800229c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800229e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80022a2:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80022a6:	e7d7      	b.n	8002258 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80022a8:	684c      	ldr	r4, [r1, #4]
 80022aa:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80022ac:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022ae:	6a1d      	ldr	r5, [r3, #32]
 80022b0:	f025 0501 	bic.w	r5, r5, #1
 80022b4:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80022b6:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022b8:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022bc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022c0:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80022c4:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80022c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022c8:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80022ca:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022cc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80022d0:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80022d4:	e7c0      	b.n	8002258 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80022d6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80022dc:	f042 0207 	orr.w	r2, r2, #7
 80022e0:	e7ba      	b.n	8002258 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80022e2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80022e8:	f042 0217 	orr.w	r2, r2, #23
 80022ec:	e7b4      	b.n	8002258 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80022ee:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80022f4:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80022f8:	e7ae      	b.n	8002258 <HAL_TIM_ConfigClockSource+0xd0>

080022fa <HAL_TIM_SlaveConfigSynchronization>:
{
 80022fa:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80022fc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002300:	2b01      	cmp	r3, #1
{
 8002302:	4604      	mov	r4, r0
 8002304:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002308:	d015      	beq.n	8002336 <HAL_TIM_SlaveConfigSynchronization+0x3c>
 800230a:	2501      	movs	r5, #1
 800230c:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002310:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8002314:	f7ff fed6 	bl	80020c4 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002318:	6823      	ldr	r3, [r4, #0]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002320:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002322:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);  
 8002324:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002326:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800232a:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800232c:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);  
 8002330:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8002334:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002336:	4618      	mov	r0, r3
} 
 8002338:	bd38      	pop	{r3, r4, r5, pc}

0800233a <HAL_TIM_OC_DelayElapsedCallback>:
 800233a:	4770      	bx	lr

0800233c <HAL_TIM_TriggerCallback>:
 800233c:	4770      	bx	lr

0800233e <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800233e:	6803      	ldr	r3, [r0, #0]
 8002340:	691a      	ldr	r2, [r3, #16]
 8002342:	0791      	lsls	r1, r2, #30
{
 8002344:	b510      	push	{r4, lr}
 8002346:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002348:	d50e      	bpl.n	8002368 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	0792      	lsls	r2, r2, #30
 800234e:	d50b      	bpl.n	8002368 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002350:	f06f 0202 	mvn.w	r2, #2
 8002354:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002356:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002358:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800235a:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800235c:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800235e:	d077      	beq.n	8002450 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002360:	f000 fcfe 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002364:	2300      	movs	r3, #0
 8002366:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002368:	6823      	ldr	r3, [r4, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	0750      	lsls	r0, r2, #29
 800236e:	d510      	bpl.n	8002392 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	0751      	lsls	r1, r2, #29
 8002374:	d50d      	bpl.n	8002392 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002376:	f06f 0204 	mvn.w	r2, #4
 800237a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800237c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800237e:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002380:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002384:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002386:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002388:	d068      	beq.n	800245c <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800238a:	f000 fce9 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800238e:	2300      	movs	r3, #0
 8002390:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002392:	6823      	ldr	r3, [r4, #0]
 8002394:	691a      	ldr	r2, [r3, #16]
 8002396:	0712      	lsls	r2, r2, #28
 8002398:	d50f      	bpl.n	80023ba <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800239a:	68da      	ldr	r2, [r3, #12]
 800239c:	0710      	lsls	r0, r2, #28
 800239e:	d50c      	bpl.n	80023ba <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80023a0:	f06f 0208 	mvn.w	r2, #8
 80023a4:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023a6:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023a8:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023aa:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023ac:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80023ae:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023b0:	d05a      	beq.n	8002468 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80023b2:	f000 fcd5 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023b6:	2300      	movs	r3, #0
 80023b8:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023ba:	6823      	ldr	r3, [r4, #0]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	06d2      	lsls	r2, r2, #27
 80023c0:	d510      	bpl.n	80023e4 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	06d0      	lsls	r0, r2, #27
 80023c6:	d50d      	bpl.n	80023e4 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023c8:	f06f 0210 	mvn.w	r2, #16
 80023cc:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023ce:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023d0:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023d2:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023d6:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80023d8:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023da:	d04b      	beq.n	8002474 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80023dc:	f000 fcc0 	bl	8002d60 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023e0:	2300      	movs	r3, #0
 80023e2:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023e4:	6823      	ldr	r3, [r4, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	07d1      	lsls	r1, r2, #31
 80023ea:	d508      	bpl.n	80023fe <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80023ec:	68da      	ldr	r2, [r3, #12]
 80023ee:	07d2      	lsls	r2, r2, #31
 80023f0:	d505      	bpl.n	80023fe <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023f2:	f06f 0201 	mvn.w	r2, #1
 80023f6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80023f8:	4620      	mov	r0, r4
 80023fa:	f000 fd5f 	bl	8002ebc <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023fe:	6823      	ldr	r3, [r4, #0]
 8002400:	691a      	ldr	r2, [r3, #16]
 8002402:	0610      	lsls	r0, r2, #24
 8002404:	d508      	bpl.n	8002418 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002406:	68da      	ldr	r2, [r3, #12]
 8002408:	0611      	lsls	r1, r2, #24
 800240a:	d505      	bpl.n	8002418 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800240c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002410:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002412:	4620      	mov	r0, r4
 8002414:	f000 fad5 	bl	80029c2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002418:	6823      	ldr	r3, [r4, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	0652      	lsls	r2, r2, #25
 800241e:	d508      	bpl.n	8002432 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002420:	68da      	ldr	r2, [r3, #12]
 8002422:	0650      	lsls	r0, r2, #25
 8002424:	d505      	bpl.n	8002432 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002426:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800242a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800242c:	4620      	mov	r0, r4
 800242e:	f7ff ff85 	bl	800233c <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002432:	6823      	ldr	r3, [r4, #0]
 8002434:	691a      	ldr	r2, [r3, #16]
 8002436:	0691      	lsls	r1, r2, #26
 8002438:	d522      	bpl.n	8002480 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800243a:	68da      	ldr	r2, [r3, #12]
 800243c:	0692      	lsls	r2, r2, #26
 800243e:	d51f      	bpl.n	8002480 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002440:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002444:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002446:	611a      	str	r2, [r3, #16]
}
 8002448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 800244c:	f000 bab8 	b.w	80029c0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002450:	f7ff ff73 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002454:	4620      	mov	r0, r4
 8002456:	f000 fce9 	bl	8002e2c <HAL_TIM_PWM_PulseFinishedCallback>
 800245a:	e783      	b.n	8002364 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245c:	f7ff ff6d 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002460:	4620      	mov	r0, r4
 8002462:	f000 fce3 	bl	8002e2c <HAL_TIM_PWM_PulseFinishedCallback>
 8002466:	e792      	b.n	800238e <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002468:	f7ff ff67 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800246c:	4620      	mov	r0, r4
 800246e:	f000 fcdd 	bl	8002e2c <HAL_TIM_PWM_PulseFinishedCallback>
 8002472:	e7a0      	b.n	80023b6 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002474:	f7ff ff61 	bl	800233a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002478:	4620      	mov	r0, r4
 800247a:	f000 fcd7 	bl	8002e2c <HAL_TIM_PWM_PulseFinishedCallback>
 800247e:	e7af      	b.n	80023e0 <HAL_TIM_IRQHandler+0xa2>
 8002480:	bd10      	pop	{r4, pc}
	...

08002484 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002484:	4a2e      	ldr	r2, [pc, #184]	; (8002540 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8002486:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002488:	4290      	cmp	r0, r2
 800248a:	d012      	beq.n	80024b2 <TIM_Base_SetConfig+0x2e>
 800248c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002490:	d00f      	beq.n	80024b2 <TIM_Base_SetConfig+0x2e>
 8002492:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002496:	4290      	cmp	r0, r2
 8002498:	d00b      	beq.n	80024b2 <TIM_Base_SetConfig+0x2e>
 800249a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800249e:	4290      	cmp	r0, r2
 80024a0:	d007      	beq.n	80024b2 <TIM_Base_SetConfig+0x2e>
 80024a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024a6:	4290      	cmp	r0, r2
 80024a8:	d003      	beq.n	80024b2 <TIM_Base_SetConfig+0x2e>
 80024aa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80024ae:	4290      	cmp	r0, r2
 80024b0:	d11d      	bne.n	80024ee <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80024b2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80024b8:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80024ba:	4a21      	ldr	r2, [pc, #132]	; (8002540 <TIM_Base_SetConfig+0xbc>)
 80024bc:	4290      	cmp	r0, r2
 80024be:	d104      	bne.n	80024ca <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024c0:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80024c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024c6:	4313      	orrs	r3, r2
 80024c8:	e028      	b.n	800251c <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80024ca:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80024ce:	d0f7      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
 80024d0:	4a1c      	ldr	r2, [pc, #112]	; (8002544 <TIM_Base_SetConfig+0xc0>)
 80024d2:	4290      	cmp	r0, r2
 80024d4:	d0f4      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
 80024d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024da:	4290      	cmp	r0, r2
 80024dc:	d0f0      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
 80024de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024e2:	4290      	cmp	r0, r2
 80024e4:	d0ec      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
 80024e6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80024ea:	4290      	cmp	r0, r2
 80024ec:	d0e8      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
 80024ee:	4a16      	ldr	r2, [pc, #88]	; (8002548 <TIM_Base_SetConfig+0xc4>)
 80024f0:	4290      	cmp	r0, r2
 80024f2:	d0e5      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
 80024f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024f8:	4290      	cmp	r0, r2
 80024fa:	d0e1      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
 80024fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002500:	4290      	cmp	r0, r2
 8002502:	d0dd      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
 8002504:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002508:	4290      	cmp	r0, r2
 800250a:	d0d9      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
 800250c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002510:	4290      	cmp	r0, r2
 8002512:	d0d5      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
 8002514:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002518:	4290      	cmp	r0, r2
 800251a:	d0d1      	beq.n	80024c0 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 800251c:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800251e:	688b      	ldr	r3, [r1, #8]
 8002520:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002522:	680b      	ldr	r3, [r1, #0]
 8002524:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <TIM_Base_SetConfig+0xbc>)
 8002528:	4298      	cmp	r0, r3
 800252a:	d006      	beq.n	800253a <TIM_Base_SetConfig+0xb6>
 800252c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002530:	4298      	cmp	r0, r3
 8002532:	d002      	beq.n	800253a <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8002534:	2301      	movs	r3, #1
 8002536:	6143      	str	r3, [r0, #20]
}
 8002538:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800253a:	690b      	ldr	r3, [r1, #16]
 800253c:	6303      	str	r3, [r0, #48]	; 0x30
 800253e:	e7f9      	b.n	8002534 <TIM_Base_SetConfig+0xb0>
 8002540:	40010000 	.word	0x40010000
 8002544:	40000400 	.word	0x40000400
 8002548:	40014000 	.word	0x40014000

0800254c <HAL_TIM_Base_Init>:
{ 
 800254c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800254e:	4604      	mov	r4, r0
 8002550:	b1a0      	cbz	r0, 800257c <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002552:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002556:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800255a:	b91b      	cbnz	r3, 8002564 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800255c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8002560:	f001 f8d6 	bl	8003710 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002564:	2302      	movs	r3, #2
 8002566:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800256a:	6820      	ldr	r0, [r4, #0]
 800256c:	1d21      	adds	r1, r4, #4
 800256e:	f7ff ff89 	bl	8002484 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002572:	2301      	movs	r3, #1
 8002574:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002578:	2000      	movs	r0, #0
 800257a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800257c:	2001      	movs	r0, #1
}
 800257e:	bd10      	pop	{r4, pc}

08002580 <HAL_TIM_OC_Init>:
{
 8002580:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002582:	4604      	mov	r4, r0
 8002584:	b1a0      	cbz	r0, 80025b0 <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002586:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800258a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800258e:	b91b      	cbnz	r3, 8002598 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002590:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_OC_MspInit(htim);
 8002594:	f7ff fdf6 	bl	8002184 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002598:	2302      	movs	r3, #2
 800259a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 800259e:	6820      	ldr	r0, [r4, #0]
 80025a0:	1d21      	adds	r1, r4, #4
 80025a2:	f7ff ff6f 	bl	8002484 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80025a6:	2301      	movs	r3, #1
 80025a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80025ac:	2000      	movs	r0, #0
 80025ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80025b0:	2001      	movs	r0, #1
}
 80025b2:	bd10      	pop	{r4, pc}

080025b4 <HAL_TIM_IC_Init>:
{
 80025b4:	b510      	push	{r4, lr}
  if(htim == NULL)
 80025b6:	4604      	mov	r4, r0
 80025b8:	b1a0      	cbz	r0, 80025e4 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80025ba:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80025be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80025c2:	b91b      	cbnz	r3, 80025cc <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80025c4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
 80025c8:	f7ff fddd 	bl	8002186 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;   
 80025cc:	2302      	movs	r3, #2
 80025ce:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80025d2:	6820      	ldr	r0, [r4, #0]
 80025d4:	1d21      	adds	r1, r4, #4
 80025d6:	f7ff ff55 	bl	8002484 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80025da:	2301      	movs	r3, #1
 80025dc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80025e0:	2000      	movs	r0, #0
 80025e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80025e4:	2001      	movs	r0, #1
}
 80025e6:	bd10      	pop	{r4, pc}

080025e8 <TIM_TI1_SetConfig>:
{
 80025e8:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ea:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80025ec:	4e1a      	ldr	r6, [pc, #104]	; (8002658 <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ee:	f024 0401 	bic.w	r4, r4, #1
 80025f2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025f4:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80025f6:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80025f8:	42b0      	cmp	r0, r6
 80025fa:	f024 0403 	bic.w	r4, r4, #3
 80025fe:	d01a      	beq.n	8002636 <TIM_TI1_SetConfig+0x4e>
 8002600:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002604:	d017      	beq.n	8002636 <TIM_TI1_SetConfig+0x4e>
 8002606:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800260a:	42b0      	cmp	r0, r6
 800260c:	d013      	beq.n	8002636 <TIM_TI1_SetConfig+0x4e>
 800260e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002612:	42b0      	cmp	r0, r6
 8002614:	d00f      	beq.n	8002636 <TIM_TI1_SetConfig+0x4e>
 8002616:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800261a:	42b0      	cmp	r0, r6
 800261c:	d00b      	beq.n	8002636 <TIM_TI1_SetConfig+0x4e>
 800261e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8002622:	42b0      	cmp	r0, r6
 8002624:	d007      	beq.n	8002636 <TIM_TI1_SetConfig+0x4e>
 8002626:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800262a:	42b0      	cmp	r0, r6
 800262c:	d003      	beq.n	8002636 <TIM_TI1_SetConfig+0x4e>
 800262e:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8002632:	42b0      	cmp	r0, r6
 8002634:	d10d      	bne.n	8002652 <TIM_TI1_SetConfig+0x6a>
    tmpccmr1 |= TIM_ICSelection;
 8002636:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002638:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800263a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800263e:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002640:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002644:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002648:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800264a:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 800264c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800264e:	6201      	str	r1, [r0, #32]
}
 8002650:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002652:	f044 0201 	orr.w	r2, r4, #1
 8002656:	e7ef      	b.n	8002638 <TIM_TI1_SetConfig+0x50>
 8002658:	40010000 	.word	0x40010000

0800265c <HAL_TIM_IC_ConfigChannel>:
{
 800265c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800265e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002662:	2b01      	cmp	r3, #1
{
 8002664:	4604      	mov	r4, r0
 8002666:	460d      	mov	r5, r1
 8002668:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800266c:	d019      	beq.n	80026a2 <HAL_TIM_IC_ConfigChannel+0x46>
 800266e:	2301      	movs	r3, #1
 8002670:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002674:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
 8002678:	b9a2      	cbnz	r2, 80026a4 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 800267a:	68cb      	ldr	r3, [r1, #12]
 800267c:	6820      	ldr	r0, [r4, #0]
 800267e:	c906      	ldmia	r1, {r1, r2}
 8002680:	f7ff ffb2 	bl	80025e8 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002684:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002686:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	f022 020c 	bic.w	r2, r2, #12
 800268e:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	430a      	orrs	r2, r1
 8002694:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002696:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002698:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800269a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 800269e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80026a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 80026a4:	2a04      	cmp	r2, #4
 80026a6:	688e      	ldr	r6, [r1, #8]
 80026a8:	6823      	ldr	r3, [r4, #0]
 80026aa:	68e8      	ldr	r0, [r5, #12]
 80026ac:	c982      	ldmia	r1, {r1, r7}
 80026ae:	d11f      	bne.n	80026f0 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026b0:	6a1a      	ldr	r2, [r3, #32]
 80026b2:	f022 0210 	bic.w	r2, r2, #16
 80026b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026b8:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 80026ba:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80026bc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80026c0:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80026c4:	0300      	lsls	r0, r0, #12
 80026c6:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026c8:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80026cc:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80026ce:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80026d0:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026d4:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80026d8:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 80026da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026dc:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80026de:	699a      	ldr	r2, [r3, #24]
 80026e0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80026e4:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80026e6:	699a      	ldr	r2, [r3, #24]
 80026e8:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80026ec:	619e      	str	r6, [r3, #24]
 80026ee:	e7d2      	b.n	8002696 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 80026f0:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026f2:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 80026f4:	d11c      	bne.n	8002730 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80026f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026fa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80026fc:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 80026fe:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002700:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8002704:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002706:	0100      	lsls	r0, r0, #4
 8002708:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800270a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800270e:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002710:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002712:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002716:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800271a:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 800271c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800271e:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002720:	69da      	ldr	r2, [r3, #28]
 8002722:	f022 020c 	bic.w	r2, r2, #12
 8002726:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002728:	69da      	ldr	r2, [r3, #28]
 800272a:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800272c:	61de      	str	r6, [r3, #28]
 800272e:	e7b2      	b.n	8002696 <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002730:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002734:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002736:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8002738:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800273a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800273e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002742:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002744:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002748:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800274a:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800274c:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800274e:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002752:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002756:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8002758:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 800275a:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800275c:	69da      	ldr	r2, [r3, #28]
 800275e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002762:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 800276a:	e7df      	b.n	800272c <HAL_TIM_IC_ConfigChannel+0xd0>

0800276c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800276c:	6a03      	ldr	r3, [r0, #32]
 800276e:	f023 0310 	bic.w	r3, r3, #16
 8002772:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002774:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002776:	6842      	ldr	r2, [r0, #4]
{
 8002778:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 800277a:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800277c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800277e:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002782:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002786:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002788:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800278c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002790:	4c0d      	ldr	r4, [pc, #52]	; (80027c8 <TIM_OC2_SetConfig+0x5c>)
 8002792:	42a0      	cmp	r0, r4
 8002794:	d009      	beq.n	80027aa <TIM_OC2_SetConfig+0x3e>
 8002796:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800279a:	42a0      	cmp	r0, r4
 800279c:	d005      	beq.n	80027aa <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 800279e:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80027a0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80027a2:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80027a4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80027a6:	6203      	str	r3, [r0, #32]
}
 80027a8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027aa:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027ac:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 80027ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027b2:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027b6:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027b8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027bc:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80027be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027c2:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 80027c6:	e7ea      	b.n	800279e <TIM_OC2_SetConfig+0x32>
 80027c8:	40010000 	.word	0x40010000

080027cc <HAL_TIM_OC_ConfigChannel>:
{
 80027cc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim); 
 80027ce:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80027d2:	2b01      	cmp	r3, #1
{
 80027d4:	4604      	mov	r4, r0
 80027d6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim); 
 80027da:	d018      	beq.n	800280e <HAL_TIM_OC_ConfigChannel+0x42>
 80027dc:	2301      	movs	r3, #1
 80027de:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80027e2:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 80027e6:	461d      	mov	r5, r3
  switch (Channel)
 80027e8:	2a0c      	cmp	r2, #12
 80027ea:	d80b      	bhi.n	8002804 <HAL_TIM_OC_ConfigChannel+0x38>
 80027ec:	e8df f002 	tbb	[pc, r2]
 80027f0:	0a0a0a07 	.word	0x0a0a0a07
 80027f4:	0a0a0a10 	.word	0x0a0a0a10
 80027f8:	0a0a0a14 	.word	0x0a0a0a14
 80027fc:	18          	.byte	0x18
 80027fd:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027fe:	6820      	ldr	r0, [r4, #0]
 8002800:	f7ff fbdc 	bl	8001fbc <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim); 
 8002804:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002806:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim); 
 800280a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800280e:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002810:	6820      	ldr	r0, [r4, #0]
 8002812:	f7ff ffab 	bl	800276c <TIM_OC2_SetConfig>
    break;
 8002816:	e7f5      	b.n	8002804 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002818:	6820      	ldr	r0, [r4, #0]
 800281a:	f7ff fbfb 	bl	8002014 <TIM_OC3_SetConfig>
    break;
 800281e:	e7f1      	b.n	8002804 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002820:	6820      	ldr	r0, [r4, #0]
 8002822:	f7ff fc27 	bl	8002074 <TIM_OC4_SetConfig>
    break;
 8002826:	e7ed      	b.n	8002804 <HAL_TIM_OC_ConfigChannel+0x38>

08002828 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8002828:	6a03      	ldr	r3, [r0, #32]
{
 800282a:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 800282c:	2401      	movs	r4, #1
 800282e:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002830:	ea23 0304 	bic.w	r3, r3, r4
 8002834:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002836:	6a03      	ldr	r3, [r0, #32]
 8002838:	408a      	lsls	r2, r1
 800283a:	431a      	orrs	r2, r3
 800283c:	6202      	str	r2, [r0, #32]
 800283e:	bd10      	pop	{r4, pc}

08002840 <HAL_TIM_PWM_Start_IT>:
{
 8002840:	b510      	push	{r4, lr}
 8002842:	4604      	mov	r4, r0
  switch (Channel)
 8002844:	290c      	cmp	r1, #12
 8002846:	d80d      	bhi.n	8002864 <HAL_TIM_PWM_Start_IT+0x24>
 8002848:	e8df f001 	tbb	[pc, r1]
 800284c:	0c0c0c07 	.word	0x0c0c0c07
 8002850:	0c0c0c22 	.word	0x0c0c0c22
 8002854:	0c0c0c27 	.word	0x0c0c0c27
 8002858:	2c          	.byte	0x2c
 8002859:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800285a:	6802      	ldr	r2, [r0, #0]
 800285c:	68d3      	ldr	r3, [r2, #12]
 800285e:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002862:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002864:	2201      	movs	r2, #1
 8002866:	6820      	ldr	r0, [r4, #0]
 8002868:	f7ff ffde 	bl	8002828 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 800286c:	6823      	ldr	r3, [r4, #0]
 800286e:	4a10      	ldr	r2, [pc, #64]	; (80028b0 <HAL_TIM_PWM_Start_IT+0x70>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d003      	beq.n	800287c <HAL_TIM_PWM_Start_IT+0x3c>
 8002874:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002878:	4293      	cmp	r3, r2
 800287a:	d103      	bne.n	8002884 <HAL_TIM_PWM_Start_IT+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 800287c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800287e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002882:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	601a      	str	r2, [r3, #0]
} 
 800288c:	2000      	movs	r0, #0
 800288e:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002890:	6802      	ldr	r2, [r0, #0]
 8002892:	68d3      	ldr	r3, [r2, #12]
 8002894:	f043 0304 	orr.w	r3, r3, #4
 8002898:	e7e3      	b.n	8002862 <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800289a:	6802      	ldr	r2, [r0, #0]
 800289c:	68d3      	ldr	r3, [r2, #12]
 800289e:	f043 0308 	orr.w	r3, r3, #8
 80028a2:	e7de      	b.n	8002862 <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80028a4:	6802      	ldr	r2, [r0, #0]
 80028a6:	68d3      	ldr	r3, [r2, #12]
 80028a8:	f043 0310 	orr.w	r3, r3, #16
 80028ac:	e7d9      	b.n	8002862 <HAL_TIM_PWM_Start_IT+0x22>
 80028ae:	bf00      	nop
 80028b0:	40010000 	.word	0x40010000

080028b4 <HAL_TIM_OC_Start_IT>:
 80028b4:	f7ff bfc4 	b.w	8002840 <HAL_TIM_PWM_Start_IT>

080028b8 <HAL_TIM_IC_Start_IT>:
{
 80028b8:	b510      	push	{r4, lr}
 80028ba:	4604      	mov	r4, r0
  switch (Channel)
 80028bc:	290c      	cmp	r1, #12
 80028be:	d80d      	bhi.n	80028dc <HAL_TIM_IC_Start_IT+0x24>
 80028c0:	e8df f001 	tbb	[pc, r1]
 80028c4:	0c0c0c07 	.word	0x0c0c0c07
 80028c8:	0c0c0c17 	.word	0x0c0c0c17
 80028cc:	0c0c0c1c 	.word	0x0c0c0c1c
 80028d0:	21          	.byte	0x21
 80028d1:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80028d2:	6802      	ldr	r2, [r0, #0]
 80028d4:	68d3      	ldr	r3, [r2, #12]
 80028d6:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80028da:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80028dc:	6820      	ldr	r0, [r4, #0]
 80028de:	2201      	movs	r2, #1
 80028e0:	f7ff ffa2 	bl	8002828 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 80028e4:	6822      	ldr	r2, [r4, #0]
 80028e6:	6813      	ldr	r3, [r2, #0]
 80028e8:	f043 0301 	orr.w	r3, r3, #1
 80028ec:	6013      	str	r3, [r2, #0]
} 
 80028ee:	2000      	movs	r0, #0
 80028f0:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80028f2:	6802      	ldr	r2, [r0, #0]
 80028f4:	68d3      	ldr	r3, [r2, #12]
 80028f6:	f043 0304 	orr.w	r3, r3, #4
 80028fa:	e7ee      	b.n	80028da <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80028fc:	6802      	ldr	r2, [r0, #0]
 80028fe:	68d3      	ldr	r3, [r2, #12]
 8002900:	f043 0308 	orr.w	r3, r3, #8
 8002904:	e7e9      	b.n	80028da <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002906:	6802      	ldr	r2, [r0, #0]
 8002908:	68d3      	ldr	r3, [r2, #12]
 800290a:	f043 0310 	orr.w	r3, r3, #16
 800290e:	e7e4      	b.n	80028da <HAL_TIM_IC_Start_IT+0x22>

08002910 <HAL_TIM_IC_Stop_IT>:
{
 8002910:	b510      	push	{r4, lr}
 8002912:	4604      	mov	r4, r0
  switch (Channel)
 8002914:	290c      	cmp	r1, #12
 8002916:	d80d      	bhi.n	8002934 <HAL_TIM_IC_Stop_IT+0x24>
 8002918:	e8df f001 	tbb	[pc, r1]
 800291c:	0c0c0c07 	.word	0x0c0c0c07
 8002920:	0c0c0c21 	.word	0x0c0c0c21
 8002924:	0c0c0c26 	.word	0x0c0c0c26
 8002928:	2b          	.byte	0x2b
 8002929:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800292a:	6802      	ldr	r2, [r0, #0]
 800292c:	68d3      	ldr	r3, [r2, #12]
 800292e:	f023 0302 	bic.w	r3, r3, #2
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002932:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE); 
 8002934:	2200      	movs	r2, #0
 8002936:	6820      	ldr	r0, [r4, #0]
 8002938:	f7ff ff76 	bl	8002828 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim); 
 800293c:	6823      	ldr	r3, [r4, #0]
 800293e:	6a19      	ldr	r1, [r3, #32]
 8002940:	f241 1211 	movw	r2, #4369	; 0x1111
 8002944:	4211      	tst	r1, r2
 8002946:	d108      	bne.n	800295a <HAL_TIM_IC_Stop_IT+0x4a>
 8002948:	6a19      	ldr	r1, [r3, #32]
 800294a:	f240 4244 	movw	r2, #1092	; 0x444
 800294e:	4211      	tst	r1, r2
 8002950:	bf02      	ittt	eq
 8002952:	681a      	ldreq	r2, [r3, #0]
 8002954:	f022 0201 	biceq.w	r2, r2, #1
 8002958:	601a      	streq	r2, [r3, #0]
}
 800295a:	2000      	movs	r0, #0
 800295c:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800295e:	6802      	ldr	r2, [r0, #0]
 8002960:	68d3      	ldr	r3, [r2, #12]
 8002962:	f023 0304 	bic.w	r3, r3, #4
 8002966:	e7e4      	b.n	8002932 <HAL_TIM_IC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002968:	6802      	ldr	r2, [r0, #0]
 800296a:	68d3      	ldr	r3, [r2, #12]
 800296c:	f023 0308 	bic.w	r3, r3, #8
 8002970:	e7df      	b.n	8002932 <HAL_TIM_IC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002972:	6802      	ldr	r2, [r0, #0]
 8002974:	68d3      	ldr	r3, [r2, #12]
 8002976:	f023 0310 	bic.w	r3, r3, #16
 800297a:	e7da      	b.n	8002932 <HAL_TIM_IC_Stop_IT+0x22>

0800297c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800297c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002980:	2b01      	cmp	r3, #1
{
 8002982:	b510      	push	{r4, lr}
 8002984:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002988:	d018      	beq.n	80029bc <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800298a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800298e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002990:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002992:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002994:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002996:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800299a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800299c:	685a      	ldr	r2, [r3, #4]
 800299e:	4322      	orrs	r2, r4
 80029a0:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029a8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80029b0:	2301      	movs	r3, #1
 80029b2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80029b6:	2300      	movs	r3, #0
 80029b8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80029bc:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80029be:	bd10      	pop	{r4, pc}

080029c0 <HAL_TIMEx_CommutationCallback>:
 80029c0:	4770      	bx	lr

080029c2 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029c2:	4770      	bx	lr

080029c4 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80029c8:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80029ca:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80029cc:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029ce:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80029d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80029d4:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80029d6:	6133      	str	r3, [r6, #16]
{
 80029d8:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029da:	6883      	ldr	r3, [r0, #8]
 80029dc:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80029de:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029e0:	4303      	orrs	r3, r0
 80029e2:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80029e4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029e8:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80029ea:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80029ee:	430b      	orrs	r3, r1
 80029f0:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80029f2:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80029f4:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80029f6:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80029f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80029fc:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029fe:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002a02:	6173      	str	r3, [r6, #20]
 8002a04:	4b7a      	ldr	r3, [pc, #488]	; (8002bf0 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a06:	d17c      	bne.n	8002b02 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a08:	429e      	cmp	r6, r3
 8002a0a:	d003      	beq.n	8002a14 <UART_SetConfig+0x50>
 8002a0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a10:	429e      	cmp	r6, r3
 8002a12:	d144      	bne.n	8002a9e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002a14:	f7ff f932 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002a18:	2519      	movs	r5, #25
 8002a1a:	fb05 f300 	mul.w	r3, r5, r0
 8002a1e:	6860      	ldr	r0, [r4, #4]
 8002a20:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002a24:	0040      	lsls	r0, r0, #1
 8002a26:	fbb3 f3f0 	udiv	r3, r3, r0
 8002a2a:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002a32:	f7ff f923 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002a36:	6863      	ldr	r3, [r4, #4]
 8002a38:	4368      	muls	r0, r5
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	fbb0 f7f3 	udiv	r7, r0, r3
 8002a40:	f7ff f91c 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002a44:	6863      	ldr	r3, [r4, #4]
 8002a46:	4368      	muls	r0, r5
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a4e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a52:	fb09 7313 	mls	r3, r9, r3, r7
 8002a56:	00db      	lsls	r3, r3, #3
 8002a58:	3332      	adds	r3, #50	; 0x32
 8002a5a:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002a64:	f7ff f90a 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002a68:	6862      	ldr	r2, [r4, #4]
 8002a6a:	4368      	muls	r0, r5
 8002a6c:	0052      	lsls	r2, r2, #1
 8002a6e:	fbb0 faf2 	udiv	sl, r0, r2
 8002a72:	f7ff f903 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002a76:	6863      	ldr	r3, [r4, #4]
 8002a78:	4368      	muls	r0, r5
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a80:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a84:	fb09 a313 	mls	r3, r9, r3, sl
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	3332      	adds	r3, #50	; 0x32
 8002a8c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002a96:	443b      	add	r3, r7
 8002a98:	60b3      	str	r3, [r6, #8]
 8002a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002a9e:	f7ff f8dd 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002aa2:	2519      	movs	r5, #25
 8002aa4:	fb05 f300 	mul.w	r3, r5, r0
 8002aa8:	6860      	ldr	r0, [r4, #4]
 8002aaa:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002aae:	0040      	lsls	r0, r0, #1
 8002ab0:	fbb3 f3f0 	udiv	r3, r3, r0
 8002ab4:	fbb3 f3f9 	udiv	r3, r3, r9
 8002ab8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002abc:	f7ff f8ce 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002ac0:	6863      	ldr	r3, [r4, #4]
 8002ac2:	4368      	muls	r0, r5
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	fbb0 f7f3 	udiv	r7, r0, r3
 8002aca:	f7ff f8c7 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002ace:	6863      	ldr	r3, [r4, #4]
 8002ad0:	4368      	muls	r0, r5
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad8:	fbb3 f3f9 	udiv	r3, r3, r9
 8002adc:	fb09 7313 	mls	r3, r9, r3, r7
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	3332      	adds	r3, #50	; 0x32
 8002ae4:	fbb3 f3f9 	udiv	r3, r3, r9
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002aee:	f7ff f8b5 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002af2:	6862      	ldr	r2, [r4, #4]
 8002af4:	4368      	muls	r0, r5
 8002af6:	0052      	lsls	r2, r2, #1
 8002af8:	fbb0 faf2 	udiv	sl, r0, r2
 8002afc:	f7ff f8ae 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002b00:	e7b9      	b.n	8002a76 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002b02:	429e      	cmp	r6, r3
 8002b04:	d002      	beq.n	8002b0c <UART_SetConfig+0x148>
 8002b06:	4b3b      	ldr	r3, [pc, #236]	; (8002bf4 <UART_SetConfig+0x230>)
 8002b08:	429e      	cmp	r6, r3
 8002b0a:	d140      	bne.n	8002b8e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002b0c:	f7ff f8b6 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002b10:	6867      	ldr	r7, [r4, #4]
 8002b12:	2519      	movs	r5, #25
 8002b14:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002b18:	fb05 f300 	mul.w	r3, r5, r0
 8002b1c:	00bf      	lsls	r7, r7, #2
 8002b1e:	fbb3 f3f7 	udiv	r3, r3, r7
 8002b22:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b26:	011f      	lsls	r7, r3, #4
 8002b28:	f7ff f8a8 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002b2c:	6863      	ldr	r3, [r4, #4]
 8002b2e:	4368      	muls	r0, r5
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	fbb0 f8f3 	udiv	r8, r0, r3
 8002b36:	f7ff f8a1 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002b3a:	6863      	ldr	r3, [r4, #4]
 8002b3c:	4368      	muls	r0, r5
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b44:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b48:	fb09 8313 	mls	r3, r9, r3, r8
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	3332      	adds	r3, #50	; 0x32
 8002b50:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b54:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002b58:	f7ff f890 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
 8002b5c:	6862      	ldr	r2, [r4, #4]
 8002b5e:	4368      	muls	r0, r5
 8002b60:	0092      	lsls	r2, r2, #2
 8002b62:	fbb0 faf2 	udiv	sl, r0, r2
 8002b66:	f7ff f889 	bl	8001c7c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002b6a:	6863      	ldr	r3, [r4, #4]
 8002b6c:	4368      	muls	r0, r5
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b74:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b78:	fb09 a313 	mls	r3, r9, r3, sl
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	3332      	adds	r3, #50	; 0x32
 8002b80:	fbb3 f3f9 	udiv	r3, r3, r9
 8002b84:	f003 030f 	and.w	r3, r3, #15
 8002b88:	ea43 0308 	orr.w	r3, r3, r8
 8002b8c:	e783      	b.n	8002a96 <UART_SetConfig+0xd2>
 8002b8e:	f7ff f865 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002b92:	6867      	ldr	r7, [r4, #4]
 8002b94:	2519      	movs	r5, #25
 8002b96:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002b9a:	fb05 f300 	mul.w	r3, r5, r0
 8002b9e:	00bf      	lsls	r7, r7, #2
 8002ba0:	fbb3 f3f7 	udiv	r3, r3, r7
 8002ba4:	fbb3 f3f9 	udiv	r3, r3, r9
 8002ba8:	011f      	lsls	r7, r3, #4
 8002baa:	f7ff f857 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002bae:	6863      	ldr	r3, [r4, #4]
 8002bb0:	4368      	muls	r0, r5
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	fbb0 f8f3 	udiv	r8, r0, r3
 8002bb8:	f7ff f850 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002bbc:	6863      	ldr	r3, [r4, #4]
 8002bbe:	4368      	muls	r0, r5
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bc6:	fbb3 f3f9 	udiv	r3, r3, r9
 8002bca:	fb09 8313 	mls	r3, r9, r3, r8
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	3332      	adds	r3, #50	; 0x32
 8002bd2:	fbb3 f3f9 	udiv	r3, r3, r9
 8002bd6:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002bda:	f7ff f83f 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002bde:	6862      	ldr	r2, [r4, #4]
 8002be0:	4368      	muls	r0, r5
 8002be2:	0092      	lsls	r2, r2, #2
 8002be4:	fbb0 faf2 	udiv	sl, r0, r2
 8002be8:	f7ff f838 	bl	8001c5c <HAL_RCC_GetPCLK1Freq>
 8002bec:	e7bd      	b.n	8002b6a <UART_SetConfig+0x1a6>
 8002bee:	bf00      	nop
 8002bf0:	40011000 	.word	0x40011000
 8002bf4:	40011400 	.word	0x40011400

08002bf8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	4604      	mov	r4, r0
 8002bfc:	460e      	mov	r6, r1
 8002bfe:	4617      	mov	r7, r2
 8002c00:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002c02:	6821      	ldr	r1, [r4, #0]
 8002c04:	680b      	ldr	r3, [r1, #0]
 8002c06:	ea36 0303 	bics.w	r3, r6, r3
 8002c0a:	d101      	bne.n	8002c10 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8002c0c:	2000      	movs	r0, #0
}
 8002c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002c10:	1c6b      	adds	r3, r5, #1
 8002c12:	d0f7      	beq.n	8002c04 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002c14:	b995      	cbnz	r5, 8002c3c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c16:	6823      	ldr	r3, [r4, #0]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c1e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	f022 0201 	bic.w	r2, r2, #1
 8002c26:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002c28:	2320      	movs	r3, #32
 8002c2a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002c2e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002c32:	2300      	movs	r3, #0
 8002c34:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002c38:	2003      	movs	r0, #3
 8002c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002c3c:	f7fe fc70 	bl	8001520 <HAL_GetTick>
 8002c40:	1bc0      	subs	r0, r0, r7
 8002c42:	4285      	cmp	r5, r0
 8002c44:	d2dd      	bcs.n	8002c02 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002c46:	e7e6      	b.n	8002c16 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002c48 <HAL_UART_Init>:
{
 8002c48:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002c4a:	4604      	mov	r4, r0
 8002c4c:	b340      	cbz	r0, 8002ca0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002c4e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002c52:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002c56:	b91b      	cbnz	r3, 8002c60 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002c58:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002c5c:	f000 fdc2 	bl	80037e4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002c60:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002c62:	2324      	movs	r3, #36	; 0x24
 8002c64:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002c68:	68d3      	ldr	r3, [r2, #12]
 8002c6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c6e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002c70:	4620      	mov	r0, r4
 8002c72:	f7ff fea7 	bl	80029c4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c76:	6823      	ldr	r3, [r4, #0]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c7e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c80:	695a      	ldr	r2, [r3, #20]
 8002c82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c86:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c8e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c90:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002c92:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c94:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002c96:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002c9a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002c9e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002ca0:	2001      	movs	r0, #1
}
 8002ca2:	bd10      	pop	{r4, pc}

08002ca4 <HAL_UART_Transmit>:
{
 8002ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ca8:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8002caa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002cae:	2b20      	cmp	r3, #32
{
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	460d      	mov	r5, r1
 8002cb4:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8002cb6:	d14f      	bne.n	8002d58 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8002cb8:	2900      	cmp	r1, #0
 8002cba:	d04a      	beq.n	8002d52 <HAL_UART_Transmit+0xae>
 8002cbc:	2a00      	cmp	r2, #0
 8002cbe:	d048      	beq.n	8002d52 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8002cc0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d047      	beq.n	8002d58 <HAL_UART_Transmit+0xb4>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cd2:	2321      	movs	r3, #33	; 0x21
 8002cd4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002cd8:	f7fe fc22 	bl	8001520 <HAL_GetTick>
    huart->TxXferSize = Size;
 8002cdc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002ce0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002ce2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002ce6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	b96b      	cbnz	r3, 8002d08 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cec:	463b      	mov	r3, r7
 8002cee:	4632      	mov	r2, r6
 8002cf0:	2140      	movs	r1, #64	; 0x40
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	f7ff ff80 	bl	8002bf8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002cf8:	b9b0      	cbnz	r0, 8002d28 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8002cfa:	2320      	movs	r3, #32
 8002cfc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002d00:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002d08:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002d0a:	3b01      	subs	r3, #1
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d10:	68a3      	ldr	r3, [r4, #8]
 8002d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d16:	4632      	mov	r2, r6
 8002d18:	463b      	mov	r3, r7
 8002d1a:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002d1e:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d20:	d10e      	bne.n	8002d40 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d22:	f7ff ff69 	bl	8002bf8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002d26:	b110      	cbz	r0, 8002d2e <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002d28:	2003      	movs	r0, #3
 8002d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002d2e:	882b      	ldrh	r3, [r5, #0]
 8002d30:	6822      	ldr	r2, [r4, #0]
 8002d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d36:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002d38:	6923      	ldr	r3, [r4, #16]
 8002d3a:	b943      	cbnz	r3, 8002d4e <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8002d3c:	3502      	adds	r5, #2
 8002d3e:	e7d2      	b.n	8002ce6 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d40:	f7ff ff5a 	bl	8002bf8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002d44:	2800      	cmp	r0, #0
 8002d46:	d1ef      	bne.n	8002d28 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002d48:	6823      	ldr	r3, [r4, #0]
 8002d4a:	782a      	ldrb	r2, [r5, #0]
 8002d4c:	605a      	str	r2, [r3, #4]
 8002d4e:	3501      	adds	r5, #1
 8002d50:	e7c9      	b.n	8002ce6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002d52:	2001      	movs	r0, #1
 8002d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002d58:	2002      	movs	r0, #2
}
 8002d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002d60 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d70:	d151      	bne.n	8002e16 <HAL_TIM_IC_CaptureCallback+0xb6>
		static uint32_t lastCounterValue;
		uint32_t period = TIM2->CCR1-lastCounterValue;
 8002d72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d78:	4b29      	ldr	r3, [pc, #164]	; (8002e20 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	60fb      	str	r3, [r7, #12]

		// After an hour or so the 32bit CNT register will overflow, we should mitigate this
		if(TIM2->CNT > 4000000000UL){
 8002d80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	4a27      	ldr	r2, [pc, #156]	; (8002e24 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	bf8c      	ite	hi
 8002d8c:	2301      	movhi	r3, #1
 8002d8e:	2300      	movls	r3, #0
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d007      	beq.n	8002da6 <HAL_TIM_IC_CaptureCallback+0x46>
			TIM2->CNT = 0;
 8002d96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24
			lastCounterValue = 0;
 8002d9e:	4b20      	ldr	r3, [pc, #128]	; (8002e20 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
 8002da4:	e004      	b.n	8002db0 <HAL_TIM_IC_CaptureCallback+0x50>
		}else{lastCounterValue = TIM2->CNT;}
 8002da6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	4a1c      	ldr	r2, [pc, #112]	; (8002e20 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8002dae:	6013      	str	r3, [r2, #0]

		// Average the difference between CNT values, after 2 inputs "lock" the clock enabling outputs
		// This will set the TIM5 timebase and the TIM2 channel 2 timebase.
		if(clock.addPeriodSample(period)){
 8002db0:	68f9      	ldr	r1, [r7, #12]
 8002db2:	481d      	ldr	r0, [pc, #116]	; (8002e28 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002db4:	f000 fddf 	bl	8003976 <_ZN5Clock15addPeriodSampleEj>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	bf14      	ite	ne
 8002dbe:	2301      	movne	r3, #1
 8002dc0:	2300      	moveq	r3, #0
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d023      	beq.n	8002e10 <HAL_TIM_IC_CaptureCallback+0xb0>
			clock.masterTick();
 8002dc8:	4817      	ldr	r0, [pc, #92]	; (8002e28 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002dca:	f000 fecc 	bl	8003b66 <_ZN5Clock10masterTickEv>
			clock.lock();
 8002dce:	4816      	ldr	r0, [pc, #88]	; (8002e28 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002dd0:	f000 ff09 	bl	8003be6 <_ZN5Clock4lockEv>
			clock.slaveTimer->Instance->CNT = 0;
 8002dd4:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24
			clock.slaveTimer->Instance->ARR = (clock.averagedPeriod+50)/16;
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a10      	ldr	r2, [pc, #64]	; (8002e28 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002de6:	69d2      	ldr	r2, [r2, #28]
 8002de8:	3232      	adds	r2, #50	; 0x32
 8002dea:	0912      	lsrs	r2, r2, #4
 8002dec:	62da      	str	r2, [r3, #44]	; 0x2c
			clock.slaveTimer->Instance->CCR2 = 1000;
 8002dee:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002df8:	639a      	str	r2, [r3, #56]	; 0x38
			// Set timer 2 channel 2 to trigger after the period has elapsed
			clock.masterTimer->Instance->CCR2 = TIM2->CNT+clock.averagedPeriod;
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e04:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002e06:	4a08      	ldr	r2, [pc, #32]	; (8002e28 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002e08:	69d2      	ldr	r2, [r2, #28]
 8002e0a:	440a      	add	r2, r1
 8002e0c:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
				*/
		}

}
 8002e0e:	e002      	b.n	8002e16 <HAL_TIM_IC_CaptureCallback+0xb6>
			clock.unlock();
 8002e10:	4805      	ldr	r0, [pc, #20]	; (8002e28 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8002e12:	f000 feff 	bl	8003c14 <_ZN5Clock6unlockEv>
}
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	200002c4 	.word	0x200002c4
 8002e24:	ee6b2800 	.word	0xee6b2800
 8002e28:	200001e4 	.word	0x200001e4

08002e2c <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e3c:	d11f      	bne.n	8002e7e <HAL_TIM_PWM_PulseFinishedCallback+0x52>
		if(clock.clockSource==INTERNAL){
 8002e3e:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8002e40:	7a1b      	ldrb	r3, [r3, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d01b      	beq.n	8002e7e <HAL_TIM_PWM_PulseFinishedCallback+0x52>
			// HAL_GPIO_WritePin(OUT1_GPIO_Port,OUT1_Pin,GPIO_PIN_SET);
			// HAL_GPIO_WritePin(OUT2_GPIO_Port,OUT2_Pin,GPIO_PIN_SET);
			// HAL_GPIO_WritePin(OUT3_GPIO_Port,OUT3_Pin,GPIO_PIN_SET);

		}
		else if(clock.clockSource==EXTERNAL){
 8002e46:	4b1a      	ldr	r3, [pc, #104]	; (8002eb0 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8002e48:	7a1b      	ldrb	r3, [r3, #8]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d117      	bne.n	8002e7e <HAL_TIM_PWM_PulseFinishedCallback+0x52>
			// When no tempo is being tapped/clocked in this will be the main time base
			if(clock.isLocked()){
 8002e4e:	4818      	ldr	r0, [pc, #96]	; (8002eb0 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8002e50:	f000 feed 	bl	8003c2e <_ZN5Clock8isLockedEv>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d011      	beq.n	8002e7e <HAL_TIM_PWM_PulseFinishedCallback+0x52>
				clock.masterTick();
 8002e5a:	4815      	ldr	r0, [pc, #84]	; (8002eb0 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8002e5c:	f000 fe83 	bl	8003b66 <_ZN5Clock10masterTickEv>
				clock.slaveTimer->Instance->CNT = 0;
 8002e60:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2200      	movs	r2, #0
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24
				clock.masterTimer->Instance->CCR2 = TIM2->CNT+clock.averagedPeriod;
 8002e6a:	4b11      	ldr	r3, [pc, #68]	; (8002eb0 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e74:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002e76:	4a0e      	ldr	r2, [pc, #56]	; (8002eb0 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8002e78:	69d2      	ldr	r2, [r2, #28]
 8002e7a:	440a      	add	r2, r1
 8002e7c:	639a      	str	r2, [r3, #56]	; 0x38
			}

		}
	}

	if(htim->Instance==TIM5){
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a0c      	ldr	r2, [pc, #48]	; (8002eb4 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d10e      	bne.n	8002ea6 <HAL_TIM_PWM_PulseFinishedCallback+0x7a>

		HAL_GPIO_WritePin(OUT1_GPIO_Port,OUT1_Pin,GPIO_PIN_RESET);
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	480a      	ldr	r0, [pc, #40]	; (8002eb8 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8002e8e:	f7fe fc95 	bl	80017bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT2_GPIO_Port,OUT2_Pin,GPIO_PIN_RESET);
 8002e92:	2200      	movs	r2, #0
 8002e94:	2102      	movs	r1, #2
 8002e96:	4808      	ldr	r0, [pc, #32]	; (8002eb8 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8002e98:	f7fe fc90 	bl	80017bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT3_GPIO_Port,OUT3_Pin,GPIO_PIN_RESET);
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	2104      	movs	r1, #4
 8002ea0:	4805      	ldr	r0, [pc, #20]	; (8002eb8 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8002ea2:	f7fe fc8b 	bl	80017bc <HAL_GPIO_WritePin>
	}
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	200001e4 	.word	0x200001e4
 8002eb4:	40000c00 	.word	0x40000c00
 8002eb8:	40020400 	.word	0x40020400

08002ebc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b082      	sub	sp, #8
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM5){
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a27      	ldr	r2, [pc, #156]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d136      	bne.n	8002f3c <HAL_TIM_PeriodElapsedCallback+0x80>
		if(clock.isLocked()){
 8002ece:	4827      	ldr	r0, [pc, #156]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002ed0:	f000 fead 	bl	8003c2e <_ZN5Clock8isLockedEv>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d030      	beq.n	8002f3c <HAL_TIM_PeriodElapsedCallback+0x80>
		if(clock.sub==0){HAL_GPIO_WritePin(OUT1_GPIO_Port,OUT1_Pin,GPIO_PIN_SET);}
 8002eda:	4b24      	ldr	r3, [pc, #144]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	bf0c      	ite	eq
 8002ee2:	2301      	moveq	r3, #1
 8002ee4:	2300      	movne	r3, #0
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d004      	beq.n	8002ef6 <HAL_TIM_PeriodElapsedCallback+0x3a>
 8002eec:	2201      	movs	r2, #1
 8002eee:	2101      	movs	r1, #1
 8002ef0:	481f      	ldr	r0, [pc, #124]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002ef2:	f7fe fc63 	bl	80017bc <HAL_GPIO_WritePin>
		if(!(clock.sub%4)){HAL_GPIO_WritePin(OUT2_GPIO_Port,OUT2_Pin,GPIO_PIN_SET);}
 8002ef6:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bf0c      	ite	eq
 8002f02:	2301      	moveq	r3, #1
 8002f04:	2300      	movne	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d004      	beq.n	8002f16 <HAL_TIM_PeriodElapsedCallback+0x5a>
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	2102      	movs	r1, #2
 8002f10:	4817      	ldr	r0, [pc, #92]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002f12:	f7fe fc53 	bl	80017bc <HAL_GPIO_WritePin>
		if(!(clock.sub%8)){HAL_GPIO_WritePin(OUT3_GPIO_Port,OUT3_Pin, GPIO_PIN_SET);}
 8002f16:	4b15      	ldr	r3, [pc, #84]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	bf0c      	ite	eq
 8002f22:	2301      	moveq	r3, #1
 8002f24:	2300      	movne	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d004      	beq.n	8002f36 <HAL_TIM_PeriodElapsedCallback+0x7a>
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	2104      	movs	r1, #4
 8002f30:	480f      	ldr	r0, [pc, #60]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002f32:	f7fe fc43 	bl	80017bc <HAL_GPIO_WritePin>
		clock.subTick();
 8002f36:	480d      	ldr	r0, [pc, #52]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002f38:	f000 fe27 	bl	8003b8a <_ZN5Clock7subTickEv>
		}
	}
	// Update gui
	if(htim->Instance==TIM10){
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a0c      	ldr	r2, [pc, #48]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d10b      	bne.n	8002f5e <HAL_TIM_PeriodElapsedCallback+0xa2>
		TIM10->CNT=0;
 8002f46:	4b0b      	ldr	r3, [pc, #44]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	625a      	str	r2, [r3, #36]	; 0x24
		editSwitches.update(clock.sub);
 8002f4c:	4b07      	ldr	r3, [pc, #28]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	4619      	mov	r1, r3
 8002f52:	4809      	ldr	r0, [pc, #36]	; (8002f78 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002f54:	f001 f896 	bl	8004084 <_ZN8Switches6updateEi>
		editSwitches.spi();
 8002f58:	4807      	ldr	r0, [pc, #28]	; (8002f78 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002f5a:	f001 f867 	bl	800402c <_ZN8Switches3spiEv>
	}
}
 8002f5e:	bf00      	nop
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	40000c00 	.word	0x40000c00
 8002f6c:	200001e4 	.word	0x200001e4
 8002f70:	40020400 	.word	0x40020400
 8002f74:	40014400 	.word	0x40014400
 8002f78:	2000025c 	.word	0x2000025c

08002f7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f7c:	b590      	push	{r4, r7, lr}
 8002f7e:	b09d      	sub	sp, #116	; 0x74
 8002f80:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f82:	f7fe faa7 	bl	80014d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f86:	f000 f871 	bl	800306c <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f8a:	f000 fac7 	bl	800351c <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8002f8e:	f000 f911 	bl	80031b4 <_ZL12MX_TIM2_Initv>
  MX_TIM5_Init();
 8002f92:	f000 f9c7 	bl	8003324 <_ZL12MX_TIM5_Initv>
  MX_USART2_UART_Init();
 8002f96:	f000 fa93 	bl	80034c0 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 8002f9a:	f000 f8cf 	bl	800313c <_ZL12MX_SPI1_Initv>
  MX_TIM10_Init();
 8002f9e:	f000 fa69 	bl	8003474 <_ZL13MX_TIM10_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 8002fa2:	4829      	ldr	r0, [pc, #164]	; (8003048 <main+0xcc>)
 8002fa4:	f7ff f8e3 	bl	800216e <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim5,TIM_CHANNEL_2);
 8002fa8:	2104      	movs	r1, #4
 8002faa:	4827      	ldr	r0, [pc, #156]	; (8003048 <main+0xcc>)
 8002fac:	f7ff fc82 	bl	80028b4 <HAL_TIM_OC_Start_IT>
	  // HAL_TIM_IC_Start_IT(&htim5,TIM_CHANNEL_1);
  clock.setTimer(&htim2,&htim5);
 8002fb0:	4a25      	ldr	r2, [pc, #148]	; (8003048 <main+0xcc>)
 8002fb2:	4926      	ldr	r1, [pc, #152]	; (800304c <main+0xd0>)
 8002fb4:	4826      	ldr	r0, [pc, #152]	; (8003050 <main+0xd4>)
 8002fb6:	f000 fe04 	bl	8003bc2 <_ZN5Clock8setTimerEP17TIM_HandleTypeDefS1_>
  clock.setSource(EXTERNAL);
 8002fba:	2101      	movs	r1, #1
 8002fbc:	4824      	ldr	r0, [pc, #144]	; (8003050 <main+0xd4>)
 8002fbe:	f000 fe68 	bl	8003c92 <_ZN5Clock9setSourceE11ClockSource>
  clock.setPeriod(2000000);
 8002fc2:	4924      	ldr	r1, [pc, #144]	; (8003054 <main+0xd8>)
 8002fc4:	4822      	ldr	r0, [pc, #136]	; (8003050 <main+0xd4>)
 8002fc6:	f000 fe3e 	bl	8003c46 <_ZN5Clock9setPeriodEj>
  clock.setSlaveDivision(16);
 8002fca:	2110      	movs	r1, #16
 8002fcc:	4820      	ldr	r0, [pc, #128]	; (8003050 <main+0xd4>)
 8002fce:	f000 fe8c 	bl	8003cea <_ZN5Clock16setSlaveDivisionEj>
  // clock.lock();
	  // HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);

  HAL_TIM_Base_Start_IT(&htim10);
 8002fd2:	4821      	ldr	r0, [pc, #132]	; (8003058 <main+0xdc>)
 8002fd4:	f7ff f8cb 	bl	800216e <HAL_TIM_Base_Start_IT>

  shiftRegInit();
 8002fd8:	f000 fec4 	bl	8003d64 <_Z12shiftRegInitv>
  editSwitches.setLedAll(FULL,PULSE_MODE_8TH);
 8002fdc:	2204      	movs	r2, #4
 8002fde:	217f      	movs	r1, #127	; 0x7f
 8002fe0:	481e      	ldr	r0, [pc, #120]	; (800305c <main+0xe0>)
 8002fe2:	f001 fa55 	bl	8004490 <_ZN8Switches9setLedAllE8PWM_MODE10PULSE_MODE>

  char stringTx[32];
  sprintf((char*)stringTx,"HELLO WORLD!");
 8002fe6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002fea:	4a1d      	ldr	r2, [pc, #116]	; (8003060 <main+0xe4>)
 8002fec:	461c      	mov	r4, r3
 8002fee:	4613      	mov	r3, r2
 8002ff0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ff2:	c407      	stmia	r4!, {r0, r1, r2}
 8002ff4:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2,(uint8_t*)stringTx,32,10);
 8002ff6:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8002ffa:	230a      	movs	r3, #10
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	4819      	ldr	r0, [pc, #100]	; (8003064 <main+0xe8>)
 8003000:	f7ff fe50 	bl	8002ca4 <HAL_UART_Transmit>

 unsigned int temp;

  while (1)
  {
	  if(temp != clock.sub){
 8003004:	4b12      	ldr	r3, [pc, #72]	; (8003050 <main+0xd4>)
 8003006:	699a      	ldr	r2, [r3, #24]
 8003008:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800300a:	429a      	cmp	r2, r3
 800300c:	bf14      	ite	ne
 800300e:	2301      	movne	r3, #1
 8003010:	2300      	moveq	r3, #0
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f5      	beq.n	8003004 <main+0x88>
			char stringTx[64];
			stringTx[0]='\0';
 8003018:	2300      	movs	r3, #0
 800301a:	713b      	strb	r3, [r7, #4]
			sprintf((char*)stringTx," M: %d S: %d P: %d \r",clock.master,clock.sub,clock.averagedPeriod);
 800301c:	4b0c      	ldr	r3, [pc, #48]	; (8003050 <main+0xd4>)
 800301e:	695a      	ldr	r2, [r3, #20]
 8003020:	4b0b      	ldr	r3, [pc, #44]	; (8003050 <main+0xd4>)
 8003022:	6999      	ldr	r1, [r3, #24]
 8003024:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <main+0xd4>)
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	1d38      	adds	r0, r7, #4
 800302a:	9300      	str	r3, [sp, #0]
 800302c:	460b      	mov	r3, r1
 800302e:	490e      	ldr	r1, [pc, #56]	; (8003068 <main+0xec>)
 8003030:	f004 f9dc 	bl	80073ec <siprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)stringTx,64,100);
 8003034:	1d39      	adds	r1, r7, #4
 8003036:	2364      	movs	r3, #100	; 0x64
 8003038:	2240      	movs	r2, #64	; 0x40
 800303a:	480a      	ldr	r0, [pc, #40]	; (8003064 <main+0xe8>)
 800303c:	f7ff fe32 	bl	8002ca4 <HAL_UART_Transmit>
			temp = clock.sub;
 8003040:	4b03      	ldr	r3, [pc, #12]	; (8003050 <main+0xd4>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	667b      	str	r3, [r7, #100]	; 0x64
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8003046:	e7dd      	b.n	8003004 <main+0x88>
 8003048:	2000012c 	.word	0x2000012c
 800304c:	200000f0 	.word	0x200000f0
 8003050:	200001e4 	.word	0x200001e4
 8003054:	001e8480 	.word	0x001e8480
 8003058:	20000168 	.word	0x20000168
 800305c:	2000025c 	.word	0x2000025c
 8003060:	08007abc 	.word	0x08007abc
 8003064:	200001a4 	.word	0x200001a4
 8003068:	08007acc 	.word	0x08007acc

0800306c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b094      	sub	sp, #80	; 0x50
 8003070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003072:	f107 0320 	add.w	r3, r7, #32
 8003076:	2230      	movs	r2, #48	; 0x30
 8003078:	2100      	movs	r1, #0
 800307a:	4618      	mov	r0, r3
 800307c:	f004 f8ad 	bl	80071da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003080:	f107 030c 	add.w	r3, r7, #12
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	611a      	str	r2, [r3, #16]

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003090:	2300      	movs	r3, #0
 8003092:	60bb      	str	r3, [r7, #8]
 8003094:	4a27      	ldr	r2, [pc, #156]	; (8003134 <_Z18SystemClock_Configv+0xc8>)
 8003096:	4b27      	ldr	r3, [pc, #156]	; (8003134 <_Z18SystemClock_Configv+0xc8>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309e:	6413      	str	r3, [r2, #64]	; 0x40
 80030a0:	4b24      	ldr	r3, [pc, #144]	; (8003134 <_Z18SystemClock_Configv+0xc8>)
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030ac:	2300      	movs	r3, #0
 80030ae:	607b      	str	r3, [r7, #4]
 80030b0:	4a21      	ldr	r2, [pc, #132]	; (8003138 <_Z18SystemClock_Configv+0xcc>)
 80030b2:	4b21      	ldr	r3, [pc, #132]	; (8003138 <_Z18SystemClock_Configv+0xcc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	4b1e      	ldr	r3, [pc, #120]	; (8003138 <_Z18SystemClock_Configv+0xcc>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c4:	607b      	str	r3, [r7, #4]
 80030c6:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030c8:	2302      	movs	r3, #2
 80030ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030cc:	2301      	movs	r3, #1
 80030ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030d0:	2310      	movs	r3, #16
 80030d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80030d4:	2300      	movs	r3, #0
 80030d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030d8:	f107 0320 	add.w	r3, r7, #32
 80030dc:	4618      	mov	r0, r3
 80030de:	f7fe fb73 	bl	80017c8 <HAL_RCC_OscConfig>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf14      	ite	ne
 80030e8:	2301      	movne	r3, #1
 80030ea:	2300      	moveq	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d001      	beq.n	80030f6 <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 80030f2:	f000 fa79 	bl	80035e8 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030f6:	230f      	movs	r3, #15
 80030f8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030fe:	2300      	movs	r3, #0
 8003100:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003102:	2300      	movs	r3, #0
 8003104:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800310a:	f107 030c 	add.w	r3, r7, #12
 800310e:	2100      	movs	r1, #0
 8003110:	4618      	mov	r0, r3
 8003112:	f7fe fd09 	bl	8001b28 <HAL_RCC_ClockConfig>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	bf14      	ite	ne
 800311c:	2301      	movne	r3, #1
 800311e:	2300      	moveq	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 8003126:	f000 fa5f 	bl	80035e8 <Error_Handler>
  }
}
 800312a:	bf00      	nop
 800312c:	3750      	adds	r7, #80	; 0x50
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800
 8003138:	40007000 	.word	0x40007000

0800313c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003140:	4b1a      	ldr	r3, [pc, #104]	; (80031ac <_ZL12MX_SPI1_Initv+0x70>)
 8003142:	4a1b      	ldr	r2, [pc, #108]	; (80031b0 <_ZL12MX_SPI1_Initv+0x74>)
 8003144:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003146:	4b19      	ldr	r3, [pc, #100]	; (80031ac <_ZL12MX_SPI1_Initv+0x70>)
 8003148:	f44f 7282 	mov.w	r2, #260	; 0x104
 800314c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800314e:	4b17      	ldr	r3, [pc, #92]	; (80031ac <_ZL12MX_SPI1_Initv+0x70>)
 8003150:	2200      	movs	r2, #0
 8003152:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003154:	4b15      	ldr	r3, [pc, #84]	; (80031ac <_ZL12MX_SPI1_Initv+0x70>)
 8003156:	2200      	movs	r2, #0
 8003158:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800315a:	4b14      	ldr	r3, [pc, #80]	; (80031ac <_ZL12MX_SPI1_Initv+0x70>)
 800315c:	2200      	movs	r2, #0
 800315e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003160:	4b12      	ldr	r3, [pc, #72]	; (80031ac <_ZL12MX_SPI1_Initv+0x70>)
 8003162:	2200      	movs	r2, #0
 8003164:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003166:	4b11      	ldr	r3, [pc, #68]	; (80031ac <_ZL12MX_SPI1_Initv+0x70>)
 8003168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800316c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800316e:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <_ZL12MX_SPI1_Initv+0x70>)
 8003170:	2210      	movs	r2, #16
 8003172:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003174:	4b0d      	ldr	r3, [pc, #52]	; (80031ac <_ZL12MX_SPI1_Initv+0x70>)
 8003176:	2200      	movs	r2, #0
 8003178:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800317a:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <_ZL12MX_SPI1_Initv+0x70>)
 800317c:	2200      	movs	r2, #0
 800317e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003180:	4b0a      	ldr	r3, [pc, #40]	; (80031ac <_ZL12MX_SPI1_Initv+0x70>)
 8003182:	2200      	movs	r2, #0
 8003184:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003186:	4b09      	ldr	r3, [pc, #36]	; (80031ac <_ZL12MX_SPI1_Initv+0x70>)
 8003188:	220a      	movs	r2, #10
 800318a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800318c:	4807      	ldr	r0, [pc, #28]	; (80031ac <_ZL12MX_SPI1_Initv+0x70>)
 800318e:	f7fe fddc 	bl	8001d4a <HAL_SPI_Init>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	bf14      	ite	ne
 8003198:	2301      	movne	r3, #1
 800319a:	2300      	moveq	r3, #0
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80031a2:	f000 fa21 	bl	80035e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031a6:	bf00      	nop
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	20000098 	.word	0x20000098
 80031b0:	40013000 	.word	0x40013000

080031b4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b092      	sub	sp, #72	; 0x48
 80031b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80031be:	2200      	movs	r2, #0
 80031c0:	601a      	str	r2, [r3, #0]
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	609a      	str	r2, [r3, #8]
 80031c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]
 80031d0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80031d2:	f107 0320 	add.w	r3, r7, #32
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031e0:	1d3b      	adds	r3, r7, #4
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	605a      	str	r2, [r3, #4]
 80031e8:	609a      	str	r2, [r3, #8]
 80031ea:	60da      	str	r2, [r3, #12]
 80031ec:	611a      	str	r2, [r3, #16]
 80031ee:	615a      	str	r2, [r3, #20]
 80031f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031f2:	4b4a      	ldr	r3, [pc, #296]	; (800331c <_ZL12MX_TIM2_Initv+0x168>)
 80031f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80031fa:	4b48      	ldr	r3, [pc, #288]	; (800331c <_ZL12MX_TIM2_Initv+0x168>)
 80031fc:	220f      	movs	r2, #15
 80031fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003200:	4b46      	ldr	r3, [pc, #280]	; (800331c <_ZL12MX_TIM2_Initv+0x168>)
 8003202:	2200      	movs	r2, #0
 8003204:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000000000UL;
 8003206:	4b45      	ldr	r3, [pc, #276]	; (800331c <_ZL12MX_TIM2_Initv+0x168>)
 8003208:	4a45      	ldr	r2, [pc, #276]	; (8003320 <_ZL12MX_TIM2_Initv+0x16c>)
 800320a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800320c:	4b43      	ldr	r3, [pc, #268]	; (800331c <_ZL12MX_TIM2_Initv+0x168>)
 800320e:	2200      	movs	r2, #0
 8003210:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003212:	4842      	ldr	r0, [pc, #264]	; (800331c <_ZL12MX_TIM2_Initv+0x168>)
 8003214:	f7ff f99a 	bl	800254c <HAL_TIM_Base_Init>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	bf14      	ite	ne
 800321e:	2301      	movne	r3, #1
 8003220:	2300      	moveq	r3, #0
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d001      	beq.n	800322c <_ZL12MX_TIM2_Initv+0x78>
  {
    Error_Handler();
 8003228:	f000 f9de 	bl	80035e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800322c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003230:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003232:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003236:	4619      	mov	r1, r3
 8003238:	4838      	ldr	r0, [pc, #224]	; (800331c <_ZL12MX_TIM2_Initv+0x168>)
 800323a:	f7fe ffa5 	bl	8002188 <HAL_TIM_ConfigClockSource>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	bf14      	ite	ne
 8003244:	2301      	movne	r3, #1
 8003246:	2300      	moveq	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <_ZL12MX_TIM2_Initv+0x9e>
  {
    Error_Handler();
 800324e:	f000 f9cb 	bl	80035e8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003252:	4832      	ldr	r0, [pc, #200]	; (800331c <_ZL12MX_TIM2_Initv+0x168>)
 8003254:	f7ff f9ae 	bl	80025b4 <HAL_TIM_IC_Init>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	bf14      	ite	ne
 800325e:	2301      	movne	r3, #1
 8003260:	2300      	moveq	r3, #0
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <_ZL12MX_TIM2_Initv+0xb8>
  {
    Error_Handler();
 8003268:	f000 f9be 	bl	80035e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800326c:	482b      	ldr	r0, [pc, #172]	; (800331c <_ZL12MX_TIM2_Initv+0x168>)
 800326e:	f7ff f987 	bl	8002580 <HAL_TIM_OC_Init>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	bf14      	ite	ne
 8003278:	2301      	movne	r3, #1
 800327a:	2300      	moveq	r3, #0
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <_ZL12MX_TIM2_Initv+0xd2>
  {
    Error_Handler();
 8003282:	f000 f9b1 	bl	80035e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003286:	2300      	movs	r3, #0
 8003288:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800328e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003292:	4619      	mov	r1, r3
 8003294:	4821      	ldr	r0, [pc, #132]	; (800331c <_ZL12MX_TIM2_Initv+0x168>)
 8003296:	f7ff fb71 	bl	800297c <HAL_TIMEx_MasterConfigSynchronization>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	bf14      	ite	ne
 80032a0:	2301      	movne	r3, #1
 80032a2:	2300      	moveq	r3, #0
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <_ZL12MX_TIM2_Initv+0xfa>
  {
    Error_Handler();
 80032aa:	f000 f99d 	bl	80035e8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80032ae:	2300      	movs	r3, #0
 80032b0:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80032b2:	2301      	movs	r3, #1
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80032b6:	2300      	movs	r3, #0
 80032b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80032be:	f107 0320 	add.w	r3, r7, #32
 80032c2:	2200      	movs	r2, #0
 80032c4:	4619      	mov	r1, r3
 80032c6:	4815      	ldr	r0, [pc, #84]	; (800331c <_ZL12MX_TIM2_Initv+0x168>)
 80032c8:	f7ff f9c8 	bl	800265c <HAL_TIM_IC_ConfigChannel>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	bf14      	ite	ne
 80032d2:	2301      	movne	r3, #1
 80032d4:	2300      	moveq	r3, #0
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <_ZL12MX_TIM2_Initv+0x12c>
  {
    Error_Handler();
 80032dc:	f000 f984 	bl	80035e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80032e0:	2300      	movs	r3, #0
 80032e2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 80032e4:	f242 7310 	movw	r3, #10000	; 0x2710
 80032e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032f2:	1d3b      	adds	r3, r7, #4
 80032f4:	2204      	movs	r2, #4
 80032f6:	4619      	mov	r1, r3
 80032f8:	4808      	ldr	r0, [pc, #32]	; (800331c <_ZL12MX_TIM2_Initv+0x168>)
 80032fa:	f7ff fa67 	bl	80027cc <HAL_TIM_OC_ConfigChannel>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	bf14      	ite	ne
 8003304:	2301      	movne	r3, #1
 8003306:	2300      	moveq	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <_ZL12MX_TIM2_Initv+0x15e>
  {
    Error_Handler();
 800330e:	f000 f96b 	bl	80035e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003312:	bf00      	nop
 8003314:	3748      	adds	r7, #72	; 0x48
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	200000f0 	.word	0x200000f0
 8003320:	ee6b2800 	.word	0xee6b2800

08003324 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b092      	sub	sp, #72	; 0x48
 8003328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800332a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	605a      	str	r2, [r3, #4]
 8003334:	609a      	str	r2, [r3, #8]
 8003336:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8003338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	60da      	str	r2, [r3, #12]
 8003346:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003348:	f107 031c 	add.w	r3, r7, #28
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]
 8003350:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003352:	463b      	mov	r3, r7
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	609a      	str	r2, [r3, #8]
 800335c:	60da      	str	r2, [r3, #12]
 800335e:	611a      	str	r2, [r3, #16]
 8003360:	615a      	str	r2, [r3, #20]
 8003362:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003364:	4b40      	ldr	r3, [pc, #256]	; (8003468 <_ZL12MX_TIM5_Initv+0x144>)
 8003366:	4a41      	ldr	r2, [pc, #260]	; (800346c <_ZL12MX_TIM5_Initv+0x148>)
 8003368:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 800336a:	4b3f      	ldr	r3, [pc, #252]	; (8003468 <_ZL12MX_TIM5_Initv+0x144>)
 800336c:	220f      	movs	r2, #15
 800336e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003370:	4b3d      	ldr	r3, [pc, #244]	; (8003468 <_ZL12MX_TIM5_Initv+0x144>)
 8003372:	2200      	movs	r2, #0
 8003374:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4000000000UL;
 8003376:	4b3c      	ldr	r3, [pc, #240]	; (8003468 <_ZL12MX_TIM5_Initv+0x144>)
 8003378:	4a3d      	ldr	r2, [pc, #244]	; (8003470 <_ZL12MX_TIM5_Initv+0x14c>)
 800337a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800337c:	4b3a      	ldr	r3, [pc, #232]	; (8003468 <_ZL12MX_TIM5_Initv+0x144>)
 800337e:	2200      	movs	r2, #0
 8003380:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003382:	4839      	ldr	r0, [pc, #228]	; (8003468 <_ZL12MX_TIM5_Initv+0x144>)
 8003384:	f7ff f8e2 	bl	800254c <HAL_TIM_Base_Init>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	bf14      	ite	ne
 800338e:	2301      	movne	r3, #1
 8003390:	2300      	moveq	r3, #0
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d001      	beq.n	800339c <_ZL12MX_TIM5_Initv+0x78>
  {
    Error_Handler();
 8003398:	f000 f926 	bl	80035e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800339c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033a0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80033a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80033a6:	4619      	mov	r1, r3
 80033a8:	482f      	ldr	r0, [pc, #188]	; (8003468 <_ZL12MX_TIM5_Initv+0x144>)
 80033aa:	f7fe feed 	bl	8002188 <HAL_TIM_ConfigClockSource>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf14      	ite	ne
 80033b4:	2301      	movne	r3, #1
 80033b6:	2300      	moveq	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <_ZL12MX_TIM5_Initv+0x9e>
  {
    Error_Handler();
 80033be:	f000 f913 	bl	80035e8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 80033c2:	4829      	ldr	r0, [pc, #164]	; (8003468 <_ZL12MX_TIM5_Initv+0x144>)
 80033c4:	f7ff f8dc 	bl	8002580 <HAL_TIM_OC_Init>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	bf14      	ite	ne
 80033ce:	2301      	movne	r3, #1
 80033d0:	2300      	moveq	r3, #0
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <_ZL12MX_TIM5_Initv+0xb8>
  {
    Error_Handler();
 80033d8:	f000 f906 	bl	80035e8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80033dc:	2304      	movs	r3, #4
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchronization(&htim5, &sSlaveConfig) != HAL_OK)
 80033e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033e8:	4619      	mov	r1, r3
 80033ea:	481f      	ldr	r0, [pc, #124]	; (8003468 <_ZL12MX_TIM5_Initv+0x144>)
 80033ec:	f7fe ff85 	bl	80022fa <HAL_TIM_SlaveConfigSynchronization>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	bf14      	ite	ne
 80033f6:	2301      	movne	r3, #1
 80033f8:	2300      	moveq	r3, #0
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <_ZL12MX_TIM5_Initv+0xe0>
  {
    Error_Handler();
 8003400:	f000 f8f2 	bl	80035e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003404:	2300      	movs	r3, #0
 8003406:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003408:	2300      	movs	r3, #0
 800340a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800340c:	f107 031c 	add.w	r3, r7, #28
 8003410:	4619      	mov	r1, r3
 8003412:	4815      	ldr	r0, [pc, #84]	; (8003468 <_ZL12MX_TIM5_Initv+0x144>)
 8003414:	f7ff fab2 	bl	800297c <HAL_TIMEx_MasterConfigSynchronization>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	bf14      	ite	ne
 800341e:	2301      	movne	r3, #1
 8003420:	2300      	moveq	r3, #0
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <_ZL12MX_TIM5_Initv+0x108>
  {
    Error_Handler();
 8003428:	f000 f8de 	bl	80035e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800342c:	2300      	movs	r3, #0
 800342e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000;
 8003430:	f242 7310 	movw	r3, #10000	; 0x2710
 8003434:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003436:	2300      	movs	r3, #0
 8003438:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800343a:	2300      	movs	r3, #0
 800343c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800343e:	463b      	mov	r3, r7
 8003440:	2204      	movs	r2, #4
 8003442:	4619      	mov	r1, r3
 8003444:	4808      	ldr	r0, [pc, #32]	; (8003468 <_ZL12MX_TIM5_Initv+0x144>)
 8003446:	f7ff f9c1 	bl	80027cc <HAL_TIM_OC_ConfigChannel>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	bf14      	ite	ne
 8003450:	2301      	movne	r3, #1
 8003452:	2300      	moveq	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <_ZL12MX_TIM5_Initv+0x13a>
  {
    Error_Handler();
 800345a:	f000 f8c5 	bl	80035e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800345e:	bf00      	nop
 8003460:	3748      	adds	r7, #72	; 0x48
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	2000012c 	.word	0x2000012c
 800346c:	40000c00 	.word	0x40000c00
 8003470:	ee6b2800 	.word	0xee6b2800

08003474 <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003478:	4b0f      	ldr	r3, [pc, #60]	; (80034b8 <_ZL13MX_TIM10_Initv+0x44>)
 800347a:	4a10      	ldr	r2, [pc, #64]	; (80034bc <_ZL13MX_TIM10_Initv+0x48>)
 800347c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16;
 800347e:	4b0e      	ldr	r3, [pc, #56]	; (80034b8 <_ZL13MX_TIM10_Initv+0x44>)
 8003480:	2210      	movs	r2, #16
 8003482:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003484:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <_ZL13MX_TIM10_Initv+0x44>)
 8003486:	2200      	movs	r2, #0
 8003488:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 800348a:	4b0b      	ldr	r3, [pc, #44]	; (80034b8 <_ZL13MX_TIM10_Initv+0x44>)
 800348c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003490:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003492:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <_ZL13MX_TIM10_Initv+0x44>)
 8003494:	2200      	movs	r2, #0
 8003496:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003498:	4807      	ldr	r0, [pc, #28]	; (80034b8 <_ZL13MX_TIM10_Initv+0x44>)
 800349a:	f7ff f857 	bl	800254c <HAL_TIM_Base_Init>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf14      	ite	ne
 80034a4:	2301      	movne	r3, #1
 80034a6:	2300      	moveq	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <_ZL13MX_TIM10_Initv+0x3e>
  {
    Error_Handler();
 80034ae:	f000 f89b 	bl	80035e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000168 	.word	0x20000168
 80034bc:	40014400 	.word	0x40014400

080034c0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034c4:	4b13      	ldr	r3, [pc, #76]	; (8003514 <_ZL19MX_USART2_UART_Initv+0x54>)
 80034c6:	4a14      	ldr	r2, [pc, #80]	; (8003518 <_ZL19MX_USART2_UART_Initv+0x58>)
 80034c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80034ca:	4b12      	ldr	r3, [pc, #72]	; (8003514 <_ZL19MX_USART2_UART_Initv+0x54>)
 80034cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80034d2:	4b10      	ldr	r3, [pc, #64]	; (8003514 <_ZL19MX_USART2_UART_Initv+0x54>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80034d8:	4b0e      	ldr	r3, [pc, #56]	; (8003514 <_ZL19MX_USART2_UART_Initv+0x54>)
 80034da:	2200      	movs	r2, #0
 80034dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80034de:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <_ZL19MX_USART2_UART_Initv+0x54>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <_ZL19MX_USART2_UART_Initv+0x54>)
 80034e6:	220c      	movs	r2, #12
 80034e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034ea:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <_ZL19MX_USART2_UART_Initv+0x54>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80034f0:	4b08      	ldr	r3, [pc, #32]	; (8003514 <_ZL19MX_USART2_UART_Initv+0x54>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80034f6:	4807      	ldr	r0, [pc, #28]	; (8003514 <_ZL19MX_USART2_UART_Initv+0x54>)
 80034f8:	f7ff fba6 	bl	8002c48 <HAL_UART_Init>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	bf14      	ite	ne
 8003502:	2301      	movne	r3, #1
 8003504:	2300      	moveq	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800350c:	f000 f86c 	bl	80035e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003510:	bf00      	nop
 8003512:	bd80      	pop	{r7, pc}
 8003514:	200001a4 	.word	0x200001a4
 8003518:	40004400 	.word	0x40004400

0800351c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003522:	f107 030c 	add.w	r3, r7, #12
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	605a      	str	r2, [r3, #4]
 800352c:	609a      	str	r2, [r3, #8]
 800352e:	60da      	str	r2, [r3, #12]
 8003530:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	4a29      	ldr	r2, [pc, #164]	; (80035dc <_ZL12MX_GPIO_Initv+0xc0>)
 8003538:	4b28      	ldr	r3, [pc, #160]	; (80035dc <_ZL12MX_GPIO_Initv+0xc0>)
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353c:	f043 0304 	orr.w	r3, r3, #4
 8003540:	6313      	str	r3, [r2, #48]	; 0x30
 8003542:	4b26      	ldr	r3, [pc, #152]	; (80035dc <_ZL12MX_GPIO_Initv+0xc0>)
 8003544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003546:	f003 0304 	and.w	r3, r3, #4
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	4a22      	ldr	r2, [pc, #136]	; (80035dc <_ZL12MX_GPIO_Initv+0xc0>)
 8003554:	4b21      	ldr	r3, [pc, #132]	; (80035dc <_ZL12MX_GPIO_Initv+0xc0>)
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	f043 0301 	orr.w	r3, r3, #1
 800355c:	6313      	str	r3, [r2, #48]	; 0x30
 800355e:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <_ZL12MX_GPIO_Initv+0xc0>)
 8003560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	607b      	str	r3, [r7, #4]
 8003568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800356a:	2300      	movs	r3, #0
 800356c:	603b      	str	r3, [r7, #0]
 800356e:	4a1b      	ldr	r2, [pc, #108]	; (80035dc <_ZL12MX_GPIO_Initv+0xc0>)
 8003570:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <_ZL12MX_GPIO_Initv+0xc0>)
 8003572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003574:	f043 0302 	orr.w	r3, r3, #2
 8003578:	6313      	str	r3, [r2, #48]	; 0x30
 800357a:	4b18      	ldr	r3, [pc, #96]	; (80035dc <_ZL12MX_GPIO_Initv+0xc0>)
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	603b      	str	r3, [r7, #0]
 8003584:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD_Pin|RCLK_Pin|SRCLR_Pin, GPIO_PIN_RESET);
 8003586:	2200      	movs	r2, #0
 8003588:	2131      	movs	r1, #49	; 0x31
 800358a:	4815      	ldr	r0, [pc, #84]	; (80035e0 <_ZL12MX_GPIO_Initv+0xc4>)
 800358c:	f7fe f916 	bl	80017bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin, GPIO_PIN_RESET);
 8003590:	2200      	movs	r2, #0
 8003592:	2117      	movs	r1, #23
 8003594:	4813      	ldr	r0, [pc, #76]	; (80035e4 <_ZL12MX_GPIO_Initv+0xc8>)
 8003596:	f7fe f911 	bl	80017bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD_Pin RCLK_Pin SRCLR_Pin */
  GPIO_InitStruct.Pin = LD_Pin|RCLK_Pin|SRCLR_Pin;
 800359a:	2331      	movs	r3, #49	; 0x31
 800359c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800359e:	2301      	movs	r3, #1
 80035a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035aa:	f107 030c 	add.w	r3, r7, #12
 80035ae:	4619      	mov	r1, r3
 80035b0:	480b      	ldr	r0, [pc, #44]	; (80035e0 <_ZL12MX_GPIO_Initv+0xc4>)
 80035b2:	f7fe f823 	bl	80015fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT1_Pin OUT2_Pin OUT3_Pin OUT4_Pin */
  GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin;
 80035b6:	2317      	movs	r3, #23
 80035b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035ba:	2301      	movs	r3, #1
 80035bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c6:	f107 030c 	add.w	r3, r7, #12
 80035ca:	4619      	mov	r1, r3
 80035cc:	4805      	ldr	r0, [pc, #20]	; (80035e4 <_ZL12MX_GPIO_Initv+0xc8>)
 80035ce:	f7fe f815 	bl	80015fc <HAL_GPIO_Init>

}
 80035d2:	bf00      	nop
 80035d4:	3720      	adds	r7, #32
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40023800 	.word	0x40023800
 80035e0:	40020800 	.word	0x40020800
 80035e4:	40020400 	.word	0x40020400

080035e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80035ec:	bf00      	nop
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
	...

080035f8 <_Z41__static_initialization_and_destruction_0ii>:
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d119      	bne.n	800363c <_Z41__static_initialization_and_destruction_0ii+0x44>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800360e:	4293      	cmp	r3, r2
 8003610:	d114      	bne.n	800363c <_Z41__static_initialization_and_destruction_0ii+0x44>
Clock clock;
 8003612:	480c      	ldr	r0, [pc, #48]	; (8003644 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8003614:	f000 f990 	bl	8003938 <_ZN5ClockC1Ev>
 8003618:	4a0b      	ldr	r2, [pc, #44]	; (8003648 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800361a:	490c      	ldr	r1, [pc, #48]	; (800364c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800361c:	4809      	ldr	r0, [pc, #36]	; (8003644 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800361e:	f002 fe82 	bl	8006326 <__aeabi_atexit>
Switches editSwitches(3,4,0,&hspi1);
 8003622:	4b0b      	ldr	r3, [pc, #44]	; (8003650 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003624:	9300      	str	r3, [sp, #0]
 8003626:	2300      	movs	r3, #0
 8003628:	2204      	movs	r2, #4
 800362a:	2103      	movs	r1, #3
 800362c:	4809      	ldr	r0, [pc, #36]	; (8003654 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800362e:	f000 fbaf 	bl	8003d90 <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef>
 8003632:	4a05      	ldr	r2, [pc, #20]	; (8003648 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8003634:	4908      	ldr	r1, [pc, #32]	; (8003658 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003636:	4807      	ldr	r0, [pc, #28]	; (8003654 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003638:	f002 fe75 	bl	8006326 <__aeabi_atexit>
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	200001e4 	.word	0x200001e4
 8003648:	20000000 	.word	0x20000000
 800364c:	08003961 	.word	0x08003961
 8003650:	20000098 	.word	0x20000098
 8003654:	2000025c 	.word	0x2000025c
 8003658:	08003f71 	.word	0x08003f71

0800365c <_GLOBAL__sub_I_hspi1>:
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
 8003660:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003664:	2001      	movs	r0, #1
 8003666:	f7ff ffc7 	bl	80035f8 <_Z41__static_initialization_and_destruction_0ii>
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800366c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800366e:	4b0c      	ldr	r3, [pc, #48]	; (80036a0 <HAL_MspInit+0x34>)
 8003670:	2100      	movs	r1, #0
 8003672:	9100      	str	r1, [sp, #0]
 8003674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003676:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800367a:	645a      	str	r2, [r3, #68]	; 0x44
 800367c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800367e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003682:	9200      	str	r2, [sp, #0]
 8003684:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003686:	9101      	str	r1, [sp, #4]
 8003688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800368a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800368e:	641a      	str	r2, [r3, #64]	; 0x40
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003696:	9301      	str	r3, [sp, #4]
 8003698:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800369a:	b002      	add	sp, #8
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800

080036a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80036a4:	b510      	push	{r4, lr}
 80036a6:	4604      	mov	r4, r0
 80036a8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036aa:	2214      	movs	r2, #20
 80036ac:	2100      	movs	r1, #0
 80036ae:	a803      	add	r0, sp, #12
 80036b0:	f003 fd93 	bl	80071da <memset>
  if(hspi->Instance==SPI1)
 80036b4:	6822      	ldr	r2, [r4, #0]
 80036b6:	4b14      	ldr	r3, [pc, #80]	; (8003708 <HAL_SPI_MspInit+0x64>)
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d122      	bne.n	8003702 <HAL_SPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036bc:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80036c0:	2100      	movs	r1, #0
 80036c2:	9101      	str	r1, [sp, #4]
 80036c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c6:	4811      	ldr	r0, [pc, #68]	; (800370c <HAL_SPI_MspInit+0x68>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80036c8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80036cc:	645a      	str	r2, [r3, #68]	; 0x44
 80036ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80036d4:	9201      	str	r2, [sp, #4]
 80036d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d8:	9102      	str	r1, [sp, #8]
 80036da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036dc:	f042 0201 	orr.w	r2, r2, #1
 80036e0:	631a      	str	r2, [r3, #48]	; 0x30
 80036e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	9302      	str	r3, [sp, #8]
 80036ea:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80036ec:	23e0      	movs	r3, #224	; 0xe0
 80036ee:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f0:	2302      	movs	r3, #2
 80036f2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036f4:	2303      	movs	r3, #3
 80036f6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036f8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80036fa:	2305      	movs	r3, #5
 80036fc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036fe:	f7fd ff7d 	bl	80015fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003702:	b008      	add	sp, #32
 8003704:	bd10      	pop	{r4, pc}
 8003706:	bf00      	nop
 8003708:	40013000 	.word	0x40013000
 800370c:	40020000 	.word	0x40020000

08003710 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003710:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003712:	2214      	movs	r2, #20
{
 8003714:	b08a      	sub	sp, #40	; 0x28
 8003716:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003718:	2100      	movs	r1, #0
 800371a:	eb0d 0002 	add.w	r0, sp, r2
 800371e:	f003 fd5c 	bl	80071da <memset>
  if(htim_base->Instance==TIM2)
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003728:	d129      	bne.n	800377e <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800372a:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800372e:	2400      	movs	r4, #0
 8003730:	9401      	str	r4, [sp, #4]
 8003732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003734:	4827      	ldr	r0, [pc, #156]	; (80037d4 <HAL_TIM_Base_MspInit+0xc4>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	641a      	str	r2, [r3, #64]	; 0x40
 800373c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800373e:	f002 0201 	and.w	r2, r2, #1
 8003742:	9201      	str	r2, [sp, #4]
 8003744:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003746:	9402      	str	r4, [sp, #8]
 8003748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003758:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800375a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375c:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800375e:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003760:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003762:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003764:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003766:	f7fd ff49 	bl	80015fc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800376a:	201c      	movs	r0, #28
 800376c:	4622      	mov	r2, r4
 800376e:	4621      	mov	r1, r4
 8003770:	f7fd feee 	bl	8001550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003774:	201c      	movs	r0, #28
  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 6, 0);
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003776:	f7fd ff1f 	bl	80015b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800377a:	b00a      	add	sp, #40	; 0x28
 800377c:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM5)
 800377e:	4a16      	ldr	r2, [pc, #88]	; (80037d8 <HAL_TIM_Base_MspInit+0xc8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d111      	bne.n	80037a8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003784:	4b15      	ldr	r3, [pc, #84]	; (80037dc <HAL_TIM_Base_MspInit+0xcc>)
 8003786:	2200      	movs	r2, #0
 8003788:	9203      	str	r2, [sp, #12]
 800378a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800378c:	f041 0108 	orr.w	r1, r1, #8
 8003790:	6419      	str	r1, [r3, #64]	; 0x40
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	f003 0308 	and.w	r3, r3, #8
 8003798:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 800379a:	2032      	movs	r0, #50	; 0x32
 800379c:	2101      	movs	r1, #1
    __HAL_RCC_TIM5_CLK_ENABLE();
 800379e:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 80037a0:	f7fd fed6 	bl	8001550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80037a4:	2032      	movs	r0, #50	; 0x32
 80037a6:	e7e6      	b.n	8003776 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 80037a8:	4a0d      	ldr	r2, [pc, #52]	; (80037e0 <HAL_TIM_Base_MspInit+0xd0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d1e5      	bne.n	800377a <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80037ae:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_TIM_Base_MspInit+0xcc>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	9204      	str	r2, [sp, #16]
 80037b4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80037b6:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 80037ba:	6459      	str	r1, [r3, #68]	; 0x44
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 6, 0);
 80037c4:	2019      	movs	r0, #25
 80037c6:	2106      	movs	r1, #6
    __HAL_RCC_TIM10_CLK_ENABLE();
 80037c8:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 6, 0);
 80037ca:	f7fd fec1 	bl	8001550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80037ce:	2019      	movs	r0, #25
 80037d0:	e7d1      	b.n	8003776 <HAL_TIM_Base_MspInit+0x66>
 80037d2:	bf00      	nop
 80037d4:	40020000 	.word	0x40020000
 80037d8:	40000c00 	.word	0x40000c00
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40014400 	.word	0x40014400

080037e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037e4:	b510      	push	{r4, lr}
 80037e6:	4604      	mov	r4, r0
 80037e8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037ea:	2214      	movs	r2, #20
 80037ec:	2100      	movs	r1, #0
 80037ee:	a803      	add	r0, sp, #12
 80037f0:	f003 fcf3 	bl	80071da <memset>
  if(huart->Instance==USART2)
 80037f4:	6822      	ldr	r2, [r4, #0]
 80037f6:	4b15      	ldr	r3, [pc, #84]	; (800384c <HAL_UART_MspInit+0x68>)
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d124      	bne.n	8003846 <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037fc:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8003800:	2100      	movs	r1, #0
 8003802:	9101      	str	r1, [sp, #4]
 8003804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003806:	4812      	ldr	r0, [pc, #72]	; (8003850 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003808:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800380c:	641a      	str	r2, [r3, #64]	; 0x40
 800380e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003810:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003814:	9201      	str	r2, [sp, #4]
 8003816:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003818:	9102      	str	r1, [sp, #8]
 800381a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800381c:	f042 0201 	orr.w	r2, r2, #1
 8003820:	631a      	str	r2, [r3, #48]	; 0x30
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	9302      	str	r3, [sp, #8]
 800382a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800382c:	230c      	movs	r3, #12
 800382e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003830:	2302      	movs	r3, #2
 8003832:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003834:	2301      	movs	r3, #1
 8003836:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003838:	2303      	movs	r3, #3
 800383a:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800383e:	2307      	movs	r3, #7
 8003840:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003842:	f7fd fedb 	bl	80015fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003846:	b008      	add	sp, #32
 8003848:	bd10      	pop	{r4, pc}
 800384a:	bf00      	nop
 800384c:	40004400 	.word	0x40004400
 8003850:	40020000 	.word	0x40020000

08003854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003854:	b480      	push	{r7}
 8003856:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003858:	bf00      	nop
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003862:	b480      	push	{r7}
 8003864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003866:	e7fe      	b.n	8003866 <HardFault_Handler+0x4>

08003868 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800386c:	e7fe      	b.n	800386c <MemManage_Handler+0x4>

0800386e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800386e:	b480      	push	{r7}
 8003870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003872:	e7fe      	b.n	8003872 <BusFault_Handler+0x4>

08003874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003878:	e7fe      	b.n	8003878 <UsageFault_Handler+0x4>

0800387a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800387a:	b480      	push	{r7}
 800387c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800387e:	bf00      	nop
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003896:	b480      	push	{r7}
 8003898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0




  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80038a8:	f7fd fe2e 	bl	8001508 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80038ac:	bf00      	nop
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80038b4:	4802      	ldr	r0, [pc, #8]	; (80038c0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80038b6:	f7fe fd42 	bl	800233e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80038ba:	bf00      	nop
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000168 	.word	0x20000168

080038c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80038c8:	4802      	ldr	r0, [pc, #8]	; (80038d4 <TIM2_IRQHandler+0x10>)
 80038ca:	f7fe fd38 	bl	800233e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // htim5.Instance->CCR2=htim2.Instance->CCR1/2;

  /* USER CODE END TIM2_IRQn 1 */
}
 80038ce:	bf00      	nop
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	200000f0 	.word	0x200000f0

080038d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  // HAL_GPIO_TogglePin(OUT3_GPIO_Port,OUT3_Pin);
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80038dc:	4802      	ldr	r0, [pc, #8]	; (80038e8 <TIM5_IRQHandler+0x10>)
 80038de:	f7fe fd2e 	bl	800233e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80038e2:	bf00      	nop
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	2000012c 	.word	0x2000012c

080038ec <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038ec:	490f      	ldr	r1, [pc, #60]	; (800392c <SystemInit+0x40>)
 80038ee:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80038f2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80038fa:	4b0d      	ldr	r3, [pc, #52]	; (8003930 <SystemInit+0x44>)
 80038fc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80038fe:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003900:	f042 0201 	orr.w	r2, r2, #1
 8003904:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8003906:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800390e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003912:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003914:	4a07      	ldr	r2, [pc, #28]	; (8003934 <SystemInit+0x48>)
 8003916:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800391e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003920:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003922:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003926:	608b      	str	r3, [r1, #8]
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	e000ed00 	.word	0xe000ed00
 8003930:	40023800 	.word	0x40023800
 8003934:	24003010 	.word	0x24003010

08003938 <_ZN5ClockC1Ev>:
 */
#include "clock.hpp"
#include "stm32f4xx.h"

// Constructor
Clock::Clock(){
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
	averagingWindow = 8;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2208      	movs	r2, #8
 8003944:	625a      	str	r2, [r3, #36]	; 0x24
	acceptableOutlierPercentage = 0.2;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a04      	ldr	r2, [pc, #16]	; (800395c <_ZN5ClockC1Ev+0x24>)
 800394a:	62da      	str	r2, [r3, #44]	; 0x2c
	;
}
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4618      	mov	r0, r3
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	3e4ccccd 	.word	0x3e4ccccd

08003960 <_ZN5ClockD1Ev>:
// Destructor
Clock::~Clock(void){
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	;
}
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <_ZN5Clock15addPeriodSampleEj>:
//
unsigned int Clock::addPeriodSample(unsigned int periodSample){
 8003976:	b480      	push	{r7}
 8003978:	b089      	sub	sp, #36	; 0x24
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]

	// If the sample buffer has not overflown and this is one of the first samples always add it
	if((sampleIndex  == 0) && (sampleBufferFull == false)){
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003984:	2b00      	cmp	r3, #0
 8003986:	d124      	bne.n	80039d2 <_ZN5Clock15addPeriodSampleEj+0x5c>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800398e:	2b00      	cmp	r3, #0
 8003990:	d11f      	bne.n	80039d2 <_ZN5Clock15addPeriodSampleEj+0x5c>
		sampleBuffer[sampleIndex] = periodSample;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	320e      	adds	r2, #14
 800399a:	6839      	ldr	r1, [r7, #0]
 800399c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		acceptableDeviation = periodSample*acceptableOutlierPercentage;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80039b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039b8:	ee17 2a90 	vmov	r2, s15
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	631a      	str	r2, [r3, #48]	; 0x30
		averagedPeriod = periodSample;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	683a      	ldr	r2, [r7, #0]
 80039c4:	61da      	str	r2, [r3, #28]
		sampleIndex++;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	629a      	str	r2, [r3, #40]	; 0x28
 80039d0:	e057      	b.n	8003a82 <_ZN5Clock15addPeriodSampleEj+0x10c>
	}
	else if(sampleIndex < averagingWindow){
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	429a      	cmp	r2, r3
 80039dc:	da3e      	bge.n	8003a5c <_ZN5Clock15addPeriodSampleEj+0xe6>
		// Check if the sample falls within the acceptable deviation bounds
		if(((periodSample+acceptableDeviation)>averagedPeriod)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e2:	461a      	mov	r2, r3
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	441a      	add	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d915      	bls.n	8003a1c <_ZN5Clock15addPeriodSampleEj+0xa6>
			&& ((periodSample-acceptableDeviation)<averagedPeriod)){
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f4:	461a      	mov	r2, r3
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	1a9a      	subs	r2, r3, r2
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d20c      	bcs.n	8003a1c <_ZN5Clock15addPeriodSampleEj+0xa6>

			// Add the sampled clock period to the cyclic buffer
			sampleBuffer[sampleIndex] = periodSample;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	320e      	adds	r2, #14
 8003a0a:	6839      	ldr	r1, [r7, #0]
 8003a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			sampleIndex++;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	629a      	str	r2, [r3, #40]	; 0x28
 8003a1a:	e032      	b.n	8003a82 <_ZN5Clock15addPeriodSampleEj+0x10c>
		}
		else{
			// Reset the buffer, store the sample anyway.
			sampleIndex = 0; sampleBufferFull = false;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	629a      	str	r2, [r3, #40]	; 0x28
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			for(int i = 0; i < averagingWindow; i++){
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	61fb      	str	r3, [r7, #28]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	dd09      	ble.n	8003a4c <_ZN5Clock15addPeriodSampleEj+0xd6>
				sampleBuffer[i] = 0;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	69fa      	ldr	r2, [r7, #28]
 8003a3c:	320e      	adds	r2, #14
 8003a3e:	2100      	movs	r1, #0
 8003a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(int i = 0; i < averagingWindow; i++){
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	3301      	adds	r3, #1
 8003a48:	61fb      	str	r3, [r7, #28]
 8003a4a:	e7f0      	b.n	8003a2e <_ZN5Clock15addPeriodSampleEj+0xb8>
			}
			sampleBuffer[sampleIndex] = periodSample;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	320e      	adds	r2, #14
 8003a54:	6839      	ldr	r1, [r7, #0]
 8003a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003a5a:	e012      	b.n	8003a82 <_ZN5Clock15addPeriodSampleEj+0x10c>
			// sampleIndex++;
		}
	}
	else{sampleIndex = 0; sampleBufferFull = true;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	629a      	str	r2, [r3, #40]	; 0x28
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			sampleBuffer[sampleIndex] = periodSample;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	320e      	adds	r2, #14
 8003a72:	6839      	ldr	r1, [r7, #0]
 8003a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			sampleIndex++;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	629a      	str	r2, [r3, #40]	; 0x28
	}

	// Check if there is more than 1 sample, then average and calculate bounds. If there is only 1 sample return false.
	// We need 2 edges to capture a period length...
	if(sampleBufferFull){
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d030      	beq.n	8003aee <_ZN5Clock15addPeriodSampleEj+0x178>
		unsigned int temp = 0;
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	61bb      	str	r3, [r7, #24]
		for(int i = 0; i < averagingWindow ; i++){
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	dd0b      	ble.n	8003ab6 <_ZN5Clock15addPeriodSampleEj+0x140>
			temp+=sampleBuffer[i];
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	320e      	adds	r2, #14
 8003aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4413      	add	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
		for(int i = 0; i < averagingWindow ; i++){
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	617b      	str	r3, [r7, #20]
 8003ab4:	e7ee      	b.n	8003a94 <_ZN5Clock15addPeriodSampleEj+0x11e>
		}
		averagedPeriod = temp/(averagingWindow);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aba:	461a      	mov	r2, r3
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	fbb3 f2f2 	udiv	r2, r3, r2
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	61da      	str	r2, [r3, #28]

		// Calculate the bounds for the next sample<
		acceptableDeviation = averagedPeriod*acceptableOutlierPercentage;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	ee07 3a90 	vmov	s15, r3
 8003ace:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003ad8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003ae0:	ee17 2a90 	vmov	r2, s15
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30
		return averagedPeriod;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	69db      	ldr	r3, [r3, #28]
 8003aec:	e035      	b.n	8003b5a <_ZN5Clock15addPeriodSampleEj+0x1e4>
	}
	else if(sampleIndex > 0){
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	dd30      	ble.n	8003b58 <_ZN5Clock15addPeriodSampleEj+0x1e2>
		unsigned int temp = 0;
 8003af6:	2300      	movs	r3, #0
 8003af8:	613b      	str	r3, [r7, #16]
		for(int i = 0; i < sampleIndex; i++){
 8003afa:	2300      	movs	r3, #0
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	dd0b      	ble.n	8003b20 <_ZN5Clock15addPeriodSampleEj+0x1aa>
			temp+=sampleBuffer[i];
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	320e      	adds	r2, #14
 8003b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4413      	add	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
		for(int i = 0; i < sampleIndex; i++){
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	e7ee      	b.n	8003afe <_ZN5Clock15addPeriodSampleEj+0x188>
		}
		averagedPeriod = temp/(sampleIndex);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	461a      	mov	r2, r3
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	fbb3 f2f2 	udiv	r2, r3, r2
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	61da      	str	r2, [r3, #28]

		acceptableDeviation = averagedPeriod*acceptableOutlierPercentage;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	ee07 3a90 	vmov	s15, r3
 8003b38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8003b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b4a:	ee17 2a90 	vmov	r2, s15
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	631a      	str	r2, [r3, #48]	; 0x30
		return averagedPeriod;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69db      	ldr	r3, [r3, #28]
 8003b56:	e000      	b.n	8003b5a <_ZN5Clock15addPeriodSampleEj+0x1e4>
	}
	else{
		// If only 1 sample has been captured:

		return 0;
 8003b58:	2300      	movs	r3, #0
	}
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3724      	adds	r7, #36	; 0x24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <_ZN5Clock10masterTickEv>:
void Clock::masterTick(void){
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
	master++;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	615a      	str	r2, [r3, #20]
	sub = 0;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	619a      	str	r2, [r3, #24]
}
 8003b7e:	bf00      	nop
 8003b80:	370c      	adds	r7, #12
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr

08003b8a <_ZN5Clock7subTickEv>:
void Clock::subTick(void){
 8003b8a:	b480      	push	{r7}
 8003b8c:	b083      	sub	sp, #12
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	6078      	str	r0, [r7, #4]
	if(++sub < subDiv){
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	3301      	adds	r3, #1
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6193      	str	r3, [r2, #24]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6912      	ldr	r2, [r2, #16]
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	bf34      	ite	cc
 8003ba4:	2301      	movcc	r3, #1
 8003ba6:	2300      	movcs	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d103      	bne.n	8003bb6 <_ZN5Clock7subTickEv+0x2c>
	}
	else{
	   sub = subDiv;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691a      	ldr	r2, [r3, #16]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	619a      	str	r2, [r3, #24]
	}
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <_ZN5Clock8setTimerEP17TIM_HandleTypeDefS1_>:
// This should happen in the constructor!
void Clock::setTimer(TIM_HandleTypeDef* master, TIM_HandleTypeDef* slave){
 8003bc2:	b480      	push	{r7}
 8003bc4:	b085      	sub	sp, #20
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
	masterTimer = master;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	601a      	str	r2, [r3, #0]
	slaveTimer = slave;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	605a      	str	r2, [r3, #4]
}
 8003bda:	bf00      	nop
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <_ZN5Clock4lockEv>:

// Implement averaging routine! and Reset on master pulse.
// Maybe inline these functions!
void Clock::lock(){
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
	if(!lockState){
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	7a5b      	ldrb	r3, [r3, #9]
 8003bf2:	f083 0301 	eor.w	r3, r3, #1
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <_ZN5Clock4lockEv+0x22>
		lockState = true;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	725a      	strb	r2, [r3, #9]
		sub = 0;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	619a      	str	r2, [r3, #24]
	}
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <_ZN5Clock6unlockEv>:
void Clock::unlock(){
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
	lockState = false;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	725a      	strb	r2, [r3, #9]
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <_ZN5Clock8isLockedEv>:
bool Clock::isLocked(void){
 8003c2e:	b480      	push	{r7}
 8003c30:	b083      	sub	sp, #12
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
	return lockState;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	7a5b      	ldrb	r3, [r3, #9]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <_ZN5Clock9setPeriodEj>:
	else if(clockSource == EXTERNAL){
	     period = masterTimer->Instance->CCR1;
	     masterTimer->Instance->CCR2 = period;
	}
}
void Clock::setPeriod(unsigned int value){
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
	if(clockSource == INTERNAL){
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	7a1b      	ldrb	r3, [r3, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d109      	bne.n	8003c6c <_ZN5Clock9setPeriodEj+0x26>
		period = value;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	60da      	str	r2, [r3, #12]
		masterTimer->Instance->CCR2 = period;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	68d2      	ldr	r2, [r2, #12]
 8003c68:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else if(clockSource == EXTERNAL){
		period = value;
		masterTimer->Instance->CCR2 = period;
	}
}
 8003c6a:	e00c      	b.n	8003c86 <_ZN5Clock9setPeriodEj+0x40>
	else if(clockSource == EXTERNAL){
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	7a1b      	ldrb	r3, [r3, #8]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d108      	bne.n	8003c86 <_ZN5Clock9setPeriodEj+0x40>
		period = value;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	60da      	str	r2, [r3, #12]
		masterTimer->Instance->CCR2 = period;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	68d2      	ldr	r2, [r2, #12]
 8003c84:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <_ZN5Clock9setSourceE11ClockSource>:

void Clock::setSource(enum ClockSource source){
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b082      	sub	sp, #8
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	70fb      	strb	r3, [r7, #3]
	clockSource = source;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	721a      	strb	r2, [r3, #8]
	if(source == INTERNAL){
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10c      	bne.n	8003cc4 <_ZN5Clock9setSourceE11ClockSource+0x32>
		// Do not use the external trigger
		HAL_TIM_IC_Stop_IT(masterTimer, TIM_CHANNEL_1);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2100      	movs	r1, #0
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe fe2d 	bl	8002910 <HAL_TIM_IC_Stop_IT>
		HAL_TIM_OC_Start_IT(masterTimer, TIM_CHANNEL_2);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2104      	movs	r1, #4
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fe fdf9 	bl	80028b4 <HAL_TIM_OC_Start_IT>
	else if(source == EXTERNAL){
		HAL_TIM_IC_Start_IT(masterTimer, TIM_CHANNEL_2);
		HAL_TIM_IC_Start_IT(masterTimer, TIM_CHANNEL_1);

	}
}
 8003cc2:	e00e      	b.n	8003ce2 <_ZN5Clock9setSourceE11ClockSource+0x50>
	else if(source == EXTERNAL){
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d10b      	bne.n	8003ce2 <_ZN5Clock9setSourceE11ClockSource+0x50>
		HAL_TIM_IC_Start_IT(masterTimer, TIM_CHANNEL_2);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2104      	movs	r1, #4
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fe fdf1 	bl	80028b8 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start_IT(masterTimer, TIM_CHANNEL_1);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2100      	movs	r1, #0
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fe fdeb 	bl	80028b8 <HAL_TIM_IC_Start_IT>
}
 8003ce2:	bf00      	nop
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <_ZN5Clock16setSlaveDivisionEj>:
volatile unsigned int Clock::getPeriod(void){
	return period;
}

void Clock::setSlaveDivision(unsigned int division){
 8003cea:	b480      	push	{r7}
 8003cec:	b083      	sub	sp, #12
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
 8003cf2:	6039      	str	r1, [r7, #0]
	subDiv = division;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	683a      	ldr	r2, [r7, #0]
 8003cf8:	611a      	str	r2, [r3, #16]
	// Bit hacky, to make sure there are only 'division' amounts of pulses in a period.
	// This may be necessary if a shoddy clock input is used
	slaveTimer->Instance->CNT = 0;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2200      	movs	r2, #0
 8003d02:	625a      	str	r2, [r3, #36]	; 0x24
	slaveTimer->Instance->ARR = (period+50)/subDiv;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68d2      	ldr	r2, [r2, #12]
 8003d0e:	f102 0132 	add.w	r1, r2, #50	; 0x32
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6912      	ldr	r2, [r2, #16]
 8003d16:	fbb1 f2f2 	udiv	r2, r1, r2
 8003d1a:	62da      	str	r2, [r3, #44]	; 0x2c
	slaveTimer->Instance->CCR2 = 1000;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d26:	639a      	str	r2, [r3, #56]	; 0x38

	// slaveTimer->Instance->ARR = ((period)/division);//+(period%division);
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <_ZnwjPv>:
  __attribute__((__externally_visible__));
#endif

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	370c      	adds	r7, #12
 8003d44:	46bd      	mov	sp, r7
 8003d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4a:	4770      	bx	lr

08003d4c <_ZdlPvS_>:
inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }

// Default placement versions of operator delete.
inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
	...

08003d64 <_Z12shiftRegInitv>:


uint8_t ui_spi_in[NUM_OF_REGISTERS];
uint8_t ui_spi_out[NUM_OF_REGISTERS];

void shiftRegInit(void){
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SRCLR_GPIO_Port,SRCLR_Pin,GPIO_PIN_SET);
 8003d68:	2201      	movs	r2, #1
 8003d6a:	2120      	movs	r1, #32
 8003d6c:	4807      	ldr	r0, [pc, #28]	; (8003d8c <_Z12shiftRegInitv+0x28>)
 8003d6e:	f7fd fd25 	bl	80017bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD_GPIO_Port,LD_Pin,GPIO_PIN_SET);
 8003d72:	2201      	movs	r2, #1
 8003d74:	2101      	movs	r1, #1
 8003d76:	4805      	ldr	r0, [pc, #20]	; (8003d8c <_Z12shiftRegInitv+0x28>)
 8003d78:	f7fd fd20 	bl	80017bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RCLK_GPIO_Port, RCLK_Pin,GPIO_PIN_SET);
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	2110      	movs	r1, #16
 8003d80:	4802      	ldr	r0, [pc, #8]	; (8003d8c <_Z12shiftRegInitv+0x28>)
 8003d82:	f7fd fd1b 	bl	80017bc <HAL_GPIO_WritePin>
}
 8003d86:	bf00      	nop
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40020800 	.word	0x40020800

08003d90 <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef>:
// Switch debouncer
Switches::Switches(uint8_t nRegisters, uint8_t nStates, uint8_t srOffset, SPI_HandleTypeDef* spi){
 8003d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d92:	b089      	sub	sp, #36	; 0x24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	4608      	mov	r0, r1
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4603      	mov	r3, r0
 8003da0:	70fb      	strb	r3, [r7, #3]
 8003da2:	460b      	mov	r3, r1
 8003da4:	70bb      	strb	r3, [r7, #2]
 8003da6:	4613      	mov	r3, r2
 8003da8:	707b      	strb	r3, [r7, #1]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	3308      	adds	r3, #8
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fb9a 	bl	80044e8 <_ZNSt6vectorIhSaIhEEC1Ev>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3314      	adds	r3, #20
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fbc4 	bl	8004546 <_ZNSt6vectorIS_IhSaIhEESaIS1_EEC1Ev>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3320      	adds	r3, #32
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f000 fb90 	bl	80044e8 <_ZNSt6vectorIhSaIhEEC1Ev>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	332c      	adds	r3, #44	; 0x2c
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fb8b 	bl	80044e8 <_ZNSt6vectorIhSaIhEEC1Ev>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	3338      	adds	r3, #56	; 0x38
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fb86 	bl	80044e8 <_ZNSt6vectorIhSaIhEEC1Ev>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3344      	adds	r3, #68	; 0x44
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 fb81 	bl	80044e8 <_ZNSt6vectorIhSaIhEEC1Ev>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	3350      	adds	r3, #80	; 0x50
 8003dea:	4618      	mov	r0, r3
 8003dec:	f000 fb7c 	bl	80044e8 <_ZNSt6vectorIhSaIhEEC1Ev>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	335c      	adds	r3, #92	; 0x5c
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 fb77 	bl	80044e8 <_ZNSt6vectorIhSaIhEEC1Ev>
	numOfRegisters = nRegisters;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	78fa      	ldrb	r2, [r7, #3]
 8003dfe:	705a      	strb	r2, [r3, #1]
	numOfStates = nStates;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	78ba      	ldrb	r2, [r7, #2]
 8003e04:	709a      	strb	r2, [r3, #2]
	offset = srOffset;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	787a      	ldrb	r2, [r7, #1]
 8003e0a:	701a      	strb	r2, [r3, #0]

	spi_interface = spi;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e10:	605a      	str	r2, [r3, #4]

	state.resize(numOfRegisters, std::vector<uint8_t>(numOfStates));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f103 0414 	add.w	r4, r3, #20
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	785b      	ldrb	r3, [r3, #1]
 8003e1c:	461d      	mov	r5, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	789b      	ldrb	r3, [r3, #2]
 8003e22:	461e      	mov	r6, r3
 8003e24:	2300      	movs	r3, #0
 8003e26:	76fb      	strb	r3, [r7, #27]
 8003e28:	f107 031c 	add.w	r3, r7, #28
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fbb9 	bl	80045a4 <_ZNSaIhEC1Ev>
 8003e32:	f107 031c 	add.w	r3, r7, #28
 8003e36:	f107 021b 	add.w	r2, r7, #27
 8003e3a:	f107 000c 	add.w	r0, r7, #12
 8003e3e:	4631      	mov	r1, r6
 8003e40:	f000 fbc8 	bl	80045d4 <_ZNSt6vectorIhSaIhEEC1EjRKhRKS0_>
 8003e44:	f107 030c 	add.w	r3, r7, #12
 8003e48:	461a      	mov	r2, r3
 8003e4a:	4629      	mov	r1, r5
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	f000 fc1a 	bl	8004686 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEjS1_>
 8003e52:	f107 030c 	add.w	r3, r7, #12
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fb53 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 8003e5c:	f107 031c 	add.w	r3, r7, #28
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fbab 	bl	80045bc <_ZNSaIhED1Ev>
	debouncedState.resize(numOfRegisters);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f103 0020 	add.w	r0, r3, #32
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	785b      	ldrb	r3, [r3, #1]
 8003e70:	2200      	movs	r2, #0
 8003e72:	4619      	mov	r1, r3
 8003e74:	f000 fc45 	bl	8004702 <_ZNSt6vectorIhSaIhEE6resizeEjh>
	changed.resize(numOfRegisters);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	785b      	ldrb	r3, [r3, #1]
 8003e82:	2200      	movs	r2, #0
 8003e84:	4619      	mov	r1, r3
 8003e86:	f000 fc3c 	bl	8004702 <_ZNSt6vectorIhSaIhEE6resizeEjh>
	index.resize(numOfRegisters);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f103 0008 	add.w	r0, r3, #8
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	785b      	ldrb	r3, [r3, #1]
 8003e94:	2200      	movs	r2, #0
 8003e96:	4619      	mov	r1, r3
 8003e98:	f000 fc33 	bl	8004702 <_ZNSt6vectorIhSaIhEE6resizeEjh>

	holdTimer.resize(numOfRegisters*8);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	785b      	ldrb	r3, [r3, #1]
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f000 fc29 	bl	8004702 <_ZNSt6vectorIhSaIhEE6resizeEjh>

	leds.resize(numOfRegisters);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f103 0044 	add.w	r0, r3, #68	; 0x44
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	785b      	ldrb	r3, [r3, #1]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	f000 fc20 	bl	8004702 <_ZNSt6vectorIhSaIhEE6resizeEjh>
	ledPWM.resize(numOfRegisters*8, 0);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f103 0050 	add.w	r0, r3, #80	; 0x50
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	785b      	ldrb	r3, [r3, #1]
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	2200      	movs	r2, #0
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	f000 fc16 	bl	8004702 <_ZNSt6vectorIhSaIhEE6resizeEjh>
	ledPulse.resize(numOfRegisters*8, 0);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	785b      	ldrb	r3, [r3, #1]
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	f000 fc0c 	bl	8004702 <_ZNSt6vectorIhSaIhEE6resizeEjh>

}
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	e03c      	b.n	8003f68 <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x1d8>
	state.resize(numOfRegisters, std::vector<uint8_t>(numOfStates));
 8003eee:	f107 030c 	add.w	r3, r7, #12
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fb05 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 8003ef8:	e7ff      	b.n	8003efa <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x16a>
 8003efa:	f107 031c 	add.w	r3, r7, #28
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fb5c 	bl	80045bc <_ZNSaIhED1Ev>
 8003f04:	e7ff      	b.n	8003f06 <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x176>
Switches::Switches(uint8_t nRegisters, uint8_t nStates, uint8_t srOffset, SPI_HandleTypeDef* spi){
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	335c      	adds	r3, #92	; 0x5c
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 faf9 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 8003f10:	e7ff      	b.n	8003f12 <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x182>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	3350      	adds	r3, #80	; 0x50
 8003f16:	4618      	mov	r0, r3
 8003f18:	f000 faf3 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 8003f1c:	e7ff      	b.n	8003f1e <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x18e>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3344      	adds	r3, #68	; 0x44
 8003f22:	4618      	mov	r0, r3
 8003f24:	f000 faed 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 8003f28:	e7ff      	b.n	8003f2a <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x19a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	3338      	adds	r3, #56	; 0x38
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fae7 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 8003f34:	e7ff      	b.n	8003f36 <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x1a6>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	332c      	adds	r3, #44	; 0x2c
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fae1 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 8003f40:	e7ff      	b.n	8003f42 <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x1b2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3320      	adds	r3, #32
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fadb 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 8003f4c:	e7ff      	b.n	8003f4e <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x1be>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3314      	adds	r3, #20
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fb04 	bl	8004560 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
 8003f58:	e7ff      	b.n	8003f5a <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x1ca>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 facf 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 8003f64:	f002 fac4 	bl	80064f0 <__cxa_end_cleanup>
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3724      	adds	r7, #36	; 0x24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f70 <_ZN8SwitchesD1Ev>:

Switches::~Switches(void){
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	335c      	adds	r3, #92	; 0x5c
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 fac0 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	3350      	adds	r3, #80	; 0x50
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fabb 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	3344      	adds	r3, #68	; 0x44
 8003f90:	4618      	mov	r0, r3
 8003f92:	f000 fab6 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	3338      	adds	r3, #56	; 0x38
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fab1 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	332c      	adds	r3, #44	; 0x2c
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 faac 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3320      	adds	r3, #32
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 faa7 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3314      	adds	r3, #20
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f000 fad1 	bl	8004560 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3308      	adds	r3, #8
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fa9d 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
	;
}
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	e02a      	b.n	8004022 <_ZN8SwitchesD1Ev+0xb2>
Switches::~Switches(void){
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3350      	adds	r3, #80	; 0x50
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fa96 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 8003fd6:	e7ff      	b.n	8003fd8 <_ZN8SwitchesD1Ev+0x68>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3344      	adds	r3, #68	; 0x44
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 fa90 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 8003fe2:	e7ff      	b.n	8003fe4 <_ZN8SwitchesD1Ev+0x74>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3338      	adds	r3, #56	; 0x38
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fa8a 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 8003fee:	e7ff      	b.n	8003ff0 <_ZN8SwitchesD1Ev+0x80>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	332c      	adds	r3, #44	; 0x2c
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fa84 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 8003ffa:	e7ff      	b.n	8003ffc <_ZN8SwitchesD1Ev+0x8c>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3320      	adds	r3, #32
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fa7e 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 8004006:	e7ff      	b.n	8004008 <_ZN8SwitchesD1Ev+0x98>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3314      	adds	r3, #20
 800400c:	4618      	mov	r0, r3
 800400e:	f000 faa7 	bl	8004560 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
 8004012:	e7ff      	b.n	8004014 <_ZN8SwitchesD1Ev+0xa4>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	3308      	adds	r3, #8
 8004018:	4618      	mov	r0, r3
 800401a:	f000 fa72 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 800401e:	f002 fa67 	bl	80064f0 <__cxa_end_cleanup>
}
 8004022:	4618      	mov	r0, r3
 8004024:	3708      	adds	r7, #8
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
	...

0800402c <_ZN8Switches3spiEv>:

void Switches::spi(void){
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af02      	add	r7, sp, #8
 8004032:	6078      	str	r0, [r7, #4]
		// Clear output shift register, unnecessary...
		// HAL_GPIO_WritePin(SRCLR_GPIO_Port,SRCLR_Pin,GPIO_PIN_RESET);
		// HAL_GPIO_WritePin(SRCLR_GPIO_Port,SRCLR_Pin,GPIO_PIN_SET);

		// Latch inputs
		HAL_GPIO_WritePin(LD_GPIO_Port,LD_Pin,GPIO_PIN_RESET);
 8004034:	2200      	movs	r2, #0
 8004036:	2101      	movs	r1, #1
 8004038:	480f      	ldr	r0, [pc, #60]	; (8004078 <_ZN8Switches3spiEv+0x4c>)
 800403a:	f7fd fbbf 	bl	80017bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD_GPIO_Port,LD_Pin,GPIO_PIN_SET);
 800403e:	2201      	movs	r2, #1
 8004040:	2101      	movs	r1, #1
 8004042:	480d      	ldr	r0, [pc, #52]	; (8004078 <_ZN8Switches3spiEv+0x4c>)
 8004044:	f7fd fbba 	bl	80017bc <HAL_GPIO_WritePin>


		HAL_SPI_TransmitReceive(spi_interface, ui_spi_out, ui_spi_in, NUM_OF_REGISTERS, 10);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6858      	ldr	r0, [r3, #4]
 800404c:	230a      	movs	r3, #10
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	2303      	movs	r3, #3
 8004052:	4a0a      	ldr	r2, [pc, #40]	; (800407c <_ZN8Switches3spiEv+0x50>)
 8004054:	490a      	ldr	r1, [pc, #40]	; (8004080 <_ZN8Switches3spiEv+0x54>)
 8004056:	f7fd feb5 	bl	8001dc4 <HAL_SPI_TransmitReceive>

		// Transfer shift register contents to storage register
		HAL_GPIO_WritePin(RCLK_GPIO_Port, RCLK_Pin,GPIO_PIN_RESET);
 800405a:	2200      	movs	r2, #0
 800405c:	2110      	movs	r1, #16
 800405e:	4806      	ldr	r0, [pc, #24]	; (8004078 <_ZN8Switches3spiEv+0x4c>)
 8004060:	f7fd fbac 	bl	80017bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RCLK_GPIO_Port, RCLK_Pin,GPIO_PIN_SET);
 8004064:	2201      	movs	r2, #1
 8004066:	2110      	movs	r1, #16
 8004068:	4803      	ldr	r0, [pc, #12]	; (8004078 <_ZN8Switches3spiEv+0x4c>)
 800406a:	f7fd fba7 	bl	80017bc <HAL_GPIO_WritePin>
}
 800406e:	bf00      	nop
 8004070:	3708      	adds	r7, #8
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40020800 	.word	0x40020800
 800407c:	200002c8 	.word	0x200002c8
 8004080:	200002cc 	.word	0x200002cc

08004084 <_ZN8Switches6updateEi>:
void Switches::update(int subTick){
 8004084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004088:	b08d      	sub	sp, #52	; 0x34
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
			index[x] = 0;
		}

		changed[x] = debouncedState[x] ^ lastDebouncedState[x];

	}
 8004090:	466a      	mov	r2, sp
 8004092:	607a      	str	r2, [r7, #4]
	uint8_t lastDebouncedState[numOfRegisters];
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	7852      	ldrb	r2, [r2, #1]
 8004098:	1e50      	subs	r0, r2, #1
 800409a:	62b8      	str	r0, [r7, #40]	; 0x28
 800409c:	4602      	mov	r2, r0
 800409e:	3201      	adds	r2, #1
 80040a0:	4611      	mov	r1, r2
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 80040aa:	ea4b 7b51 	orr.w	fp, fp, r1, lsr #29
 80040ae:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 80040b2:	4602      	mov	r2, r0
 80040b4:	3201      	adds	r2, #1
 80040b6:	4611      	mov	r1, r2
 80040b8:	f04f 0200 	mov.w	r2, #0
 80040bc:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 80040c0:	ea49 7951 	orr.w	r9, r9, r1, lsr #29
 80040c4:	ea4f 08c1 	mov.w	r8, r1, lsl #3
 80040c8:	4602      	mov	r2, r0
 80040ca:	3201      	adds	r2, #1
 80040cc:	3207      	adds	r2, #7
 80040ce:	08d2      	lsrs	r2, r2, #3
 80040d0:	00d2      	lsls	r2, r2, #3
 80040d2:	ebad 0d02 	sub.w	sp, sp, r2
 80040d6:	466a      	mov	r2, sp
 80040d8:	3200      	adds	r2, #0
 80040da:	627a      	str	r2, [r7, #36]	; 0x24
	uint8_t ledMask[numOfRegisters];
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	7852      	ldrb	r2, [r2, #1]
 80040e0:	1e50      	subs	r0, r2, #1
 80040e2:	6238      	str	r0, [r7, #32]
 80040e4:	4602      	mov	r2, r0
 80040e6:	3201      	adds	r2, #1
 80040e8:	4611      	mov	r1, r2
 80040ea:	f04f 0200 	mov.w	r2, #0
 80040ee:	00d6      	lsls	r6, r2, #3
 80040f0:	ea46 7651 	orr.w	r6, r6, r1, lsr #29
 80040f4:	00cd      	lsls	r5, r1, #3
 80040f6:	4602      	mov	r2, r0
 80040f8:	3201      	adds	r2, #1
 80040fa:	4611      	mov	r1, r2
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	00d4      	lsls	r4, r2, #3
 8004102:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004106:	00cb      	lsls	r3, r1, #3
 8004108:	4603      	mov	r3, r0
 800410a:	3301      	adds	r3, #1
 800410c:	3307      	adds	r3, #7
 800410e:	08db      	lsrs	r3, r3, #3
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	ebad 0d03 	sub.w	sp, sp, r3
 8004116:	466b      	mov	r3, sp
 8004118:	3300      	adds	r3, #0
 800411a:	61fb      	str	r3, [r7, #28]
	uint8_t step = subTick;
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	76fb      	strb	r3, [r7, #27]
	PWMcounter++;
 8004120:	4bae      	ldr	r3, [pc, #696]	; (80043dc <_ZN8Switches6updateEi+0x358>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	3301      	adds	r3, #1
 8004126:	b2da      	uxtb	r2, r3
 8004128:	4bac      	ldr	r3, [pc, #688]	; (80043dc <_ZN8Switches6updateEi+0x358>)
 800412a:	701a      	strb	r2, [r3, #0]
	for(x = 0; x < numOfRegisters; x++){
 800412c:	2300      	movs	r3, #0
 800412e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004132:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	7852      	ldrb	r2, [r2, #1]
 800413a:	4293      	cmp	r3, r2
 800413c:	f280 81a0 	bge.w	8004480 <_ZN8Switches6updateEi+0x3fc>
		for(j = 0; j<8; j++){
 8004140:	2300      	movs	r3, #0
 8004142:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8004146:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800414a:	2b07      	cmp	r3, #7
 800414c:	f300 80be 	bgt.w	80042cc <_ZN8Switches6updateEi+0x248>
			shift = (x*8)+j;
 8004150:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004154:	00da      	lsls	r2, r3, #3
 8004156:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800415a:	4413      	add	r3, r2
 800415c:	617b      	str	r3, [r7, #20]
			if(ledPulse[shift]){
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	335c      	adds	r3, #92	; 0x5c
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	4611      	mov	r1, r2
 8004166:	4618      	mov	r0, r3
 8004168:	f000 fb06 	bl	8004778 <_ZNSt6vectorIhSaIhEEixEj>
 800416c:	4603      	mov	r3, r0
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	bf14      	ite	ne
 8004174:	2301      	movne	r3, #1
 8004176:	2300      	moveq	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d066      	beq.n	800424c <_ZN8Switches6updateEi+0x1c8>
				if(!(step%ledPulse[shift])){
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	335c      	adds	r3, #92	; 0x5c
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	4611      	mov	r1, r2
 8004186:	4618      	mov	r0, r3
 8004188:	f000 faf6 	bl	8004778 <_ZNSt6vectorIhSaIhEEixEj>
 800418c:	4603      	mov	r3, r0
 800418e:	781a      	ldrb	r2, [r3, #0]
 8004190:	7efb      	ldrb	r3, [r7, #27]
 8004192:	fbb3 f1f2 	udiv	r1, r3, r2
 8004196:	fb02 f201 	mul.w	r2, r2, r1
 800419a:	1a9b      	subs	r3, r3, r2
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bf0c      	ite	eq
 80041a2:	2301      	moveq	r3, #1
 80041a4:	2300      	movne	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d03a      	beq.n	8004222 <_ZN8Switches6updateEi+0x19e>
					if(PWMcounter<ledPWM[shift]){
 80041ac:	4b8b      	ldr	r3, [pc, #556]	; (80043dc <_ZN8Switches6updateEi+0x358>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	461c      	mov	r4, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3350      	adds	r3, #80	; 0x50
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4611      	mov	r1, r2
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fadc 	bl	8004778 <_ZNSt6vectorIhSaIhEEixEj>
 80041c0:	4603      	mov	r3, r0
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	429c      	cmp	r4, r3
 80041c6:	bfb4      	ite	lt
 80041c8:	2301      	movlt	r3, #1
 80041ca:	2300      	movge	r3, #0
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d012      	beq.n	80041f8 <_ZN8Switches6updateEi+0x174>
						ledMask[x] |= (1 << j);
 80041d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80041d6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80041da:	69f9      	ldr	r1, [r7, #28]
 80041dc:	5c8a      	ldrb	r2, [r1, r2]
 80041de:	b251      	sxtb	r1, r2
 80041e0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80041e4:	2001      	movs	r0, #1
 80041e6:	fa00 f202 	lsl.w	r2, r0, r2
 80041ea:	b252      	sxtb	r2, r2
 80041ec:	430a      	orrs	r2, r1
 80041ee:	b252      	sxtb	r2, r2
 80041f0:	b2d1      	uxtb	r1, r2
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	54d1      	strb	r1, [r2, r3]
 80041f6:	e063      	b.n	80042c0 <_ZN8Switches6updateEi+0x23c>
						ledMask[x] &= ~(1 << j);
 80041f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80041fc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004200:	69f9      	ldr	r1, [r7, #28]
 8004202:	5c8a      	ldrb	r2, [r1, r2]
 8004204:	b251      	sxtb	r1, r2
 8004206:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800420a:	2001      	movs	r0, #1
 800420c:	fa00 f202 	lsl.w	r2, r0, r2
 8004210:	b252      	sxtb	r2, r2
 8004212:	43d2      	mvns	r2, r2
 8004214:	b252      	sxtb	r2, r2
 8004216:	400a      	ands	r2, r1
 8004218:	b252      	sxtb	r2, r2
 800421a:	b2d1      	uxtb	r1, r2
 800421c:	69fa      	ldr	r2, [r7, #28]
 800421e:	54d1      	strb	r1, [r2, r3]
 8004220:	e04e      	b.n	80042c0 <_ZN8Switches6updateEi+0x23c>
					ledMask[x] &= ~(1 << j);
 8004222:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004226:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800422a:	69f9      	ldr	r1, [r7, #28]
 800422c:	5c8a      	ldrb	r2, [r1, r2]
 800422e:	b251      	sxtb	r1, r2
 8004230:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004234:	2001      	movs	r0, #1
 8004236:	fa00 f202 	lsl.w	r2, r0, r2
 800423a:	b252      	sxtb	r2, r2
 800423c:	43d2      	mvns	r2, r2
 800423e:	b252      	sxtb	r2, r2
 8004240:	400a      	ands	r2, r1
 8004242:	b252      	sxtb	r2, r2
 8004244:	b2d1      	uxtb	r1, r2
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	54d1      	strb	r1, [r2, r3]
 800424a:	e039      	b.n	80042c0 <_ZN8Switches6updateEi+0x23c>
				if(PWMcounter<ledPWM[shift]){
 800424c:	4b63      	ldr	r3, [pc, #396]	; (80043dc <_ZN8Switches6updateEi+0x358>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	461c      	mov	r4, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3350      	adds	r3, #80	; 0x50
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4611      	mov	r1, r2
 800425a:	4618      	mov	r0, r3
 800425c:	f000 fa8c 	bl	8004778 <_ZNSt6vectorIhSaIhEEixEj>
 8004260:	4603      	mov	r3, r0
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	429c      	cmp	r4, r3
 8004266:	bfb4      	ite	lt
 8004268:	2301      	movlt	r3, #1
 800426a:	2300      	movge	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d012      	beq.n	8004298 <_ZN8Switches6updateEi+0x214>
					ledMask[x] |= (1 << j);
 8004272:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004276:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800427a:	69f9      	ldr	r1, [r7, #28]
 800427c:	5c8a      	ldrb	r2, [r1, r2]
 800427e:	b251      	sxtb	r1, r2
 8004280:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8004284:	2001      	movs	r0, #1
 8004286:	fa00 f202 	lsl.w	r2, r0, r2
 800428a:	b252      	sxtb	r2, r2
 800428c:	430a      	orrs	r2, r1
 800428e:	b252      	sxtb	r2, r2
 8004290:	b2d1      	uxtb	r1, r2
 8004292:	69fa      	ldr	r2, [r7, #28]
 8004294:	54d1      	strb	r1, [r2, r3]
 8004296:	e013      	b.n	80042c0 <_ZN8Switches6updateEi+0x23c>
					ledMask[x] &= ~(1 << j);
 8004298:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800429c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80042a0:	69f9      	ldr	r1, [r7, #28]
 80042a2:	5c8a      	ldrb	r2, [r1, r2]
 80042a4:	b251      	sxtb	r1, r2
 80042a6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80042aa:	2001      	movs	r0, #1
 80042ac:	fa00 f202 	lsl.w	r2, r0, r2
 80042b0:	b252      	sxtb	r2, r2
 80042b2:	43d2      	mvns	r2, r2
 80042b4:	b252      	sxtb	r2, r2
 80042b6:	400a      	ands	r2, r1
 80042b8:	b252      	sxtb	r2, r2
 80042ba:	b2d1      	uxtb	r1, r2
 80042bc:	69fa      	ldr	r2, [r7, #28]
 80042be:	54d1      	strb	r1, [r2, r3]
		for(j = 0; j<8; j++){
 80042c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80042c4:	3301      	adds	r3, #1
 80042c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80042ca:	e73c      	b.n	8004146 <_ZN8Switches6updateEi+0xc2>
		if(PWMcounter == 127){
 80042cc:	4b43      	ldr	r3, [pc, #268]	; (80043dc <_ZN8Switches6updateEi+0x358>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b7f      	cmp	r3, #127	; 0x7f
 80042d2:	d102      	bne.n	80042da <_ZN8Switches6updateEi+0x256>
			PWMcounter = 0;
 80042d4:	4b41      	ldr	r3, [pc, #260]	; (80043dc <_ZN8Switches6updateEi+0x358>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	701a      	strb	r2, [r3, #0]
		ui_spi_out[NUM_OF_REGISTERS-(1+offset+x)] = leds[x] | ledMask[x];
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80042e4:	4413      	add	r3, r2
 80042e6:	f1c3 0403 	rsb	r4, r3, #3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3344      	adds	r3, #68	; 0x44
 80042ee:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80042f2:	4611      	mov	r1, r2
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fa3f 	bl	8004778 <_ZNSt6vectorIhSaIhEEixEj>
 80042fa:	4603      	mov	r3, r0
 80042fc:	781a      	ldrb	r2, [r3, #0]
 80042fe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004302:	69f9      	ldr	r1, [r7, #28]
 8004304:	5ccb      	ldrb	r3, [r1, r3]
 8004306:	4313      	orrs	r3, r2
 8004308:	b2da      	uxtb	r2, r3
 800430a:	4b35      	ldr	r3, [pc, #212]	; (80043e0 <_ZN8Switches6updateEi+0x35c>)
 800430c:	551a      	strb	r2, [r3, r4]
		lastDebouncedState[x] = debouncedState[x];
 800430e:	f897 402e 	ldrb.w	r4, [r7, #46]	; 0x2e
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3320      	adds	r3, #32
 8004316:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800431a:	4611      	mov	r1, r2
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fa2b 	bl	8004778 <_ZNSt6vectorIhSaIhEEixEj>
 8004322:	4603      	mov	r3, r0
 8004324:	781a      	ldrb	r2, [r3, #0]
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	551a      	strb	r2, [r3, r4]
		debouncedState[x] = 0xFF;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	3320      	adds	r3, #32
 800432e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004332:	4611      	mov	r1, r2
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fa1f 	bl	8004778 <_ZNSt6vectorIhSaIhEEixEj>
 800433a:	4603      	mov	r3, r0
 800433c:	22ff      	movs	r2, #255	; 0xff
 800433e:	701a      	strb	r2, [r3, #0]
		state[x][index[x]] = ui_spi_in[x+offset];
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3314      	adds	r3, #20
 8004344:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004348:	4611      	mov	r1, r2
 800434a:	4618      	mov	r0, r3
 800434c:	f000 fa23 	bl	8004796 <_ZNSt6vectorIS_IhSaIhEESaIS1_EEixEj>
 8004350:	4604      	mov	r4, r0
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	3308      	adds	r3, #8
 8004356:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800435a:	4611      	mov	r1, r2
 800435c:	4618      	mov	r0, r3
 800435e:	f000 fa0b 	bl	8004778 <_ZNSt6vectorIhSaIhEEixEj>
 8004362:	4603      	mov	r3, r0
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	4619      	mov	r1, r3
 8004368:	4620      	mov	r0, r4
 800436a:	f000 fa05 	bl	8004778 <_ZNSt6vectorIhSaIhEEixEj>
 800436e:	4601      	mov	r1, r0
 8004370:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	7812      	ldrb	r2, [r2, #0]
 8004378:	4413      	add	r3, r2
 800437a:	4a1a      	ldr	r2, [pc, #104]	; (80043e4 <_ZN8Switches6updateEi+0x360>)
 800437c:	5cd3      	ldrb	r3, [r2, r3]
 800437e:	700b      	strb	r3, [r1, #0]
		for(i = 0; i < numOfStates; i++){
 8004380:	2300      	movs	r3, #0
 8004382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004386:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	7892      	ldrb	r2, [r2, #2]
 800438e:	4293      	cmp	r3, r2
 8004390:	da2a      	bge.n	80043e8 <_ZN8Switches6updateEi+0x364>
			debouncedState[x] &= state[x][i];
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3314      	adds	r3, #20
 8004396:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800439a:	4611      	mov	r1, r2
 800439c:	4618      	mov	r0, r3
 800439e:	f000 f9fa 	bl	8004796 <_ZNSt6vectorIS_IhSaIhEESaIS1_EEixEj>
 80043a2:	4602      	mov	r2, r0
 80043a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80043a8:	4619      	mov	r1, r3
 80043aa:	4610      	mov	r0, r2
 80043ac:	f000 f9e4 	bl	8004778 <_ZNSt6vectorIhSaIhEEixEj>
 80043b0:	4603      	mov	r3, r0
 80043b2:	781c      	ldrb	r4, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	3320      	adds	r3, #32
 80043b8:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80043bc:	4611      	mov	r1, r2
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f9da 	bl	8004778 <_ZNSt6vectorIhSaIhEEixEj>
 80043c4:	4603      	mov	r3, r0
 80043c6:	781a      	ldrb	r2, [r3, #0]
 80043c8:	4022      	ands	r2, r4
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < numOfStates; i++){
 80043ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80043d2:	3301      	adds	r3, #1
 80043d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80043d8:	e7d5      	b.n	8004386 <_ZN8Switches6updateEi+0x302>
 80043da:	bf00      	nop
 80043dc:	200002cf 	.word	0x200002cf
 80043e0:	200002cc 	.word	0x200002cc
 80043e4:	200002c8 	.word	0x200002c8
		index[x]++;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	3308      	adds	r3, #8
 80043ec:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 80043f0:	4611      	mov	r1, r2
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 f9c0 	bl	8004778 <_ZNSt6vectorIhSaIhEEixEj>
 80043f8:	4603      	mov	r3, r0
 80043fa:	781a      	ldrb	r2, [r3, #0]
 80043fc:	3201      	adds	r2, #1
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	701a      	strb	r2, [r3, #0]
		if(index[x] >= numOfStates){
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	3308      	adds	r3, #8
 8004406:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800440a:	4611      	mov	r1, r2
 800440c:	4618      	mov	r0, r3
 800440e:	f000 f9b3 	bl	8004778 <_ZNSt6vectorIhSaIhEEixEj>
 8004412:	4603      	mov	r3, r0
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	461a      	mov	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	789b      	ldrb	r3, [r3, #2]
 800441c:	429a      	cmp	r2, r3
 800441e:	bfac      	ite	ge
 8004420:	2301      	movge	r3, #1
 8004422:	2300      	movlt	r3, #0
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00a      	beq.n	8004440 <_ZN8Switches6updateEi+0x3bc>
			index[x] = 0;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	3308      	adds	r3, #8
 800442e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004432:	4611      	mov	r1, r2
 8004434:	4618      	mov	r0, r3
 8004436:	f000 f99f 	bl	8004778 <_ZNSt6vectorIhSaIhEEixEj>
 800443a:	4603      	mov	r3, r0
 800443c:	2200      	movs	r2, #0
 800443e:	701a      	strb	r2, [r3, #0]
		changed[x] = debouncedState[x] ^ lastDebouncedState[x];
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	332c      	adds	r3, #44	; 0x2c
 8004444:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8004448:	4611      	mov	r1, r2
 800444a:	4618      	mov	r0, r3
 800444c:	f000 f994 	bl	8004778 <_ZNSt6vectorIhSaIhEEixEj>
 8004450:	4604      	mov	r4, r0
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	3320      	adds	r3, #32
 8004456:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800445a:	4611      	mov	r1, r2
 800445c:	4618      	mov	r0, r3
 800445e:	f000 f98b 	bl	8004778 <_ZNSt6vectorIhSaIhEEixEj>
 8004462:	4603      	mov	r3, r0
 8004464:	781a      	ldrb	r2, [r3, #0]
 8004466:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800446a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800446c:	5ccb      	ldrb	r3, [r1, r3]
 800446e:	4053      	eors	r3, r2
 8004470:	b2db      	uxtb	r3, r3
 8004472:	7023      	strb	r3, [r4, #0]
	for(x = 0; x < numOfRegisters; x++){
 8004474:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004478:	3301      	adds	r3, #1
 800447a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800447e:	e658      	b.n	8004132 <_ZN8Switches6updateEi+0xae>
 8004480:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 8004484:	bf00      	nop
 8004486:	3734      	adds	r7, #52	; 0x34
 8004488:	46bd      	mov	sp, r7
 800448a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800448e:	bf00      	nop

08004490 <_ZN8Switches9setLedAllE8PWM_MODE10PULSE_MODE>:
	for(int i = 0; i < numOfRegisters*8; i++){
		ledPulse[i] = pulse;
		ledPWM[i] = FULL;
	}
}
void Switches::setLedAll(PWM_MODE pwm, PULSE_MODE pulse){
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	70fb      	strb	r3, [r7, #3]
 800449c:	4613      	mov	r3, r2
 800449e:	70bb      	strb	r3, [r7, #2]
	for(int i = 0; i < numOfRegisters*8; i++){
 80044a0:	2300      	movs	r3, #0
 80044a2:	60fb      	str	r3, [r7, #12]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	785b      	ldrb	r3, [r3, #1]
 80044a8:	00da      	lsls	r2, r3, #3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	dd17      	ble.n	80044e0 <_ZN8Switches9setLedAllE8PWM_MODE10PULSE_MODE+0x50>
		ledPWM[i] = pwm;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3350      	adds	r3, #80	; 0x50
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	4611      	mov	r1, r2
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 f95d 	bl	8004778 <_ZNSt6vectorIhSaIhEEixEj>
 80044be:	4602      	mov	r2, r0
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	7013      	strb	r3, [r2, #0]
		ledPulse[i] = pulse;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	335c      	adds	r3, #92	; 0x5c
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4611      	mov	r1, r2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 f953 	bl	8004778 <_ZNSt6vectorIhSaIhEEixEj>
 80044d2:	4602      	mov	r2, r0
 80044d4:	78bb      	ldrb	r3, [r7, #2]
 80044d6:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < numOfRegisters*8; i++){
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	3301      	adds	r3, #1
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	e7e1      	b.n	80044a4 <_ZN8Switches9setLedAllE8PWM_MODE10PULSE_MODE+0x14>
	}
}
 80044e0:	bf00      	nop
 80044e2:	3710      	adds	r7, #16
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <_ZNSt6vectorIhSaIhEEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 f96e 	bl	80047d4 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8004502:	b5b0      	push	{r4, r5, r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681c      	ldr	r4, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4618      	mov	r0, r3
 8004516:	f000 f98a 	bl	800482e <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800451a:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800451c:	461a      	mov	r2, r3
 800451e:	4629      	mov	r1, r5
 8004520:	4620      	mov	r0, r4
 8004522:	f000 f98f 	bl	8004844 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4618      	mov	r0, r3
 800452a:	f000 f960 	bl	80047ee <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	e005      	b.n	800453e <_ZNSt6vectorIhSaIhEED1Ev+0x3c>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4618      	mov	r0, r3
 8004536:	f000 f95a 	bl	80047ee <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800453a:	f001 ffd9 	bl	80064f0 <__cxa_end_cleanup>
 800453e:	4618      	mov	r0, r3
 8004540:	3708      	adds	r7, #8
 8004542:	46bd      	mov	sp, r7
 8004544:	bdb0      	pop	{r4, r5, r7, pc}

08004546 <_ZNSt6vectorIS_IhSaIhEESaIS1_EEC1Ev>:
      vector()
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4618      	mov	r0, r3
 8004552:	f000 f991 	bl	8004878 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EEC1Ev>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4618      	mov	r0, r3
 800455a:	3708      	adds	r7, #8
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8004560:	b5b0      	push	{r4, r5, r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681c      	ldr	r4, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 f9b4 	bl	80048e0 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004578:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800457a:	461a      	mov	r2, r3
 800457c:	4629      	mov	r1, r5
 800457e:	4620      	mov	r0, r4
 8004580:	f000 f9b9 	bl	80048f6 <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4618      	mov	r0, r3
 8004588:	f000 f984 	bl	8004894 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EED1Ev>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	e005      	b.n	800459c <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev+0x3c>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4618      	mov	r0, r3
 8004594:	f000 f97e 	bl	8004894 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EED1Ev>
 8004598:	f001 ffaa 	bl	80064f0 <__cxa_end_cleanup>
 800459c:	4618      	mov	r0, r3
 800459e:	3708      	adds	r7, #8
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bdb0      	pop	{r4, r5, r7, pc}

080045a4 <_ZNSaIhEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f9b0 	bl	8004912 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4618      	mov	r0, r3
 80045b6:	3708      	adds	r7, #8
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <_ZNSaIhED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 f9af 	bl	8004928 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <_ZNSt6vectorIhSaIhEEC1EjRKhRKS0_>:
      vector(size_type __n, const value_type& __value = value_type(),
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
 80045e0:	603b      	str	r3, [r7, #0]
      : _Base(__n, __a)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 f9a8 	bl	800493e <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>
      { _M_fill_initialize(__n, __value); }
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 f9be 	bl	8004974 <_ZNSt6vectorIhSaIhEE18_M_fill_initializeEjRKh>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	e005      	b.n	8004608 <_ZNSt6vectorIhSaIhEEC1EjRKhRKS0_+0x34>
      : _Base(__n, __a)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 f8f5 	bl	80047ee <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8004604:	f001 ff74 	bl	80064f0 <__cxa_end_cleanup>
      { _M_fill_initialize(__n, __value); }
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <_ZNSt6vectorIhSaIhEEC1ERKS1_>:
      vector(const vector& __x)
 8004610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800461a:	687c      	ldr	r4, [r7, #4]
 800461c:	6838      	ldr	r0, [r7, #0]
 800461e:	f000 f9c2 	bl	80049a6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8004622:	4605      	mov	r5, r0
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f000 f9d8 	bl	80049dc <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800462c:	4603      	mov	r3, r0
 800462e:	4618      	mov	r0, r3
 8004630:	f000 f9c9 	bl	80049c6 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE17_S_select_on_copyERKS1_>
 8004634:	4603      	mov	r3, r0
 8004636:	461a      	mov	r2, r3
 8004638:	4629      	mov	r1, r5
 800463a:	4620      	mov	r0, r4
 800463c:	f000 f97f 	bl	800493e <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8004640:	6838      	ldr	r0, [r7, #0]
 8004642:	f000 f9d6 	bl	80049f2 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8004646:	4605      	mov	r5, r0
 8004648:	6838      	ldr	r0, [r7, #0]
 800464a:	f000 f9e6 	bl	8004a1a <_ZNKSt6vectorIhSaIhEE3endEv>
 800464e:	4606      	mov	r6, r0
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4618      	mov	r0, r3
 8004658:	f000 f8e9 	bl	800482e <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800465c:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800465e:	4622      	mov	r2, r4
 8004660:	4631      	mov	r1, r6
 8004662:	4628      	mov	r0, r5
 8004664:	f000 f9ed 	bl	8004a42 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
 8004668:	4602      	mov	r2, r0
      { this->_M_impl._M_finish =
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	605a      	str	r2, [r3, #4]
      }
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	e005      	b.n	800467e <_ZNSt6vectorIhSaIhEEC1ERKS1_+0x6e>
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4618      	mov	r0, r3
 8004676:	f000 f8ba 	bl	80047ee <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800467a:	f001 ff39 	bl	80064f0 <__cxa_end_cleanup>
      }
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004686 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEjS1_>:
       *  %vector's current size the %vector is truncated, otherwise
       *  the %vector is extended and new elements are populated with
       *  given data.
       */
      void
      resize(size_type __new_size, value_type __x = value_type())
 8004686:	b590      	push	{r4, r7, lr}
 8004688:	b085      	sub	sp, #20
 800468a:	af00      	add	r7, sp, #0
 800468c:	60f8      	str	r0, [r7, #12]
 800468e:	60b9      	str	r1, [r7, #8]
 8004690:	607a      	str	r2, [r7, #4]
      {
	if (__new_size > size())
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 f9e6 	bl	8004a64 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 8004698:	4602      	mov	r2, r0
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	429a      	cmp	r2, r3
 800469e:	bf34      	ite	cc
 80046a0:	2301      	movcc	r3, #1
 80046a2:	2300      	movcs	r3, #0
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00f      	beq.n	80046ca <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEjS1_+0x44>
	  insert(end(), __new_size - size(), __x);
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 f9f0 	bl	8004a90 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE3endEv>
 80046b0:	4604      	mov	r4, r0
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 f9d6 	bl	8004a64 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 80046b8:	4602      	mov	r2, r0
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	1a9a      	subs	r2, r3, r2
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4621      	mov	r1, r4
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 f9f5 	bl	8004ab2 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_>
	else if (__new_size < size())
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
      }
 80046c8:	e017      	b.n	80046fa <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEjS1_+0x74>
	else if (__new_size < size())
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f9ca 	bl	8004a64 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 80046d0:	4602      	mov	r2, r0
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	bf8c      	ite	hi
 80046d8:	2301      	movhi	r3, #1
 80046da:	2300      	movls	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00b      	beq.n	80046fa <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEjS1_+0x74>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	6819      	ldr	r1, [r3, #0]
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	4613      	mov	r3, r2
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	4413      	add	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	4619      	mov	r1, r3
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 f9ed 	bl	8004ad4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE15_M_erase_at_endEPS1_>
      }
 80046fa:	bf00      	nop
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd90      	pop	{r4, r7, pc}

08004702 <_ZNSt6vectorIhSaIhEE6resizeEjh>:
      resize(size_type __new_size, value_type __x = value_type())
 8004702:	b590      	push	{r4, r7, lr}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	60f8      	str	r0, [r7, #12]
 800470a:	60b9      	str	r1, [r7, #8]
 800470c:	4613      	mov	r3, r2
 800470e:	71fb      	strb	r3, [r7, #7]
	if (__new_size > size())
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 f948 	bl	80049a6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8004716:	4602      	mov	r2, r0
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	429a      	cmp	r2, r3
 800471c:	bf34      	ite	cc
 800471e:	2301      	movcc	r3, #1
 8004720:	2300      	movcs	r3, #0
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00f      	beq.n	8004748 <_ZNSt6vectorIhSaIhEE6resizeEjh+0x46>
	  insert(end(), __new_size - size(), __x);
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 f9eb 	bl	8004b04 <_ZNSt6vectorIhSaIhEE3endEv>
 800472e:	4604      	mov	r4, r0
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 f938 	bl	80049a6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8004736:	4602      	mov	r2, r0
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	1a9a      	subs	r2, r3, r2
 800473c:	1dfb      	adds	r3, r7, #7
 800473e:	4621      	mov	r1, r4
 8004740:	68f8      	ldr	r0, [r7, #12]
 8004742:	f000 f9f0 	bl	8004b26 <_ZNSt6vectorIhSaIhEE6insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh>
      }
 8004746:	e013      	b.n	8004770 <_ZNSt6vectorIhSaIhEE6resizeEjh+0x6e>
	else if (__new_size < size())
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 f92c 	bl	80049a6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800474e:	4602      	mov	r2, r0
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	429a      	cmp	r2, r3
 8004754:	bf8c      	ite	hi
 8004756:	2301      	movhi	r3, #1
 8004758:	2300      	movls	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b00      	cmp	r3, #0
 800475e:	d007      	beq.n	8004770 <_ZNSt6vectorIhSaIhEE6resizeEjh+0x6e>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4413      	add	r3, r2
 8004768:	4619      	mov	r1, r3
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f9ec 	bl	8004b48 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
      }
 8004770:	bf00      	nop
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	bd90      	pop	{r4, r7, pc}

08004778 <_ZNSt6vectorIhSaIhEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
      { return *(this->_M_impl._M_start + __n); }
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	4413      	add	r3, r2
 800478a:	4618      	mov	r0, r3
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <_ZNSt6vectorIS_IhSaIhEESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
 800479e:	6039      	str	r1, [r7, #0]
      { return *(this->_M_impl._M_start + __n); }
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6819      	ldr	r1, [r3, #0]
 80047a4:	683a      	ldr	r2, [r7, #0]
 80047a6:	4613      	mov	r3, r2
 80047a8:	005b      	lsls	r3, r3, #1
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	4618      	mov	r0, r3
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
      struct _Vector_impl 
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7ff fef9 	bl	80045bc <_ZNSaIhED1Ev>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4618      	mov	r0, r3
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      _Vector_base()
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 f9ca 	bl	8004b78 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b082      	sub	sp, #8
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6819      	ldr	r1, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80047fe:	461a      	mov	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	1ad3      	subs	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 8004806:	461a      	mov	r2, r3
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f9ca 	bl	8004ba2 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		      - this->_M_impl._M_start); }
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4618      	mov	r0, r3
 8004812:	f7ff ffd3 	bl	80047bc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	e005      	b.n	8004826 <_ZNSt12_Vector_baseIhSaIhEED1Ev+0x38>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff ffcd 	bl	80047bc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 8004822:	f001 fe65 	bl	80064f0 <__cxa_end_cleanup>
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4618      	mov	r0, r3
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8004850:	68b9      	ldr	r1, [r7, #8]
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f000 f9b8 	bl	8004bc8 <_ZSt8_DestroyIPhEvT_S1_>
    }
 8004858:	bf00      	nop
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl 
 8004860:	b580      	push	{r7, lr}
 8004862:	b082      	sub	sp, #8
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 f9cf 	bl	8004c0c <_ZNSaISt6vectorIhSaIhEEED1Ev>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4618      	mov	r0, r3
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EEC1Ev>:
      _Vector_base()
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	4618      	mov	r0, r3
 8004884:	f000 f9ad 	bl	8004be2 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implC1Ev>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
	...

08004894 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6819      	ldr	r1, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 80048a4:	461a      	mov	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	1ad3      	subs	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 80048ac:	109b      	asrs	r3, r3, #2
 80048ae:	4a0b      	ldr	r2, [pc, #44]	; (80048dc <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EED1Ev+0x48>)
 80048b0:	fb02 f303 	mul.w	r3, r2, r3
 80048b4:	461a      	mov	r2, r3
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f9b4 	bl	8004c24 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j>
		      - this->_M_impl._M_start); }
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff ffce 	bl	8004860 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implD1Ev>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	e005      	b.n	80048d4 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EED1Ev+0x40>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7ff ffc8 	bl	8004860 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implD1Ev>
 80048d0:	f001 fe0e 	bl	80064f0 <__cxa_end_cleanup>
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	aaaaaaab 	.word	0xaaaaaaab

080048e0 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4618      	mov	r0, r3
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b084      	sub	sp, #16
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	60f8      	str	r0, [r7, #12]
 80048fe:	60b9      	str	r1, [r7, #8]
 8004900:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	68f8      	ldr	r0, [r7, #12]
 8004906:	f000 f9a0 	bl	8004c4a <_ZSt8_DestroyIPSt6vectorIhSaIhEEEvT_S4_>
    }
 800490a:	bf00      	nop
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4618      	mov	r0, r3
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4618      	mov	r0, r3
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	4618      	mov	r0, r3
 8004950:	f000 f988 	bl	8004c64 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8004954:	68b9      	ldr	r1, [r7, #8]
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 f99b 	bl	8004c92 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	e005      	b.n	800496c <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_+0x2e>
      : _M_impl(__a)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff ff2a 	bl	80047bc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 8004968:	f001 fdc2 	bl	80064f0 <__cxa_end_cleanup>
      { _M_create_storage(__n); }
 800496c:	4618      	mov	r0, r3
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <_ZNSt6vectorIhSaIhEE18_M_fill_initializeEjRKh>:
	}

      // Called by the first initialize_dispatch above and by the
      // vector(n,value,a) constructor.
      void
      _M_fill_initialize(size_type __n, const value_type& __value)
 8004974:	b590      	push	{r4, r7, lr}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]
      {
	this->_M_impl._M_finish =
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4618      	mov	r0, r3
 8004988:	f7ff ff51 	bl	800482e <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800498c:	4603      	mov	r3, r0
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	68b9      	ldr	r1, [r7, #8]
 8004992:	4620      	mov	r0, r4
 8004994:	f000 f997 	bl	8004cc6 <_ZSt24__uninitialized_fill_n_aIPhjhhET_S1_T0_RKT1_RSaIT2_E>
 8004998:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	605a      	str	r2, [r3, #4]
      }
 800499e:	bf00      	nop
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd90      	pop	{r4, r7, pc}

080049a6 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80049a6:	b480      	push	{r7}
 80049a8:	b083      	sub	sp, #12
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	461a      	mov	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	4618      	mov	r0, r3
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE17_S_select_on_copyERKS1_>:
    { __a.destroy(__p); }

    static size_type max_size(const _Alloc& __a)
    { return __a.max_size(); }

    static const _Alloc& _S_select_on_copy(const _Alloc& __a) { return __a; }
 80049c6:	b480      	push	{r7}
 80049c8:	b083      	sub	sp, #12
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4618      	mov	r0, r3
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4618      	mov	r0, r3
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr

080049f2 <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	f107 020c 	add.w	r2, r7, #12
 8004a04:	f107 0308 	add.w	r3, r7, #8
 8004a08:	4611      	mov	r1, r2
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f000 f96c 	bl	8004ce8 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4618      	mov	r0, r3
 8004a14:	3710      	adds	r7, #16
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	f107 020c 	add.w	r2, r7, #12
 8004a2c:	f107 0308 	add.w	r3, r7, #8
 8004a30:	4611      	mov	r1, r2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 f958 	bl	8004ce8 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b084      	sub	sp, #16
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
 8004a4e:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	68b9      	ldr	r1, [r7, #8]
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f957 	bl	8004d08 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	461a      	mov	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	109b      	asrs	r3, r3, #2
 8004a7a:	4a04      	ldr	r2, [pc, #16]	; (8004a8c <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv+0x28>)
 8004a7c:	fb02 f303 	mul.w	r3, r2, r3
 8004a80:	4618      	mov	r0, r3
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	aaaaaaab 	.word	0xaaaaaaab

08004a90 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	1d1a      	adds	r2, r3, #4
 8004a9c:	f107 030c 	add.w	r3, r7, #12
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 f942 	bl	8004d2c <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEC1ERKS4_>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3710      	adds	r7, #16
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_>:
      insert(iterator __position, size_type __n, const value_type& __x)
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b084      	sub	sp, #16
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	60f8      	str	r0, [r7, #12]
 8004aba:	60b9      	str	r1, [r7, #8]
 8004abc:	607a      	str	r2, [r7, #4]
 8004abe:	603b      	str	r3, [r7, #0]
      { _M_fill_insert(__position, __n, __x); }
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	68b9      	ldr	r1, [r7, #8]
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 f940 	bl	8004d4c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_>
 8004acc:	bf00      	nop
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8004ad4:	b590      	push	{r4, r7, lr}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	685c      	ldr	r4, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7ff fefb 	bl	80048e0 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004aea:	4603      	mov	r3, r0
 8004aec:	461a      	mov	r2, r3
 8004aee:	4621      	mov	r1, r4
 8004af0:	6838      	ldr	r0, [r7, #0]
 8004af2:	f7ff ff00 	bl	80048f6 <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	605a      	str	r2, [r3, #4]
      }
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd90      	pop	{r4, r7, pc}

08004b04 <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	1d1a      	adds	r2, r3, #4
 8004b10:	f107 030c 	add.w	r3, r7, #12
 8004b14:	4611      	mov	r1, r2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fabe 	bl	8005098 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <_ZNSt6vectorIhSaIhEE6insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh>:
      insert(iterator __position, size_type __n, const value_type& __x)
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b084      	sub	sp, #16
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
 8004b32:	603b      	str	r3, [r7, #0]
      { _M_fill_insert(__position, __n, __x); }
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	68b9      	ldr	r1, [r7, #8]
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fabc 	bl	80050b8 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh>
 8004b40:	bf00      	nop
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}

08004b48 <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8004b48:	b590      	push	{r4, r7, lr}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	6039      	str	r1, [r7, #0]
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685c      	ldr	r4, [r3, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7ff fe68 	bl	800482e <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	461a      	mov	r2, r3
 8004b62:	4621      	mov	r1, r4
 8004b64:	6838      	ldr	r0, [r7, #0]
 8004b66:	f7ff fe6d 	bl	8004844 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	605a      	str	r2, [r3, #4]
      }
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd90      	pop	{r4, r7, pc}

08004b78 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl()
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f7ff fd0f 	bl	80045a4 <_ZNSaIhEC1Ev>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	605a      	str	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	609a      	str	r2, [r3, #8]
	{ }
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3708      	adds	r7, #8
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}

08004ba2 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b084      	sub	sp, #16
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	607a      	str	r2, [r7, #4]
	if (__p)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fbdc 	bl	8005378 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE10deallocateERS1_Phj>
      }
 8004bc0:	bf00      	nop
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <_ZSt8_DestroyIPhEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 8004bd2:	6839      	ldr	r1, [r7, #0]
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fbde 	bl	8005396 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 8004bda:	bf00      	nop
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b082      	sub	sp, #8
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fbde 	bl	80053ac <_ZNSaISt6vectorIhSaIhEEEC1Ev>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	605a      	str	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	609a      	str	r2, [r3, #8]
	{ }
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <_ZNSaISt6vectorIhSaIhEEED1Ev>:
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b082      	sub	sp, #8
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fbd5 	bl	80053c4 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEED1Ev>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
	if (__p)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d005      	beq.n	8004c42 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	68b9      	ldr	r1, [r7, #8]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 fbcc 	bl	80053da <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIhSaIhEEEE10deallocateERS4_PS3_j>
      }
 8004c42:	bf00      	nop
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <_ZSt8_DestroyIPSt6vectorIhSaIhEEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8004c4a:	b580      	push	{r7, lr}
 8004c4c:	b082      	sub	sp, #8
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
 8004c52:	6039      	str	r1, [r7, #0]
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 8004c54:	6839      	ldr	r1, [r7, #0]
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 fbce 	bl	80053f8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_>
    }
 8004c5c:	bf00      	nop
 8004c5e:	3708      	adds	r7, #8
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 8004c6e:	6839      	ldr	r1, [r7, #0]
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 fbd9 	bl	8005428 <_ZNSaIhEC1ERKS_>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	605a      	str	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	609a      	str	r2, [r3, #8]
	{ }
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
 8004c9a:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8004c9c:	6839      	ldr	r1, [r7, #0]
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fbd0 	bl	8005444 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	441a      	add	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	609a      	str	r2, [r3, #8]
      }
 8004cbe:	bf00      	nop
 8004cc0:	3708      	adds	r7, #8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <_ZSt24__uninitialized_fill_n_aIPhjhhET_S1_T0_RKT1_RSaIT2_E>:
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
	   typename _Tp2>
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
 8004cd2:	603b      	str	r3, [r7, #0]
			     const _Tp& __x, allocator<_Tp2>&)
    { return std::uninitialized_fill_n(__first, __n, __x); }
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	68b9      	ldr	r1, [r7, #8]
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 fbc7 	bl	800546c <_ZSt20uninitialized_fill_nIPhjhET_S1_T0_RKT1_>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	601a      	str	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
      const bool __assignable = true;
 8004d14:	2301      	movs	r3, #1
 8004d16:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	68b9      	ldr	r1, [r7, #8]
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 fbb7 	bl	8005490 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>
 8004d22:	4603      	mov	r3, r0
    }
 8004d24:	4618      	mov	r0, r3
 8004d26:	3718      	adds	r7, #24
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4618      	mov	r0, r3
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 8004d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d4e:	b091      	sub	sp, #68	; 0x44
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 8197 	beq.w	8005090 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x344>
	{
	  if (size_type(this->_M_impl._M_end_of_storage
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	689b      	ldr	r3, [r3, #8]
			- this->_M_impl._M_finish) >= __n)
 8004d66:	461a      	mov	r2, r3
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	109b      	asrs	r3, r3, #2
 8004d70:	4aba      	ldr	r2, [pc, #744]	; (800505c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x310>)
 8004d72:	fb02 f303 	mul.w	r3, r2, r3
 8004d76:	461a      	mov	r2, r3
	  if (size_type(this->_M_impl._M_end_of_storage
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	f0c0 80ae 	bcc.w	8004edc <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x190>
	    {
	      value_type __x_copy = __x;
 8004d80:	f107 0314 	add.w	r3, r7, #20
 8004d84:	6839      	ldr	r1, [r7, #0]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f7ff fc42 	bl	8004610 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
	      const size_type __elems_after = end() - __position;
 8004d8c:	68f8      	ldr	r0, [r7, #12]
 8004d8e:	f7ff fe7f 	bl	8004a90 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE3endEv>
 8004d92:	4603      	mov	r3, r0
 8004d94:	623b      	str	r3, [r7, #32]
 8004d96:	f107 0208 	add.w	r2, r7, #8
 8004d9a:	f107 0320 	add.w	r3, r7, #32
 8004d9e:	4611      	mov	r1, r2
 8004da0:	4618      	mov	r0, r3
 8004da2:	f000 fb85 	bl	80054b0 <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8004da6:	4603      	mov	r3, r0
 8004da8:	63bb      	str	r3, [r7, #56]	; 0x38
	      pointer __old_finish(this->_M_impl._M_finish);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	637b      	str	r3, [r7, #52]	; 0x34
	      if (__elems_after > __n)
 8004db0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d94e      	bls.n	8004e56 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x10a>
		{
		  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6859      	ldr	r1, [r3, #4]
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	425b      	negs	r3, r3
 8004dc8:	18cc      	adds	r4, r1, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	685d      	ldr	r5, [r3, #4]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	685e      	ldr	r6, [r3, #4]
					      this->_M_impl._M_finish,
					      this->_M_impl._M_finish,
					      _M_get_Tp_allocator());
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7ff fd83 	bl	80048e0 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004dda:	4603      	mov	r3, r0
		  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8004ddc:	4632      	mov	r2, r6
 8004dde:	4629      	mov	r1, r5
 8004de0:	4620      	mov	r0, r4
 8004de2:	f000 fb81 	bl	80054e8 <_ZSt22__uninitialized_move_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>
		  this->_M_impl._M_finish += __n;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6859      	ldr	r1, [r3, #4]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	4613      	mov	r3, r2
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	18ca      	adds	r2, r1, r3
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	605a      	str	r2, [r3, #4]
		  _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 8004dfa:	f107 0308 	add.w	r3, r7, #8
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fb84 	bl	800550c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8004e04:	4603      	mov	r3, r0
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	4413      	add	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	425b      	negs	r3, r3
 8004e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e16:	4413      	add	r3, r2
 8004e18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	f000 fb81 	bl	8005522 <_ZSt13copy_backwardIPSt6vectorIhSaIhEES3_ET0_T_S5_S4_>
					  __old_finish - __n, __old_finish);
		  std::fill(__position.base(), __position.base() + __n,
 8004e20:	f107 0308 	add.w	r3, r7, #8
 8004e24:	4618      	mov	r0, r3
 8004e26:	f000 fb71 	bl	800550c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	681c      	ldr	r4, [r3, #0]
 8004e2e:	f107 0308 	add.w	r3, r7, #8
 8004e32:	4618      	mov	r0, r3
 8004e34:	f000 fb6a 	bl	800550c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	6819      	ldr	r1, [r3, #0]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	f107 0214 	add.w	r2, r7, #20
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	4620      	mov	r0, r4
 8004e50:	f000 fb7f 	bl	8005552 <_ZSt4fillIPSt6vectorIhSaIhEES2_EvT_S4_RKT0_>
 8004e54:	e03c      	b.n	8004ed0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x184>
			    __x_copy);
		}
	      else
		{
		  this->_M_impl._M_finish =
		    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	685c      	ldr	r4, [r3, #4]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	1ad5      	subs	r5, r2, r3
						  __n - __elems_after,
						  __x_copy,
						  _M_get_Tp_allocator());
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7ff fd3c 	bl	80048e0 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004e68:	4603      	mov	r3, r0
		    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 8004e6a:	f107 0214 	add.w	r2, r7, #20
 8004e6e:	4629      	mov	r1, r5
 8004e70:	4620      	mov	r0, r4
 8004e72:	f000 fb85 	bl	8005580 <_ZSt24__uninitialized_fill_n_aIPSt6vectorIhSaIhEEjS2_S2_ET_S4_T0_RKT1_RSaIT2_E>
 8004e76:	4602      	mov	r2, r0
		  this->_M_impl._M_finish =
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	605a      	str	r2, [r3, #4]
		  std::__uninitialized_move_a(__position.base(), __old_finish,
 8004e7c:	f107 0308 	add.w	r3, r7, #8
 8004e80:	4618      	mov	r0, r3
 8004e82:	f000 fb43 	bl	800550c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8004e86:	4603      	mov	r3, r0
 8004e88:	681c      	ldr	r4, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	685d      	ldr	r5, [r3, #4]
					      this->_M_impl._M_finish,
					      _M_get_Tp_allocator());
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4618      	mov	r0, r3
 8004e92:	f7ff fd25 	bl	80048e0 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004e96:	4603      	mov	r3, r0
		  std::__uninitialized_move_a(__position.base(), __old_finish,
 8004e98:	462a      	mov	r2, r5
 8004e9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f000 fb23 	bl	80054e8 <_ZSt22__uninitialized_move_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>
		  this->_M_impl._M_finish += __elems_after;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6859      	ldr	r1, [r3, #4]
 8004ea6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	005b      	lsls	r3, r3, #1
 8004eac:	4413      	add	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	18ca      	adds	r2, r1, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	605a      	str	r2, [r3, #4]
		  std::fill(__position.base(), __old_finish, __x_copy);
 8004eb6:	f107 0308 	add.w	r3, r7, #8
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f000 fb26 	bl	800550c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f107 0214 	add.w	r2, r7, #20
 8004ec8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fb41 	bl	8005552 <_ZSt4fillIPSt6vectorIhSaIhEES2_EvT_S4_RKT0_>
	      value_type __x_copy = __x;
 8004ed0:	f107 0314 	add.w	r3, r7, #20
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff fb14 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_finish;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 8004eda:	e0d9      	b.n	8005090 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x344>
		_M_check_len(__n, "vector::_M_fill_insert");
 8004edc:	4a60      	ldr	r2, [pc, #384]	; (8005060 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x314>)
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	68f8      	ldr	r0, [r7, #12]
 8004ee2:	f000 fb5e 	bl	80055a2 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	633b      	str	r3, [r7, #48]	; 0x30
	      const size_type __elems_before = __position - begin();
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 fba0 	bl	8005630 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE5beginEv>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ef4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8004ef8:	f107 0308 	add.w	r3, r7, #8
 8004efc:	4611      	mov	r1, r2
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 fad6 	bl	80054b0 <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8004f04:	4603      	mov	r3, r0
 8004f06:	62fb      	str	r3, [r7, #44]	; 0x2c
	      pointer __new_start(this->_M_allocate(__len));
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f000 fb9f 	bl	8005650 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE11_M_allocateEj>
 8004f12:	4603      	mov	r3, r0
 8004f14:	62bb      	str	r3, [r7, #40]	; 0x28
	      pointer __new_finish(__new_start);
 8004f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f18:	63fb      	str	r3, [r7, #60]	; 0x3c
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 8004f1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	461a      	mov	r2, r3
 8004f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f28:	189c      	adds	r4, r3, r2
						_M_get_Tp_allocator());
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f7ff fcd7 	bl	80048e0 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004f32:	4603      	mov	r3, r0
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 8004f34:	683a      	ldr	r2, [r7, #0]
 8004f36:	6879      	ldr	r1, [r7, #4]
 8004f38:	4620      	mov	r0, r4
 8004f3a:	f000 fb21 	bl	8005580 <_ZSt24__uninitialized_fill_n_aIPSt6vectorIhSaIhEEjS2_S2_ET_S4_T0_RKT1_RSaIT2_E>
		  __new_finish = pointer();
 8004f3e:	2300      	movs	r3, #0
 8004f40:	63fb      	str	r3, [r7, #60]	; 0x3c
		    (this->_M_impl._M_start, __position.base(),
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681c      	ldr	r4, [r3, #0]
 8004f46:	f107 0308 	add.w	r3, r7, #8
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fade 	bl	800550c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8004f50:	4603      	mov	r3, r0
 8004f52:	681d      	ldr	r5, [r3, #0]
		     __new_start, _M_get_Tp_allocator());
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7ff fcc2 	bl	80048e0 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004f5c:	4603      	mov	r3, r0
		  __new_finish
 8004f5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f60:	4629      	mov	r1, r5
 8004f62:	4620      	mov	r0, r4
 8004f64:	f000 fb88 	bl	8005678 <_ZSt34__uninitialized_move_if_noexcept_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
		  __new_finish += __n;
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	461a      	mov	r2, r3
 8004f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f7a:	4413      	add	r3, r2
 8004f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
		    (__position.base(), this->_M_impl._M_finish,
 8004f7e:	f107 0308 	add.w	r3, r7, #8
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 fac2 	bl	800550c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	681c      	ldr	r4, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	685d      	ldr	r5, [r3, #4]
		     __new_finish, _M_get_Tp_allocator());
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7ff fca4 	bl	80048e0 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004f98:	4603      	mov	r3, r0
		  __new_finish
 8004f9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004f9c:	4629      	mov	r1, r5
 8004f9e:	4620      	mov	r0, r4
 8004fa0:	f000 fb6a 	bl	8005678 <_ZSt34__uninitialized_move_if_noexcept_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681c      	ldr	r4, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff fc94 	bl	80048e0 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8004fb8:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004fba:	461a      	mov	r2, r3
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	f7ff fc99 	bl	80048f6 <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 8004fce:	461a      	mov	r2, r3
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8004fd6:	109b      	asrs	r3, r3, #2
 8004fd8:	4a20      	ldr	r2, [pc, #128]	; (800505c <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x310>)
 8004fda:	fb02 f303 	mul.w	r3, r2, r3
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f7ff fe20 	bl	8004c24 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j>
	      this->_M_impl._M_start = __new_start;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fe8:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_finish;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fee:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8004ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	4413      	add	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	461a      	mov	r2, r3
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	441a      	add	r2, r3
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	609a      	str	r2, [r3, #8]
    }
 8005004:	e044      	b.n	8005090 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x344>
	      value_type __x_copy = __x;
 8005006:	f107 0314 	add.w	r3, r7, #20
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff fa79 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 8005010:	f001 fa6e 	bl	80064f0 <__cxa_end_cleanup>
 8005014:	4603      	mov	r3, r0
	      __catch(...)
 8005016:	4618      	mov	r0, r3
 8005018:	f001 f9a7 	bl	800636a <__cxa_begin_catch>
		  if (!__new_finish)
 800501c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800501e:	2b00      	cmp	r3, #0
 8005020:	d120      	bne.n	8005064 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x318>
		    std::_Destroy(__new_start + __elems_before,
 8005022:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005024:	4613      	mov	r3, r2
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	461a      	mov	r2, r3
 800502e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005030:	189c      	adds	r4, r3, r2
				  __new_start + __elems_before + __n,
 8005032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	441a      	add	r2, r3
 8005038:	4613      	mov	r3, r2
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	4413      	add	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	461a      	mov	r2, r3
		    std::_Destroy(__new_start + __elems_before,
 8005042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005044:	189d      	adds	r5, r3, r2
				  _M_get_Tp_allocator());
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff fc49 	bl	80048e0 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 800504e:	4603      	mov	r3, r0
		    std::_Destroy(__new_start + __elems_before,
 8005050:	461a      	mov	r2, r3
 8005052:	4629      	mov	r1, r5
 8005054:	4620      	mov	r0, r4
 8005056:	f7ff fc4e 	bl	80048f6 <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
 800505a:	e00d      	b.n	8005078 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x32c>
 800505c:	aaaaaaab 	.word	0xaaaaaaab
 8005060:	08007ae4 	.word	0x08007ae4
				  _M_get_Tp_allocator());
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	4618      	mov	r0, r3
 8005068:	f7ff fc3a 	bl	80048e0 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 800506c:	4603      	mov	r3, r0
		    std::_Destroy(__new_start, __new_finish,
 800506e:	461a      	mov	r2, r3
 8005070:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005072:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005074:	f7ff fc3f 	bl	80048f6 <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
		  _M_deallocate(__new_start, __len);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800507c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800507e:	4618      	mov	r0, r3
 8005080:	f7ff fdd0 	bl	8004c24 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j>
		  __throw_exception_again;
 8005084:	f001 f9f4 	bl	8006470 <__cxa_rethrow>
	      __catch(...)
 8005088:	f001 f999 	bl	80063be <__cxa_end_catch>
 800508c:	f001 fa30 	bl	80064f0 <__cxa_end_cleanup>
    }
 8005090:	bf00      	nop
 8005092:	3744      	adds	r7, #68	; 0x44
 8005094:	46bd      	mov	sp, r7
 8005096:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005098 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh>:
    vector<_Tp, _Alloc>::
 80050b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ba:	b08f      	sub	sp, #60	; 0x3c
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
      if (__n != 0)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f000 814f 	beq.w	800536c <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x2b4>
	  if (size_type(this->_M_impl._M_end_of_storage
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689b      	ldr	r3, [r3, #8]
			- this->_M_impl._M_finish) >= __n)
 80050d2:	461a      	mov	r2, r3
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	461a      	mov	r2, r3
	  if (size_type(this->_M_impl._M_end_of_storage
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	429a      	cmp	r2, r3
 80050e0:	f0c0 8092 	bcc.w	8005208 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x150>
	      value_type __x_copy = __x;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	75fb      	strb	r3, [r7, #23]
	      const size_type __elems_after = end() - __position;
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f7ff fd0a 	bl	8004b04 <_ZNSt6vectorIhSaIhEE3endEv>
 80050f0:	4603      	mov	r3, r0
 80050f2:	61bb      	str	r3, [r7, #24]
 80050f4:	f107 0208 	add.w	r2, r7, #8
 80050f8:	f107 0318 	add.w	r3, r7, #24
 80050fc:	4611      	mov	r1, r2
 80050fe:	4618      	mov	r0, r3
 8005100:	f000 facc 	bl	800569c <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8005104:	4603      	mov	r3, r0
 8005106:	633b      	str	r3, [r7, #48]	; 0x30
	      pointer __old_finish(this->_M_impl._M_finish);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	62fb      	str	r3, [r7, #44]	; 0x2c
	      if (__elems_after > __n)
 800510e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	429a      	cmp	r2, r3
 8005114:	d93e      	bls.n	8005194 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0xdc>
		  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	425b      	negs	r3, r3
 800511e:	18d4      	adds	r4, r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	685d      	ldr	r5, [r3, #4]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	685e      	ldr	r6, [r3, #4]
					      _M_get_Tp_allocator());
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff fb7f 	bl	800482e <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8005130:	4603      	mov	r3, r0
		  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 8005132:	4632      	mov	r2, r6
 8005134:	4629      	mov	r1, r5
 8005136:	4620      	mov	r0, r4
 8005138:	f000 fac5 	bl	80056c6 <_ZSt22__uninitialized_move_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
		  this->_M_impl._M_finish += __n;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	441a      	add	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	605a      	str	r2, [r3, #4]
		  _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 8005148:	f107 0308 	add.w	r3, r7, #8
 800514c:	4618      	mov	r0, r3
 800514e:	f000 facc 	bl	80056ea <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8005152:	4603      	mov	r3, r0
 8005154:	6818      	ldr	r0, [r3, #0]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	425b      	negs	r3, r3
 800515a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800515c:	4413      	add	r3, r2
 800515e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005160:	4619      	mov	r1, r3
 8005162:	f000 facd 	bl	8005700 <_ZSt13copy_backwardIPhS0_ET0_T_S2_S1_>
		  std::fill(__position.base(), __position.base() + __n,
 8005166:	f107 0308 	add.w	r3, r7, #8
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fabd 	bl	80056ea <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8005170:	4603      	mov	r3, r0
 8005172:	681c      	ldr	r4, [r3, #0]
 8005174:	f107 0308 	add.w	r3, r7, #8
 8005178:	4618      	mov	r0, r3
 800517a:	f000 fab6 	bl	80056ea <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800517e:	4603      	mov	r3, r0
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4413      	add	r3, r2
 8005186:	f107 0217 	add.w	r2, r7, #23
 800518a:	4619      	mov	r1, r3
 800518c:	4620      	mov	r0, r4
 800518e:	f000 facf 	bl	8005730 <_ZSt4fillIPhhEvT_S1_RKT0_>
    }
 8005192:	e0eb      	b.n	800536c <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x2b4>
		    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	685c      	ldr	r4, [r3, #4]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519c:	1ad5      	subs	r5, r2, r3
						  _M_get_Tp_allocator());
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7ff fb44 	bl	800482e <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80051a6:	4603      	mov	r3, r0
		    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 80051a8:	f107 0217 	add.w	r2, r7, #23
 80051ac:	4629      	mov	r1, r5
 80051ae:	4620      	mov	r0, r4
 80051b0:	f7ff fd89 	bl	8004cc6 <_ZSt24__uninitialized_fill_n_aIPhjhhET_S1_T0_RKT1_RSaIT2_E>
 80051b4:	4602      	mov	r2, r0
		  this->_M_impl._M_finish =
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	605a      	str	r2, [r3, #4]
		  std::__uninitialized_move_a(__position.base(), __old_finish,
 80051ba:	f107 0308 	add.w	r3, r7, #8
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fa93 	bl	80056ea <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 80051c4:	4603      	mov	r3, r0
 80051c6:	681c      	ldr	r4, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	685d      	ldr	r5, [r3, #4]
					      _M_get_Tp_allocator());
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7ff fb2d 	bl	800482e <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80051d4:	4603      	mov	r3, r0
		  std::__uninitialized_move_a(__position.base(), __old_finish,
 80051d6:	462a      	mov	r2, r5
 80051d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051da:	4620      	mov	r0, r4
 80051dc:	f000 fa73 	bl	80056c6 <_ZSt22__uninitialized_move_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
		  this->_M_impl._M_finish += __elems_after;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e6:	441a      	add	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	605a      	str	r2, [r3, #4]
		  std::fill(__position.base(), __old_finish, __x_copy);
 80051ec:	f107 0308 	add.w	r3, r7, #8
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 fa7a 	bl	80056ea <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 80051f6:	4603      	mov	r3, r0
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f107 0217 	add.w	r2, r7, #23
 80051fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005200:	4618      	mov	r0, r3
 8005202:	f000 fa95 	bl	8005730 <_ZSt4fillIPhhEvT_S1_RKT0_>
    }
 8005206:	e0b1      	b.n	800536c <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x2b4>
		_M_check_len(__n, "vector::_M_fill_insert");
 8005208:	4a5a      	ldr	r2, [pc, #360]	; (8005374 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x2bc>)
 800520a:	6879      	ldr	r1, [r7, #4]
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 faa6 	bl	800575e <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 8005212:	4603      	mov	r3, r0
 8005214:	62bb      	str	r3, [r7, #40]	; 0x28
	      const size_type __elems_before = __position - begin();
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 fae8 	bl	80057ec <_ZNSt6vectorIhSaIhEE5beginEv>
 800521c:	4603      	mov	r3, r0
 800521e:	61fb      	str	r3, [r7, #28]
 8005220:	f107 021c 	add.w	r2, r7, #28
 8005224:	f107 0308 	add.w	r3, r7, #8
 8005228:	4611      	mov	r1, r2
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fa36 	bl	800569c <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8005230:	4603      	mov	r3, r0
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
	      pointer __new_start(this->_M_allocate(__len));
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005238:	4618      	mov	r0, r3
 800523a:	f000 f903 	bl	8005444 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 800523e:	4603      	mov	r3, r0
 8005240:	623b      	str	r3, [r7, #32]
	      pointer __new_finish(__new_start);
 8005242:	6a3b      	ldr	r3, [r7, #32]
 8005244:	637b      	str	r3, [r7, #52]	; 0x34
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 8005246:	6a3a      	ldr	r2, [r7, #32]
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	18d4      	adds	r4, r2, r3
						_M_get_Tp_allocator());
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff faed 	bl	800482e <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8005254:	4603      	mov	r3, r0
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 8005256:	683a      	ldr	r2, [r7, #0]
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	4620      	mov	r0, r4
 800525c:	f7ff fd33 	bl	8004cc6 <_ZSt24__uninitialized_fill_n_aIPhjhhET_S1_T0_RKT1_RSaIT2_E>
		  __new_finish = pointer();
 8005260:	2300      	movs	r3, #0
 8005262:	637b      	str	r3, [r7, #52]	; 0x34
		    (this->_M_impl._M_start, __position.base(),
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681c      	ldr	r4, [r3, #0]
 8005268:	f107 0308 	add.w	r3, r7, #8
 800526c:	4618      	mov	r0, r3
 800526e:	f000 fa3c 	bl	80056ea <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8005272:	4603      	mov	r3, r0
 8005274:	681d      	ldr	r5, [r3, #0]
		     __new_start, _M_get_Tp_allocator());
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	4618      	mov	r0, r3
 800527a:	f7ff fad8 	bl	800482e <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800527e:	4603      	mov	r3, r0
		  __new_finish
 8005280:	6a3a      	ldr	r2, [r7, #32]
 8005282:	4629      	mov	r1, r5
 8005284:	4620      	mov	r0, r4
 8005286:	f000 fac1 	bl	800580c <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 800528a:	4603      	mov	r3, r0
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
		  __new_finish += __n;
 800528e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4413      	add	r3, r2
 8005294:	637b      	str	r3, [r7, #52]	; 0x34
		    (__position.base(), this->_M_impl._M_finish,
 8005296:	f107 0308 	add.w	r3, r7, #8
 800529a:	4618      	mov	r0, r3
 800529c:	f000 fa25 	bl	80056ea <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 80052a0:	4603      	mov	r3, r0
 80052a2:	681c      	ldr	r4, [r3, #0]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	685d      	ldr	r5, [r3, #4]
		     __new_finish, _M_get_Tp_allocator());
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7ff fabf 	bl	800482e <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80052b0:	4603      	mov	r3, r0
		  __new_finish
 80052b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052b4:	4629      	mov	r1, r5
 80052b6:	4620      	mov	r0, r4
 80052b8:	f000 faa8 	bl	800580c <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 80052bc:	4603      	mov	r3, r0
 80052be:	637b      	str	r3, [r7, #52]	; 0x34
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681c      	ldr	r4, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4618      	mov	r0, r3
 80052cc:	f7ff faaf 	bl	800482e <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 80052d0:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80052d2:	461a      	mov	r2, r3
 80052d4:	4629      	mov	r1, r5
 80052d6:	4620      	mov	r0, r4
 80052d8:	f7ff fab4 	bl	8004844 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 80052e6:	461a      	mov	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 80052ee:	461a      	mov	r2, r3
 80052f0:	f7ff fc57 	bl	8004ba2 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __new_start;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a3a      	ldr	r2, [r7, #32]
 80052f8:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_finish;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052fe:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005300:	6a3a      	ldr	r2, [r7, #32]
 8005302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005304:	441a      	add	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	609a      	str	r2, [r3, #8]
    }
 800530a:	e02f      	b.n	800536c <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x2b4>
 800530c:	4603      	mov	r3, r0
	      __catch(...)
 800530e:	4618      	mov	r0, r3
 8005310:	f001 f82b 	bl	800636a <__cxa_begin_catch>
		  if (!__new_finish)
 8005314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005316:	2b00      	cmp	r3, #0
 8005318:	d112      	bne.n	8005340 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x288>
		    std::_Destroy(__new_start + __elems_before,
 800531a:	6a3a      	ldr	r2, [r7, #32]
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	18d4      	adds	r4, r2, r3
				  __new_start + __elems_before + __n,
 8005320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4413      	add	r3, r2
		    std::_Destroy(__new_start + __elems_before,
 8005326:	6a3a      	ldr	r2, [r7, #32]
 8005328:	18d5      	adds	r5, r2, r3
				  _M_get_Tp_allocator());
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4618      	mov	r0, r3
 800532e:	f7ff fa7e 	bl	800482e <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8005332:	4603      	mov	r3, r0
		    std::_Destroy(__new_start + __elems_before,
 8005334:	461a      	mov	r2, r3
 8005336:	4629      	mov	r1, r5
 8005338:	4620      	mov	r0, r4
 800533a:	f7ff fa83 	bl	8004844 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
 800533e:	e009      	b.n	8005354 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x29c>
				  _M_get_Tp_allocator());
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	4618      	mov	r0, r3
 8005344:	f7ff fa73 	bl	800482e <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8005348:	4603      	mov	r3, r0
		    std::_Destroy(__new_start, __new_finish,
 800534a:	461a      	mov	r2, r3
 800534c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800534e:	6a38      	ldr	r0, [r7, #32]
 8005350:	f7ff fa78 	bl	8004844 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
		  _M_deallocate(__new_start, __len);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005358:	6a39      	ldr	r1, [r7, #32]
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff fc21 	bl	8004ba2 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		  __throw_exception_again;
 8005360:	f001 f886 	bl	8006470 <__cxa_rethrow>
	      __catch(...)
 8005364:	f001 f82b 	bl	80063be <__cxa_end_catch>
 8005368:	f001 f8c2 	bl	80064f0 <__cxa_end_cleanup>
    }
 800536c:	bf00      	nop
 800536e:	373c      	adds	r7, #60	; 0x3c
 8005370:	46bd      	mov	sp, r7
 8005372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005374:	08007ae4 	.word	0x08007ae4

08005378 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE10deallocateERS1_Phj>:
    static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
    { __a.deallocate(__p, __n); }
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f000 fa51 	bl	8005830 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 800538e:	bf00      	nop
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005396:	b480      	push	{r7}
 8005398:	b083      	sub	sp, #12
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
 800539e:	6039      	str	r1, [r7, #0]
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <_ZNSaISt6vectorIhSaIhEEEC1Ev>:
      allocator() throw() { }
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f000 fa48 	bl	800584a <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEEC1Ev>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4618      	mov	r0, r3
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEED1Ev>:
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4618      	mov	r0, r3
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIhSaIhEEEE10deallocateERS4_PS3_j>:
    static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	607a      	str	r2, [r7, #4]
    { __a.deallocate(__p, __n); }
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f000 fa38 	bl	8005860 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE10deallocateEPS3_j>
 80053f0:	bf00      	nop
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d00a      	beq.n	8005420 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fa35 	bl	800587a <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>
 8005410:	4603      	mov	r3, r0
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fa3c 	bl	8005890 <_ZSt8_DestroyISt6vectorIhSaIhEEEvPT_>
	  for (; __first != __last; ++__first)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	330c      	adds	r3, #12
 800541c:	607b      	str	r3, [r7, #4]
 800541e:	e7f0      	b.n	8005402 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_+0xa>
	}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) throw()
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8005432:	6839      	ldr	r1, [r7, #0]
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 fa36 	bl	80058a6 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4618      	mov	r0, r3
 800543e:	3708      	adds	r7, #8
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d006      	beq.n	8005462 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6839      	ldr	r1, [r7, #0]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fa30 	bl	80058be <_ZN9__gnu_cxx14__alloc_traitsISaIhEE8allocateERS1_j>
 800545e:	4603      	mov	r3, r0
 8005460:	e000      	b.n	8005464 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 8005462:	2300      	movs	r3, #0
      }
 8005464:	4618      	mov	r0, r3
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <_ZSt20uninitialized_fill_nIPhjhET_S1_T0_RKT1_>:
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
      const bool __assignable = true;
 8005478:	2301      	movs	r3, #1
 800547a:	75fb      	strb	r3, [r7, #23]
	__uninit_fill_n(__first, __n, __x);
 800547c:	687a      	ldr	r2, [r7, #4]
 800547e:	68b9      	ldr	r1, [r7, #8]
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 fa2b 	bl	80058dc <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPhjhEET_S3_T0_RKT1_>
 8005486:	4603      	mov	r3, r0
    }
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}

08005490 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	68b9      	ldr	r1, [r7, #8]
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 fa2b 	bl	80058fc <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 80054a6:	4603      	mov	r3, r0
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80054b0:	b590      	push	{r4, r7, lr}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f826 	bl	800550c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 80054c0:	4603      	mov	r3, r0
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	461c      	mov	r4, r3
 80054c6:	6838      	ldr	r0, [r7, #0]
 80054c8:	f000 f820 	bl	800550c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 80054cc:	4603      	mov	r3, r0
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	1ae3      	subs	r3, r4, r3
 80054d2:	109b      	asrs	r3, r3, #2
 80054d4:	4a03      	ldr	r2, [pc, #12]	; (80054e4 <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x34>)
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	4618      	mov	r0, r3
 80054dc:	370c      	adds	r7, #12
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd90      	pop	{r4, r7, pc}
 80054e2:	bf00      	nop
 80054e4:	aaaaaaab 	.word	0xaaaaaaab

080054e8 <_ZSt22__uninitialized_move_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
 80054f4:	603b      	str	r3, [r7, #0]
					 __result, __alloc);
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	68b9      	ldr	r1, [r7, #8]
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f000 fa15 	bl	800592c <_ZSt22__uninitialized_copy_aIPSt6vectorIhSaIhEES3_S2_ET0_T_S5_S4_RSaIT1_E>
 8005502:	4603      	mov	r3, r0
    }
 8005504:	4618      	mov	r0, r3
 8005506:	3710      	adds	r7, #16
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4618      	mov	r0, r3
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <_ZSt13copy_backwardIPSt6vectorIhSaIhEES3_ET0_T_S5_S4_>:
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8005522:	b590      	push	{r4, r7, lr}
 8005524:	b085      	sub	sp, #20
 8005526:	af00      	add	r7, sp, #0
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 800552e:	68f8      	ldr	r0, [r7, #12]
 8005530:	f000 fa0d 	bl	800594e <_ZSt12__miter_baseIPSt6vectorIhSaIhEEET_S4_>
 8005534:	4604      	mov	r4, r0
 8005536:	68b8      	ldr	r0, [r7, #8]
 8005538:	f000 fa09 	bl	800594e <_ZSt12__miter_baseIPSt6vectorIhSaIhEEET_S4_>
 800553c:	4603      	mov	r3, r0
	       __result));
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	4619      	mov	r1, r3
 8005542:	4620      	mov	r0, r4
 8005544:	f000 fa0e 	bl	8005964 <_ZSt23__copy_move_backward_a2ILb0EPSt6vectorIhSaIhEES3_ET1_T0_S5_S4_>
 8005548:	4603      	mov	r3, r0
    }
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	bd90      	pop	{r4, r7, pc}

08005552 <_ZSt4fillIPSt6vectorIhSaIhEES2_EvT_S4_RKT0_>:
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8005552:	b590      	push	{r4, r7, lr}
 8005554:	b085      	sub	sp, #20
 8005556:	af00      	add	r7, sp, #0
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f000 fa1c 	bl	800599c <_ZSt12__niter_baseIPSt6vectorIhSaIhEEET_S4_>
 8005564:	4604      	mov	r4, r0
 8005566:	68b8      	ldr	r0, [r7, #8]
 8005568:	f000 fa18 	bl	800599c <_ZSt12__niter_baseIPSt6vectorIhSaIhEEET_S4_>
 800556c:	4603      	mov	r3, r0
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	4619      	mov	r1, r3
 8005572:	4620      	mov	r0, r4
 8005574:	f000 fa1d 	bl	80059b2 <_ZSt8__fill_aIPSt6vectorIhSaIhEES2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SB_RKS7_>
		    __value);
    }
 8005578:	bf00      	nop
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	bd90      	pop	{r4, r7, pc}

08005580 <_ZSt24__uninitialized_fill_n_aIPSt6vectorIhSaIhEEjS2_S2_ET_S4_T0_RKT1_RSaIT2_E>:
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
 800558c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_fill_n(__first, __n, __x); }
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	68b9      	ldr	r1, [r7, #8]
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	f000 fa23 	bl	80059de <_ZSt20uninitialized_fill_nIPSt6vectorIhSaIhEEjS2_ET_S4_T0_RKT1_>
 8005598:	4603      	mov	r3, r0
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80055a2:	b590      	push	{r4, r7, lr}
 80055a4:	b087      	sub	sp, #28
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f000 fa27 	bl	8005a02 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE8max_sizeEv>
 80055b4:	4604      	mov	r4, r0
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f7ff fa54 	bl	8004a64 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 80055bc:	4603      	mov	r3, r0
 80055be:	1ae2      	subs	r2, r4, r3
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	bf34      	ite	cc
 80055c6:	2301      	movcc	r3, #1
 80055c8:	2300      	movcs	r3, #0
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f001 fae4 	bl	8006b9e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f7ff fa44 	bl	8004a64 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 80055dc:	4604      	mov	r4, r0
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f7ff fa40 	bl	8004a64 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 80055e4:	4603      	mov	r3, r0
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	f107 0208 	add.w	r2, r7, #8
 80055ec:	f107 0310 	add.w	r3, r7, #16
 80055f0:	4611      	mov	r1, r2
 80055f2:	4618      	mov	r0, r3
 80055f4:	f000 fa16 	bl	8005a24 <_ZSt3maxIjERKT_S2_S2_>
 80055f8:	4603      	mov	r3, r0
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4423      	add	r3, r4
 80055fe:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f7ff fa2f 	bl	8004a64 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 8005606:	4602      	mov	r2, r0
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	429a      	cmp	r2, r3
 800560c:	d806      	bhi.n	800561c <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc+0x7a>
 800560e:	68f8      	ldr	r0, [r7, #12]
 8005610:	f000 f9f7 	bl	8005a02 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE8max_sizeEv>
 8005614:	4602      	mov	r2, r0
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	429a      	cmp	r2, r3
 800561a:	d204      	bcs.n	8005626 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc+0x84>
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 f9f0 	bl	8005a02 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE8max_sizeEv>
 8005622:	4603      	mov	r3, r0
 8005624:	e000      	b.n	8005628 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc+0x86>
 8005626:	697b      	ldr	r3, [r7, #20]
      }
 8005628:	4618      	mov	r0, r3
 800562a:	371c      	adds	r7, #28
 800562c:	46bd      	mov	sp, r7
 800562e:	bd90      	pop	{r4, r7, pc}

08005630 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	f107 030c 	add.w	r3, r7, #12
 800563e:	4611      	mov	r1, r2
 8005640:	4618      	mov	r0, r3
 8005642:	f7ff fb73 	bl	8004d2c <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEC1ERKS4_>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d006      	beq.n	800566e <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE11_M_allocateEj+0x1e>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6839      	ldr	r1, [r7, #0]
 8005664:	4618      	mov	r0, r3
 8005666:	f000 f9f1 	bl	8005a4c <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIhSaIhEEEE8allocateERS4_j>
 800566a:	4603      	mov	r3, r0
 800566c:	e000      	b.n	8005670 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE11_M_allocateEj+0x20>
 800566e:	2300      	movs	r3, #0
      }
 8005670:	4618      	mov	r0, r3
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <_ZSt34__uninitialized_move_if_noexcept_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
 8005684:	603b      	str	r3, [r7, #0]
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	68b9      	ldr	r1, [r7, #8]
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 f94d 	bl	800592c <_ZSt22__uninitialized_copy_aIPSt6vectorIhSaIhEES3_S2_ET0_T_S5_S4_RSaIT1_E>
 8005692:	4603      	mov	r3, r0
    }
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800569c:	b590      	push	{r4, r7, lr}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f81f 	bl	80056ea <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 80056ac:	4603      	mov	r3, r0
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	461c      	mov	r4, r3
 80056b2:	6838      	ldr	r0, [r7, #0]
 80056b4:	f000 f819 	bl	80056ea <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 80056b8:	4603      	mov	r3, r0
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	1ae3      	subs	r3, r4, r3
 80056be:	4618      	mov	r0, r3
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd90      	pop	{r4, r7, pc}

080056c6 <_ZSt22__uninitialized_move_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 80056c6:	b580      	push	{r7, lr}
 80056c8:	b084      	sub	sp, #16
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	60f8      	str	r0, [r7, #12]
 80056ce:	60b9      	str	r1, [r7, #8]
 80056d0:	607a      	str	r2, [r7, #4]
 80056d2:	603b      	str	r3, [r7, #0]
					 __result, __alloc);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	68b9      	ldr	r1, [r7, #8]
 80056da:	68f8      	ldr	r0, [r7, #12]
 80056dc:	f000 f9c5 	bl	8005a6a <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
 80056e0:	4603      	mov	r3, r0
    }
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4618      	mov	r0, r3
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <_ZSt13copy_backwardIPhS0_ET0_T_S2_S1_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8005700:	b590      	push	{r4, r7, lr}
 8005702:	b085      	sub	sp, #20
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	f000 f9bd 	bl	8005a8c <_ZSt12__miter_baseIPhET_S1_>
 8005712:	4604      	mov	r4, r0
 8005714:	68b8      	ldr	r0, [r7, #8]
 8005716:	f000 f9b9 	bl	8005a8c <_ZSt12__miter_baseIPhET_S1_>
 800571a:	4603      	mov	r3, r0
	       __result));
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	4619      	mov	r1, r3
 8005720:	4620      	mov	r0, r4
 8005722:	f000 f9be 	bl	8005aa2 <_ZSt23__copy_move_backward_a2ILb0EPhS0_ET1_T0_S2_S1_>
 8005726:	4603      	mov	r3, r0
    }
 8005728:	4618      	mov	r0, r3
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	bd90      	pop	{r4, r7, pc}

08005730 <_ZSt4fillIPhhEvT_S1_RKT0_>:
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 8005730:	b590      	push	{r4, r7, lr}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	607a      	str	r2, [r7, #4]
      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 f9cc 	bl	8005ada <_ZSt12__niter_baseIPhET_S1_>
 8005742:	4604      	mov	r4, r0
 8005744:	68b8      	ldr	r0, [r7, #8]
 8005746:	f000 f9c8 	bl	8005ada <_ZSt12__niter_baseIPhET_S1_>
 800574a:	4603      	mov	r3, r0
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	4619      	mov	r1, r3
 8005750:	4620      	mov	r0, r4
 8005752:	f000 f9cd 	bl	8005af0 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
    }
 8005756:	bf00      	nop
 8005758:	3714      	adds	r7, #20
 800575a:	46bd      	mov	sp, r7
 800575c:	bd90      	pop	{r4, r7, pc}

0800575e <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800575e:	b590      	push	{r4, r7, lr}
 8005760:	b087      	sub	sp, #28
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 f9da 	bl	8005b24 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 8005770:	4604      	mov	r4, r0
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f7ff f917 	bl	80049a6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8005778:	4603      	mov	r3, r0
 800577a:	1ae2      	subs	r2, r4, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	429a      	cmp	r2, r3
 8005780:	bf34      	ite	cc
 8005782:	2301      	movcc	r3, #1
 8005784:	2300      	movcs	r3, #0
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f001 fa06 	bl	8006b9e <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f7ff f907 	bl	80049a6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8005798:	4604      	mov	r4, r0
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f7ff f903 	bl	80049a6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80057a0:	4603      	mov	r3, r0
 80057a2:	613b      	str	r3, [r7, #16]
 80057a4:	f107 0208 	add.w	r2, r7, #8
 80057a8:	f107 0310 	add.w	r3, r7, #16
 80057ac:	4611      	mov	r1, r2
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 f938 	bl	8005a24 <_ZSt3maxIjERKT_S2_S2_>
 80057b4:	4603      	mov	r3, r0
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4423      	add	r3, r4
 80057ba:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f7ff f8f2 	bl	80049a6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 80057c2:	4602      	mov	r2, r0
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d806      	bhi.n	80057d8 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 f9aa 	bl	8005b24 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80057d0:	4602      	mov	r2, r0
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d204      	bcs.n	80057e2 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 f9a3 	bl	8005b24 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 80057de:	4603      	mov	r3, r0
 80057e0:	e000      	b.n	80057e4 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 80057e2:	697b      	ldr	r3, [r7, #20]
      }
 80057e4:	4618      	mov	r0, r3
 80057e6:	371c      	adds	r7, #28
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd90      	pop	{r4, r7, pc}

080057ec <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	f107 030c 	add.w	r3, r7, #12
 80057fa:	4611      	mov	r1, r2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f7ff fc4b 	bl	8005098 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	68b9      	ldr	r1, [r7, #8]
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 f922 	bl	8005a6a <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
 8005826:	4603      	mov	r3, r0
    }
 8005828:	4618      	mov	r0, r3
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	60f8      	str	r0, [r7, #12]
 8005838:	60b9      	str	r1, [r7, #8]
 800583a:	607a      	str	r2, [r7, #4]
      { ::operator delete(__p); }
 800583c:	68b8      	ldr	r0, [r7, #8]
 800583e:	f000 fd70 	bl	8006322 <_ZdlPv>
 8005842:	bf00      	nop
 8005844:	3710      	adds	r7, #16
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800584a:	b480      	push	{r7}
 800584c:	b083      	sub	sp, #12
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE10deallocateEPS3_j>:
      deallocate(pointer __p, size_type)
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
      { ::operator delete(__p); }
 800586c:	68b8      	ldr	r0, [r7, #8]
 800586e:	f000 fd58 	bl	8006322 <_ZdlPv>
 8005872:	bf00      	nop
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
    {
      return reinterpret_cast<_Tp*>
	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
 8005882:	687b      	ldr	r3, [r7, #4]
    }
 8005884:	4618      	mov	r0, r3
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <_ZSt8_DestroyISt6vectorIhSaIhEEEvPT_>:
    _Destroy(_Tp* __pointer)
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f7fe fe32 	bl	8004502 <_ZNSt6vectorIhSaIhEED1Ev>
 800589e:	bf00      	nop
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	6039      	str	r1, [r7, #0]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4618      	mov	r0, r3
 80058b4:	370c      	adds	r7, #12
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <_ZN9__gnu_cxx14__alloc_traitsISaIhEE8allocateERS1_j>:
    allocate(_Alloc& __a, size_type __n)
 80058be:	b580      	push	{r7, lr}
 80058c0:	b082      	sub	sp, #8
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	6039      	str	r1, [r7, #0]
    { return __a.allocate(__n); }
 80058c8:	2200      	movs	r2, #0
 80058ca:	6839      	ldr	r1, [r7, #0]
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 f93a 	bl	8005b46 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 80058d2:	4603      	mov	r3, r0
 80058d4:	4618      	mov	r0, r3
 80058d6:	3708      	adds	r7, #8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPhjhEET_S3_T0_RKT1_>:
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
        { return std::fill_n(__first, __n, __x); }
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f946 	bl	8005b7e <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 80058f2:	4603      	mov	r3, r0
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 80058fc:	b590      	push	{r4, r7, lr}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f94c 	bl	8005ba6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 800590e:	4604      	mov	r4, r0
 8005910:	68b8      	ldr	r0, [r7, #8]
 8005912:	f000 f948 	bl	8005ba6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8005916:	4603      	mov	r3, r0
	       __result));
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	4619      	mov	r1, r3
 800591c:	4620      	mov	r0, r4
 800591e:	f000 f94d 	bl	8005bbc <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>
 8005922:	4603      	mov	r3, r0
    }
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	bd90      	pop	{r4, r7, pc}

0800592c <_ZSt22__uninitialized_copy_aIPSt6vectorIhSaIhEES3_S2_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	68b9      	ldr	r1, [r7, #8]
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f000 f958 	bl	8005bf4 <_ZSt18uninitialized_copyIPSt6vectorIhSaIhEES3_ET0_T_S5_S4_>
 8005944:	4603      	mov	r3, r0
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <_ZSt12__miter_baseIPSt6vectorIhSaIhEEET_S4_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4618      	mov	r0, r3
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <_ZSt23__copy_move_backward_a2ILb0EPSt6vectorIhSaIhEES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8005964:	b5b0      	push	{r4, r5, r7, lr}
 8005966:	b084      	sub	sp, #16
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
		  (std::__niter_base(__first), std::__niter_base(__last),
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 f813 	bl	800599c <_ZSt12__niter_baseIPSt6vectorIhSaIhEEET_S4_>
 8005976:	4604      	mov	r4, r0
 8005978:	68b8      	ldr	r0, [r7, #8]
 800597a:	f000 f80f 	bl	800599c <_ZSt12__niter_baseIPSt6vectorIhSaIhEEET_S4_>
 800597e:	4605      	mov	r5, r0
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f80b 	bl	800599c <_ZSt12__niter_baseIPSt6vectorIhSaIhEEET_S4_>
 8005986:	4603      	mov	r3, r0
		   std::__niter_base(__result)));
 8005988:	461a      	mov	r2, r3
 800598a:	4629      	mov	r1, r5
 800598c:	4620      	mov	r0, r4
 800598e:	f000 f943 	bl	8005c18 <_ZSt22__copy_move_backward_aILb0EPSt6vectorIhSaIhEES3_ET1_T0_S5_S4_>
 8005992:	4603      	mov	r3, r0
    }
 8005994:	4618      	mov	r0, r3
 8005996:	3710      	adds	r7, #16
 8005998:	46bd      	mov	sp, r7
 800599a:	bdb0      	pop	{r4, r5, r7, pc}

0800599c <_ZSt12__niter_baseIPSt6vectorIhSaIhEEET_S4_>:
    __niter_base(_Iterator __it)
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4618      	mov	r0, r3
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <_ZSt8__fill_aIPSt6vectorIhSaIhEES2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SB_RKS7_>:
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	60f8      	str	r0, [r7, #12]
 80059ba:	60b9      	str	r1, [r7, #8]
 80059bc:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d007      	beq.n	80059d6 <_ZSt8__fill_aIPSt6vectorIhSaIhEES2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SB_RKS7_+0x24>
	*__first = __value;
 80059c6:	6879      	ldr	r1, [r7, #4]
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 f937 	bl	8005c3c <_ZNSt6vectorIhSaIhEEaSERKS1_>
      for (; __first != __last; ++__first)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	330c      	adds	r3, #12
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	e7f3      	b.n	80059be <_ZSt8__fill_aIPSt6vectorIhSaIhEES2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SB_RKS7_+0xc>
    }
 80059d6:	bf00      	nop
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <_ZSt20uninitialized_fill_nIPSt6vectorIhSaIhEEjS2_ET_S4_T0_RKT1_>:
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 80059de:	b580      	push	{r7, lr}
 80059e0:	b086      	sub	sp, #24
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	60b9      	str	r1, [r7, #8]
 80059e8:	607a      	str	r2, [r7, #4]
      const bool __assignable = true;
 80059ea:	2301      	movs	r3, #1
 80059ec:	75fb      	strb	r3, [r7, #23]
	__uninit_fill_n(__first, __n, __x);
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	68b9      	ldr	r1, [r7, #8]
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 f9cb 	bl	8005d8e <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIhSaIhEEjS4_EET_S6_T0_RKT1_>
 80059f8:	4603      	mov	r3, r0
    }
 80059fa:	4618      	mov	r0, r3
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 f9f8 	bl	8005e02 <_ZNKSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 8005a12:	4603      	mov	r3, r0
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 f9e8 	bl	8005dea <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIhSaIhEEEE8max_sizeERKS4_>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3708      	adds	r7, #8
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d201      	bcs.n	8005a3e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	e000      	b.n	8005a40 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8005a3e:	687b      	ldr	r3, [r7, #4]
    }
 8005a40:	4618      	mov	r0, r3
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIhSaIhEEEE8allocateERS4_j>:
    allocate(_Alloc& __a, size_type __n)
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
    { return __a.allocate(__n); }
 8005a56:	2200      	movs	r2, #0
 8005a58:	6839      	ldr	r1, [r7, #0]
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f9dc 	bl	8005e18 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8allocateEjPKv>
 8005a60:	4603      	mov	r3, r0
 8005a62:	4618      	mov	r0, r3
 8005a64:	3708      	adds	r7, #8
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b084      	sub	sp, #16
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	607a      	str	r2, [r7, #4]
 8005a76:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	68b9      	ldr	r1, [r7, #8]
 8005a7c:	68f8      	ldr	r0, [r7, #12]
 8005a7e:	f000 f9ec 	bl	8005e5a <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>
 8005a82:	4603      	mov	r3, r0
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <_ZSt12__miter_baseIPhET_S1_>:
    __miter_base(_Iterator __it)
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <_ZSt23__copy_move_backward_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 8005aa2:	b5b0      	push	{r4, r5, r7, lr}
 8005aa4:	b084      	sub	sp, #16
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	607a      	str	r2, [r7, #4]
		  (std::__niter_base(__first), std::__niter_base(__last),
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 f813 	bl	8005ada <_ZSt12__niter_baseIPhET_S1_>
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	68b8      	ldr	r0, [r7, #8]
 8005ab8:	f000 f80f 	bl	8005ada <_ZSt12__niter_baseIPhET_S1_>
 8005abc:	4605      	mov	r5, r0
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f80b 	bl	8005ada <_ZSt12__niter_baseIPhET_S1_>
 8005ac4:	4603      	mov	r3, r0
		   std::__niter_base(__result)));
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	4629      	mov	r1, r5
 8005aca:	4620      	mov	r0, r4
 8005acc:	f000 f9d7 	bl	8005e7e <_ZSt22__copy_move_backward_aILb0EPhS0_ET1_T0_S2_S1_>
 8005ad0:	4603      	mov	r3, r0
    }
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bdb0      	pop	{r4, r5, r7, pc}

08005ada <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 8005ada:	b480      	push	{r7}
 8005adc:	b083      	sub	sp, #12
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 8005b02:	68ba      	ldr	r2, [r7, #8]
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	613b      	str	r3, [r7, #16]
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d005      	beq.n	8005b1c <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 8005b10:	7dfb      	ldrb	r3, [r7, #23]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	4619      	mov	r1, r3
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f001 fb5f 	bl	80071da <memset>
    }
 8005b1c:	bf00      	nop
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fe ff54 	bl	80049dc <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8005b34:	4603      	mov	r3, r0
 8005b36:	4618      	mov	r0, r3
 8005b38:	f000 f9b3 	bl	8005ea2 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE8max_sizeERKS1_>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3708      	adds	r7, #8
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}

08005b46 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = 0)
 8005b46:	b580      	push	{r7, lr}
 8005b48:	b084      	sub	sp, #16
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	60f8      	str	r0, [r7, #12]
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005b52:	68f8      	ldr	r0, [r7, #12]
 8005b54:	f000 f9b1 	bl	8005eba <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	bf34      	ite	cc
 8005b60:	2301      	movcc	r3, #1
 8005b62:	2300      	movcs	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005b6a:	f001 f815 	bl	8006b98 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005b6e:	68b8      	ldr	r0, [r7, #8]
 8005b70:	f000 fc6d 	bl	800644e <_Znwj>
 8005b74:	4603      	mov	r3, r0
      }
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b084      	sub	sp, #16
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	60f8      	str	r0, [r7, #12]
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f7ff ffa5 	bl	8005ada <_ZSt12__niter_baseIPhET_S1_>
 8005b90:	4603      	mov	r3, r0
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	68b9      	ldr	r1, [r7, #8]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 f99b 	bl	8005ed2 <_ZSt10__fill_n_aIjhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_>
 8005b9c:	4603      	mov	r3, r0
    }
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}

08005ba6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>:
    __miter_base(_Iterator __it)
 8005ba6:	b480      	push	{r7}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
    { return __it; }
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8005bbc:	b5b0      	push	{r4, r5, r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 f997 	bl	8005efc <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8005bce:	4604      	mov	r4, r0
 8005bd0:	68b8      	ldr	r0, [r7, #8]
 8005bd2:	f000 f993 	bl	8005efc <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f7ff ff7e 	bl	8005ada <_ZSt12__niter_baseIPhET_S1_>
 8005bde:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8005be0:	461a      	mov	r2, r3
 8005be2:	4629      	mov	r1, r5
 8005be4:	4620      	mov	r0, r4
 8005be6:	f000 f997 	bl	8005f18 <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>
 8005bea:	4603      	mov	r3, r0
    }
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bdb0      	pop	{r4, r5, r7, pc}

08005bf4 <_ZSt18uninitialized_copyIPSt6vectorIhSaIhEES3_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b086      	sub	sp, #24
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
      const bool __assignable = true;
 8005c00:	2301      	movs	r3, #1
 8005c02:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	68b9      	ldr	r1, [r7, #8]
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f000 f997 	bl	8005f3c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIhSaIhEES5_EET0_T_S7_S6_>
 8005c0e:	4603      	mov	r3, r0
    }
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <_ZSt22__copy_move_backward_aILb0EPSt6vectorIhSaIhEES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
			     && __are_same<_ValueType1, _ValueType2>::__value);
 8005c24:	2300      	movs	r3, #0
 8005c26:	75fb      	strb	r3, [r7, #23]
								 __result);
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	68b9      	ldr	r1, [r7, #8]
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 f9b5 	bl	8005f9c <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt6vectorIhSaIhEES6_EET0_T_S8_S7_>
 8005c32:	4603      	mov	r3, r0
    }
 8005c34:	4618      	mov	r0, r3
 8005c36:	3718      	adds	r7, #24
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <_ZNSt6vectorIhSaIhEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 8005c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	f000 809a 	beq.w	8005d84 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x148>
	  const size_type __xlen = __x.size();
 8005c50:	6838      	ldr	r0, [r7, #0]
 8005c52:	f7fe fea8 	bl	80049a6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8005c56:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f9c5 	bl	8005fe8 <_ZNKSt6vectorIhSaIhEE8capacityEv>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	bf34      	ite	cc
 8005c66:	2301      	movcc	r3, #1
 8005c68:	2300      	movcs	r3, #0
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d032      	beq.n	8005cd6 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x9a>
						   __x.end());
 8005c70:	6838      	ldr	r0, [r7, #0]
 8005c72:	f7fe febe 	bl	80049f2 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8005c76:	4604      	mov	r4, r0
 8005c78:	6838      	ldr	r0, [r7, #0]
 8005c7a:	f7fe fece 	bl	8004a1a <_ZNKSt6vectorIhSaIhEE3endEv>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	4622      	mov	r2, r4
 8005c82:	68f9      	ldr	r1, [r7, #12]
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f9bf 	bl	8006008 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>
 8005c8a:	4603      	mov	r3, r0
 8005c8c:	60bb      	str	r3, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681c      	ldr	r4, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fe fdc8 	bl	800482e <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8005c9e:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	4629      	mov	r1, r5
 8005ca4:	4620      	mov	r0, r4
 8005ca6:	f7fe fdcd 	bl	8004844 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	f7fe ff70 	bl	8004ba2 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __tmp;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	441a      	add	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	609a      	str	r2, [r3, #8]
 8005cd4:	e050      	b.n	8005d78 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x13c>
	  else if (size() >= __xlen)
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f7fe fe65 	bl	80049a6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	bf2c      	ite	cs
 8005ce4:	2301      	movcs	r3, #1
 8005ce6:	2300      	movcc	r3, #0
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d020      	beq.n	8005d30 <_ZNSt6vectorIhSaIhEEaSERKS1_+0xf4>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8005cee:	6838      	ldr	r0, [r7, #0]
 8005cf0:	f7fe fe7f 	bl	80049f2 <_ZNKSt6vectorIhSaIhEE5beginEv>
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	6838      	ldr	r0, [r7, #0]
 8005cf8:	f7fe fe8f 	bl	8004a1a <_ZNKSt6vectorIhSaIhEE3endEv>
 8005cfc:	4605      	mov	r5, r0
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7ff fd74 	bl	80057ec <_ZNSt6vectorIhSaIhEE5beginEv>
 8005d04:	4603      	mov	r3, r0
 8005d06:	461a      	mov	r2, r3
 8005d08:	4629      	mov	r1, r5
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	f000 f9aa 	bl	8006064 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>
 8005d10:	4604      	mov	r4, r0
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fe fef6 	bl	8004b04 <_ZNSt6vectorIhSaIhEE3endEv>
 8005d18:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fe fd86 	bl	800482e <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8005d22:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 8005d24:	461a      	mov	r2, r3
 8005d26:	4629      	mov	r1, r5
 8005d28:	4620      	mov	r0, r4
 8005d2a:	f000 f9b3 	bl	8006094 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>
 8005d2e:	e023      	b.n	8005d78 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x13c>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681d      	ldr	r5, [r3, #0]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681c      	ldr	r4, [r3, #0]
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7fe fe34 	bl	80049a6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	18e1      	adds	r1, r4, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	461a      	mov	r2, r3
 8005d48:	4628      	mov	r0, r5
 8005d4a:	f000 f9b1 	bl	80060b0 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	681c      	ldr	r4, [r3, #0]
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f7fe fe27 	bl	80049a6 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7fe fd61 	bl	800482e <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8005d6c:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 8005d6e:	4632      	mov	r2, r6
 8005d70:	4629      	mov	r1, r5
 8005d72:	4620      	mov	r0, r4
 8005d74:	f7ff fe79 	bl	8005a6a <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	441a      	add	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	605a      	str	r2, [r3, #4]
      return *this;
 8005d84:	687b      	ldr	r3, [r7, #4]
    }
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d8e <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIhSaIhEEjS4_EET_S6_T0_RKT1_>:
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b086      	sub	sp, #24
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	60f8      	str	r0, [r7, #12]
 8005d96:	60b9      	str	r1, [r7, #8]
 8005d98:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __first;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	617b      	str	r3, [r7, #20]
	      for (; __n > 0; --__n, ++__cur)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00e      	beq.n	8005dc2 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIhSaIhEEjS4_EET_S6_T0_RKT1_+0x34>
		std::_Construct(std::__addressof(*__cur), __x);
 8005da4:	6978      	ldr	r0, [r7, #20]
 8005da6:	f7ff fd68 	bl	800587a <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>
 8005daa:	4603      	mov	r3, r0
 8005dac:	6879      	ldr	r1, [r7, #4]
 8005dae:	4618      	mov	r0, r3
 8005db0:	f000 f996 	bl	80060e0 <_ZSt10_ConstructISt6vectorIhSaIhEES2_EvPT_RKT0_>
	      for (; __n > 0; --__n, ++__cur)
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	60bb      	str	r3, [r7, #8]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	330c      	adds	r3, #12
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	e7ed      	b.n	8005d9e <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIhSaIhEEjS4_EET_S6_T0_RKT1_+0x10>
	      return __cur;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	e00d      	b.n	8005de2 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIhSaIhEEjS4_EET_S6_T0_RKT1_+0x54>
 8005dc6:	4603      	mov	r3, r0
	  __catch(...)
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 face 	bl	800636a <__cxa_begin_catch>
	      std::_Destroy(__first, __cur);
 8005dce:	6979      	ldr	r1, [r7, #20]
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f7fe ff3a 	bl	8004c4a <_ZSt8_DestroyIPSt6vectorIhSaIhEEEvT_S4_>
	      __throw_exception_again;
 8005dd6:	f000 fb4b 	bl	8006470 <__cxa_rethrow>
	  __catch(...)
 8005dda:	f000 faf0 	bl	80063be <__cxa_end_catch>
 8005dde:	f000 fb87 	bl	80064f0 <__cxa_end_cleanup>
	}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIhSaIhEEEE8max_sizeERKS4_>:
    static size_type max_size(const _Alloc& __a)
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b082      	sub	sp, #8
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
    { return __a.max_size(); }
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f990 	bl	8006118 <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <_ZNKSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8005e02:	b480      	push	{r7}
 8005e04:	b083      	sub	sp, #12
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = 0)
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 f977 	bl	8006118 <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	bf34      	ite	cc
 8005e32:	2301      	movcc	r3, #1
 8005e34:	2300      	movcs	r3, #0
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8005e3c:	f000 feac 	bl	8006b98 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	4613      	mov	r3, r2
 8005e44:	005b      	lsls	r3, r3, #1
 8005e46:	4413      	add	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 faff 	bl	800644e <_Znwj>
 8005e50:	4603      	mov	r3, r0
      }
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b086      	sub	sp, #24
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	607a      	str	r2, [r7, #4]
      const bool __assignable = true;
 8005e66:	2301      	movs	r3, #1
 8005e68:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	68b9      	ldr	r1, [r7, #8]
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f000 f960 	bl	8006134 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>
 8005e74:	4603      	mov	r3, r0
    }
 8005e76:	4618      	mov	r0, r3
 8005e78:	3718      	adds	r7, #24
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <_ZSt22__copy_move_backward_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b086      	sub	sp, #24
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	607a      	str	r2, [r7, #4]
			     && __are_same<_ValueType1, _ValueType2>::__value);
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	75fb      	strb	r3, [r7, #23]
								 __result);
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	68b9      	ldr	r1, [r7, #8]
 8005e92:	68f8      	ldr	r0, [r7, #12]
 8005e94:	f000 f95e 	bl	8006154 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIhEEPT_PKS3_S6_S4_>
 8005e98:	4603      	mov	r3, r0
    }
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE8max_sizeERKS1_>:
    static size_type max_size(const _Alloc& __a)
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b082      	sub	sp, #8
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
    { return __a.max_size(); }
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 f805 	bl	8005eba <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}

08005eba <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8005eba:	b480      	push	{r7}
 8005ebc:	b083      	sub	sp, #12
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8005ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <_ZSt10__fill_n_aIjhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_>:
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b084      	sub	sp, #16
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	60f8      	str	r0, [r7, #12]
 8005eda:	60b9      	str	r1, [r7, #8]
 8005edc:	607a      	str	r2, [r7, #4]
      std::__fill_a(__first, __first + __n, __c);
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f7ff fe01 	bl	8005af0 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
      return __first + __n;
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4413      	add	r3, r2
    }
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8005f04:	1d3b      	adds	r3, r7, #4
 8005f06:	4618      	mov	r0, r3
 8005f08:	f000 f942 	bl	8006190 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 8005f24:	2301      	movs	r3, #1
 8005f26:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	68b9      	ldr	r1, [r7, #8]
 8005f2c:	68f8      	ldr	r0, [r7, #12]
 8005f2e:	f000 f93a 	bl	80061a6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8005f32:	4603      	mov	r3, r0
    }
 8005f34:	4618      	mov	r0, r3
 8005f36:	3718      	adds	r7, #24
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIhSaIhEES5_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d00e      	beq.n	8005f72 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIhSaIhEES5_EET0_T_S7_S6_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 8005f54:	6978      	ldr	r0, [r7, #20]
 8005f56:	f7ff fc90 	bl	800587a <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	68f9      	ldr	r1, [r7, #12]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 f8be 	bl	80060e0 <_ZSt10_ConstructISt6vectorIhSaIhEES2_EvPT_RKT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	330c      	adds	r3, #12
 8005f68:	60fb      	str	r3, [r7, #12]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	330c      	adds	r3, #12
 8005f6e:	617b      	str	r3, [r7, #20]
 8005f70:	e7ec      	b.n	8005f4c <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIhSaIhEES5_EET0_T_S7_S6_+0x10>
	      return __cur;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	e00d      	b.n	8005f92 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIhSaIhEES5_EET0_T_S7_S6_+0x56>
 8005f76:	4603      	mov	r3, r0
	  __catch(...)
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f000 f9f6 	bl	800636a <__cxa_begin_catch>
	      std::_Destroy(__result, __cur);
 8005f7e:	6979      	ldr	r1, [r7, #20]
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7fe fe62 	bl	8004c4a <_ZSt8_DestroyIPSt6vectorIhSaIhEEEvT_S4_>
	      __throw_exception_again;
 8005f86:	f000 fa73 	bl	8006470 <__cxa_rethrow>
	  __catch(...)
 8005f8a:	f000 fa18 	bl	80063be <__cxa_end_catch>
 8005f8e:	f000 faaf 	bl	80064f0 <__cxa_end_cleanup>
	}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt6vectorIhSaIhEES6_EET0_T_S8_S7_>:
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
	  for (__n = __last - __first; __n > 0; --__n)
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	109b      	asrs	r3, r3, #2
 8005fb0:	4a0c      	ldr	r2, [pc, #48]	; (8005fe4 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt6vectorIhSaIhEES6_EET0_T_S8_S7_+0x48>)
 8005fb2:	fb02 f303 	mul.w	r3, r2, r3
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	dd0d      	ble.n	8005fda <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt6vectorIhSaIhEES6_EET0_T_S8_S7_+0x3e>
	    *--__result = *--__last;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	3b0c      	subs	r3, #12
 8005fc2:	607b      	str	r3, [r7, #4]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	3b0c      	subs	r3, #12
 8005fc8:	60bb      	str	r3, [r7, #8]
 8005fca:	68b9      	ldr	r1, [r7, #8]
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f7ff fe35 	bl	8005c3c <_ZNSt6vectorIhSaIhEEaSERKS1_>
	  for (__n = __last - __first; __n > 0; --__n)
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	e7ee      	b.n	8005fb8 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt6vectorIhSaIhEES6_EET0_T_S8_S7_+0x1c>
	  return __result;
 8005fda:	687b      	ldr	r3, [r7, #4]
	}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3718      	adds	r7, #24
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	aaaaaaab 	.word	0xaaaaaaab

08005fe8 <_ZNKSt6vectorIhSaIhEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	689b      	ldr	r3, [r3, #8]
			 - this->_M_impl._M_start); }
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr

08006008 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>:
        _M_allocate_and_copy(size_type __n,
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	68b9      	ldr	r1, [r7, #8]
 800601a:	4618      	mov	r0, r3
 800601c:	f7ff fa12 	bl	8005444 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8006020:	4603      	mov	r3, r0
 8006022:	617b      	str	r3, [r7, #20]
					  _M_get_Tp_allocator());
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4618      	mov	r0, r3
 8006028:	f7fe fc01 	bl	800482e <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800602c:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	6839      	ldr	r1, [r7, #0]
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7fe fd05 	bl	8004a42 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
	      return __result;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	e00f      	b.n	800605c <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_+0x54>
 800603c:	4603      	mov	r3, r0
	  __catch(...)
 800603e:	4618      	mov	r0, r3
 8006040:	f000 f993 	bl	800636a <__cxa_begin_catch>
	      _M_deallocate(__result, __n);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	6979      	ldr	r1, [r7, #20]
 800604a:	4618      	mov	r0, r3
 800604c:	f7fe fda9 	bl	8004ba2 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      __throw_exception_again;
 8006050:	f000 fa0e 	bl	8006470 <__cxa_rethrow>
	  __catch(...)
 8006054:	f000 f9b3 	bl	80063be <__cxa_end_catch>
 8006058:	f000 fa4a 	bl	80064f0 <__cxa_end_cleanup>
	}
 800605c:	4618      	mov	r0, r3
 800605e:	3718      	adds	r7, #24
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 8006064:	b590      	push	{r4, r7, lr}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 8006070:	68f8      	ldr	r0, [r7, #12]
 8006072:	f7ff fd98 	bl	8005ba6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 8006076:	4604      	mov	r4, r0
 8006078:	68b8      	ldr	r0, [r7, #8]
 800607a:	f7ff fd94 	bl	8005ba6 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 800607e:	4603      	mov	r3, r0
	       __result));
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	4619      	mov	r1, r3
 8006084:	4620      	mov	r0, r4
 8006086:	f000 f8a8 	bl	80061da <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>
 800608a:	4603      	mov	r3, r0
    }
 800608c:	4618      	mov	r0, r3
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	bd90      	pop	{r4, r7, pc}

08006094 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80060a0:	68b9      	ldr	r1, [r7, #8]
 80060a2:	68f8      	ldr	r0, [r7, #12]
 80060a4:	f000 f8bf 	bl	8006226 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>
    }
 80060a8:	bf00      	nop
 80060aa:	3710      	adds	r7, #16
 80060ac:	46bd      	mov	sp, r7
 80060ae:	bd80      	pop	{r7, pc}

080060b0 <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 80060b0:	b590      	push	{r4, r7, lr}
 80060b2:	b085      	sub	sp, #20
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f7ff fce5 	bl	8005a8c <_ZSt12__miter_baseIPhET_S1_>
 80060c2:	4604      	mov	r4, r0
 80060c4:	68b8      	ldr	r0, [r7, #8]
 80060c6:	f7ff fce1 	bl	8005a8c <_ZSt12__miter_baseIPhET_S1_>
 80060ca:	4603      	mov	r3, r0
	       __result));
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	4619      	mov	r1, r3
 80060d0:	4620      	mov	r0, r4
 80060d2:	f000 f8b5 	bl	8006240 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 80060d6:	4603      	mov	r3, r0
    }
 80060d8:	4618      	mov	r0, r3
 80060da:	3714      	adds	r7, #20
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd90      	pop	{r4, r7, pc}

080060e0 <_ZSt10_ConstructISt6vectorIhSaIhEES2_EvPT_RKT0_>:
    _Construct(_T1* __p, const _T2& __value)
 80060e0:	b5b0      	push	{r4, r5, r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
      ::new(static_cast<void*>(__p)) _T1(__value);
 80060ea:	687d      	ldr	r5, [r7, #4]
 80060ec:	4629      	mov	r1, r5
 80060ee:	200c      	movs	r0, #12
 80060f0:	f7fd fe20 	bl	8003d34 <_ZnwjPv>
 80060f4:	4604      	mov	r4, r0
 80060f6:	2c00      	cmp	r4, #0
 80060f8:	d00a      	beq.n	8006110 <_ZSt10_ConstructISt6vectorIhSaIhEES2_EvPT_RKT0_+0x30>
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	4620      	mov	r0, r4
 80060fe:	f7fe fa87 	bl	8004610 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
    }
 8006102:	e005      	b.n	8006110 <_ZSt10_ConstructISt6vectorIhSaIhEES2_EvPT_RKT0_+0x30>
      ::new(static_cast<void*>(__p)) _T1(__value);
 8006104:	4629      	mov	r1, r5
 8006106:	4620      	mov	r0, r4
 8006108:	f7fd fe20 	bl	8003d4c <_ZdlPvS_>
 800610c:	f000 f9f0 	bl	80064f0 <__cxa_end_cleanup>
    }
 8006110:	bf00      	nop
 8006112:	3708      	adds	r7, #8
 8006114:	46bd      	mov	sp, r7
 8006116:	bdb0      	pop	{r4, r5, r7, pc}

08006118 <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8006120:	4b03      	ldr	r3, [pc, #12]	; (8006130 <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv+0x18>)
 8006122:	4618      	mov	r0, r3
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	15555555 	.word	0x15555555

08006134 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006134:	b580      	push	{r7, lr}
 8006136:	b084      	sub	sp, #16
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	68b9      	ldr	r1, [r7, #8]
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f7ff ffb3 	bl	80060b0 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 800614a:	4603      	mov	r3, r0
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}

08006154 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIhEEPT_PKS3_S6_S4_>:
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006154:	b580      	push	{r7, lr}
 8006156:	b086      	sub	sp, #24
 8006158:	af00      	add	r7, sp, #0
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	60b9      	str	r1, [r7, #8]
 800615e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d008      	beq.n	8006180 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIhEEPT_PKS3_S6_S4_+0x2c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	425b      	negs	r3, r3
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	4413      	add	r3, r2
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	68f9      	ldr	r1, [r7, #12]
 800617a:	4618      	mov	r0, r3
 800617c:	f001 f813 	bl	80071a6 <memmove>
	  return __result - _Num;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	425b      	negs	r3, r3
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	4413      	add	r3, r2
	}
 8006188:	4618      	mov	r0, r3
 800618a:	3718      	adds	r7, #24
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4618      	mov	r0, r3
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b086      	sub	sp, #24
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	60f8      	str	r0, [r7, #12]
 80061ae:	60b9      	str	r1, [r7, #8]
 80061b0:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	461a      	mov	r2, r3
 80061c4:	68f9      	ldr	r1, [r7, #12]
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 ffed 	bl	80071a6 <memmove>
	  return __result + _Num;
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	4413      	add	r3, r2
	}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80061da:	b5b0      	push	{r4, r5, r7, lr}
 80061dc:	b086      	sub	sp, #24
 80061de:	af00      	add	r7, sp, #0
 80061e0:	60f8      	str	r0, [r7, #12]
 80061e2:	60b9      	str	r1, [r7, #8]
 80061e4:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 80061e6:	68f8      	ldr	r0, [r7, #12]
 80061e8:	f7ff fe88 	bl	8005efc <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80061ec:	4604      	mov	r4, r0
 80061ee:	68b8      	ldr	r0, [r7, #8]
 80061f0:	f7ff fe84 	bl	8005efc <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80061f4:	4605      	mov	r5, r0
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f83e 	bl	8006278 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 80061fc:	4603      	mov	r3, r0
 80061fe:	461a      	mov	r2, r3
 8006200:	4629      	mov	r1, r5
 8006202:	4620      	mov	r0, r4
 8006204:	f7ff fe88 	bl	8005f18 <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>
 8006208:	4603      	mov	r3, r0
 800620a:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 800620c:	f107 0214 	add.w	r2, r7, #20
 8006210:	f107 0310 	add.w	r3, r7, #16
 8006214:	4611      	mov	r1, r2
 8006216:	4618      	mov	r0, r3
 8006218:	f7fe ff3e 	bl	8005098 <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 800621c:	693b      	ldr	r3, [r7, #16]
    }
 800621e:	4618      	mov	r0, r3
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bdb0      	pop	{r4, r5, r7, pc}

08006226 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006226:	b580      	push	{r7, lr}
 8006228:	b082      	sub	sp, #8
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f82e 	bl	8006294 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>
    }
 8006238:	bf00      	nop
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}

08006240 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006240:	b5b0      	push	{r4, r5, r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f7ff fc44 	bl	8005ada <_ZSt12__niter_baseIPhET_S1_>
 8006252:	4604      	mov	r4, r0
 8006254:	68b8      	ldr	r0, [r7, #8]
 8006256:	f7ff fc40 	bl	8005ada <_ZSt12__niter_baseIPhET_S1_>
 800625a:	4605      	mov	r5, r0
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7ff fc3c 	bl	8005ada <_ZSt12__niter_baseIPhET_S1_>
 8006262:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8006264:	461a      	mov	r2, r3
 8006266:	4629      	mov	r1, r5
 8006268:	4620      	mov	r0, r4
 800626a:	f000 f81e 	bl	80062aa <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 800626e:	4603      	mov	r3, r0
    }
 8006270:	4618      	mov	r0, r3
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bdb0      	pop	{r4, r5, r7, pc}

08006278 <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8006280:	1d3b      	adds	r3, r7, #4
 8006282:	4618      	mov	r0, r3
 8006284:	f7ff fa31 	bl	80056ea <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 8006288:	4603      	mov	r3, r0
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4618      	mov	r0, r3
 800628e:	3708      	adds	r7, #8
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
 800629e:	bf00      	nop
 80062a0:	370c      	adds	r7, #12
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b086      	sub	sp, #24
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 80062b6:	2301      	movs	r3, #1
 80062b8:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	68b9      	ldr	r1, [r7, #8]
 80062be:	68f8      	ldr	r0, [r7, #12]
 80062c0:	f7ff ff71 	bl	80061a6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80062c4:	4603      	mov	r3, r0
    }
 80062c6:	4618      	mov	r0, r3
 80062c8:	3718      	adds	r7, #24
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80062d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006308 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80062d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80062d6:	e003      	b.n	80062e0 <LoopCopyDataInit>

080062d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80062d8:	4b0c      	ldr	r3, [pc, #48]	; (800630c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80062da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80062dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80062de:	3104      	adds	r1, #4

080062e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80062e0:	480b      	ldr	r0, [pc, #44]	; (8006310 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80062e2:	4b0c      	ldr	r3, [pc, #48]	; (8006314 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80062e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80062e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80062e8:	d3f6      	bcc.n	80062d8 <CopyDataInit>
  ldr  r2, =_sbss
 80062ea:	4a0b      	ldr	r2, [pc, #44]	; (8006318 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80062ec:	e002      	b.n	80062f4 <LoopFillZerobss>

080062ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80062ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80062f0:	f842 3b04 	str.w	r3, [r2], #4

080062f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80062f4:	4b09      	ldr	r3, [pc, #36]	; (800631c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80062f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80062f8:	d3f9      	bcc.n	80062ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80062fa:	f7fd faf7 	bl	80038ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80062fe:	f000 ff13 	bl	8007128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006302:	f7fc fe3b 	bl	8002f7c <main>
  bx  lr    
 8006306:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006308:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800630c:	080086f4 	.word	0x080086f4
  ldr  r0, =_sdata
 8006310:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006314:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8006318:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 800631c:	200003a4 	.word	0x200003a4

08006320 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006320:	e7fe      	b.n	8006320 <ADC_IRQHandler>

08006322 <_ZdlPv>:
 8006322:	f000 bf2d 	b.w	8007180 <free>

08006326 <__aeabi_atexit>:
 8006326:	460b      	mov	r3, r1
 8006328:	4601      	mov	r1, r0
 800632a:	4618      	mov	r0, r3
 800632c:	f000 beee 	b.w	800710c <__cxa_atexit>

08006330 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8006330:	7803      	ldrb	r3, [r0, #0]
 8006332:	2b47      	cmp	r3, #71	; 0x47
 8006334:	d117      	bne.n	8006366 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006336:	7843      	ldrb	r3, [r0, #1]
 8006338:	2b4e      	cmp	r3, #78	; 0x4e
 800633a:	d114      	bne.n	8006366 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800633c:	7883      	ldrb	r3, [r0, #2]
 800633e:	2b55      	cmp	r3, #85	; 0x55
 8006340:	d111      	bne.n	8006366 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006342:	78c3      	ldrb	r3, [r0, #3]
 8006344:	2b43      	cmp	r3, #67	; 0x43
 8006346:	d10e      	bne.n	8006366 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006348:	7903      	ldrb	r3, [r0, #4]
 800634a:	2b43      	cmp	r3, #67	; 0x43
 800634c:	d10b      	bne.n	8006366 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800634e:	7943      	ldrb	r3, [r0, #5]
 8006350:	2b2b      	cmp	r3, #43	; 0x2b
 8006352:	d108      	bne.n	8006366 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006354:	7983      	ldrb	r3, [r0, #6]
 8006356:	2b2b      	cmp	r3, #43	; 0x2b
 8006358:	d105      	bne.n	8006366 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800635a:	79c0      	ldrb	r0, [r0, #7]
 800635c:	2801      	cmp	r0, #1
 800635e:	bf8c      	ite	hi
 8006360:	2000      	movhi	r0, #0
 8006362:	2001      	movls	r0, #1
 8006364:	4770      	bx	lr
 8006366:	2000      	movs	r0, #0
 8006368:	4770      	bx	lr

0800636a <__cxa_begin_catch>:
 800636a:	b538      	push	{r3, r4, r5, lr}
 800636c:	4605      	mov	r5, r0
 800636e:	f000 f8bb 	bl	80064e8 <__cxa_get_globals>
 8006372:	4601      	mov	r1, r0
 8006374:	6802      	ldr	r2, [r0, #0]
 8006376:	4628      	mov	r0, r5
 8006378:	f1a5 0420 	sub.w	r4, r5, #32
 800637c:	f7ff ffd8 	bl	8006330 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006380:	b930      	cbnz	r0, 8006390 <__cxa_begin_catch+0x26>
 8006382:	b10a      	cbz	r2, 8006388 <__cxa_begin_catch+0x1e>
 8006384:	f000 f84c 	bl	8006420 <_ZSt9terminatev>
 8006388:	600c      	str	r4, [r1, #0]
 800638a:	4614      	mov	r4, r2
 800638c:	4620      	mov	r0, r4
 800638e:	bd38      	pop	{r3, r4, r5, pc}
 8006390:	f855 3c0c 	ldr.w	r3, [r5, #-12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	bfb4      	ite	lt
 8006398:	f1c3 0301 	rsblt	r3, r3, #1
 800639c:	3301      	addge	r3, #1
 800639e:	f845 3c0c 	str.w	r3, [r5, #-12]
 80063a2:	684b      	ldr	r3, [r1, #4]
 80063a4:	42a2      	cmp	r2, r4
 80063a6:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80063aa:	604b      	str	r3, [r1, #4]
 80063ac:	4628      	mov	r0, r5
 80063ae:	bf1c      	itt	ne
 80063b0:	f845 2c10 	strne.w	r2, [r5, #-16]
 80063b4:	600c      	strne	r4, [r1, #0]
 80063b6:	6a6c      	ldr	r4, [r5, #36]	; 0x24
 80063b8:	f7fa fab0 	bl	800091c <_Unwind_Complete>
 80063bc:	e7e6      	b.n	800638c <__cxa_begin_catch+0x22>

080063be <__cxa_end_catch>:
 80063be:	b510      	push	{r4, lr}
 80063c0:	f000 f88e 	bl	80064e0 <__cxa_get_globals_fast>
 80063c4:	6802      	ldr	r2, [r0, #0]
 80063c6:	4601      	mov	r1, r0
 80063c8:	b19a      	cbz	r2, 80063f2 <__cxa_end_catch+0x34>
 80063ca:	f102 0420 	add.w	r4, r2, #32
 80063ce:	4620      	mov	r0, r4
 80063d0:	f7ff ffae 	bl	8006330 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80063d4:	b928      	cbnz	r0, 80063e2 <__cxa_end_catch+0x24>
 80063d6:	6008      	str	r0, [r1, #0]
 80063d8:	4620      	mov	r0, r4
 80063da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063de:	f7fa ba9f 	b.w	8000920 <_Unwind_DeleteException>
 80063e2:	6953      	ldr	r3, [r2, #20]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	da05      	bge.n	80063f4 <__cxa_end_catch+0x36>
 80063e8:	3301      	adds	r3, #1
 80063ea:	d101      	bne.n	80063f0 <__cxa_end_catch+0x32>
 80063ec:	6910      	ldr	r0, [r2, #16]
 80063ee:	6008      	str	r0, [r1, #0]
 80063f0:	6153      	str	r3, [r2, #20]
 80063f2:	bd10      	pop	{r4, pc}
 80063f4:	3b01      	subs	r3, #1
 80063f6:	d102      	bne.n	80063fe <__cxa_end_catch+0x40>
 80063f8:	6913      	ldr	r3, [r2, #16]
 80063fa:	600b      	str	r3, [r1, #0]
 80063fc:	e7ec      	b.n	80063d8 <__cxa_end_catch+0x1a>
 80063fe:	1c59      	adds	r1, r3, #1
 8006400:	d1f6      	bne.n	80063f0 <__cxa_end_catch+0x32>
 8006402:	f000 f80d 	bl	8006420 <_ZSt9terminatev>

08006406 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8006406:	b508      	push	{r3, lr}
 8006408:	4780      	blx	r0
 800640a:	f000 fe77 	bl	80070fc <abort>
	...

08006410 <_ZSt13get_terminatev>:
 8006410:	4b02      	ldr	r3, [pc, #8]	; (800641c <_ZSt13get_terminatev+0xc>)
 8006412:	6818      	ldr	r0, [r3, #0]
 8006414:	f3bf 8f5b 	dmb	ish
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	20000010 	.word	0x20000010

08006420 <_ZSt9terminatev>:
 8006420:	b508      	push	{r3, lr}
 8006422:	f7ff fff5 	bl	8006410 <_ZSt13get_terminatev>
 8006426:	f7ff ffee 	bl	8006406 <_ZN10__cxxabiv111__terminateEPFvvE>

0800642a <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 800642a:	b508      	push	{r3, lr}
 800642c:	4780      	blx	r0
 800642e:	f7ff fff7 	bl	8006420 <_ZSt9terminatev>
	...

08006434 <_ZSt14get_unexpectedv>:
 8006434:	4b02      	ldr	r3, [pc, #8]	; (8006440 <_ZSt14get_unexpectedv+0xc>)
 8006436:	6818      	ldr	r0, [r3, #0]
 8006438:	f3bf 8f5b 	dmb	ish
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	20000014 	.word	0x20000014

08006444 <_ZSt10unexpectedv>:
 8006444:	b508      	push	{r3, lr}
 8006446:	f7ff fff5 	bl	8006434 <_ZSt14get_unexpectedv>
 800644a:	f7ff ffee 	bl	800642a <_ZN10__cxxabiv112__unexpectedEPFvvE>

0800644e <_Znwj>:
 800644e:	b510      	push	{r4, lr}
 8006450:	2800      	cmp	r0, #0
 8006452:	bf14      	ite	ne
 8006454:	4604      	movne	r4, r0
 8006456:	2401      	moveq	r4, #1
 8006458:	4620      	mov	r0, r4
 800645a:	f000 fe89 	bl	8007170 <malloc>
 800645e:	b930      	cbnz	r0, 800646e <_Znwj+0x20>
 8006460:	f000 fb92 	bl	8006b88 <_ZSt15get_new_handlerv>
 8006464:	b908      	cbnz	r0, 800646a <_Znwj+0x1c>
 8006466:	f000 fe49 	bl	80070fc <abort>
 800646a:	4780      	blx	r0
 800646c:	e7f4      	b.n	8006458 <_Znwj+0xa>
 800646e:	bd10      	pop	{r4, pc}

08006470 <__cxa_rethrow>:
 8006470:	b508      	push	{r3, lr}
 8006472:	f000 f839 	bl	80064e8 <__cxa_get_globals>
 8006476:	6842      	ldr	r2, [r0, #4]
 8006478:	6804      	ldr	r4, [r0, #0]
 800647a:	3201      	adds	r2, #1
 800647c:	6042      	str	r2, [r0, #4]
 800647e:	b34c      	cbz	r4, 80064d4 <__cxa_rethrow+0x64>
 8006480:	f894 2020 	ldrb.w	r2, [r4, #32]
 8006484:	2a47      	cmp	r2, #71	; 0x47
 8006486:	d127      	bne.n	80064d8 <__cxa_rethrow+0x68>
 8006488:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 800648c:	2a4e      	cmp	r2, #78	; 0x4e
 800648e:	d123      	bne.n	80064d8 <__cxa_rethrow+0x68>
 8006490:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8006494:	2a55      	cmp	r2, #85	; 0x55
 8006496:	d11f      	bne.n	80064d8 <__cxa_rethrow+0x68>
 8006498:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800649c:	2a43      	cmp	r2, #67	; 0x43
 800649e:	d11b      	bne.n	80064d8 <__cxa_rethrow+0x68>
 80064a0:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 80064a4:	2a43      	cmp	r2, #67	; 0x43
 80064a6:	d117      	bne.n	80064d8 <__cxa_rethrow+0x68>
 80064a8:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80064ac:	2a2b      	cmp	r2, #43	; 0x2b
 80064ae:	d113      	bne.n	80064d8 <__cxa_rethrow+0x68>
 80064b0:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80064b4:	2a2b      	cmp	r2, #43	; 0x2b
 80064b6:	d10f      	bne.n	80064d8 <__cxa_rethrow+0x68>
 80064b8:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 80064bc:	2a01      	cmp	r2, #1
 80064be:	d80b      	bhi.n	80064d8 <__cxa_rethrow+0x68>
 80064c0:	6962      	ldr	r2, [r4, #20]
 80064c2:	4252      	negs	r2, r2
 80064c4:	6162      	str	r2, [r4, #20]
 80064c6:	3420      	adds	r4, #32
 80064c8:	4620      	mov	r0, r4
 80064ca:	f7fa fde7 	bl	800109c <_Unwind_Resume_or_Rethrow>
 80064ce:	4620      	mov	r0, r4
 80064d0:	f7ff ff4b 	bl	800636a <__cxa_begin_catch>
 80064d4:	f7ff ffa4 	bl	8006420 <_ZSt9terminatev>
 80064d8:	2200      	movs	r2, #0
 80064da:	6002      	str	r2, [r0, #0]
 80064dc:	e7f3      	b.n	80064c6 <__cxa_rethrow+0x56>
	...

080064e0 <__cxa_get_globals_fast>:
 80064e0:	4800      	ldr	r0, [pc, #0]	; (80064e4 <__cxa_get_globals_fast+0x4>)
 80064e2:	4770      	bx	lr
 80064e4:	200002d0 	.word	0x200002d0

080064e8 <__cxa_get_globals>:
 80064e8:	4800      	ldr	r0, [pc, #0]	; (80064ec <__cxa_get_globals+0x4>)
 80064ea:	4770      	bx	lr
 80064ec:	200002d0 	.word	0x200002d0

080064f0 <__cxa_end_cleanup>:
 80064f0:	b41e      	push	{r1, r2, r3, r4}
 80064f2:	f000 f89c 	bl	800662e <__gnu_end_cleanup>
 80064f6:	bc1e      	pop	{r1, r2, r3, r4}
 80064f8:	f7fa fdbe 	bl	8001078 <_Unwind_Resume>

080064fc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80064fc:	7803      	ldrb	r3, [r0, #0]
 80064fe:	2b47      	cmp	r3, #71	; 0x47
 8006500:	d117      	bne.n	8006532 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006502:	7843      	ldrb	r3, [r0, #1]
 8006504:	2b4e      	cmp	r3, #78	; 0x4e
 8006506:	d114      	bne.n	8006532 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006508:	7883      	ldrb	r3, [r0, #2]
 800650a:	2b55      	cmp	r3, #85	; 0x55
 800650c:	d111      	bne.n	8006532 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800650e:	78c3      	ldrb	r3, [r0, #3]
 8006510:	2b43      	cmp	r3, #67	; 0x43
 8006512:	d10e      	bne.n	8006532 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006514:	7903      	ldrb	r3, [r0, #4]
 8006516:	2b43      	cmp	r3, #67	; 0x43
 8006518:	d10b      	bne.n	8006532 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800651a:	7943      	ldrb	r3, [r0, #5]
 800651c:	2b2b      	cmp	r3, #43	; 0x2b
 800651e:	d108      	bne.n	8006532 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006520:	7983      	ldrb	r3, [r0, #6]
 8006522:	2b2b      	cmp	r3, #43	; 0x2b
 8006524:	d105      	bne.n	8006532 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006526:	79c0      	ldrb	r0, [r0, #7]
 8006528:	2801      	cmp	r0, #1
 800652a:	bf8c      	ite	hi
 800652c:	2000      	movhi	r0, #0
 800652e:	2001      	movls	r0, #1
 8006530:	4770      	bx	lr
 8006532:	2000      	movs	r0, #0
 8006534:	4770      	bx	lr
	...

08006538 <__cxa_type_match>:
 8006538:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800653c:	461e      	mov	r6, r3
 800653e:	7803      	ldrb	r3, [r0, #0]
 8006540:	2b47      	cmp	r3, #71	; 0x47
 8006542:	460d      	mov	r5, r1
 8006544:	4602      	mov	r2, r0
 8006546:	79c1      	ldrb	r1, [r0, #7]
 8006548:	d148      	bne.n	80065dc <__cxa_type_match+0xa4>
 800654a:	7843      	ldrb	r3, [r0, #1]
 800654c:	2b4e      	cmp	r3, #78	; 0x4e
 800654e:	d145      	bne.n	80065dc <__cxa_type_match+0xa4>
 8006550:	7883      	ldrb	r3, [r0, #2]
 8006552:	2b55      	cmp	r3, #85	; 0x55
 8006554:	d142      	bne.n	80065dc <__cxa_type_match+0xa4>
 8006556:	78c3      	ldrb	r3, [r0, #3]
 8006558:	2b43      	cmp	r3, #67	; 0x43
 800655a:	d13f      	bne.n	80065dc <__cxa_type_match+0xa4>
 800655c:	7903      	ldrb	r3, [r0, #4]
 800655e:	2b46      	cmp	r3, #70	; 0x46
 8006560:	d13c      	bne.n	80065dc <__cxa_type_match+0xa4>
 8006562:	7943      	ldrb	r3, [r0, #5]
 8006564:	2b4f      	cmp	r3, #79	; 0x4f
 8006566:	d139      	bne.n	80065dc <__cxa_type_match+0xa4>
 8006568:	7983      	ldrb	r3, [r0, #6]
 800656a:	2b52      	cmp	r3, #82	; 0x52
 800656c:	d136      	bne.n	80065dc <__cxa_type_match+0xa4>
 800656e:	2900      	cmp	r1, #0
 8006570:	d134      	bne.n	80065dc <__cxa_type_match+0xa4>
 8006572:	2301      	movs	r3, #1
 8006574:	4608      	mov	r0, r1
 8006576:	2400      	movs	r4, #0
 8006578:	9401      	str	r4, [sp, #4]
 800657a:	bb3b      	cbnz	r3, 80065cc <__cxa_type_match+0x94>
 800657c:	bb40      	cbnz	r0, 80065d0 <__cxa_type_match+0x98>
 800657e:	2901      	cmp	r1, #1
 8006580:	bf0a      	itet	eq
 8006582:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8006586:	f1a2 0320 	subne.w	r3, r2, #32
 800658a:	3b78      	subeq	r3, #120	; 0x78
 800658c:	2901      	cmp	r1, #1
 800658e:	bf08      	it	eq
 8006590:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8006594:	681c      	ldr	r4, [r3, #0]
 8006596:	bf18      	it	ne
 8006598:	3258      	addne	r2, #88	; 0x58
 800659a:	9201      	str	r2, [sp, #4]
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	4620      	mov	r0, r4
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	4798      	blx	r3
 80065a4:	b1b0      	cbz	r0, 80065d4 <__cxa_type_match+0x9c>
 80065a6:	9b01      	ldr	r3, [sp, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	9301      	str	r3, [sp, #4]
 80065ac:	2702      	movs	r7, #2
 80065ae:	682b      	ldr	r3, [r5, #0]
 80065b0:	aa01      	add	r2, sp, #4
 80065b2:	f8d3 8010 	ldr.w	r8, [r3, #16]
 80065b6:	4621      	mov	r1, r4
 80065b8:	2301      	movs	r3, #1
 80065ba:	4628      	mov	r0, r5
 80065bc:	47c0      	blx	r8
 80065be:	b158      	cbz	r0, 80065d8 <__cxa_type_match+0xa0>
 80065c0:	9b01      	ldr	r3, [sp, #4]
 80065c2:	6033      	str	r3, [r6, #0]
 80065c4:	4638      	mov	r0, r7
 80065c6:	b002      	add	sp, #8
 80065c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065cc:	4c07      	ldr	r4, [pc, #28]	; (80065ec <__cxa_type_match+0xb4>)
 80065ce:	e7e5      	b.n	800659c <__cxa_type_match+0x64>
 80065d0:	4c07      	ldr	r4, [pc, #28]	; (80065f0 <__cxa_type_match+0xb8>)
 80065d2:	e7e3      	b.n	800659c <__cxa_type_match+0x64>
 80065d4:	2701      	movs	r7, #1
 80065d6:	e7ea      	b.n	80065ae <__cxa_type_match+0x76>
 80065d8:	4607      	mov	r7, r0
 80065da:	e7f3      	b.n	80065c4 <__cxa_type_match+0x8c>
 80065dc:	4610      	mov	r0, r2
 80065de:	f7ff ff8d 	bl	80064fc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80065e2:	f080 0001 	eor.w	r0, r0, #1
 80065e6:	b2c0      	uxtb	r0, r0
 80065e8:	2300      	movs	r3, #0
 80065ea:	e7c4      	b.n	8006576 <__cxa_type_match+0x3e>
 80065ec:	08007b14 	.word	0x08007b14
 80065f0:	08007b1c 	.word	0x08007b1c

080065f4 <__cxa_begin_cleanup>:
 80065f4:	b510      	push	{r4, lr}
 80065f6:	4604      	mov	r4, r0
 80065f8:	f7ff ff76 	bl	80064e8 <__cxa_get_globals>
 80065fc:	4602      	mov	r2, r0
 80065fe:	4620      	mov	r0, r4
 8006600:	f1a4 0120 	sub.w	r1, r4, #32
 8006604:	f7ff ff7a 	bl	80064fc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006608:	b160      	cbz	r0, 8006624 <__cxa_begin_cleanup+0x30>
 800660a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800660e:	3301      	adds	r3, #1
 8006610:	2b01      	cmp	r3, #1
 8006612:	f844 3c04 	str.w	r3, [r4, #-4]
 8006616:	d103      	bne.n	8006620 <__cxa_begin_cleanup+0x2c>
 8006618:	6893      	ldr	r3, [r2, #8]
 800661a:	f844 3c08 	str.w	r3, [r4, #-8]
 800661e:	6091      	str	r1, [r2, #8]
 8006620:	2001      	movs	r0, #1
 8006622:	bd10      	pop	{r4, pc}
 8006624:	6893      	ldr	r3, [r2, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0f9      	beq.n	800661e <__cxa_begin_cleanup+0x2a>
 800662a:	f7ff fef9 	bl	8006420 <_ZSt9terminatev>

0800662e <__gnu_end_cleanup>:
 800662e:	b510      	push	{r4, lr}
 8006630:	f7ff ff5a 	bl	80064e8 <__cxa_get_globals>
 8006634:	6882      	ldr	r2, [r0, #8]
 8006636:	4601      	mov	r1, r0
 8006638:	b90a      	cbnz	r2, 800663e <__gnu_end_cleanup+0x10>
 800663a:	f7ff fef1 	bl	8006420 <_ZSt9terminatev>
 800663e:	f102 0420 	add.w	r4, r2, #32
 8006642:	4620      	mov	r0, r4
 8006644:	f7ff ff5a 	bl	80064fc <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006648:	b140      	cbz	r0, 800665c <__gnu_end_cleanup+0x2e>
 800664a:	69d3      	ldr	r3, [r2, #28]
 800664c:	3b01      	subs	r3, #1
 800664e:	61d3      	str	r3, [r2, #28]
 8006650:	b913      	cbnz	r3, 8006658 <__gnu_end_cleanup+0x2a>
 8006652:	6990      	ldr	r0, [r2, #24]
 8006654:	6088      	str	r0, [r1, #8]
 8006656:	6193      	str	r3, [r2, #24]
 8006658:	4620      	mov	r0, r4
 800665a:	bd10      	pop	{r4, pc}
 800665c:	6088      	str	r0, [r1, #8]
 800665e:	e7fb      	b.n	8006658 <__gnu_end_cleanup+0x2a>

08006660 <_ZL12read_uleb128PKhPm>:
 8006660:	b570      	push	{r4, r5, r6, lr}
 8006662:	2300      	movs	r3, #0
 8006664:	eba0 06c0 	sub.w	r6, r0, r0, lsl #3
 8006668:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
 800666c:	f810 5b01 	ldrb.w	r5, [r0], #1
 8006670:	1994      	adds	r4, r2, r6
 8006672:	f005 027f 	and.w	r2, r5, #127	; 0x7f
 8006676:	40a2      	lsls	r2, r4
 8006678:	4313      	orrs	r3, r2
 800667a:	062a      	lsls	r2, r5, #24
 800667c:	d4f4      	bmi.n	8006668 <_ZL12read_uleb128PKhPm+0x8>
 800667e:	600b      	str	r3, [r1, #0]
 8006680:	bd70      	pop	{r4, r5, r6, pc}

08006682 <_ZL12read_sleb128PKhPl>:
 8006682:	b530      	push	{r4, r5, lr}
 8006684:	2300      	movs	r3, #0
 8006686:	461a      	mov	r2, r3
 8006688:	f810 4b01 	ldrb.w	r4, [r0], #1
 800668c:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8006690:	4095      	lsls	r5, r2
 8006692:	432b      	orrs	r3, r5
 8006694:	0625      	lsls	r5, r4, #24
 8006696:	f102 0207 	add.w	r2, r2, #7
 800669a:	d4f5      	bmi.n	8006688 <_ZL12read_sleb128PKhPl+0x6>
 800669c:	2a1f      	cmp	r2, #31
 800669e:	d806      	bhi.n	80066ae <_ZL12read_sleb128PKhPl+0x2c>
 80066a0:	0664      	lsls	r4, r4, #25
 80066a2:	bf42      	ittt	mi
 80066a4:	f04f 34ff 	movmi.w	r4, #4294967295	; 0xffffffff
 80066a8:	fa04 f202 	lslmi.w	r2, r4, r2
 80066ac:	4313      	orrmi	r3, r2
 80066ae:	600b      	str	r3, [r1, #0]
 80066b0:	bd30      	pop	{r4, r5, pc}

080066b2 <_ZL28read_encoded_value_with_basehjPKhPj>:
 80066b2:	2850      	cmp	r0, #80	; 0x50
 80066b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066b6:	4605      	mov	r5, r0
 80066b8:	460e      	mov	r6, r1
 80066ba:	4614      	mov	r4, r2
 80066bc:	461f      	mov	r7, r3
 80066be:	d107      	bne.n	80066d0 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e>
 80066c0:	1cd0      	adds	r0, r2, #3
 80066c2:	f020 0003 	bic.w	r0, r0, #3
 80066c6:	f850 3b04 	ldr.w	r3, [r0], #4
 80066ca:	603b      	str	r3, [r7, #0]
 80066cc:	b003      	add	sp, #12
 80066ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066d0:	f000 030f 	and.w	r3, r0, #15
 80066d4:	2b0c      	cmp	r3, #12
 80066d6:	d82e      	bhi.n	8006736 <_ZL28read_encoded_value_with_basehjPKhPj+0x84>
 80066d8:	e8df f003 	tbb	[pc, r3]
 80066dc:	251d0725 	.word	0x251d0725
 80066e0:	2d2d2d29 	.word	0x2d2d2d29
 80066e4:	2521182d 	.word	0x2521182d
 80066e8:	29          	.byte	0x29
 80066e9:	00          	.byte	0x00
 80066ea:	a901      	add	r1, sp, #4
 80066ec:	4620      	mov	r0, r4
 80066ee:	f7ff ffb7 	bl	8006660 <_ZL12read_uleb128PKhPm>
 80066f2:	9b01      	ldr	r3, [sp, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0e8      	beq.n	80066ca <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 80066f8:	f005 0270 	and.w	r2, r5, #112	; 0x70
 80066fc:	2a10      	cmp	r2, #16
 80066fe:	bf08      	it	eq
 8006700:	4626      	moveq	r6, r4
 8006702:	4433      	add	r3, r6
 8006704:	062a      	lsls	r2, r5, #24
 8006706:	bf48      	it	mi
 8006708:	681b      	ldrmi	r3, [r3, #0]
 800670a:	e7de      	b.n	80066ca <_ZL28read_encoded_value_with_basehjPKhPj+0x18>
 800670c:	a901      	add	r1, sp, #4
 800670e:	4620      	mov	r0, r4
 8006710:	f7ff ffb7 	bl	8006682 <_ZL12read_sleb128PKhPl>
 8006714:	e7ed      	b.n	80066f2 <_ZL28read_encoded_value_with_basehjPKhPj+0x40>
 8006716:	4620      	mov	r0, r4
 8006718:	f830 3b02 	ldrh.w	r3, [r0], #2
 800671c:	e7ea      	b.n	80066f4 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 800671e:	4620      	mov	r0, r4
 8006720:	f930 3b02 	ldrsh.w	r3, [r0], #2
 8006724:	e7e6      	b.n	80066f4 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8006726:	4620      	mov	r0, r4
 8006728:	f850 3b04 	ldr.w	r3, [r0], #4
 800672c:	e7e2      	b.n	80066f4 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 800672e:	4620      	mov	r0, r4
 8006730:	f850 3b08 	ldr.w	r3, [r0], #8
 8006734:	e7de      	b.n	80066f4 <_ZL28read_encoded_value_with_basehjPKhPj+0x42>
 8006736:	f000 fce1 	bl	80070fc <abort>

0800673a <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 800673a:	b508      	push	{r3, lr}
 800673c:	4603      	mov	r3, r0
 800673e:	2bff      	cmp	r3, #255	; 0xff
 8006740:	4608      	mov	r0, r1
 8006742:	d007      	beq.n	8006754 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8006744:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006748:	2b20      	cmp	r3, #32
 800674a:	d00d      	beq.n	8006768 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2e>
 800674c:	d804      	bhi.n	8006758 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1e>
 800674e:	b10b      	cbz	r3, 8006754 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8006750:	2b10      	cmp	r3, #16
 8006752:	d107      	bne.n	8006764 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2a>
 8006754:	2000      	movs	r0, #0
 8006756:	bd08      	pop	{r3, pc}
 8006758:	2b40      	cmp	r3, #64	; 0x40
 800675a:	d00d      	beq.n	8006778 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x3e>
 800675c:	2b50      	cmp	r3, #80	; 0x50
 800675e:	d0f9      	beq.n	8006754 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x1a>
 8006760:	2b30      	cmp	r3, #48	; 0x30
 8006762:	d005      	beq.n	8006770 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x36>
 8006764:	f000 fcca 	bl	80070fc <abort>
 8006768:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800676c:	f7fa be84 	b.w	8001478 <_Unwind_GetTextRelBase>
 8006770:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006774:	f7fa be84 	b.w	8001480 <_Unwind_GetDataRelBase>
 8006778:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800677c:	f7fa be6c 	b.w	8001458 <_Unwind_GetRegionStart>

08006780 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8006780:	b570      	push	{r4, r5, r6, lr}
 8006782:	460c      	mov	r4, r1
 8006784:	4601      	mov	r1, r0
 8006786:	4620      	mov	r0, r4
 8006788:	4615      	mov	r5, r2
 800678a:	461e      	mov	r6, r3
 800678c:	f7ff ffd5 	bl	800673a <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8006790:	4633      	mov	r3, r6
 8006792:	462a      	mov	r2, r5
 8006794:	4601      	mov	r1, r0
 8006796:	4620      	mov	r0, r4
 8006798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800679c:	f7ff bf89 	b.w	80066b2 <_ZL28read_encoded_value_with_basehjPKhPj>

080067a0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 80067a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067a2:	460e      	mov	r6, r1
 80067a4:	4614      	mov	r4, r2
 80067a6:	4605      	mov	r5, r0
 80067a8:	b328      	cbz	r0, 80067f6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 80067aa:	f7fa fe55 	bl	8001458 <_Unwind_GetRegionStart>
 80067ae:	6020      	str	r0, [r4, #0]
 80067b0:	7831      	ldrb	r1, [r6, #0]
 80067b2:	29ff      	cmp	r1, #255	; 0xff
 80067b4:	f106 0201 	add.w	r2, r6, #1
 80067b8:	d01e      	beq.n	80067f8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x58>
 80067ba:	1d23      	adds	r3, r4, #4
 80067bc:	4628      	mov	r0, r5
 80067be:	f7ff ffdf 	bl	8006780 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80067c2:	4602      	mov	r2, r0
 80067c4:	7813      	ldrb	r3, [r2, #0]
 80067c6:	7523      	strb	r3, [r4, #20]
 80067c8:	2bff      	cmp	r3, #255	; 0xff
 80067ca:	f102 0001 	add.w	r0, r2, #1
 80067ce:	d015      	beq.n	80067fc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5c>
 80067d0:	2310      	movs	r3, #16
 80067d2:	7523      	strb	r3, [r4, #20]
 80067d4:	a901      	add	r1, sp, #4
 80067d6:	f7ff ff43 	bl	8006660 <_ZL12read_uleb128PKhPm>
 80067da:	9b01      	ldr	r3, [sp, #4]
 80067dc:	4403      	add	r3, r0
 80067de:	60e3      	str	r3, [r4, #12]
 80067e0:	7803      	ldrb	r3, [r0, #0]
 80067e2:	7563      	strb	r3, [r4, #21]
 80067e4:	a901      	add	r1, sp, #4
 80067e6:	3001      	adds	r0, #1
 80067e8:	f7ff ff3a 	bl	8006660 <_ZL12read_uleb128PKhPm>
 80067ec:	9b01      	ldr	r3, [sp, #4]
 80067ee:	4403      	add	r3, r0
 80067f0:	6123      	str	r3, [r4, #16]
 80067f2:	b002      	add	sp, #8
 80067f4:	bd70      	pop	{r4, r5, r6, pc}
 80067f6:	e7da      	b.n	80067ae <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0xe>
 80067f8:	6060      	str	r0, [r4, #4]
 80067fa:	e7e3      	b.n	80067c4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x24>
 80067fc:	2300      	movs	r3, #0
 80067fe:	e7ee      	b.n	80067de <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

08006800 <_Unwind_GetGR>:
 8006800:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006802:	ab03      	add	r3, sp, #12
 8006804:	9300      	str	r3, [sp, #0]
 8006806:	2300      	movs	r3, #0
 8006808:	460a      	mov	r2, r1
 800680a:	4619      	mov	r1, r3
 800680c:	f7fa f88e 	bl	800092c <_Unwind_VRS_Get>
 8006810:	9803      	ldr	r0, [sp, #12]
 8006812:	b005      	add	sp, #20
 8006814:	f85d fb04 	ldr.w	pc, [sp], #4

08006818 <__gxx_personality_v0>:
 8006818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800681c:	b091      	sub	sp, #68	; 0x44
 800681e:	2300      	movs	r3, #0
 8006820:	9304      	str	r3, [sp, #16]
 8006822:	f000 0303 	and.w	r3, r0, #3
 8006826:	2b01      	cmp	r3, #1
 8006828:	4607      	mov	r7, r0
 800682a:	460c      	mov	r4, r1
 800682c:	4616      	mov	r6, r2
 800682e:	d011      	beq.n	8006854 <__gxx_personality_v0+0x3c>
 8006830:	d303      	bcc.n	800683a <__gxx_personality_v0+0x22>
 8006832:	2b02      	cmp	r3, #2
 8006834:	d003      	beq.n	800683e <__gxx_personality_v0+0x26>
 8006836:	f000 fc61 	bl	80070fc <abort>
 800683a:	0702      	lsls	r2, r0, #28
 800683c:	d51a      	bpl.n	8006874 <__gxx_personality_v0+0x5c>
 800683e:	4631      	mov	r1, r6
 8006840:	4620      	mov	r0, r4
 8006842:	f7fa fdf5 	bl	8001430 <__gnu_unwind_frame>
 8006846:	b118      	cbz	r0, 8006850 <__gxx_personality_v0+0x38>
 8006848:	2009      	movs	r0, #9
 800684a:	b011      	add	sp, #68	; 0x44
 800684c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006850:	2008      	movs	r0, #8
 8006852:	e7fa      	b.n	800684a <__gxx_personality_v0+0x32>
 8006854:	f000 0508 	and.w	r5, r0, #8
 8006858:	f005 08ff 	and.w	r8, r5, #255	; 0xff
 800685c:	bb85      	cbnz	r5, 80068c0 <__gxx_personality_v0+0xa8>
 800685e:	f8d1 9020 	ldr.w	r9, [r1, #32]
 8006862:	4610      	mov	r0, r2
 8006864:	210d      	movs	r1, #13
 8006866:	f7ff ffcb 	bl	8006800 <_Unwind_GetGR>
 800686a:	4581      	cmp	r9, r0
 800686c:	f040 8140 	bne.w	8006af0 <__gxx_personality_v0+0x2d8>
 8006870:	2506      	movs	r5, #6
 8006872:	e000      	b.n	8006876 <__gxx_personality_v0+0x5e>
 8006874:	2501      	movs	r5, #1
 8006876:	ab10      	add	r3, sp, #64	; 0x40
 8006878:	f007 0708 	and.w	r7, r7, #8
 800687c:	f843 4d2c 	str.w	r4, [r3, #-44]!
 8006880:	9300      	str	r3, [sp, #0]
 8006882:	2300      	movs	r3, #0
 8006884:	433d      	orrs	r5, r7
 8006886:	220c      	movs	r2, #12
 8006888:	4619      	mov	r1, r3
 800688a:	4630      	mov	r0, r6
 800688c:	f7fa f874 	bl	8000978 <_Unwind_VRS_Set>
 8006890:	2d06      	cmp	r5, #6
 8006892:	f040 8139 	bne.w	8006b08 <__gxx_personality_v0+0x2f0>
 8006896:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 800689a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800689c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800689e:	f1b8 0f00 	cmp.w	r8, #0
 80068a2:	bf0c      	ite	eq
 80068a4:	f04f 0a01 	moveq.w	sl, #1
 80068a8:	f04f 0a03 	movne.w	sl, #3
 80068ac:	f015 0508 	ands.w	r5, r5, #8
 80068b0:	f000 80ce 	beq.w	8006a50 <__gxx_personality_v0+0x238>
 80068b4:	f1ba 0f01 	cmp.w	sl, #1
 80068b8:	f040 80c6 	bne.w	8006a48 <__gxx_personality_v0+0x230>
 80068bc:	f7ff fdb0 	bl	8006420 <_ZSt9terminatev>
 80068c0:	2502      	movs	r5, #2
 80068c2:	e7d8      	b.n	8006876 <__gxx_personality_v0+0x5e>
 80068c4:	9a07      	ldr	r2, [sp, #28]
 80068c6:	4413      	add	r3, r2
 80068c8:	429f      	cmp	r7, r3
 80068ca:	f080 8137 	bcs.w	8006b3c <__gxx_personality_v0+0x324>
 80068ce:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80068d2:	f1b8 0f00 	cmp.w	r8, #0
 80068d6:	d001      	beq.n	80068dc <__gxx_personality_v0+0xc4>
 80068d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068da:	4498      	add	r8, r3
 80068dc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80068de:	b117      	cbz	r7, 80068e6 <__gxx_personality_v0+0xce>
 80068e0:	1e78      	subs	r0, r7, #1
 80068e2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 80068e4:	4407      	add	r7, r0
 80068e6:	f1b8 0f00 	cmp.w	r8, #0
 80068ea:	d0a8      	beq.n	800683e <__gxx_personality_v0+0x26>
 80068ec:	2f00      	cmp	r7, #0
 80068ee:	f000 80a1 	beq.w	8006a34 <__gxx_personality_v0+0x21c>
 80068f2:	f015 0308 	ands.w	r3, r5, #8
 80068f6:	9302      	str	r3, [sp, #8]
 80068f8:	d036      	beq.n	8006968 <__gxx_personality_v0+0x150>
 80068fa:	2347      	movs	r3, #71	; 0x47
 80068fc:	7023      	strb	r3, [r4, #0]
 80068fe:	234e      	movs	r3, #78	; 0x4e
 8006900:	7063      	strb	r3, [r4, #1]
 8006902:	2355      	movs	r3, #85	; 0x55
 8006904:	70a3      	strb	r3, [r4, #2]
 8006906:	2343      	movs	r3, #67	; 0x43
 8006908:	70e3      	strb	r3, [r4, #3]
 800690a:	2346      	movs	r3, #70	; 0x46
 800690c:	7123      	strb	r3, [r4, #4]
 800690e:	234f      	movs	r3, #79	; 0x4f
 8006910:	7163      	strb	r3, [r4, #5]
 8006912:	2352      	movs	r3, #82	; 0x52
 8006914:	71a3      	strb	r3, [r4, #6]
 8006916:	2300      	movs	r3, #0
 8006918:	71e3      	strb	r3, [r4, #7]
 800691a:	f04f 0a00 	mov.w	sl, #0
 800691e:	f06f 0b03 	mvn.w	fp, #3
 8006922:	a907      	add	r1, sp, #28
 8006924:	4638      	mov	r0, r7
 8006926:	f7ff feac 	bl	8006682 <_ZL12read_sleb128PKhPl>
 800692a:	a908      	add	r1, sp, #32
 800692c:	9003      	str	r0, [sp, #12]
 800692e:	f7ff fea8 	bl	8006682 <_ZL12read_sleb128PKhPl>
 8006932:	9a07      	ldr	r2, [sp, #28]
 8006934:	2a00      	cmp	r2, #0
 8006936:	d076      	beq.n	8006a26 <__gxx_personality_v0+0x20e>
 8006938:	dd3d      	ble.n	80069b6 <__gxx_personality_v0+0x19e>
 800693a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 800693e:	28ff      	cmp	r0, #255	; 0xff
 8006940:	d035      	beq.n	80069ae <__gxx_personality_v0+0x196>
 8006942:	f000 0307 	and.w	r3, r0, #7
 8006946:	2b04      	cmp	r3, #4
 8006948:	f63f af75 	bhi.w	8006836 <__gxx_personality_v0+0x1e>
 800694c:	a101      	add	r1, pc, #4	; (adr r1, 8006954 <__gxx_personality_v0+0x13c>)
 800694e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006952:	bf00      	nop
 8006954:	080069b3 	.word	0x080069b3
 8006958:	08006837 	.word	0x08006837
 800695c:	0800697b 	.word	0x0800697b
 8006960:	080069b3 	.word	0x080069b3
 8006964:	080069ab 	.word	0x080069ab
 8006968:	79e3      	ldrb	r3, [r4, #7]
 800696a:	2b01      	cmp	r3, #1
 800696c:	bf0c      	ite	eq
 800696e:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8006972:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8006976:	9304      	str	r3, [sp, #16]
 8006978:	e7cf      	b.n	800691a <__gxx_personality_v0+0x102>
 800697a:	2702      	movs	r7, #2
 800697c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800697e:	ab09      	add	r3, sp, #36	; 0x24
 8006980:	fb07 1212 	mls	r2, r7, r2, r1
 8006984:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006986:	f7ff fe94 	bl	80066b2 <_ZL28read_encoded_value_with_basehjPKhPj>
 800698a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800698c:	b369      	cbz	r1, 80069ea <__gxx_personality_v0+0x1d2>
 800698e:	b12c      	cbz	r4, 800699c <__gxx_personality_v0+0x184>
 8006990:	ab04      	add	r3, sp, #16
 8006992:	2200      	movs	r2, #0
 8006994:	4620      	mov	r0, r4
 8006996:	f7ff fdcf 	bl	8006538 <__cxa_type_match>
 800699a:	bb30      	cbnz	r0, 80069ea <__gxx_personality_v0+0x1d2>
 800699c:	9f08      	ldr	r7, [sp, #32]
 800699e:	2f00      	cmp	r7, #0
 80069a0:	d044      	beq.n	8006a2c <__gxx_personality_v0+0x214>
 80069a2:	9b03      	ldr	r3, [sp, #12]
 80069a4:	443b      	add	r3, r7
 80069a6:	461f      	mov	r7, r3
 80069a8:	e7bb      	b.n	8006922 <__gxx_personality_v0+0x10a>
 80069aa:	2708      	movs	r7, #8
 80069ac:	e7e6      	b.n	800697c <__gxx_personality_v0+0x164>
 80069ae:	2700      	movs	r7, #0
 80069b0:	e7e4      	b.n	800697c <__gxx_personality_v0+0x164>
 80069b2:	2704      	movs	r7, #4
 80069b4:	e7e2      	b.n	800697c <__gxx_personality_v0+0x164>
 80069b6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80069b8:	3201      	adds	r2, #1
 80069ba:	b36c      	cbz	r4, 8006a18 <__gxx_personality_v0+0x200>
 80069bc:	9b02      	ldr	r3, [sp, #8]
 80069be:	bb5b      	cbnz	r3, 8006a18 <__gxx_personality_v0+0x200>
 80069c0:	9b04      	ldr	r3, [sp, #16]
 80069c2:	9306      	str	r3, [sp, #24]
 80069c4:	fb0b 7202 	mla	r2, fp, r2, r7
 80069c8:	1f17      	subs	r7, r2, #4
 80069ca:	f857 1f04 	ldr.w	r1, [r7, #4]!
 80069ce:	b141      	cbz	r1, 80069e2 <__gxx_personality_v0+0x1ca>
 80069d0:	ab06      	add	r3, sp, #24
 80069d2:	2200      	movs	r2, #0
 80069d4:	4439      	add	r1, r7
 80069d6:	4620      	mov	r0, r4
 80069d8:	f7ff fdae 	bl	8006538 <__cxa_type_match>
 80069dc:	2800      	cmp	r0, #0
 80069de:	d0f4      	beq.n	80069ca <__gxx_personality_v0+0x1b2>
 80069e0:	2101      	movs	r1, #1
 80069e2:	f081 0101 	eor.w	r1, r1, #1
 80069e6:	2900      	cmp	r1, #0
 80069e8:	d0d8      	beq.n	800699c <__gxx_personality_v0+0x184>
 80069ea:	9f07      	ldr	r7, [sp, #28]
 80069ec:	f04f 0a03 	mov.w	sl, #3
 80069f0:	07eb      	lsls	r3, r5, #31
 80069f2:	d527      	bpl.n	8006a44 <__gxx_personality_v0+0x22c>
 80069f4:	f1ba 0f02 	cmp.w	sl, #2
 80069f8:	f43f af21 	beq.w	800683e <__gxx_personality_v0+0x26>
 80069fc:	210d      	movs	r1, #13
 80069fe:	4630      	mov	r0, r6
 8006a00:	9d04      	ldr	r5, [sp, #16]
 8006a02:	f7ff fefd 	bl	8006800 <_Unwind_GetGR>
 8006a06:	6265      	str	r5, [r4, #36]	; 0x24
 8006a08:	6220      	str	r0, [r4, #32]
 8006a0a:	62a7      	str	r7, [r4, #40]	; 0x28
 8006a0c:	f8c4 902c 	str.w	r9, [r4, #44]	; 0x2c
 8006a10:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8006a14:	2006      	movs	r0, #6
 8006a16:	e718      	b.n	800684a <__gxx_personality_v0+0x32>
 8006a18:	fb0b f202 	mul.w	r2, fp, r2
 8006a1c:	58b9      	ldr	r1, [r7, r2]
 8006a1e:	fab1 f181 	clz	r1, r1
 8006a22:	0949      	lsrs	r1, r1, #5
 8006a24:	e7df      	b.n	80069e6 <__gxx_personality_v0+0x1ce>
 8006a26:	f04f 0a01 	mov.w	sl, #1
 8006a2a:	e7b7      	b.n	800699c <__gxx_personality_v0+0x184>
 8006a2c:	f1ba 0f00 	cmp.w	sl, #0
 8006a30:	f43f af05 	beq.w	800683e <__gxx_personality_v0+0x26>
 8006a34:	f04f 0a02 	mov.w	sl, #2
 8006a38:	e7da      	b.n	80069f0 <__gxx_personality_v0+0x1d8>
 8006a3a:	2700      	movs	r7, #0
 8006a3c:	46b8      	mov	r8, r7
 8006a3e:	f04f 0a01 	mov.w	sl, #1
 8006a42:	e7d5      	b.n	80069f0 <__gxx_personality_v0+0x1d8>
 8006a44:	4649      	mov	r1, r9
 8006a46:	e731      	b.n	80068ac <__gxx_personality_v0+0x94>
 8006a48:	2f00      	cmp	r7, #0
 8006a4a:	da23      	bge.n	8006a94 <__gxx_personality_v0+0x27c>
 8006a4c:	f7ff fcfa 	bl	8006444 <_ZSt10unexpectedv>
 8006a50:	f1ba 0f01 	cmp.w	sl, #1
 8006a54:	d102      	bne.n	8006a5c <__gxx_personality_v0+0x244>
 8006a56:	4620      	mov	r0, r4
 8006a58:	f000 f944 	bl	8006ce4 <__cxa_call_terminate>
 8006a5c:	2f00      	cmp	r7, #0
 8006a5e:	da19      	bge.n	8006a94 <__gxx_personality_v0+0x27c>
 8006a60:	aa0a      	add	r2, sp, #40	; 0x28
 8006a62:	4630      	mov	r0, r6
 8006a64:	f7ff fe9c 	bl	80067a0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8006a68:	4631      	mov	r1, r6
 8006a6a:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8006a6e:	f7ff fe64 	bl	800673a <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8006a72:	f06f 0303 	mvn.w	r3, #3
 8006a76:	fb07 3203 	mla	r2, r7, r3, r3
 8006a7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a7c:	900c      	str	r0, [sp, #48]	; 0x30
 8006a7e:	4413      	add	r3, r2
 8006a80:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
 8006a84:	b10a      	cbz	r2, 8006a8a <__gxx_personality_v0+0x272>
 8006a86:	3501      	adds	r5, #1
 8006a88:	e7fa      	b.n	8006a80 <__gxx_personality_v0+0x268>
 8006a8a:	2204      	movs	r2, #4
 8006a8c:	62a5      	str	r5, [r4, #40]	; 0x28
 8006a8e:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006a90:	6322      	str	r2, [r4, #48]	; 0x30
 8006a92:	6363      	str	r3, [r4, #52]	; 0x34
 8006a94:	ab10      	add	r3, sp, #64	; 0x40
 8006a96:	4630      	mov	r0, r6
 8006a98:	f843 4d1c 	str.w	r4, [r3, #-28]!
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	f7f9 ff68 	bl	8000978 <_Unwind_VRS_Set>
 8006aa8:	ab10      	add	r3, sp, #64	; 0x40
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f843 7d20 	str.w	r7, [r3, #-32]!
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	f7f9 ff5e 	bl	8000978 <_Unwind_VRS_Set>
 8006abc:	210f      	movs	r1, #15
 8006abe:	4630      	mov	r0, r6
 8006ac0:	f7ff fe9e 	bl	8006800 <_Unwind_GetGR>
 8006ac4:	ab10      	add	r3, sp, #64	; 0x40
 8006ac6:	f000 0001 	and.w	r0, r0, #1
 8006aca:	ea40 0008 	orr.w	r0, r0, r8
 8006ace:	f843 0d24 	str.w	r0, [r3, #-36]!
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	220f      	movs	r2, #15
 8006ad8:	4619      	mov	r1, r3
 8006ada:	4630      	mov	r0, r6
 8006adc:	f7f9 ff4c 	bl	8000978 <_Unwind_VRS_Set>
 8006ae0:	f1ba 0f02 	cmp.w	sl, #2
 8006ae4:	d102      	bne.n	8006aec <__gxx_personality_v0+0x2d4>
 8006ae6:	4620      	mov	r0, r4
 8006ae8:	f7ff fd84 	bl	80065f4 <__cxa_begin_cleanup>
 8006aec:	2007      	movs	r0, #7
 8006aee:	e6ac      	b.n	800684a <__gxx_personality_v0+0x32>
 8006af0:	aa10      	add	r2, sp, #64	; 0x40
 8006af2:	4643      	mov	r3, r8
 8006af4:	f842 4d2c 	str.w	r4, [r2, #-44]!
 8006af8:	4641      	mov	r1, r8
 8006afa:	9200      	str	r2, [sp, #0]
 8006afc:	4630      	mov	r0, r6
 8006afe:	220c      	movs	r2, #12
 8006b00:	f045 0502 	orr.w	r5, r5, #2
 8006b04:	f7f9 ff38 	bl	8000978 <_Unwind_VRS_Set>
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f7fa fcab 	bl	8001464 <_Unwind_GetLanguageSpecificData>
 8006b0e:	4681      	mov	r9, r0
 8006b10:	2800      	cmp	r0, #0
 8006b12:	f43f ae94 	beq.w	800683e <__gxx_personality_v0+0x26>
 8006b16:	aa0a      	add	r2, sp, #40	; 0x28
 8006b18:	4601      	mov	r1, r0
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f7ff fe40 	bl	80067a0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8006b20:	4631      	mov	r1, r6
 8006b22:	4680      	mov	r8, r0
 8006b24:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8006b28:	f7ff fe07 	bl	800673a <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8006b2c:	210f      	movs	r1, #15
 8006b2e:	900c      	str	r0, [sp, #48]	; 0x30
 8006b30:	4630      	mov	r0, r6
 8006b32:	f7ff fe65 	bl	8006800 <_Unwind_GetGR>
 8006b36:	f020 0001 	bic.w	r0, r0, #1
 8006b3a:	1e47      	subs	r7, r0, #1
 8006b3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006b3e:	4598      	cmp	r8, r3
 8006b40:	f4bf af7b 	bcs.w	8006a3a <__gxx_personality_v0+0x222>
 8006b44:	4642      	mov	r2, r8
 8006b46:	ab06      	add	r3, sp, #24
 8006b48:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8006b4c:	2000      	movs	r0, #0
 8006b4e:	f7ff fe17 	bl	8006780 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006b52:	ab07      	add	r3, sp, #28
 8006b54:	4602      	mov	r2, r0
 8006b56:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	f7ff fe10 	bl	8006780 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006b60:	ab08      	add	r3, sp, #32
 8006b62:	4602      	mov	r2, r0
 8006b64:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8006b68:	2000      	movs	r0, #0
 8006b6a:	f7ff fe09 	bl	8006780 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8006b6e:	a909      	add	r1, sp, #36	; 0x24
 8006b70:	f7ff fd76 	bl	8006660 <_ZL12read_uleb128PKhPm>
 8006b74:	9a06      	ldr	r2, [sp, #24]
 8006b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b78:	4413      	add	r3, r2
 8006b7a:	429f      	cmp	r7, r3
 8006b7c:	4680      	mov	r8, r0
 8006b7e:	f4bf aea1 	bcs.w	80068c4 <__gxx_personality_v0+0xac>
 8006b82:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8006b86:	e7d9      	b.n	8006b3c <__gxx_personality_v0+0x324>

08006b88 <_ZSt15get_new_handlerv>:
 8006b88:	4b02      	ldr	r3, [pc, #8]	; (8006b94 <_ZSt15get_new_handlerv+0xc>)
 8006b8a:	6818      	ldr	r0, [r3, #0]
 8006b8c:	f3bf 8f5b 	dmb	ish
 8006b90:	4770      	bx	lr
 8006b92:	bf00      	nop
 8006b94:	200002dc 	.word	0x200002dc

08006b98 <_ZSt17__throw_bad_allocv>:
 8006b98:	b508      	push	{r3, lr}
 8006b9a:	f000 faaf 	bl	80070fc <abort>

08006b9e <_ZSt20__throw_length_errorPKc>:
 8006b9e:	b508      	push	{r3, lr}
 8006ba0:	f000 faac 	bl	80070fc <abort>

08006ba4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8006ba4:	b510      	push	{r4, lr}
 8006ba6:	4b03      	ldr	r3, [pc, #12]	; (8006bb4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8006ba8:	6003      	str	r3, [r0, #0]
 8006baa:	4604      	mov	r4, r0
 8006bac:	f000 f8f4 	bl	8006d98 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	bd10      	pop	{r4, pc}
 8006bb4:	08007ba4 	.word	0x08007ba4

08006bb8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	4604      	mov	r4, r0
 8006bbc:	f7ff fff2 	bl	8006ba4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8006bc0:	4620      	mov	r0, r4
 8006bc2:	210c      	movs	r1, #12
 8006bc4:	f000 f8c6 	bl	8006d54 <_ZdlPvj>
 8006bc8:	4620      	mov	r0, r4
 8006bca:	bd10      	pop	{r4, pc}

08006bcc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8006bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd0:	9e06      	ldr	r6, [sp, #24]
 8006bd2:	4296      	cmp	r6, r2
 8006bd4:	4680      	mov	r8, r0
 8006bd6:	460f      	mov	r7, r1
 8006bd8:	4614      	mov	r4, r2
 8006bda:	461d      	mov	r5, r3
 8006bdc:	d103      	bne.n	8006be6 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1a>
 8006bde:	4619      	mov	r1, r3
 8006be0:	f000 f92e 	bl	8006e40 <_ZNKSt9type_infoeqERKS_>
 8006be4:	b958      	cbnz	r0, 8006bfe <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x32>
 8006be6:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006bea:	6803      	ldr	r3, [r0, #0]
 8006bec:	9606      	str	r6, [sp, #24]
 8006bee:	6a1e      	ldr	r6, [r3, #32]
 8006bf0:	4622      	mov	r2, r4
 8006bf2:	462b      	mov	r3, r5
 8006bf4:	4639      	mov	r1, r7
 8006bf6:	46b4      	mov	ip, r6
 8006bf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfc:	4760      	bx	ip
 8006bfe:	2006      	movs	r0, #6
 8006c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006c04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8006c04:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c08:	460e      	mov	r6, r1
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	4683      	mov	fp, r0
 8006c0e:	4617      	mov	r7, r2
 8006c10:	4699      	mov	r9, r3
 8006c12:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006c14:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 8006c18:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8006c1c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006c1e:	f000 f90f 	bl	8006e40 <_ZNKSt9type_infoeqERKS_>
 8006c22:	b190      	cbz	r0, 8006c4a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x46>
 8006c24:	2e00      	cmp	r6, #0
 8006c26:	602c      	str	r4, [r5, #0]
 8006c28:	712f      	strb	r7, [r5, #4]
 8006c2a:	db09      	blt.n	8006c40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x3c>
 8006c2c:	4434      	add	r4, r6
 8006c2e:	45a0      	cmp	r8, r4
 8006c30:	bf0c      	ite	eq
 8006c32:	2406      	moveq	r4, #6
 8006c34:	2401      	movne	r4, #1
 8006c36:	71ac      	strb	r4, [r5, #6]
 8006c38:	2000      	movs	r0, #0
 8006c3a:	b001      	add	sp, #4
 8006c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c40:	3602      	adds	r6, #2
 8006c42:	d1f9      	bne.n	8006c38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8006c44:	2301      	movs	r3, #1
 8006c46:	71ab      	strb	r3, [r5, #6]
 8006c48:	e7f6      	b.n	8006c38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8006c4a:	4544      	cmp	r4, r8
 8006c4c:	d104      	bne.n	8006c58 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8006c4e:	4651      	mov	r1, sl
 8006c50:	4658      	mov	r0, fp
 8006c52:	f000 f8f5 	bl	8006e40 <_ZNKSt9type_infoeqERKS_>
 8006c56:	b988      	cbnz	r0, 8006c7c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 8006c58:	f8db 0008 	ldr.w	r0, [fp, #8]
 8006c5c:	6803      	ldr	r3, [r0, #0]
 8006c5e:	950d      	str	r5, [sp, #52]	; 0x34
 8006c60:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8006c64:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 8006c68:	940a      	str	r4, [sp, #40]	; 0x28
 8006c6a:	69dc      	ldr	r4, [r3, #28]
 8006c6c:	463a      	mov	r2, r7
 8006c6e:	464b      	mov	r3, r9
 8006c70:	4631      	mov	r1, r6
 8006c72:	46a4      	mov	ip, r4
 8006c74:	b001      	add	sp, #4
 8006c76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c7a:	4760      	bx	ip
 8006c7c:	716f      	strb	r7, [r5, #5]
 8006c7e:	e7db      	b.n	8006c38 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>

08006c80 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8006c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c84:	4604      	mov	r4, r0
 8006c86:	460d      	mov	r5, r1
 8006c88:	4616      	mov	r6, r2
 8006c8a:	461f      	mov	r7, r3
 8006c8c:	f000 f898 	bl	8006dc0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8006c90:	b948      	cbnz	r0, 8006ca6 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8006c92:	68a0      	ldr	r0, [r4, #8]
 8006c94:	6803      	ldr	r3, [r0, #0]
 8006c96:	699c      	ldr	r4, [r3, #24]
 8006c98:	4632      	mov	r2, r6
 8006c9a:	463b      	mov	r3, r7
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	46a4      	mov	ip, r4
 8006ca0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ca4:	4760      	bx	ip
 8006ca6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006caa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8006caa:	7803      	ldrb	r3, [r0, #0]
 8006cac:	2b47      	cmp	r3, #71	; 0x47
 8006cae:	d117      	bne.n	8006ce0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006cb0:	7843      	ldrb	r3, [r0, #1]
 8006cb2:	2b4e      	cmp	r3, #78	; 0x4e
 8006cb4:	d114      	bne.n	8006ce0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006cb6:	7883      	ldrb	r3, [r0, #2]
 8006cb8:	2b55      	cmp	r3, #85	; 0x55
 8006cba:	d111      	bne.n	8006ce0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006cbc:	78c3      	ldrb	r3, [r0, #3]
 8006cbe:	2b43      	cmp	r3, #67	; 0x43
 8006cc0:	d10e      	bne.n	8006ce0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006cc2:	7903      	ldrb	r3, [r0, #4]
 8006cc4:	2b43      	cmp	r3, #67	; 0x43
 8006cc6:	d10b      	bne.n	8006ce0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006cc8:	7943      	ldrb	r3, [r0, #5]
 8006cca:	2b2b      	cmp	r3, #43	; 0x2b
 8006ccc:	d108      	bne.n	8006ce0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006cce:	7983      	ldrb	r3, [r0, #6]
 8006cd0:	2b2b      	cmp	r3, #43	; 0x2b
 8006cd2:	d105      	bne.n	8006ce0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006cd4:	79c0      	ldrb	r0, [r0, #7]
 8006cd6:	2801      	cmp	r0, #1
 8006cd8:	bf8c      	ite	hi
 8006cda:	2000      	movhi	r0, #0
 8006cdc:	2001      	movls	r0, #1
 8006cde:	4770      	bx	lr
 8006ce0:	2000      	movs	r0, #0
 8006ce2:	4770      	bx	lr

08006ce4 <__cxa_call_terminate>:
 8006ce4:	b510      	push	{r4, lr}
 8006ce6:	4604      	mov	r4, r0
 8006ce8:	b148      	cbz	r0, 8006cfe <__cxa_call_terminate+0x1a>
 8006cea:	f7ff fb3e 	bl	800636a <__cxa_begin_catch>
 8006cee:	4620      	mov	r0, r4
 8006cf0:	f7ff ffdb 	bl	8006caa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006cf4:	b118      	cbz	r0, 8006cfe <__cxa_call_terminate+0x1a>
 8006cf6:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8006cfa:	f7ff fb84 	bl	8006406 <_ZN10__cxxabiv111__terminateEPFvvE>
 8006cfe:	f7ff fb8f 	bl	8006420 <_ZSt9terminatev>

08006d02 <__cxa_call_unexpected>:
 8006d02:	b538      	push	{r3, r4, r5, lr}
 8006d04:	4602      	mov	r2, r0
 8006d06:	f7ff ffd0 	bl	8006caa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006d0a:	b140      	cbz	r0, 8006d1e <__cxa_call_unexpected+0x1c>
 8006d0c:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8006d10:	2500      	movs	r5, #0
 8006d12:	4610      	mov	r0, r2
 8006d14:	f7ff fb29 	bl	800636a <__cxa_begin_catch>
 8006d18:	b125      	cbz	r5, 8006d24 <__cxa_call_unexpected+0x22>
 8006d1a:	f7ff fb93 	bl	8006444 <_ZSt10unexpectedv>
 8006d1e:	4604      	mov	r4, r0
 8006d20:	2501      	movs	r5, #1
 8006d22:	e7f6      	b.n	8006d12 <__cxa_call_unexpected+0x10>
 8006d24:	4620      	mov	r0, r4
 8006d26:	f7ff fb80 	bl	800642a <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

08006d2c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 8006d2c:	b538      	push	{r3, r4, r5, lr}
 8006d2e:	4c08      	ldr	r4, [pc, #32]	; (8006d50 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8006d30:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 8006d34:	4628      	mov	r0, r5
 8006d36:	60e5      	str	r5, [r4, #12]
 8006d38:	f000 fa1a 	bl	8007170 <malloc>
 8006d3c:	60a0      	str	r0, [r4, #8]
 8006d3e:	b910      	cbnz	r0, 8006d46 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 8006d40:	60e0      	str	r0, [r4, #12]
 8006d42:	6060      	str	r0, [r4, #4]
 8006d44:	bd38      	pop	{r3, r4, r5, pc}
 8006d46:	2300      	movs	r3, #0
 8006d48:	6060      	str	r0, [r4, #4]
 8006d4a:	6005      	str	r5, [r0, #0]
 8006d4c:	6043      	str	r3, [r0, #4]
 8006d4e:	bd38      	pop	{r3, r4, r5, pc}
 8006d50:	200002e0 	.word	0x200002e0

08006d54 <_ZdlPvj>:
 8006d54:	f7ff bae5 	b.w	8006322 <_ZdlPv>

08006d58 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8006d58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006d5a:	2310      	movs	r3, #16
 8006d5c:	9302      	str	r3, [sp, #8]
 8006d5e:	6803      	ldr	r3, [r0, #0]
 8006d60:	2400      	movs	r4, #0
 8006d62:	4615      	mov	r5, r2
 8006d64:	699e      	ldr	r6, [r3, #24]
 8006d66:	9400      	str	r4, [sp, #0]
 8006d68:	466b      	mov	r3, sp
 8006d6a:	f88d 4004 	strb.w	r4, [sp, #4]
 8006d6e:	9403      	str	r4, [sp, #12]
 8006d70:	6812      	ldr	r2, [r2, #0]
 8006d72:	47b0      	blx	r6
 8006d74:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006d78:	f003 0306 	and.w	r3, r3, #6
 8006d7c:	2b06      	cmp	r3, #6
 8006d7e:	bf03      	ittte	eq
 8006d80:	9b00      	ldreq	r3, [sp, #0]
 8006d82:	602b      	streq	r3, [r5, #0]
 8006d84:	2001      	moveq	r0, #1
 8006d86:	4620      	movne	r0, r4
 8006d88:	b004      	add	sp, #16
 8006d8a:	bd70      	pop	{r4, r5, r6, pc}

08006d8c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8006d8c:	9800      	ldr	r0, [sp, #0]
 8006d8e:	4290      	cmp	r0, r2
 8006d90:	bf0c      	ite	eq
 8006d92:	2006      	moveq	r0, #6
 8006d94:	2001      	movne	r0, #1
 8006d96:	4770      	bx	lr

08006d98 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8006d98:	b510      	push	{r4, lr}
 8006d9a:	4b03      	ldr	r3, [pc, #12]	; (8006da8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8006d9c:	6003      	str	r3, [r0, #0]
 8006d9e:	4604      	mov	r4, r0
 8006da0:	f000 f84b 	bl	8006e3a <_ZNSt9type_infoD1Ev>
 8006da4:	4620      	mov	r0, r4
 8006da6:	bd10      	pop	{r4, pc}
 8006da8:	08007c00 	.word	0x08007c00

08006dac <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8006dac:	b510      	push	{r4, lr}
 8006dae:	4604      	mov	r4, r0
 8006db0:	f7ff fff2 	bl	8006d98 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8006db4:	4620      	mov	r0, r4
 8006db6:	2108      	movs	r1, #8
 8006db8:	f7ff ffcc 	bl	8006d54 <_ZdlPvj>
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	bd10      	pop	{r4, pc}

08006dc0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	4615      	mov	r5, r2
 8006dc4:	461c      	mov	r4, r3
 8006dc6:	f000 f83b 	bl	8006e40 <_ZNKSt9type_infoeqERKS_>
 8006dca:	b120      	cbz	r0, 8006dd6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8006dcc:	2308      	movs	r3, #8
 8006dce:	60e3      	str	r3, [r4, #12]
 8006dd0:	2306      	movs	r3, #6
 8006dd2:	6025      	str	r5, [r4, #0]
 8006dd4:	7123      	strb	r3, [r4, #4]
 8006dd6:	bd38      	pop	{r3, r4, r5, pc}

08006dd8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8006dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ddc:	4605      	mov	r5, r0
 8006dde:	460c      	mov	r4, r1
 8006de0:	4616      	mov	r6, r2
 8006de2:	461f      	mov	r7, r3
 8006de4:	f000 f82c 	bl	8006e40 <_ZNKSt9type_infoeqERKS_>
 8006de8:	b948      	cbnz	r0, 8006dfe <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8006dea:	2f03      	cmp	r7, #3
 8006dec:	d807      	bhi.n	8006dfe <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8006dee:	6823      	ldr	r3, [r4, #0]
 8006df0:	4632      	mov	r2, r6
 8006df2:	4629      	mov	r1, r5
 8006df4:	4620      	mov	r0, r4
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dfc:	4718      	bx	r3
 8006dfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006e02 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8006e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e06:	9e06      	ldr	r6, [sp, #24]
 8006e08:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8006e0a:	4698      	mov	r8, r3
 8006e0c:	9b08      	ldr	r3, [sp, #32]
 8006e0e:	429e      	cmp	r6, r3
 8006e10:	4607      	mov	r7, r0
 8006e12:	4615      	mov	r5, r2
 8006e14:	d103      	bne.n	8006e1e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x1c>
 8006e16:	9907      	ldr	r1, [sp, #28]
 8006e18:	f000 f812 	bl	8006e40 <_ZNKSt9type_infoeqERKS_>
 8006e1c:	b958      	cbnz	r0, 8006e36 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 8006e1e:	4641      	mov	r1, r8
 8006e20:	4638      	mov	r0, r7
 8006e22:	f000 f80d 	bl	8006e40 <_ZNKSt9type_infoeqERKS_>
 8006e26:	b118      	cbz	r0, 8006e30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>
 8006e28:	2301      	movs	r3, #1
 8006e2a:	6026      	str	r6, [r4, #0]
 8006e2c:	7125      	strb	r5, [r4, #4]
 8006e2e:	71a3      	strb	r3, [r4, #6]
 8006e30:	2000      	movs	r0, #0
 8006e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e36:	7165      	strb	r5, [r4, #5]
 8006e38:	e7fa      	b.n	8006e30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2e>

08006e3a <_ZNSt9type_infoD1Ev>:
 8006e3a:	4770      	bx	lr

08006e3c <_ZNKSt9type_info14__is_pointer_pEv>:
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	4770      	bx	lr

08006e40 <_ZNKSt9type_infoeqERKS_>:
 8006e40:	4281      	cmp	r1, r0
 8006e42:	b508      	push	{r3, lr}
 8006e44:	d00e      	beq.n	8006e64 <_ZNKSt9type_infoeqERKS_+0x24>
 8006e46:	6840      	ldr	r0, [r0, #4]
 8006e48:	7803      	ldrb	r3, [r0, #0]
 8006e4a:	2b2a      	cmp	r3, #42	; 0x2a
 8006e4c:	d00c      	beq.n	8006e68 <_ZNKSt9type_infoeqERKS_+0x28>
 8006e4e:	6849      	ldr	r1, [r1, #4]
 8006e50:	780b      	ldrb	r3, [r1, #0]
 8006e52:	2b2a      	cmp	r3, #42	; 0x2a
 8006e54:	bf08      	it	eq
 8006e56:	3101      	addeq	r1, #1
 8006e58:	f7f9 fa0a 	bl	8000270 <strcmp>
 8006e5c:	fab0 f080 	clz	r0, r0
 8006e60:	0940      	lsrs	r0, r0, #5
 8006e62:	bd08      	pop	{r3, pc}
 8006e64:	2001      	movs	r0, #1
 8006e66:	bd08      	pop	{r3, pc}
 8006e68:	2000      	movs	r0, #0
 8006e6a:	bd08      	pop	{r3, pc}

08006e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8006e6c:	4b24      	ldr	r3, [pc, #144]	; (8006f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	07d0      	lsls	r0, r2, #31
 8006e72:	bf5c      	itt	pl
 8006e74:	2201      	movpl	r2, #1
 8006e76:	601a      	strpl	r2, [r3, #0]
 8006e78:	4b22      	ldr	r3, [pc, #136]	; (8006f04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	07d1      	lsls	r1, r2, #31
 8006e7e:	bf5c      	itt	pl
 8006e80:	2201      	movpl	r2, #1
 8006e82:	601a      	strpl	r2, [r3, #0]
 8006e84:	4b20      	ldr	r3, [pc, #128]	; (8006f08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	07d2      	lsls	r2, r2, #31
 8006e8a:	bf5c      	itt	pl
 8006e8c:	2201      	movpl	r2, #1
 8006e8e:	601a      	strpl	r2, [r3, #0]
 8006e90:	4b1e      	ldr	r3, [pc, #120]	; (8006f0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	07d0      	lsls	r0, r2, #31
 8006e96:	bf5c      	itt	pl
 8006e98:	2201      	movpl	r2, #1
 8006e9a:	601a      	strpl	r2, [r3, #0]
 8006e9c:	4b1c      	ldr	r3, [pc, #112]	; (8006f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	07d1      	lsls	r1, r2, #31
 8006ea2:	bf5c      	itt	pl
 8006ea4:	2201      	movpl	r2, #1
 8006ea6:	601a      	strpl	r2, [r3, #0]
 8006ea8:	4b1a      	ldr	r3, [pc, #104]	; (8006f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	07d2      	lsls	r2, r2, #31
 8006eae:	bf5c      	itt	pl
 8006eb0:	2201      	movpl	r2, #1
 8006eb2:	601a      	strpl	r2, [r3, #0]
 8006eb4:	4b18      	ldr	r3, [pc, #96]	; (8006f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	07d0      	lsls	r0, r2, #31
 8006eba:	bf5c      	itt	pl
 8006ebc:	2201      	movpl	r2, #1
 8006ebe:	601a      	strpl	r2, [r3, #0]
 8006ec0:	4b16      	ldr	r3, [pc, #88]	; (8006f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	07d1      	lsls	r1, r2, #31
 8006ec6:	bf5c      	itt	pl
 8006ec8:	2201      	movpl	r2, #1
 8006eca:	601a      	strpl	r2, [r3, #0]
 8006ecc:	4b14      	ldr	r3, [pc, #80]	; (8006f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	07d2      	lsls	r2, r2, #31
 8006ed2:	bf5c      	itt	pl
 8006ed4:	2201      	movpl	r2, #1
 8006ed6:	601a      	strpl	r2, [r3, #0]
 8006ed8:	4b12      	ldr	r3, [pc, #72]	; (8006f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	07d0      	lsls	r0, r2, #31
 8006ede:	bf5c      	itt	pl
 8006ee0:	2201      	movpl	r2, #1
 8006ee2:	601a      	strpl	r2, [r3, #0]
 8006ee4:	4b10      	ldr	r3, [pc, #64]	; (8006f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	07d1      	lsls	r1, r2, #31
 8006eea:	bf5c      	itt	pl
 8006eec:	2201      	movpl	r2, #1
 8006eee:	601a      	strpl	r2, [r3, #0]
 8006ef0:	4b0e      	ldr	r3, [pc, #56]	; (8006f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	07d2      	lsls	r2, r2, #31
 8006ef6:	bf5c      	itt	pl
 8006ef8:	2201      	movpl	r2, #1
 8006efa:	601a      	strpl	r2, [r3, #0]
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	2000031c 	.word	0x2000031c
 8006f04:	20000318 	.word	0x20000318
 8006f08:	20000314 	.word	0x20000314
 8006f0c:	20000310 	.word	0x20000310
 8006f10:	2000030c 	.word	0x2000030c
 8006f14:	20000308 	.word	0x20000308
 8006f18:	20000304 	.word	0x20000304
 8006f1c:	20000300 	.word	0x20000300
 8006f20:	200002fc 	.word	0x200002fc
 8006f24:	200002f8 	.word	0x200002f8
 8006f28:	200002f4 	.word	0x200002f4
 8006f2c:	200002f0 	.word	0x200002f0

08006f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8006f30:	4b18      	ldr	r3, [pc, #96]	; (8006f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	07d1      	lsls	r1, r2, #31
 8006f36:	bf5c      	itt	pl
 8006f38:	2201      	movpl	r2, #1
 8006f3a:	601a      	strpl	r2, [r3, #0]
 8006f3c:	4b16      	ldr	r3, [pc, #88]	; (8006f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	07d2      	lsls	r2, r2, #31
 8006f42:	bf5c      	itt	pl
 8006f44:	2201      	movpl	r2, #1
 8006f46:	601a      	strpl	r2, [r3, #0]
 8006f48:	4b14      	ldr	r3, [pc, #80]	; (8006f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	07d0      	lsls	r0, r2, #31
 8006f4e:	bf5c      	itt	pl
 8006f50:	2201      	movpl	r2, #1
 8006f52:	601a      	strpl	r2, [r3, #0]
 8006f54:	4b12      	ldr	r3, [pc, #72]	; (8006fa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	07d1      	lsls	r1, r2, #31
 8006f5a:	bf5c      	itt	pl
 8006f5c:	2201      	movpl	r2, #1
 8006f5e:	601a      	strpl	r2, [r3, #0]
 8006f60:	4b10      	ldr	r3, [pc, #64]	; (8006fa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	07d2      	lsls	r2, r2, #31
 8006f66:	bf5c      	itt	pl
 8006f68:	2201      	movpl	r2, #1
 8006f6a:	601a      	strpl	r2, [r3, #0]
 8006f6c:	4b0e      	ldr	r3, [pc, #56]	; (8006fa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	07d0      	lsls	r0, r2, #31
 8006f72:	bf5c      	itt	pl
 8006f74:	2201      	movpl	r2, #1
 8006f76:	601a      	strpl	r2, [r3, #0]
 8006f78:	4b0c      	ldr	r3, [pc, #48]	; (8006fac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	07d1      	lsls	r1, r2, #31
 8006f7e:	bf5c      	itt	pl
 8006f80:	2201      	movpl	r2, #1
 8006f82:	601a      	strpl	r2, [r3, #0]
 8006f84:	4b0a      	ldr	r3, [pc, #40]	; (8006fb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	07d2      	lsls	r2, r2, #31
 8006f8a:	bf5c      	itt	pl
 8006f8c:	2201      	movpl	r2, #1
 8006f8e:	601a      	strpl	r2, [r3, #0]
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	2000033c 	.word	0x2000033c
 8006f98:	20000338 	.word	0x20000338
 8006f9c:	20000334 	.word	0x20000334
 8006fa0:	20000330 	.word	0x20000330
 8006fa4:	2000032c 	.word	0x2000032c
 8006fa8:	20000328 	.word	0x20000328
 8006fac:	20000324 	.word	0x20000324
 8006fb0:	20000320 	.word	0x20000320

08006fb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8006fb4:	4b24      	ldr	r3, [pc, #144]	; (8007048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	07d0      	lsls	r0, r2, #31
 8006fba:	bf5c      	itt	pl
 8006fbc:	2201      	movpl	r2, #1
 8006fbe:	601a      	strpl	r2, [r3, #0]
 8006fc0:	4b22      	ldr	r3, [pc, #136]	; (800704c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	07d1      	lsls	r1, r2, #31
 8006fc6:	bf5c      	itt	pl
 8006fc8:	2201      	movpl	r2, #1
 8006fca:	601a      	strpl	r2, [r3, #0]
 8006fcc:	4b20      	ldr	r3, [pc, #128]	; (8007050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	07d2      	lsls	r2, r2, #31
 8006fd2:	bf5c      	itt	pl
 8006fd4:	2201      	movpl	r2, #1
 8006fd6:	601a      	strpl	r2, [r3, #0]
 8006fd8:	4b1e      	ldr	r3, [pc, #120]	; (8007054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	07d0      	lsls	r0, r2, #31
 8006fde:	bf5c      	itt	pl
 8006fe0:	2201      	movpl	r2, #1
 8006fe2:	601a      	strpl	r2, [r3, #0]
 8006fe4:	4b1c      	ldr	r3, [pc, #112]	; (8007058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	07d1      	lsls	r1, r2, #31
 8006fea:	bf5c      	itt	pl
 8006fec:	2201      	movpl	r2, #1
 8006fee:	601a      	strpl	r2, [r3, #0]
 8006ff0:	4b1a      	ldr	r3, [pc, #104]	; (800705c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	07d2      	lsls	r2, r2, #31
 8006ff6:	bf5c      	itt	pl
 8006ff8:	2201      	movpl	r2, #1
 8006ffa:	601a      	strpl	r2, [r3, #0]
 8006ffc:	4b18      	ldr	r3, [pc, #96]	; (8007060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	07d0      	lsls	r0, r2, #31
 8007002:	bf5c      	itt	pl
 8007004:	2201      	movpl	r2, #1
 8007006:	601a      	strpl	r2, [r3, #0]
 8007008:	4b16      	ldr	r3, [pc, #88]	; (8007064 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	07d1      	lsls	r1, r2, #31
 800700e:	bf5c      	itt	pl
 8007010:	2201      	movpl	r2, #1
 8007012:	601a      	strpl	r2, [r3, #0]
 8007014:	4b14      	ldr	r3, [pc, #80]	; (8007068 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	07d2      	lsls	r2, r2, #31
 800701a:	bf5c      	itt	pl
 800701c:	2201      	movpl	r2, #1
 800701e:	601a      	strpl	r2, [r3, #0]
 8007020:	4b12      	ldr	r3, [pc, #72]	; (800706c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	07d0      	lsls	r0, r2, #31
 8007026:	bf5c      	itt	pl
 8007028:	2201      	movpl	r2, #1
 800702a:	601a      	strpl	r2, [r3, #0]
 800702c:	4b10      	ldr	r3, [pc, #64]	; (8007070 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	07d1      	lsls	r1, r2, #31
 8007032:	bf5c      	itt	pl
 8007034:	2201      	movpl	r2, #1
 8007036:	601a      	strpl	r2, [r3, #0]
 8007038:	4b0e      	ldr	r3, [pc, #56]	; (8007074 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	07d2      	lsls	r2, r2, #31
 800703e:	bf5c      	itt	pl
 8007040:	2201      	movpl	r2, #1
 8007042:	601a      	strpl	r2, [r3, #0]
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	2000036c 	.word	0x2000036c
 800704c:	20000368 	.word	0x20000368
 8007050:	20000364 	.word	0x20000364
 8007054:	20000360 	.word	0x20000360
 8007058:	2000035c 	.word	0x2000035c
 800705c:	20000358 	.word	0x20000358
 8007060:	20000354 	.word	0x20000354
 8007064:	20000350 	.word	0x20000350
 8007068:	2000034c 	.word	0x2000034c
 800706c:	20000348 	.word	0x20000348
 8007070:	20000344 	.word	0x20000344
 8007074:	20000340 	.word	0x20000340

08007078 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8007078:	4b18      	ldr	r3, [pc, #96]	; (80070dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	07d1      	lsls	r1, r2, #31
 800707e:	bf5c      	itt	pl
 8007080:	2201      	movpl	r2, #1
 8007082:	601a      	strpl	r2, [r3, #0]
 8007084:	4b16      	ldr	r3, [pc, #88]	; (80070e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	07d2      	lsls	r2, r2, #31
 800708a:	bf5c      	itt	pl
 800708c:	2201      	movpl	r2, #1
 800708e:	601a      	strpl	r2, [r3, #0]
 8007090:	4b14      	ldr	r3, [pc, #80]	; (80070e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	07d0      	lsls	r0, r2, #31
 8007096:	bf5c      	itt	pl
 8007098:	2201      	movpl	r2, #1
 800709a:	601a      	strpl	r2, [r3, #0]
 800709c:	4b12      	ldr	r3, [pc, #72]	; (80070e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	07d1      	lsls	r1, r2, #31
 80070a2:	bf5c      	itt	pl
 80070a4:	2201      	movpl	r2, #1
 80070a6:	601a      	strpl	r2, [r3, #0]
 80070a8:	4b10      	ldr	r3, [pc, #64]	; (80070ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	07d2      	lsls	r2, r2, #31
 80070ae:	bf5c      	itt	pl
 80070b0:	2201      	movpl	r2, #1
 80070b2:	601a      	strpl	r2, [r3, #0]
 80070b4:	4b0e      	ldr	r3, [pc, #56]	; (80070f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	07d0      	lsls	r0, r2, #31
 80070ba:	bf5c      	itt	pl
 80070bc:	2201      	movpl	r2, #1
 80070be:	601a      	strpl	r2, [r3, #0]
 80070c0:	4b0c      	ldr	r3, [pc, #48]	; (80070f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	07d1      	lsls	r1, r2, #31
 80070c6:	bf5c      	itt	pl
 80070c8:	2201      	movpl	r2, #1
 80070ca:	601a      	strpl	r2, [r3, #0]
 80070cc:	4b0a      	ldr	r3, [pc, #40]	; (80070f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	07d2      	lsls	r2, r2, #31
 80070d2:	bf5c      	itt	pl
 80070d4:	2201      	movpl	r2, #1
 80070d6:	601a      	strpl	r2, [r3, #0]
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	2000038c 	.word	0x2000038c
 80070e0:	20000388 	.word	0x20000388
 80070e4:	20000384 	.word	0x20000384
 80070e8:	20000380 	.word	0x20000380
 80070ec:	2000037c 	.word	0x2000037c
 80070f0:	20000378 	.word	0x20000378
 80070f4:	20000374 	.word	0x20000374
 80070f8:	20000370 	.word	0x20000370

080070fc <abort>:
 80070fc:	b508      	push	{r3, lr}
 80070fe:	2006      	movs	r0, #6
 8007100:	f000 f958 	bl	80073b4 <raise>
 8007104:	2001      	movs	r0, #1
 8007106:	f000 fccb 	bl	8007aa0 <_exit>
	...

0800710c <__cxa_atexit>:
 800710c:	b510      	push	{r4, lr}
 800710e:	4c05      	ldr	r4, [pc, #20]	; (8007124 <__cxa_atexit+0x18>)
 8007110:	4613      	mov	r3, r2
 8007112:	b12c      	cbz	r4, 8007120 <__cxa_atexit+0x14>
 8007114:	460a      	mov	r2, r1
 8007116:	4601      	mov	r1, r0
 8007118:	2002      	movs	r0, #2
 800711a:	f3af 8000 	nop.w
 800711e:	bd10      	pop	{r4, pc}
 8007120:	4620      	mov	r0, r4
 8007122:	bd10      	pop	{r4, pc}
 8007124:	00000000 	.word	0x00000000

08007128 <__libc_init_array>:
 8007128:	b570      	push	{r4, r5, r6, lr}
 800712a:	4e0d      	ldr	r6, [pc, #52]	; (8007160 <__libc_init_array+0x38>)
 800712c:	4c0d      	ldr	r4, [pc, #52]	; (8007164 <__libc_init_array+0x3c>)
 800712e:	1ba4      	subs	r4, r4, r6
 8007130:	10a4      	asrs	r4, r4, #2
 8007132:	2500      	movs	r5, #0
 8007134:	42a5      	cmp	r5, r4
 8007136:	d109      	bne.n	800714c <__libc_init_array+0x24>
 8007138:	4e0b      	ldr	r6, [pc, #44]	; (8007168 <__libc_init_array+0x40>)
 800713a:	4c0c      	ldr	r4, [pc, #48]	; (800716c <__libc_init_array+0x44>)
 800713c:	f000 fcb2 	bl	8007aa4 <_init>
 8007140:	1ba4      	subs	r4, r4, r6
 8007142:	10a4      	asrs	r4, r4, #2
 8007144:	2500      	movs	r5, #0
 8007146:	42a5      	cmp	r5, r4
 8007148:	d105      	bne.n	8007156 <__libc_init_array+0x2e>
 800714a:	bd70      	pop	{r4, r5, r6, pc}
 800714c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007150:	4798      	blx	r3
 8007152:	3501      	adds	r5, #1
 8007154:	e7ee      	b.n	8007134 <__libc_init_array+0xc>
 8007156:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800715a:	4798      	blx	r3
 800715c:	3501      	adds	r5, #1
 800715e:	e7f2      	b.n	8007146 <__libc_init_array+0x1e>
 8007160:	080086d4 	.word	0x080086d4
 8007164:	080086d4 	.word	0x080086d4
 8007168:	080086d4 	.word	0x080086d4
 800716c:	080086f0 	.word	0x080086f0

08007170 <malloc>:
 8007170:	4b02      	ldr	r3, [pc, #8]	; (800717c <malloc+0xc>)
 8007172:	4601      	mov	r1, r0
 8007174:	6818      	ldr	r0, [r3, #0]
 8007176:	f000 b887 	b.w	8007288 <_malloc_r>
 800717a:	bf00      	nop
 800717c:	20000018 	.word	0x20000018

08007180 <free>:
 8007180:	4b02      	ldr	r3, [pc, #8]	; (800718c <free+0xc>)
 8007182:	4601      	mov	r1, r0
 8007184:	6818      	ldr	r0, [r3, #0]
 8007186:	f000 b831 	b.w	80071ec <_free_r>
 800718a:	bf00      	nop
 800718c:	20000018 	.word	0x20000018

08007190 <memcpy>:
 8007190:	b510      	push	{r4, lr}
 8007192:	1e43      	subs	r3, r0, #1
 8007194:	440a      	add	r2, r1
 8007196:	4291      	cmp	r1, r2
 8007198:	d100      	bne.n	800719c <memcpy+0xc>
 800719a:	bd10      	pop	{r4, pc}
 800719c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071a4:	e7f7      	b.n	8007196 <memcpy+0x6>

080071a6 <memmove>:
 80071a6:	4288      	cmp	r0, r1
 80071a8:	b510      	push	{r4, lr}
 80071aa:	eb01 0302 	add.w	r3, r1, r2
 80071ae:	d803      	bhi.n	80071b8 <memmove+0x12>
 80071b0:	1e42      	subs	r2, r0, #1
 80071b2:	4299      	cmp	r1, r3
 80071b4:	d10c      	bne.n	80071d0 <memmove+0x2a>
 80071b6:	bd10      	pop	{r4, pc}
 80071b8:	4298      	cmp	r0, r3
 80071ba:	d2f9      	bcs.n	80071b0 <memmove+0xa>
 80071bc:	1881      	adds	r1, r0, r2
 80071be:	1ad2      	subs	r2, r2, r3
 80071c0:	42d3      	cmn	r3, r2
 80071c2:	d100      	bne.n	80071c6 <memmove+0x20>
 80071c4:	bd10      	pop	{r4, pc}
 80071c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071ca:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80071ce:	e7f7      	b.n	80071c0 <memmove+0x1a>
 80071d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071d4:	f802 4f01 	strb.w	r4, [r2, #1]!
 80071d8:	e7eb      	b.n	80071b2 <memmove+0xc>

080071da <memset>:
 80071da:	4402      	add	r2, r0
 80071dc:	4603      	mov	r3, r0
 80071de:	4293      	cmp	r3, r2
 80071e0:	d100      	bne.n	80071e4 <memset+0xa>
 80071e2:	4770      	bx	lr
 80071e4:	f803 1b01 	strb.w	r1, [r3], #1
 80071e8:	e7f9      	b.n	80071de <memset+0x4>
	...

080071ec <_free_r>:
 80071ec:	b538      	push	{r3, r4, r5, lr}
 80071ee:	4605      	mov	r5, r0
 80071f0:	2900      	cmp	r1, #0
 80071f2:	d045      	beq.n	8007280 <_free_r+0x94>
 80071f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071f8:	1f0c      	subs	r4, r1, #4
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	bfb8      	it	lt
 80071fe:	18e4      	addlt	r4, r4, r3
 8007200:	f000 f918 	bl	8007434 <__malloc_lock>
 8007204:	4a1f      	ldr	r2, [pc, #124]	; (8007284 <_free_r+0x98>)
 8007206:	6813      	ldr	r3, [r2, #0]
 8007208:	4610      	mov	r0, r2
 800720a:	b933      	cbnz	r3, 800721a <_free_r+0x2e>
 800720c:	6063      	str	r3, [r4, #4]
 800720e:	6014      	str	r4, [r2, #0]
 8007210:	4628      	mov	r0, r5
 8007212:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007216:	f000 b90e 	b.w	8007436 <__malloc_unlock>
 800721a:	42a3      	cmp	r3, r4
 800721c:	d90c      	bls.n	8007238 <_free_r+0x4c>
 800721e:	6821      	ldr	r1, [r4, #0]
 8007220:	1862      	adds	r2, r4, r1
 8007222:	4293      	cmp	r3, r2
 8007224:	bf04      	itt	eq
 8007226:	681a      	ldreq	r2, [r3, #0]
 8007228:	685b      	ldreq	r3, [r3, #4]
 800722a:	6063      	str	r3, [r4, #4]
 800722c:	bf04      	itt	eq
 800722e:	1852      	addeq	r2, r2, r1
 8007230:	6022      	streq	r2, [r4, #0]
 8007232:	6004      	str	r4, [r0, #0]
 8007234:	e7ec      	b.n	8007210 <_free_r+0x24>
 8007236:	4613      	mov	r3, r2
 8007238:	685a      	ldr	r2, [r3, #4]
 800723a:	b10a      	cbz	r2, 8007240 <_free_r+0x54>
 800723c:	42a2      	cmp	r2, r4
 800723e:	d9fa      	bls.n	8007236 <_free_r+0x4a>
 8007240:	6819      	ldr	r1, [r3, #0]
 8007242:	1858      	adds	r0, r3, r1
 8007244:	42a0      	cmp	r0, r4
 8007246:	d10b      	bne.n	8007260 <_free_r+0x74>
 8007248:	6820      	ldr	r0, [r4, #0]
 800724a:	4401      	add	r1, r0
 800724c:	1858      	adds	r0, r3, r1
 800724e:	4282      	cmp	r2, r0
 8007250:	6019      	str	r1, [r3, #0]
 8007252:	d1dd      	bne.n	8007210 <_free_r+0x24>
 8007254:	6810      	ldr	r0, [r2, #0]
 8007256:	6852      	ldr	r2, [r2, #4]
 8007258:	605a      	str	r2, [r3, #4]
 800725a:	4401      	add	r1, r0
 800725c:	6019      	str	r1, [r3, #0]
 800725e:	e7d7      	b.n	8007210 <_free_r+0x24>
 8007260:	d902      	bls.n	8007268 <_free_r+0x7c>
 8007262:	230c      	movs	r3, #12
 8007264:	602b      	str	r3, [r5, #0]
 8007266:	e7d3      	b.n	8007210 <_free_r+0x24>
 8007268:	6820      	ldr	r0, [r4, #0]
 800726a:	1821      	adds	r1, r4, r0
 800726c:	428a      	cmp	r2, r1
 800726e:	bf04      	itt	eq
 8007270:	6811      	ldreq	r1, [r2, #0]
 8007272:	6852      	ldreq	r2, [r2, #4]
 8007274:	6062      	str	r2, [r4, #4]
 8007276:	bf04      	itt	eq
 8007278:	1809      	addeq	r1, r1, r0
 800727a:	6021      	streq	r1, [r4, #0]
 800727c:	605c      	str	r4, [r3, #4]
 800727e:	e7c7      	b.n	8007210 <_free_r+0x24>
 8007280:	bd38      	pop	{r3, r4, r5, pc}
 8007282:	bf00      	nop
 8007284:	20000390 	.word	0x20000390

08007288 <_malloc_r>:
 8007288:	b570      	push	{r4, r5, r6, lr}
 800728a:	1ccd      	adds	r5, r1, #3
 800728c:	f025 0503 	bic.w	r5, r5, #3
 8007290:	3508      	adds	r5, #8
 8007292:	2d0c      	cmp	r5, #12
 8007294:	bf38      	it	cc
 8007296:	250c      	movcc	r5, #12
 8007298:	2d00      	cmp	r5, #0
 800729a:	4606      	mov	r6, r0
 800729c:	db01      	blt.n	80072a2 <_malloc_r+0x1a>
 800729e:	42a9      	cmp	r1, r5
 80072a0:	d903      	bls.n	80072aa <_malloc_r+0x22>
 80072a2:	230c      	movs	r3, #12
 80072a4:	6033      	str	r3, [r6, #0]
 80072a6:	2000      	movs	r0, #0
 80072a8:	bd70      	pop	{r4, r5, r6, pc}
 80072aa:	f000 f8c3 	bl	8007434 <__malloc_lock>
 80072ae:	4a23      	ldr	r2, [pc, #140]	; (800733c <_malloc_r+0xb4>)
 80072b0:	6814      	ldr	r4, [r2, #0]
 80072b2:	4621      	mov	r1, r4
 80072b4:	b991      	cbnz	r1, 80072dc <_malloc_r+0x54>
 80072b6:	4c22      	ldr	r4, [pc, #136]	; (8007340 <_malloc_r+0xb8>)
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	b91b      	cbnz	r3, 80072c4 <_malloc_r+0x3c>
 80072bc:	4630      	mov	r0, r6
 80072be:	f000 f841 	bl	8007344 <_sbrk_r>
 80072c2:	6020      	str	r0, [r4, #0]
 80072c4:	4629      	mov	r1, r5
 80072c6:	4630      	mov	r0, r6
 80072c8:	f000 f83c 	bl	8007344 <_sbrk_r>
 80072cc:	1c43      	adds	r3, r0, #1
 80072ce:	d126      	bne.n	800731e <_malloc_r+0x96>
 80072d0:	230c      	movs	r3, #12
 80072d2:	6033      	str	r3, [r6, #0]
 80072d4:	4630      	mov	r0, r6
 80072d6:	f000 f8ae 	bl	8007436 <__malloc_unlock>
 80072da:	e7e4      	b.n	80072a6 <_malloc_r+0x1e>
 80072dc:	680b      	ldr	r3, [r1, #0]
 80072de:	1b5b      	subs	r3, r3, r5
 80072e0:	d41a      	bmi.n	8007318 <_malloc_r+0x90>
 80072e2:	2b0b      	cmp	r3, #11
 80072e4:	d90f      	bls.n	8007306 <_malloc_r+0x7e>
 80072e6:	600b      	str	r3, [r1, #0]
 80072e8:	50cd      	str	r5, [r1, r3]
 80072ea:	18cc      	adds	r4, r1, r3
 80072ec:	4630      	mov	r0, r6
 80072ee:	f000 f8a2 	bl	8007436 <__malloc_unlock>
 80072f2:	f104 000b 	add.w	r0, r4, #11
 80072f6:	1d23      	adds	r3, r4, #4
 80072f8:	f020 0007 	bic.w	r0, r0, #7
 80072fc:	1ac3      	subs	r3, r0, r3
 80072fe:	d01b      	beq.n	8007338 <_malloc_r+0xb0>
 8007300:	425a      	negs	r2, r3
 8007302:	50e2      	str	r2, [r4, r3]
 8007304:	bd70      	pop	{r4, r5, r6, pc}
 8007306:	428c      	cmp	r4, r1
 8007308:	bf0d      	iteet	eq
 800730a:	6863      	ldreq	r3, [r4, #4]
 800730c:	684b      	ldrne	r3, [r1, #4]
 800730e:	6063      	strne	r3, [r4, #4]
 8007310:	6013      	streq	r3, [r2, #0]
 8007312:	bf18      	it	ne
 8007314:	460c      	movne	r4, r1
 8007316:	e7e9      	b.n	80072ec <_malloc_r+0x64>
 8007318:	460c      	mov	r4, r1
 800731a:	6849      	ldr	r1, [r1, #4]
 800731c:	e7ca      	b.n	80072b4 <_malloc_r+0x2c>
 800731e:	1cc4      	adds	r4, r0, #3
 8007320:	f024 0403 	bic.w	r4, r4, #3
 8007324:	42a0      	cmp	r0, r4
 8007326:	d005      	beq.n	8007334 <_malloc_r+0xac>
 8007328:	1a21      	subs	r1, r4, r0
 800732a:	4630      	mov	r0, r6
 800732c:	f000 f80a 	bl	8007344 <_sbrk_r>
 8007330:	3001      	adds	r0, #1
 8007332:	d0cd      	beq.n	80072d0 <_malloc_r+0x48>
 8007334:	6025      	str	r5, [r4, #0]
 8007336:	e7d9      	b.n	80072ec <_malloc_r+0x64>
 8007338:	bd70      	pop	{r4, r5, r6, pc}
 800733a:	bf00      	nop
 800733c:	20000390 	.word	0x20000390
 8007340:	20000394 	.word	0x20000394

08007344 <_sbrk_r>:
 8007344:	b538      	push	{r3, r4, r5, lr}
 8007346:	4c06      	ldr	r4, [pc, #24]	; (8007360 <_sbrk_r+0x1c>)
 8007348:	2300      	movs	r3, #0
 800734a:	4605      	mov	r5, r0
 800734c:	4608      	mov	r0, r1
 800734e:	6023      	str	r3, [r4, #0]
 8007350:	f000 fb98 	bl	8007a84 <_sbrk>
 8007354:	1c43      	adds	r3, r0, #1
 8007356:	d102      	bne.n	800735e <_sbrk_r+0x1a>
 8007358:	6823      	ldr	r3, [r4, #0]
 800735a:	b103      	cbz	r3, 800735e <_sbrk_r+0x1a>
 800735c:	602b      	str	r3, [r5, #0]
 800735e:	bd38      	pop	{r3, r4, r5, pc}
 8007360:	200003a0 	.word	0x200003a0

08007364 <_raise_r>:
 8007364:	291f      	cmp	r1, #31
 8007366:	b538      	push	{r3, r4, r5, lr}
 8007368:	4604      	mov	r4, r0
 800736a:	460d      	mov	r5, r1
 800736c:	d904      	bls.n	8007378 <_raise_r+0x14>
 800736e:	2316      	movs	r3, #22
 8007370:	6003      	str	r3, [r0, #0]
 8007372:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007376:	bd38      	pop	{r3, r4, r5, pc}
 8007378:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800737a:	b112      	cbz	r2, 8007382 <_raise_r+0x1e>
 800737c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007380:	b94b      	cbnz	r3, 8007396 <_raise_r+0x32>
 8007382:	4620      	mov	r0, r4
 8007384:	f000 f830 	bl	80073e8 <_getpid_r>
 8007388:	462a      	mov	r2, r5
 800738a:	4601      	mov	r1, r0
 800738c:	4620      	mov	r0, r4
 800738e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007392:	f000 b817 	b.w	80073c4 <_kill_r>
 8007396:	2b01      	cmp	r3, #1
 8007398:	d00a      	beq.n	80073b0 <_raise_r+0x4c>
 800739a:	1c59      	adds	r1, r3, #1
 800739c:	d103      	bne.n	80073a6 <_raise_r+0x42>
 800739e:	2316      	movs	r3, #22
 80073a0:	6003      	str	r3, [r0, #0]
 80073a2:	2001      	movs	r0, #1
 80073a4:	bd38      	pop	{r3, r4, r5, pc}
 80073a6:	2400      	movs	r4, #0
 80073a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80073ac:	4628      	mov	r0, r5
 80073ae:	4798      	blx	r3
 80073b0:	2000      	movs	r0, #0
 80073b2:	bd38      	pop	{r3, r4, r5, pc}

080073b4 <raise>:
 80073b4:	4b02      	ldr	r3, [pc, #8]	; (80073c0 <raise+0xc>)
 80073b6:	4601      	mov	r1, r0
 80073b8:	6818      	ldr	r0, [r3, #0]
 80073ba:	f7ff bfd3 	b.w	8007364 <_raise_r>
 80073be:	bf00      	nop
 80073c0:	20000018 	.word	0x20000018

080073c4 <_kill_r>:
 80073c4:	b538      	push	{r3, r4, r5, lr}
 80073c6:	4c07      	ldr	r4, [pc, #28]	; (80073e4 <_kill_r+0x20>)
 80073c8:	2300      	movs	r3, #0
 80073ca:	4605      	mov	r5, r0
 80073cc:	4608      	mov	r0, r1
 80073ce:	4611      	mov	r1, r2
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	f000 fb4f 	bl	8007a74 <_kill>
 80073d6:	1c43      	adds	r3, r0, #1
 80073d8:	d102      	bne.n	80073e0 <_kill_r+0x1c>
 80073da:	6823      	ldr	r3, [r4, #0]
 80073dc:	b103      	cbz	r3, 80073e0 <_kill_r+0x1c>
 80073de:	602b      	str	r3, [r5, #0]
 80073e0:	bd38      	pop	{r3, r4, r5, pc}
 80073e2:	bf00      	nop
 80073e4:	200003a0 	.word	0x200003a0

080073e8 <_getpid_r>:
 80073e8:	f000 bb3c 	b.w	8007a64 <_getpid>

080073ec <siprintf>:
 80073ec:	b40e      	push	{r1, r2, r3}
 80073ee:	b500      	push	{lr}
 80073f0:	b09c      	sub	sp, #112	; 0x70
 80073f2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80073f6:	ab1d      	add	r3, sp, #116	; 0x74
 80073f8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80073fc:	9002      	str	r0, [sp, #8]
 80073fe:	9006      	str	r0, [sp, #24]
 8007400:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007404:	480a      	ldr	r0, [pc, #40]	; (8007430 <siprintf+0x44>)
 8007406:	9104      	str	r1, [sp, #16]
 8007408:	9107      	str	r1, [sp, #28]
 800740a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800740e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007412:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007416:	6800      	ldr	r0, [r0, #0]
 8007418:	9301      	str	r3, [sp, #4]
 800741a:	a902      	add	r1, sp, #8
 800741c:	f000 f868 	bl	80074f0 <_svfiprintf_r>
 8007420:	9b02      	ldr	r3, [sp, #8]
 8007422:	2200      	movs	r2, #0
 8007424:	701a      	strb	r2, [r3, #0]
 8007426:	b01c      	add	sp, #112	; 0x70
 8007428:	f85d eb04 	ldr.w	lr, [sp], #4
 800742c:	b003      	add	sp, #12
 800742e:	4770      	bx	lr
 8007430:	20000018 	.word	0x20000018

08007434 <__malloc_lock>:
 8007434:	4770      	bx	lr

08007436 <__malloc_unlock>:
 8007436:	4770      	bx	lr

08007438 <__ssputs_r>:
 8007438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800743c:	688e      	ldr	r6, [r1, #8]
 800743e:	429e      	cmp	r6, r3
 8007440:	4682      	mov	sl, r0
 8007442:	460c      	mov	r4, r1
 8007444:	4691      	mov	r9, r2
 8007446:	4698      	mov	r8, r3
 8007448:	d835      	bhi.n	80074b6 <__ssputs_r+0x7e>
 800744a:	898a      	ldrh	r2, [r1, #12]
 800744c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007450:	d031      	beq.n	80074b6 <__ssputs_r+0x7e>
 8007452:	6825      	ldr	r5, [r4, #0]
 8007454:	6909      	ldr	r1, [r1, #16]
 8007456:	1a6f      	subs	r7, r5, r1
 8007458:	6965      	ldr	r5, [r4, #20]
 800745a:	2302      	movs	r3, #2
 800745c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007460:	fb95 f5f3 	sdiv	r5, r5, r3
 8007464:	f108 0301 	add.w	r3, r8, #1
 8007468:	443b      	add	r3, r7
 800746a:	429d      	cmp	r5, r3
 800746c:	bf38      	it	cc
 800746e:	461d      	movcc	r5, r3
 8007470:	0553      	lsls	r3, r2, #21
 8007472:	d531      	bpl.n	80074d8 <__ssputs_r+0xa0>
 8007474:	4629      	mov	r1, r5
 8007476:	f7ff ff07 	bl	8007288 <_malloc_r>
 800747a:	4606      	mov	r6, r0
 800747c:	b950      	cbnz	r0, 8007494 <__ssputs_r+0x5c>
 800747e:	230c      	movs	r3, #12
 8007480:	f8ca 3000 	str.w	r3, [sl]
 8007484:	89a3      	ldrh	r3, [r4, #12]
 8007486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800748a:	81a3      	strh	r3, [r4, #12]
 800748c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007494:	463a      	mov	r2, r7
 8007496:	6921      	ldr	r1, [r4, #16]
 8007498:	f7ff fe7a 	bl	8007190 <memcpy>
 800749c:	89a3      	ldrh	r3, [r4, #12]
 800749e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80074a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074a6:	81a3      	strh	r3, [r4, #12]
 80074a8:	6126      	str	r6, [r4, #16]
 80074aa:	6165      	str	r5, [r4, #20]
 80074ac:	443e      	add	r6, r7
 80074ae:	1bed      	subs	r5, r5, r7
 80074b0:	6026      	str	r6, [r4, #0]
 80074b2:	60a5      	str	r5, [r4, #8]
 80074b4:	4646      	mov	r6, r8
 80074b6:	4546      	cmp	r6, r8
 80074b8:	bf28      	it	cs
 80074ba:	4646      	movcs	r6, r8
 80074bc:	4632      	mov	r2, r6
 80074be:	4649      	mov	r1, r9
 80074c0:	6820      	ldr	r0, [r4, #0]
 80074c2:	f7ff fe70 	bl	80071a6 <memmove>
 80074c6:	68a3      	ldr	r3, [r4, #8]
 80074c8:	1b9b      	subs	r3, r3, r6
 80074ca:	60a3      	str	r3, [r4, #8]
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	441e      	add	r6, r3
 80074d0:	6026      	str	r6, [r4, #0]
 80074d2:	2000      	movs	r0, #0
 80074d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074d8:	462a      	mov	r2, r5
 80074da:	f000 fa93 	bl	8007a04 <_realloc_r>
 80074de:	4606      	mov	r6, r0
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d1e1      	bne.n	80074a8 <__ssputs_r+0x70>
 80074e4:	6921      	ldr	r1, [r4, #16]
 80074e6:	4650      	mov	r0, sl
 80074e8:	f7ff fe80 	bl	80071ec <_free_r>
 80074ec:	e7c7      	b.n	800747e <__ssputs_r+0x46>
	...

080074f0 <_svfiprintf_r>:
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	b09d      	sub	sp, #116	; 0x74
 80074f6:	4680      	mov	r8, r0
 80074f8:	9303      	str	r3, [sp, #12]
 80074fa:	898b      	ldrh	r3, [r1, #12]
 80074fc:	061c      	lsls	r4, r3, #24
 80074fe:	460d      	mov	r5, r1
 8007500:	4616      	mov	r6, r2
 8007502:	d50f      	bpl.n	8007524 <_svfiprintf_r+0x34>
 8007504:	690b      	ldr	r3, [r1, #16]
 8007506:	b96b      	cbnz	r3, 8007524 <_svfiprintf_r+0x34>
 8007508:	2140      	movs	r1, #64	; 0x40
 800750a:	f7ff febd 	bl	8007288 <_malloc_r>
 800750e:	6028      	str	r0, [r5, #0]
 8007510:	6128      	str	r0, [r5, #16]
 8007512:	b928      	cbnz	r0, 8007520 <_svfiprintf_r+0x30>
 8007514:	230c      	movs	r3, #12
 8007516:	f8c8 3000 	str.w	r3, [r8]
 800751a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800751e:	e0c5      	b.n	80076ac <_svfiprintf_r+0x1bc>
 8007520:	2340      	movs	r3, #64	; 0x40
 8007522:	616b      	str	r3, [r5, #20]
 8007524:	2300      	movs	r3, #0
 8007526:	9309      	str	r3, [sp, #36]	; 0x24
 8007528:	2320      	movs	r3, #32
 800752a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800752e:	2330      	movs	r3, #48	; 0x30
 8007530:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007534:	f04f 0b01 	mov.w	fp, #1
 8007538:	4637      	mov	r7, r6
 800753a:	463c      	mov	r4, r7
 800753c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007540:	2b00      	cmp	r3, #0
 8007542:	d13c      	bne.n	80075be <_svfiprintf_r+0xce>
 8007544:	ebb7 0a06 	subs.w	sl, r7, r6
 8007548:	d00b      	beq.n	8007562 <_svfiprintf_r+0x72>
 800754a:	4653      	mov	r3, sl
 800754c:	4632      	mov	r2, r6
 800754e:	4629      	mov	r1, r5
 8007550:	4640      	mov	r0, r8
 8007552:	f7ff ff71 	bl	8007438 <__ssputs_r>
 8007556:	3001      	adds	r0, #1
 8007558:	f000 80a3 	beq.w	80076a2 <_svfiprintf_r+0x1b2>
 800755c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755e:	4453      	add	r3, sl
 8007560:	9309      	str	r3, [sp, #36]	; 0x24
 8007562:	783b      	ldrb	r3, [r7, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	f000 809c 	beq.w	80076a2 <_svfiprintf_r+0x1b2>
 800756a:	2300      	movs	r3, #0
 800756c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007570:	9304      	str	r3, [sp, #16]
 8007572:	9307      	str	r3, [sp, #28]
 8007574:	9205      	str	r2, [sp, #20]
 8007576:	9306      	str	r3, [sp, #24]
 8007578:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800757c:	931a      	str	r3, [sp, #104]	; 0x68
 800757e:	2205      	movs	r2, #5
 8007580:	7821      	ldrb	r1, [r4, #0]
 8007582:	4850      	ldr	r0, [pc, #320]	; (80076c4 <_svfiprintf_r+0x1d4>)
 8007584:	f7f8 fe24 	bl	80001d0 <memchr>
 8007588:	1c67      	adds	r7, r4, #1
 800758a:	9b04      	ldr	r3, [sp, #16]
 800758c:	b9d8      	cbnz	r0, 80075c6 <_svfiprintf_r+0xd6>
 800758e:	06d9      	lsls	r1, r3, #27
 8007590:	bf44      	itt	mi
 8007592:	2220      	movmi	r2, #32
 8007594:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007598:	071a      	lsls	r2, r3, #28
 800759a:	bf44      	itt	mi
 800759c:	222b      	movmi	r2, #43	; 0x2b
 800759e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075a2:	7822      	ldrb	r2, [r4, #0]
 80075a4:	2a2a      	cmp	r2, #42	; 0x2a
 80075a6:	d016      	beq.n	80075d6 <_svfiprintf_r+0xe6>
 80075a8:	9a07      	ldr	r2, [sp, #28]
 80075aa:	2100      	movs	r1, #0
 80075ac:	200a      	movs	r0, #10
 80075ae:	4627      	mov	r7, r4
 80075b0:	3401      	adds	r4, #1
 80075b2:	783b      	ldrb	r3, [r7, #0]
 80075b4:	3b30      	subs	r3, #48	; 0x30
 80075b6:	2b09      	cmp	r3, #9
 80075b8:	d951      	bls.n	800765e <_svfiprintf_r+0x16e>
 80075ba:	b1c9      	cbz	r1, 80075f0 <_svfiprintf_r+0x100>
 80075bc:	e011      	b.n	80075e2 <_svfiprintf_r+0xf2>
 80075be:	2b25      	cmp	r3, #37	; 0x25
 80075c0:	d0c0      	beq.n	8007544 <_svfiprintf_r+0x54>
 80075c2:	4627      	mov	r7, r4
 80075c4:	e7b9      	b.n	800753a <_svfiprintf_r+0x4a>
 80075c6:	4a3f      	ldr	r2, [pc, #252]	; (80076c4 <_svfiprintf_r+0x1d4>)
 80075c8:	1a80      	subs	r0, r0, r2
 80075ca:	fa0b f000 	lsl.w	r0, fp, r0
 80075ce:	4318      	orrs	r0, r3
 80075d0:	9004      	str	r0, [sp, #16]
 80075d2:	463c      	mov	r4, r7
 80075d4:	e7d3      	b.n	800757e <_svfiprintf_r+0x8e>
 80075d6:	9a03      	ldr	r2, [sp, #12]
 80075d8:	1d11      	adds	r1, r2, #4
 80075da:	6812      	ldr	r2, [r2, #0]
 80075dc:	9103      	str	r1, [sp, #12]
 80075de:	2a00      	cmp	r2, #0
 80075e0:	db01      	blt.n	80075e6 <_svfiprintf_r+0xf6>
 80075e2:	9207      	str	r2, [sp, #28]
 80075e4:	e004      	b.n	80075f0 <_svfiprintf_r+0x100>
 80075e6:	4252      	negs	r2, r2
 80075e8:	f043 0302 	orr.w	r3, r3, #2
 80075ec:	9207      	str	r2, [sp, #28]
 80075ee:	9304      	str	r3, [sp, #16]
 80075f0:	783b      	ldrb	r3, [r7, #0]
 80075f2:	2b2e      	cmp	r3, #46	; 0x2e
 80075f4:	d10e      	bne.n	8007614 <_svfiprintf_r+0x124>
 80075f6:	787b      	ldrb	r3, [r7, #1]
 80075f8:	2b2a      	cmp	r3, #42	; 0x2a
 80075fa:	f107 0101 	add.w	r1, r7, #1
 80075fe:	d132      	bne.n	8007666 <_svfiprintf_r+0x176>
 8007600:	9b03      	ldr	r3, [sp, #12]
 8007602:	1d1a      	adds	r2, r3, #4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	9203      	str	r2, [sp, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	bfb8      	it	lt
 800760c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007610:	3702      	adds	r7, #2
 8007612:	9305      	str	r3, [sp, #20]
 8007614:	4c2c      	ldr	r4, [pc, #176]	; (80076c8 <_svfiprintf_r+0x1d8>)
 8007616:	7839      	ldrb	r1, [r7, #0]
 8007618:	2203      	movs	r2, #3
 800761a:	4620      	mov	r0, r4
 800761c:	f7f8 fdd8 	bl	80001d0 <memchr>
 8007620:	b138      	cbz	r0, 8007632 <_svfiprintf_r+0x142>
 8007622:	2340      	movs	r3, #64	; 0x40
 8007624:	1b00      	subs	r0, r0, r4
 8007626:	fa03 f000 	lsl.w	r0, r3, r0
 800762a:	9b04      	ldr	r3, [sp, #16]
 800762c:	4303      	orrs	r3, r0
 800762e:	9304      	str	r3, [sp, #16]
 8007630:	3701      	adds	r7, #1
 8007632:	7839      	ldrb	r1, [r7, #0]
 8007634:	4825      	ldr	r0, [pc, #148]	; (80076cc <_svfiprintf_r+0x1dc>)
 8007636:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800763a:	2206      	movs	r2, #6
 800763c:	1c7e      	adds	r6, r7, #1
 800763e:	f7f8 fdc7 	bl	80001d0 <memchr>
 8007642:	2800      	cmp	r0, #0
 8007644:	d035      	beq.n	80076b2 <_svfiprintf_r+0x1c2>
 8007646:	4b22      	ldr	r3, [pc, #136]	; (80076d0 <_svfiprintf_r+0x1e0>)
 8007648:	b9fb      	cbnz	r3, 800768a <_svfiprintf_r+0x19a>
 800764a:	9b03      	ldr	r3, [sp, #12]
 800764c:	3307      	adds	r3, #7
 800764e:	f023 0307 	bic.w	r3, r3, #7
 8007652:	3308      	adds	r3, #8
 8007654:	9303      	str	r3, [sp, #12]
 8007656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007658:	444b      	add	r3, r9
 800765a:	9309      	str	r3, [sp, #36]	; 0x24
 800765c:	e76c      	b.n	8007538 <_svfiprintf_r+0x48>
 800765e:	fb00 3202 	mla	r2, r0, r2, r3
 8007662:	2101      	movs	r1, #1
 8007664:	e7a3      	b.n	80075ae <_svfiprintf_r+0xbe>
 8007666:	2300      	movs	r3, #0
 8007668:	9305      	str	r3, [sp, #20]
 800766a:	4618      	mov	r0, r3
 800766c:	240a      	movs	r4, #10
 800766e:	460f      	mov	r7, r1
 8007670:	3101      	adds	r1, #1
 8007672:	783a      	ldrb	r2, [r7, #0]
 8007674:	3a30      	subs	r2, #48	; 0x30
 8007676:	2a09      	cmp	r2, #9
 8007678:	d903      	bls.n	8007682 <_svfiprintf_r+0x192>
 800767a:	2b00      	cmp	r3, #0
 800767c:	d0ca      	beq.n	8007614 <_svfiprintf_r+0x124>
 800767e:	9005      	str	r0, [sp, #20]
 8007680:	e7c8      	b.n	8007614 <_svfiprintf_r+0x124>
 8007682:	fb04 2000 	mla	r0, r4, r0, r2
 8007686:	2301      	movs	r3, #1
 8007688:	e7f1      	b.n	800766e <_svfiprintf_r+0x17e>
 800768a:	ab03      	add	r3, sp, #12
 800768c:	9300      	str	r3, [sp, #0]
 800768e:	462a      	mov	r2, r5
 8007690:	4b10      	ldr	r3, [pc, #64]	; (80076d4 <_svfiprintf_r+0x1e4>)
 8007692:	a904      	add	r1, sp, #16
 8007694:	4640      	mov	r0, r8
 8007696:	f3af 8000 	nop.w
 800769a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800769e:	4681      	mov	r9, r0
 80076a0:	d1d9      	bne.n	8007656 <_svfiprintf_r+0x166>
 80076a2:	89ab      	ldrh	r3, [r5, #12]
 80076a4:	065b      	lsls	r3, r3, #25
 80076a6:	f53f af38 	bmi.w	800751a <_svfiprintf_r+0x2a>
 80076aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076ac:	b01d      	add	sp, #116	; 0x74
 80076ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076b2:	ab03      	add	r3, sp, #12
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	462a      	mov	r2, r5
 80076b8:	4b06      	ldr	r3, [pc, #24]	; (80076d4 <_svfiprintf_r+0x1e4>)
 80076ba:	a904      	add	r1, sp, #16
 80076bc:	4640      	mov	r0, r8
 80076be:	f000 f881 	bl	80077c4 <_printf_i>
 80076c2:	e7ea      	b.n	800769a <_svfiprintf_r+0x1aa>
 80076c4:	08007c9c 	.word	0x08007c9c
 80076c8:	08007ca2 	.word	0x08007ca2
 80076cc:	08007ca6 	.word	0x08007ca6
 80076d0:	00000000 	.word	0x00000000
 80076d4:	08007439 	.word	0x08007439

080076d8 <_printf_common>:
 80076d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076dc:	4691      	mov	r9, r2
 80076de:	461f      	mov	r7, r3
 80076e0:	688a      	ldr	r2, [r1, #8]
 80076e2:	690b      	ldr	r3, [r1, #16]
 80076e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076e8:	4293      	cmp	r3, r2
 80076ea:	bfb8      	it	lt
 80076ec:	4613      	movlt	r3, r2
 80076ee:	f8c9 3000 	str.w	r3, [r9]
 80076f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076f6:	4606      	mov	r6, r0
 80076f8:	460c      	mov	r4, r1
 80076fa:	b112      	cbz	r2, 8007702 <_printf_common+0x2a>
 80076fc:	3301      	adds	r3, #1
 80076fe:	f8c9 3000 	str.w	r3, [r9]
 8007702:	6823      	ldr	r3, [r4, #0]
 8007704:	0699      	lsls	r1, r3, #26
 8007706:	bf42      	ittt	mi
 8007708:	f8d9 3000 	ldrmi.w	r3, [r9]
 800770c:	3302      	addmi	r3, #2
 800770e:	f8c9 3000 	strmi.w	r3, [r9]
 8007712:	6825      	ldr	r5, [r4, #0]
 8007714:	f015 0506 	ands.w	r5, r5, #6
 8007718:	d107      	bne.n	800772a <_printf_common+0x52>
 800771a:	f104 0a19 	add.w	sl, r4, #25
 800771e:	68e3      	ldr	r3, [r4, #12]
 8007720:	f8d9 2000 	ldr.w	r2, [r9]
 8007724:	1a9b      	subs	r3, r3, r2
 8007726:	429d      	cmp	r5, r3
 8007728:	db29      	blt.n	800777e <_printf_common+0xa6>
 800772a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800772e:	6822      	ldr	r2, [r4, #0]
 8007730:	3300      	adds	r3, #0
 8007732:	bf18      	it	ne
 8007734:	2301      	movne	r3, #1
 8007736:	0692      	lsls	r2, r2, #26
 8007738:	d42e      	bmi.n	8007798 <_printf_common+0xc0>
 800773a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800773e:	4639      	mov	r1, r7
 8007740:	4630      	mov	r0, r6
 8007742:	47c0      	blx	r8
 8007744:	3001      	adds	r0, #1
 8007746:	d021      	beq.n	800778c <_printf_common+0xb4>
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	68e5      	ldr	r5, [r4, #12]
 800774c:	f8d9 2000 	ldr.w	r2, [r9]
 8007750:	f003 0306 	and.w	r3, r3, #6
 8007754:	2b04      	cmp	r3, #4
 8007756:	bf08      	it	eq
 8007758:	1aad      	subeq	r5, r5, r2
 800775a:	68a3      	ldr	r3, [r4, #8]
 800775c:	6922      	ldr	r2, [r4, #16]
 800775e:	bf0c      	ite	eq
 8007760:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007764:	2500      	movne	r5, #0
 8007766:	4293      	cmp	r3, r2
 8007768:	bfc4      	itt	gt
 800776a:	1a9b      	subgt	r3, r3, r2
 800776c:	18ed      	addgt	r5, r5, r3
 800776e:	f04f 0900 	mov.w	r9, #0
 8007772:	341a      	adds	r4, #26
 8007774:	454d      	cmp	r5, r9
 8007776:	d11b      	bne.n	80077b0 <_printf_common+0xd8>
 8007778:	2000      	movs	r0, #0
 800777a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800777e:	2301      	movs	r3, #1
 8007780:	4652      	mov	r2, sl
 8007782:	4639      	mov	r1, r7
 8007784:	4630      	mov	r0, r6
 8007786:	47c0      	blx	r8
 8007788:	3001      	adds	r0, #1
 800778a:	d103      	bne.n	8007794 <_printf_common+0xbc>
 800778c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007794:	3501      	adds	r5, #1
 8007796:	e7c2      	b.n	800771e <_printf_common+0x46>
 8007798:	18e1      	adds	r1, r4, r3
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	2030      	movs	r0, #48	; 0x30
 800779e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077a2:	4422      	add	r2, r4
 80077a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077ac:	3302      	adds	r3, #2
 80077ae:	e7c4      	b.n	800773a <_printf_common+0x62>
 80077b0:	2301      	movs	r3, #1
 80077b2:	4622      	mov	r2, r4
 80077b4:	4639      	mov	r1, r7
 80077b6:	4630      	mov	r0, r6
 80077b8:	47c0      	blx	r8
 80077ba:	3001      	adds	r0, #1
 80077bc:	d0e6      	beq.n	800778c <_printf_common+0xb4>
 80077be:	f109 0901 	add.w	r9, r9, #1
 80077c2:	e7d7      	b.n	8007774 <_printf_common+0x9c>

080077c4 <_printf_i>:
 80077c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077c8:	4617      	mov	r7, r2
 80077ca:	7e0a      	ldrb	r2, [r1, #24]
 80077cc:	b085      	sub	sp, #20
 80077ce:	2a6e      	cmp	r2, #110	; 0x6e
 80077d0:	4698      	mov	r8, r3
 80077d2:	4606      	mov	r6, r0
 80077d4:	460c      	mov	r4, r1
 80077d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077d8:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80077dc:	f000 80bc 	beq.w	8007958 <_printf_i+0x194>
 80077e0:	d81a      	bhi.n	8007818 <_printf_i+0x54>
 80077e2:	2a63      	cmp	r2, #99	; 0x63
 80077e4:	d02e      	beq.n	8007844 <_printf_i+0x80>
 80077e6:	d80a      	bhi.n	80077fe <_printf_i+0x3a>
 80077e8:	2a00      	cmp	r2, #0
 80077ea:	f000 80c8 	beq.w	800797e <_printf_i+0x1ba>
 80077ee:	2a58      	cmp	r2, #88	; 0x58
 80077f0:	f000 808a 	beq.w	8007908 <_printf_i+0x144>
 80077f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077f8:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80077fc:	e02a      	b.n	8007854 <_printf_i+0x90>
 80077fe:	2a64      	cmp	r2, #100	; 0x64
 8007800:	d001      	beq.n	8007806 <_printf_i+0x42>
 8007802:	2a69      	cmp	r2, #105	; 0x69
 8007804:	d1f6      	bne.n	80077f4 <_printf_i+0x30>
 8007806:	6821      	ldr	r1, [r4, #0]
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800780e:	d023      	beq.n	8007858 <_printf_i+0x94>
 8007810:	1d11      	adds	r1, r2, #4
 8007812:	6019      	str	r1, [r3, #0]
 8007814:	6813      	ldr	r3, [r2, #0]
 8007816:	e027      	b.n	8007868 <_printf_i+0xa4>
 8007818:	2a73      	cmp	r2, #115	; 0x73
 800781a:	f000 80b4 	beq.w	8007986 <_printf_i+0x1c2>
 800781e:	d808      	bhi.n	8007832 <_printf_i+0x6e>
 8007820:	2a6f      	cmp	r2, #111	; 0x6f
 8007822:	d02a      	beq.n	800787a <_printf_i+0xb6>
 8007824:	2a70      	cmp	r2, #112	; 0x70
 8007826:	d1e5      	bne.n	80077f4 <_printf_i+0x30>
 8007828:	680a      	ldr	r2, [r1, #0]
 800782a:	f042 0220 	orr.w	r2, r2, #32
 800782e:	600a      	str	r2, [r1, #0]
 8007830:	e003      	b.n	800783a <_printf_i+0x76>
 8007832:	2a75      	cmp	r2, #117	; 0x75
 8007834:	d021      	beq.n	800787a <_printf_i+0xb6>
 8007836:	2a78      	cmp	r2, #120	; 0x78
 8007838:	d1dc      	bne.n	80077f4 <_printf_i+0x30>
 800783a:	2278      	movs	r2, #120	; 0x78
 800783c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8007840:	496e      	ldr	r1, [pc, #440]	; (80079fc <_printf_i+0x238>)
 8007842:	e064      	b.n	800790e <_printf_i+0x14a>
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800784a:	1d11      	adds	r1, r2, #4
 800784c:	6019      	str	r1, [r3, #0]
 800784e:	6813      	ldr	r3, [r2, #0]
 8007850:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007854:	2301      	movs	r3, #1
 8007856:	e0a3      	b.n	80079a0 <_printf_i+0x1dc>
 8007858:	f011 0f40 	tst.w	r1, #64	; 0x40
 800785c:	f102 0104 	add.w	r1, r2, #4
 8007860:	6019      	str	r1, [r3, #0]
 8007862:	d0d7      	beq.n	8007814 <_printf_i+0x50>
 8007864:	f9b2 3000 	ldrsh.w	r3, [r2]
 8007868:	2b00      	cmp	r3, #0
 800786a:	da03      	bge.n	8007874 <_printf_i+0xb0>
 800786c:	222d      	movs	r2, #45	; 0x2d
 800786e:	425b      	negs	r3, r3
 8007870:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007874:	4962      	ldr	r1, [pc, #392]	; (8007a00 <_printf_i+0x23c>)
 8007876:	220a      	movs	r2, #10
 8007878:	e017      	b.n	80078aa <_printf_i+0xe6>
 800787a:	6820      	ldr	r0, [r4, #0]
 800787c:	6819      	ldr	r1, [r3, #0]
 800787e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007882:	d003      	beq.n	800788c <_printf_i+0xc8>
 8007884:	1d08      	adds	r0, r1, #4
 8007886:	6018      	str	r0, [r3, #0]
 8007888:	680b      	ldr	r3, [r1, #0]
 800788a:	e006      	b.n	800789a <_printf_i+0xd6>
 800788c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007890:	f101 0004 	add.w	r0, r1, #4
 8007894:	6018      	str	r0, [r3, #0]
 8007896:	d0f7      	beq.n	8007888 <_printf_i+0xc4>
 8007898:	880b      	ldrh	r3, [r1, #0]
 800789a:	4959      	ldr	r1, [pc, #356]	; (8007a00 <_printf_i+0x23c>)
 800789c:	2a6f      	cmp	r2, #111	; 0x6f
 800789e:	bf14      	ite	ne
 80078a0:	220a      	movne	r2, #10
 80078a2:	2208      	moveq	r2, #8
 80078a4:	2000      	movs	r0, #0
 80078a6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80078aa:	6865      	ldr	r5, [r4, #4]
 80078ac:	60a5      	str	r5, [r4, #8]
 80078ae:	2d00      	cmp	r5, #0
 80078b0:	f2c0 809c 	blt.w	80079ec <_printf_i+0x228>
 80078b4:	6820      	ldr	r0, [r4, #0]
 80078b6:	f020 0004 	bic.w	r0, r0, #4
 80078ba:	6020      	str	r0, [r4, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d13f      	bne.n	8007940 <_printf_i+0x17c>
 80078c0:	2d00      	cmp	r5, #0
 80078c2:	f040 8095 	bne.w	80079f0 <_printf_i+0x22c>
 80078c6:	4675      	mov	r5, lr
 80078c8:	2a08      	cmp	r2, #8
 80078ca:	d10b      	bne.n	80078e4 <_printf_i+0x120>
 80078cc:	6823      	ldr	r3, [r4, #0]
 80078ce:	07da      	lsls	r2, r3, #31
 80078d0:	d508      	bpl.n	80078e4 <_printf_i+0x120>
 80078d2:	6923      	ldr	r3, [r4, #16]
 80078d4:	6862      	ldr	r2, [r4, #4]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	bfde      	ittt	le
 80078da:	2330      	movle	r3, #48	; 0x30
 80078dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80078e0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80078e4:	ebae 0305 	sub.w	r3, lr, r5
 80078e8:	6123      	str	r3, [r4, #16]
 80078ea:	f8cd 8000 	str.w	r8, [sp]
 80078ee:	463b      	mov	r3, r7
 80078f0:	aa03      	add	r2, sp, #12
 80078f2:	4621      	mov	r1, r4
 80078f4:	4630      	mov	r0, r6
 80078f6:	f7ff feef 	bl	80076d8 <_printf_common>
 80078fa:	3001      	adds	r0, #1
 80078fc:	d155      	bne.n	80079aa <_printf_i+0x1e6>
 80078fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007902:	b005      	add	sp, #20
 8007904:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007908:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800790c:	493c      	ldr	r1, [pc, #240]	; (8007a00 <_printf_i+0x23c>)
 800790e:	6822      	ldr	r2, [r4, #0]
 8007910:	6818      	ldr	r0, [r3, #0]
 8007912:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007916:	f100 0504 	add.w	r5, r0, #4
 800791a:	601d      	str	r5, [r3, #0]
 800791c:	d001      	beq.n	8007922 <_printf_i+0x15e>
 800791e:	6803      	ldr	r3, [r0, #0]
 8007920:	e002      	b.n	8007928 <_printf_i+0x164>
 8007922:	0655      	lsls	r5, r2, #25
 8007924:	d5fb      	bpl.n	800791e <_printf_i+0x15a>
 8007926:	8803      	ldrh	r3, [r0, #0]
 8007928:	07d0      	lsls	r0, r2, #31
 800792a:	bf44      	itt	mi
 800792c:	f042 0220 	orrmi.w	r2, r2, #32
 8007930:	6022      	strmi	r2, [r4, #0]
 8007932:	b91b      	cbnz	r3, 800793c <_printf_i+0x178>
 8007934:	6822      	ldr	r2, [r4, #0]
 8007936:	f022 0220 	bic.w	r2, r2, #32
 800793a:	6022      	str	r2, [r4, #0]
 800793c:	2210      	movs	r2, #16
 800793e:	e7b1      	b.n	80078a4 <_printf_i+0xe0>
 8007940:	4675      	mov	r5, lr
 8007942:	fbb3 f0f2 	udiv	r0, r3, r2
 8007946:	fb02 3310 	mls	r3, r2, r0, r3
 800794a:	5ccb      	ldrb	r3, [r1, r3]
 800794c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007950:	4603      	mov	r3, r0
 8007952:	2800      	cmp	r0, #0
 8007954:	d1f5      	bne.n	8007942 <_printf_i+0x17e>
 8007956:	e7b7      	b.n	80078c8 <_printf_i+0x104>
 8007958:	6808      	ldr	r0, [r1, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	6949      	ldr	r1, [r1, #20]
 800795e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007962:	d004      	beq.n	800796e <_printf_i+0x1aa>
 8007964:	1d10      	adds	r0, r2, #4
 8007966:	6018      	str	r0, [r3, #0]
 8007968:	6813      	ldr	r3, [r2, #0]
 800796a:	6019      	str	r1, [r3, #0]
 800796c:	e007      	b.n	800797e <_printf_i+0x1ba>
 800796e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007972:	f102 0004 	add.w	r0, r2, #4
 8007976:	6018      	str	r0, [r3, #0]
 8007978:	6813      	ldr	r3, [r2, #0]
 800797a:	d0f6      	beq.n	800796a <_printf_i+0x1a6>
 800797c:	8019      	strh	r1, [r3, #0]
 800797e:	2300      	movs	r3, #0
 8007980:	6123      	str	r3, [r4, #16]
 8007982:	4675      	mov	r5, lr
 8007984:	e7b1      	b.n	80078ea <_printf_i+0x126>
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	1d11      	adds	r1, r2, #4
 800798a:	6019      	str	r1, [r3, #0]
 800798c:	6815      	ldr	r5, [r2, #0]
 800798e:	6862      	ldr	r2, [r4, #4]
 8007990:	2100      	movs	r1, #0
 8007992:	4628      	mov	r0, r5
 8007994:	f7f8 fc1c 	bl	80001d0 <memchr>
 8007998:	b108      	cbz	r0, 800799e <_printf_i+0x1da>
 800799a:	1b40      	subs	r0, r0, r5
 800799c:	6060      	str	r0, [r4, #4]
 800799e:	6863      	ldr	r3, [r4, #4]
 80079a0:	6123      	str	r3, [r4, #16]
 80079a2:	2300      	movs	r3, #0
 80079a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079a8:	e79f      	b.n	80078ea <_printf_i+0x126>
 80079aa:	6923      	ldr	r3, [r4, #16]
 80079ac:	462a      	mov	r2, r5
 80079ae:	4639      	mov	r1, r7
 80079b0:	4630      	mov	r0, r6
 80079b2:	47c0      	blx	r8
 80079b4:	3001      	adds	r0, #1
 80079b6:	d0a2      	beq.n	80078fe <_printf_i+0x13a>
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	079b      	lsls	r3, r3, #30
 80079bc:	d507      	bpl.n	80079ce <_printf_i+0x20a>
 80079be:	2500      	movs	r5, #0
 80079c0:	f104 0919 	add.w	r9, r4, #25
 80079c4:	68e3      	ldr	r3, [r4, #12]
 80079c6:	9a03      	ldr	r2, [sp, #12]
 80079c8:	1a9b      	subs	r3, r3, r2
 80079ca:	429d      	cmp	r5, r3
 80079cc:	db05      	blt.n	80079da <_printf_i+0x216>
 80079ce:	68e0      	ldr	r0, [r4, #12]
 80079d0:	9b03      	ldr	r3, [sp, #12]
 80079d2:	4298      	cmp	r0, r3
 80079d4:	bfb8      	it	lt
 80079d6:	4618      	movlt	r0, r3
 80079d8:	e793      	b.n	8007902 <_printf_i+0x13e>
 80079da:	2301      	movs	r3, #1
 80079dc:	464a      	mov	r2, r9
 80079de:	4639      	mov	r1, r7
 80079e0:	4630      	mov	r0, r6
 80079e2:	47c0      	blx	r8
 80079e4:	3001      	adds	r0, #1
 80079e6:	d08a      	beq.n	80078fe <_printf_i+0x13a>
 80079e8:	3501      	adds	r5, #1
 80079ea:	e7eb      	b.n	80079c4 <_printf_i+0x200>
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d1a7      	bne.n	8007940 <_printf_i+0x17c>
 80079f0:	780b      	ldrb	r3, [r1, #0]
 80079f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80079f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079fa:	e765      	b.n	80078c8 <_printf_i+0x104>
 80079fc:	08007cbe 	.word	0x08007cbe
 8007a00:	08007cad 	.word	0x08007cad

08007a04 <_realloc_r>:
 8007a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a06:	4607      	mov	r7, r0
 8007a08:	4614      	mov	r4, r2
 8007a0a:	460e      	mov	r6, r1
 8007a0c:	b921      	cbnz	r1, 8007a18 <_realloc_r+0x14>
 8007a0e:	4611      	mov	r1, r2
 8007a10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007a14:	f7ff bc38 	b.w	8007288 <_malloc_r>
 8007a18:	b922      	cbnz	r2, 8007a24 <_realloc_r+0x20>
 8007a1a:	f7ff fbe7 	bl	80071ec <_free_r>
 8007a1e:	4625      	mov	r5, r4
 8007a20:	4628      	mov	r0, r5
 8007a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a24:	f000 f814 	bl	8007a50 <_malloc_usable_size_r>
 8007a28:	4284      	cmp	r4, r0
 8007a2a:	d90f      	bls.n	8007a4c <_realloc_r+0x48>
 8007a2c:	4621      	mov	r1, r4
 8007a2e:	4638      	mov	r0, r7
 8007a30:	f7ff fc2a 	bl	8007288 <_malloc_r>
 8007a34:	4605      	mov	r5, r0
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d0f2      	beq.n	8007a20 <_realloc_r+0x1c>
 8007a3a:	4631      	mov	r1, r6
 8007a3c:	4622      	mov	r2, r4
 8007a3e:	f7ff fba7 	bl	8007190 <memcpy>
 8007a42:	4631      	mov	r1, r6
 8007a44:	4638      	mov	r0, r7
 8007a46:	f7ff fbd1 	bl	80071ec <_free_r>
 8007a4a:	e7e9      	b.n	8007a20 <_realloc_r+0x1c>
 8007a4c:	4635      	mov	r5, r6
 8007a4e:	e7e7      	b.n	8007a20 <_realloc_r+0x1c>

08007a50 <_malloc_usable_size_r>:
 8007a50:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8007a54:	2800      	cmp	r0, #0
 8007a56:	f1a0 0004 	sub.w	r0, r0, #4
 8007a5a:	bfbc      	itt	lt
 8007a5c:	580b      	ldrlt	r3, [r1, r0]
 8007a5e:	18c0      	addlt	r0, r0, r3
 8007a60:	4770      	bx	lr
	...

08007a64 <_getpid>:
 8007a64:	4b02      	ldr	r3, [pc, #8]	; (8007a70 <_getpid+0xc>)
 8007a66:	2258      	movs	r2, #88	; 0x58
 8007a68:	601a      	str	r2, [r3, #0]
 8007a6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a6e:	4770      	bx	lr
 8007a70:	200003a0 	.word	0x200003a0

08007a74 <_kill>:
 8007a74:	4b02      	ldr	r3, [pc, #8]	; (8007a80 <_kill+0xc>)
 8007a76:	2258      	movs	r2, #88	; 0x58
 8007a78:	601a      	str	r2, [r3, #0]
 8007a7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a7e:	4770      	bx	lr
 8007a80:	200003a0 	.word	0x200003a0

08007a84 <_sbrk>:
 8007a84:	4b04      	ldr	r3, [pc, #16]	; (8007a98 <_sbrk+0x14>)
 8007a86:	6819      	ldr	r1, [r3, #0]
 8007a88:	4602      	mov	r2, r0
 8007a8a:	b909      	cbnz	r1, 8007a90 <_sbrk+0xc>
 8007a8c:	4903      	ldr	r1, [pc, #12]	; (8007a9c <_sbrk+0x18>)
 8007a8e:	6019      	str	r1, [r3, #0]
 8007a90:	6818      	ldr	r0, [r3, #0]
 8007a92:	4402      	add	r2, r0
 8007a94:	601a      	str	r2, [r3, #0]
 8007a96:	4770      	bx	lr
 8007a98:	20000398 	.word	0x20000398
 8007a9c:	200003a4 	.word	0x200003a4

08007aa0 <_exit>:
 8007aa0:	e7fe      	b.n	8007aa0 <_exit>
	...

08007aa4 <_init>:
 8007aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa6:	bf00      	nop
 8007aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aaa:	bc08      	pop	{r3}
 8007aac:	469e      	mov	lr, r3
 8007aae:	4770      	bx	lr

08007ab0 <_fini>:
 8007ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab2:	bf00      	nop
 8007ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ab6:	bc08      	pop	{r3}
 8007ab8:	469e      	mov	lr, r3
 8007aba:	4770      	bx	lr
