
ClockModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ce0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08003e70  08003e70  00013e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000084  08003ec4  08003ec4  00013ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000128  08003f48  08003f48  00013f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  08004070  08004070  00014070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08004078  08004078  00014078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000074  20000000  0800407c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  9 .bss          0000010c  20000074  20000074  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  20000180  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012731  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002421  00000000  00000000  000327d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005b31  00000000  00000000  00034bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000908  00000000  00000000  0003a728  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000aa0  00000000  00000000  0003b030  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004b1f  00000000  00000000  0003bad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003a93  00000000  00000000  000405ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  00044082  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f6c  00000000  00000000  00044100  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000076  00000000  00000000  0004606c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003e58 	.word	0x08003e58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08003e58 	.word	0x08003e58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f001 b8f6 	b.w	8001474 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <selfrel_offset31>:
 800057c:	6803      	ldr	r3, [r0, #0]
 800057e:	005a      	lsls	r2, r3, #1
 8000580:	bf4c      	ite	mi
 8000582:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000586:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800058a:	4418      	add	r0, r3
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <search_EIT_table>:
 8000590:	b361      	cbz	r1, 80005ec <search_EIT_table+0x5c>
 8000592:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000596:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 800059a:	4690      	mov	r8, r2
 800059c:	4606      	mov	r6, r0
 800059e:	46d1      	mov	r9, sl
 80005a0:	2700      	movs	r7, #0
 80005a2:	eb07 0409 	add.w	r4, r7, r9
 80005a6:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80005aa:	1064      	asrs	r4, r4, #1
 80005ac:	00e5      	lsls	r5, r4, #3
 80005ae:	1971      	adds	r1, r6, r5
 80005b0:	4608      	mov	r0, r1
 80005b2:	f7ff ffe3 	bl	800057c <selfrel_offset31>
 80005b6:	45a2      	cmp	sl, r4
 80005b8:	4683      	mov	fp, r0
 80005ba:	f105 0008 	add.w	r0, r5, #8
 80005be:	4430      	add	r0, r6
 80005c0:	d009      	beq.n	80005d6 <search_EIT_table+0x46>
 80005c2:	f7ff ffdb 	bl	800057c <selfrel_offset31>
 80005c6:	45c3      	cmp	fp, r8
 80005c8:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80005cc:	d805      	bhi.n	80005da <search_EIT_table+0x4a>
 80005ce:	4540      	cmp	r0, r8
 80005d0:	d209      	bcs.n	80005e6 <search_EIT_table+0x56>
 80005d2:	1c67      	adds	r7, r4, #1
 80005d4:	e7e5      	b.n	80005a2 <search_EIT_table+0x12>
 80005d6:	45c3      	cmp	fp, r8
 80005d8:	d905      	bls.n	80005e6 <search_EIT_table+0x56>
 80005da:	42a7      	cmp	r7, r4
 80005dc:	d002      	beq.n	80005e4 <search_EIT_table+0x54>
 80005de:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 80005e2:	e7de      	b.n	80005a2 <search_EIT_table+0x12>
 80005e4:	2100      	movs	r1, #0
 80005e6:	4608      	mov	r0, r1
 80005e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005ec:	4608      	mov	r0, r1
 80005ee:	4770      	bx	lr

080005f0 <__gnu_unwind_get_pr_addr>:
 80005f0:	2801      	cmp	r0, #1
 80005f2:	d007      	beq.n	8000604 <__gnu_unwind_get_pr_addr+0x14>
 80005f4:	2802      	cmp	r0, #2
 80005f6:	d007      	beq.n	8000608 <__gnu_unwind_get_pr_addr+0x18>
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__gnu_unwind_get_pr_addr+0x1c>)
 80005fa:	2800      	cmp	r0, #0
 80005fc:	bf0c      	ite	eq
 80005fe:	4618      	moveq	r0, r3
 8000600:	2000      	movne	r0, #0
 8000602:	4770      	bx	lr
 8000604:	4802      	ldr	r0, [pc, #8]	; (8000610 <__gnu_unwind_get_pr_addr+0x20>)
 8000606:	4770      	bx	lr
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <__gnu_unwind_get_pr_addr+0x24>)
 800060a:	4770      	bx	lr
 800060c:	08000cf5 	.word	0x08000cf5
 8000610:	08000cf9 	.word	0x08000cf9
 8000614:	08000cfd 	.word	0x08000cfd

08000618 <get_eit_entry>:
 8000618:	b530      	push	{r4, r5, lr}
 800061a:	4b24      	ldr	r3, [pc, #144]	; (80006ac <get_eit_entry+0x94>)
 800061c:	b083      	sub	sp, #12
 800061e:	4604      	mov	r4, r0
 8000620:	1e8d      	subs	r5, r1, #2
 8000622:	b37b      	cbz	r3, 8000684 <get_eit_entry+0x6c>
 8000624:	a901      	add	r1, sp, #4
 8000626:	4628      	mov	r0, r5
 8000628:	f3af 8000 	nop.w
 800062c:	b320      	cbz	r0, 8000678 <get_eit_entry+0x60>
 800062e:	9901      	ldr	r1, [sp, #4]
 8000630:	462a      	mov	r2, r5
 8000632:	f7ff ffad 	bl	8000590 <search_EIT_table>
 8000636:	4601      	mov	r1, r0
 8000638:	b1f0      	cbz	r0, 8000678 <get_eit_entry+0x60>
 800063a:	f7ff ff9f 	bl	800057c <selfrel_offset31>
 800063e:	684b      	ldr	r3, [r1, #4]
 8000640:	64a0      	str	r0, [r4, #72]	; 0x48
 8000642:	2b01      	cmp	r3, #1
 8000644:	d012      	beq.n	800066c <get_eit_entry+0x54>
 8000646:	2b00      	cmp	r3, #0
 8000648:	f101 0004 	add.w	r0, r1, #4
 800064c:	db20      	blt.n	8000690 <get_eit_entry+0x78>
 800064e:	f7ff ff95 	bl	800057c <selfrel_offset31>
 8000652:	2300      	movs	r3, #0
 8000654:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000656:	6523      	str	r3, [r4, #80]	; 0x50
 8000658:	6803      	ldr	r3, [r0, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	db1c      	blt.n	8000698 <get_eit_entry+0x80>
 800065e:	f7ff ff8d 	bl	800057c <selfrel_offset31>
 8000662:	2300      	movs	r3, #0
 8000664:	6120      	str	r0, [r4, #16]
 8000666:	4618      	mov	r0, r3
 8000668:	b003      	add	sp, #12
 800066a:	bd30      	pop	{r4, r5, pc}
 800066c:	2300      	movs	r3, #0
 800066e:	6123      	str	r3, [r4, #16]
 8000670:	2305      	movs	r3, #5
 8000672:	4618      	mov	r0, r3
 8000674:	b003      	add	sp, #12
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	2300      	movs	r3, #0
 800067a:	6123      	str	r3, [r4, #16]
 800067c:	2309      	movs	r3, #9
 800067e:	4618      	mov	r0, r3
 8000680:	b003      	add	sp, #12
 8000682:	bd30      	pop	{r4, r5, pc}
 8000684:	490a      	ldr	r1, [pc, #40]	; (80006b0 <get_eit_entry+0x98>)
 8000686:	480b      	ldr	r0, [pc, #44]	; (80006b4 <get_eit_entry+0x9c>)
 8000688:	1a09      	subs	r1, r1, r0
 800068a:	10c9      	asrs	r1, r1, #3
 800068c:	9101      	str	r1, [sp, #4]
 800068e:	e7cf      	b.n	8000630 <get_eit_entry+0x18>
 8000690:	2301      	movs	r3, #1
 8000692:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000694:	6523      	str	r3, [r4, #80]	; 0x50
 8000696:	e7df      	b.n	8000658 <get_eit_entry+0x40>
 8000698:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800069c:	f7ff ffa8 	bl	80005f0 <__gnu_unwind_get_pr_addr>
 80006a0:	2800      	cmp	r0, #0
 80006a2:	6120      	str	r0, [r4, #16]
 80006a4:	bf14      	ite	ne
 80006a6:	2300      	movne	r3, #0
 80006a8:	2309      	moveq	r3, #9
 80006aa:	e7dc      	b.n	8000666 <get_eit_entry+0x4e>
 80006ac:	00000000 	.word	0x00000000
 80006b0:	08004070 	.word	0x08004070
 80006b4:	08003f48 	.word	0x08003f48

080006b8 <restore_non_core_regs>:
 80006b8:	6803      	ldr	r3, [r0, #0]
 80006ba:	07da      	lsls	r2, r3, #31
 80006bc:	b510      	push	{r4, lr}
 80006be:	4604      	mov	r4, r0
 80006c0:	d406      	bmi.n	80006d0 <restore_non_core_regs+0x18>
 80006c2:	079b      	lsls	r3, r3, #30
 80006c4:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80006c8:	d509      	bpl.n	80006de <restore_non_core_regs+0x26>
 80006ca:	f000 fc51 	bl	8000f70 <__gnu_Unwind_Restore_VFP_D>
 80006ce:	6823      	ldr	r3, [r4, #0]
 80006d0:	0759      	lsls	r1, r3, #29
 80006d2:	d509      	bpl.n	80006e8 <restore_non_core_regs+0x30>
 80006d4:	071a      	lsls	r2, r3, #28
 80006d6:	d50e      	bpl.n	80006f6 <restore_non_core_regs+0x3e>
 80006d8:	06db      	lsls	r3, r3, #27
 80006da:	d513      	bpl.n	8000704 <restore_non_core_regs+0x4c>
 80006dc:	bd10      	pop	{r4, pc}
 80006de:	f000 fc3f 	bl	8000f60 <__gnu_Unwind_Restore_VFP>
 80006e2:	6823      	ldr	r3, [r4, #0]
 80006e4:	0759      	lsls	r1, r3, #29
 80006e6:	d4f5      	bmi.n	80006d4 <restore_non_core_regs+0x1c>
 80006e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006ec:	f000 fc48 	bl	8000f80 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	071a      	lsls	r2, r3, #28
 80006f4:	d4f0      	bmi.n	80006d8 <restore_non_core_regs+0x20>
 80006f6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80006fa:	f000 fc49 	bl	8000f90 <__gnu_Unwind_Restore_WMMXD>
 80006fe:	6823      	ldr	r3, [r4, #0]
 8000700:	06db      	lsls	r3, r3, #27
 8000702:	d4eb      	bmi.n	80006dc <restore_non_core_regs+0x24>
 8000704:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800070c:	f000 bc84 	b.w	8001018 <__gnu_Unwind_Restore_WMMXC>

08000710 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000710:	6803      	ldr	r3, [r0, #0]
 8000712:	b103      	cbz	r3, 8000716 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000714:	4403      	add	r3, r0
 8000716:	4618      	mov	r0, r3
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop

0800071c <__gnu_unwind_24bit.isra.1>:
 800071c:	2009      	movs	r0, #9
 800071e:	4770      	bx	lr

08000720 <_Unwind_DebugHook>:
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop

08000724 <unwind_phase2>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	4604      	mov	r4, r0
 8000728:	460d      	mov	r5, r1
 800072a:	e008      	b.n	800073e <unwind_phase2+0x1a>
 800072c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800072e:	6163      	str	r3, [r4, #20]
 8000730:	462a      	mov	r2, r5
 8000732:	6923      	ldr	r3, [r4, #16]
 8000734:	4621      	mov	r1, r4
 8000736:	2001      	movs	r0, #1
 8000738:	4798      	blx	r3
 800073a:	2808      	cmp	r0, #8
 800073c:	d108      	bne.n	8000750 <unwind_phase2+0x2c>
 800073e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000740:	4620      	mov	r0, r4
 8000742:	f7ff ff69 	bl	8000618 <get_eit_entry>
 8000746:	4606      	mov	r6, r0
 8000748:	2800      	cmp	r0, #0
 800074a:	d0ef      	beq.n	800072c <unwind_phase2+0x8>
 800074c:	f003 fb19 	bl	8003d82 <abort>
 8000750:	2807      	cmp	r0, #7
 8000752:	d1fb      	bne.n	800074c <unwind_phase2+0x28>
 8000754:	4630      	mov	r0, r6
 8000756:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000758:	f7ff ffe2 	bl	8000720 <_Unwind_DebugHook>
 800075c:	1d28      	adds	r0, r5, #4
 800075e:	f000 fbf3 	bl	8000f48 <__restore_core_regs>
 8000762:	bf00      	nop

08000764 <unwind_phase2_forced>:
 8000764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000768:	1d0c      	adds	r4, r1, #4
 800076a:	4605      	mov	r5, r0
 800076c:	4692      	mov	sl, r2
 800076e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000770:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000774:	ae03      	add	r6, sp, #12
 8000776:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800077a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800077c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800077e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000780:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000784:	ac02      	add	r4, sp, #8
 8000786:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800078a:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800078e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000792:	2300      	movs	r3, #0
 8000794:	4628      	mov	r0, r5
 8000796:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000798:	6023      	str	r3, [r4, #0]
 800079a:	f7ff ff3d 	bl	8000618 <get_eit_entry>
 800079e:	f1ba 0f00 	cmp.w	sl, #0
 80007a2:	4607      	mov	r7, r0
 80007a4:	bf14      	ite	ne
 80007a6:	260a      	movne	r6, #10
 80007a8:	2609      	moveq	r6, #9
 80007aa:	b17f      	cbz	r7, 80007cc <unwind_phase2_forced+0x68>
 80007ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80007ae:	f046 0110 	orr.w	r1, r6, #16
 80007b2:	e88d 0210 	stmia.w	sp, {r4, r9}
 80007b6:	462a      	mov	r2, r5
 80007b8:	6463      	str	r3, [r4, #68]	; 0x44
 80007ba:	2001      	movs	r0, #1
 80007bc:	462b      	mov	r3, r5
 80007be:	47c0      	blx	r8
 80007c0:	bb78      	cbnz	r0, 8000822 <unwind_phase2_forced+0xbe>
 80007c2:	4638      	mov	r0, r7
 80007c4:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007ce:	616b      	str	r3, [r5, #20]
 80007d0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80007d4:	4621      	mov	r1, r4
 80007d6:	a87a      	add	r0, sp, #488	; 0x1e8
 80007d8:	f003 f9c0 	bl	8003b5c <memcpy>
 80007dc:	692b      	ldr	r3, [r5, #16]
 80007de:	aa7a      	add	r2, sp, #488	; 0x1e8
 80007e0:	4629      	mov	r1, r5
 80007e2:	4630      	mov	r0, r6
 80007e4:	4798      	blx	r3
 80007e6:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80007e8:	4682      	mov	sl, r0
 80007ea:	e88d 0210 	stmia.w	sp, {r4, r9}
 80007ee:	4631      	mov	r1, r6
 80007f0:	6463      	str	r3, [r4, #68]	; 0x44
 80007f2:	462a      	mov	r2, r5
 80007f4:	462b      	mov	r3, r5
 80007f6:	2001      	movs	r0, #1
 80007f8:	47c0      	blx	r8
 80007fa:	b990      	cbnz	r0, 8000822 <unwind_phase2_forced+0xbe>
 80007fc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000800:	a97a      	add	r1, sp, #488	; 0x1e8
 8000802:	4620      	mov	r0, r4
 8000804:	f003 f9aa 	bl	8003b5c <memcpy>
 8000808:	f1ba 0f08 	cmp.w	sl, #8
 800080c:	d106      	bne.n	800081c <unwind_phase2_forced+0xb8>
 800080e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000810:	4628      	mov	r0, r5
 8000812:	f7ff ff01 	bl	8000618 <get_eit_entry>
 8000816:	2609      	movs	r6, #9
 8000818:	4607      	mov	r7, r0
 800081a:	e7c6      	b.n	80007aa <unwind_phase2_forced+0x46>
 800081c:	f1ba 0f07 	cmp.w	sl, #7
 8000820:	d005      	beq.n	800082e <unwind_phase2_forced+0xca>
 8000822:	2709      	movs	r7, #9
 8000824:	4638      	mov	r0, r7
 8000826:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800082a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800082e:	4638      	mov	r0, r7
 8000830:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000832:	f7ff ff75 	bl	8000720 <_Unwind_DebugHook>
 8000836:	a803      	add	r0, sp, #12
 8000838:	f000 fb86 	bl	8000f48 <__restore_core_regs>

0800083c <_Unwind_GetCFA>:
 800083c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800083e:	4770      	bx	lr

08000840 <__gnu_Unwind_RaiseException>:
 8000840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000842:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000844:	640b      	str	r3, [r1, #64]	; 0x40
 8000846:	1d0e      	adds	r6, r1, #4
 8000848:	460f      	mov	r7, r1
 800084a:	4604      	mov	r4, r0
 800084c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800084e:	b0f9      	sub	sp, #484	; 0x1e4
 8000850:	ad01      	add	r5, sp, #4
 8000852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000854:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000858:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800085a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800085c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000860:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000864:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000868:	9600      	str	r6, [sp, #0]
 800086a:	e006      	b.n	800087a <__gnu_Unwind_RaiseException+0x3a>
 800086c:	6923      	ldr	r3, [r4, #16]
 800086e:	466a      	mov	r2, sp
 8000870:	4621      	mov	r1, r4
 8000872:	4798      	blx	r3
 8000874:	2808      	cmp	r0, #8
 8000876:	4605      	mov	r5, r0
 8000878:	d108      	bne.n	800088c <__gnu_Unwind_RaiseException+0x4c>
 800087a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800087c:	4620      	mov	r0, r4
 800087e:	f7ff fecb 	bl	8000618 <get_eit_entry>
 8000882:	2800      	cmp	r0, #0
 8000884:	d0f2      	beq.n	800086c <__gnu_Unwind_RaiseException+0x2c>
 8000886:	2009      	movs	r0, #9
 8000888:	b079      	add	sp, #484	; 0x1e4
 800088a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088c:	4668      	mov	r0, sp
 800088e:	f7ff ff13 	bl	80006b8 <restore_non_core_regs>
 8000892:	2d06      	cmp	r5, #6
 8000894:	d1f7      	bne.n	8000886 <__gnu_Unwind_RaiseException+0x46>
 8000896:	4639      	mov	r1, r7
 8000898:	4620      	mov	r0, r4
 800089a:	f7ff ff43 	bl	8000724 <unwind_phase2>
 800089e:	bf00      	nop

080008a0 <__gnu_Unwind_ForcedUnwind>:
 80008a0:	b430      	push	{r4, r5}
 80008a2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80008a4:	60c1      	str	r1, [r0, #12]
 80008a6:	6182      	str	r2, [r0, #24]
 80008a8:	4619      	mov	r1, r3
 80008aa:	641d      	str	r5, [r3, #64]	; 0x40
 80008ac:	2200      	movs	r2, #0
 80008ae:	bc30      	pop	{r4, r5}
 80008b0:	e758      	b.n	8000764 <unwind_phase2_forced>
 80008b2:	bf00      	nop

080008b4 <__gnu_Unwind_Resume>:
 80008b4:	b570      	push	{r4, r5, r6, lr}
 80008b6:	68c6      	ldr	r6, [r0, #12]
 80008b8:	6943      	ldr	r3, [r0, #20]
 80008ba:	640b      	str	r3, [r1, #64]	; 0x40
 80008bc:	b126      	cbz	r6, 80008c8 <__gnu_Unwind_Resume+0x14>
 80008be:	2201      	movs	r2, #1
 80008c0:	f7ff ff50 	bl	8000764 <unwind_phase2_forced>
 80008c4:	f003 fa5d 	bl	8003d82 <abort>
 80008c8:	6903      	ldr	r3, [r0, #16]
 80008ca:	460a      	mov	r2, r1
 80008cc:	4604      	mov	r4, r0
 80008ce:	460d      	mov	r5, r1
 80008d0:	4601      	mov	r1, r0
 80008d2:	2002      	movs	r0, #2
 80008d4:	4798      	blx	r3
 80008d6:	2807      	cmp	r0, #7
 80008d8:	d007      	beq.n	80008ea <__gnu_Unwind_Resume+0x36>
 80008da:	2808      	cmp	r0, #8
 80008dc:	d103      	bne.n	80008e6 <__gnu_Unwind_Resume+0x32>
 80008de:	4629      	mov	r1, r5
 80008e0:	4620      	mov	r0, r4
 80008e2:	f7ff ff1f 	bl	8000724 <unwind_phase2>
 80008e6:	f003 fa4c 	bl	8003d82 <abort>
 80008ea:	4630      	mov	r0, r6
 80008ec:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80008ee:	f7ff ff17 	bl	8000720 <_Unwind_DebugHook>
 80008f2:	1d28      	adds	r0, r5, #4
 80008f4:	f000 fb28 	bl	8000f48 <__restore_core_regs>

080008f8 <__gnu_Unwind_Resume_or_Rethrow>:
 80008f8:	68c2      	ldr	r2, [r0, #12]
 80008fa:	b11a      	cbz	r2, 8000904 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80008fc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80008fe:	640a      	str	r2, [r1, #64]	; 0x40
 8000900:	2200      	movs	r2, #0
 8000902:	e72f      	b.n	8000764 <unwind_phase2_forced>
 8000904:	e79c      	b.n	8000840 <__gnu_Unwind_RaiseException>
 8000906:	bf00      	nop

08000908 <_Unwind_Complete>:
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <_Unwind_DeleteException>:
 800090c:	6883      	ldr	r3, [r0, #8]
 800090e:	b113      	cbz	r3, 8000916 <_Unwind_DeleteException+0xa>
 8000910:	4601      	mov	r1, r0
 8000912:	2001      	movs	r0, #1
 8000914:	4718      	bx	r3
 8000916:	4770      	bx	lr

08000918 <_Unwind_VRS_Get>:
 8000918:	b500      	push	{lr}
 800091a:	2904      	cmp	r1, #4
 800091c:	d807      	bhi.n	800092e <_Unwind_VRS_Get+0x16>
 800091e:	e8df f001 	tbb	[pc, r1]
 8000922:	0903      	.short	0x0903
 8000924:	0906      	.short	0x0906
 8000926:	09          	.byte	0x09
 8000927:	00          	.byte	0x00
 8000928:	b90b      	cbnz	r3, 800092e <_Unwind_VRS_Get+0x16>
 800092a:	2a0f      	cmp	r2, #15
 800092c:	d905      	bls.n	800093a <_Unwind_VRS_Get+0x22>
 800092e:	2002      	movs	r0, #2
 8000930:	f85d fb04 	ldr.w	pc, [sp], #4
 8000934:	2001      	movs	r0, #1
 8000936:	f85d fb04 	ldr.w	pc, [sp], #4
 800093a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800093e:	4618      	mov	r0, r3
 8000940:	6853      	ldr	r3, [r2, #4]
 8000942:	9a01      	ldr	r2, [sp, #4]
 8000944:	6013      	str	r3, [r2, #0]
 8000946:	f85d fb04 	ldr.w	pc, [sp], #4
 800094a:	bf00      	nop

0800094c <_Unwind_GetGR>:
 800094c:	b510      	push	{r4, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	2300      	movs	r3, #0
 8000952:	ac03      	add	r4, sp, #12
 8000954:	460a      	mov	r2, r1
 8000956:	9400      	str	r4, [sp, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	f7ff ffdd 	bl	8000918 <_Unwind_VRS_Get>
 800095e:	9803      	ldr	r0, [sp, #12]
 8000960:	b004      	add	sp, #16
 8000962:	bd10      	pop	{r4, pc}

08000964 <_Unwind_VRS_Set>:
 8000964:	b500      	push	{lr}
 8000966:	2904      	cmp	r1, #4
 8000968:	d807      	bhi.n	800097a <_Unwind_VRS_Set+0x16>
 800096a:	e8df f001 	tbb	[pc, r1]
 800096e:	0903      	.short	0x0903
 8000970:	0906      	.short	0x0906
 8000972:	09          	.byte	0x09
 8000973:	00          	.byte	0x00
 8000974:	b90b      	cbnz	r3, 800097a <_Unwind_VRS_Set+0x16>
 8000976:	2a0f      	cmp	r2, #15
 8000978:	d905      	bls.n	8000986 <_Unwind_VRS_Set+0x22>
 800097a:	2002      	movs	r0, #2
 800097c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000980:	2001      	movs	r0, #1
 8000982:	f85d fb04 	ldr.w	pc, [sp], #4
 8000986:	9901      	ldr	r1, [sp, #4]
 8000988:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800098c:	6809      	ldr	r1, [r1, #0]
 800098e:	6051      	str	r1, [r2, #4]
 8000990:	4618      	mov	r0, r3
 8000992:	f85d fb04 	ldr.w	pc, [sp], #4
 8000996:	bf00      	nop

08000998 <_Unwind_SetGR>:
 8000998:	b510      	push	{r4, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	ac04      	add	r4, sp, #16
 800099e:	2300      	movs	r3, #0
 80009a0:	f844 2d04 	str.w	r2, [r4, #-4]!
 80009a4:	460a      	mov	r2, r1
 80009a6:	9400      	str	r4, [sp, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f7ff ffdb 	bl	8000964 <_Unwind_VRS_Set>
 80009ae:	b004      	add	sp, #16
 80009b0:	bd10      	pop	{r4, pc}
 80009b2:	bf00      	nop

080009b4 <__gnu_Unwind_Backtrace>:
 80009b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	1d15      	adds	r5, r2, #4
 80009bc:	4607      	mov	r7, r0
 80009be:	460e      	mov	r6, r1
 80009c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80009c6:	ac17      	add	r4, sp, #92	; 0x5c
 80009c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80009da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80009de:	9516      	str	r5, [sp, #88]	; 0x58
 80009e0:	e010      	b.n	8000a04 <__gnu_Unwind_Backtrace+0x50>
 80009e2:	a816      	add	r0, sp, #88	; 0x58
 80009e4:	f7ff ffd8 	bl	8000998 <_Unwind_SetGR>
 80009e8:	4631      	mov	r1, r6
 80009ea:	a816      	add	r0, sp, #88	; 0x58
 80009ec:	47b8      	blx	r7
 80009ee:	aa16      	add	r2, sp, #88	; 0x58
 80009f0:	4669      	mov	r1, sp
 80009f2:	b978      	cbnz	r0, 8000a14 <__gnu_Unwind_Backtrace+0x60>
 80009f4:	9b04      	ldr	r3, [sp, #16]
 80009f6:	2008      	movs	r0, #8
 80009f8:	4798      	blx	r3
 80009fa:	2805      	cmp	r0, #5
 80009fc:	4604      	mov	r4, r0
 80009fe:	d00a      	beq.n	8000a16 <__gnu_Unwind_Backtrace+0x62>
 8000a00:	2809      	cmp	r0, #9
 8000a02:	d007      	beq.n	8000a14 <__gnu_Unwind_Backtrace+0x60>
 8000a04:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000a06:	4668      	mov	r0, sp
 8000a08:	f7ff fe06 	bl	8000618 <get_eit_entry>
 8000a0c:	466a      	mov	r2, sp
 8000a0e:	210c      	movs	r1, #12
 8000a10:	2800      	cmp	r0, #0
 8000a12:	d0e6      	beq.n	80009e2 <__gnu_Unwind_Backtrace+0x2e>
 8000a14:	2409      	movs	r4, #9
 8000a16:	a816      	add	r0, sp, #88	; 0x58
 8000a18:	f7ff fe4e 	bl	80006b8 <restore_non_core_regs>
 8000a1c:	4620      	mov	r0, r4
 8000a1e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000a22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a24 <__gnu_unwind_pr_common>:
 8000a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a28:	460d      	mov	r5, r1
 8000a2a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000a2c:	b08b      	sub	sp, #44	; 0x2c
 8000a2e:	1d0c      	adds	r4, r1, #4
 8000a30:	6809      	ldr	r1, [r1, #0]
 8000a32:	9107      	str	r1, [sp, #28]
 8000a34:	4691      	mov	r9, r2
 8000a36:	9408      	str	r4, [sp, #32]
 8000a38:	f000 0b03 	and.w	fp, r0, #3
 8000a3c:	461e      	mov	r6, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d160      	bne.n	8000b04 <__gnu_unwind_pr_common+0xe0>
 8000a42:	0209      	lsls	r1, r1, #8
 8000a44:	2303      	movs	r3, #3
 8000a46:	9107      	str	r1, [sp, #28]
 8000a48:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000a4c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000a50:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a52:	f1bb 0f02 	cmp.w	fp, #2
 8000a56:	bf08      	it	eq
 8000a58:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000a5a:	f013 0301 	ands.w	r3, r3, #1
 8000a5e:	d140      	bne.n	8000ae2 <__gnu_unwind_pr_common+0xbe>
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	f000 0308 	and.w	r3, r0, #8
 8000a66:	9303      	str	r3, [sp, #12]
 8000a68:	f8d4 8000 	ldr.w	r8, [r4]
 8000a6c:	f1b8 0f00 	cmp.w	r8, #0
 8000a70:	d039      	beq.n	8000ae6 <__gnu_unwind_pr_common+0xc2>
 8000a72:	2e02      	cmp	r6, #2
 8000a74:	d043      	beq.n	8000afe <__gnu_unwind_pr_common+0xda>
 8000a76:	f8b4 8000 	ldrh.w	r8, [r4]
 8000a7a:	8867      	ldrh	r7, [r4, #2]
 8000a7c:	3404      	adds	r4, #4
 8000a7e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000a80:	f027 0a01 	bic.w	sl, r7, #1
 8000a84:	210f      	movs	r1, #15
 8000a86:	4648      	mov	r0, r9
 8000a88:	449a      	add	sl, r3
 8000a8a:	f7ff ff5f 	bl	800094c <_Unwind_GetGR>
 8000a8e:	4582      	cmp	sl, r0
 8000a90:	d833      	bhi.n	8000afa <__gnu_unwind_pr_common+0xd6>
 8000a92:	f028 0301 	bic.w	r3, r8, #1
 8000a96:	449a      	add	sl, r3
 8000a98:	4550      	cmp	r0, sl
 8000a9a:	bf2c      	ite	cs
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	007f      	lsls	r7, r7, #1
 8000aa2:	f007 0702 	and.w	r7, r7, #2
 8000aa6:	f008 0801 	and.w	r8, r8, #1
 8000aaa:	ea47 0708 	orr.w	r7, r7, r8
 8000aae:	2f01      	cmp	r7, #1
 8000ab0:	d03e      	beq.n	8000b30 <__gnu_unwind_pr_common+0x10c>
 8000ab2:	d335      	bcc.n	8000b20 <__gnu_unwind_pr_common+0xfc>
 8000ab4:	2f02      	cmp	r7, #2
 8000ab6:	d11c      	bne.n	8000af2 <__gnu_unwind_pr_common+0xce>
 8000ab8:	6823      	ldr	r3, [r4, #0]
 8000aba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000abe:	9202      	str	r2, [sp, #8]
 8000ac0:	f1bb 0f00 	cmp.w	fp, #0
 8000ac4:	d176      	bne.n	8000bb4 <__gnu_unwind_pr_common+0x190>
 8000ac6:	b128      	cbz	r0, 8000ad4 <__gnu_unwind_pr_common+0xb0>
 8000ac8:	9903      	ldr	r1, [sp, #12]
 8000aca:	2900      	cmp	r1, #0
 8000acc:	d07e      	beq.n	8000bcc <__gnu_unwind_pr_common+0x1a8>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	f000 80a6 	beq.w	8000c20 <__gnu_unwind_pr_common+0x1fc>
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db77      	blt.n	8000bc8 <__gnu_unwind_pr_common+0x1a4>
 8000ad8:	9b02      	ldr	r3, [sp, #8]
 8000ada:	3301      	adds	r3, #1
 8000adc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000ae0:	e7c2      	b.n	8000a68 <__gnu_unwind_pr_common+0x44>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	9301      	str	r3, [sp, #4]
 8000ae6:	2e02      	cmp	r6, #2
 8000ae8:	dd3e      	ble.n	8000b68 <__gnu_unwind_pr_common+0x144>
 8000aea:	f7ff fe17 	bl	800071c <__gnu_unwind_24bit.isra.1>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	d040      	beq.n	8000b74 <__gnu_unwind_pr_common+0x150>
 8000af2:	2009      	movs	r0, #9
 8000af4:	b00b      	add	sp, #44	; 0x2c
 8000af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000afa:	2000      	movs	r0, #0
 8000afc:	e7d0      	b.n	8000aa0 <__gnu_unwind_pr_common+0x7c>
 8000afe:	6867      	ldr	r7, [r4, #4]
 8000b00:	3408      	adds	r4, #8
 8000b02:	e7bc      	b.n	8000a7e <__gnu_unwind_pr_common+0x5a>
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	dca3      	bgt.n	8000a50 <__gnu_unwind_pr_common+0x2c>
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	0409      	lsls	r1, r1, #16
 8000b0e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000b12:	2302      	movs	r3, #2
 8000b14:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000b18:	9107      	str	r1, [sp, #28]
 8000b1a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000b1e:	e797      	b.n	8000a50 <__gnu_unwind_pr_common+0x2c>
 8000b20:	f1bb 0f00 	cmp.w	fp, #0
 8000b24:	d002      	beq.n	8000b2c <__gnu_unwind_pr_common+0x108>
 8000b26:	2800      	cmp	r0, #0
 8000b28:	f040 80bd 	bne.w	8000ca6 <__gnu_unwind_pr_common+0x282>
 8000b2c:	3404      	adds	r4, #4
 8000b2e:	e79b      	b.n	8000a68 <__gnu_unwind_pr_common+0x44>
 8000b30:	f1bb 0f00 	cmp.w	fp, #0
 8000b34:	d125      	bne.n	8000b82 <__gnu_unwind_pr_common+0x15e>
 8000b36:	b1a8      	cbz	r0, 8000b64 <__gnu_unwind_pr_common+0x140>
 8000b38:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000b3c:	1c99      	adds	r1, r3, #2
 8000b3e:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000b42:	d0d6      	beq.n	8000af2 <__gnu_unwind_pr_common+0xce>
 8000b44:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000b48:	3301      	adds	r3, #1
 8000b4a:	9106      	str	r1, [sp, #24]
 8000b4c:	f000 80a3 	beq.w	8000c96 <__gnu_unwind_pr_common+0x272>
 8000b50:	1d20      	adds	r0, r4, #4
 8000b52:	f7ff fddd 	bl	8000710 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b56:	ab06      	add	r3, sp, #24
 8000b58:	4601      	mov	r1, r0
 8000b5a:	4628      	mov	r0, r5
 8000b5c:	f3af 8000 	nop.w
 8000b60:	2800      	cmp	r0, #0
 8000b62:	d177      	bne.n	8000c54 <__gnu_unwind_pr_common+0x230>
 8000b64:	3408      	adds	r4, #8
 8000b66:	e77f      	b.n	8000a68 <__gnu_unwind_pr_common+0x44>
 8000b68:	a907      	add	r1, sp, #28
 8000b6a:	4648      	mov	r0, r9
 8000b6c:	f000 faee 	bl	800114c <__gnu_unwind_execute>
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d1be      	bne.n	8000af2 <__gnu_unwind_pr_common+0xce>
 8000b74:	9b01      	ldr	r3, [sp, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d15c      	bne.n	8000c34 <__gnu_unwind_pr_common+0x210>
 8000b7a:	2008      	movs	r0, #8
 8000b7c:	b00b      	add	sp, #44	; 0x2c
 8000b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b82:	210d      	movs	r1, #13
 8000b84:	4648      	mov	r0, r9
 8000b86:	6a2f      	ldr	r7, [r5, #32]
 8000b88:	f7ff fee0 	bl	800094c <_Unwind_GetGR>
 8000b8c:	4287      	cmp	r7, r0
 8000b8e:	d1e9      	bne.n	8000b64 <__gnu_unwind_pr_common+0x140>
 8000b90:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b92:	429c      	cmp	r4, r3
 8000b94:	d1e6      	bne.n	8000b64 <__gnu_unwind_pr_common+0x140>
 8000b96:	4620      	mov	r0, r4
 8000b98:	f7ff fcf0 	bl	800057c <selfrel_offset31>
 8000b9c:	210f      	movs	r1, #15
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	4648      	mov	r0, r9
 8000ba2:	f7ff fef9 	bl	8000998 <_Unwind_SetGR>
 8000ba6:	4648      	mov	r0, r9
 8000ba8:	462a      	mov	r2, r5
 8000baa:	2100      	movs	r1, #0
 8000bac:	f7ff fef4 	bl	8000998 <_Unwind_SetGR>
 8000bb0:	2007      	movs	r0, #7
 8000bb2:	e79f      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000bb4:	210d      	movs	r1, #13
 8000bb6:	4648      	mov	r0, r9
 8000bb8:	6a2f      	ldr	r7, [r5, #32]
 8000bba:	f7ff fec7 	bl	800094c <_Unwind_GetGR>
 8000bbe:	4287      	cmp	r7, r0
 8000bc0:	d058      	beq.n	8000c74 <__gnu_unwind_pr_common+0x250>
 8000bc2:	6823      	ldr	r3, [r4, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	da87      	bge.n	8000ad8 <__gnu_unwind_pr_common+0xb4>
 8000bc8:	3404      	adds	r4, #4
 8000bca:	e785      	b.n	8000ad8 <__gnu_unwind_pr_common+0xb4>
 8000bcc:	9b02      	ldr	r3, [sp, #8]
 8000bce:	b33b      	cbz	r3, 8000c20 <__gnu_unwind_pr_common+0x1fc>
 8000bd0:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000bd4:	1d27      	adds	r7, r4, #4
 8000bd6:	f8cd b010 	str.w	fp, [sp, #16]
 8000bda:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000bde:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000be2:	9605      	str	r6, [sp, #20]
 8000be4:	46a3      	mov	fp, r4
 8000be6:	461c      	mov	r4, r3
 8000be8:	e002      	b.n	8000bf0 <__gnu_unwind_pr_common+0x1cc>
 8000bea:	45b2      	cmp	sl, r6
 8000bec:	46b0      	mov	r8, r6
 8000bee:	d016      	beq.n	8000c1e <__gnu_unwind_pr_common+0x1fa>
 8000bf0:	4638      	mov	r0, r7
 8000bf2:	9406      	str	r4, [sp, #24]
 8000bf4:	f7ff fd8c 	bl	8000710 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000bf8:	ab06      	add	r3, sp, #24
 8000bfa:	4601      	mov	r1, r0
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4628      	mov	r0, r5
 8000c00:	f3af 8000 	nop.w
 8000c04:	f108 0601 	add.w	r6, r8, #1
 8000c08:	3704      	adds	r7, #4
 8000c0a:	2800      	cmp	r0, #0
 8000c0c:	d0ed      	beq.n	8000bea <__gnu_unwind_pr_common+0x1c6>
 8000c0e:	9b02      	ldr	r3, [sp, #8]
 8000c10:	9e05      	ldr	r6, [sp, #20]
 8000c12:	4543      	cmp	r3, r8
 8000c14:	465c      	mov	r4, fp
 8000c16:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000c1a:	d1d2      	bne.n	8000bc2 <__gnu_unwind_pr_common+0x19e>
 8000c1c:	e000      	b.n	8000c20 <__gnu_unwind_pr_common+0x1fc>
 8000c1e:	465c      	mov	r4, fp
 8000c20:	4648      	mov	r0, r9
 8000c22:	210d      	movs	r1, #13
 8000c24:	f7ff fe92 	bl	800094c <_Unwind_GetGR>
 8000c28:	9b06      	ldr	r3, [sp, #24]
 8000c2a:	6228      	str	r0, [r5, #32]
 8000c2c:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c2e:	626b      	str	r3, [r5, #36]	; 0x24
 8000c30:	2006      	movs	r0, #6
 8000c32:	e75f      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4648      	mov	r0, r9
 8000c38:	f7ff fe88 	bl	800094c <_Unwind_GetGR>
 8000c3c:	210e      	movs	r1, #14
 8000c3e:	4602      	mov	r2, r0
 8000c40:	4648      	mov	r0, r9
 8000c42:	f7ff fea9 	bl	8000998 <_Unwind_SetGR>
 8000c46:	4648      	mov	r0, r9
 8000c48:	4a29      	ldr	r2, [pc, #164]	; (8000cf0 <__gnu_unwind_pr_common+0x2cc>)
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f7ff fea4 	bl	8000998 <_Unwind_SetGR>
 8000c50:	2007      	movs	r0, #7
 8000c52:	e74f      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000c54:	4607      	mov	r7, r0
 8000c56:	210d      	movs	r1, #13
 8000c58:	4648      	mov	r0, r9
 8000c5a:	f7ff fe77 	bl	800094c <_Unwind_GetGR>
 8000c5e:	2f02      	cmp	r7, #2
 8000c60:	6228      	str	r0, [r5, #32]
 8000c62:	d11d      	bne.n	8000ca0 <__gnu_unwind_pr_common+0x27c>
 8000c64:	462b      	mov	r3, r5
 8000c66:	9a06      	ldr	r2, [sp, #24]
 8000c68:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000c6c:	626b      	str	r3, [r5, #36]	; 0x24
 8000c6e:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c70:	2006      	movs	r0, #6
 8000c72:	e73f      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000c74:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c76:	429c      	cmp	r4, r3
 8000c78:	d1a3      	bne.n	8000bc2 <__gnu_unwind_pr_common+0x19e>
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	18a3      	adds	r3, r4, r2
 8000c80:	9902      	ldr	r1, [sp, #8]
 8000c82:	62a9      	str	r1, [r5, #40]	; 0x28
 8000c84:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000c86:	632a      	str	r2, [r5, #48]	; 0x30
 8000c88:	636b      	str	r3, [r5, #52]	; 0x34
 8000c8a:	6823      	ldr	r3, [r4, #0]
 8000c8c:	42bb      	cmp	r3, r7
 8000c8e:	db1d      	blt.n	8000ccc <__gnu_unwind_pr_common+0x2a8>
 8000c90:	2301      	movs	r3, #1
 8000c92:	9301      	str	r3, [sp, #4]
 8000c94:	e720      	b.n	8000ad8 <__gnu_unwind_pr_common+0xb4>
 8000c96:	4648      	mov	r0, r9
 8000c98:	210d      	movs	r1, #13
 8000c9a:	f7ff fe57 	bl	800094c <_Unwind_GetGR>
 8000c9e:	6228      	str	r0, [r5, #32]
 8000ca0:	9b06      	ldr	r3, [sp, #24]
 8000ca2:	626b      	str	r3, [r5, #36]	; 0x24
 8000ca4:	e7e3      	b.n	8000c6e <__gnu_unwind_pr_common+0x24a>
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f7ff fc68 	bl	800057c <selfrel_offset31>
 8000cac:	3404      	adds	r4, #4
 8000cae:	4606      	mov	r6, r0
 8000cb0:	63ac      	str	r4, [r5, #56]	; 0x38
 8000cb2:	4628      	mov	r0, r5
 8000cb4:	f3af 8000 	nop.w
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	f43f af1a 	beq.w	8000af2 <__gnu_unwind_pr_common+0xce>
 8000cbe:	4648      	mov	r0, r9
 8000cc0:	4632      	mov	r2, r6
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f7ff fe68 	bl	8000998 <_Unwind_SetGR>
 8000cc8:	2007      	movs	r0, #7
 8000cca:	e713      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000ccc:	4608      	mov	r0, r1
 8000cce:	3001      	adds	r0, #1
 8000cd0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000cd4:	f7ff fc52 	bl	800057c <selfrel_offset31>
 8000cd8:	210f      	movs	r1, #15
 8000cda:	4602      	mov	r2, r0
 8000cdc:	4648      	mov	r0, r9
 8000cde:	f7ff fe5b 	bl	8000998 <_Unwind_SetGR>
 8000ce2:	4648      	mov	r0, r9
 8000ce4:	462a      	mov	r2, r5
 8000ce6:	4639      	mov	r1, r7
 8000ce8:	f7ff fe56 	bl	8000998 <_Unwind_SetGR>
 8000cec:	2007      	movs	r0, #7
 8000cee:	e701      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000cf0:	00000000 	.word	0x00000000

08000cf4 <__aeabi_unwind_cpp_pr0>:
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e695      	b.n	8000a24 <__gnu_unwind_pr_common>

08000cf8 <__aeabi_unwind_cpp_pr1>:
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e693      	b.n	8000a24 <__gnu_unwind_pr_common>

08000cfc <__aeabi_unwind_cpp_pr2>:
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	e691      	b.n	8000a24 <__gnu_unwind_pr_common>

08000d00 <_Unwind_VRS_Pop>:
 8000d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d02:	4604      	mov	r4, r0
 8000d04:	b0c5      	sub	sp, #276	; 0x114
 8000d06:	2904      	cmp	r1, #4
 8000d08:	d80d      	bhi.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000d0a:	e8df f001 	tbb	[pc, r1]
 8000d0e:	0353      	.short	0x0353
 8000d10:	310c      	.short	0x310c
 8000d12:	0f          	.byte	0x0f
 8000d13:	00          	.byte	0x00
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000d1a:	b295      	uxth	r5, r2
 8000d1c:	d162      	bne.n	8000de4 <_Unwind_VRS_Pop+0xe4>
 8000d1e:	1972      	adds	r2, r6, r5
 8000d20:	2a10      	cmp	r2, #16
 8000d22:	f240 809b 	bls.w	8000e5c <_Unwind_VRS_Pop+0x15c>
 8000d26:	2002      	movs	r0, #2
 8000d28:	b045      	add	sp, #276	; 0x114
 8000d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1fa      	bne.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000d30:	2a10      	cmp	r2, #16
 8000d32:	d8f8      	bhi.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000d34:	6823      	ldr	r3, [r4, #0]
 8000d36:	06d8      	lsls	r0, r3, #27
 8000d38:	f100 80c6 	bmi.w	8000ec8 <_Unwind_VRS_Pop+0x1c8>
 8000d3c:	ae22      	add	r6, sp, #136	; 0x88
 8000d3e:	4630      	mov	r0, r6
 8000d40:	9201      	str	r2, [sp, #4]
 8000d42:	f000 f973 	bl	800102c <__gnu_Unwind_Save_WMMXC>
 8000d46:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d48:	9a01      	ldr	r2, [sp, #4]
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	2501      	movs	r5, #1
 8000d4e:	fa05 f103 	lsl.w	r1, r5, r3
 8000d52:	4211      	tst	r1, r2
 8000d54:	d003      	beq.n	8000d5e <_Unwind_VRS_Pop+0x5e>
 8000d56:	6801      	ldr	r1, [r0, #0]
 8000d58:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000d5c:	3004      	adds	r0, #4
 8000d5e:	3301      	adds	r3, #1
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	d1f4      	bne.n	8000d4e <_Unwind_VRS_Pop+0x4e>
 8000d64:	63a0      	str	r0, [r4, #56]	; 0x38
 8000d66:	4630      	mov	r0, r6
 8000d68:	f000 f956 	bl	8001018 <__gnu_Unwind_Restore_WMMXC>
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	e7db      	b.n	8000d28 <_Unwind_VRS_Pop+0x28>
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d1d8      	bne.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000d74:	0c15      	lsrs	r5, r2, #16
 8000d76:	b297      	uxth	r7, r2
 8000d78:	19eb      	adds	r3, r5, r7
 8000d7a:	2b10      	cmp	r3, #16
 8000d7c:	d8d3      	bhi.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	071e      	lsls	r6, r3, #28
 8000d82:	f100 80b5 	bmi.w	8000ef0 <_Unwind_VRS_Pop+0x1f0>
 8000d86:	ae22      	add	r6, sp, #136	; 0x88
 8000d88:	4630      	mov	r0, r6
 8000d8a:	f000 f923 	bl	8000fd4 <__gnu_Unwind_Save_WMMXD>
 8000d8e:	00ed      	lsls	r5, r5, #3
 8000d90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d92:	b14f      	cbz	r7, 8000da8 <_Unwind_VRS_Pop+0xa8>
 8000d94:	3d04      	subs	r5, #4
 8000d96:	1971      	adds	r1, r6, r5
 8000d98:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000da0:	f841 2f04 	str.w	r2, [r1, #4]!
 8000da4:	4283      	cmp	r3, r0
 8000da6:	d1f9      	bne.n	8000d9c <_Unwind_VRS_Pop+0x9c>
 8000da8:	4630      	mov	r0, r6
 8000daa:	63a3      	str	r3, [r4, #56]	; 0x38
 8000dac:	f000 f8f0 	bl	8000f90 <__gnu_Unwind_Restore_WMMXD>
 8000db0:	2000      	movs	r0, #0
 8000db2:	e7b9      	b.n	8000d28 <_Unwind_VRS_Pop+0x28>
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1b6      	bne.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000db8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000dba:	b297      	uxth	r7, r2
 8000dbc:	1d20      	adds	r0, r4, #4
 8000dbe:	2601      	movs	r6, #1
 8000dc0:	fa06 f103 	lsl.w	r1, r6, r3
 8000dc4:	4239      	tst	r1, r7
 8000dc6:	f103 0301 	add.w	r3, r3, #1
 8000dca:	d002      	beq.n	8000dd2 <_Unwind_VRS_Pop+0xd2>
 8000dcc:	6829      	ldr	r1, [r5, #0]
 8000dce:	6001      	str	r1, [r0, #0]
 8000dd0:	3504      	adds	r5, #4
 8000dd2:	2b10      	cmp	r3, #16
 8000dd4:	f100 0004 	add.w	r0, r0, #4
 8000dd8:	d1f2      	bne.n	8000dc0 <_Unwind_VRS_Pop+0xc0>
 8000dda:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000dde:	d13b      	bne.n	8000e58 <_Unwind_VRS_Pop+0x158>
 8000de0:	63a5      	str	r5, [r4, #56]	; 0x38
 8000de2:	e7a1      	b.n	8000d28 <_Unwind_VRS_Pop+0x28>
 8000de4:	2b05      	cmp	r3, #5
 8000de6:	d19e      	bne.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000de8:	1977      	adds	r7, r6, r5
 8000dea:	2f20      	cmp	r7, #32
 8000dec:	d89b      	bhi.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000dee:	2e0f      	cmp	r6, #15
 8000df0:	d966      	bls.n	8000ec0 <_Unwind_VRS_Pop+0x1c0>
 8000df2:	462f      	mov	r7, r5
 8000df4:	2d00      	cmp	r5, #0
 8000df6:	d13a      	bne.n	8000e6e <_Unwind_VRS_Pop+0x16e>
 8000df8:	462a      	mov	r2, r5
 8000dfa:	2700      	movs	r7, #0
 8000dfc:	2a00      	cmp	r2, #0
 8000dfe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e00:	dd72      	ble.n	8000ee8 <_Unwind_VRS_Pop+0x1e8>
 8000e02:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000e06:	4601      	mov	r1, r0
 8000e08:	a844      	add	r0, sp, #272	; 0x110
 8000e0a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000e0e:	388c      	subs	r0, #140	; 0x8c
 8000e10:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e14:	f840 5f04 	str.w	r5, [r0, #4]!
 8000e18:	4291      	cmp	r1, r2
 8000e1a:	d1f9      	bne.n	8000e10 <_Unwind_VRS_Pop+0x110>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	b197      	cbz	r7, 8000e46 <_Unwind_VRS_Pop+0x146>
 8000e20:	2e10      	cmp	r6, #16
 8000e22:	4632      	mov	r2, r6
 8000e24:	a944      	add	r1, sp, #272	; 0x110
 8000e26:	bf38      	it	cc
 8000e28:	2210      	movcc	r2, #16
 8000e2a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000e2e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000e32:	0079      	lsls	r1, r7, #1
 8000e34:	3a04      	subs	r2, #4
 8000e36:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000e3a:	f850 5b04 	ldr.w	r5, [r0], #4
 8000e3e:	f842 5f04 	str.w	r5, [r2, #4]!
 8000e42:	4288      	cmp	r0, r1
 8000e44:	d1f9      	bne.n	8000e3a <_Unwind_VRS_Pop+0x13a>
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d048      	beq.n	8000edc <_Unwind_VRS_Pop+0x1dc>
 8000e4a:	2e0f      	cmp	r6, #15
 8000e4c:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e4e:	d933      	bls.n	8000eb8 <_Unwind_VRS_Pop+0x1b8>
 8000e50:	b117      	cbz	r7, 8000e58 <_Unwind_VRS_Pop+0x158>
 8000e52:	a802      	add	r0, sp, #8
 8000e54:	f000 f894 	bl	8000f80 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000e58:	2000      	movs	r0, #0
 8000e5a:	e765      	b.n	8000d28 <_Unwind_VRS_Pop+0x28>
 8000e5c:	2e0f      	cmp	r6, #15
 8000e5e:	f63f af62 	bhi.w	8000d26 <_Unwind_VRS_Pop+0x26>
 8000e62:	2700      	movs	r7, #0
 8000e64:	6822      	ldr	r2, [r4, #0]
 8000e66:	07d1      	lsls	r1, r2, #31
 8000e68:	d417      	bmi.n	8000e9a <_Unwind_VRS_Pop+0x19a>
 8000e6a:	2f00      	cmp	r7, #0
 8000e6c:	d060      	beq.n	8000f30 <_Unwind_VRS_Pop+0x230>
 8000e6e:	6822      	ldr	r2, [r4, #0]
 8000e70:	0751      	lsls	r1, r2, #29
 8000e72:	d445      	bmi.n	8000f00 <_Unwind_VRS_Pop+0x200>
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d04d      	beq.n	8000f14 <_Unwind_VRS_Pop+0x214>
 8000e78:	2e0f      	cmp	r6, #15
 8000e7a:	d806      	bhi.n	8000e8a <_Unwind_VRS_Pop+0x18a>
 8000e7c:	a822      	add	r0, sp, #136	; 0x88
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	f000 f87a 	bl	8000f78 <__gnu_Unwind_Save_VFP_D>
 8000e84:	9b01      	ldr	r3, [sp, #4]
 8000e86:	2f00      	cmp	r7, #0
 8000e88:	d0b6      	beq.n	8000df8 <_Unwind_VRS_Pop+0xf8>
 8000e8a:	a802      	add	r0, sp, #8
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	f000 f87b 	bl	8000f88 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e92:	9b01      	ldr	r3, [sp, #4]
 8000e94:	f1c6 0210 	rsb	r2, r6, #16
 8000e98:	e7b0      	b.n	8000dfc <_Unwind_VRS_Pop+0xfc>
 8000e9a:	f022 0101 	bic.w	r1, r2, #1
 8000e9e:	2b05      	cmp	r3, #5
 8000ea0:	6021      	str	r1, [r4, #0]
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	d03b      	beq.n	8000f20 <_Unwind_VRS_Pop+0x220>
 8000ea8:	f022 0203 	bic.w	r2, r2, #3
 8000eac:	f840 2b48 	str.w	r2, [r0], #72
 8000eb0:	f000 f85a 	bl	8000f68 <__gnu_Unwind_Save_VFP>
 8000eb4:	9b01      	ldr	r3, [sp, #4]
 8000eb6:	e7d8      	b.n	8000e6a <_Unwind_VRS_Pop+0x16a>
 8000eb8:	a822      	add	r0, sp, #136	; 0x88
 8000eba:	f000 f859 	bl	8000f70 <__gnu_Unwind_Restore_VFP_D>
 8000ebe:	e7c7      	b.n	8000e50 <_Unwind_VRS_Pop+0x150>
 8000ec0:	2f10      	cmp	r7, #16
 8000ec2:	d9ce      	bls.n	8000e62 <_Unwind_VRS_Pop+0x162>
 8000ec4:	3f10      	subs	r7, #16
 8000ec6:	e7cd      	b.n	8000e64 <_Unwind_VRS_Pop+0x164>
 8000ec8:	f023 0310 	bic.w	r3, r3, #16
 8000ecc:	6023      	str	r3, [r4, #0]
 8000ece:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000ed2:	9201      	str	r2, [sp, #4]
 8000ed4:	f000 f8aa 	bl	800102c <__gnu_Unwind_Save_WMMXC>
 8000ed8:	9a01      	ldr	r2, [sp, #4]
 8000eda:	e72f      	b.n	8000d3c <_Unwind_VRS_Pop+0x3c>
 8000edc:	3104      	adds	r1, #4
 8000ede:	63a1      	str	r1, [r4, #56]	; 0x38
 8000ee0:	a822      	add	r0, sp, #136	; 0x88
 8000ee2:	f000 f83d 	bl	8000f60 <__gnu_Unwind_Restore_VFP>
 8000ee6:	e7b7      	b.n	8000e58 <_Unwind_VRS_Pop+0x158>
 8000ee8:	2f00      	cmp	r7, #0
 8000eea:	d199      	bne.n	8000e20 <_Unwind_VRS_Pop+0x120>
 8000eec:	4601      	mov	r1, r0
 8000eee:	e7aa      	b.n	8000e46 <_Unwind_VRS_Pop+0x146>
 8000ef0:	f023 0308 	bic.w	r3, r3, #8
 8000ef4:	6023      	str	r3, [r4, #0]
 8000ef6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000efa:	f000 f86b 	bl	8000fd4 <__gnu_Unwind_Save_WMMXD>
 8000efe:	e742      	b.n	8000d86 <_Unwind_VRS_Pop+0x86>
 8000f00:	4620      	mov	r0, r4
 8000f02:	f022 0204 	bic.w	r2, r2, #4
 8000f06:	f840 2bd0 	str.w	r2, [r0], #208
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	f000 f83c 	bl	8000f88 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f10:	9b01      	ldr	r3, [sp, #4]
 8000f12:	e7af      	b.n	8000e74 <_Unwind_VRS_Pop+0x174>
 8000f14:	a822      	add	r0, sp, #136	; 0x88
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	f000 f826 	bl	8000f68 <__gnu_Unwind_Save_VFP>
 8000f1c:	9b01      	ldr	r3, [sp, #4]
 8000f1e:	e7b9      	b.n	8000e94 <_Unwind_VRS_Pop+0x194>
 8000f20:	f041 0102 	orr.w	r1, r1, #2
 8000f24:	f840 1b48 	str.w	r1, [r0], #72
 8000f28:	f000 f826 	bl	8000f78 <__gnu_Unwind_Save_VFP_D>
 8000f2c:	9b01      	ldr	r3, [sp, #4]
 8000f2e:	e79c      	b.n	8000e6a <_Unwind_VRS_Pop+0x16a>
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d003      	beq.n	8000f3c <_Unwind_VRS_Pop+0x23c>
 8000f34:	2e0f      	cmp	r6, #15
 8000f36:	f63f af5f 	bhi.w	8000df8 <_Unwind_VRS_Pop+0xf8>
 8000f3a:	e79f      	b.n	8000e7c <_Unwind_VRS_Pop+0x17c>
 8000f3c:	a822      	add	r0, sp, #136	; 0x88
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	f000 f812 	bl	8000f68 <__gnu_Unwind_Save_VFP>
 8000f44:	9b01      	ldr	r3, [sp, #4]
 8000f46:	e757      	b.n	8000df8 <_Unwind_VRS_Pop+0xf8>

08000f48 <__restore_core_regs>:
 8000f48:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000f4c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000f50:	469c      	mov	ip, r3
 8000f52:	46a6      	mov	lr, r4
 8000f54:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000f58:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000f5c:	46e5      	mov	sp, ip
 8000f5e:	bd00      	pop	{pc}

08000f60 <__gnu_Unwind_Restore_VFP>:
 8000f60:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <__gnu_Unwind_Save_VFP>:
 8000f68:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <__gnu_Unwind_Restore_VFP_D>:
 8000f70:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <__gnu_Unwind_Save_VFP_D>:
 8000f78:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f80:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f88:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__gnu_Unwind_Restore_WMMXD>:
 8000f90:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f94:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f98:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f9c:	ecf0 3102 	ldfe	f3, [r0], #8
 8000fa0:	ecf0 4102 	ldfe	f4, [r0], #8
 8000fa4:	ecf0 5102 	ldfe	f5, [r0], #8
 8000fa8:	ecf0 6102 	ldfe	f6, [r0], #8
 8000fac:	ecf0 7102 	ldfe	f7, [r0], #8
 8000fb0:	ecf0 8102 	ldfp	f0, [r0], #8
 8000fb4:	ecf0 9102 	ldfp	f1, [r0], #8
 8000fb8:	ecf0 a102 	ldfp	f2, [r0], #8
 8000fbc:	ecf0 b102 	ldfp	f3, [r0], #8
 8000fc0:	ecf0 c102 	ldfp	f4, [r0], #8
 8000fc4:	ecf0 d102 	ldfp	f5, [r0], #8
 8000fc8:	ecf0 e102 	ldfp	f6, [r0], #8
 8000fcc:	ecf0 f102 	ldfp	f7, [r0], #8
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <__gnu_Unwind_Save_WMMXD>:
 8000fd4:	ece0 0102 	stfe	f0, [r0], #8
 8000fd8:	ece0 1102 	stfe	f1, [r0], #8
 8000fdc:	ece0 2102 	stfe	f2, [r0], #8
 8000fe0:	ece0 3102 	stfe	f3, [r0], #8
 8000fe4:	ece0 4102 	stfe	f4, [r0], #8
 8000fe8:	ece0 5102 	stfe	f5, [r0], #8
 8000fec:	ece0 6102 	stfe	f6, [r0], #8
 8000ff0:	ece0 7102 	stfe	f7, [r0], #8
 8000ff4:	ece0 8102 	stfp	f0, [r0], #8
 8000ff8:	ece0 9102 	stfp	f1, [r0], #8
 8000ffc:	ece0 a102 	stfp	f2, [r0], #8
 8001000:	ece0 b102 	stfp	f3, [r0], #8
 8001004:	ece0 c102 	stfp	f4, [r0], #8
 8001008:	ece0 d102 	stfp	f5, [r0], #8
 800100c:	ece0 e102 	stfp	f6, [r0], #8
 8001010:	ece0 f102 	stfp	f7, [r0], #8
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__gnu_Unwind_Restore_WMMXC>:
 8001018:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800101c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001020:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001024:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <__gnu_Unwind_Save_WMMXC>:
 800102c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001030:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001034:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001038:	fca0 b101 	stc2	1, cr11, [r0], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <_Unwind_RaiseException>:
 8001040:	46ec      	mov	ip, sp
 8001042:	b500      	push	{lr}
 8001044:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001048:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001054:	a901      	add	r1, sp, #4
 8001056:	f7ff fbf3 	bl	8000840 <__gnu_Unwind_RaiseException>
 800105a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800105e:	b012      	add	sp, #72	; 0x48
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <_Unwind_Resume>:
 8001064:	46ec      	mov	ip, sp
 8001066:	b500      	push	{lr}
 8001068:	e92d 5000 	stmdb	sp!, {ip, lr}
 800106c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001078:	a901      	add	r1, sp, #4
 800107a:	f7ff fc1b 	bl	80008b4 <__gnu_Unwind_Resume>
 800107e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001082:	b012      	add	sp, #72	; 0x48
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <_Unwind_Resume_or_Rethrow>:
 8001088:	46ec      	mov	ip, sp
 800108a:	b500      	push	{lr}
 800108c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001090:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	e92d 000c 	stmdb	sp!, {r2, r3}
 800109c:	a901      	add	r1, sp, #4
 800109e:	f7ff fc2b 	bl	80008f8 <__gnu_Unwind_Resume_or_Rethrow>
 80010a2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010a6:	b012      	add	sp, #72	; 0x48
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <_Unwind_ForcedUnwind>:
 80010ac:	46ec      	mov	ip, sp
 80010ae:	b500      	push	{lr}
 80010b0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010b4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010c0:	ab01      	add	r3, sp, #4
 80010c2:	f7ff fbed 	bl	80008a0 <__gnu_Unwind_ForcedUnwind>
 80010c6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010ca:	b012      	add	sp, #72	; 0x48
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <_Unwind_Backtrace>:
 80010d0:	46ec      	mov	ip, sp
 80010d2:	b500      	push	{lr}
 80010d4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010d8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010e4:	aa01      	add	r2, sp, #4
 80010e6:	f7ff fc65 	bl	80009b4 <__gnu_Unwind_Backtrace>
 80010ea:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010ee:	b012      	add	sp, #72	; 0x48
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <next_unwind_byte>:
 80010f4:	7a02      	ldrb	r2, [r0, #8]
 80010f6:	b91a      	cbnz	r2, 8001100 <next_unwind_byte+0xc>
 80010f8:	7a43      	ldrb	r3, [r0, #9]
 80010fa:	b943      	cbnz	r3, 800110e <next_unwind_byte+0x1a>
 80010fc:	20b0      	movs	r0, #176	; 0xb0
 80010fe:	4770      	bx	lr
 8001100:	6803      	ldr	r3, [r0, #0]
 8001102:	3a01      	subs	r2, #1
 8001104:	7202      	strb	r2, [r0, #8]
 8001106:	021a      	lsls	r2, r3, #8
 8001108:	6002      	str	r2, [r0, #0]
 800110a:	0e18      	lsrs	r0, r3, #24
 800110c:	4770      	bx	lr
 800110e:	6842      	ldr	r2, [r0, #4]
 8001110:	3b01      	subs	r3, #1
 8001112:	b410      	push	{r4}
 8001114:	7243      	strb	r3, [r0, #9]
 8001116:	6813      	ldr	r3, [r2, #0]
 8001118:	2103      	movs	r1, #3
 800111a:	1d14      	adds	r4, r2, #4
 800111c:	7201      	strb	r1, [r0, #8]
 800111e:	021a      	lsls	r2, r3, #8
 8001120:	6044      	str	r4, [r0, #4]
 8001122:	6002      	str	r2, [r0, #0]
 8001124:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001128:	0e18      	lsrs	r0, r3, #24
 800112a:	4770      	bx	lr

0800112c <_Unwind_GetGR.constprop.0>:
 800112c:	b500      	push	{lr}
 800112e:	b085      	sub	sp, #20
 8001130:	aa03      	add	r2, sp, #12
 8001132:	2300      	movs	r3, #0
 8001134:	9200      	str	r2, [sp, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	220c      	movs	r2, #12
 800113a:	f7ff fbed 	bl	8000918 <_Unwind_VRS_Get>
 800113e:	9803      	ldr	r0, [sp, #12]
 8001140:	b005      	add	sp, #20
 8001142:	f85d fb04 	ldr.w	pc, [sp], #4
 8001146:	bf00      	nop

08001148 <unwind_UCB_from_context>:
 8001148:	e7f0      	b.n	800112c <_Unwind_GetGR.constprop.0>
 800114a:	bf00      	nop

0800114c <__gnu_unwind_execute>:
 800114c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001150:	4606      	mov	r6, r0
 8001152:	b085      	sub	sp, #20
 8001154:	460f      	mov	r7, r1
 8001156:	f04f 0800 	mov.w	r8, #0
 800115a:	4638      	mov	r0, r7
 800115c:	f7ff ffca 	bl	80010f4 <next_unwind_byte>
 8001160:	28b0      	cmp	r0, #176	; 0xb0
 8001162:	4604      	mov	r4, r0
 8001164:	d023      	beq.n	80011ae <__gnu_unwind_execute+0x62>
 8001166:	0605      	lsls	r5, r0, #24
 8001168:	d427      	bmi.n	80011ba <__gnu_unwind_execute+0x6e>
 800116a:	2300      	movs	r3, #0
 800116c:	f10d 090c 	add.w	r9, sp, #12
 8001170:	4619      	mov	r1, r3
 8001172:	0085      	lsls	r5, r0, #2
 8001174:	220d      	movs	r2, #13
 8001176:	f8cd 9000 	str.w	r9, [sp]
 800117a:	4630      	mov	r0, r6
 800117c:	f7ff fbcc 	bl	8000918 <_Unwind_VRS_Get>
 8001180:	b2ed      	uxtb	r5, r5
 8001182:	9b03      	ldr	r3, [sp, #12]
 8001184:	f8cd 9000 	str.w	r9, [sp]
 8001188:	0660      	lsls	r0, r4, #25
 800118a:	f105 0504 	add.w	r5, r5, #4
 800118e:	bf4c      	ite	mi
 8001190:	1b5d      	submi	r5, r3, r5
 8001192:	18ed      	addpl	r5, r5, r3
 8001194:	2300      	movs	r3, #0
 8001196:	4619      	mov	r1, r3
 8001198:	220d      	movs	r2, #13
 800119a:	4630      	mov	r0, r6
 800119c:	9503      	str	r5, [sp, #12]
 800119e:	f7ff fbe1 	bl	8000964 <_Unwind_VRS_Set>
 80011a2:	4638      	mov	r0, r7
 80011a4:	f7ff ffa6 	bl	80010f4 <next_unwind_byte>
 80011a8:	28b0      	cmp	r0, #176	; 0xb0
 80011aa:	4604      	mov	r4, r0
 80011ac:	d1db      	bne.n	8001166 <__gnu_unwind_execute+0x1a>
 80011ae:	f1b8 0f00 	cmp.w	r8, #0
 80011b2:	f000 8095 	beq.w	80012e0 <__gnu_unwind_execute+0x194>
 80011b6:	2000      	movs	r0, #0
 80011b8:	e01c      	b.n	80011f4 <__gnu_unwind_execute+0xa8>
 80011ba:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80011be:	2b80      	cmp	r3, #128	; 0x80
 80011c0:	d05d      	beq.n	800127e <__gnu_unwind_execute+0x132>
 80011c2:	2b90      	cmp	r3, #144	; 0x90
 80011c4:	d019      	beq.n	80011fa <__gnu_unwind_execute+0xae>
 80011c6:	2ba0      	cmp	r3, #160	; 0xa0
 80011c8:	d02c      	beq.n	8001224 <__gnu_unwind_execute+0xd8>
 80011ca:	2bb0      	cmp	r3, #176	; 0xb0
 80011cc:	d03f      	beq.n	800124e <__gnu_unwind_execute+0x102>
 80011ce:	2bc0      	cmp	r3, #192	; 0xc0
 80011d0:	d06c      	beq.n	80012ac <__gnu_unwind_execute+0x160>
 80011d2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80011d6:	2bd0      	cmp	r3, #208	; 0xd0
 80011d8:	d10b      	bne.n	80011f2 <__gnu_unwind_execute+0xa6>
 80011da:	f000 0207 	and.w	r2, r0, #7
 80011de:	3201      	adds	r2, #1
 80011e0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011e4:	2305      	movs	r3, #5
 80011e6:	2101      	movs	r1, #1
 80011e8:	4630      	mov	r0, r6
 80011ea:	f7ff fd89 	bl	8000d00 <_Unwind_VRS_Pop>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d0b3      	beq.n	800115a <__gnu_unwind_execute+0xe>
 80011f2:	2009      	movs	r0, #9
 80011f4:	b005      	add	sp, #20
 80011f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011fa:	f000 030d 	and.w	r3, r0, #13
 80011fe:	2b0d      	cmp	r3, #13
 8001200:	d0f7      	beq.n	80011f2 <__gnu_unwind_execute+0xa6>
 8001202:	ad03      	add	r5, sp, #12
 8001204:	2300      	movs	r3, #0
 8001206:	f000 020f 	and.w	r2, r0, #15
 800120a:	4619      	mov	r1, r3
 800120c:	9500      	str	r5, [sp, #0]
 800120e:	4630      	mov	r0, r6
 8001210:	f7ff fb82 	bl	8000918 <_Unwind_VRS_Get>
 8001214:	2300      	movs	r3, #0
 8001216:	9500      	str	r5, [sp, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	220d      	movs	r2, #13
 800121c:	4630      	mov	r0, r6
 800121e:	f7ff fba1 	bl	8000964 <_Unwind_VRS_Set>
 8001222:	e79a      	b.n	800115a <__gnu_unwind_execute+0xe>
 8001224:	43c2      	mvns	r2, r0
 8001226:	f002 0307 	and.w	r3, r2, #7
 800122a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800122e:	411a      	asrs	r2, r3
 8001230:	0701      	lsls	r1, r0, #28
 8001232:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	bf48      	it	mi
 800123c:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001240:	4619      	mov	r1, r3
 8001242:	4630      	mov	r0, r6
 8001244:	f7ff fd5c 	bl	8000d00 <_Unwind_VRS_Pop>
 8001248:	2800      	cmp	r0, #0
 800124a:	d1d2      	bne.n	80011f2 <__gnu_unwind_execute+0xa6>
 800124c:	e785      	b.n	800115a <__gnu_unwind_execute+0xe>
 800124e:	28b1      	cmp	r0, #177	; 0xb1
 8001250:	d057      	beq.n	8001302 <__gnu_unwind_execute+0x1b6>
 8001252:	28b2      	cmp	r0, #178	; 0xb2
 8001254:	d068      	beq.n	8001328 <__gnu_unwind_execute+0x1dc>
 8001256:	28b3      	cmp	r0, #179	; 0xb3
 8001258:	f000 8095 	beq.w	8001386 <__gnu_unwind_execute+0x23a>
 800125c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001260:	2bb4      	cmp	r3, #180	; 0xb4
 8001262:	d0c6      	beq.n	80011f2 <__gnu_unwind_execute+0xa6>
 8001264:	f000 0207 	and.w	r2, r0, #7
 8001268:	3201      	adds	r2, #1
 800126a:	2301      	movs	r3, #1
 800126c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001270:	4619      	mov	r1, r3
 8001272:	4630      	mov	r0, r6
 8001274:	f7ff fd44 	bl	8000d00 <_Unwind_VRS_Pop>
 8001278:	2800      	cmp	r0, #0
 800127a:	d1ba      	bne.n	80011f2 <__gnu_unwind_execute+0xa6>
 800127c:	e76d      	b.n	800115a <__gnu_unwind_execute+0xe>
 800127e:	4638      	mov	r0, r7
 8001280:	f7ff ff38 	bl	80010f4 <next_unwind_byte>
 8001284:	0224      	lsls	r4, r4, #8
 8001286:	4304      	orrs	r4, r0
 8001288:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800128c:	d0b1      	beq.n	80011f2 <__gnu_unwind_execute+0xa6>
 800128e:	0124      	lsls	r4, r4, #4
 8001290:	2300      	movs	r3, #0
 8001292:	b2a2      	uxth	r2, r4
 8001294:	4619      	mov	r1, r3
 8001296:	4630      	mov	r0, r6
 8001298:	f7ff fd32 	bl	8000d00 <_Unwind_VRS_Pop>
 800129c:	2800      	cmp	r0, #0
 800129e:	d1a8      	bne.n	80011f2 <__gnu_unwind_execute+0xa6>
 80012a0:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80012a4:	bf18      	it	ne
 80012a6:	f04f 0801 	movne.w	r8, #1
 80012aa:	e756      	b.n	800115a <__gnu_unwind_execute+0xe>
 80012ac:	28c6      	cmp	r0, #198	; 0xc6
 80012ae:	d07d      	beq.n	80013ac <__gnu_unwind_execute+0x260>
 80012b0:	28c7      	cmp	r0, #199	; 0xc7
 80012b2:	f000 8086 	beq.w	80013c2 <__gnu_unwind_execute+0x276>
 80012b6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80012ba:	2bc0      	cmp	r3, #192	; 0xc0
 80012bc:	f000 8094 	beq.w	80013e8 <__gnu_unwind_execute+0x29c>
 80012c0:	28c8      	cmp	r0, #200	; 0xc8
 80012c2:	f000 809f 	beq.w	8001404 <__gnu_unwind_execute+0x2b8>
 80012c6:	28c9      	cmp	r0, #201	; 0xc9
 80012c8:	d193      	bne.n	80011f2 <__gnu_unwind_execute+0xa6>
 80012ca:	4638      	mov	r0, r7
 80012cc:	f7ff ff12 	bl	80010f4 <next_unwind_byte>
 80012d0:	0302      	lsls	r2, r0, #12
 80012d2:	f000 000f 	and.w	r0, r0, #15
 80012d6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80012da:	3001      	adds	r0, #1
 80012dc:	4302      	orrs	r2, r0
 80012de:	e781      	b.n	80011e4 <__gnu_unwind_execute+0x98>
 80012e0:	ac03      	add	r4, sp, #12
 80012e2:	4643      	mov	r3, r8
 80012e4:	220e      	movs	r2, #14
 80012e6:	4641      	mov	r1, r8
 80012e8:	9400      	str	r4, [sp, #0]
 80012ea:	4630      	mov	r0, r6
 80012ec:	f7ff fb14 	bl	8000918 <_Unwind_VRS_Get>
 80012f0:	9400      	str	r4, [sp, #0]
 80012f2:	4630      	mov	r0, r6
 80012f4:	4643      	mov	r3, r8
 80012f6:	220f      	movs	r2, #15
 80012f8:	4641      	mov	r1, r8
 80012fa:	f7ff fb33 	bl	8000964 <_Unwind_VRS_Set>
 80012fe:	4640      	mov	r0, r8
 8001300:	e778      	b.n	80011f4 <__gnu_unwind_execute+0xa8>
 8001302:	4638      	mov	r0, r7
 8001304:	f7ff fef6 	bl	80010f4 <next_unwind_byte>
 8001308:	2800      	cmp	r0, #0
 800130a:	f43f af72 	beq.w	80011f2 <__gnu_unwind_execute+0xa6>
 800130e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001312:	f47f af6e 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 8001316:	4602      	mov	r2, r0
 8001318:	4619      	mov	r1, r3
 800131a:	4630      	mov	r0, r6
 800131c:	f7ff fcf0 	bl	8000d00 <_Unwind_VRS_Pop>
 8001320:	2800      	cmp	r0, #0
 8001322:	f47f af66 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 8001326:	e718      	b.n	800115a <__gnu_unwind_execute+0xe>
 8001328:	2300      	movs	r3, #0
 800132a:	f10d 090c 	add.w	r9, sp, #12
 800132e:	220d      	movs	r2, #13
 8001330:	4619      	mov	r1, r3
 8001332:	f8cd 9000 	str.w	r9, [sp]
 8001336:	4630      	mov	r0, r6
 8001338:	f7ff faee 	bl	8000918 <_Unwind_VRS_Get>
 800133c:	4638      	mov	r0, r7
 800133e:	f7ff fed9 	bl	80010f4 <next_unwind_byte>
 8001342:	0602      	lsls	r2, r0, #24
 8001344:	f04f 0402 	mov.w	r4, #2
 8001348:	d50c      	bpl.n	8001364 <__gnu_unwind_execute+0x218>
 800134a:	9b03      	ldr	r3, [sp, #12]
 800134c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001350:	40a0      	lsls	r0, r4
 8001352:	4403      	add	r3, r0
 8001354:	4638      	mov	r0, r7
 8001356:	9303      	str	r3, [sp, #12]
 8001358:	f7ff fecc 	bl	80010f4 <next_unwind_byte>
 800135c:	0603      	lsls	r3, r0, #24
 800135e:	f104 0407 	add.w	r4, r4, #7
 8001362:	d4f2      	bmi.n	800134a <__gnu_unwind_execute+0x1fe>
 8001364:	9b03      	ldr	r3, [sp, #12]
 8001366:	f8cd 9000 	str.w	r9, [sp]
 800136a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800136e:	40a2      	lsls	r2, r4
 8001370:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001374:	2300      	movs	r3, #0
 8001376:	4414      	add	r4, r2
 8001378:	4619      	mov	r1, r3
 800137a:	220d      	movs	r2, #13
 800137c:	4630      	mov	r0, r6
 800137e:	9403      	str	r4, [sp, #12]
 8001380:	f7ff faf0 	bl	8000964 <_Unwind_VRS_Set>
 8001384:	e6e9      	b.n	800115a <__gnu_unwind_execute+0xe>
 8001386:	4638      	mov	r0, r7
 8001388:	f7ff feb4 	bl	80010f4 <next_unwind_byte>
 800138c:	0301      	lsls	r1, r0, #12
 800138e:	f000 000f 	and.w	r0, r0, #15
 8001392:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001396:	1c42      	adds	r2, r0, #1
 8001398:	2301      	movs	r3, #1
 800139a:	430a      	orrs	r2, r1
 800139c:	4630      	mov	r0, r6
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fcae 	bl	8000d00 <_Unwind_VRS_Pop>
 80013a4:	2800      	cmp	r0, #0
 80013a6:	f47f af24 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 80013aa:	e6d6      	b.n	800115a <__gnu_unwind_execute+0xe>
 80013ac:	4638      	mov	r0, r7
 80013ae:	f7ff fea1 	bl	80010f4 <next_unwind_byte>
 80013b2:	0301      	lsls	r1, r0, #12
 80013b4:	f000 000f 	and.w	r0, r0, #15
 80013b8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80013bc:	1c42      	adds	r2, r0, #1
 80013be:	2303      	movs	r3, #3
 80013c0:	e7eb      	b.n	800139a <__gnu_unwind_execute+0x24e>
 80013c2:	4638      	mov	r0, r7
 80013c4:	f7ff fe96 	bl	80010f4 <next_unwind_byte>
 80013c8:	2800      	cmp	r0, #0
 80013ca:	f43f af12 	beq.w	80011f2 <__gnu_unwind_execute+0xa6>
 80013ce:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80013d2:	f47f af0e 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 80013d6:	4602      	mov	r2, r0
 80013d8:	2104      	movs	r1, #4
 80013da:	4630      	mov	r0, r6
 80013dc:	f7ff fc90 	bl	8000d00 <_Unwind_VRS_Pop>
 80013e0:	2800      	cmp	r0, #0
 80013e2:	f47f af06 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 80013e6:	e6b8      	b.n	800115a <__gnu_unwind_execute+0xe>
 80013e8:	f000 020f 	and.w	r2, r0, #15
 80013ec:	3201      	adds	r2, #1
 80013ee:	2303      	movs	r3, #3
 80013f0:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80013f4:	4619      	mov	r1, r3
 80013f6:	4630      	mov	r0, r6
 80013f8:	f7ff fc82 	bl	8000d00 <_Unwind_VRS_Pop>
 80013fc:	2800      	cmp	r0, #0
 80013fe:	f47f aef8 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 8001402:	e6aa      	b.n	800115a <__gnu_unwind_execute+0xe>
 8001404:	4638      	mov	r0, r7
 8001406:	f7ff fe75 	bl	80010f4 <next_unwind_byte>
 800140a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800140e:	f000 030f 	and.w	r3, r0, #15
 8001412:	3210      	adds	r2, #16
 8001414:	3301      	adds	r3, #1
 8001416:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800141a:	e6e3      	b.n	80011e4 <__gnu_unwind_execute+0x98>

0800141c <__gnu_unwind_frame>:
 800141c:	b510      	push	{r4, lr}
 800141e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001420:	b084      	sub	sp, #16
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	2003      	movs	r0, #3
 8001426:	f88d 000c 	strb.w	r0, [sp, #12]
 800142a:	79dc      	ldrb	r4, [r3, #7]
 800142c:	f88d 400d 	strb.w	r4, [sp, #13]
 8001430:	0212      	lsls	r2, r2, #8
 8001432:	3308      	adds	r3, #8
 8001434:	4608      	mov	r0, r1
 8001436:	a901      	add	r1, sp, #4
 8001438:	9201      	str	r2, [sp, #4]
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	f7ff fe86 	bl	800114c <__gnu_unwind_execute>
 8001440:	b004      	add	sp, #16
 8001442:	bd10      	pop	{r4, pc}

08001444 <_Unwind_GetRegionStart>:
 8001444:	b508      	push	{r3, lr}
 8001446:	f7ff fe7f 	bl	8001148 <unwind_UCB_from_context>
 800144a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800144c:	bd08      	pop	{r3, pc}
 800144e:	bf00      	nop

08001450 <_Unwind_GetLanguageSpecificData>:
 8001450:	b508      	push	{r3, lr}
 8001452:	f7ff fe79 	bl	8001148 <unwind_UCB_from_context>
 8001456:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001458:	79c3      	ldrb	r3, [r0, #7]
 800145a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800145e:	3008      	adds	r0, #8
 8001460:	bd08      	pop	{r3, pc}
 8001462:	bf00      	nop

08001464 <_Unwind_GetTextRelBase>:
 8001464:	b508      	push	{r3, lr}
 8001466:	f002 fc8c 	bl	8003d82 <abort>
 800146a:	bf00      	nop

0800146c <_Unwind_GetDataRelBase>:
 800146c:	b508      	push	{r3, lr}
 800146e:	f7ff fff9 	bl	8001464 <_Unwind_GetTextRelBase>
 8001472:	bf00      	nop

08001474 <__aeabi_idiv0>:
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop

08001478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001478:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800147a:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <HAL_InitTick+0x3c>)
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_InitTick+0x40>)
{
 800147e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001480:	7818      	ldrb	r0, [r3, #0]
 8001482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001486:	fbb3 f3f0 	udiv	r3, r3, r0
 800148a:	6810      	ldr	r0, [r2, #0]
 800148c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001490:	f000 f8a8 	bl	80015e4 <HAL_SYSTICK_Config>
 8001494:	4604      	mov	r4, r0
 8001496:	b958      	cbnz	r0, 80014b0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001498:	2d0f      	cmp	r5, #15
 800149a:	d809      	bhi.n	80014b0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149c:	4602      	mov	r2, r0
 800149e:	4629      	mov	r1, r5
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014a4:	f000 f85e 	bl	8001564 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <HAL_InitTick+0x44>)
 80014aa:	4620      	mov	r0, r4
 80014ac:	601d      	str	r5, [r3, #0]
 80014ae:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80014b0:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014b2:	bd38      	pop	{r3, r4, r5, pc}
 80014b4:	2000000c 	.word	0x2000000c
 80014b8:	20000004 	.word	0x20000004
 80014bc:	20000008 	.word	0x20000008

080014c0 <HAL_Init>:
{
 80014c0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_Init+0x30>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014ca:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80014d2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014da:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 f82f 	bl	8001540 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff ffc8 	bl	8001478 <HAL_InitTick>
  HAL_MspInit();
 80014e8:	f001 fe20 	bl	800312c <HAL_MspInit>
}
 80014ec:	2000      	movs	r0, #0
 80014ee:	bd08      	pop	{r3, pc}
 80014f0:	40023c00 	.word	0x40023c00

080014f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80014f4:	4a03      	ldr	r2, [pc, #12]	; (8001504 <HAL_IncTick+0x10>)
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <HAL_IncTick+0x14>)
 80014f8:	6811      	ldr	r1, [r2, #0]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	440b      	add	r3, r1
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000178 	.word	0x20000178
 8001508:	20000004 	.word	0x20000004

0800150c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800150c:	4b01      	ldr	r3, [pc, #4]	; (8001514 <HAL_GetTick+0x8>)
 800150e:	6818      	ldr	r0, [r3, #0]
}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000178 	.word	0x20000178

08001518 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001518:	b538      	push	{r3, r4, r5, lr}
 800151a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800151c:	f7ff fff6 	bl	800150c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001520:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001522:	bf1c      	itt	ne
 8001524:	4b05      	ldrne	r3, [pc, #20]	; (800153c <HAL_Delay+0x24>)
 8001526:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001528:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800152a:	bf18      	it	ne
 800152c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800152e:	f7ff ffed 	bl	800150c <HAL_GetTick>
 8001532:	1b40      	subs	r0, r0, r5
 8001534:	4284      	cmp	r4, r0
 8001536:	d8fa      	bhi.n	800152e <HAL_Delay+0x16>
  {
  }
}
 8001538:	bd38      	pop	{r3, r4, r5, pc}
 800153a:	bf00      	nop
 800153c:	20000004 	.word	0x20000004

08001540 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001540:	4a07      	ldr	r2, [pc, #28]	; (8001560 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001542:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001544:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001548:	041b      	lsls	r3, r3, #16
 800154a:	0c1b      	lsrs	r3, r3, #16
 800154c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001550:	0200      	lsls	r0, r0, #8
 8001552:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001556:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800155a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800155c:	60d3      	str	r3, [r2, #12]
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001564:	4b17      	ldr	r3, [pc, #92]	; (80015c4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001566:	b530      	push	{r4, r5, lr}
 8001568:	68dc      	ldr	r4, [r3, #12]
 800156a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800156e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001572:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001574:	2b04      	cmp	r3, #4
 8001576:	bf28      	it	cs
 8001578:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800157c:	f04f 0501 	mov.w	r5, #1
 8001580:	fa05 f303 	lsl.w	r3, r5, r3
 8001584:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001588:	bf8c      	ite	hi
 800158a:	3c03      	subhi	r4, #3
 800158c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158e:	4019      	ands	r1, r3
 8001590:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001592:	fa05 f404 	lsl.w	r4, r5, r4
 8001596:	3c01      	subs	r4, #1
 8001598:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800159a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	ea42 0201 	orr.w	r2, r2, r1
 80015a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a4:	bfaf      	iteee	ge
 80015a6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015aa:	f000 000f 	andlt.w	r0, r0, #15
 80015ae:	4b06      	ldrlt	r3, [pc, #24]	; (80015c8 <HAL_NVIC_SetPriority+0x64>)
 80015b0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b2:	bfa5      	ittet	ge
 80015b4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80015b8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ba:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80015c0:	bd30      	pop	{r4, r5, pc}
 80015c2:	bf00      	nop
 80015c4:	e000ed00 	.word	0xe000ed00
 80015c8:	e000ed14 	.word	0xe000ed14

080015cc <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80015cc:	0942      	lsrs	r2, r0, #5
 80015ce:	2301      	movs	r3, #1
 80015d0:	f000 001f 	and.w	r0, r0, #31
 80015d4:	fa03 f000 	lsl.w	r0, r3, r0
 80015d8:	4b01      	ldr	r3, [pc, #4]	; (80015e0 <HAL_NVIC_EnableIRQ+0x14>)
 80015da:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80015de:	4770      	bx	lr
 80015e0:	e000e100 	.word	0xe000e100

080015e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e4:	3801      	subs	r0, #1
 80015e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80015ea:	d20a      	bcs.n	8001602 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ec:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ee:	4a07      	ldr	r2, [pc, #28]	; (800160c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f2:	21f0      	movs	r1, #240	; 0xf0
 80015f4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fa:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001602:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	e000e010 	.word	0xe000e010
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001614:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001616:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001618:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80017c8 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800161c:	4a68      	ldr	r2, [pc, #416]	; (80017c0 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800161e:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80017cc <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001622:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001624:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001626:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800162a:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 800162c:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001630:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001634:	45b6      	cmp	lr, r6
 8001636:	f040 80ae 	bne.w	8001796 <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800163a:	684c      	ldr	r4, [r1, #4]
 800163c:	f024 0710 	bic.w	r7, r4, #16
 8001640:	2f02      	cmp	r7, #2
 8001642:	d116      	bne.n	8001672 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001644:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001648:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800164c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001650:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001654:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001658:	f04f 0c0f 	mov.w	ip, #15
 800165c:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001660:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001664:	690d      	ldr	r5, [r1, #16]
 8001666:	fa05 f50b 	lsl.w	r5, r5, fp
 800166a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 800166e:	f8ca 5020 	str.w	r5, [sl, #32]
 8001672:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001676:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001678:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800167c:	fa05 f50a 	lsl.w	r5, r5, sl
 8001680:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001682:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001686:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800168a:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800168e:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001690:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001694:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001696:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800169a:	d811      	bhi.n	80016c0 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 800169c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800169e:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016a2:	68cf      	ldr	r7, [r1, #12]
 80016a4:	fa07 fc0a 	lsl.w	ip, r7, sl
 80016a8:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80016ac:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80016ae:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016b4:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80016b8:	409f      	lsls	r7, r3
 80016ba:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80016be:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80016c0:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016c2:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c4:	688f      	ldr	r7, [r1, #8]
 80016c6:	fa07 f70a 	lsl.w	r7, r7, sl
 80016ca:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80016cc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ce:	00e5      	lsls	r5, r4, #3
 80016d0:	d561      	bpl.n	8001796 <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d2:	f04f 0b00 	mov.w	fp, #0
 80016d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80016da:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016de:	4d39      	ldr	r5, [pc, #228]	; (80017c4 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e0:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80016e4:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80016e8:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80016ec:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80016f0:	9703      	str	r7, [sp, #12]
 80016f2:	9f03      	ldr	r7, [sp, #12]
 80016f4:	f023 0703 	bic.w	r7, r3, #3
 80016f8:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80016fc:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001700:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001704:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001708:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800170c:	f04f 0e0f 	mov.w	lr, #15
 8001710:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001714:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001716:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800171a:	d043      	beq.n	80017a4 <HAL_GPIO_Init+0x194>
 800171c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001720:	42a8      	cmp	r0, r5
 8001722:	d041      	beq.n	80017a8 <HAL_GPIO_Init+0x198>
 8001724:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001728:	42a8      	cmp	r0, r5
 800172a:	d03f      	beq.n	80017ac <HAL_GPIO_Init+0x19c>
 800172c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001730:	42a8      	cmp	r0, r5
 8001732:	d03d      	beq.n	80017b0 <HAL_GPIO_Init+0x1a0>
 8001734:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001738:	42a8      	cmp	r0, r5
 800173a:	d03b      	beq.n	80017b4 <HAL_GPIO_Init+0x1a4>
 800173c:	4548      	cmp	r0, r9
 800173e:	d03b      	beq.n	80017b8 <HAL_GPIO_Init+0x1a8>
 8001740:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001744:	42a8      	cmp	r0, r5
 8001746:	d039      	beq.n	80017bc <HAL_GPIO_Init+0x1ac>
 8001748:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800174c:	42a8      	cmp	r0, r5
 800174e:	bf14      	ite	ne
 8001750:	2508      	movne	r5, #8
 8001752:	2507      	moveq	r5, #7
 8001754:	fa05 f50c 	lsl.w	r5, r5, ip
 8001758:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 800175c:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 800175e:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001760:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001762:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001766:	bf0c      	ite	eq
 8001768:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800176a:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 800176c:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 800176e:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001770:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001774:	bf0c      	ite	eq
 8001776:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001778:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800177a:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800177c:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800177e:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001782:	bf0c      	ite	eq
 8001784:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001786:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001788:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800178a:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800178c:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800178e:	bf54      	ite	pl
 8001790:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001792:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001794:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001796:	3301      	adds	r3, #1
 8001798:	2b10      	cmp	r3, #16
 800179a:	f47f af44 	bne.w	8001626 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 800179e:	b005      	add	sp, #20
 80017a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017a4:	465d      	mov	r5, fp
 80017a6:	e7d5      	b.n	8001754 <HAL_GPIO_Init+0x144>
 80017a8:	2501      	movs	r5, #1
 80017aa:	e7d3      	b.n	8001754 <HAL_GPIO_Init+0x144>
 80017ac:	2502      	movs	r5, #2
 80017ae:	e7d1      	b.n	8001754 <HAL_GPIO_Init+0x144>
 80017b0:	2503      	movs	r5, #3
 80017b2:	e7cf      	b.n	8001754 <HAL_GPIO_Init+0x144>
 80017b4:	2504      	movs	r5, #4
 80017b6:	e7cd      	b.n	8001754 <HAL_GPIO_Init+0x144>
 80017b8:	2505      	movs	r5, #5
 80017ba:	e7cb      	b.n	8001754 <HAL_GPIO_Init+0x144>
 80017bc:	2506      	movs	r5, #6
 80017be:	e7c9      	b.n	8001754 <HAL_GPIO_Init+0x144>
 80017c0:	40013c00 	.word	0x40013c00
 80017c4:	40020000 	.word	0x40020000
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40021400 	.word	0x40021400

080017d0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d0:	b10a      	cbz	r2, 80017d6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017d2:	6181      	str	r1, [r0, #24]
 80017d4:	4770      	bx	lr
 80017d6:	0409      	lsls	r1, r1, #16
 80017d8:	e7fb      	b.n	80017d2 <HAL_GPIO_WritePin+0x2>

080017da <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80017da:	6943      	ldr	r3, [r0, #20]
 80017dc:	4059      	eors	r1, r3
 80017de:	6141      	str	r1, [r0, #20]
 80017e0:	4770      	bx	lr
	...

080017e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017e8:	4604      	mov	r4, r0
 80017ea:	b918      	cbnz	r0, 80017f4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80017ec:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80017ee:	b002      	add	sp, #8
 80017f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f4:	6803      	ldr	r3, [r0, #0]
 80017f6:	07dd      	lsls	r5, r3, #31
 80017f8:	d410      	bmi.n	800181c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	0798      	lsls	r0, r3, #30
 80017fe:	d458      	bmi.n	80018b2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001800:	6823      	ldr	r3, [r4, #0]
 8001802:	071a      	lsls	r2, r3, #28
 8001804:	f100 809a 	bmi.w	800193c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001808:	6823      	ldr	r3, [r4, #0]
 800180a:	075b      	lsls	r3, r3, #29
 800180c:	f100 80b8 	bmi.w	8001980 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001810:	69a2      	ldr	r2, [r4, #24]
 8001812:	2a00      	cmp	r2, #0
 8001814:	f040 8119 	bne.w	8001a4a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001818:	2000      	movs	r0, #0
 800181a:	e7e8      	b.n	80017ee <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800181c:	4ba6      	ldr	r3, [pc, #664]	; (8001ab8 <HAL_RCC_OscConfig+0x2d4>)
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	f002 020c 	and.w	r2, r2, #12
 8001824:	2a04      	cmp	r2, #4
 8001826:	d007      	beq.n	8001838 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800182e:	2a08      	cmp	r2, #8
 8001830:	d10a      	bne.n	8001848 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	0259      	lsls	r1, r3, #9
 8001836:	d507      	bpl.n	8001848 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001838:	4b9f      	ldr	r3, [pc, #636]	; (8001ab8 <HAL_RCC_OscConfig+0x2d4>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	039a      	lsls	r2, r3, #14
 800183e:	d5dc      	bpl.n	80017fa <HAL_RCC_OscConfig+0x16>
 8001840:	6863      	ldr	r3, [r4, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d1d9      	bne.n	80017fa <HAL_RCC_OscConfig+0x16>
 8001846:	e7d1      	b.n	80017ec <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001848:	6863      	ldr	r3, [r4, #4]
 800184a:	4d9b      	ldr	r5, [pc, #620]	; (8001ab8 <HAL_RCC_OscConfig+0x2d4>)
 800184c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001850:	d111      	bne.n	8001876 <HAL_RCC_OscConfig+0x92>
 8001852:	682b      	ldr	r3, [r5, #0]
 8001854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001858:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800185a:	f7ff fe57 	bl	800150c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800185e:	4d96      	ldr	r5, [pc, #600]	; (8001ab8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001860:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001862:	682b      	ldr	r3, [r5, #0]
 8001864:	039b      	lsls	r3, r3, #14
 8001866:	d4c8      	bmi.n	80017fa <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001868:	f7ff fe50 	bl	800150c <HAL_GetTick>
 800186c:	1b80      	subs	r0, r0, r6
 800186e:	2864      	cmp	r0, #100	; 0x64
 8001870:	d9f7      	bls.n	8001862 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001872:	2003      	movs	r0, #3
 8001874:	e7bb      	b.n	80017ee <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001876:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800187a:	d104      	bne.n	8001886 <HAL_RCC_OscConfig+0xa2>
 800187c:	682b      	ldr	r3, [r5, #0]
 800187e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001882:	602b      	str	r3, [r5, #0]
 8001884:	e7e5      	b.n	8001852 <HAL_RCC_OscConfig+0x6e>
 8001886:	682a      	ldr	r2, [r5, #0]
 8001888:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800188c:	602a      	str	r2, [r5, #0]
 800188e:	682a      	ldr	r2, [r5, #0]
 8001890:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001894:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1df      	bne.n	800185a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800189a:	f7ff fe37 	bl	800150c <HAL_GetTick>
 800189e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a0:	682b      	ldr	r3, [r5, #0]
 80018a2:	039f      	lsls	r7, r3, #14
 80018a4:	d5a9      	bpl.n	80017fa <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018a6:	f7ff fe31 	bl	800150c <HAL_GetTick>
 80018aa:	1b80      	subs	r0, r0, r6
 80018ac:	2864      	cmp	r0, #100	; 0x64
 80018ae:	d9f7      	bls.n	80018a0 <HAL_RCC_OscConfig+0xbc>
 80018b0:	e7df      	b.n	8001872 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018b2:	4b81      	ldr	r3, [pc, #516]	; (8001ab8 <HAL_RCC_OscConfig+0x2d4>)
 80018b4:	689a      	ldr	r2, [r3, #8]
 80018b6:	f012 0f0c 	tst.w	r2, #12
 80018ba:	d007      	beq.n	80018cc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018c2:	2a08      	cmp	r2, #8
 80018c4:	d111      	bne.n	80018ea <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	025e      	lsls	r6, r3, #9
 80018ca:	d40e      	bmi.n	80018ea <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018cc:	4b7a      	ldr	r3, [pc, #488]	; (8001ab8 <HAL_RCC_OscConfig+0x2d4>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	0795      	lsls	r5, r2, #30
 80018d2:	d502      	bpl.n	80018da <HAL_RCC_OscConfig+0xf6>
 80018d4:	68e2      	ldr	r2, [r4, #12]
 80018d6:	2a01      	cmp	r2, #1
 80018d8:	d188      	bne.n	80017ec <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	6921      	ldr	r1, [r4, #16]
 80018de:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80018e2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80018e6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e8:	e78a      	b.n	8001800 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018ea:	68e2      	ldr	r2, [r4, #12]
 80018ec:	4b73      	ldr	r3, [pc, #460]	; (8001abc <HAL_RCC_OscConfig+0x2d8>)
 80018ee:	b1b2      	cbz	r2, 800191e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80018f0:	2201      	movs	r2, #1
 80018f2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018f4:	f7ff fe0a 	bl	800150c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f8:	4d6f      	ldr	r5, [pc, #444]	; (8001ab8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80018fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018fc:	682b      	ldr	r3, [r5, #0]
 80018fe:	0798      	lsls	r0, r3, #30
 8001900:	d507      	bpl.n	8001912 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001902:	682b      	ldr	r3, [r5, #0]
 8001904:	6922      	ldr	r2, [r4, #16]
 8001906:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800190a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800190e:	602b      	str	r3, [r5, #0]
 8001910:	e776      	b.n	8001800 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001912:	f7ff fdfb 	bl	800150c <HAL_GetTick>
 8001916:	1b80      	subs	r0, r0, r6
 8001918:	2802      	cmp	r0, #2
 800191a:	d9ef      	bls.n	80018fc <HAL_RCC_OscConfig+0x118>
 800191c:	e7a9      	b.n	8001872 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800191e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001920:	f7ff fdf4 	bl	800150c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001924:	4d64      	ldr	r5, [pc, #400]	; (8001ab8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001926:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001928:	682b      	ldr	r3, [r5, #0]
 800192a:	0799      	lsls	r1, r3, #30
 800192c:	f57f af68 	bpl.w	8001800 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001930:	f7ff fdec 	bl	800150c <HAL_GetTick>
 8001934:	1b80      	subs	r0, r0, r6
 8001936:	2802      	cmp	r0, #2
 8001938:	d9f6      	bls.n	8001928 <HAL_RCC_OscConfig+0x144>
 800193a:	e79a      	b.n	8001872 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800193c:	6962      	ldr	r2, [r4, #20]
 800193e:	4b60      	ldr	r3, [pc, #384]	; (8001ac0 <HAL_RCC_OscConfig+0x2dc>)
 8001940:	b17a      	cbz	r2, 8001962 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001942:	2201      	movs	r2, #1
 8001944:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001946:	f7ff fde1 	bl	800150c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194a:	4d5b      	ldr	r5, [pc, #364]	; (8001ab8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800194c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001950:	079f      	lsls	r7, r3, #30
 8001952:	f53f af59 	bmi.w	8001808 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001956:	f7ff fdd9 	bl	800150c <HAL_GetTick>
 800195a:	1b80      	subs	r0, r0, r6
 800195c:	2802      	cmp	r0, #2
 800195e:	d9f6      	bls.n	800194e <HAL_RCC_OscConfig+0x16a>
 8001960:	e787      	b.n	8001872 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001962:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001964:	f7ff fdd2 	bl	800150c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001968:	4d53      	ldr	r5, [pc, #332]	; (8001ab8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800196a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800196c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800196e:	0798      	lsls	r0, r3, #30
 8001970:	f57f af4a 	bpl.w	8001808 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001974:	f7ff fdca 	bl	800150c <HAL_GetTick>
 8001978:	1b80      	subs	r0, r0, r6
 800197a:	2802      	cmp	r0, #2
 800197c:	d9f6      	bls.n	800196c <HAL_RCC_OscConfig+0x188>
 800197e:	e778      	b.n	8001872 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001980:	4b4d      	ldr	r3, [pc, #308]	; (8001ab8 <HAL_RCC_OscConfig+0x2d4>)
 8001982:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001984:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001988:	d128      	bne.n	80019dc <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800198a:	9201      	str	r2, [sp, #4]
 800198c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800198e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001992:	641a      	str	r2, [r3, #64]	; 0x40
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800199e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a0:	4d48      	ldr	r5, [pc, #288]	; (8001ac4 <HAL_RCC_OscConfig+0x2e0>)
 80019a2:	682b      	ldr	r3, [r5, #0]
 80019a4:	05d9      	lsls	r1, r3, #23
 80019a6:	d51b      	bpl.n	80019e0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019a8:	68a3      	ldr	r3, [r4, #8]
 80019aa:	4d43      	ldr	r5, [pc, #268]	; (8001ab8 <HAL_RCC_OscConfig+0x2d4>)
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d127      	bne.n	8001a00 <HAL_RCC_OscConfig+0x21c>
 80019b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019b2:	f043 0301 	orr.w	r3, r3, #1
 80019b6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80019b8:	f7ff fda8 	bl	800150c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019bc:	4d3e      	ldr	r5, [pc, #248]	; (8001ab8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80019be:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019c4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019c6:	079b      	lsls	r3, r3, #30
 80019c8:	d539      	bpl.n	8001a3e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80019ca:	2e00      	cmp	r6, #0
 80019cc:	f43f af20 	beq.w	8001810 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d0:	4a39      	ldr	r2, [pc, #228]	; (8001ab8 <HAL_RCC_OscConfig+0x2d4>)
 80019d2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80019d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019d8:	6413      	str	r3, [r2, #64]	; 0x40
 80019da:	e719      	b.n	8001810 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80019dc:	2600      	movs	r6, #0
 80019de:	e7df      	b.n	80019a0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019e0:	682b      	ldr	r3, [r5, #0]
 80019e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80019e8:	f7ff fd90 	bl	800150c <HAL_GetTick>
 80019ec:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ee:	682b      	ldr	r3, [r5, #0]
 80019f0:	05da      	lsls	r2, r3, #23
 80019f2:	d4d9      	bmi.n	80019a8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019f4:	f7ff fd8a 	bl	800150c <HAL_GetTick>
 80019f8:	1bc0      	subs	r0, r0, r7
 80019fa:	2802      	cmp	r0, #2
 80019fc:	d9f7      	bls.n	80019ee <HAL_RCC_OscConfig+0x20a>
 80019fe:	e738      	b.n	8001872 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a00:	2b05      	cmp	r3, #5
 8001a02:	d104      	bne.n	8001a0e <HAL_RCC_OscConfig+0x22a>
 8001a04:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a06:	f043 0304 	orr.w	r3, r3, #4
 8001a0a:	672b      	str	r3, [r5, #112]	; 0x70
 8001a0c:	e7d0      	b.n	80019b0 <HAL_RCC_OscConfig+0x1cc>
 8001a0e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001a10:	f022 0201 	bic.w	r2, r2, #1
 8001a14:	672a      	str	r2, [r5, #112]	; 0x70
 8001a16:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001a18:	f022 0204 	bic.w	r2, r2, #4
 8001a1c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d1ca      	bne.n	80019b8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001a22:	f7ff fd73 	bl	800150c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a26:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a2a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a2c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a2e:	0798      	lsls	r0, r3, #30
 8001a30:	d5cb      	bpl.n	80019ca <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a32:	f7ff fd6b 	bl	800150c <HAL_GetTick>
 8001a36:	1bc0      	subs	r0, r0, r7
 8001a38:	4540      	cmp	r0, r8
 8001a3a:	d9f7      	bls.n	8001a2c <HAL_RCC_OscConfig+0x248>
 8001a3c:	e719      	b.n	8001872 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7ff fd65 	bl	800150c <HAL_GetTick>
 8001a42:	1bc0      	subs	r0, r0, r7
 8001a44:	4540      	cmp	r0, r8
 8001a46:	d9bd      	bls.n	80019c4 <HAL_RCC_OscConfig+0x1e0>
 8001a48:	e713      	b.n	8001872 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a4a:	4d1b      	ldr	r5, [pc, #108]	; (8001ab8 <HAL_RCC_OscConfig+0x2d4>)
 8001a4c:	68ab      	ldr	r3, [r5, #8]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	f43f aeca 	beq.w	80017ec <HAL_RCC_OscConfig+0x8>
 8001a58:	4e1b      	ldr	r6, [pc, #108]	; (8001ac8 <HAL_RCC_OscConfig+0x2e4>)
 8001a5a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a5c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001a5e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a60:	d134      	bne.n	8001acc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001a62:	f7ff fd53 	bl	800150c <HAL_GetTick>
 8001a66:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a68:	682b      	ldr	r3, [r5, #0]
 8001a6a:	0199      	lsls	r1, r3, #6
 8001a6c:	d41e      	bmi.n	8001aac <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a6e:	6a22      	ldr	r2, [r4, #32]
 8001a70:	69e3      	ldr	r3, [r4, #28]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a76:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001a7a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a7c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a80:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a82:	4c0d      	ldr	r4, [pc, #52]	; (8001ab8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a84:	0852      	lsrs	r2, r2, #1
 8001a86:	3a01      	subs	r2, #1
 8001a88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001a8c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001a8e:	2301      	movs	r3, #1
 8001a90:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001a92:	f7ff fd3b 	bl	800150c <HAL_GetTick>
 8001a96:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a98:	6823      	ldr	r3, [r4, #0]
 8001a9a:	019a      	lsls	r2, r3, #6
 8001a9c:	f53f aebc 	bmi.w	8001818 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7ff fd34 	bl	800150c <HAL_GetTick>
 8001aa4:	1b40      	subs	r0, r0, r5
 8001aa6:	2802      	cmp	r0, #2
 8001aa8:	d9f6      	bls.n	8001a98 <HAL_RCC_OscConfig+0x2b4>
 8001aaa:	e6e2      	b.n	8001872 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aac:	f7ff fd2e 	bl	800150c <HAL_GetTick>
 8001ab0:	1bc0      	subs	r0, r0, r7
 8001ab2:	2802      	cmp	r0, #2
 8001ab4:	d9d8      	bls.n	8001a68 <HAL_RCC_OscConfig+0x284>
 8001ab6:	e6dc      	b.n	8001872 <HAL_RCC_OscConfig+0x8e>
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	42470000 	.word	0x42470000
 8001ac0:	42470e80 	.word	0x42470e80
 8001ac4:	40007000 	.word	0x40007000
 8001ac8:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001acc:	f7ff fd1e 	bl	800150c <HAL_GetTick>
 8001ad0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad2:	682b      	ldr	r3, [r5, #0]
 8001ad4:	019b      	lsls	r3, r3, #6
 8001ad6:	f57f ae9f 	bpl.w	8001818 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ada:	f7ff fd17 	bl	800150c <HAL_GetTick>
 8001ade:	1b00      	subs	r0, r0, r4
 8001ae0:	2802      	cmp	r0, #2
 8001ae2:	d9f6      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x2ee>
 8001ae4:	e6c5      	b.n	8001872 <HAL_RCC_OscConfig+0x8e>
 8001ae6:	bf00      	nop

08001ae8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ae8:	4913      	ldr	r1, [pc, #76]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001aea:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001aec:	688b      	ldr	r3, [r1, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d003      	beq.n	8001afe <HAL_RCC_GetSysClockFreq+0x16>
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d003      	beq.n	8001b02 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001afa:	4810      	ldr	r0, [pc, #64]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001afc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001afe:	4810      	ldr	r0, [pc, #64]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x58>)
 8001b00:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b02:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b04:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b06:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b08:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b0c:	bf14      	ite	ne
 8001b0e:	480c      	ldrne	r0, [pc, #48]	; (8001b40 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b10:	480a      	ldreq	r0, [pc, #40]	; (8001b3c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b12:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001b16:	bf18      	it	ne
 8001b18:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b1a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b1e:	fba1 0100 	umull	r0, r1, r1, r0
 8001b22:	f7fe fba5 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b26:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <HAL_RCC_GetSysClockFreq+0x50>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001b2e:	3301      	adds	r3, #1
 8001b30:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001b32:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b36:	bd08      	pop	{r3, pc}
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	00f42400 	.word	0x00f42400
 8001b40:	017d7840 	.word	0x017d7840

08001b44 <HAL_RCC_ClockConfig>:
{
 8001b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b48:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	b910      	cbnz	r0, 8001b54 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001b4e:	2001      	movs	r0, #1
 8001b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b54:	4b44      	ldr	r3, [pc, #272]	; (8001c68 <HAL_RCC_ClockConfig+0x124>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	f002 020f 	and.w	r2, r2, #15
 8001b5c:	428a      	cmp	r2, r1
 8001b5e:	d328      	bcc.n	8001bb2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b60:	6821      	ldr	r1, [r4, #0]
 8001b62:	078f      	lsls	r7, r1, #30
 8001b64:	d42d      	bmi.n	8001bc2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b66:	07c8      	lsls	r0, r1, #31
 8001b68:	d440      	bmi.n	8001bec <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b6a:	4b3f      	ldr	r3, [pc, #252]	; (8001c68 <HAL_RCC_ClockConfig+0x124>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	f002 020f 	and.w	r2, r2, #15
 8001b72:	4295      	cmp	r5, r2
 8001b74:	d366      	bcc.n	8001c44 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b76:	6822      	ldr	r2, [r4, #0]
 8001b78:	0751      	lsls	r1, r2, #29
 8001b7a:	d46c      	bmi.n	8001c56 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7c:	0713      	lsls	r3, r2, #28
 8001b7e:	d507      	bpl.n	8001b90 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b80:	4a3a      	ldr	r2, [pc, #232]	; (8001c6c <HAL_RCC_ClockConfig+0x128>)
 8001b82:	6921      	ldr	r1, [r4, #16]
 8001b84:	6893      	ldr	r3, [r2, #8]
 8001b86:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001b8a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b8e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b90:	f7ff ffaa 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8001b94:	4b35      	ldr	r3, [pc, #212]	; (8001c6c <HAL_RCC_ClockConfig+0x128>)
 8001b96:	4a36      	ldr	r2, [pc, #216]	; (8001c70 <HAL_RCC_ClockConfig+0x12c>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b9e:	5cd3      	ldrb	r3, [r2, r3]
 8001ba0:	40d8      	lsrs	r0, r3
 8001ba2:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <HAL_RCC_ClockConfig+0x130>)
 8001ba4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	f7ff fc66 	bl	8001478 <HAL_InitTick>
  return HAL_OK;
 8001bac:	2000      	movs	r0, #0
 8001bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb2:	b2ca      	uxtb	r2, r1
 8001bb4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 030f 	and.w	r3, r3, #15
 8001bbc:	4299      	cmp	r1, r3
 8001bbe:	d1c6      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xa>
 8001bc0:	e7ce      	b.n	8001b60 <HAL_RCC_ClockConfig+0x1c>
 8001bc2:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc8:	bf1e      	ittt	ne
 8001bca:	689a      	ldrne	r2, [r3, #8]
 8001bcc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001bd0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bd4:	bf42      	ittt	mi
 8001bd6:	689a      	ldrmi	r2, [r3, #8]
 8001bd8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001bdc:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	68a0      	ldr	r0, [r4, #8]
 8001be2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001be6:	4302      	orrs	r2, r0
 8001be8:	609a      	str	r2, [r3, #8]
 8001bea:	e7bc      	b.n	8001b66 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bec:	6862      	ldr	r2, [r4, #4]
 8001bee:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <HAL_RCC_ClockConfig+0x128>)
 8001bf0:	2a01      	cmp	r2, #1
 8001bf2:	d11d      	bne.n	8001c30 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfa:	d0a8      	beq.n	8001b4e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bfc:	4e1b      	ldr	r6, [pc, #108]	; (8001c6c <HAL_RCC_ClockConfig+0x128>)
 8001bfe:	68b3      	ldr	r3, [r6, #8]
 8001c00:	f023 0303 	bic.w	r3, r3, #3
 8001c04:	4313      	orrs	r3, r2
 8001c06:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001c08:	f7ff fc80 	bl	800150c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001c10:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c12:	68b3      	ldr	r3, [r6, #8]
 8001c14:	6862      	ldr	r2, [r4, #4]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c1e:	d0a4      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c20:	f7ff fc74 	bl	800150c <HAL_GetTick>
 8001c24:	1bc0      	subs	r0, r0, r7
 8001c26:	4540      	cmp	r0, r8
 8001c28:	d9f3      	bls.n	8001c12 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001c2a:	2003      	movs	r0, #3
}
 8001c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c30:	1e91      	subs	r1, r2, #2
 8001c32:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c34:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c36:	d802      	bhi.n	8001c3e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c38:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c3c:	e7dd      	b.n	8001bfa <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c3e:	f013 0f02 	tst.w	r3, #2
 8001c42:	e7da      	b.n	8001bfa <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c44:	b2ea      	uxtb	r2, r5
 8001c46:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	429d      	cmp	r5, r3
 8001c50:	f47f af7d 	bne.w	8001b4e <HAL_RCC_ClockConfig+0xa>
 8001c54:	e78f      	b.n	8001b76 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c56:	4905      	ldr	r1, [pc, #20]	; (8001c6c <HAL_RCC_ClockConfig+0x128>)
 8001c58:	68e0      	ldr	r0, [r4, #12]
 8001c5a:	688b      	ldr	r3, [r1, #8]
 8001c5c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001c60:	4303      	orrs	r3, r0
 8001c62:	608b      	str	r3, [r1, #8]
 8001c64:	e78a      	b.n	8001b7c <HAL_RCC_ClockConfig+0x38>
 8001c66:	bf00      	nop
 8001c68:	40023c00 	.word	0x40023c00
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	08003e78 	.word	0x08003e78
 8001c74:	2000000c 	.word	0x2000000c

08001c78 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001c7a:	4a05      	ldr	r2, [pc, #20]	; (8001c90 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001c82:	5cd3      	ldrb	r3, [r2, r3]
 8001c84:	4a03      	ldr	r2, [pc, #12]	; (8001c94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001c86:	6810      	ldr	r0, [r2, #0]
}
 8001c88:	40d8      	lsrs	r0, r3
 8001c8a:	4770      	bx	lr
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	08003e88 	.word	0x08003e88
 8001c94:	2000000c 	.word	0x2000000c

08001c98 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <HAL_RCC_GetPCLK2Freq+0x14>)
 8001c9a:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001ca2:	5cd3      	ldrb	r3, [r2, r3]
 8001ca4:	4a03      	ldr	r2, [pc, #12]	; (8001cb4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001ca6:	6810      	ldr	r0, [r2, #0]
}
 8001ca8:	40d8      	lsrs	r0, r3
 8001caa:	4770      	bx	lr
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	08003e88 	.word	0x08003e88
 8001cb4:	2000000c 	.word	0x2000000c

08001cb8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cb8:	6a03      	ldr	r3, [r0, #32]
 8001cba:	f023 0301 	bic.w	r3, r3, #1
 8001cbe:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cc0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001cc2:	6842      	ldr	r2, [r0, #4]
{
 8001cc4:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001cc6:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001cc8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001cca:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001cce:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001cd0:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001cd2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001cd6:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001cd8:	4c0c      	ldr	r4, [pc, #48]	; (8001d0c <TIM_OC1_SetConfig+0x54>)
 8001cda:	42a0      	cmp	r0, r4
 8001cdc:	d009      	beq.n	8001cf2 <TIM_OC1_SetConfig+0x3a>
 8001cde:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001ce2:	42a0      	cmp	r0, r4
 8001ce4:	d005      	beq.n	8001cf2 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001ce6:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001ce8:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001cea:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001cec:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001cee:	6203      	str	r3, [r0, #32]
} 
 8001cf0:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8001cf2:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cf4:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001cf6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001cfa:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cfc:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001cfe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d02:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d04:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001d08:	4322      	orrs	r2, r4
 8001d0a:	e7ec      	b.n	8001ce6 <TIM_OC1_SetConfig+0x2e>
 8001d0c:	40010000 	.word	0x40010000

08001d10 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001d10:	6a03      	ldr	r3, [r0, #32]
 8001d12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d16:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d18:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001d1a:	6842      	ldr	r2, [r0, #4]
{
 8001d1c:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d1e:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d20:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001d22:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001d26:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001d28:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001d2a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001d2e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001d32:	4c0e      	ldr	r4, [pc, #56]	; (8001d6c <TIM_OC3_SetConfig+0x5c>)
 8001d34:	42a0      	cmp	r0, r4
 8001d36:	d009      	beq.n	8001d4c <TIM_OC3_SetConfig+0x3c>
 8001d38:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001d3c:	42a0      	cmp	r0, r4
 8001d3e:	d005      	beq.n	8001d4c <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d40:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001d42:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001d44:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001d46:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d48:	6203      	str	r3, [r0, #32]
}
 8001d4a:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d4c:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d4e:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001d50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d54:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001d58:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001d5a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d5e:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001d60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d64:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8001d68:	e7ea      	b.n	8001d40 <TIM_OC3_SetConfig+0x30>
 8001d6a:	bf00      	nop
 8001d6c:	40010000 	.word	0x40010000

08001d70 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001d70:	6a03      	ldr	r3, [r0, #32]
 8001d72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d76:	6203      	str	r3, [r0, #32]
{
 8001d78:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d7a:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001d7c:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d7e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d80:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001d82:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d86:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001d8a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001d8c:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001d90:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001d94:	4d09      	ldr	r5, [pc, #36]	; (8001dbc <TIM_OC4_SetConfig+0x4c>)
 8001d96:	42a8      	cmp	r0, r5
 8001d98:	d009      	beq.n	8001dae <TIM_OC4_SetConfig+0x3e>
 8001d9a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d9e:	42a8      	cmp	r0, r5
 8001da0:	d005      	beq.n	8001dae <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001da2:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001da4:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001da6:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001da8:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001daa:	6204      	str	r4, [r0, #32]
}
 8001dac:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001dae:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001db0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001db4:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001db8:	e7f3      	b.n	8001da2 <TIM_OC4_SetConfig+0x32>
 8001dba:	bf00      	nop
 8001dbc:	40010000 	.word	0x40010000

08001dc0 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

 /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001dc0:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001dc2:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001dc4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001dc6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
{
 8001dca:	b530      	push	{r4, r5, lr}
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001dcc:	4302      	orrs	r2, r0

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001dce:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001dd0:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001dd4:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
  
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001dd6:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8001dd8:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 8001dda:	d021      	beq.n	8001e20 <TIM_SlaveTimer_SetConfig+0x60>
 8001ddc:	d802      	bhi.n	8001de4 <TIM_SlaveTimer_SetConfig+0x24>
 8001dde:	2840      	cmp	r0, #64	; 0x40
 8001de0:	d010      	beq.n	8001e04 <TIM_SlaveTimer_SetConfig+0x44>
 8001de2:	bd30      	pop	{r4, r5, pc}
 8001de4:	2860      	cmp	r0, #96	; 0x60
 8001de6:	d02d      	beq.n	8001e44 <TIM_SlaveTimer_SetConfig+0x84>
 8001de8:	2870      	cmp	r0, #112	; 0x70
 8001dea:	d13d      	bne.n	8001e68 <TIM_SlaveTimer_SetConfig+0xa8>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001dec:	68ca      	ldr	r2, [r1, #12]
 8001dee:	688c      	ldr	r4, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8001df0:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001df2:	6909      	ldr	r1, [r1, #16]
 8001df4:	4322      	orrs	r2, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001df6:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001dfa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001dfe:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	bd30      	pop	{r4, r5, pc}
      tmpccer = htim->Instance->CCER;
 8001e04:	6a18      	ldr	r0, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001e06:	6a1a      	ldr	r2, [r3, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001e08:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001e0a:	f022 0201 	bic.w	r2, r2, #1
 8001e0e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 8001e10:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e12:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001e16:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8001e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;                               
 8001e1c:	6218      	str	r0, [r3, #32]
    break;
 8001e1e:	bd30      	pop	{r4, r5, pc}
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e20:	6888      	ldr	r0, [r1, #8]
 8001e22:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8001e24:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e26:	6a1c      	ldr	r4, [r3, #32]
 8001e28:	f024 0401 	bic.w	r4, r4, #1
 8001e2c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001e2e:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e30:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e34:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e38:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001e3c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8001e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e40:	6219      	str	r1, [r3, #32]
 8001e42:	bd30      	pop	{r4, r5, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e44:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e46:	688c      	ldr	r4, [r1, #8]
 8001e48:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e4a:	f020 0010 	bic.w	r0, r0, #16
 8001e4e:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e50:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001e52:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e54:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e58:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e5c:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e60:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8001e64:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e66:	621a      	str	r2, [r3, #32]
 8001e68:	bd30      	pop	{r4, r5, pc}

08001e6a <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e6a:	6803      	ldr	r3, [r0, #0]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	f042 0201 	orr.w	r2, r2, #1
 8001e72:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	f042 0201 	orr.w	r2, r2, #1
 8001e7a:	601a      	str	r2, [r3, #0]
}
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	4770      	bx	lr

08001e80 <HAL_TIM_OC_MspInit>:
 8001e80:	4770      	bx	lr

08001e82 <HAL_TIM_IC_MspInit>:
 8001e82:	4770      	bx	lr

08001e84 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001e84:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001e88:	2b01      	cmp	r3, #1
{
 8001e8a:	b570      	push	{r4, r5, r6, lr}
 8001e8c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001e90:	d01c      	beq.n	8001ecc <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e92:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8001e96:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8001e9e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ea0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001ea4:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001ea8:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001eaa:	680a      	ldr	r2, [r1, #0]
 8001eac:	2a40      	cmp	r2, #64	; 0x40
 8001eae:	d079      	beq.n	8001fa4 <HAL_TIM_ConfigClockSource+0x120>
 8001eb0:	d819      	bhi.n	8001ee6 <HAL_TIM_ConfigClockSource+0x62>
 8001eb2:	2a10      	cmp	r2, #16
 8001eb4:	f000 8093 	beq.w	8001fde <HAL_TIM_ConfigClockSource+0x15a>
 8001eb8:	d80a      	bhi.n	8001ed0 <HAL_TIM_ConfigClockSource+0x4c>
 8001eba:	2a00      	cmp	r2, #0
 8001ebc:	f000 8089 	beq.w	8001fd2 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001ecc:	4618      	mov	r0, r3
}
 8001ece:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001ed0:	2a20      	cmp	r2, #32
 8001ed2:	f000 808a 	beq.w	8001fea <HAL_TIM_ConfigClockSource+0x166>
 8001ed6:	2a30      	cmp	r2, #48	; 0x30
 8001ed8:	d1f2      	bne.n	8001ec0 <HAL_TIM_ConfigClockSource+0x3c>
   tmpsmcr = TIMx->SMCR;
 8001eda:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001edc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001ee0:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001ee4:	e036      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001ee6:	2a70      	cmp	r2, #112	; 0x70
 8001ee8:	d036      	beq.n	8001f58 <HAL_TIM_ConfigClockSource+0xd4>
 8001eea:	d81b      	bhi.n	8001f24 <HAL_TIM_ConfigClockSource+0xa0>
 8001eec:	2a50      	cmp	r2, #80	; 0x50
 8001eee:	d042      	beq.n	8001f76 <HAL_TIM_ConfigClockSource+0xf2>
 8001ef0:	2a60      	cmp	r2, #96	; 0x60
 8001ef2:	d1e5      	bne.n	8001ec0 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ef4:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001ef6:	684d      	ldr	r5, [r1, #4]
 8001ef8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001efa:	f024 0410 	bic.w	r4, r4, #16
 8001efe:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f00:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001f02:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f04:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f0c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f10:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001f14:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f16:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001f18:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f1a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001f1e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001f22:	e017      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001f24:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001f28:	d011      	beq.n	8001f4e <HAL_TIM_ConfigClockSource+0xca>
 8001f2a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001f2e:	d1c7      	bne.n	8001ec0 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001f30:	688a      	ldr	r2, [r1, #8]
 8001f32:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001f34:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001f36:	68c9      	ldr	r1, [r1, #12]
 8001f38:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f3a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001f3e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f42:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001f44:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f4c:	e002      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	e7b3      	b.n	8001ec0 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001f58:	688a      	ldr	r2, [r1, #8]
 8001f5a:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001f5c:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001f5e:	68c9      	ldr	r1, [r1, #12]
 8001f60:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f62:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001f66:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f6a:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001f6c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001f6e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f70:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001f74:	e7ee      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001f76:	684c      	ldr	r4, [r1, #4]
 8001f78:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001f7a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f7c:	6a1d      	ldr	r5, [r3, #32]
 8001f7e:	f025 0501 	bic.w	r5, r5, #1
 8001f82:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001f84:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f86:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f8a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f8e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001f92:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001f94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f96:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001f98:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f9a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001f9e:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001fa2:	e7d7      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001fa4:	684c      	ldr	r4, [r1, #4]
 8001fa6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001fa8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001faa:	6a1d      	ldr	r5, [r3, #32]
 8001fac:	f025 0501 	bic.w	r5, r5, #1
 8001fb0:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001fb2:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fb4:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fb8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fbc:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001fc0:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fc4:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001fc6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fc8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001fcc:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001fd0:	e7c0      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001fd2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fd4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001fd8:	f042 0207 	orr.w	r2, r2, #7
 8001fdc:	e7ba      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001fde:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fe0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001fe4:	f042 0217 	orr.w	r2, r2, #23
 8001fe8:	e7b4      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001fea:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001ff0:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001ff4:	e7ae      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0xd0>

08001ff6 <HAL_TIM_SlaveConfigSynchronization_IT>:
{
 8001ff6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001ff8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001ffc:	2b01      	cmp	r3, #1
{
 8001ffe:	4604      	mov	r4, r0
 8002000:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002004:	d015      	beq.n	8002032 <HAL_TIM_SlaveConfigSynchronization_IT+0x3c>
 8002006:	2501      	movs	r5, #1
 8002008:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800200c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8002010:	f7ff fed6 	bl	8001dc0 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_TRIGGER);
 8002014:	6823      	ldr	r3, [r4, #0]
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800201c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800201e:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);  
 8002020:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002022:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002026:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8002028:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);  
 800202c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8002030:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002032:	4618      	mov	r0, r3
}
 8002034:	bd38      	pop	{r3, r4, r5, pc}

08002036 <HAL_TIM_OC_DelayElapsedCallback>:
 8002036:	4770      	bx	lr

08002038 <HAL_TIM_TriggerCallback>:
 8002038:	4770      	bx	lr

0800203a <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800203a:	6803      	ldr	r3, [r0, #0]
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	0791      	lsls	r1, r2, #30
{
 8002040:	b510      	push	{r4, lr}
 8002042:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002044:	d50e      	bpl.n	8002064 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	0792      	lsls	r2, r2, #30
 800204a:	d50b      	bpl.n	8002064 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800204c:	f06f 0202 	mvn.w	r2, #2
 8002050:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002052:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002054:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002056:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002058:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800205a:	d077      	beq.n	800214c <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800205c:	f000 fd4e 	bl	8002afc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002060:	2300      	movs	r3, #0
 8002062:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002064:	6823      	ldr	r3, [r4, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	0750      	lsls	r0, r2, #29
 800206a:	d510      	bpl.n	800208e <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	0751      	lsls	r1, r2, #29
 8002070:	d50d      	bpl.n	800208e <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002072:	f06f 0204 	mvn.w	r2, #4
 8002076:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002078:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800207a:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800207c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002080:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002082:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002084:	d068      	beq.n	8002158 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002086:	f000 fd39 	bl	8002afc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800208a:	2300      	movs	r3, #0
 800208c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	691a      	ldr	r2, [r3, #16]
 8002092:	0712      	lsls	r2, r2, #28
 8002094:	d50f      	bpl.n	80020b6 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	0710      	lsls	r0, r2, #28
 800209a:	d50c      	bpl.n	80020b6 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800209c:	f06f 0208 	mvn.w	r2, #8
 80020a0:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020a2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020a4:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020a6:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020a8:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80020aa:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020ac:	d05a      	beq.n	8002164 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80020ae:	f000 fd25 	bl	8002afc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b2:	2300      	movs	r3, #0
 80020b4:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020b6:	6823      	ldr	r3, [r4, #0]
 80020b8:	691a      	ldr	r2, [r3, #16]
 80020ba:	06d2      	lsls	r2, r2, #27
 80020bc:	d510      	bpl.n	80020e0 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	06d0      	lsls	r0, r2, #27
 80020c2:	d50d      	bpl.n	80020e0 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020c4:	f06f 0210 	mvn.w	r2, #16
 80020c8:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020ca:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020cc:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020ce:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020d2:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80020d4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020d6:	d04b      	beq.n	8002170 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80020d8:	f000 fd10 	bl	8002afc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020dc:	2300      	movs	r3, #0
 80020de:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020e0:	6823      	ldr	r3, [r4, #0]
 80020e2:	691a      	ldr	r2, [r3, #16]
 80020e4:	07d1      	lsls	r1, r2, #31
 80020e6:	d508      	bpl.n	80020fa <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	07d2      	lsls	r2, r2, #31
 80020ec:	d505      	bpl.n	80020fa <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020ee:	f06f 0201 	mvn.w	r2, #1
 80020f2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80020f4:	4620      	mov	r0, r4
 80020f6:	f000 fd3d 	bl	8002b74 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	0610      	lsls	r0, r2, #24
 8002100:	d508      	bpl.n	8002114 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002102:	68da      	ldr	r2, [r3, #12]
 8002104:	0611      	lsls	r1, r2, #24
 8002106:	d505      	bpl.n	8002114 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002108:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800210c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800210e:	4620      	mov	r0, r4
 8002110:	f000 fb25 	bl	800275e <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	0652      	lsls	r2, r2, #25
 800211a:	d508      	bpl.n	800212e <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	0650      	lsls	r0, r2, #25
 8002120:	d505      	bpl.n	800212e <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002122:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002126:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002128:	4620      	mov	r0, r4
 800212a:	f7ff ff85 	bl	8002038 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800212e:	6823      	ldr	r3, [r4, #0]
 8002130:	691a      	ldr	r2, [r3, #16]
 8002132:	0691      	lsls	r1, r2, #26
 8002134:	d522      	bpl.n	800217c <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	0692      	lsls	r2, r2, #26
 800213a:	d51f      	bpl.n	800217c <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800213c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002140:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002142:	611a      	str	r2, [r3, #16]
}
 8002144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002148:	f000 bb08 	b.w	800275c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800214c:	f7ff ff73 	bl	8002036 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002150:	4620      	mov	r0, r4
 8002152:	f000 fd29 	bl	8002ba8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002156:	e783      	b.n	8002060 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002158:	f7ff ff6d 	bl	8002036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800215c:	4620      	mov	r0, r4
 800215e:	f000 fd23 	bl	8002ba8 <HAL_TIM_PWM_PulseFinishedCallback>
 8002162:	e792      	b.n	800208a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002164:	f7ff ff67 	bl	8002036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002168:	4620      	mov	r0, r4
 800216a:	f000 fd1d 	bl	8002ba8 <HAL_TIM_PWM_PulseFinishedCallback>
 800216e:	e7a0      	b.n	80020b2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002170:	f7ff ff61 	bl	8002036 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002174:	4620      	mov	r0, r4
 8002176:	f000 fd17 	bl	8002ba8 <HAL_TIM_PWM_PulseFinishedCallback>
 800217a:	e7af      	b.n	80020dc <HAL_TIM_IRQHandler+0xa2>
 800217c:	bd10      	pop	{r4, pc}
	...

08002180 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002180:	4a2e      	ldr	r2, [pc, #184]	; (800223c <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8002182:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002184:	4290      	cmp	r0, r2
 8002186:	d012      	beq.n	80021ae <TIM_Base_SetConfig+0x2e>
 8002188:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800218c:	d00f      	beq.n	80021ae <TIM_Base_SetConfig+0x2e>
 800218e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002192:	4290      	cmp	r0, r2
 8002194:	d00b      	beq.n	80021ae <TIM_Base_SetConfig+0x2e>
 8002196:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800219a:	4290      	cmp	r0, r2
 800219c:	d007      	beq.n	80021ae <TIM_Base_SetConfig+0x2e>
 800219e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021a2:	4290      	cmp	r0, r2
 80021a4:	d003      	beq.n	80021ae <TIM_Base_SetConfig+0x2e>
 80021a6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80021aa:	4290      	cmp	r0, r2
 80021ac:	d11d      	bne.n	80021ea <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80021ae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80021b4:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80021b6:	4a21      	ldr	r2, [pc, #132]	; (800223c <TIM_Base_SetConfig+0xbc>)
 80021b8:	4290      	cmp	r0, r2
 80021ba:	d104      	bne.n	80021c6 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021bc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80021be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021c2:	4313      	orrs	r3, r2
 80021c4:	e028      	b.n	8002218 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80021c6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80021ca:	d0f7      	beq.n	80021bc <TIM_Base_SetConfig+0x3c>
 80021cc:	4a1c      	ldr	r2, [pc, #112]	; (8002240 <TIM_Base_SetConfig+0xc0>)
 80021ce:	4290      	cmp	r0, r2
 80021d0:	d0f4      	beq.n	80021bc <TIM_Base_SetConfig+0x3c>
 80021d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021d6:	4290      	cmp	r0, r2
 80021d8:	d0f0      	beq.n	80021bc <TIM_Base_SetConfig+0x3c>
 80021da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021de:	4290      	cmp	r0, r2
 80021e0:	d0ec      	beq.n	80021bc <TIM_Base_SetConfig+0x3c>
 80021e2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80021e6:	4290      	cmp	r0, r2
 80021e8:	d0e8      	beq.n	80021bc <TIM_Base_SetConfig+0x3c>
 80021ea:	4a16      	ldr	r2, [pc, #88]	; (8002244 <TIM_Base_SetConfig+0xc4>)
 80021ec:	4290      	cmp	r0, r2
 80021ee:	d0e5      	beq.n	80021bc <TIM_Base_SetConfig+0x3c>
 80021f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021f4:	4290      	cmp	r0, r2
 80021f6:	d0e1      	beq.n	80021bc <TIM_Base_SetConfig+0x3c>
 80021f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021fc:	4290      	cmp	r0, r2
 80021fe:	d0dd      	beq.n	80021bc <TIM_Base_SetConfig+0x3c>
 8002200:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002204:	4290      	cmp	r0, r2
 8002206:	d0d9      	beq.n	80021bc <TIM_Base_SetConfig+0x3c>
 8002208:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800220c:	4290      	cmp	r0, r2
 800220e:	d0d5      	beq.n	80021bc <TIM_Base_SetConfig+0x3c>
 8002210:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002214:	4290      	cmp	r0, r2
 8002216:	d0d1      	beq.n	80021bc <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8002218:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800221a:	688b      	ldr	r3, [r1, #8]
 800221c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800221e:	680b      	ldr	r3, [r1, #0]
 8002220:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <TIM_Base_SetConfig+0xbc>)
 8002224:	4298      	cmp	r0, r3
 8002226:	d006      	beq.n	8002236 <TIM_Base_SetConfig+0xb6>
 8002228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800222c:	4298      	cmp	r0, r3
 800222e:	d002      	beq.n	8002236 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8002230:	2301      	movs	r3, #1
 8002232:	6143      	str	r3, [r0, #20]
}
 8002234:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002236:	690b      	ldr	r3, [r1, #16]
 8002238:	6303      	str	r3, [r0, #48]	; 0x30
 800223a:	e7f9      	b.n	8002230 <TIM_Base_SetConfig+0xb0>
 800223c:	40010000 	.word	0x40010000
 8002240:	40000400 	.word	0x40000400
 8002244:	40014000 	.word	0x40014000

08002248 <HAL_TIM_Base_Init>:
{ 
 8002248:	b510      	push	{r4, lr}
  if(htim == NULL)
 800224a:	4604      	mov	r4, r0
 800224c:	b1a0      	cbz	r0, 8002278 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800224e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002252:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002256:	b91b      	cbnz	r3, 8002260 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002258:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800225c:	f000 ff82 	bl	8003164 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002260:	2302      	movs	r3, #2
 8002262:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002266:	6820      	ldr	r0, [r4, #0]
 8002268:	1d21      	adds	r1, r4, #4
 800226a:	f7ff ff89 	bl	8002180 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800226e:	2301      	movs	r3, #1
 8002270:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002274:	2000      	movs	r0, #0
 8002276:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002278:	2001      	movs	r0, #1
}
 800227a:	bd10      	pop	{r4, pc}

0800227c <HAL_TIM_OC_Init>:
{
 800227c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800227e:	4604      	mov	r4, r0
 8002280:	b1a0      	cbz	r0, 80022ac <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002282:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002286:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800228a:	b91b      	cbnz	r3, 8002294 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800228c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_OC_MspInit(htim);
 8002290:	f7ff fdf6 	bl	8001e80 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002294:	2302      	movs	r3, #2
 8002296:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 800229a:	6820      	ldr	r0, [r4, #0]
 800229c:	1d21      	adds	r1, r4, #4
 800229e:	f7ff ff6f 	bl	8002180 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80022a2:	2301      	movs	r3, #1
 80022a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80022a8:	2000      	movs	r0, #0
 80022aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022ac:	2001      	movs	r0, #1
}
 80022ae:	bd10      	pop	{r4, pc}

080022b0 <HAL_TIM_IC_Init>:
{
 80022b0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80022b2:	4604      	mov	r4, r0
 80022b4:	b1a0      	cbz	r0, 80022e0 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80022b6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80022ba:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022be:	b91b      	cbnz	r3, 80022c8 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80022c0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
 80022c4:	f7ff fddd 	bl	8001e82 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;   
 80022c8:	2302      	movs	r3, #2
 80022ca:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80022ce:	6820      	ldr	r0, [r4, #0]
 80022d0:	1d21      	adds	r1, r4, #4
 80022d2:	f7ff ff55 	bl	8002180 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80022d6:	2301      	movs	r3, #1
 80022d8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80022dc:	2000      	movs	r0, #0
 80022de:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022e0:	2001      	movs	r0, #1
}
 80022e2:	bd10      	pop	{r4, pc}

080022e4 <TIM_TI1_SetConfig>:
{
 80022e4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022e6:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80022e8:	4e1a      	ldr	r6, [pc, #104]	; (8002354 <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022ea:	f024 0401 	bic.w	r4, r4, #1
 80022ee:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022f0:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80022f2:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80022f4:	42b0      	cmp	r0, r6
 80022f6:	f024 0403 	bic.w	r4, r4, #3
 80022fa:	d01a      	beq.n	8002332 <TIM_TI1_SetConfig+0x4e>
 80022fc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002300:	d017      	beq.n	8002332 <TIM_TI1_SetConfig+0x4e>
 8002302:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8002306:	42b0      	cmp	r0, r6
 8002308:	d013      	beq.n	8002332 <TIM_TI1_SetConfig+0x4e>
 800230a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800230e:	42b0      	cmp	r0, r6
 8002310:	d00f      	beq.n	8002332 <TIM_TI1_SetConfig+0x4e>
 8002312:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8002316:	42b0      	cmp	r0, r6
 8002318:	d00b      	beq.n	8002332 <TIM_TI1_SetConfig+0x4e>
 800231a:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800231e:	42b0      	cmp	r0, r6
 8002320:	d007      	beq.n	8002332 <TIM_TI1_SetConfig+0x4e>
 8002322:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8002326:	42b0      	cmp	r0, r6
 8002328:	d003      	beq.n	8002332 <TIM_TI1_SetConfig+0x4e>
 800232a:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800232e:	42b0      	cmp	r0, r6
 8002330:	d10d      	bne.n	800234e <TIM_TI1_SetConfig+0x6a>
    tmpccmr1 |= TIM_ICSelection;
 8002332:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002334:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002336:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800233a:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800233c:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002340:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002344:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002346:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8002348:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800234a:	6201      	str	r1, [r0, #32]
}
 800234c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800234e:	f044 0201 	orr.w	r2, r4, #1
 8002352:	e7ef      	b.n	8002334 <TIM_TI1_SetConfig+0x50>
 8002354:	40010000 	.word	0x40010000

08002358 <HAL_TIM_IC_ConfigChannel>:
{
 8002358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800235a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800235e:	2b01      	cmp	r3, #1
{
 8002360:	4604      	mov	r4, r0
 8002362:	460d      	mov	r5, r1
 8002364:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002368:	d019      	beq.n	800239e <HAL_TIM_IC_ConfigChannel+0x46>
 800236a:	2301      	movs	r3, #1
 800236c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002370:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
 8002374:	b9a2      	cbnz	r2, 80023a0 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8002376:	68cb      	ldr	r3, [r1, #12]
 8002378:	6820      	ldr	r0, [r4, #0]
 800237a:	c906      	ldmia	r1, {r1, r2}
 800237c:	f7ff ffb2 	bl	80022e4 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002380:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002382:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002384:	699a      	ldr	r2, [r3, #24]
 8002386:	f022 020c 	bic.w	r2, r2, #12
 800238a:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800238c:	699a      	ldr	r2, [r3, #24]
 800238e:	430a      	orrs	r2, r1
 8002390:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002392:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002394:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002396:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 800239a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800239e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 80023a0:	2a04      	cmp	r2, #4
 80023a2:	688e      	ldr	r6, [r1, #8]
 80023a4:	6823      	ldr	r3, [r4, #0]
 80023a6:	68e8      	ldr	r0, [r5, #12]
 80023a8:	c982      	ldmia	r1, {r1, r7}
 80023aa:	d11f      	bne.n	80023ec <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023ac:	6a1a      	ldr	r2, [r3, #32]
 80023ae:	f022 0210 	bic.w	r2, r2, #16
 80023b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023b4:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 80023b6:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80023b8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80023bc:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80023c0:	0300      	lsls	r0, r0, #12
 80023c2:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023c4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80023c8:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80023ca:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80023cc:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023d0:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80023d4:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 80023d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023d8:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80023da:	699a      	ldr	r2, [r3, #24]
 80023dc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80023e0:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80023e2:	699a      	ldr	r2, [r3, #24]
 80023e4:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80023e8:	619e      	str	r6, [r3, #24]
 80023ea:	e7d2      	b.n	8002392 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 80023ec:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023ee:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 80023f0:	d11c      	bne.n	800242c <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023f6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80023f8:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 80023fa:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80023fc:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8002400:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002402:	0100      	lsls	r0, r0, #4
 8002404:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002406:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800240a:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800240c:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800240e:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002412:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002416:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8002418:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800241a:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800241c:	69da      	ldr	r2, [r3, #28]
 800241e:	f022 020c 	bic.w	r2, r2, #12
 8002422:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002424:	69da      	ldr	r2, [r3, #28]
 8002426:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002428:	61de      	str	r6, [r3, #28]
 800242a:	e7b2      	b.n	8002392 <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800242c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002430:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002432:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8002434:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002436:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800243a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800243e:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002440:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002444:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002446:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002448:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800244a:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800244e:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002452:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8002454:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002456:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002458:	69da      	ldr	r2, [r3, #28]
 800245a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800245e:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002460:	69da      	ldr	r2, [r3, #28]
 8002462:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002466:	e7df      	b.n	8002428 <HAL_TIM_IC_ConfigChannel+0xd0>

08002468 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002468:	6a03      	ldr	r3, [r0, #32]
 800246a:	f023 0310 	bic.w	r3, r3, #16
 800246e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002470:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002472:	6842      	ldr	r2, [r0, #4]
{
 8002474:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8002476:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002478:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800247a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800247e:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002482:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002484:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002488:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800248c:	4c0d      	ldr	r4, [pc, #52]	; (80024c4 <TIM_OC2_SetConfig+0x5c>)
 800248e:	42a0      	cmp	r0, r4
 8002490:	d009      	beq.n	80024a6 <TIM_OC2_SetConfig+0x3e>
 8002492:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002496:	42a0      	cmp	r0, r4
 8002498:	d005      	beq.n	80024a6 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 800249a:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800249c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800249e:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80024a0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80024a2:	6203      	str	r3, [r0, #32]
}
 80024a4:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024a6:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024a8:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 80024aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024ae:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024b2:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024b4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024b8:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80024ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024be:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 80024c2:	e7ea      	b.n	800249a <TIM_OC2_SetConfig+0x32>
 80024c4:	40010000 	.word	0x40010000

080024c8 <HAL_TIM_OC_ConfigChannel>:
{
 80024c8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim); 
 80024ca:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80024ce:	2b01      	cmp	r3, #1
{
 80024d0:	4604      	mov	r4, r0
 80024d2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim); 
 80024d6:	d018      	beq.n	800250a <HAL_TIM_OC_ConfigChannel+0x42>
 80024d8:	2301      	movs	r3, #1
 80024da:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80024de:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 80024e2:	461d      	mov	r5, r3
  switch (Channel)
 80024e4:	2a0c      	cmp	r2, #12
 80024e6:	d80b      	bhi.n	8002500 <HAL_TIM_OC_ConfigChannel+0x38>
 80024e8:	e8df f002 	tbb	[pc, r2]
 80024ec:	0a0a0a07 	.word	0x0a0a0a07
 80024f0:	0a0a0a10 	.word	0x0a0a0a10
 80024f4:	0a0a0a14 	.word	0x0a0a0a14
 80024f8:	18          	.byte	0x18
 80024f9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024fa:	6820      	ldr	r0, [r4, #0]
 80024fc:	f7ff fbdc 	bl	8001cb8 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim); 
 8002500:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002502:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim); 
 8002506:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800250a:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800250c:	6820      	ldr	r0, [r4, #0]
 800250e:	f7ff ffab 	bl	8002468 <TIM_OC2_SetConfig>
    break;
 8002512:	e7f5      	b.n	8002500 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002514:	6820      	ldr	r0, [r4, #0]
 8002516:	f7ff fbfb 	bl	8001d10 <TIM_OC3_SetConfig>
    break;
 800251a:	e7f1      	b.n	8002500 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800251c:	6820      	ldr	r0, [r4, #0]
 800251e:	f7ff fc27 	bl	8001d70 <TIM_OC4_SetConfig>
    break;
 8002522:	e7ed      	b.n	8002500 <HAL_TIM_OC_ConfigChannel+0x38>

08002524 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8002524:	6a03      	ldr	r3, [r0, #32]
{
 8002526:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8002528:	2401      	movs	r4, #1
 800252a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800252c:	ea23 0304 	bic.w	r3, r3, r4
 8002530:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002532:	6a03      	ldr	r3, [r0, #32]
 8002534:	408a      	lsls	r2, r1
 8002536:	431a      	orrs	r2, r3
 8002538:	6202      	str	r2, [r0, #32]
 800253a:	bd10      	pop	{r4, pc}

0800253c <HAL_TIM_PWM_Start_IT>:
{
 800253c:	b510      	push	{r4, lr}
 800253e:	4604      	mov	r4, r0
  switch (Channel)
 8002540:	290c      	cmp	r1, #12
 8002542:	d80d      	bhi.n	8002560 <HAL_TIM_PWM_Start_IT+0x24>
 8002544:	e8df f001 	tbb	[pc, r1]
 8002548:	0c0c0c07 	.word	0x0c0c0c07
 800254c:	0c0c0c22 	.word	0x0c0c0c22
 8002550:	0c0c0c27 	.word	0x0c0c0c27
 8002554:	2c          	.byte	0x2c
 8002555:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002556:	6802      	ldr	r2, [r0, #0]
 8002558:	68d3      	ldr	r3, [r2, #12]
 800255a:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800255e:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002560:	2201      	movs	r2, #1
 8002562:	6820      	ldr	r0, [r4, #0]
 8002564:	f7ff ffde 	bl	8002524 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002568:	6823      	ldr	r3, [r4, #0]
 800256a:	4a10      	ldr	r2, [pc, #64]	; (80025ac <HAL_TIM_PWM_Start_IT+0x70>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d003      	beq.n	8002578 <HAL_TIM_PWM_Start_IT+0x3c>
 8002570:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002574:	4293      	cmp	r3, r2
 8002576:	d103      	bne.n	8002580 <HAL_TIM_PWM_Start_IT+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 8002578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800257a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800257e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	f042 0201 	orr.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]
} 
 8002588:	2000      	movs	r0, #0
 800258a:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800258c:	6802      	ldr	r2, [r0, #0]
 800258e:	68d3      	ldr	r3, [r2, #12]
 8002590:	f043 0304 	orr.w	r3, r3, #4
 8002594:	e7e3      	b.n	800255e <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002596:	6802      	ldr	r2, [r0, #0]
 8002598:	68d3      	ldr	r3, [r2, #12]
 800259a:	f043 0308 	orr.w	r3, r3, #8
 800259e:	e7de      	b.n	800255e <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80025a0:	6802      	ldr	r2, [r0, #0]
 80025a2:	68d3      	ldr	r3, [r2, #12]
 80025a4:	f043 0310 	orr.w	r3, r3, #16
 80025a8:	e7d9      	b.n	800255e <HAL_TIM_PWM_Start_IT+0x22>
 80025aa:	bf00      	nop
 80025ac:	40010000 	.word	0x40010000

080025b0 <HAL_TIM_OC_Start_IT>:
 80025b0:	f7ff bfc4 	b.w	800253c <HAL_TIM_PWM_Start_IT>

080025b4 <HAL_TIM_PWM_Stop_IT>:
{
 80025b4:	b510      	push	{r4, lr}
 80025b6:	4604      	mov	r4, r0
  switch (Channel)
 80025b8:	290c      	cmp	r1, #12
 80025ba:	d80d      	bhi.n	80025d8 <HAL_TIM_PWM_Stop_IT+0x24>
 80025bc:	e8df f001 	tbb	[pc, r1]
 80025c0:	0c0c0c07 	.word	0x0c0c0c07
 80025c4:	0c0c0c36 	.word	0x0c0c0c36
 80025c8:	0c0c0c3b 	.word	0x0c0c0c3b
 80025cc:	40          	.byte	0x40
 80025cd:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80025ce:	6802      	ldr	r2, [r0, #0]
 80025d0:	68d3      	ldr	r3, [r2, #12]
 80025d2:	f023 0302 	bic.w	r3, r3, #2
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80025d6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80025d8:	2200      	movs	r2, #0
 80025da:	6820      	ldr	r0, [r4, #0]
 80025dc:	f7ff ffa2 	bl	8002524 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80025e0:	6823      	ldr	r3, [r4, #0]
 80025e2:	4a1a      	ldr	r2, [pc, #104]	; (800264c <HAL_TIM_PWM_Stop_IT+0x98>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d003      	beq.n	80025f0 <HAL_TIM_PWM_Stop_IT+0x3c>
 80025e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d10d      	bne.n	800260c <HAL_TIM_PWM_Stop_IT+0x58>
    __HAL_TIM_MOE_DISABLE(htim);
 80025f0:	6a19      	ldr	r1, [r3, #32]
 80025f2:	f241 1211 	movw	r2, #4369	; 0x1111
 80025f6:	4211      	tst	r1, r2
 80025f8:	d108      	bne.n	800260c <HAL_TIM_PWM_Stop_IT+0x58>
 80025fa:	6a19      	ldr	r1, [r3, #32]
 80025fc:	f240 4244 	movw	r2, #1092	; 0x444
 8002600:	4211      	tst	r1, r2
 8002602:	bf02      	ittt	eq
 8002604:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8002606:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 800260a:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 800260c:	6a19      	ldr	r1, [r3, #32]
 800260e:	f241 1211 	movw	r2, #4369	; 0x1111
 8002612:	4211      	tst	r1, r2
 8002614:	d108      	bne.n	8002628 <HAL_TIM_PWM_Stop_IT+0x74>
 8002616:	6a19      	ldr	r1, [r3, #32]
 8002618:	f240 4244 	movw	r2, #1092	; 0x444
 800261c:	4211      	tst	r1, r2
 800261e:	d103      	bne.n	8002628 <HAL_TIM_PWM_Stop_IT+0x74>
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	f022 0201 	bic.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]
} 
 8002628:	2000      	movs	r0, #0
 800262a:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800262c:	6802      	ldr	r2, [r0, #0]
 800262e:	68d3      	ldr	r3, [r2, #12]
 8002630:	f023 0304 	bic.w	r3, r3, #4
 8002634:	e7cf      	b.n	80025d6 <HAL_TIM_PWM_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002636:	6802      	ldr	r2, [r0, #0]
 8002638:	68d3      	ldr	r3, [r2, #12]
 800263a:	f023 0308 	bic.w	r3, r3, #8
 800263e:	e7ca      	b.n	80025d6 <HAL_TIM_PWM_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002640:	6802      	ldr	r2, [r0, #0]
 8002642:	68d3      	ldr	r3, [r2, #12]
 8002644:	f023 0310 	bic.w	r3, r3, #16
 8002648:	e7c5      	b.n	80025d6 <HAL_TIM_PWM_Stop_IT+0x22>
 800264a:	bf00      	nop
 800264c:	40010000 	.word	0x40010000

08002650 <HAL_TIM_OC_Stop_IT>:
 8002650:	f7ff bfb0 	b.w	80025b4 <HAL_TIM_PWM_Stop_IT>

08002654 <HAL_TIM_IC_Start_IT>:
{
 8002654:	b510      	push	{r4, lr}
 8002656:	4604      	mov	r4, r0
  switch (Channel)
 8002658:	290c      	cmp	r1, #12
 800265a:	d80d      	bhi.n	8002678 <HAL_TIM_IC_Start_IT+0x24>
 800265c:	e8df f001 	tbb	[pc, r1]
 8002660:	0c0c0c07 	.word	0x0c0c0c07
 8002664:	0c0c0c17 	.word	0x0c0c0c17
 8002668:	0c0c0c1c 	.word	0x0c0c0c1c
 800266c:	21          	.byte	0x21
 800266d:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800266e:	6802      	ldr	r2, [r0, #0]
 8002670:	68d3      	ldr	r3, [r2, #12]
 8002672:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002676:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002678:	6820      	ldr	r0, [r4, #0]
 800267a:	2201      	movs	r2, #1
 800267c:	f7ff ff52 	bl	8002524 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 8002680:	6822      	ldr	r2, [r4, #0]
 8002682:	6813      	ldr	r3, [r2, #0]
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6013      	str	r3, [r2, #0]
} 
 800268a:	2000      	movs	r0, #0
 800268c:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800268e:	6802      	ldr	r2, [r0, #0]
 8002690:	68d3      	ldr	r3, [r2, #12]
 8002692:	f043 0304 	orr.w	r3, r3, #4
 8002696:	e7ee      	b.n	8002676 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002698:	6802      	ldr	r2, [r0, #0]
 800269a:	68d3      	ldr	r3, [r2, #12]
 800269c:	f043 0308 	orr.w	r3, r3, #8
 80026a0:	e7e9      	b.n	8002676 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80026a2:	6802      	ldr	r2, [r0, #0]
 80026a4:	68d3      	ldr	r3, [r2, #12]
 80026a6:	f043 0310 	orr.w	r3, r3, #16
 80026aa:	e7e4      	b.n	8002676 <HAL_TIM_IC_Start_IT+0x22>

080026ac <HAL_TIM_IC_Stop_IT>:
{
 80026ac:	b510      	push	{r4, lr}
 80026ae:	4604      	mov	r4, r0
  switch (Channel)
 80026b0:	290c      	cmp	r1, #12
 80026b2:	d80d      	bhi.n	80026d0 <HAL_TIM_IC_Stop_IT+0x24>
 80026b4:	e8df f001 	tbb	[pc, r1]
 80026b8:	0c0c0c07 	.word	0x0c0c0c07
 80026bc:	0c0c0c21 	.word	0x0c0c0c21
 80026c0:	0c0c0c26 	.word	0x0c0c0c26
 80026c4:	2b          	.byte	0x2b
 80026c5:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80026c6:	6802      	ldr	r2, [r0, #0]
 80026c8:	68d3      	ldr	r3, [r2, #12]
 80026ca:	f023 0302 	bic.w	r3, r3, #2
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80026ce:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE); 
 80026d0:	2200      	movs	r2, #0
 80026d2:	6820      	ldr	r0, [r4, #0]
 80026d4:	f7ff ff26 	bl	8002524 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim); 
 80026d8:	6823      	ldr	r3, [r4, #0]
 80026da:	6a19      	ldr	r1, [r3, #32]
 80026dc:	f241 1211 	movw	r2, #4369	; 0x1111
 80026e0:	4211      	tst	r1, r2
 80026e2:	d108      	bne.n	80026f6 <HAL_TIM_IC_Stop_IT+0x4a>
 80026e4:	6a19      	ldr	r1, [r3, #32]
 80026e6:	f240 4244 	movw	r2, #1092	; 0x444
 80026ea:	4211      	tst	r1, r2
 80026ec:	bf02      	ittt	eq
 80026ee:	681a      	ldreq	r2, [r3, #0]
 80026f0:	f022 0201 	biceq.w	r2, r2, #1
 80026f4:	601a      	streq	r2, [r3, #0]
}
 80026f6:	2000      	movs	r0, #0
 80026f8:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80026fa:	6802      	ldr	r2, [r0, #0]
 80026fc:	68d3      	ldr	r3, [r2, #12]
 80026fe:	f023 0304 	bic.w	r3, r3, #4
 8002702:	e7e4      	b.n	80026ce <HAL_TIM_IC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002704:	6802      	ldr	r2, [r0, #0]
 8002706:	68d3      	ldr	r3, [r2, #12]
 8002708:	f023 0308 	bic.w	r3, r3, #8
 800270c:	e7df      	b.n	80026ce <HAL_TIM_IC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800270e:	6802      	ldr	r2, [r0, #0]
 8002710:	68d3      	ldr	r3, [r2, #12]
 8002712:	f023 0310 	bic.w	r3, r3, #16
 8002716:	e7da      	b.n	80026ce <HAL_TIM_IC_Stop_IT+0x22>

08002718 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8002718:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800271c:	2b01      	cmp	r3, #1
{
 800271e:	b510      	push	{r4, lr}
 8002720:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002724:	d018      	beq.n	8002758 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002726:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800272a:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800272c:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800272e:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002730:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002732:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002736:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002738:	685a      	ldr	r2, [r3, #4]
 800273a:	4322      	orrs	r2, r4
 800273c:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 800273e:	689a      	ldr	r2, [r3, #8]
 8002740:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002744:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	430a      	orrs	r2, r1
 800274a:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 800274c:	2301      	movs	r3, #1
 800274e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8002752:	2300      	movs	r3, #0
 8002754:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8002758:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 800275a:	bd10      	pop	{r4, pc}

0800275c <HAL_TIMEx_CommutationCallback>:
 800275c:	4770      	bx	lr

0800275e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800275e:	4770      	bx	lr

08002760 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8002764:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002766:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8002768:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800276a:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800276c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002770:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002772:	6133      	str	r3, [r6, #16]
{
 8002774:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002776:	6883      	ldr	r3, [r0, #8]
 8002778:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 800277a:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800277c:	4303      	orrs	r3, r0
 800277e:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002780:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002784:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002786:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800278a:	430b      	orrs	r3, r1
 800278c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800278e:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002790:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002792:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8002794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8002798:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800279a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800279e:	6173      	str	r3, [r6, #20]
 80027a0:	4b7a      	ldr	r3, [pc, #488]	; (800298c <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027a2:	d17c      	bne.n	800289e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80027a4:	429e      	cmp	r6, r3
 80027a6:	d003      	beq.n	80027b0 <UART_SetConfig+0x50>
 80027a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027ac:	429e      	cmp	r6, r3
 80027ae:	d144      	bne.n	800283a <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80027b0:	f7ff fa72 	bl	8001c98 <HAL_RCC_GetPCLK2Freq>
 80027b4:	2519      	movs	r5, #25
 80027b6:	fb05 f300 	mul.w	r3, r5, r0
 80027ba:	6860      	ldr	r0, [r4, #4]
 80027bc:	f04f 0964 	mov.w	r9, #100	; 0x64
 80027c0:	0040      	lsls	r0, r0, #1
 80027c2:	fbb3 f3f0 	udiv	r3, r3, r0
 80027c6:	fbb3 f3f9 	udiv	r3, r3, r9
 80027ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80027ce:	f7ff fa63 	bl	8001c98 <HAL_RCC_GetPCLK2Freq>
 80027d2:	6863      	ldr	r3, [r4, #4]
 80027d4:	4368      	muls	r0, r5
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	fbb0 f7f3 	udiv	r7, r0, r3
 80027dc:	f7ff fa5c 	bl	8001c98 <HAL_RCC_GetPCLK2Freq>
 80027e0:	6863      	ldr	r3, [r4, #4]
 80027e2:	4368      	muls	r0, r5
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ea:	fbb3 f3f9 	udiv	r3, r3, r9
 80027ee:	fb09 7313 	mls	r3, r9, r3, r7
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	3332      	adds	r3, #50	; 0x32
 80027f6:	fbb3 f3f9 	udiv	r3, r3, r9
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002800:	f7ff fa4a 	bl	8001c98 <HAL_RCC_GetPCLK2Freq>
 8002804:	6862      	ldr	r2, [r4, #4]
 8002806:	4368      	muls	r0, r5
 8002808:	0052      	lsls	r2, r2, #1
 800280a:	fbb0 faf2 	udiv	sl, r0, r2
 800280e:	f7ff fa43 	bl	8001c98 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002812:	6863      	ldr	r3, [r4, #4]
 8002814:	4368      	muls	r0, r5
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fbb0 f3f3 	udiv	r3, r0, r3
 800281c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002820:	fb09 a313 	mls	r3, r9, r3, sl
 8002824:	00db      	lsls	r3, r3, #3
 8002826:	3332      	adds	r3, #50	; 0x32
 8002828:	fbb3 f3f9 	udiv	r3, r3, r9
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002832:	443b      	add	r3, r7
 8002834:	60b3      	str	r3, [r6, #8]
 8002836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800283a:	f7ff fa1d 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 800283e:	2519      	movs	r5, #25
 8002840:	fb05 f300 	mul.w	r3, r5, r0
 8002844:	6860      	ldr	r0, [r4, #4]
 8002846:	f04f 0964 	mov.w	r9, #100	; 0x64
 800284a:	0040      	lsls	r0, r0, #1
 800284c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002850:	fbb3 f3f9 	udiv	r3, r3, r9
 8002854:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002858:	f7ff fa0e 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 800285c:	6863      	ldr	r3, [r4, #4]
 800285e:	4368      	muls	r0, r5
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	fbb0 f7f3 	udiv	r7, r0, r3
 8002866:	f7ff fa07 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 800286a:	6863      	ldr	r3, [r4, #4]
 800286c:	4368      	muls	r0, r5
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fbb0 f3f3 	udiv	r3, r0, r3
 8002874:	fbb3 f3f9 	udiv	r3, r3, r9
 8002878:	fb09 7313 	mls	r3, r9, r3, r7
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	3332      	adds	r3, #50	; 0x32
 8002880:	fbb3 f3f9 	udiv	r3, r3, r9
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800288a:	f7ff f9f5 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 800288e:	6862      	ldr	r2, [r4, #4]
 8002890:	4368      	muls	r0, r5
 8002892:	0052      	lsls	r2, r2, #1
 8002894:	fbb0 faf2 	udiv	sl, r0, r2
 8002898:	f7ff f9ee 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 800289c:	e7b9      	b.n	8002812 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800289e:	429e      	cmp	r6, r3
 80028a0:	d002      	beq.n	80028a8 <UART_SetConfig+0x148>
 80028a2:	4b3b      	ldr	r3, [pc, #236]	; (8002990 <UART_SetConfig+0x230>)
 80028a4:	429e      	cmp	r6, r3
 80028a6:	d140      	bne.n	800292a <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80028a8:	f7ff f9f6 	bl	8001c98 <HAL_RCC_GetPCLK2Freq>
 80028ac:	6867      	ldr	r7, [r4, #4]
 80028ae:	2519      	movs	r5, #25
 80028b0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80028b4:	fb05 f300 	mul.w	r3, r5, r0
 80028b8:	00bf      	lsls	r7, r7, #2
 80028ba:	fbb3 f3f7 	udiv	r3, r3, r7
 80028be:	fbb3 f3f9 	udiv	r3, r3, r9
 80028c2:	011f      	lsls	r7, r3, #4
 80028c4:	f7ff f9e8 	bl	8001c98 <HAL_RCC_GetPCLK2Freq>
 80028c8:	6863      	ldr	r3, [r4, #4]
 80028ca:	4368      	muls	r0, r5
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	fbb0 f8f3 	udiv	r8, r0, r3
 80028d2:	f7ff f9e1 	bl	8001c98 <HAL_RCC_GetPCLK2Freq>
 80028d6:	6863      	ldr	r3, [r4, #4]
 80028d8:	4368      	muls	r0, r5
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e0:	fbb3 f3f9 	udiv	r3, r3, r9
 80028e4:	fb09 8313 	mls	r3, r9, r3, r8
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	3332      	adds	r3, #50	; 0x32
 80028ec:	fbb3 f3f9 	udiv	r3, r3, r9
 80028f0:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80028f4:	f7ff f9d0 	bl	8001c98 <HAL_RCC_GetPCLK2Freq>
 80028f8:	6862      	ldr	r2, [r4, #4]
 80028fa:	4368      	muls	r0, r5
 80028fc:	0092      	lsls	r2, r2, #2
 80028fe:	fbb0 faf2 	udiv	sl, r0, r2
 8002902:	f7ff f9c9 	bl	8001c98 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002906:	6863      	ldr	r3, [r4, #4]
 8002908:	4368      	muls	r0, r5
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002910:	fbb3 f3f9 	udiv	r3, r3, r9
 8002914:	fb09 a313 	mls	r3, r9, r3, sl
 8002918:	011b      	lsls	r3, r3, #4
 800291a:	3332      	adds	r3, #50	; 0x32
 800291c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002920:	f003 030f 	and.w	r3, r3, #15
 8002924:	ea43 0308 	orr.w	r3, r3, r8
 8002928:	e783      	b.n	8002832 <UART_SetConfig+0xd2>
 800292a:	f7ff f9a5 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 800292e:	6867      	ldr	r7, [r4, #4]
 8002930:	2519      	movs	r5, #25
 8002932:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002936:	fb05 f300 	mul.w	r3, r5, r0
 800293a:	00bf      	lsls	r7, r7, #2
 800293c:	fbb3 f3f7 	udiv	r3, r3, r7
 8002940:	fbb3 f3f9 	udiv	r3, r3, r9
 8002944:	011f      	lsls	r7, r3, #4
 8002946:	f7ff f997 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 800294a:	6863      	ldr	r3, [r4, #4]
 800294c:	4368      	muls	r0, r5
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	fbb0 f8f3 	udiv	r8, r0, r3
 8002954:	f7ff f990 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 8002958:	6863      	ldr	r3, [r4, #4]
 800295a:	4368      	muls	r0, r5
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002962:	fbb3 f3f9 	udiv	r3, r3, r9
 8002966:	fb09 8313 	mls	r3, r9, r3, r8
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	3332      	adds	r3, #50	; 0x32
 800296e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002972:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002976:	f7ff f97f 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 800297a:	6862      	ldr	r2, [r4, #4]
 800297c:	4368      	muls	r0, r5
 800297e:	0092      	lsls	r2, r2, #2
 8002980:	fbb0 faf2 	udiv	sl, r0, r2
 8002984:	f7ff f978 	bl	8001c78 <HAL_RCC_GetPCLK1Freq>
 8002988:	e7bd      	b.n	8002906 <UART_SetConfig+0x1a6>
 800298a:	bf00      	nop
 800298c:	40011000 	.word	0x40011000
 8002990:	40011400 	.word	0x40011400

08002994 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002996:	4604      	mov	r4, r0
 8002998:	460e      	mov	r6, r1
 800299a:	4617      	mov	r7, r2
 800299c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800299e:	6821      	ldr	r1, [r4, #0]
 80029a0:	680b      	ldr	r3, [r1, #0]
 80029a2:	ea36 0303 	bics.w	r3, r6, r3
 80029a6:	d101      	bne.n	80029ac <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80029a8:	2000      	movs	r0, #0
}
 80029aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80029ac:	1c6b      	adds	r3, r5, #1
 80029ae:	d0f7      	beq.n	80029a0 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80029b0:	b995      	cbnz	r5, 80029d8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80029ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029bc:	695a      	ldr	r2, [r3, #20]
 80029be:	f022 0201 	bic.w	r2, r2, #1
 80029c2:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80029c4:	2320      	movs	r3, #32
 80029c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80029ca:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 80029ce:	2300      	movs	r3, #0
 80029d0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 80029d4:	2003      	movs	r0, #3
 80029d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80029d8:	f7fe fd98 	bl	800150c <HAL_GetTick>
 80029dc:	1bc0      	subs	r0, r0, r7
 80029de:	4285      	cmp	r5, r0
 80029e0:	d2dd      	bcs.n	800299e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80029e2:	e7e6      	b.n	80029b2 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080029e4 <HAL_UART_Init>:
{
 80029e4:	b510      	push	{r4, lr}
  if(huart == NULL)
 80029e6:	4604      	mov	r4, r0
 80029e8:	b340      	cbz	r0, 8002a3c <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 80029ea:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80029ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029f2:	b91b      	cbnz	r3, 80029fc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80029f4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80029f8:	f000 fc06 	bl	8003208 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80029fc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80029fe:	2324      	movs	r3, #36	; 0x24
 8002a00:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002a04:	68d3      	ldr	r3, [r2, #12]
 8002a06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002a0a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f7ff fea7 	bl	8002760 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a12:	6823      	ldr	r3, [r4, #0]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a1c:	695a      	ldr	r2, [r3, #20]
 8002a1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a22:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a2a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a2c:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002a2e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a30:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002a32:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002a36:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002a3a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002a3c:	2001      	movs	r0, #1
}
 8002a3e:	bd10      	pop	{r4, pc}

08002a40 <HAL_UART_Transmit>:
{
 8002a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a44:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8002a46:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002a4a:	2b20      	cmp	r3, #32
{
 8002a4c:	4604      	mov	r4, r0
 8002a4e:	460d      	mov	r5, r1
 8002a50:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 8002a52:	d14f      	bne.n	8002af4 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 8002a54:	2900      	cmp	r1, #0
 8002a56:	d04a      	beq.n	8002aee <HAL_UART_Transmit+0xae>
 8002a58:	2a00      	cmp	r2, #0
 8002a5a:	d048      	beq.n	8002aee <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 8002a5c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d047      	beq.n	8002af4 <HAL_UART_Transmit+0xb4>
 8002a64:	2301      	movs	r3, #1
 8002a66:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a6e:	2321      	movs	r3, #33	; 0x21
 8002a70:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8002a74:	f7fe fd4a 	bl	800150c <HAL_GetTick>
    huart->TxXferSize = Size;
 8002a78:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 8002a7c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8002a7e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8002a82:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	b96b      	cbnz	r3, 8002aa4 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a88:	463b      	mov	r3, r7
 8002a8a:	4632      	mov	r2, r6
 8002a8c:	2140      	movs	r1, #64	; 0x40
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f7ff ff80 	bl	8002994 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002a94:	b9b0      	cbnz	r0, 8002ac4 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 8002a96:	2320      	movs	r3, #32
 8002a98:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002a9c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002aa4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002aac:	68a3      	ldr	r3, [r4, #8]
 8002aae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ab2:	4632      	mov	r2, r6
 8002ab4:	463b      	mov	r3, r7
 8002ab6:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002aba:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002abc:	d10e      	bne.n	8002adc <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002abe:	f7ff ff69 	bl	8002994 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002ac2:	b110      	cbz	r0, 8002aca <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002ac4:	2003      	movs	r0, #3
 8002ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002aca:	882b      	ldrh	r3, [r5, #0]
 8002acc:	6822      	ldr	r2, [r4, #0]
 8002ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ad2:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002ad4:	6923      	ldr	r3, [r4, #16]
 8002ad6:	b943      	cbnz	r3, 8002aea <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8002ad8:	3502      	adds	r5, #2
 8002ada:	e7d2      	b.n	8002a82 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002adc:	f7ff ff5a 	bl	8002994 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002ae0:	2800      	cmp	r0, #0
 8002ae2:	d1ef      	bne.n	8002ac4 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002ae4:	6823      	ldr	r3, [r4, #0]
 8002ae6:	782a      	ldrb	r2, [r5, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	3501      	adds	r5, #1
 8002aec:	e7c9      	b.n	8002a82 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002aee:	2001      	movs	r0, #1
 8002af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002af4:	2002      	movs	r0, #2
}
 8002af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002afc <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM2){
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0c:	d129      	bne.n	8002b62 <HAL_TIM_IC_CaptureCallback+0x66>
		clock.masterTick();
 8002b0e:	4817      	ldr	r0, [pc, #92]	; (8002b6c <HAL_TIM_IC_CaptureCallback+0x70>)
 8002b10:	f000 fc34 	bl	800337c <_ZN5Clock10masterTickEv>
		clock.setPeriod();
 8002b14:	4815      	ldr	r0, [pc, #84]	; (8002b6c <HAL_TIM_IC_CaptureCallback+0x70>)
 8002b16:	f000 fc6f 	bl	80033f8 <_ZN5Clock9setPeriodEv>
		clock.subDiv = 4;
 8002b1a:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <HAL_TIM_IC_CaptureCallback+0x70>)
 8002b1c:	2204      	movs	r2, #4
 8002b1e:	605a      	str	r2, [r3, #4]
		clock.slaveTimer->Instance->CNT = 0;
 8002b20:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <HAL_TIM_IC_CaptureCallback+0x70>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2200      	movs	r2, #0
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24
		clock.slaveTimer->Instance->ARR = clock.period/4;
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <HAL_TIM_IC_CaptureCallback+0x70>)
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a0e      	ldr	r2, [pc, #56]	; (8002b6c <HAL_TIM_IC_CaptureCallback+0x70>)
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	0892      	lsrs	r2, r2, #2
 8002b36:	62da      	str	r2, [r3, #44]	; 0x2c
		clock.slaveTimer->Instance->CCR2 = clock.period/16;
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <HAL_TIM_IC_CaptureCallback+0x70>)
 8002b3a:	699b      	ldr	r3, [r3, #24]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a0b      	ldr	r2, [pc, #44]	; (8002b6c <HAL_TIM_IC_CaptureCallback+0x70>)
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	0912      	lsrs	r2, r2, #4
 8002b44:	639a      	str	r2, [r3, #56]	; 0x38

		HAL_GPIO_TogglePin(OUT1_GPIO_Port,OUT1_Pin);
 8002b46:	2101      	movs	r1, #1
 8002b48:	4809      	ldr	r0, [pc, #36]	; (8002b70 <HAL_TIM_IC_CaptureCallback+0x74>)
 8002b4a:	f7fe fe46 	bl	80017da <HAL_GPIO_TogglePin>
		HAL_GPIO_WritePin(OUT2_GPIO_Port,OUT2_Pin,GPIO_PIN_SET);
 8002b4e:	2201      	movs	r2, #1
 8002b50:	2102      	movs	r1, #2
 8002b52:	4807      	ldr	r0, [pc, #28]	; (8002b70 <HAL_TIM_IC_CaptureCallback+0x74>)
 8002b54:	f7fe fe3c 	bl	80017d0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT3_GPIO_Port,OUT3_Pin,GPIO_PIN_SET);
 8002b58:	2201      	movs	r2, #1
 8002b5a:	2104      	movs	r1, #4
 8002b5c:	4804      	ldr	r0, [pc, #16]	; (8002b70 <HAL_TIM_IC_CaptureCallback+0x74>)
 8002b5e:	f7fe fe37 	bl	80017d0 <HAL_GPIO_WritePin>
		// HAL_GPIO_WritePin(OUT1_GPIO_Port,OUT3_Pin,GPIO_PIN_SET);


	}
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000148 	.word	0x20000148
 8002b70:	40020400 	.word	0x40020400

08002b74 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM5){
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a06      	ldr	r2, [pc, #24]	; (8002b9c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d106      	bne.n	8002b94 <HAL_TIM_PeriodElapsedCallback+0x20>
		clock.subTick();
 8002b86:	4806      	ldr	r0, [pc, #24]	; (8002ba0 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002b88:	f000 fc0a 	bl	80033a0 <_ZN5Clock7subTickEv>
		HAL_GPIO_TogglePin(OUT2_GPIO_Port,OUT2_Pin);
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	4805      	ldr	r0, [pc, #20]	; (8002ba4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002b90:	f7fe fe23 	bl	80017da <HAL_GPIO_TogglePin>
	}
}
 8002b94:	bf00      	nop
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	40000c00 	.word	0x40000c00
 8002ba0:	20000148 	.word	0x20000148
 8002ba4:	40020400 	.word	0x40020400

08002ba8 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM5){
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a05      	ldr	r2, [pc, #20]	; (8002bcc <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d103      	bne.n	8002bc2 <HAL_TIM_PWM_PulseFinishedCallback+0x1a>
		HAL_GPIO_TogglePin(OUT3_GPIO_Port,OUT3_Pin);
 8002bba:	2104      	movs	r1, #4
 8002bbc:	4804      	ldr	r0, [pc, #16]	; (8002bd0 <HAL_TIM_PWM_PulseFinishedCallback+0x28>)
 8002bbe:	f7fe fe0c 	bl	80017da <HAL_GPIO_TogglePin>
	}

}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40000c00 	.word	0x40000c00
 8002bd0:	40020400 	.word	0x40020400

08002bd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bda:	f7fe fc71 	bl	80014c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bde:	f000 f83b 	bl	8002c58 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002be2:	f000 fa2f 	bl	8003044 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8002be6:	f000 f89f 	bl	8002d28 <_ZL12MX_TIM2_Initv>
  MX_TIM5_Init();
 8002bea:	f000 f955 	bl	8002e98 <_ZL12MX_TIM5_Initv>
  MX_USART2_UART_Init();
 8002bee:	f000 f9fb 	bl	8002fe8 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 8002bf2:	4814      	ldr	r0, [pc, #80]	; (8002c44 <main+0x70>)
 8002bf4:	f7ff f939 	bl	8001e6a <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim5,TIM_CHANNEL_2);
 8002bf8:	2104      	movs	r1, #4
 8002bfa:	4812      	ldr	r0, [pc, #72]	; (8002c44 <main+0x70>)
 8002bfc:	f7ff fcd8 	bl	80025b0 <HAL_TIM_OC_Start_IT>
  // HAL_TIM_IC_Start_IT(&htim2,TIM_CHANNEL_1);
  // HAL_TIM_IC_Start_IT(&htim5,TIM_CHANNEL_1);
  clock.setTimer(&htim2,&htim5);
 8002c00:	4a10      	ldr	r2, [pc, #64]	; (8002c44 <main+0x70>)
 8002c02:	4911      	ldr	r1, [pc, #68]	; (8002c48 <main+0x74>)
 8002c04:	4811      	ldr	r0, [pc, #68]	; (8002c4c <main+0x78>)
 8002c06:	f000 fbe5 	bl	80033d4 <_ZN5Clock8setTimerEP17TIM_HandleTypeDefS1_>
  clock.setSource(EXTERNAL);
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	480f      	ldr	r0, [pc, #60]	; (8002c4c <main+0x78>)
 8002c0e:	f000 fc07 	bl	8003420 <_ZN5Clock9setSourceE11ClockSource>

  while (1)
  {
    /* USER CODE END WHILE */

	  if(temp != clock.sub){
 8002c12:	7dfa      	ldrb	r2, [r7, #23]
 8002c14:	4b0d      	ldr	r3, [pc, #52]	; (8002c4c <main+0x78>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d00f      	beq.n	8002c3c <main+0x68>
			uint8_t stringTx[16];

			sprintf((char*)stringTx,"S: %d\r\n",clock.sub);
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <main+0x78>)
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	1d3b      	adds	r3, r7, #4
 8002c22:	490b      	ldr	r1, [pc, #44]	; (8002c50 <main+0x7c>)
 8002c24:	4618      	mov	r0, r3
 8002c26:	f000 fc8f 	bl	8003548 <siprintf>

			HAL_UART_Transmit(&huart2,stringTx,16,100);
 8002c2a:	1d39      	adds	r1, r7, #4
 8002c2c:	2364      	movs	r3, #100	; 0x64
 8002c2e:	2210      	movs	r2, #16
 8002c30:	4808      	ldr	r0, [pc, #32]	; (8002c54 <main+0x80>)
 8002c32:	f7ff ff05 	bl	8002a40 <HAL_UART_Transmit>
			temp = clock.sub;
 8002c36:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <main+0x78>)
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	75fb      	strb	r3, [r7, #23]

	  }
	  HAL_Delay(25);
 8002c3c:	2019      	movs	r0, #25
 8002c3e:	f7fe fc6b 	bl	8001518 <HAL_Delay>



  }
 8002c42:	e7e6      	b.n	8002c12 <main+0x3e>
 8002c44:	200000cc 	.word	0x200000cc
 8002c48:	20000090 	.word	0x20000090
 8002c4c:	20000148 	.word	0x20000148
 8002c50:	08003e70 	.word	0x08003e70
 8002c54:	20000108 	.word	0x20000108

08002c58 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b094      	sub	sp, #80	; 0x50
 8002c5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c5e:	f107 0320 	add.w	r3, r7, #32
 8002c62:	2230      	movs	r2, #48	; 0x30
 8002c64:	2100      	movs	r1, #0
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 fc66 	bl	8003538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c6c:	f107 030c 	add.w	r3, r7, #12
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	60bb      	str	r3, [r7, #8]
 8002c80:	4a27      	ldr	r2, [pc, #156]	; (8002d20 <_Z18SystemClock_Configv+0xc8>)
 8002c82:	4b27      	ldr	r3, [pc, #156]	; (8002d20 <_Z18SystemClock_Configv+0xc8>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c8c:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <_Z18SystemClock_Configv+0xc8>)
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c98:	2300      	movs	r3, #0
 8002c9a:	607b      	str	r3, [r7, #4]
 8002c9c:	4a21      	ldr	r2, [pc, #132]	; (8002d24 <_Z18SystemClock_Configv+0xcc>)
 8002c9e:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <_Z18SystemClock_Configv+0xcc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	4b1e      	ldr	r3, [pc, #120]	; (8002d24 <_Z18SystemClock_Configv+0xcc>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cbc:	2310      	movs	r3, #16
 8002cbe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cc4:	f107 0320 	add.w	r3, r7, #32
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7fe fd8b 	bl	80017e4 <HAL_RCC_OscConfig>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bf14      	ite	ne
 8002cd4:	2301      	movne	r3, #1
 8002cd6:	2300      	moveq	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 8002cde:	f000 f9f5 	bl	80030cc <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cea:	2300      	movs	r3, #0
 8002cec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002cf6:	f107 030c 	add.w	r3, r7, #12
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7fe ff21 	bl	8001b44 <HAL_RCC_ClockConfig>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	bf14      	ite	ne
 8002d08:	2301      	movne	r3, #1
 8002d0a:	2300      	moveq	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 8002d12:	f000 f9db 	bl	80030cc <Error_Handler>
  }
}
 8002d16:	bf00      	nop
 8002d18:	3750      	adds	r7, #80	; 0x50
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800
 8002d24:	40007000 	.word	0x40007000

08002d28 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b092      	sub	sp, #72	; 0x48
 8002d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	605a      	str	r2, [r3, #4]
 8002d38:	609a      	str	r2, [r3, #8]
 8002d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d3c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
 8002d44:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002d46:	f107 0320 	add.w	r3, r7, #32
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	605a      	str	r2, [r3, #4]
 8002d50:	609a      	str	r2, [r3, #8]
 8002d52:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d54:	1d3b      	adds	r3, r7, #4
 8002d56:	2200      	movs	r2, #0
 8002d58:	601a      	str	r2, [r3, #0]
 8002d5a:	605a      	str	r2, [r3, #4]
 8002d5c:	609a      	str	r2, [r3, #8]
 8002d5e:	60da      	str	r2, [r3, #12]
 8002d60:	611a      	str	r2, [r3, #16]
 8002d62:	615a      	str	r2, [r3, #20]
 8002d64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d66:	4b4a      	ldr	r3, [pc, #296]	; (8002e90 <_ZL12MX_TIM2_Initv+0x168>)
 8002d68:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d6c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8002d6e:	4b48      	ldr	r3, [pc, #288]	; (8002e90 <_ZL12MX_TIM2_Initv+0x168>)
 8002d70:	220f      	movs	r2, #15
 8002d72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d74:	4b46      	ldr	r3, [pc, #280]	; (8002e90 <_ZL12MX_TIM2_Initv+0x168>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000000000;
 8002d7a:	4b45      	ldr	r3, [pc, #276]	; (8002e90 <_ZL12MX_TIM2_Initv+0x168>)
 8002d7c:	4a45      	ldr	r2, [pc, #276]	; (8002e94 <_ZL12MX_TIM2_Initv+0x16c>)
 8002d7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d80:	4b43      	ldr	r3, [pc, #268]	; (8002e90 <_ZL12MX_TIM2_Initv+0x168>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002d86:	4842      	ldr	r0, [pc, #264]	; (8002e90 <_ZL12MX_TIM2_Initv+0x168>)
 8002d88:	f7ff fa5e 	bl	8002248 <HAL_TIM_Base_Init>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	bf14      	ite	ne
 8002d92:	2301      	movne	r3, #1
 8002d94:	2300      	moveq	r3, #0
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <_ZL12MX_TIM2_Initv+0x78>
  {
    Error_Handler();
 8002d9c:	f000 f996 	bl	80030cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002da4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002da6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002daa:	4619      	mov	r1, r3
 8002dac:	4838      	ldr	r0, [pc, #224]	; (8002e90 <_ZL12MX_TIM2_Initv+0x168>)
 8002dae:	f7ff f869 	bl	8001e84 <HAL_TIM_ConfigClockSource>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf14      	ite	ne
 8002db8:	2301      	movne	r3, #1
 8002dba:	2300      	moveq	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <_ZL12MX_TIM2_Initv+0x9e>
  {
    Error_Handler();
 8002dc2:	f000 f983 	bl	80030cc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002dc6:	4832      	ldr	r0, [pc, #200]	; (8002e90 <_ZL12MX_TIM2_Initv+0x168>)
 8002dc8:	f7ff fa72 	bl	80022b0 <HAL_TIM_IC_Init>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	bf14      	ite	ne
 8002dd2:	2301      	movne	r3, #1
 8002dd4:	2300      	moveq	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <_ZL12MX_TIM2_Initv+0xb8>
  {
    Error_Handler();
 8002ddc:	f000 f976 	bl	80030cc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002de0:	482b      	ldr	r0, [pc, #172]	; (8002e90 <_ZL12MX_TIM2_Initv+0x168>)
 8002de2:	f7ff fa4b 	bl	800227c <HAL_TIM_OC_Init>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	bf14      	ite	ne
 8002dec:	2301      	movne	r3, #1
 8002dee:	2300      	moveq	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <_ZL12MX_TIM2_Initv+0xd2>
  {
    Error_Handler();
 8002df6:	f000 f969 	bl	80030cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e06:	4619      	mov	r1, r3
 8002e08:	4821      	ldr	r0, [pc, #132]	; (8002e90 <_ZL12MX_TIM2_Initv+0x168>)
 8002e0a:	f7ff fc85 	bl	8002718 <HAL_TIMEx_MasterConfigSynchronization>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf14      	ite	ne
 8002e14:	2301      	movne	r3, #1
 8002e16:	2300      	moveq	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <_ZL12MX_TIM2_Initv+0xfa>
  {
    Error_Handler();
 8002e1e:	f000 f955 	bl	80030cc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e22:	2300      	movs	r3, #0
 8002e24:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e26:	2301      	movs	r3, #1
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e32:	f107 0320 	add.w	r3, r7, #32
 8002e36:	2200      	movs	r2, #0
 8002e38:	4619      	mov	r1, r3
 8002e3a:	4815      	ldr	r0, [pc, #84]	; (8002e90 <_ZL12MX_TIM2_Initv+0x168>)
 8002e3c:	f7ff fa8c 	bl	8002358 <HAL_TIM_IC_ConfigChannel>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	bf14      	ite	ne
 8002e46:	2301      	movne	r3, #1
 8002e48:	2300      	moveq	r3, #0
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <_ZL12MX_TIM2_Initv+0x12c>
  {
    Error_Handler();
 8002e50:	f000 f93c 	bl	80030cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002e54:	2300      	movs	r3, #0
 8002e56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 50000;
 8002e58:	f24c 3350 	movw	r3, #50000	; 0xc350
 8002e5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	2204      	movs	r2, #4
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4808      	ldr	r0, [pc, #32]	; (8002e90 <_ZL12MX_TIM2_Initv+0x168>)
 8002e6e:	f7ff fb2b 	bl	80024c8 <HAL_TIM_OC_ConfigChannel>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf14      	ite	ne
 8002e78:	2301      	movne	r3, #1
 8002e7a:	2300      	moveq	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <_ZL12MX_TIM2_Initv+0x15e>
  {
    Error_Handler();
 8002e82:	f000 f923 	bl	80030cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e86:	bf00      	nop
 8002e88:	3748      	adds	r7, #72	; 0x48
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000090 	.word	0x20000090
 8002e94:	ee6b2800 	.word	0xee6b2800

08002e98 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b092      	sub	sp, #72	; 0x48
 8002e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e9e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
 8002ea6:	605a      	str	r2, [r3, #4]
 8002ea8:	609a      	str	r2, [r3, #8]
 8002eaa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ebc:	f107 031c 	add.w	r3, r7, #28
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ec6:	463b      	mov	r3, r7
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	611a      	str	r2, [r3, #16]
 8002ed4:	615a      	str	r2, [r3, #20]
 8002ed6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002ed8:	4b40      	ldr	r3, [pc, #256]	; (8002fdc <_ZL12MX_TIM5_Initv+0x144>)
 8002eda:	4a41      	ldr	r2, [pc, #260]	; (8002fe0 <_ZL12MX_TIM5_Initv+0x148>)
 8002edc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 8002ede:	4b3f      	ldr	r3, [pc, #252]	; (8002fdc <_ZL12MX_TIM5_Initv+0x144>)
 8002ee0:	220f      	movs	r2, #15
 8002ee2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ee4:	4b3d      	ldr	r3, [pc, #244]	; (8002fdc <_ZL12MX_TIM5_Initv+0x144>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4000000000;
 8002eea:	4b3c      	ldr	r3, [pc, #240]	; (8002fdc <_ZL12MX_TIM5_Initv+0x144>)
 8002eec:	4a3d      	ldr	r2, [pc, #244]	; (8002fe4 <_ZL12MX_TIM5_Initv+0x14c>)
 8002eee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef0:	4b3a      	ldr	r3, [pc, #232]	; (8002fdc <_ZL12MX_TIM5_Initv+0x144>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002ef6:	4839      	ldr	r0, [pc, #228]	; (8002fdc <_ZL12MX_TIM5_Initv+0x144>)
 8002ef8:	f7ff f9a6 	bl	8002248 <HAL_TIM_Base_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bf14      	ite	ne
 8002f02:	2301      	movne	r3, #1
 8002f04:	2300      	moveq	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d001      	beq.n	8002f10 <_ZL12MX_TIM5_Initv+0x78>
  {
    Error_Handler();
 8002f0c:	f000 f8de 	bl	80030cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f14:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002f16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	482f      	ldr	r0, [pc, #188]	; (8002fdc <_ZL12MX_TIM5_Initv+0x144>)
 8002f1e:	f7fe ffb1 	bl	8001e84 <HAL_TIM_ConfigClockSource>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	bf14      	ite	ne
 8002f28:	2301      	movne	r3, #1
 8002f2a:	2300      	moveq	r3, #0
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <_ZL12MX_TIM5_Initv+0x9e>
  {
    Error_Handler();
 8002f32:	f000 f8cb 	bl	80030cc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8002f36:	4829      	ldr	r0, [pc, #164]	; (8002fdc <_ZL12MX_TIM5_Initv+0x144>)
 8002f38:	f7ff f9a0 	bl	800227c <HAL_TIM_OC_Init>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	bf14      	ite	ne
 8002f42:	2301      	movne	r3, #1
 8002f44:	2300      	moveq	r3, #0
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <_ZL12MX_TIM5_Initv+0xb8>
  {
    Error_Handler();
 8002f4c:	f000 f8be 	bl	80030cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002f50:	2304      	movs	r3, #4
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchronization_IT(&htim5, &sSlaveConfig) != HAL_OK)
 8002f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	481f      	ldr	r0, [pc, #124]	; (8002fdc <_ZL12MX_TIM5_Initv+0x144>)
 8002f60:	f7ff f849 	bl	8001ff6 <HAL_TIM_SlaveConfigSynchronization_IT>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	bf14      	ite	ne
 8002f6a:	2301      	movne	r3, #1
 8002f6c:	2300      	moveq	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <_ZL12MX_TIM5_Initv+0xe0>
  {
    Error_Handler();
 8002f74:	f000 f8aa 	bl	80030cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002f80:	f107 031c 	add.w	r3, r7, #28
 8002f84:	4619      	mov	r1, r3
 8002f86:	4815      	ldr	r0, [pc, #84]	; (8002fdc <_ZL12MX_TIM5_Initv+0x144>)
 8002f88:	f7ff fbc6 	bl	8002718 <HAL_TIMEx_MasterConfigSynchronization>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	bf14      	ite	ne
 8002f92:	2301      	movne	r3, #1
 8002f94:	2300      	moveq	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <_ZL12MX_TIM5_Initv+0x108>
  {
    Error_Handler();
 8002f9c:	f000 f896 	bl	80030cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8002fa0:	2330      	movs	r3, #48	; 0x30
 8002fa2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 25000;
 8002fa4:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8002fa8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002faa:	2300      	movs	r3, #0
 8002fac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002fb2:	463b      	mov	r3, r7
 8002fb4:	2204      	movs	r2, #4
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4808      	ldr	r0, [pc, #32]	; (8002fdc <_ZL12MX_TIM5_Initv+0x144>)
 8002fba:	f7ff fa85 	bl	80024c8 <HAL_TIM_OC_ConfigChannel>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	bf14      	ite	ne
 8002fc4:	2301      	movne	r3, #1
 8002fc6:	2300      	moveq	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <_ZL12MX_TIM5_Initv+0x13a>
  {
    Error_Handler();
 8002fce:	f000 f87d 	bl	80030cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002fd2:	bf00      	nop
 8002fd4:	3748      	adds	r7, #72	; 0x48
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200000cc 	.word	0x200000cc
 8002fe0:	40000c00 	.word	0x40000c00
 8002fe4:	ee6b2800 	.word	0xee6b2800

08002fe8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002fec:	4b13      	ldr	r3, [pc, #76]	; (800303c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002fee:	4a14      	ldr	r2, [pc, #80]	; (8003040 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002ff0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ff2:	4b12      	ldr	r3, [pc, #72]	; (800303c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ff4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ff8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ffa:	4b10      	ldr	r3, [pc, #64]	; (800303c <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003000:	4b0e      	ldr	r3, [pc, #56]	; (800303c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003002:	2200      	movs	r2, #0
 8003004:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003008:	2200      	movs	r2, #0
 800300a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800300c:	4b0b      	ldr	r3, [pc, #44]	; (800303c <_ZL19MX_USART2_UART_Initv+0x54>)
 800300e:	220c      	movs	r2, #12
 8003010:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003012:	4b0a      	ldr	r3, [pc, #40]	; (800303c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003014:	2200      	movs	r2, #0
 8003016:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003018:	4b08      	ldr	r3, [pc, #32]	; (800303c <_ZL19MX_USART2_UART_Initv+0x54>)
 800301a:	2200      	movs	r2, #0
 800301c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800301e:	4807      	ldr	r0, [pc, #28]	; (800303c <_ZL19MX_USART2_UART_Initv+0x54>)
 8003020:	f7ff fce0 	bl	80029e4 <HAL_UART_Init>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	bf14      	ite	ne
 800302a:	2301      	movne	r3, #1
 800302c:	2300      	moveq	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8003034:	f000 f84a 	bl	80030cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003038:	bf00      	nop
 800303a:	bd80      	pop	{r7, pc}
 800303c:	20000108 	.word	0x20000108
 8003040:	40004400 	.word	0x40004400

08003044 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800304a:	f107 030c 	add.w	r3, r7, #12
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	605a      	str	r2, [r3, #4]
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	60da      	str	r2, [r3, #12]
 8003058:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800305a:	2300      	movs	r3, #0
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	4a19      	ldr	r2, [pc, #100]	; (80030c4 <_ZL12MX_GPIO_Initv+0x80>)
 8003060:	4b18      	ldr	r3, [pc, #96]	; (80030c4 <_ZL12MX_GPIO_Initv+0x80>)
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6313      	str	r3, [r2, #48]	; 0x30
 800306a:	4b16      	ldr	r3, [pc, #88]	; (80030c4 <_ZL12MX_GPIO_Initv+0x80>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003076:	2300      	movs	r3, #0
 8003078:	607b      	str	r3, [r7, #4]
 800307a:	4a12      	ldr	r2, [pc, #72]	; (80030c4 <_ZL12MX_GPIO_Initv+0x80>)
 800307c:	4b11      	ldr	r3, [pc, #68]	; (80030c4 <_ZL12MX_GPIO_Initv+0x80>)
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	f043 0302 	orr.w	r3, r3, #2
 8003084:	6313      	str	r3, [r2, #48]	; 0x30
 8003086:	4b0f      	ldr	r3, [pc, #60]	; (80030c4 <_ZL12MX_GPIO_Initv+0x80>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	607b      	str	r3, [r7, #4]
 8003090:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin, GPIO_PIN_RESET);
 8003092:	2200      	movs	r2, #0
 8003094:	f240 4107 	movw	r1, #1031	; 0x407
 8003098:	480b      	ldr	r0, [pc, #44]	; (80030c8 <_ZL12MX_GPIO_Initv+0x84>)
 800309a:	f7fe fb99 	bl	80017d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT1_Pin OUT2_Pin OUT3_Pin OUT4_Pin */
  GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin;
 800309e:	f240 4307 	movw	r3, #1031	; 0x407
 80030a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030a4:	2301      	movs	r3, #1
 80030a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b0:	f107 030c 	add.w	r3, r7, #12
 80030b4:	4619      	mov	r1, r3
 80030b6:	4804      	ldr	r0, [pc, #16]	; (80030c8 <_ZL12MX_GPIO_Initv+0x84>)
 80030b8:	f7fe faaa 	bl	8001610 <HAL_GPIO_Init>

}
 80030bc:	bf00      	nop
 80030be:	3720      	adds	r7, #32
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40023800 	.word	0x40023800
 80030c8:	40020400 	.word	0x40020400

080030cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
	...

080030dc <_Z41__static_initialization_and_destruction_0ii>:
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d10c      	bne.n	8003106 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d107      	bne.n	8003106 <_Z41__static_initialization_and_destruction_0ii+0x2a>
Clock clock;
 80030f6:	4806      	ldr	r0, [pc, #24]	; (8003110 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80030f8:	f000 f92a 	bl	8003350 <_ZN5ClockC1Ev>
 80030fc:	4a05      	ldr	r2, [pc, #20]	; (8003114 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80030fe:	4906      	ldr	r1, [pc, #24]	; (8003118 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003100:	4803      	ldr	r0, [pc, #12]	; (8003110 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003102:	f000 f9e2 	bl	80034ca <__aeabi_atexit>
}
 8003106:	bf00      	nop
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000148 	.word	0x20000148
 8003114:	20000000 	.word	0x20000000
 8003118:	08003367 	.word	0x08003367

0800311c <_GLOBAL__sub_I_htim2>:
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
 8003120:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003124:	2001      	movs	r0, #1
 8003126:	f7ff ffd9 	bl	80030dc <_Z41__static_initialization_and_destruction_0ii>
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800312c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312e:	4b0c      	ldr	r3, [pc, #48]	; (8003160 <HAL_MspInit+0x34>)
 8003130:	2100      	movs	r1, #0
 8003132:	9100      	str	r1, [sp, #0]
 8003134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003136:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800313a:	645a      	str	r2, [r3, #68]	; 0x44
 800313c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800313e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003142:	9200      	str	r2, [sp, #0]
 8003144:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003146:	9101      	str	r1, [sp, #4]
 8003148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800314a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800314e:	641a      	str	r2, [r3, #64]	; 0x40
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	9301      	str	r3, [sp, #4]
 8003158:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800315a:	b002      	add	sp, #8
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800

08003164 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003164:	b510      	push	{r4, lr}
 8003166:	4604      	mov	r4, r0
 8003168:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800316a:	2214      	movs	r2, #20
 800316c:	2100      	movs	r1, #0
 800316e:	a803      	add	r0, sp, #12
 8003170:	f000 f9e2 	bl	8003538 <memset>
  if(htim_base->Instance==TIM2)
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317a:	d129      	bne.n	80031d0 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800317c:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8003180:	2400      	movs	r4, #0
 8003182:	9400      	str	r4, [sp, #0]
 8003184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003186:	481d      	ldr	r0, [pc, #116]	; (80031fc <HAL_TIM_Base_MspInit+0x98>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003188:	f042 0201 	orr.w	r2, r2, #1
 800318c:	641a      	str	r2, [r3, #64]	; 0x40
 800318e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003190:	f002 0201 	and.w	r2, r2, #1
 8003194:	9200      	str	r2, [sp, #0]
 8003196:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003198:	9401      	str	r4, [sp, #4]
 800319a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800319c:	f042 0201 	orr.w	r2, r2, #1
 80031a0:	631a      	str	r2, [r3, #48]	; 0x30
 80031a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a4:	f003 0301 	and.w	r3, r3, #1
 80031a8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031aa:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ac:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ae:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031b0:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031b4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031b6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b8:	f7fe fa2a 	bl	8001610 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80031bc:	201c      	movs	r0, #28
 80031be:	4622      	mov	r2, r4
 80031c0:	4621      	mov	r1, r4
 80031c2:	f7fe f9cf 	bl	8001564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031c6:	201c      	movs	r0, #28
  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80031c8:	f7fe fa00 	bl	80015cc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80031cc:	b008      	add	sp, #32
 80031ce:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM5)
 80031d0:	4a0b      	ldr	r2, [pc, #44]	; (8003200 <HAL_TIM_Base_MspInit+0x9c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d1fa      	bne.n	80031cc <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80031d6:	4b0b      	ldr	r3, [pc, #44]	; (8003204 <HAL_TIM_Base_MspInit+0xa0>)
 80031d8:	2200      	movs	r2, #0
 80031da:	9202      	str	r2, [sp, #8]
 80031dc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80031de:	f041 0108 	orr.w	r1, r1, #8
 80031e2:	6419      	str	r1, [r3, #64]	; 0x40
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 80031ec:	2032      	movs	r0, #50	; 0x32
 80031ee:	2101      	movs	r1, #1
    __HAL_RCC_TIM5_CLK_ENABLE();
 80031f0:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 80031f2:	f7fe f9b7 	bl	8001564 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80031f6:	2032      	movs	r0, #50	; 0x32
 80031f8:	e7e6      	b.n	80031c8 <HAL_TIM_Base_MspInit+0x64>
 80031fa:	bf00      	nop
 80031fc:	40020000 	.word	0x40020000
 8003200:	40000c00 	.word	0x40000c00
 8003204:	40023800 	.word	0x40023800

08003208 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003208:	b510      	push	{r4, lr}
 800320a:	4604      	mov	r4, r0
 800320c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800320e:	2214      	movs	r2, #20
 8003210:	2100      	movs	r1, #0
 8003212:	a803      	add	r0, sp, #12
 8003214:	f000 f990 	bl	8003538 <memset>
  if(huart->Instance==USART2)
 8003218:	6822      	ldr	r2, [r4, #0]
 800321a:	4b15      	ldr	r3, [pc, #84]	; (8003270 <HAL_UART_MspInit+0x68>)
 800321c:	429a      	cmp	r2, r3
 800321e:	d124      	bne.n	800326a <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003220:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8003224:	2100      	movs	r1, #0
 8003226:	9101      	str	r1, [sp, #4]
 8003228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800322a:	4812      	ldr	r0, [pc, #72]	; (8003274 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800322c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003230:	641a      	str	r2, [r3, #64]	; 0x40
 8003232:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003234:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003238:	9201      	str	r2, [sp, #4]
 800323a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800323c:	9102      	str	r1, [sp, #8]
 800323e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003240:	f042 0201 	orr.w	r2, r2, #1
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	9302      	str	r3, [sp, #8]
 800324e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003250:	230c      	movs	r3, #12
 8003252:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003254:	2302      	movs	r3, #2
 8003256:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003258:	2301      	movs	r3, #1
 800325a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800325c:	2303      	movs	r3, #3
 800325e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003260:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003262:	2307      	movs	r3, #7
 8003264:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003266:	f7fe f9d3 	bl	8001610 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800326a:	b008      	add	sp, #32
 800326c:	bd10      	pop	{r4, pc}
 800326e:	bf00      	nop
 8003270:	40004400 	.word	0x40004400
 8003274:	40020000 	.word	0x40020000

08003278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003278:	b480      	push	{r7}
 800327a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800327c:	bf00      	nop
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr

08003286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003286:	b480      	push	{r7}
 8003288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800328a:	e7fe      	b.n	800328a <HardFault_Handler+0x4>

0800328c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003290:	e7fe      	b.n	8003290 <MemManage_Handler+0x4>

08003292 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003292:	b480      	push	{r7}
 8003294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003296:	e7fe      	b.n	8003296 <BusFault_Handler+0x4>

08003298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800329c:	e7fe      	b.n	800329c <UsageFault_Handler+0x4>

0800329e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800329e:	b480      	push	{r7}
 80032a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032a2:	bf00      	nop
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032b0:	bf00      	nop
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr

080032ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032ba:	b480      	push	{r7}
 80032bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0




  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032cc:	f7fe f912 	bl	80014f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032d0:	bf00      	nop
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */



  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032d8:	4804      	ldr	r0, [pc, #16]	; (80032ec <TIM2_IRQHandler+0x18>)
 80032da:	f7fe feae 	bl	800203a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  htim2.Instance->CNT = 0;
 80032de:	4b03      	ldr	r3, [pc, #12]	; (80032ec <TIM2_IRQHandler+0x18>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2200      	movs	r2, #0
 80032e4:	625a      	str	r2, [r3, #36]	; 0x24
  // htim5.Instance->CCR2=htim2.Instance->CCR1/2;
  /* USER CODE END TIM2_IRQn 1 */
}
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000090 	.word	0x20000090

080032f0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  // HAL_GPIO_TogglePin(OUT3_GPIO_Port,OUT3_Pin);
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80032f4:	4802      	ldr	r0, [pc, #8]	; (8003300 <TIM5_IRQHandler+0x10>)
 80032f6:	f7fe fea0 	bl	800203a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80032fa:	bf00      	nop
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	200000cc 	.word	0x200000cc

08003304 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003304:	490f      	ldr	r1, [pc, #60]	; (8003344 <SystemInit+0x40>)
 8003306:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800330a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800330e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003312:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <SystemInit+0x44>)
 8003314:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003316:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003318:	f042 0201 	orr.w	r2, r2, #1
 800331c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800331e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003326:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800332a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800332c:	4a07      	ldr	r2, [pc, #28]	; (800334c <SystemInit+0x48>)
 800332e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003336:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003338:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800333a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800333e:	608b      	str	r3, [r1, #8]
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	e000ed00 	.word	0xe000ed00
 8003348:	40023800 	.word	0x40023800
 800334c:	24003010 	.word	0x24003010

08003350 <_ZN5ClockC1Ev>:
 */
#include "clock.hpp"
#include "stm32f4xx.h"

// Constructor
Clock::Clock(){
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
	;
}
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4618      	mov	r0, r3
 800335c:	370c      	adds	r7, #12
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr

08003366 <_ZN5ClockD1Ev>:
// Destructor
Clock::~Clock(void){
 8003366:	b480      	push	{r7}
 8003368:	b083      	sub	sp, #12
 800336a:	af00      	add	r7, sp, #0
 800336c:	6078      	str	r0, [r7, #4]
	;
}
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4618      	mov	r0, r3
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <_ZN5Clock10masterTickEv>:
void Clock::masterTick(void){
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
	master++;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	609a      	str	r2, [r3, #8]
	sub = 0;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	60da      	str	r2, [r3, #12]
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <_ZN5Clock7subTickEv>:
void Clock::subTick(void){
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	if(sub < subDiv){
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68da      	ldr	r2, [r3, #12]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d205      	bcs.n	80033c0 <_ZN5Clock7subTickEv+0x20>
		sub++;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	60da      	str	r2, [r3, #12]
	}
	else{
		sub = subDiv;
	}
}
 80033be:	e003      	b.n	80033c8 <_ZN5Clock7subTickEv+0x28>
		sub = subDiv;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	60da      	str	r2, [r3, #12]
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <_ZN5Clock8setTimerEP17TIM_HandleTypeDefS1_>:
// This should happen in the constructor!
void Clock::setTimer(TIM_HandleTypeDef* master, TIM_HandleTypeDef* slave){
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
	masterTimer = master;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	615a      	str	r2, [r3, #20]
	slaveTimer = slave;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	619a      	str	r2, [r3, #24]
}
 80033ec:	bf00      	nop
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <_ZN5Clock9setPeriodEv>:
	lockState = false;
}
bool Clock::isLocked(void){
	return lockState;
}
void Clock::setPeriod(void){
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
	if(clockSource == EXTERNAL){
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	7f1b      	ldrb	r3, [r3, #28]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d105      	bne.n	8003414 <_ZN5Clock9setPeriodEv+0x1c>
			period = masterTimer->Instance->CCR1;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	601a      	str	r2, [r3, #0]
	}
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <_ZN5Clock9setSourceE11ClockSource>:
		period = masterTimer->Instance->CCR1;
		// masterTimer->Instance->CCR2 = period;
	}
}

void Clock::setSource(enum ClockSource source){
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	70fb      	strb	r3, [r7, #3]
	clockSource = source;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	771a      	strb	r2, [r3, #28]
	if(source == INTERNAL){
 8003432:	78fb      	ldrb	r3, [r7, #3]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d10c      	bne.n	8003452 <_ZN5Clock9setSourceE11ClockSource+0x32>
		// Do not use the external trigger
		HAL_TIM_IC_Stop_IT(masterTimer, TIM_CHANNEL_1);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	2100      	movs	r1, #0
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff f934 	bl	80026ac <HAL_TIM_IC_Stop_IT>
		HAL_TIM_OC_Start_IT(masterTimer, TIM_CHANNEL_2);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	2104      	movs	r1, #4
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff f8b0 	bl	80025b0 <HAL_TIM_OC_Start_IT>
	else if(source == EXTERNAL){
		HAL_TIM_OC_Stop_IT(masterTimer, TIM_CHANNEL_2);
		HAL_TIM_IC_Start_IT(masterTimer, TIM_CHANNEL_1);

	}
}
 8003450:	e00e      	b.n	8003470 <_ZN5Clock9setSourceE11ClockSource+0x50>
	else if(source == EXTERNAL){
 8003452:	78fb      	ldrb	r3, [r7, #3]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d10b      	bne.n	8003470 <_ZN5Clock9setSourceE11ClockSource+0x50>
		HAL_TIM_OC_Stop_IT(masterTimer, TIM_CHANNEL_2);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	2104      	movs	r1, #4
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff f8f6 	bl	8002650 <HAL_TIM_OC_Stop_IT>
		HAL_TIM_IC_Start_IT(masterTimer, TIM_CHANNEL_1);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f7ff f8f2 	bl	8002654 <HAL_TIM_IC_Start_IT>
}
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800347c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800347e:	e003      	b.n	8003488 <LoopCopyDataInit>

08003480 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003482:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003484:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003486:	3104      	adds	r1, #4

08003488 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003488:	480b      	ldr	r0, [pc, #44]	; (80034b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800348a:	4b0c      	ldr	r3, [pc, #48]	; (80034bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800348c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800348e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003490:	d3f6      	bcc.n	8003480 <CopyDataInit>
  ldr  r2, =_sbss
 8003492:	4a0b      	ldr	r2, [pc, #44]	; (80034c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003494:	e002      	b.n	800349c <LoopFillZerobss>

08003496 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003496:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003498:	f842 3b04 	str.w	r3, [r2], #4

0800349c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800349c:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800349e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034a0:	d3f9      	bcc.n	8003496 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034a2:	f7ff ff2f 	bl	8003304 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034a6:	f000 f823 	bl	80034f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034aa:	f7ff fb93 	bl	8002bd4 <main>
  bx  lr    
 80034ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80034b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80034b4:	0800407c 	.word	0x0800407c
  ldr  r0, =_sdata
 80034b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80034bc:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80034c0:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80034c4:	20000180 	.word	0x20000180

080034c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034c8:	e7fe      	b.n	80034c8 <ADC_IRQHandler>

080034ca <__aeabi_atexit>:
 80034ca:	460b      	mov	r3, r1
 80034cc:	4601      	mov	r1, r0
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 b800 	b.w	80034d4 <__cxa_atexit>

080034d4 <__cxa_atexit>:
 80034d4:	b510      	push	{r4, lr}
 80034d6:	4c05      	ldr	r4, [pc, #20]	; (80034ec <__cxa_atexit+0x18>)
 80034d8:	4613      	mov	r3, r2
 80034da:	b12c      	cbz	r4, 80034e8 <__cxa_atexit+0x14>
 80034dc:	460a      	mov	r2, r1
 80034de:	4601      	mov	r1, r0
 80034e0:	2002      	movs	r0, #2
 80034e2:	f3af 8000 	nop.w
 80034e6:	bd10      	pop	{r4, pc}
 80034e8:	4620      	mov	r0, r4
 80034ea:	bd10      	pop	{r4, pc}
 80034ec:	00000000 	.word	0x00000000

080034f0 <__libc_init_array>:
 80034f0:	b570      	push	{r4, r5, r6, lr}
 80034f2:	4e0d      	ldr	r6, [pc, #52]	; (8003528 <__libc_init_array+0x38>)
 80034f4:	4c0d      	ldr	r4, [pc, #52]	; (800352c <__libc_init_array+0x3c>)
 80034f6:	1ba4      	subs	r4, r4, r6
 80034f8:	10a4      	asrs	r4, r4, #2
 80034fa:	2500      	movs	r5, #0
 80034fc:	42a5      	cmp	r5, r4
 80034fe:	d109      	bne.n	8003514 <__libc_init_array+0x24>
 8003500:	4e0b      	ldr	r6, [pc, #44]	; (8003530 <__libc_init_array+0x40>)
 8003502:	4c0c      	ldr	r4, [pc, #48]	; (8003534 <__libc_init_array+0x44>)
 8003504:	f000 fca8 	bl	8003e58 <_init>
 8003508:	1ba4      	subs	r4, r4, r6
 800350a:	10a4      	asrs	r4, r4, #2
 800350c:	2500      	movs	r5, #0
 800350e:	42a5      	cmp	r5, r4
 8003510:	d105      	bne.n	800351e <__libc_init_array+0x2e>
 8003512:	bd70      	pop	{r4, r5, r6, pc}
 8003514:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003518:	4798      	blx	r3
 800351a:	3501      	adds	r5, #1
 800351c:	e7ee      	b.n	80034fc <__libc_init_array+0xc>
 800351e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003522:	4798      	blx	r3
 8003524:	3501      	adds	r5, #1
 8003526:	e7f2      	b.n	800350e <__libc_init_array+0x1e>
 8003528:	08004070 	.word	0x08004070
 800352c:	08004070 	.word	0x08004070
 8003530:	08004070 	.word	0x08004070
 8003534:	08004078 	.word	0x08004078

08003538 <memset>:
 8003538:	4402      	add	r2, r0
 800353a:	4603      	mov	r3, r0
 800353c:	4293      	cmp	r3, r2
 800353e:	d100      	bne.n	8003542 <memset+0xa>
 8003540:	4770      	bx	lr
 8003542:	f803 1b01 	strb.w	r1, [r3], #1
 8003546:	e7f9      	b.n	800353c <memset+0x4>

08003548 <siprintf>:
 8003548:	b40e      	push	{r1, r2, r3}
 800354a:	b500      	push	{lr}
 800354c:	b09c      	sub	sp, #112	; 0x70
 800354e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003552:	ab1d      	add	r3, sp, #116	; 0x74
 8003554:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003558:	9002      	str	r0, [sp, #8]
 800355a:	9006      	str	r0, [sp, #24]
 800355c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003560:	480a      	ldr	r0, [pc, #40]	; (800358c <siprintf+0x44>)
 8003562:	9104      	str	r1, [sp, #16]
 8003564:	9107      	str	r1, [sp, #28]
 8003566:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800356a:	f853 2b04 	ldr.w	r2, [r3], #4
 800356e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003572:	6800      	ldr	r0, [r0, #0]
 8003574:	9301      	str	r3, [sp, #4]
 8003576:	a902      	add	r1, sp, #8
 8003578:	f000 f866 	bl	8003648 <_svfiprintf_r>
 800357c:	9b02      	ldr	r3, [sp, #8]
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
 8003582:	b01c      	add	sp, #112	; 0x70
 8003584:	f85d eb04 	ldr.w	lr, [sp], #4
 8003588:	b003      	add	sp, #12
 800358a:	4770      	bx	lr
 800358c:	20000010 	.word	0x20000010

08003590 <__ssputs_r>:
 8003590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003594:	688e      	ldr	r6, [r1, #8]
 8003596:	429e      	cmp	r6, r3
 8003598:	4682      	mov	sl, r0
 800359a:	460c      	mov	r4, r1
 800359c:	4691      	mov	r9, r2
 800359e:	4698      	mov	r8, r3
 80035a0:	d835      	bhi.n	800360e <__ssputs_r+0x7e>
 80035a2:	898a      	ldrh	r2, [r1, #12]
 80035a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035a8:	d031      	beq.n	800360e <__ssputs_r+0x7e>
 80035aa:	6825      	ldr	r5, [r4, #0]
 80035ac:	6909      	ldr	r1, [r1, #16]
 80035ae:	1a6f      	subs	r7, r5, r1
 80035b0:	6965      	ldr	r5, [r4, #20]
 80035b2:	2302      	movs	r3, #2
 80035b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80035bc:	f108 0301 	add.w	r3, r8, #1
 80035c0:	443b      	add	r3, r7
 80035c2:	429d      	cmp	r5, r3
 80035c4:	bf38      	it	cc
 80035c6:	461d      	movcc	r5, r3
 80035c8:	0553      	lsls	r3, r2, #21
 80035ca:	d531      	bpl.n	8003630 <__ssputs_r+0xa0>
 80035cc:	4629      	mov	r1, r5
 80035ce:	f000 fb39 	bl	8003c44 <_malloc_r>
 80035d2:	4606      	mov	r6, r0
 80035d4:	b950      	cbnz	r0, 80035ec <__ssputs_r+0x5c>
 80035d6:	230c      	movs	r3, #12
 80035d8:	f8ca 3000 	str.w	r3, [sl]
 80035dc:	89a3      	ldrh	r3, [r4, #12]
 80035de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035e2:	81a3      	strh	r3, [r4, #12]
 80035e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ec:	463a      	mov	r2, r7
 80035ee:	6921      	ldr	r1, [r4, #16]
 80035f0:	f000 fab4 	bl	8003b5c <memcpy>
 80035f4:	89a3      	ldrh	r3, [r4, #12]
 80035f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035fe:	81a3      	strh	r3, [r4, #12]
 8003600:	6126      	str	r6, [r4, #16]
 8003602:	6165      	str	r5, [r4, #20]
 8003604:	443e      	add	r6, r7
 8003606:	1bed      	subs	r5, r5, r7
 8003608:	6026      	str	r6, [r4, #0]
 800360a:	60a5      	str	r5, [r4, #8]
 800360c:	4646      	mov	r6, r8
 800360e:	4546      	cmp	r6, r8
 8003610:	bf28      	it	cs
 8003612:	4646      	movcs	r6, r8
 8003614:	4632      	mov	r2, r6
 8003616:	4649      	mov	r1, r9
 8003618:	6820      	ldr	r0, [r4, #0]
 800361a:	f000 faaa 	bl	8003b72 <memmove>
 800361e:	68a3      	ldr	r3, [r4, #8]
 8003620:	1b9b      	subs	r3, r3, r6
 8003622:	60a3      	str	r3, [r4, #8]
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	441e      	add	r6, r3
 8003628:	6026      	str	r6, [r4, #0]
 800362a:	2000      	movs	r0, #0
 800362c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003630:	462a      	mov	r2, r5
 8003632:	f000 fb65 	bl	8003d00 <_realloc_r>
 8003636:	4606      	mov	r6, r0
 8003638:	2800      	cmp	r0, #0
 800363a:	d1e1      	bne.n	8003600 <__ssputs_r+0x70>
 800363c:	6921      	ldr	r1, [r4, #16]
 800363e:	4650      	mov	r0, sl
 8003640:	f000 fab2 	bl	8003ba8 <_free_r>
 8003644:	e7c7      	b.n	80035d6 <__ssputs_r+0x46>
	...

08003648 <_svfiprintf_r>:
 8003648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800364c:	b09d      	sub	sp, #116	; 0x74
 800364e:	4680      	mov	r8, r0
 8003650:	9303      	str	r3, [sp, #12]
 8003652:	898b      	ldrh	r3, [r1, #12]
 8003654:	061c      	lsls	r4, r3, #24
 8003656:	460d      	mov	r5, r1
 8003658:	4616      	mov	r6, r2
 800365a:	d50f      	bpl.n	800367c <_svfiprintf_r+0x34>
 800365c:	690b      	ldr	r3, [r1, #16]
 800365e:	b96b      	cbnz	r3, 800367c <_svfiprintf_r+0x34>
 8003660:	2140      	movs	r1, #64	; 0x40
 8003662:	f000 faef 	bl	8003c44 <_malloc_r>
 8003666:	6028      	str	r0, [r5, #0]
 8003668:	6128      	str	r0, [r5, #16]
 800366a:	b928      	cbnz	r0, 8003678 <_svfiprintf_r+0x30>
 800366c:	230c      	movs	r3, #12
 800366e:	f8c8 3000 	str.w	r3, [r8]
 8003672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003676:	e0c5      	b.n	8003804 <_svfiprintf_r+0x1bc>
 8003678:	2340      	movs	r3, #64	; 0x40
 800367a:	616b      	str	r3, [r5, #20]
 800367c:	2300      	movs	r3, #0
 800367e:	9309      	str	r3, [sp, #36]	; 0x24
 8003680:	2320      	movs	r3, #32
 8003682:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003686:	2330      	movs	r3, #48	; 0x30
 8003688:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800368c:	f04f 0b01 	mov.w	fp, #1
 8003690:	4637      	mov	r7, r6
 8003692:	463c      	mov	r4, r7
 8003694:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003698:	2b00      	cmp	r3, #0
 800369a:	d13c      	bne.n	8003716 <_svfiprintf_r+0xce>
 800369c:	ebb7 0a06 	subs.w	sl, r7, r6
 80036a0:	d00b      	beq.n	80036ba <_svfiprintf_r+0x72>
 80036a2:	4653      	mov	r3, sl
 80036a4:	4632      	mov	r2, r6
 80036a6:	4629      	mov	r1, r5
 80036a8:	4640      	mov	r0, r8
 80036aa:	f7ff ff71 	bl	8003590 <__ssputs_r>
 80036ae:	3001      	adds	r0, #1
 80036b0:	f000 80a3 	beq.w	80037fa <_svfiprintf_r+0x1b2>
 80036b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036b6:	4453      	add	r3, sl
 80036b8:	9309      	str	r3, [sp, #36]	; 0x24
 80036ba:	783b      	ldrb	r3, [r7, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	f000 809c 	beq.w	80037fa <_svfiprintf_r+0x1b2>
 80036c2:	2300      	movs	r3, #0
 80036c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036c8:	9304      	str	r3, [sp, #16]
 80036ca:	9307      	str	r3, [sp, #28]
 80036cc:	9205      	str	r2, [sp, #20]
 80036ce:	9306      	str	r3, [sp, #24]
 80036d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036d4:	931a      	str	r3, [sp, #104]	; 0x68
 80036d6:	2205      	movs	r2, #5
 80036d8:	7821      	ldrb	r1, [r4, #0]
 80036da:	4850      	ldr	r0, [pc, #320]	; (800381c <_svfiprintf_r+0x1d4>)
 80036dc:	f7fc fd78 	bl	80001d0 <memchr>
 80036e0:	1c67      	adds	r7, r4, #1
 80036e2:	9b04      	ldr	r3, [sp, #16]
 80036e4:	b9d8      	cbnz	r0, 800371e <_svfiprintf_r+0xd6>
 80036e6:	06d9      	lsls	r1, r3, #27
 80036e8:	bf44      	itt	mi
 80036ea:	2220      	movmi	r2, #32
 80036ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80036f0:	071a      	lsls	r2, r3, #28
 80036f2:	bf44      	itt	mi
 80036f4:	222b      	movmi	r2, #43	; 0x2b
 80036f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80036fa:	7822      	ldrb	r2, [r4, #0]
 80036fc:	2a2a      	cmp	r2, #42	; 0x2a
 80036fe:	d016      	beq.n	800372e <_svfiprintf_r+0xe6>
 8003700:	9a07      	ldr	r2, [sp, #28]
 8003702:	2100      	movs	r1, #0
 8003704:	200a      	movs	r0, #10
 8003706:	4627      	mov	r7, r4
 8003708:	3401      	adds	r4, #1
 800370a:	783b      	ldrb	r3, [r7, #0]
 800370c:	3b30      	subs	r3, #48	; 0x30
 800370e:	2b09      	cmp	r3, #9
 8003710:	d951      	bls.n	80037b6 <_svfiprintf_r+0x16e>
 8003712:	b1c9      	cbz	r1, 8003748 <_svfiprintf_r+0x100>
 8003714:	e011      	b.n	800373a <_svfiprintf_r+0xf2>
 8003716:	2b25      	cmp	r3, #37	; 0x25
 8003718:	d0c0      	beq.n	800369c <_svfiprintf_r+0x54>
 800371a:	4627      	mov	r7, r4
 800371c:	e7b9      	b.n	8003692 <_svfiprintf_r+0x4a>
 800371e:	4a3f      	ldr	r2, [pc, #252]	; (800381c <_svfiprintf_r+0x1d4>)
 8003720:	1a80      	subs	r0, r0, r2
 8003722:	fa0b f000 	lsl.w	r0, fp, r0
 8003726:	4318      	orrs	r0, r3
 8003728:	9004      	str	r0, [sp, #16]
 800372a:	463c      	mov	r4, r7
 800372c:	e7d3      	b.n	80036d6 <_svfiprintf_r+0x8e>
 800372e:	9a03      	ldr	r2, [sp, #12]
 8003730:	1d11      	adds	r1, r2, #4
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	9103      	str	r1, [sp, #12]
 8003736:	2a00      	cmp	r2, #0
 8003738:	db01      	blt.n	800373e <_svfiprintf_r+0xf6>
 800373a:	9207      	str	r2, [sp, #28]
 800373c:	e004      	b.n	8003748 <_svfiprintf_r+0x100>
 800373e:	4252      	negs	r2, r2
 8003740:	f043 0302 	orr.w	r3, r3, #2
 8003744:	9207      	str	r2, [sp, #28]
 8003746:	9304      	str	r3, [sp, #16]
 8003748:	783b      	ldrb	r3, [r7, #0]
 800374a:	2b2e      	cmp	r3, #46	; 0x2e
 800374c:	d10e      	bne.n	800376c <_svfiprintf_r+0x124>
 800374e:	787b      	ldrb	r3, [r7, #1]
 8003750:	2b2a      	cmp	r3, #42	; 0x2a
 8003752:	f107 0101 	add.w	r1, r7, #1
 8003756:	d132      	bne.n	80037be <_svfiprintf_r+0x176>
 8003758:	9b03      	ldr	r3, [sp, #12]
 800375a:	1d1a      	adds	r2, r3, #4
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	9203      	str	r2, [sp, #12]
 8003760:	2b00      	cmp	r3, #0
 8003762:	bfb8      	it	lt
 8003764:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003768:	3702      	adds	r7, #2
 800376a:	9305      	str	r3, [sp, #20]
 800376c:	4c2c      	ldr	r4, [pc, #176]	; (8003820 <_svfiprintf_r+0x1d8>)
 800376e:	7839      	ldrb	r1, [r7, #0]
 8003770:	2203      	movs	r2, #3
 8003772:	4620      	mov	r0, r4
 8003774:	f7fc fd2c 	bl	80001d0 <memchr>
 8003778:	b138      	cbz	r0, 800378a <_svfiprintf_r+0x142>
 800377a:	2340      	movs	r3, #64	; 0x40
 800377c:	1b00      	subs	r0, r0, r4
 800377e:	fa03 f000 	lsl.w	r0, r3, r0
 8003782:	9b04      	ldr	r3, [sp, #16]
 8003784:	4303      	orrs	r3, r0
 8003786:	9304      	str	r3, [sp, #16]
 8003788:	3701      	adds	r7, #1
 800378a:	7839      	ldrb	r1, [r7, #0]
 800378c:	4825      	ldr	r0, [pc, #148]	; (8003824 <_svfiprintf_r+0x1dc>)
 800378e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003792:	2206      	movs	r2, #6
 8003794:	1c7e      	adds	r6, r7, #1
 8003796:	f7fc fd1b 	bl	80001d0 <memchr>
 800379a:	2800      	cmp	r0, #0
 800379c:	d035      	beq.n	800380a <_svfiprintf_r+0x1c2>
 800379e:	4b22      	ldr	r3, [pc, #136]	; (8003828 <_svfiprintf_r+0x1e0>)
 80037a0:	b9fb      	cbnz	r3, 80037e2 <_svfiprintf_r+0x19a>
 80037a2:	9b03      	ldr	r3, [sp, #12]
 80037a4:	3307      	adds	r3, #7
 80037a6:	f023 0307 	bic.w	r3, r3, #7
 80037aa:	3308      	adds	r3, #8
 80037ac:	9303      	str	r3, [sp, #12]
 80037ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037b0:	444b      	add	r3, r9
 80037b2:	9309      	str	r3, [sp, #36]	; 0x24
 80037b4:	e76c      	b.n	8003690 <_svfiprintf_r+0x48>
 80037b6:	fb00 3202 	mla	r2, r0, r2, r3
 80037ba:	2101      	movs	r1, #1
 80037bc:	e7a3      	b.n	8003706 <_svfiprintf_r+0xbe>
 80037be:	2300      	movs	r3, #0
 80037c0:	9305      	str	r3, [sp, #20]
 80037c2:	4618      	mov	r0, r3
 80037c4:	240a      	movs	r4, #10
 80037c6:	460f      	mov	r7, r1
 80037c8:	3101      	adds	r1, #1
 80037ca:	783a      	ldrb	r2, [r7, #0]
 80037cc:	3a30      	subs	r2, #48	; 0x30
 80037ce:	2a09      	cmp	r2, #9
 80037d0:	d903      	bls.n	80037da <_svfiprintf_r+0x192>
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d0ca      	beq.n	800376c <_svfiprintf_r+0x124>
 80037d6:	9005      	str	r0, [sp, #20]
 80037d8:	e7c8      	b.n	800376c <_svfiprintf_r+0x124>
 80037da:	fb04 2000 	mla	r0, r4, r0, r2
 80037de:	2301      	movs	r3, #1
 80037e0:	e7f1      	b.n	80037c6 <_svfiprintf_r+0x17e>
 80037e2:	ab03      	add	r3, sp, #12
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	462a      	mov	r2, r5
 80037e8:	4b10      	ldr	r3, [pc, #64]	; (800382c <_svfiprintf_r+0x1e4>)
 80037ea:	a904      	add	r1, sp, #16
 80037ec:	4640      	mov	r0, r8
 80037ee:	f3af 8000 	nop.w
 80037f2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80037f6:	4681      	mov	r9, r0
 80037f8:	d1d9      	bne.n	80037ae <_svfiprintf_r+0x166>
 80037fa:	89ab      	ldrh	r3, [r5, #12]
 80037fc:	065b      	lsls	r3, r3, #25
 80037fe:	f53f af38 	bmi.w	8003672 <_svfiprintf_r+0x2a>
 8003802:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003804:	b01d      	add	sp, #116	; 0x74
 8003806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800380a:	ab03      	add	r3, sp, #12
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	462a      	mov	r2, r5
 8003810:	4b06      	ldr	r3, [pc, #24]	; (800382c <_svfiprintf_r+0x1e4>)
 8003812:	a904      	add	r1, sp, #16
 8003814:	4640      	mov	r0, r8
 8003816:	f000 f881 	bl	800391c <_printf_i>
 800381a:	e7ea      	b.n	80037f2 <_svfiprintf_r+0x1aa>
 800381c:	08003e90 	.word	0x08003e90
 8003820:	08003e96 	.word	0x08003e96
 8003824:	08003e9a 	.word	0x08003e9a
 8003828:	00000000 	.word	0x00000000
 800382c:	08003591 	.word	0x08003591

08003830 <_printf_common>:
 8003830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003834:	4691      	mov	r9, r2
 8003836:	461f      	mov	r7, r3
 8003838:	688a      	ldr	r2, [r1, #8]
 800383a:	690b      	ldr	r3, [r1, #16]
 800383c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003840:	4293      	cmp	r3, r2
 8003842:	bfb8      	it	lt
 8003844:	4613      	movlt	r3, r2
 8003846:	f8c9 3000 	str.w	r3, [r9]
 800384a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800384e:	4606      	mov	r6, r0
 8003850:	460c      	mov	r4, r1
 8003852:	b112      	cbz	r2, 800385a <_printf_common+0x2a>
 8003854:	3301      	adds	r3, #1
 8003856:	f8c9 3000 	str.w	r3, [r9]
 800385a:	6823      	ldr	r3, [r4, #0]
 800385c:	0699      	lsls	r1, r3, #26
 800385e:	bf42      	ittt	mi
 8003860:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003864:	3302      	addmi	r3, #2
 8003866:	f8c9 3000 	strmi.w	r3, [r9]
 800386a:	6825      	ldr	r5, [r4, #0]
 800386c:	f015 0506 	ands.w	r5, r5, #6
 8003870:	d107      	bne.n	8003882 <_printf_common+0x52>
 8003872:	f104 0a19 	add.w	sl, r4, #25
 8003876:	68e3      	ldr	r3, [r4, #12]
 8003878:	f8d9 2000 	ldr.w	r2, [r9]
 800387c:	1a9b      	subs	r3, r3, r2
 800387e:	429d      	cmp	r5, r3
 8003880:	db29      	blt.n	80038d6 <_printf_common+0xa6>
 8003882:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003886:	6822      	ldr	r2, [r4, #0]
 8003888:	3300      	adds	r3, #0
 800388a:	bf18      	it	ne
 800388c:	2301      	movne	r3, #1
 800388e:	0692      	lsls	r2, r2, #26
 8003890:	d42e      	bmi.n	80038f0 <_printf_common+0xc0>
 8003892:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003896:	4639      	mov	r1, r7
 8003898:	4630      	mov	r0, r6
 800389a:	47c0      	blx	r8
 800389c:	3001      	adds	r0, #1
 800389e:	d021      	beq.n	80038e4 <_printf_common+0xb4>
 80038a0:	6823      	ldr	r3, [r4, #0]
 80038a2:	68e5      	ldr	r5, [r4, #12]
 80038a4:	f8d9 2000 	ldr.w	r2, [r9]
 80038a8:	f003 0306 	and.w	r3, r3, #6
 80038ac:	2b04      	cmp	r3, #4
 80038ae:	bf08      	it	eq
 80038b0:	1aad      	subeq	r5, r5, r2
 80038b2:	68a3      	ldr	r3, [r4, #8]
 80038b4:	6922      	ldr	r2, [r4, #16]
 80038b6:	bf0c      	ite	eq
 80038b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038bc:	2500      	movne	r5, #0
 80038be:	4293      	cmp	r3, r2
 80038c0:	bfc4      	itt	gt
 80038c2:	1a9b      	subgt	r3, r3, r2
 80038c4:	18ed      	addgt	r5, r5, r3
 80038c6:	f04f 0900 	mov.w	r9, #0
 80038ca:	341a      	adds	r4, #26
 80038cc:	454d      	cmp	r5, r9
 80038ce:	d11b      	bne.n	8003908 <_printf_common+0xd8>
 80038d0:	2000      	movs	r0, #0
 80038d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d6:	2301      	movs	r3, #1
 80038d8:	4652      	mov	r2, sl
 80038da:	4639      	mov	r1, r7
 80038dc:	4630      	mov	r0, r6
 80038de:	47c0      	blx	r8
 80038e0:	3001      	adds	r0, #1
 80038e2:	d103      	bne.n	80038ec <_printf_common+0xbc>
 80038e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ec:	3501      	adds	r5, #1
 80038ee:	e7c2      	b.n	8003876 <_printf_common+0x46>
 80038f0:	18e1      	adds	r1, r4, r3
 80038f2:	1c5a      	adds	r2, r3, #1
 80038f4:	2030      	movs	r0, #48	; 0x30
 80038f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038fa:	4422      	add	r2, r4
 80038fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003900:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003904:	3302      	adds	r3, #2
 8003906:	e7c4      	b.n	8003892 <_printf_common+0x62>
 8003908:	2301      	movs	r3, #1
 800390a:	4622      	mov	r2, r4
 800390c:	4639      	mov	r1, r7
 800390e:	4630      	mov	r0, r6
 8003910:	47c0      	blx	r8
 8003912:	3001      	adds	r0, #1
 8003914:	d0e6      	beq.n	80038e4 <_printf_common+0xb4>
 8003916:	f109 0901 	add.w	r9, r9, #1
 800391a:	e7d7      	b.n	80038cc <_printf_common+0x9c>

0800391c <_printf_i>:
 800391c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003920:	4617      	mov	r7, r2
 8003922:	7e0a      	ldrb	r2, [r1, #24]
 8003924:	b085      	sub	sp, #20
 8003926:	2a6e      	cmp	r2, #110	; 0x6e
 8003928:	4698      	mov	r8, r3
 800392a:	4606      	mov	r6, r0
 800392c:	460c      	mov	r4, r1
 800392e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003930:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003934:	f000 80bc 	beq.w	8003ab0 <_printf_i+0x194>
 8003938:	d81a      	bhi.n	8003970 <_printf_i+0x54>
 800393a:	2a63      	cmp	r2, #99	; 0x63
 800393c:	d02e      	beq.n	800399c <_printf_i+0x80>
 800393e:	d80a      	bhi.n	8003956 <_printf_i+0x3a>
 8003940:	2a00      	cmp	r2, #0
 8003942:	f000 80c8 	beq.w	8003ad6 <_printf_i+0x1ba>
 8003946:	2a58      	cmp	r2, #88	; 0x58
 8003948:	f000 808a 	beq.w	8003a60 <_printf_i+0x144>
 800394c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003950:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003954:	e02a      	b.n	80039ac <_printf_i+0x90>
 8003956:	2a64      	cmp	r2, #100	; 0x64
 8003958:	d001      	beq.n	800395e <_printf_i+0x42>
 800395a:	2a69      	cmp	r2, #105	; 0x69
 800395c:	d1f6      	bne.n	800394c <_printf_i+0x30>
 800395e:	6821      	ldr	r1, [r4, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003966:	d023      	beq.n	80039b0 <_printf_i+0x94>
 8003968:	1d11      	adds	r1, r2, #4
 800396a:	6019      	str	r1, [r3, #0]
 800396c:	6813      	ldr	r3, [r2, #0]
 800396e:	e027      	b.n	80039c0 <_printf_i+0xa4>
 8003970:	2a73      	cmp	r2, #115	; 0x73
 8003972:	f000 80b4 	beq.w	8003ade <_printf_i+0x1c2>
 8003976:	d808      	bhi.n	800398a <_printf_i+0x6e>
 8003978:	2a6f      	cmp	r2, #111	; 0x6f
 800397a:	d02a      	beq.n	80039d2 <_printf_i+0xb6>
 800397c:	2a70      	cmp	r2, #112	; 0x70
 800397e:	d1e5      	bne.n	800394c <_printf_i+0x30>
 8003980:	680a      	ldr	r2, [r1, #0]
 8003982:	f042 0220 	orr.w	r2, r2, #32
 8003986:	600a      	str	r2, [r1, #0]
 8003988:	e003      	b.n	8003992 <_printf_i+0x76>
 800398a:	2a75      	cmp	r2, #117	; 0x75
 800398c:	d021      	beq.n	80039d2 <_printf_i+0xb6>
 800398e:	2a78      	cmp	r2, #120	; 0x78
 8003990:	d1dc      	bne.n	800394c <_printf_i+0x30>
 8003992:	2278      	movs	r2, #120	; 0x78
 8003994:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003998:	496e      	ldr	r1, [pc, #440]	; (8003b54 <_printf_i+0x238>)
 800399a:	e064      	b.n	8003a66 <_printf_i+0x14a>
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80039a2:	1d11      	adds	r1, r2, #4
 80039a4:	6019      	str	r1, [r3, #0]
 80039a6:	6813      	ldr	r3, [r2, #0]
 80039a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0a3      	b.n	8003af8 <_printf_i+0x1dc>
 80039b0:	f011 0f40 	tst.w	r1, #64	; 0x40
 80039b4:	f102 0104 	add.w	r1, r2, #4
 80039b8:	6019      	str	r1, [r3, #0]
 80039ba:	d0d7      	beq.n	800396c <_printf_i+0x50>
 80039bc:	f9b2 3000 	ldrsh.w	r3, [r2]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	da03      	bge.n	80039cc <_printf_i+0xb0>
 80039c4:	222d      	movs	r2, #45	; 0x2d
 80039c6:	425b      	negs	r3, r3
 80039c8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80039cc:	4962      	ldr	r1, [pc, #392]	; (8003b58 <_printf_i+0x23c>)
 80039ce:	220a      	movs	r2, #10
 80039d0:	e017      	b.n	8003a02 <_printf_i+0xe6>
 80039d2:	6820      	ldr	r0, [r4, #0]
 80039d4:	6819      	ldr	r1, [r3, #0]
 80039d6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80039da:	d003      	beq.n	80039e4 <_printf_i+0xc8>
 80039dc:	1d08      	adds	r0, r1, #4
 80039de:	6018      	str	r0, [r3, #0]
 80039e0:	680b      	ldr	r3, [r1, #0]
 80039e2:	e006      	b.n	80039f2 <_printf_i+0xd6>
 80039e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80039e8:	f101 0004 	add.w	r0, r1, #4
 80039ec:	6018      	str	r0, [r3, #0]
 80039ee:	d0f7      	beq.n	80039e0 <_printf_i+0xc4>
 80039f0:	880b      	ldrh	r3, [r1, #0]
 80039f2:	4959      	ldr	r1, [pc, #356]	; (8003b58 <_printf_i+0x23c>)
 80039f4:	2a6f      	cmp	r2, #111	; 0x6f
 80039f6:	bf14      	ite	ne
 80039f8:	220a      	movne	r2, #10
 80039fa:	2208      	moveq	r2, #8
 80039fc:	2000      	movs	r0, #0
 80039fe:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003a02:	6865      	ldr	r5, [r4, #4]
 8003a04:	60a5      	str	r5, [r4, #8]
 8003a06:	2d00      	cmp	r5, #0
 8003a08:	f2c0 809c 	blt.w	8003b44 <_printf_i+0x228>
 8003a0c:	6820      	ldr	r0, [r4, #0]
 8003a0e:	f020 0004 	bic.w	r0, r0, #4
 8003a12:	6020      	str	r0, [r4, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d13f      	bne.n	8003a98 <_printf_i+0x17c>
 8003a18:	2d00      	cmp	r5, #0
 8003a1a:	f040 8095 	bne.w	8003b48 <_printf_i+0x22c>
 8003a1e:	4675      	mov	r5, lr
 8003a20:	2a08      	cmp	r2, #8
 8003a22:	d10b      	bne.n	8003a3c <_printf_i+0x120>
 8003a24:	6823      	ldr	r3, [r4, #0]
 8003a26:	07da      	lsls	r2, r3, #31
 8003a28:	d508      	bpl.n	8003a3c <_printf_i+0x120>
 8003a2a:	6923      	ldr	r3, [r4, #16]
 8003a2c:	6862      	ldr	r2, [r4, #4]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	bfde      	ittt	le
 8003a32:	2330      	movle	r3, #48	; 0x30
 8003a34:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a38:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003a3c:	ebae 0305 	sub.w	r3, lr, r5
 8003a40:	6123      	str	r3, [r4, #16]
 8003a42:	f8cd 8000 	str.w	r8, [sp]
 8003a46:	463b      	mov	r3, r7
 8003a48:	aa03      	add	r2, sp, #12
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	4630      	mov	r0, r6
 8003a4e:	f7ff feef 	bl	8003830 <_printf_common>
 8003a52:	3001      	adds	r0, #1
 8003a54:	d155      	bne.n	8003b02 <_printf_i+0x1e6>
 8003a56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a5a:	b005      	add	sp, #20
 8003a5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a60:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003a64:	493c      	ldr	r1, [pc, #240]	; (8003b58 <_printf_i+0x23c>)
 8003a66:	6822      	ldr	r2, [r4, #0]
 8003a68:	6818      	ldr	r0, [r3, #0]
 8003a6a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003a6e:	f100 0504 	add.w	r5, r0, #4
 8003a72:	601d      	str	r5, [r3, #0]
 8003a74:	d001      	beq.n	8003a7a <_printf_i+0x15e>
 8003a76:	6803      	ldr	r3, [r0, #0]
 8003a78:	e002      	b.n	8003a80 <_printf_i+0x164>
 8003a7a:	0655      	lsls	r5, r2, #25
 8003a7c:	d5fb      	bpl.n	8003a76 <_printf_i+0x15a>
 8003a7e:	8803      	ldrh	r3, [r0, #0]
 8003a80:	07d0      	lsls	r0, r2, #31
 8003a82:	bf44      	itt	mi
 8003a84:	f042 0220 	orrmi.w	r2, r2, #32
 8003a88:	6022      	strmi	r2, [r4, #0]
 8003a8a:	b91b      	cbnz	r3, 8003a94 <_printf_i+0x178>
 8003a8c:	6822      	ldr	r2, [r4, #0]
 8003a8e:	f022 0220 	bic.w	r2, r2, #32
 8003a92:	6022      	str	r2, [r4, #0]
 8003a94:	2210      	movs	r2, #16
 8003a96:	e7b1      	b.n	80039fc <_printf_i+0xe0>
 8003a98:	4675      	mov	r5, lr
 8003a9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8003a9e:	fb02 3310 	mls	r3, r2, r0, r3
 8003aa2:	5ccb      	ldrb	r3, [r1, r3]
 8003aa4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2800      	cmp	r0, #0
 8003aac:	d1f5      	bne.n	8003a9a <_printf_i+0x17e>
 8003aae:	e7b7      	b.n	8003a20 <_printf_i+0x104>
 8003ab0:	6808      	ldr	r0, [r1, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	6949      	ldr	r1, [r1, #20]
 8003ab6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003aba:	d004      	beq.n	8003ac6 <_printf_i+0x1aa>
 8003abc:	1d10      	adds	r0, r2, #4
 8003abe:	6018      	str	r0, [r3, #0]
 8003ac0:	6813      	ldr	r3, [r2, #0]
 8003ac2:	6019      	str	r1, [r3, #0]
 8003ac4:	e007      	b.n	8003ad6 <_printf_i+0x1ba>
 8003ac6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003aca:	f102 0004 	add.w	r0, r2, #4
 8003ace:	6018      	str	r0, [r3, #0]
 8003ad0:	6813      	ldr	r3, [r2, #0]
 8003ad2:	d0f6      	beq.n	8003ac2 <_printf_i+0x1a6>
 8003ad4:	8019      	strh	r1, [r3, #0]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	6123      	str	r3, [r4, #16]
 8003ada:	4675      	mov	r5, lr
 8003adc:	e7b1      	b.n	8003a42 <_printf_i+0x126>
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	1d11      	adds	r1, r2, #4
 8003ae2:	6019      	str	r1, [r3, #0]
 8003ae4:	6815      	ldr	r5, [r2, #0]
 8003ae6:	6862      	ldr	r2, [r4, #4]
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4628      	mov	r0, r5
 8003aec:	f7fc fb70 	bl	80001d0 <memchr>
 8003af0:	b108      	cbz	r0, 8003af6 <_printf_i+0x1da>
 8003af2:	1b40      	subs	r0, r0, r5
 8003af4:	6060      	str	r0, [r4, #4]
 8003af6:	6863      	ldr	r3, [r4, #4]
 8003af8:	6123      	str	r3, [r4, #16]
 8003afa:	2300      	movs	r3, #0
 8003afc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b00:	e79f      	b.n	8003a42 <_printf_i+0x126>
 8003b02:	6923      	ldr	r3, [r4, #16]
 8003b04:	462a      	mov	r2, r5
 8003b06:	4639      	mov	r1, r7
 8003b08:	4630      	mov	r0, r6
 8003b0a:	47c0      	blx	r8
 8003b0c:	3001      	adds	r0, #1
 8003b0e:	d0a2      	beq.n	8003a56 <_printf_i+0x13a>
 8003b10:	6823      	ldr	r3, [r4, #0]
 8003b12:	079b      	lsls	r3, r3, #30
 8003b14:	d507      	bpl.n	8003b26 <_printf_i+0x20a>
 8003b16:	2500      	movs	r5, #0
 8003b18:	f104 0919 	add.w	r9, r4, #25
 8003b1c:	68e3      	ldr	r3, [r4, #12]
 8003b1e:	9a03      	ldr	r2, [sp, #12]
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	429d      	cmp	r5, r3
 8003b24:	db05      	blt.n	8003b32 <_printf_i+0x216>
 8003b26:	68e0      	ldr	r0, [r4, #12]
 8003b28:	9b03      	ldr	r3, [sp, #12]
 8003b2a:	4298      	cmp	r0, r3
 8003b2c:	bfb8      	it	lt
 8003b2e:	4618      	movlt	r0, r3
 8003b30:	e793      	b.n	8003a5a <_printf_i+0x13e>
 8003b32:	2301      	movs	r3, #1
 8003b34:	464a      	mov	r2, r9
 8003b36:	4639      	mov	r1, r7
 8003b38:	4630      	mov	r0, r6
 8003b3a:	47c0      	blx	r8
 8003b3c:	3001      	adds	r0, #1
 8003b3e:	d08a      	beq.n	8003a56 <_printf_i+0x13a>
 8003b40:	3501      	adds	r5, #1
 8003b42:	e7eb      	b.n	8003b1c <_printf_i+0x200>
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1a7      	bne.n	8003a98 <_printf_i+0x17c>
 8003b48:	780b      	ldrb	r3, [r1, #0]
 8003b4a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b4e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b52:	e765      	b.n	8003a20 <_printf_i+0x104>
 8003b54:	08003eb2 	.word	0x08003eb2
 8003b58:	08003ea1 	.word	0x08003ea1

08003b5c <memcpy>:
 8003b5c:	b510      	push	{r4, lr}
 8003b5e:	1e43      	subs	r3, r0, #1
 8003b60:	440a      	add	r2, r1
 8003b62:	4291      	cmp	r1, r2
 8003b64:	d100      	bne.n	8003b68 <memcpy+0xc>
 8003b66:	bd10      	pop	{r4, pc}
 8003b68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b70:	e7f7      	b.n	8003b62 <memcpy+0x6>

08003b72 <memmove>:
 8003b72:	4288      	cmp	r0, r1
 8003b74:	b510      	push	{r4, lr}
 8003b76:	eb01 0302 	add.w	r3, r1, r2
 8003b7a:	d803      	bhi.n	8003b84 <memmove+0x12>
 8003b7c:	1e42      	subs	r2, r0, #1
 8003b7e:	4299      	cmp	r1, r3
 8003b80:	d10c      	bne.n	8003b9c <memmove+0x2a>
 8003b82:	bd10      	pop	{r4, pc}
 8003b84:	4298      	cmp	r0, r3
 8003b86:	d2f9      	bcs.n	8003b7c <memmove+0xa>
 8003b88:	1881      	adds	r1, r0, r2
 8003b8a:	1ad2      	subs	r2, r2, r3
 8003b8c:	42d3      	cmn	r3, r2
 8003b8e:	d100      	bne.n	8003b92 <memmove+0x20>
 8003b90:	bd10      	pop	{r4, pc}
 8003b92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b96:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003b9a:	e7f7      	b.n	8003b8c <memmove+0x1a>
 8003b9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ba0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003ba4:	e7eb      	b.n	8003b7e <memmove+0xc>
	...

08003ba8 <_free_r>:
 8003ba8:	b538      	push	{r3, r4, r5, lr}
 8003baa:	4605      	mov	r5, r0
 8003bac:	2900      	cmp	r1, #0
 8003bae:	d045      	beq.n	8003c3c <_free_r+0x94>
 8003bb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bb4:	1f0c      	subs	r4, r1, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bfb8      	it	lt
 8003bba:	18e4      	addlt	r4, r4, r3
 8003bbc:	f000 f8d6 	bl	8003d6c <__malloc_lock>
 8003bc0:	4a1f      	ldr	r2, [pc, #124]	; (8003c40 <_free_r+0x98>)
 8003bc2:	6813      	ldr	r3, [r2, #0]
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	b933      	cbnz	r3, 8003bd6 <_free_r+0x2e>
 8003bc8:	6063      	str	r3, [r4, #4]
 8003bca:	6014      	str	r4, [r2, #0]
 8003bcc:	4628      	mov	r0, r5
 8003bce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bd2:	f000 b8cc 	b.w	8003d6e <__malloc_unlock>
 8003bd6:	42a3      	cmp	r3, r4
 8003bd8:	d90c      	bls.n	8003bf4 <_free_r+0x4c>
 8003bda:	6821      	ldr	r1, [r4, #0]
 8003bdc:	1862      	adds	r2, r4, r1
 8003bde:	4293      	cmp	r3, r2
 8003be0:	bf04      	itt	eq
 8003be2:	681a      	ldreq	r2, [r3, #0]
 8003be4:	685b      	ldreq	r3, [r3, #4]
 8003be6:	6063      	str	r3, [r4, #4]
 8003be8:	bf04      	itt	eq
 8003bea:	1852      	addeq	r2, r2, r1
 8003bec:	6022      	streq	r2, [r4, #0]
 8003bee:	6004      	str	r4, [r0, #0]
 8003bf0:	e7ec      	b.n	8003bcc <_free_r+0x24>
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	b10a      	cbz	r2, 8003bfc <_free_r+0x54>
 8003bf8:	42a2      	cmp	r2, r4
 8003bfa:	d9fa      	bls.n	8003bf2 <_free_r+0x4a>
 8003bfc:	6819      	ldr	r1, [r3, #0]
 8003bfe:	1858      	adds	r0, r3, r1
 8003c00:	42a0      	cmp	r0, r4
 8003c02:	d10b      	bne.n	8003c1c <_free_r+0x74>
 8003c04:	6820      	ldr	r0, [r4, #0]
 8003c06:	4401      	add	r1, r0
 8003c08:	1858      	adds	r0, r3, r1
 8003c0a:	4282      	cmp	r2, r0
 8003c0c:	6019      	str	r1, [r3, #0]
 8003c0e:	d1dd      	bne.n	8003bcc <_free_r+0x24>
 8003c10:	6810      	ldr	r0, [r2, #0]
 8003c12:	6852      	ldr	r2, [r2, #4]
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	4401      	add	r1, r0
 8003c18:	6019      	str	r1, [r3, #0]
 8003c1a:	e7d7      	b.n	8003bcc <_free_r+0x24>
 8003c1c:	d902      	bls.n	8003c24 <_free_r+0x7c>
 8003c1e:	230c      	movs	r3, #12
 8003c20:	602b      	str	r3, [r5, #0]
 8003c22:	e7d3      	b.n	8003bcc <_free_r+0x24>
 8003c24:	6820      	ldr	r0, [r4, #0]
 8003c26:	1821      	adds	r1, r4, r0
 8003c28:	428a      	cmp	r2, r1
 8003c2a:	bf04      	itt	eq
 8003c2c:	6811      	ldreq	r1, [r2, #0]
 8003c2e:	6852      	ldreq	r2, [r2, #4]
 8003c30:	6062      	str	r2, [r4, #4]
 8003c32:	bf04      	itt	eq
 8003c34:	1809      	addeq	r1, r1, r0
 8003c36:	6021      	streq	r1, [r4, #0]
 8003c38:	605c      	str	r4, [r3, #4]
 8003c3a:	e7c7      	b.n	8003bcc <_free_r+0x24>
 8003c3c:	bd38      	pop	{r3, r4, r5, pc}
 8003c3e:	bf00      	nop
 8003c40:	2000016c 	.word	0x2000016c

08003c44 <_malloc_r>:
 8003c44:	b570      	push	{r4, r5, r6, lr}
 8003c46:	1ccd      	adds	r5, r1, #3
 8003c48:	f025 0503 	bic.w	r5, r5, #3
 8003c4c:	3508      	adds	r5, #8
 8003c4e:	2d0c      	cmp	r5, #12
 8003c50:	bf38      	it	cc
 8003c52:	250c      	movcc	r5, #12
 8003c54:	2d00      	cmp	r5, #0
 8003c56:	4606      	mov	r6, r0
 8003c58:	db01      	blt.n	8003c5e <_malloc_r+0x1a>
 8003c5a:	42a9      	cmp	r1, r5
 8003c5c:	d903      	bls.n	8003c66 <_malloc_r+0x22>
 8003c5e:	230c      	movs	r3, #12
 8003c60:	6033      	str	r3, [r6, #0]
 8003c62:	2000      	movs	r0, #0
 8003c64:	bd70      	pop	{r4, r5, r6, pc}
 8003c66:	f000 f881 	bl	8003d6c <__malloc_lock>
 8003c6a:	4a23      	ldr	r2, [pc, #140]	; (8003cf8 <_malloc_r+0xb4>)
 8003c6c:	6814      	ldr	r4, [r2, #0]
 8003c6e:	4621      	mov	r1, r4
 8003c70:	b991      	cbnz	r1, 8003c98 <_malloc_r+0x54>
 8003c72:	4c22      	ldr	r4, [pc, #136]	; (8003cfc <_malloc_r+0xb8>)
 8003c74:	6823      	ldr	r3, [r4, #0]
 8003c76:	b91b      	cbnz	r3, 8003c80 <_malloc_r+0x3c>
 8003c78:	4630      	mov	r0, r6
 8003c7a:	f000 f867 	bl	8003d4c <_sbrk_r>
 8003c7e:	6020      	str	r0, [r4, #0]
 8003c80:	4629      	mov	r1, r5
 8003c82:	4630      	mov	r0, r6
 8003c84:	f000 f862 	bl	8003d4c <_sbrk_r>
 8003c88:	1c43      	adds	r3, r0, #1
 8003c8a:	d126      	bne.n	8003cda <_malloc_r+0x96>
 8003c8c:	230c      	movs	r3, #12
 8003c8e:	6033      	str	r3, [r6, #0]
 8003c90:	4630      	mov	r0, r6
 8003c92:	f000 f86c 	bl	8003d6e <__malloc_unlock>
 8003c96:	e7e4      	b.n	8003c62 <_malloc_r+0x1e>
 8003c98:	680b      	ldr	r3, [r1, #0]
 8003c9a:	1b5b      	subs	r3, r3, r5
 8003c9c:	d41a      	bmi.n	8003cd4 <_malloc_r+0x90>
 8003c9e:	2b0b      	cmp	r3, #11
 8003ca0:	d90f      	bls.n	8003cc2 <_malloc_r+0x7e>
 8003ca2:	600b      	str	r3, [r1, #0]
 8003ca4:	50cd      	str	r5, [r1, r3]
 8003ca6:	18cc      	adds	r4, r1, r3
 8003ca8:	4630      	mov	r0, r6
 8003caa:	f000 f860 	bl	8003d6e <__malloc_unlock>
 8003cae:	f104 000b 	add.w	r0, r4, #11
 8003cb2:	1d23      	adds	r3, r4, #4
 8003cb4:	f020 0007 	bic.w	r0, r0, #7
 8003cb8:	1ac3      	subs	r3, r0, r3
 8003cba:	d01b      	beq.n	8003cf4 <_malloc_r+0xb0>
 8003cbc:	425a      	negs	r2, r3
 8003cbe:	50e2      	str	r2, [r4, r3]
 8003cc0:	bd70      	pop	{r4, r5, r6, pc}
 8003cc2:	428c      	cmp	r4, r1
 8003cc4:	bf0d      	iteet	eq
 8003cc6:	6863      	ldreq	r3, [r4, #4]
 8003cc8:	684b      	ldrne	r3, [r1, #4]
 8003cca:	6063      	strne	r3, [r4, #4]
 8003ccc:	6013      	streq	r3, [r2, #0]
 8003cce:	bf18      	it	ne
 8003cd0:	460c      	movne	r4, r1
 8003cd2:	e7e9      	b.n	8003ca8 <_malloc_r+0x64>
 8003cd4:	460c      	mov	r4, r1
 8003cd6:	6849      	ldr	r1, [r1, #4]
 8003cd8:	e7ca      	b.n	8003c70 <_malloc_r+0x2c>
 8003cda:	1cc4      	adds	r4, r0, #3
 8003cdc:	f024 0403 	bic.w	r4, r4, #3
 8003ce0:	42a0      	cmp	r0, r4
 8003ce2:	d005      	beq.n	8003cf0 <_malloc_r+0xac>
 8003ce4:	1a21      	subs	r1, r4, r0
 8003ce6:	4630      	mov	r0, r6
 8003ce8:	f000 f830 	bl	8003d4c <_sbrk_r>
 8003cec:	3001      	adds	r0, #1
 8003cee:	d0cd      	beq.n	8003c8c <_malloc_r+0x48>
 8003cf0:	6025      	str	r5, [r4, #0]
 8003cf2:	e7d9      	b.n	8003ca8 <_malloc_r+0x64>
 8003cf4:	bd70      	pop	{r4, r5, r6, pc}
 8003cf6:	bf00      	nop
 8003cf8:	2000016c 	.word	0x2000016c
 8003cfc:	20000170 	.word	0x20000170

08003d00 <_realloc_r>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	4607      	mov	r7, r0
 8003d04:	4614      	mov	r4, r2
 8003d06:	460e      	mov	r6, r1
 8003d08:	b921      	cbnz	r1, 8003d14 <_realloc_r+0x14>
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003d10:	f7ff bf98 	b.w	8003c44 <_malloc_r>
 8003d14:	b922      	cbnz	r2, 8003d20 <_realloc_r+0x20>
 8003d16:	f7ff ff47 	bl	8003ba8 <_free_r>
 8003d1a:	4625      	mov	r5, r4
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d20:	f000 f826 	bl	8003d70 <_malloc_usable_size_r>
 8003d24:	4284      	cmp	r4, r0
 8003d26:	d90f      	bls.n	8003d48 <_realloc_r+0x48>
 8003d28:	4621      	mov	r1, r4
 8003d2a:	4638      	mov	r0, r7
 8003d2c:	f7ff ff8a 	bl	8003c44 <_malloc_r>
 8003d30:	4605      	mov	r5, r0
 8003d32:	2800      	cmp	r0, #0
 8003d34:	d0f2      	beq.n	8003d1c <_realloc_r+0x1c>
 8003d36:	4631      	mov	r1, r6
 8003d38:	4622      	mov	r2, r4
 8003d3a:	f7ff ff0f 	bl	8003b5c <memcpy>
 8003d3e:	4631      	mov	r1, r6
 8003d40:	4638      	mov	r0, r7
 8003d42:	f7ff ff31 	bl	8003ba8 <_free_r>
 8003d46:	e7e9      	b.n	8003d1c <_realloc_r+0x1c>
 8003d48:	4635      	mov	r5, r6
 8003d4a:	e7e7      	b.n	8003d1c <_realloc_r+0x1c>

08003d4c <_sbrk_r>:
 8003d4c:	b538      	push	{r3, r4, r5, lr}
 8003d4e:	4c06      	ldr	r4, [pc, #24]	; (8003d68 <_sbrk_r+0x1c>)
 8003d50:	2300      	movs	r3, #0
 8003d52:	4605      	mov	r5, r0
 8003d54:	4608      	mov	r0, r1
 8003d56:	6023      	str	r3, [r4, #0]
 8003d58:	f000 f86e 	bl	8003e38 <_sbrk>
 8003d5c:	1c43      	adds	r3, r0, #1
 8003d5e:	d102      	bne.n	8003d66 <_sbrk_r+0x1a>
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	b103      	cbz	r3, 8003d66 <_sbrk_r+0x1a>
 8003d64:	602b      	str	r3, [r5, #0]
 8003d66:	bd38      	pop	{r3, r4, r5, pc}
 8003d68:	2000017c 	.word	0x2000017c

08003d6c <__malloc_lock>:
 8003d6c:	4770      	bx	lr

08003d6e <__malloc_unlock>:
 8003d6e:	4770      	bx	lr

08003d70 <_malloc_usable_size_r>:
 8003d70:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8003d74:	2800      	cmp	r0, #0
 8003d76:	f1a0 0004 	sub.w	r0, r0, #4
 8003d7a:	bfbc      	itt	lt
 8003d7c:	580b      	ldrlt	r3, [r1, r0]
 8003d7e:	18c0      	addlt	r0, r0, r3
 8003d80:	4770      	bx	lr

08003d82 <abort>:
 8003d82:	b508      	push	{r3, lr}
 8003d84:	2006      	movs	r0, #6
 8003d86:	f000 f82b 	bl	8003de0 <raise>
 8003d8a:	2001      	movs	r0, #1
 8003d8c:	f000 f862 	bl	8003e54 <_exit>

08003d90 <_raise_r>:
 8003d90:	291f      	cmp	r1, #31
 8003d92:	b538      	push	{r3, r4, r5, lr}
 8003d94:	4604      	mov	r4, r0
 8003d96:	460d      	mov	r5, r1
 8003d98:	d904      	bls.n	8003da4 <_raise_r+0x14>
 8003d9a:	2316      	movs	r3, #22
 8003d9c:	6003      	str	r3, [r0, #0]
 8003d9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003da2:	bd38      	pop	{r3, r4, r5, pc}
 8003da4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003da6:	b112      	cbz	r2, 8003dae <_raise_r+0x1e>
 8003da8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003dac:	b94b      	cbnz	r3, 8003dc2 <_raise_r+0x32>
 8003dae:	4620      	mov	r0, r4
 8003db0:	f000 f830 	bl	8003e14 <_getpid_r>
 8003db4:	462a      	mov	r2, r5
 8003db6:	4601      	mov	r1, r0
 8003db8:	4620      	mov	r0, r4
 8003dba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dbe:	f000 b817 	b.w	8003df0 <_kill_r>
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d00a      	beq.n	8003ddc <_raise_r+0x4c>
 8003dc6:	1c59      	adds	r1, r3, #1
 8003dc8:	d103      	bne.n	8003dd2 <_raise_r+0x42>
 8003dca:	2316      	movs	r3, #22
 8003dcc:	6003      	str	r3, [r0, #0]
 8003dce:	2001      	movs	r0, #1
 8003dd0:	bd38      	pop	{r3, r4, r5, pc}
 8003dd2:	2400      	movs	r4, #0
 8003dd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003dd8:	4628      	mov	r0, r5
 8003dda:	4798      	blx	r3
 8003ddc:	2000      	movs	r0, #0
 8003dde:	bd38      	pop	{r3, r4, r5, pc}

08003de0 <raise>:
 8003de0:	4b02      	ldr	r3, [pc, #8]	; (8003dec <raise+0xc>)
 8003de2:	4601      	mov	r1, r0
 8003de4:	6818      	ldr	r0, [r3, #0]
 8003de6:	f7ff bfd3 	b.w	8003d90 <_raise_r>
 8003dea:	bf00      	nop
 8003dec:	20000010 	.word	0x20000010

08003df0 <_kill_r>:
 8003df0:	b538      	push	{r3, r4, r5, lr}
 8003df2:	4c07      	ldr	r4, [pc, #28]	; (8003e10 <_kill_r+0x20>)
 8003df4:	2300      	movs	r3, #0
 8003df6:	4605      	mov	r5, r0
 8003df8:	4608      	mov	r0, r1
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	6023      	str	r3, [r4, #0]
 8003dfe:	f000 f813 	bl	8003e28 <_kill>
 8003e02:	1c43      	adds	r3, r0, #1
 8003e04:	d102      	bne.n	8003e0c <_kill_r+0x1c>
 8003e06:	6823      	ldr	r3, [r4, #0]
 8003e08:	b103      	cbz	r3, 8003e0c <_kill_r+0x1c>
 8003e0a:	602b      	str	r3, [r5, #0]
 8003e0c:	bd38      	pop	{r3, r4, r5, pc}
 8003e0e:	bf00      	nop
 8003e10:	2000017c 	.word	0x2000017c

08003e14 <_getpid_r>:
 8003e14:	f000 b800 	b.w	8003e18 <_getpid>

08003e18 <_getpid>:
 8003e18:	4b02      	ldr	r3, [pc, #8]	; (8003e24 <_getpid+0xc>)
 8003e1a:	2258      	movs	r2, #88	; 0x58
 8003e1c:	601a      	str	r2, [r3, #0]
 8003e1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e22:	4770      	bx	lr
 8003e24:	2000017c 	.word	0x2000017c

08003e28 <_kill>:
 8003e28:	4b02      	ldr	r3, [pc, #8]	; (8003e34 <_kill+0xc>)
 8003e2a:	2258      	movs	r2, #88	; 0x58
 8003e2c:	601a      	str	r2, [r3, #0]
 8003e2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e32:	4770      	bx	lr
 8003e34:	2000017c 	.word	0x2000017c

08003e38 <_sbrk>:
 8003e38:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <_sbrk+0x14>)
 8003e3a:	6819      	ldr	r1, [r3, #0]
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	b909      	cbnz	r1, 8003e44 <_sbrk+0xc>
 8003e40:	4903      	ldr	r1, [pc, #12]	; (8003e50 <_sbrk+0x18>)
 8003e42:	6019      	str	r1, [r3, #0]
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	4402      	add	r2, r0
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	4770      	bx	lr
 8003e4c:	20000174 	.word	0x20000174
 8003e50:	20000180 	.word	0x20000180

08003e54 <_exit>:
 8003e54:	e7fe      	b.n	8003e54 <_exit>
	...

08003e58 <_init>:
 8003e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5a:	bf00      	nop
 8003e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5e:	bc08      	pop	{r3}
 8003e60:	469e      	mov	lr, r3
 8003e62:	4770      	bx	lr

08003e64 <_fini>:
 8003e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e66:	bf00      	nop
 8003e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e6a:	bc08      	pop	{r3}
 8003e6c:	469e      	mov	lr, r3
 8003e6e:	4770      	bx	lr
