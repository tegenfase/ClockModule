
ClockModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014714  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004fc4  080148a8  080148a8  000248a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000700  0801986c  0801986c  0002986c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000650  08019f6c  08019f6c  00029f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000020  0801a5bc  0801a5bc  0002a5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0801a5dc  0801a5dc  0002a5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         0000069c  20000000  0801a5e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  0003069c  2**0
                  CONTENTS
  9 .bss          0000c7f4  2000069c  2000069c  0003069c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000ce90  2000ce90  0003069c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003069c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003121d  00000000  00000000  000306cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004460  00000000  00000000  000618e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000b67f  00000000  00000000  00065d49  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001338  00000000  00000000  000713c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001800  00000000  00000000  00072700  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a2e1  00000000  00000000  00073f00  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000bad4  00000000  00000000  0007e1e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  00089cb5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00011434  00000000  00000000  00089d34  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         000000cc  00000000  00000000  0009b168  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001ed  00000000  00000000  0009b234  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000069c 	.word	0x2000069c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801488c 	.word	0x0801488c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200006a0 	.word	0x200006a0
 80001cc:	0801488c 	.word	0x0801488c

080001d0 <d_make_comp>:
 80001d0:	b470      	push	{r4, r5, r6}
 80001d2:	1e4c      	subs	r4, r1, #1
 80001d4:	2c4c      	cmp	r4, #76	; 0x4c
 80001d6:	d82d      	bhi.n	8000234 <d_make_comp+0x64>
 80001d8:	e8df f004 	tbb	[pc, r4]
 80001dc:	3c3c3c3c 	.word	0x3c3c3c3c
 80001e0:	2c2c2c2c 	.word	0x2c2c2c2c
 80001e4:	273c2727 	.word	0x273c2727
 80001e8:	27272727 	.word	0x27272727
 80001ec:	27272727 	.word	0x27272727
 80001f0:	2c272727 	.word	0x2c272727
 80001f4:	28282828 	.word	0x28282828
 80001f8:	28282828 	.word	0x28282828
 80001fc:	2727273c 	.word	0x2727273c
 8000200:	272c2727 	.word	0x272c2727
 8000204:	2c3c3e28 	.word	0x2c3c3e28
 8000208:	3e28283c 	.word	0x3e28283c
 800020c:	27272c2c 	.word	0x27272c2c
 8000210:	3c3c3c27 	.word	0x3c3c3c27
 8000214:	3c273c3c 	.word	0x3c273c3c
 8000218:	2c3c273c 	.word	0x2c3c273c
 800021c:	2727272c 	.word	0x2727272c
 8000220:	272c2c2c 	.word	0x272c2c2c
 8000224:	283c2727 	.word	0x283c2727
 8000228:	3c          	.byte	0x3c
 8000229:	00          	.byte	0x00
 800022a:	b11a      	cbz	r2, 8000234 <d_make_comp+0x64>
 800022c:	6944      	ldr	r4, [r0, #20]
 800022e:	6985      	ldr	r5, [r0, #24]
 8000230:	42ac      	cmp	r4, r5
 8000232:	db02      	blt.n	800023a <d_make_comp+0x6a>
 8000234:	2000      	movs	r0, #0
 8000236:	bc70      	pop	{r4, r5, r6}
 8000238:	4770      	bx	lr
 800023a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800023e:	6906      	ldr	r6, [r0, #16]
 8000240:	00ad      	lsls	r5, r5, #2
 8000242:	3401      	adds	r4, #1
 8000244:	6144      	str	r4, [r0, #20]
 8000246:	1970      	adds	r0, r6, r5
 8000248:	d0f5      	beq.n	8000236 <d_make_comp+0x66>
 800024a:	5571      	strb	r1, [r6, r5]
 800024c:	6042      	str	r2, [r0, #4]
 800024e:	6083      	str	r3, [r0, #8]
 8000250:	bc70      	pop	{r4, r5, r6}
 8000252:	4770      	bx	lr
 8000254:	2a00      	cmp	r2, #0
 8000256:	d0ed      	beq.n	8000234 <d_make_comp+0x64>
 8000258:	2b00      	cmp	r3, #0
 800025a:	d0eb      	beq.n	8000234 <d_make_comp+0x64>
 800025c:	6944      	ldr	r4, [r0, #20]
 800025e:	6985      	ldr	r5, [r0, #24]
 8000260:	42ac      	cmp	r4, r5
 8000262:	dae7      	bge.n	8000234 <d_make_comp+0x64>
 8000264:	e7e9      	b.n	800023a <d_make_comp+0x6a>
 8000266:	bf00      	nop

08000268 <d_cv_qualifiers>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	68c3      	ldr	r3, [r0, #12]
 800026e:	f1b2 0a00 	subs.w	sl, r2, #0
 8000272:	4604      	mov	r4, r0
 8000274:	460e      	mov	r6, r1
 8000276:	781a      	ldrb	r2, [r3, #0]
 8000278:	bf15      	itete	ne
 800027a:	f04f 091e 	movne.w	r9, #30
 800027e:	f04f 091b 	moveq.w	r9, #27
 8000282:	f04f 081d 	movne.w	r8, #29
 8000286:	f04f 081a 	moveq.w	r8, #26
 800028a:	bf14      	ite	ne
 800028c:	271c      	movne	r7, #28
 800028e:	2719      	moveq	r7, #25
 8000290:	460d      	mov	r5, r1
 8000292:	e018      	b.n	80002c6 <d_cv_qualifiers+0x5e>
 8000294:	2a56      	cmp	r2, #86	; 0x56
 8000296:	d01f      	beq.n	80002d8 <d_cv_qualifiers+0x70>
 8000298:	2a4b      	cmp	r2, #75	; 0x4b
 800029a:	d024      	beq.n	80002e6 <d_cv_qualifiers+0x7e>
 800029c:	2a44      	cmp	r2, #68	; 0x44
 800029e:	d12d      	bne.n	80002fc <d_cv_qualifiers+0x94>
 80002a0:	785a      	ldrb	r2, [r3, #1]
 80002a2:	2a78      	cmp	r2, #120	; 0x78
 80002a4:	d127      	bne.n	80002f6 <d_cv_qualifiers+0x8e>
 80002a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80002a8:	3302      	adds	r3, #2
 80002aa:	3211      	adds	r2, #17
 80002ac:	60e3      	str	r3, [r4, #12]
 80002ae:	6322      	str	r2, [r4, #48]	; 0x30
 80002b0:	214c      	movs	r1, #76	; 0x4c
 80002b2:	2300      	movs	r3, #0
 80002b4:	461a      	mov	r2, r3
 80002b6:	4620      	mov	r0, r4
 80002b8:	f7ff ff8a 	bl	80001d0 <d_make_comp>
 80002bc:	6028      	str	r0, [r5, #0]
 80002be:	b1c8      	cbz	r0, 80002f4 <d_cv_qualifiers+0x8c>
 80002c0:	68e3      	ldr	r3, [r4, #12]
 80002c2:	781a      	ldrb	r2, [r3, #0]
 80002c4:	1d05      	adds	r5, r0, #4
 80002c6:	2a72      	cmp	r2, #114	; 0x72
 80002c8:	d1e4      	bne.n	8000294 <d_cv_qualifiers+0x2c>
 80002ca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80002cc:	3301      	adds	r3, #1
 80002ce:	3209      	adds	r2, #9
 80002d0:	60e3      	str	r3, [r4, #12]
 80002d2:	6322      	str	r2, [r4, #48]	; 0x30
 80002d4:	4639      	mov	r1, r7
 80002d6:	e7ec      	b.n	80002b2 <d_cv_qualifiers+0x4a>
 80002d8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80002da:	3301      	adds	r3, #1
 80002dc:	3209      	adds	r2, #9
 80002de:	60e3      	str	r3, [r4, #12]
 80002e0:	6322      	str	r2, [r4, #48]	; 0x30
 80002e2:	4641      	mov	r1, r8
 80002e4:	e7e5      	b.n	80002b2 <d_cv_qualifiers+0x4a>
 80002e6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80002e8:	3301      	adds	r3, #1
 80002ea:	3206      	adds	r2, #6
 80002ec:	60e3      	str	r3, [r4, #12]
 80002ee:	6322      	str	r2, [r4, #48]	; 0x30
 80002f0:	4649      	mov	r1, r9
 80002f2:	e7de      	b.n	80002b2 <d_cv_qualifiers+0x4a>
 80002f4:	4605      	mov	r5, r0
 80002f6:	4628      	mov	r0, r5
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	f1ba 0f00 	cmp.w	sl, #0
 8000300:	d1f9      	bne.n	80002f6 <d_cv_qualifiers+0x8e>
 8000302:	2a46      	cmp	r2, #70	; 0x46
 8000304:	d1f7      	bne.n	80002f6 <d_cv_qualifiers+0x8e>
 8000306:	42b5      	cmp	r5, r6
 8000308:	d0f5      	beq.n	80002f6 <d_cv_qualifiers+0x8e>
 800030a:	201d      	movs	r0, #29
 800030c:	211e      	movs	r1, #30
 800030e:	221c      	movs	r2, #28
 8000310:	e007      	b.n	8000322 <d_cv_qualifiers+0xba>
 8000312:	2b1b      	cmp	r3, #27
 8000314:	d00b      	beq.n	800032e <d_cv_qualifiers+0xc6>
 8000316:	2b19      	cmp	r3, #25
 8000318:	d100      	bne.n	800031c <d_cv_qualifiers+0xb4>
 800031a:	7032      	strb	r2, [r6, #0]
 800031c:	3604      	adds	r6, #4
 800031e:	42b5      	cmp	r5, r6
 8000320:	d0e9      	beq.n	80002f6 <d_cv_qualifiers+0x8e>
 8000322:	6836      	ldr	r6, [r6, #0]
 8000324:	7833      	ldrb	r3, [r6, #0]
 8000326:	2b1a      	cmp	r3, #26
 8000328:	d1f3      	bne.n	8000312 <d_cv_qualifiers+0xaa>
 800032a:	7030      	strb	r0, [r6, #0]
 800032c:	e7f6      	b.n	800031c <d_cv_qualifiers+0xb4>
 800032e:	7031      	strb	r1, [r6, #0]
 8000330:	e7f4      	b.n	800031c <d_cv_qualifiers+0xb4>
 8000332:	bf00      	nop

08000334 <d_ref_qualifier>:
 8000334:	b410      	push	{r4}
 8000336:	68c3      	ldr	r3, [r0, #12]
 8000338:	781c      	ldrb	r4, [r3, #0]
 800033a:	2c52      	cmp	r4, #82	; 0x52
 800033c:	460a      	mov	r2, r1
 800033e:	d00f      	beq.n	8000360 <d_ref_qualifier+0x2c>
 8000340:	2c4f      	cmp	r4, #79	; 0x4f
 8000342:	d003      	beq.n	800034c <d_ref_qualifier+0x18>
 8000344:	4608      	mov	r0, r1
 8000346:	f85d 4b04 	ldr.w	r4, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	6b01      	ldr	r1, [r0, #48]	; 0x30
 800034e:	3103      	adds	r1, #3
 8000350:	6301      	str	r1, [r0, #48]	; 0x30
 8000352:	2120      	movs	r1, #32
 8000354:	3301      	adds	r3, #1
 8000356:	60c3      	str	r3, [r0, #12]
 8000358:	f85d 4b04 	ldr.w	r4, [sp], #4
 800035c:	2300      	movs	r3, #0
 800035e:	e737      	b.n	80001d0 <d_make_comp>
 8000360:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8000362:	3102      	adds	r1, #2
 8000364:	6301      	str	r1, [r0, #48]	; 0x30
 8000366:	211f      	movs	r1, #31
 8000368:	e7f4      	b.n	8000354 <d_ref_qualifier+0x20>
 800036a:	bf00      	nop

0800036c <d_count_templates_scopes>:
 800036c:	2a00      	cmp	r2, #0
 800036e:	d04d      	beq.n	800040c <d_count_templates_scopes+0xa0>
 8000370:	b570      	push	{r4, r5, r6, lr}
 8000372:	4605      	mov	r5, r0
 8000374:	460e      	mov	r6, r1
 8000376:	4614      	mov	r4, r2
 8000378:	7823      	ldrb	r3, [r4, #0]
 800037a:	3b01      	subs	r3, #1
 800037c:	2b4c      	cmp	r3, #76	; 0x4c
 800037e:	d82b      	bhi.n	80003d8 <d_count_templates_scopes+0x6c>
 8000380:	e8df f003 	tbb	[pc, r3]
 8000384:	3f363636 	.word	0x3f363636
 8000388:	27272a2a 	.word	0x27272a2a
 800038c:	36363636 	.word	0x36363636
 8000390:	36363636 	.word	0x36363636
 8000394:	36363636 	.word	0x36363636
 8000398:	2a363636 	.word	0x2a363636
 800039c:	36363636 	.word	0x36363636
 80003a0:	36363636 	.word	0x36363636
 80003a4:	2f2f3636 	.word	0x2f2f3636
 80003a8:	362a3636 	.word	0x362a3636
 80003ac:	2b363636 	.word	0x2b363636
 80003b0:	36363636 	.word	0x36363636
 80003b4:	3636272a 	.word	0x3636272a
 80003b8:	36363636 	.word	0x36363636
 80003bc:	36363636 	.word	0x36363636
 80003c0:	2a363636 	.word	0x2a363636
 80003c4:	2b2b362a 	.word	0x2b2b362a
 80003c8:	362a2b2b 	.word	0x362a2b2b
 80003cc:	36363636 	.word	0x36363636
 80003d0:	36          	.byte	0x36
 80003d1:	00          	.byte	0x00
 80003d2:	68a4      	ldr	r4, [r4, #8]
 80003d4:	2c00      	cmp	r4, #0
 80003d6:	d1cf      	bne.n	8000378 <d_count_templates_scopes+0xc>
 80003d8:	bd70      	pop	{r4, r5, r6, pc}
 80003da:	6864      	ldr	r4, [r4, #4]
 80003dc:	2c00      	cmp	r4, #0
 80003de:	d1cb      	bne.n	8000378 <d_count_templates_scopes+0xc>
 80003e0:	e7fa      	b.n	80003d8 <d_count_templates_scopes+0x6c>
 80003e2:	6862      	ldr	r2, [r4, #4]
 80003e4:	7813      	ldrb	r3, [r2, #0]
 80003e6:	2b05      	cmp	r3, #5
 80003e8:	d103      	bne.n	80003f2 <d_count_templates_scopes+0x86>
 80003ea:	6833      	ldr	r3, [r6, #0]
 80003ec:	3301      	adds	r3, #1
 80003ee:	6033      	str	r3, [r6, #0]
 80003f0:	6862      	ldr	r2, [r4, #4]
 80003f2:	4631      	mov	r1, r6
 80003f4:	4628      	mov	r0, r5
 80003f6:	f7ff ffb9 	bl	800036c <d_count_templates_scopes>
 80003fa:	68a4      	ldr	r4, [r4, #8]
 80003fc:	2c00      	cmp	r4, #0
 80003fe:	d1bb      	bne.n	8000378 <d_count_templates_scopes+0xc>
 8000400:	e7ea      	b.n	80003d8 <d_count_templates_scopes+0x6c>
 8000402:	682b      	ldr	r3, [r5, #0]
 8000404:	3301      	adds	r3, #1
 8000406:	602b      	str	r3, [r5, #0]
 8000408:	6862      	ldr	r2, [r4, #4]
 800040a:	e7f2      	b.n	80003f2 <d_count_templates_scopes+0x86>
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop

08000410 <d_append_buffer>:
 8000410:	b37a      	cbz	r2, 8000472 <d_append_buffer+0x62>
 8000412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800041e:	18af      	adds	r7, r5, r2
 8000420:	f04f 0800 	mov.w	r8, #0
 8000424:	e009      	b.n	800043a <d_append_buffer+0x2a>
 8000426:	460b      	mov	r3, r1
 8000428:	42bd      	cmp	r5, r7
 800042a:	f101 0101 	add.w	r1, r1, #1
 800042e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000432:	54e6      	strb	r6, [r4, r3]
 8000434:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8000438:	d019      	beq.n	800046e <d_append_buffer+0x5e>
 800043a:	29ff      	cmp	r1, #255	; 0xff
 800043c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8000440:	d1f1      	bne.n	8000426 <d_append_buffer+0x16>
 8000442:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8000446:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800044a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800044e:	4620      	mov	r0, r4
 8000450:	4798      	blx	r3
 8000452:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8000456:	3301      	adds	r3, #1
 8000458:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800045c:	2300      	movs	r3, #0
 800045e:	2101      	movs	r1, #1
 8000460:	42bd      	cmp	r5, r7
 8000462:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8000466:	54e6      	strb	r6, [r4, r3]
 8000468:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800046c:	d1e5      	bne.n	800043a <d_append_buffer+0x2a>
 800046e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000472:	4770      	bx	lr

08000474 <d_number.isra.0>:
 8000474:	b470      	push	{r4, r5, r6}
 8000476:	6802      	ldr	r2, [r0, #0]
 8000478:	7811      	ldrb	r1, [r2, #0]
 800047a:	296e      	cmp	r1, #110	; 0x6e
 800047c:	d018      	beq.n	80004b0 <d_number.isra.0+0x3c>
 800047e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8000482:	2b09      	cmp	r3, #9
 8000484:	d81e      	bhi.n	80004c4 <d_number.isra.0+0x50>
 8000486:	2600      	movs	r6, #0
 8000488:	2300      	movs	r3, #0
 800048a:	3201      	adds	r2, #1
 800048c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000490:	6002      	str	r2, [r0, #0]
 8000492:	eb01 0443 	add.w	r4, r1, r3, lsl #1
 8000496:	7811      	ldrb	r1, [r2, #0]
 8000498:	f1a1 0530 	sub.w	r5, r1, #48	; 0x30
 800049c:	2d09      	cmp	r5, #9
 800049e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80004a2:	d9f2      	bls.n	800048a <d_number.isra.0+0x16>
 80004a4:	b10e      	cbz	r6, 80004aa <d_number.isra.0+0x36>
 80004a6:	f1c4 0330 	rsb	r3, r4, #48	; 0x30
 80004aa:	4618      	mov	r0, r3
 80004ac:	bc70      	pop	{r4, r5, r6}
 80004ae:	4770      	bx	lr
 80004b0:	1c53      	adds	r3, r2, #1
 80004b2:	6003      	str	r3, [r0, #0]
 80004b4:	7851      	ldrb	r1, [r2, #1]
 80004b6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80004ba:	2a09      	cmp	r2, #9
 80004bc:	d802      	bhi.n	80004c4 <d_number.isra.0+0x50>
 80004be:	461a      	mov	r2, r3
 80004c0:	2601      	movs	r6, #1
 80004c2:	e7e1      	b.n	8000488 <d_number.isra.0+0x14>
 80004c4:	2300      	movs	r3, #0
 80004c6:	e7f0      	b.n	80004aa <d_number.isra.0+0x36>

080004c8 <d_number_component>:
 80004c8:	6943      	ldr	r3, [r0, #20]
 80004ca:	6982      	ldr	r2, [r0, #24]
 80004cc:	4293      	cmp	r3, r2
 80004ce:	b510      	push	{r4, lr}
 80004d0:	da0f      	bge.n	80004f2 <d_number_component+0x2a>
 80004d2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80004d6:	6901      	ldr	r1, [r0, #16]
 80004d8:	0092      	lsls	r2, r2, #2
 80004da:	3301      	adds	r3, #1
 80004dc:	188c      	adds	r4, r1, r2
 80004de:	6143      	str	r3, [r0, #20]
 80004e0:	d005      	beq.n	80004ee <d_number_component+0x26>
 80004e2:	2341      	movs	r3, #65	; 0x41
 80004e4:	300c      	adds	r0, #12
 80004e6:	548b      	strb	r3, [r1, r2]
 80004e8:	f7ff ffc4 	bl	8000474 <d_number.isra.0>
 80004ec:	6060      	str	r0, [r4, #4]
 80004ee:	4620      	mov	r0, r4
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2400      	movs	r4, #0
 80004f4:	4620      	mov	r0, r4
 80004f6:	bd10      	pop	{r4, pc}

080004f8 <d_compact_number>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	68c3      	ldr	r3, [r0, #12]
 80004fc:	781a      	ldrb	r2, [r3, #0]
 80004fe:	2a5f      	cmp	r2, #95	; 0x5f
 8000500:	4604      	mov	r4, r0
 8000502:	d00d      	beq.n	8000520 <d_compact_number+0x28>
 8000504:	2a6e      	cmp	r2, #110	; 0x6e
 8000506:	d00f      	beq.n	8000528 <d_compact_number+0x30>
 8000508:	300c      	adds	r0, #12
 800050a:	f7ff ffb3 	bl	8000474 <d_number.isra.0>
 800050e:	3001      	adds	r0, #1
 8000510:	d40a      	bmi.n	8000528 <d_compact_number+0x30>
 8000512:	68e3      	ldr	r3, [r4, #12]
 8000514:	781a      	ldrb	r2, [r3, #0]
 8000516:	2a5f      	cmp	r2, #95	; 0x5f
 8000518:	d106      	bne.n	8000528 <d_compact_number+0x30>
 800051a:	3301      	adds	r3, #1
 800051c:	60e3      	str	r3, [r4, #12]
 800051e:	bd10      	pop	{r4, pc}
 8000520:	3301      	adds	r3, #1
 8000522:	2000      	movs	r0, #0
 8000524:	60e3      	str	r3, [r4, #12]
 8000526:	bd10      	pop	{r4, pc}
 8000528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800052c:	bd10      	pop	{r4, pc}
 800052e:	bf00      	nop

08000530 <d_template_param>:
 8000530:	b538      	push	{r3, r4, r5, lr}
 8000532:	68c3      	ldr	r3, [r0, #12]
 8000534:	781a      	ldrb	r2, [r3, #0]
 8000536:	2a54      	cmp	r2, #84	; 0x54
 8000538:	d001      	beq.n	800053e <d_template_param+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd38      	pop	{r3, r4, r5, pc}
 800053e:	3301      	adds	r3, #1
 8000540:	60c3      	str	r3, [r0, #12]
 8000542:	4604      	mov	r4, r0
 8000544:	f7ff ffd8 	bl	80004f8 <d_compact_number>
 8000548:	1e05      	subs	r5, r0, #0
 800054a:	dbf6      	blt.n	800053a <d_template_param+0xa>
 800054c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800054e:	6963      	ldr	r3, [r4, #20]
 8000550:	69a1      	ldr	r1, [r4, #24]
 8000552:	3201      	adds	r2, #1
 8000554:	428b      	cmp	r3, r1
 8000556:	62a2      	str	r2, [r4, #40]	; 0x28
 8000558:	daef      	bge.n	800053a <d_template_param+0xa>
 800055a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800055e:	6921      	ldr	r1, [r4, #16]
 8000560:	0092      	lsls	r2, r2, #2
 8000562:	3301      	adds	r3, #1
 8000564:	1888      	adds	r0, r1, r2
 8000566:	6163      	str	r3, [r4, #20]
 8000568:	d002      	beq.n	8000570 <d_template_param+0x40>
 800056a:	2305      	movs	r3, #5
 800056c:	548b      	strb	r3, [r1, r2]
 800056e:	6045      	str	r5, [r0, #4]
 8000570:	bd38      	pop	{r3, r4, r5, pc}
 8000572:	bf00      	nop

08000574 <d_source_name>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	4604      	mov	r4, r0
 8000578:	300c      	adds	r0, #12
 800057a:	f7ff ff7b 	bl	8000474 <d_number.isra.0>
 800057e:	1e06      	subs	r6, r0, #0
 8000580:	dd4d      	ble.n	800061e <d_source_name+0xaa>
 8000582:	68e5      	ldr	r5, [r4, #12]
 8000584:	6863      	ldr	r3, [r4, #4]
 8000586:	1b5b      	subs	r3, r3, r5
 8000588:	429e      	cmp	r6, r3
 800058a:	dc2b      	bgt.n	80005e4 <d_source_name+0x70>
 800058c:	68a2      	ldr	r2, [r4, #8]
 800058e:	19ab      	adds	r3, r5, r6
 8000590:	0752      	lsls	r2, r2, #29
 8000592:	60e3      	str	r3, [r4, #12]
 8000594:	d504      	bpl.n	80005a0 <d_source_name+0x2c>
 8000596:	5daa      	ldrb	r2, [r5, r6]
 8000598:	2a24      	cmp	r2, #36	; 0x24
 800059a:	bf04      	itt	eq
 800059c:	3301      	addeq	r3, #1
 800059e:	60e3      	streq	r3, [r4, #12]
 80005a0:	2e09      	cmp	r6, #9
 80005a2:	dd0c      	ble.n	80005be <d_source_name+0x4a>
 80005a4:	2208      	movs	r2, #8
 80005a6:	491f      	ldr	r1, [pc, #124]	; (8000624 <d_source_name+0xb0>)
 80005a8:	4628      	mov	r0, r5
 80005aa:	f010 fd43 	bl	8011034 <memcmp>
 80005ae:	b930      	cbnz	r0, 80005be <d_source_name+0x4a>
 80005b0:	7a2b      	ldrb	r3, [r5, #8]
 80005b2:	2b2e      	cmp	r3, #46	; 0x2e
 80005b4:	d019      	beq.n	80005ea <d_source_name+0x76>
 80005b6:	2b5f      	cmp	r3, #95	; 0x5f
 80005b8:	d017      	beq.n	80005ea <d_source_name+0x76>
 80005ba:	2b24      	cmp	r3, #36	; 0x24
 80005bc:	d015      	beq.n	80005ea <d_source_name+0x76>
 80005be:	6963      	ldr	r3, [r4, #20]
 80005c0:	69a2      	ldr	r2, [r4, #24]
 80005c2:	4293      	cmp	r3, r2
 80005c4:	da0e      	bge.n	80005e4 <d_source_name+0x70>
 80005c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80005ca:	6921      	ldr	r1, [r4, #16]
 80005cc:	0092      	lsls	r2, r2, #2
 80005ce:	3301      	adds	r3, #1
 80005d0:	1888      	adds	r0, r1, r2
 80005d2:	6163      	str	r3, [r4, #20]
 80005d4:	d006      	beq.n	80005e4 <d_source_name+0x70>
 80005d6:	b12d      	cbz	r5, 80005e4 <d_source_name+0x70>
 80005d8:	2300      	movs	r3, #0
 80005da:	548b      	strb	r3, [r1, r2]
 80005dc:	6045      	str	r5, [r0, #4]
 80005de:	6086      	str	r6, [r0, #8]
 80005e0:	62e0      	str	r0, [r4, #44]	; 0x2c
 80005e2:	bd70      	pop	{r4, r5, r6, pc}
 80005e4:	2000      	movs	r0, #0
 80005e6:	62e0      	str	r0, [r4, #44]	; 0x2c
 80005e8:	bd70      	pop	{r4, r5, r6, pc}
 80005ea:	7a6b      	ldrb	r3, [r5, #9]
 80005ec:	2b4e      	cmp	r3, #78	; 0x4e
 80005ee:	d1e6      	bne.n	80005be <d_source_name+0x4a>
 80005f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80005f2:	6962      	ldr	r2, [r4, #20]
 80005f4:	69a1      	ldr	r1, [r4, #24]
 80005f6:	3316      	adds	r3, #22
 80005f8:	1b9e      	subs	r6, r3, r6
 80005fa:	428a      	cmp	r2, r1
 80005fc:	6326      	str	r6, [r4, #48]	; 0x30
 80005fe:	daf1      	bge.n	80005e4 <d_source_name+0x70>
 8000600:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8000604:	6921      	ldr	r1, [r4, #16]
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	3201      	adds	r2, #1
 800060a:	18c8      	adds	r0, r1, r3
 800060c:	6162      	str	r2, [r4, #20]
 800060e:	d0ea      	beq.n	80005e6 <d_source_name+0x72>
 8000610:	2500      	movs	r5, #0
 8000612:	54cd      	strb	r5, [r1, r3]
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <d_source_name+0xb4>)
 8000616:	6042      	str	r2, [r0, #4]
 8000618:	2315      	movs	r3, #21
 800061a:	6083      	str	r3, [r0, #8]
 800061c:	e7e3      	b.n	80005e6 <d_source_name+0x72>
 800061e:	2000      	movs	r0, #0
 8000620:	bd70      	pop	{r4, r5, r6, pc}
 8000622:	bf00      	nop
 8000624:	080184cc 	.word	0x080184cc
 8000628:	080184d8 	.word	0x080184d8

0800062c <d_abi_tags>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	68c3      	ldr	r3, [r0, #12]
 8000630:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 8000632:	781a      	ldrb	r2, [r3, #0]
 8000634:	2a42      	cmp	r2, #66	; 0x42
 8000636:	4604      	mov	r4, r0
 8000638:	460d      	mov	r5, r1
 800063a:	d10f      	bne.n	800065c <d_abi_tags+0x30>
 800063c:	3301      	adds	r3, #1
 800063e:	60e3      	str	r3, [r4, #12]
 8000640:	4620      	mov	r0, r4
 8000642:	f7ff ff97 	bl	8000574 <d_source_name>
 8000646:	462a      	mov	r2, r5
 8000648:	4603      	mov	r3, r0
 800064a:	214b      	movs	r1, #75	; 0x4b
 800064c:	4620      	mov	r0, r4
 800064e:	f7ff fdbf 	bl	80001d0 <d_make_comp>
 8000652:	68e3      	ldr	r3, [r4, #12]
 8000654:	781a      	ldrb	r2, [r3, #0]
 8000656:	2a42      	cmp	r2, #66	; 0x42
 8000658:	4605      	mov	r5, r0
 800065a:	d0ef      	beq.n	800063c <d_abi_tags+0x10>
 800065c:	62e6      	str	r6, [r4, #44]	; 0x2c
 800065e:	4628      	mov	r0, r5
 8000660:	bd70      	pop	{r4, r5, r6, pc}
 8000662:	bf00      	nop

08000664 <d_substitution>:
 8000664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000668:	4605      	mov	r5, r0
 800066a:	68c0      	ldr	r0, [r0, #12]
 800066c:	7803      	ldrb	r3, [r0, #0]
 800066e:	2b53      	cmp	r3, #83	; 0x53
 8000670:	d002      	beq.n	8000678 <d_substitution+0x14>
 8000672:	2000      	movs	r0, #0
 8000674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000678:	1c43      	adds	r3, r0, #1
 800067a:	60eb      	str	r3, [r5, #12]
 800067c:	7842      	ldrb	r2, [r0, #1]
 800067e:	b1a2      	cbz	r2, 80006aa <d_substitution+0x46>
 8000680:	1c83      	adds	r3, r0, #2
 8000682:	60eb      	str	r3, [r5, #12]
 8000684:	7842      	ldrb	r2, [r0, #1]
 8000686:	2a5f      	cmp	r2, #95	; 0x5f
 8000688:	d15a      	bne.n	8000740 <d_substitution+0xdc>
 800068a:	2300      	movs	r3, #0
 800068c:	6a2a      	ldr	r2, [r5, #32]
 800068e:	4293      	cmp	r3, r2
 8000690:	d2ef      	bcs.n	8000672 <d_substitution+0xe>
 8000692:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8000694:	69e9      	ldr	r1, [r5, #28]
 8000696:	3201      	adds	r2, #1
 8000698:	62aa      	str	r2, [r5, #40]	; 0x28
 800069a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800069e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80006a2:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 80006a6:	2b19      	cmp	r3, #25
 80006a8:	d94f      	bls.n	800074a <d_substitution+0xe6>
 80006aa:	68ab      	ldr	r3, [r5, #8]
 80006ac:	f003 0308 	and.w	r3, r3, #8
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	bf14      	ite	ne
 80006b4:	2401      	movne	r4, #1
 80006b6:	2400      	moveq	r4, #0
 80006b8:	d101      	bne.n	80006be <d_substitution+0x5a>
 80006ba:	2900      	cmp	r1, #0
 80006bc:	d169      	bne.n	8000792 <d_substitution+0x12e>
 80006be:	4b46      	ldr	r3, [pc, #280]	; (80007d8 <d_substitution+0x174>)
 80006c0:	2174      	movs	r1, #116	; 0x74
 80006c2:	f103 00c4 	add.w	r0, r3, #196	; 0xc4
 80006c6:	e003      	b.n	80006d0 <d_substitution+0x6c>
 80006c8:	331c      	adds	r3, #28
 80006ca:	4283      	cmp	r3, r0
 80006cc:	d2d1      	bcs.n	8000672 <d_substitution+0xe>
 80006ce:	7819      	ldrb	r1, [r3, #0]
 80006d0:	428a      	cmp	r2, r1
 80006d2:	d1f9      	bne.n	80006c8 <d_substitution+0x64>
 80006d4:	695e      	ldr	r6, [r3, #20]
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d07b      	beq.n	80007d2 <d_substitution+0x16e>
 80006da:	696a      	ldr	r2, [r5, #20]
 80006dc:	69a9      	ldr	r1, [r5, #24]
 80006de:	428a      	cmp	r2, r1
 80006e0:	da63      	bge.n	80007aa <d_substitution+0x146>
 80006e2:	eb02 0742 	add.w	r7, r2, r2, lsl #1
 80006e6:	f8d5 e010 	ldr.w	lr, [r5, #16]
 80006ea:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80006ee:	00bf      	lsls	r7, r7, #2
 80006f0:	3201      	adds	r2, #1
 80006f2:	eb1e 0007 	adds.w	r0, lr, r7
 80006f6:	616a      	str	r2, [r5, #20]
 80006f8:	d006      	beq.n	8000708 <d_substitution+0xa4>
 80006fa:	f04f 0c18 	mov.w	ip, #24
 80006fe:	f80e c007 	strb.w	ip, [lr, r7]
 8000702:	6046      	str	r6, [r0, #4]
 8000704:	f8c0 8008 	str.w	r8, [r0, #8]
 8000708:	62e8      	str	r0, [r5, #44]	; 0x2c
 800070a:	2c00      	cmp	r4, #0
 800070c:	d04a      	beq.n	80007a4 <d_substitution+0x140>
 800070e:	68de      	ldr	r6, [r3, #12]
 8000710:	691c      	ldr	r4, [r3, #16]
 8000712:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000714:	4291      	cmp	r1, r2
 8000716:	4423      	add	r3, r4
 8000718:	632b      	str	r3, [r5, #48]	; 0x30
 800071a:	dd41      	ble.n	80007a0 <d_substitution+0x13c>
 800071c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8000720:	6929      	ldr	r1, [r5, #16]
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	3201      	adds	r2, #1
 8000726:	18c8      	adds	r0, r1, r3
 8000728:	616a      	str	r2, [r5, #20]
 800072a:	d003      	beq.n	8000734 <d_substitution+0xd0>
 800072c:	2218      	movs	r2, #24
 800072e:	54ca      	strb	r2, [r1, r3]
 8000730:	6046      	str	r6, [r0, #4]
 8000732:	6084      	str	r4, [r0, #8]
 8000734:	68eb      	ldr	r3, [r5, #12]
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b42      	cmp	r3, #66	; 0x42
 800073a:	d038      	beq.n	80007ae <d_substitution+0x14a>
 800073c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000740:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000744:	b2e3      	uxtb	r3, r4
 8000746:	2b09      	cmp	r3, #9
 8000748:	d8ab      	bhi.n	80006a2 <d_substitution+0x3e>
 800074a:	2100      	movs	r1, #0
 800074c:	e00d      	b.n	800076a <d_substitution+0x106>
 800074e:	3b30      	subs	r3, #48	; 0x30
 8000750:	4299      	cmp	r1, r3
 8000752:	d88e      	bhi.n	8000672 <d_substitution+0xe>
 8000754:	68e9      	ldr	r1, [r5, #12]
 8000756:	780a      	ldrb	r2, [r1, #0]
 8000758:	1c48      	adds	r0, r1, #1
 800075a:	b11a      	cbz	r2, 8000764 <d_substitution+0x100>
 800075c:	60e8      	str	r0, [r5, #12]
 800075e:	780a      	ldrb	r2, [r1, #0]
 8000760:	2a5f      	cmp	r2, #95	; 0x5f
 8000762:	d014      	beq.n	800078e <d_substitution+0x12a>
 8000764:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
 8000768:	4619      	mov	r1, r3
 800076a:	b2e4      	uxtb	r4, r4
 800076c:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000770:	2c09      	cmp	r4, #9
 8000772:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
 8000776:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800077a:	d9e8      	bls.n	800074e <d_substitution+0xea>
 800077c:	2819      	cmp	r0, #25
 800077e:	f63f af78 	bhi.w	8000672 <d_substitution+0xe>
 8000782:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
 8000786:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800078a:	3b37      	subs	r3, #55	; 0x37
 800078c:	e7e0      	b.n	8000750 <d_substitution+0xec>
 800078e:	3301      	adds	r3, #1
 8000790:	e77c      	b.n	800068c <d_substitution+0x28>
 8000792:	68eb      	ldr	r3, [r5, #12]
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	3b43      	subs	r3, #67	; 0x43
 8000798:	2b01      	cmp	r3, #1
 800079a:	bf98      	it	ls
 800079c:	2401      	movls	r4, #1
 800079e:	e78e      	b.n	80006be <d_substitution+0x5a>
 80007a0:	2000      	movs	r0, #0
 80007a2:	e7c7      	b.n	8000734 <d_substitution+0xd0>
 80007a4:	685e      	ldr	r6, [r3, #4]
 80007a6:	689c      	ldr	r4, [r3, #8]
 80007a8:	e7b3      	b.n	8000712 <d_substitution+0xae>
 80007aa:	2000      	movs	r0, #0
 80007ac:	e7ac      	b.n	8000708 <d_substitution+0xa4>
 80007ae:	4601      	mov	r1, r0
 80007b0:	4628      	mov	r0, r5
 80007b2:	f7ff ff3b 	bl	800062c <d_abi_tags>
 80007b6:	2800      	cmp	r0, #0
 80007b8:	f43f af5b 	beq.w	8000672 <d_substitution+0xe>
 80007bc:	6a2b      	ldr	r3, [r5, #32]
 80007be:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80007c0:	4293      	cmp	r3, r2
 80007c2:	dabb      	bge.n	800073c <d_substitution+0xd8>
 80007c4:	69e9      	ldr	r1, [r5, #28]
 80007c6:	1c5a      	adds	r2, r3, #1
 80007c8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80007cc:	622a      	str	r2, [r5, #32]
 80007ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80007d2:	69a9      	ldr	r1, [r5, #24]
 80007d4:	696a      	ldr	r2, [r5, #20]
 80007d6:	e798      	b.n	800070a <d_substitution+0xa6>
 80007d8:	080176e4 	.word	0x080176e4

080007dc <d_call_offset>:
 80007dc:	b538      	push	{r3, r4, r5, lr}
 80007de:	4604      	mov	r4, r0
 80007e0:	b929      	cbnz	r1, 80007ee <d_call_offset+0x12>
 80007e2:	68c3      	ldr	r3, [r0, #12]
 80007e4:	781a      	ldrb	r2, [r3, #0]
 80007e6:	b132      	cbz	r2, 80007f6 <d_call_offset+0x1a>
 80007e8:	1c5a      	adds	r2, r3, #1
 80007ea:	60c2      	str	r2, [r0, #12]
 80007ec:	7819      	ldrb	r1, [r3, #0]
 80007ee:	2968      	cmp	r1, #104	; 0x68
 80007f0:	d019      	beq.n	8000826 <d_call_offset+0x4a>
 80007f2:	2976      	cmp	r1, #118	; 0x76
 80007f4:	d001      	beq.n	80007fa <d_call_offset+0x1e>
 80007f6:	2000      	movs	r0, #0
 80007f8:	bd38      	pop	{r3, r4, r5, pc}
 80007fa:	f104 050c 	add.w	r5, r4, #12
 80007fe:	4628      	mov	r0, r5
 8000800:	f7ff fe38 	bl	8000474 <d_number.isra.0>
 8000804:	68e3      	ldr	r3, [r4, #12]
 8000806:	781a      	ldrb	r2, [r3, #0]
 8000808:	2a5f      	cmp	r2, #95	; 0x5f
 800080a:	d1f4      	bne.n	80007f6 <d_call_offset+0x1a>
 800080c:	3301      	adds	r3, #1
 800080e:	60e3      	str	r3, [r4, #12]
 8000810:	4628      	mov	r0, r5
 8000812:	f7ff fe2f 	bl	8000474 <d_number.isra.0>
 8000816:	68e3      	ldr	r3, [r4, #12]
 8000818:	781a      	ldrb	r2, [r3, #0]
 800081a:	2a5f      	cmp	r2, #95	; 0x5f
 800081c:	d1eb      	bne.n	80007f6 <d_call_offset+0x1a>
 800081e:	3301      	adds	r3, #1
 8000820:	60e3      	str	r3, [r4, #12]
 8000822:	2001      	movs	r0, #1
 8000824:	bd38      	pop	{r3, r4, r5, pc}
 8000826:	f104 000c 	add.w	r0, r4, #12
 800082a:	f7ff fe23 	bl	8000474 <d_number.isra.0>
 800082e:	e7f2      	b.n	8000816 <d_call_offset+0x3a>

08000830 <d_lookup_template_argument.isra.6>:
 8000830:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8000834:	b19b      	cbz	r3, 800085e <d_lookup_template_argument.isra.6+0x2e>
 8000836:	680a      	ldr	r2, [r1, #0]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	2a00      	cmp	r2, #0
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	db09      	blt.n	8000854 <d_lookup_template_argument.isra.6+0x24>
 8000840:	b923      	cbnz	r3, 800084c <d_lookup_template_argument.isra.6+0x1c>
 8000842:	e007      	b.n	8000854 <d_lookup_template_argument.isra.6+0x24>
 8000844:	b142      	cbz	r2, 8000858 <d_lookup_template_argument.isra.6+0x28>
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	3a01      	subs	r2, #1
 800084a:	b11b      	cbz	r3, 8000854 <d_lookup_template_argument.isra.6+0x24>
 800084c:	7819      	ldrb	r1, [r3, #0]
 800084e:	292f      	cmp	r1, #47	; 0x2f
 8000850:	d0f8      	beq.n	8000844 <d_lookup_template_argument.isra.6+0x14>
 8000852:	2300      	movs	r3, #0
 8000854:	4618      	mov	r0, r3
 8000856:	4770      	bx	lr
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	4618      	mov	r0, r3
 800085c:	4770      	bx	lr
 800085e:	2201      	movs	r2, #1
 8000860:	f8c0 2118 	str.w	r2, [r0, #280]	; 0x118
 8000864:	e7f6      	b.n	8000854 <d_lookup_template_argument.isra.6+0x24>
 8000866:	bf00      	nop

08000868 <d_find_pack>:
 8000868:	2900      	cmp	r1, #0
 800086a:	d041      	beq.n	80008f0 <d_find_pack+0x88>
 800086c:	b538      	push	{r3, r4, r5, lr}
 800086e:	4605      	mov	r5, r0
 8000870:	460c      	mov	r4, r1
 8000872:	7823      	ldrb	r3, [r4, #0]
 8000874:	2b4b      	cmp	r3, #75	; 0x4b
 8000876:	d827      	bhi.n	80008c8 <d_find_pack+0x60>
 8000878:	e8df f003 	tbb	[pc, r3]
 800087c:	2626262e 	.word	0x2626262e
 8000880:	2b2e3026 	.word	0x2b2e3026
 8000884:	2626262b 	.word	0x2626262b
 8000888:	26262626 	.word	0x26262626
 800088c:	26262626 	.word	0x26262626
 8000890:	26262626 	.word	0x26262626
 8000894:	2626262e 	.word	0x2626262e
 8000898:	26262626 	.word	0x26262626
 800089c:	26262626 	.word	0x26262626
 80008a0:	2e262626 	.word	0x2e262626
 80008a4:	26262626 	.word	0x26262626
 80008a8:	2626262e 	.word	0x2626262e
 80008ac:	262b2e26 	.word	0x262b2e26
 80008b0:	26262626 	.word	0x26262626
 80008b4:	26262626 	.word	0x26262626
 80008b8:	26262626 	.word	0x26262626
 80008bc:	26262e2e 	.word	0x26262e2e
 80008c0:	2e2e2e26 	.word	0x2e2e2e26
 80008c4:	2e2e2626 	.word	0x2e2e2626
 80008c8:	6861      	ldr	r1, [r4, #4]
 80008ca:	4628      	mov	r0, r5
 80008cc:	f7ff ffcc 	bl	8000868 <d_find_pack>
 80008d0:	b918      	cbnz	r0, 80008da <d_find_pack+0x72>
 80008d2:	68a4      	ldr	r4, [r4, #8]
 80008d4:	2c00      	cmp	r4, #0
 80008d6:	d1cc      	bne.n	8000872 <d_find_pack+0xa>
 80008d8:	2000      	movs	r0, #0
 80008da:	bd38      	pop	{r3, r4, r5, pc}
 80008dc:	1d21      	adds	r1, r4, #4
 80008de:	4628      	mov	r0, r5
 80008e0:	f7ff ffa6 	bl	8000830 <d_lookup_template_argument.isra.6>
 80008e4:	2800      	cmp	r0, #0
 80008e6:	d0f7      	beq.n	80008d8 <d_find_pack+0x70>
 80008e8:	7803      	ldrb	r3, [r0, #0]
 80008ea:	2b2f      	cmp	r3, #47	; 0x2f
 80008ec:	d1f4      	bne.n	80008d8 <d_find_pack+0x70>
 80008ee:	bd38      	pop	{r3, r4, r5, pc}
 80008f0:	2000      	movs	r0, #0
 80008f2:	4770      	bx	lr

080008f4 <d_growable_string_callback_adapter>:
 80008f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008f6:	4615      	mov	r5, r2
 80008f8:	6852      	ldr	r2, [r2, #4]
 80008fa:	68ac      	ldr	r4, [r5, #8]
 80008fc:	1c4b      	adds	r3, r1, #1
 80008fe:	4413      	add	r3, r2
 8000900:	42a3      	cmp	r3, r4
 8000902:	b083      	sub	sp, #12
 8000904:	460e      	mov	r6, r1
 8000906:	4607      	mov	r7, r0
 8000908:	d813      	bhi.n	8000932 <d_growable_string_callback_adapter+0x3e>
 800090a:	68ec      	ldr	r4, [r5, #12]
 800090c:	b10c      	cbz	r4, 8000912 <d_growable_string_callback_adapter+0x1e>
 800090e:	b003      	add	sp, #12
 8000910:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000912:	e895 0009 	ldmia.w	r5, {r0, r3}
 8000916:	4632      	mov	r2, r6
 8000918:	4639      	mov	r1, r7
 800091a:	4418      	add	r0, r3
 800091c:	f010 fb99 	bl	8011052 <memcpy>
 8000920:	682b      	ldr	r3, [r5, #0]
 8000922:	686a      	ldr	r2, [r5, #4]
 8000924:	4433      	add	r3, r6
 8000926:	549c      	strb	r4, [r3, r2]
 8000928:	686b      	ldr	r3, [r5, #4]
 800092a:	441e      	add	r6, r3
 800092c:	606e      	str	r6, [r5, #4]
 800092e:	b003      	add	sp, #12
 8000930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000932:	68ea      	ldr	r2, [r5, #12]
 8000934:	2a00      	cmp	r2, #0
 8000936:	d1ea      	bne.n	800090e <d_growable_string_callback_adapter+0x1a>
 8000938:	b91c      	cbnz	r4, 8000942 <d_growable_string_callback_adapter+0x4e>
 800093a:	2b02      	cmp	r3, #2
 800093c:	f04f 0402 	mov.w	r4, #2
 8000940:	d902      	bls.n	8000948 <d_growable_string_callback_adapter+0x54>
 8000942:	0064      	lsls	r4, r4, #1
 8000944:	42a3      	cmp	r3, r4
 8000946:	d8fc      	bhi.n	8000942 <d_growable_string_callback_adapter+0x4e>
 8000948:	4621      	mov	r1, r4
 800094a:	6828      	ldr	r0, [r5, #0]
 800094c:	f010 fc6a 	bl	8011224 <realloc>
 8000950:	b110      	cbz	r0, 8000958 <d_growable_string_callback_adapter+0x64>
 8000952:	6028      	str	r0, [r5, #0]
 8000954:	60ac      	str	r4, [r5, #8]
 8000956:	e7d8      	b.n	800090a <d_growable_string_callback_adapter+0x16>
 8000958:	9001      	str	r0, [sp, #4]
 800095a:	6828      	ldr	r0, [r5, #0]
 800095c:	f010 f942 	bl	8010be4 <free>
 8000960:	9b01      	ldr	r3, [sp, #4]
 8000962:	602b      	str	r3, [r5, #0]
 8000964:	2201      	movs	r2, #1
 8000966:	606b      	str	r3, [r5, #4]
 8000968:	60ab      	str	r3, [r5, #8]
 800096a:	60ea      	str	r2, [r5, #12]
 800096c:	e7cf      	b.n	800090e <d_growable_string_callback_adapter+0x1a>
 800096e:	bf00      	nop

08000970 <d_append_num>:
 8000970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000974:	b088      	sub	sp, #32
 8000976:	460a      	mov	r2, r1
 8000978:	4604      	mov	r4, r0
 800097a:	491b      	ldr	r1, [pc, #108]	; (80009e8 <d_append_num+0x78>)
 800097c:	a801      	add	r0, sp, #4
 800097e:	f010 fe2d 	bl	80115dc <sprintf>
 8000982:	a801      	add	r0, sp, #4
 8000984:	f005 ffd6 	bl	8006934 <strlen>
 8000988:	b350      	cbz	r0, 80009e0 <d_append_num+0x70>
 800098a:	ad01      	add	r5, sp, #4
 800098c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8000990:	182f      	adds	r7, r5, r0
 8000992:	f04f 0800 	mov.w	r8, #0
 8000996:	e009      	b.n	80009ac <d_append_num+0x3c>
 8000998:	460b      	mov	r3, r1
 800099a:	42bd      	cmp	r5, r7
 800099c:	f101 0101 	add.w	r1, r1, #1
 80009a0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80009a4:	54e6      	strb	r6, [r4, r3]
 80009a6:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80009aa:	d019      	beq.n	80009e0 <d_append_num+0x70>
 80009ac:	29ff      	cmp	r1, #255	; 0xff
 80009ae:	f815 6b01 	ldrb.w	r6, [r5], #1
 80009b2:	d1f1      	bne.n	8000998 <d_append_num+0x28>
 80009b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80009b8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80009bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80009c0:	4620      	mov	r0, r4
 80009c2:	4798      	blx	r3
 80009c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80009c8:	3301      	adds	r3, #1
 80009ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80009ce:	2300      	movs	r3, #0
 80009d0:	2101      	movs	r1, #1
 80009d2:	42bd      	cmp	r5, r7
 80009d4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80009d8:	54e6      	strb	r6, [r4, r3]
 80009da:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80009de:	d1e5      	bne.n	80009ac <d_append_num+0x3c>
 80009e0:	b008      	add	sp, #32
 80009e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80009e6:	bf00      	nop
 80009e8:	080184f0 	.word	0x080184f0

080009ec <d_exprlist>:
 80009ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009f0:	68c3      	ldr	r3, [r0, #12]
 80009f2:	781d      	ldrb	r5, [r3, #0]
 80009f4:	b083      	sub	sp, #12
 80009f6:	2200      	movs	r2, #0
 80009f8:	428d      	cmp	r5, r1
 80009fa:	4604      	mov	r4, r0
 80009fc:	9201      	str	r2, [sp, #4]
 80009fe:	f000 81c6 	beq.w	8000d8e <d_exprlist+0x3a2>
 8000a02:	4688      	mov	r8, r1
 8000a04:	f8df 949c 	ldr.w	r9, [pc, #1180]	; 8000ea4 <d_exprlist+0x4b8>
 8000a08:	ae01      	add	r6, sp, #4
 8000a0a:	e023      	b.n	8000a54 <d_exprlist+0x68>
 8000a0c:	2a66      	cmp	r2, #102	; 0x66
 8000a0e:	d04c      	beq.n	8000aaa <d_exprlist+0xbe>
 8000a10:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8000a14:	2909      	cmp	r1, #9
 8000a16:	f200 8217 	bhi.w	8000e48 <d_exprlist+0x45c>
 8000a1a:	4620      	mov	r0, r4
 8000a1c:	f001 fb10 	bl	8002040 <d_unqualified_name>
 8000a20:	4605      	mov	r5, r0
 8000a22:	2800      	cmp	r0, #0
 8000a24:	f000 8170 	beq.w	8000d08 <d_exprlist+0x31c>
 8000a28:	68e3      	ldr	r3, [r4, #12]
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	2b49      	cmp	r3, #73	; 0x49
 8000a2e:	f000 8092 	beq.w	8000b56 <d_exprlist+0x16a>
 8000a32:	6367      	str	r7, [r4, #52]	; 0x34
 8000a34:	462a      	mov	r2, r5
 8000a36:	2300      	movs	r3, #0
 8000a38:	212e      	movs	r1, #46	; 0x2e
 8000a3a:	4620      	mov	r0, r4
 8000a3c:	f7ff fbc8 	bl	80001d0 <d_make_comp>
 8000a40:	6030      	str	r0, [r6, #0]
 8000a42:	2800      	cmp	r0, #0
 8000a44:	d05b      	beq.n	8000afe <d_exprlist+0x112>
 8000a46:	68e3      	ldr	r3, [r4, #12]
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	4542      	cmp	r2, r8
 8000a4c:	f100 0608 	add.w	r6, r0, #8
 8000a50:	f000 8107 	beq.w	8000c62 <d_exprlist+0x276>
 8000a54:	2501      	movs	r5, #1
 8000a56:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8000a58:	6365      	str	r5, [r4, #52]	; 0x34
 8000a5a:	781a      	ldrb	r2, [r3, #0]
 8000a5c:	2a4c      	cmp	r2, #76	; 0x4c
 8000a5e:	d047      	beq.n	8000af0 <d_exprlist+0x104>
 8000a60:	2a54      	cmp	r2, #84	; 0x54
 8000a62:	d051      	beq.n	8000b08 <d_exprlist+0x11c>
 8000a64:	2a73      	cmp	r2, #115	; 0x73
 8000a66:	d1d1      	bne.n	8000a0c <d_exprlist+0x20>
 8000a68:	785a      	ldrb	r2, [r3, #1]
 8000a6a:	2a72      	cmp	r2, #114	; 0x72
 8000a6c:	f000 80e2 	beq.w	8000c34 <d_exprlist+0x248>
 8000a70:	2a70      	cmp	r2, #112	; 0x70
 8000a72:	f000 80fd 	beq.w	8000c70 <d_exprlist+0x284>
 8000a76:	4620      	mov	r0, r4
 8000a78:	f001 fa22 	bl	8001ec0 <d_operator_name>
 8000a7c:	4605      	mov	r5, r0
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	f000 8142 	beq.w	8000d08 <d_exprlist+0x31c>
 8000a84:	782b      	ldrb	r3, [r5, #0]
 8000a86:	2b31      	cmp	r3, #49	; 0x31
 8000a88:	d043      	beq.n	8000b12 <d_exprlist+0x126>
 8000a8a:	2b32      	cmp	r3, #50	; 0x32
 8000a8c:	d05c      	beq.n	8000b48 <d_exprlist+0x15c>
 8000a8e:	2b33      	cmp	r3, #51	; 0x33
 8000a90:	d17b      	bne.n	8000b8a <d_exprlist+0x19e>
 8000a92:	68e3      	ldr	r3, [r4, #12]
 8000a94:	781a      	ldrb	r2, [r3, #0]
 8000a96:	2a5f      	cmp	r2, #95	; 0x5f
 8000a98:	f040 80c1 	bne.w	8000c1e <d_exprlist+0x232>
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60e3      	str	r3, [r4, #12]
 8000aa0:	2145      	movs	r1, #69	; 0x45
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	f7ff ffa2 	bl	80009ec <d_exprlist>
 8000aa8:	e0bc      	b.n	8000c24 <d_exprlist+0x238>
 8000aaa:	785a      	ldrb	r2, [r3, #1]
 8000aac:	2a70      	cmp	r2, #112	; 0x70
 8000aae:	d1e2      	bne.n	8000a76 <d_exprlist+0x8a>
 8000ab0:	1c9a      	adds	r2, r3, #2
 8000ab2:	60e2      	str	r2, [r4, #12]
 8000ab4:	789a      	ldrb	r2, [r3, #2]
 8000ab6:	2a54      	cmp	r2, #84	; 0x54
 8000ab8:	d069      	beq.n	8000b8e <d_exprlist+0x1a2>
 8000aba:	4620      	mov	r0, r4
 8000abc:	f7ff fd1c 	bl	80004f8 <d_compact_number>
 8000ac0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8000ac4:	4298      	cmp	r0, r3
 8000ac6:	d060      	beq.n	8000b8a <d_exprlist+0x19e>
 8000ac8:	1c43      	adds	r3, r0, #1
 8000aca:	d05e      	beq.n	8000b8a <d_exprlist+0x19e>
 8000acc:	3001      	adds	r0, #1
 8000ace:	6963      	ldr	r3, [r4, #20]
 8000ad0:	69a2      	ldr	r2, [r4, #24]
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	da59      	bge.n	8000b8a <d_exprlist+0x19e>
 8000ad6:	6922      	ldr	r2, [r4, #16]
 8000ad8:	1c59      	adds	r1, r3, #1
 8000ada:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000ade:	eb12 0583 	adds.w	r5, r2, r3, lsl #2
 8000ae2:	6161      	str	r1, [r4, #20]
 8000ae4:	d051      	beq.n	8000b8a <d_exprlist+0x19e>
 8000ae6:	2106      	movs	r1, #6
 8000ae8:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
 8000aec:	6068      	str	r0, [r5, #4]
 8000aee:	e7a0      	b.n	8000a32 <d_exprlist+0x46>
 8000af0:	4620      	mov	r0, r4
 8000af2:	f001 fef3 	bl	80028dc <d_expr_primary>
 8000af6:	4605      	mov	r5, r0
 8000af8:	6367      	str	r7, [r4, #52]	; 0x34
 8000afa:	2d00      	cmp	r5, #0
 8000afc:	d19a      	bne.n	8000a34 <d_exprlist+0x48>
 8000afe:	2500      	movs	r5, #0
 8000b00:	4628      	mov	r0, r5
 8000b02:	b003      	add	sp, #12
 8000b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b08:	4620      	mov	r0, r4
 8000b0a:	f7ff fd11 	bl	8000530 <d_template_param>
 8000b0e:	4605      	mov	r5, r0
 8000b10:	e7f2      	b.n	8000af8 <d_exprlist+0x10c>
 8000b12:	f8d5 b004 	ldr.w	fp, [r5, #4]
 8000b16:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000b18:	f8db 2008 	ldr.w	r2, [fp, #8]
 8000b1c:	f8db a000 	ldr.w	sl, [fp]
 8000b20:	3a02      	subs	r2, #2
 8000b22:	4413      	add	r3, r2
 8000b24:	6323      	str	r3, [r4, #48]	; 0x30
 8000b26:	4650      	mov	r0, sl
 8000b28:	4649      	mov	r1, r9
 8000b2a:	f005 fef9 	bl	8006920 <strcmp>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	f000 80e6 	beq.w	8000d00 <d_exprlist+0x314>
 8000b34:	f8db 300c 	ldr.w	r3, [fp, #12]
 8000b38:	2b03      	cmp	r3, #3
 8000b3a:	d826      	bhi.n	8000b8a <d_exprlist+0x19e>
 8000b3c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000b40:	0135002b 	.word	0x0135002b
 8000b44:	00a50033 	.word	0x00a50033
 8000b48:	686b      	ldr	r3, [r5, #4]
 8000b4a:	2b03      	cmp	r3, #3
 8000b4c:	d81d      	bhi.n	8000b8a <d_exprlist+0x19e>
 8000b4e:	e8df f003 	tbb	[pc, r3]
 8000b52:	6622      	.short	0x6622
 8000b54:	1c1c      	.short	0x1c1c
 8000b56:	4620      	mov	r0, r4
 8000b58:	f000 fc04 	bl	8001364 <d_template_args>
 8000b5c:	462a      	mov	r2, r5
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2104      	movs	r1, #4
 8000b62:	4620      	mov	r0, r4
 8000b64:	f7ff fb34 	bl	80001d0 <d_make_comp>
 8000b68:	4605      	mov	r5, r0
 8000b6a:	e7c5      	b.n	8000af8 <d_exprlist+0x10c>
 8000b6c:	2a74      	cmp	r2, #116	; 0x74
 8000b6e:	d182      	bne.n	8000a76 <d_exprlist+0x8a>
 8000b70:	785b      	ldrb	r3, [r3, #1]
 8000b72:	2b6c      	cmp	r3, #108	; 0x6c
 8000b74:	f47f af7f 	bne.w	8000a76 <d_exprlist+0x8a>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	f000 fdb9 	bl	80016f0 <d_type>
 8000b7e:	68e3      	ldr	r3, [r4, #12]
 8000b80:	785a      	ldrb	r2, [r3, #1]
 8000b82:	4605      	mov	r5, r0
 8000b84:	2a00      	cmp	r2, #0
 8000b86:	f040 8169 	bne.w	8000e5c <d_exprlist+0x470>
 8000b8a:	6367      	str	r7, [r4, #52]	; 0x34
 8000b8c:	e7b7      	b.n	8000afe <d_exprlist+0x112>
 8000b8e:	3303      	adds	r3, #3
 8000b90:	60e3      	str	r3, [r4, #12]
 8000b92:	2000      	movs	r0, #0
 8000b94:	e79b      	b.n	8000ace <d_exprlist+0xe2>
 8000b96:	462a      	mov	r2, r5
 8000b98:	2300      	movs	r3, #0
 8000b9a:	2135      	movs	r1, #53	; 0x35
 8000b9c:	4620      	mov	r0, r4
 8000b9e:	f7ff fb17 	bl	80001d0 <d_make_comp>
 8000ba2:	4605      	mov	r5, r0
 8000ba4:	e7a8      	b.n	8000af8 <d_exprlist+0x10c>
 8000ba6:	f1ba 0f00 	cmp.w	sl, #0
 8000baa:	d0ee      	beq.n	8000b8a <d_exprlist+0x19e>
 8000bac:	686b      	ldr	r3, [r5, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	785a      	ldrb	r2, [r3, #1]
 8000bb2:	2a63      	cmp	r2, #99	; 0x63
 8000bb4:	f000 80d2 	beq.w	8000d5c <d_exprlist+0x370>
 8000bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8000bbc:	2b66      	cmp	r3, #102	; 0x66
 8000bbe:	f000 80ef 	beq.w	8000da0 <d_exprlist+0x3b4>
 8000bc2:	4620      	mov	r0, r4
 8000bc4:	f000 f970 	bl	8000ea8 <d_expression_1>
 8000bc8:	4683      	mov	fp, r0
 8000bca:	49b1      	ldr	r1, [pc, #708]	; (8000e90 <d_exprlist+0x4a4>)
 8000bcc:	4650      	mov	r0, sl
 8000bce:	f005 fea7 	bl	8006920 <strcmp>
 8000bd2:	2800      	cmp	r0, #0
 8000bd4:	f000 809d 	beq.w	8000d12 <d_exprlist+0x326>
 8000bd8:	49ae      	ldr	r1, [pc, #696]	; (8000e94 <d_exprlist+0x4a8>)
 8000bda:	4650      	mov	r0, sl
 8000bdc:	f005 fea0 	bl	8006920 <strcmp>
 8000be0:	b130      	cbz	r0, 8000bf0 <d_exprlist+0x204>
 8000be2:	4650      	mov	r0, sl
 8000be4:	49ac      	ldr	r1, [pc, #688]	; (8000e98 <d_exprlist+0x4ac>)
 8000be6:	f005 fe9b 	bl	8006920 <strcmp>
 8000bea:	2800      	cmp	r0, #0
 8000bec:	f040 8083 	bne.w	8000cf6 <d_exprlist+0x30a>
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	f001 fa25 	bl	8002040 <d_unqualified_name>
 8000bf6:	68e3      	ldr	r3, [r4, #12]
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b49      	cmp	r3, #73	; 0x49
 8000bfc:	4682      	mov	sl, r0
 8000bfe:	f000 80e9 	beq.w	8000dd4 <d_exprlist+0x3e8>
 8000c02:	4653      	mov	r3, sl
 8000c04:	465a      	mov	r2, fp
 8000c06:	2138      	movs	r1, #56	; 0x38
 8000c08:	4620      	mov	r0, r4
 8000c0a:	f7ff fae1 	bl	80001d0 <d_make_comp>
 8000c0e:	462a      	mov	r2, r5
 8000c10:	4603      	mov	r3, r0
 8000c12:	2137      	movs	r1, #55	; 0x37
 8000c14:	4620      	mov	r0, r4
 8000c16:	f7ff fadb 	bl	80001d0 <d_make_comp>
 8000c1a:	4605      	mov	r5, r0
 8000c1c:	e76c      	b.n	8000af8 <d_exprlist+0x10c>
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f000 f942 	bl	8000ea8 <d_expression_1>
 8000c24:	4603      	mov	r3, r0
 8000c26:	462a      	mov	r2, r5
 8000c28:	2136      	movs	r1, #54	; 0x36
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	f7ff fad0 	bl	80001d0 <d_make_comp>
 8000c30:	4605      	mov	r5, r0
 8000c32:	e761      	b.n	8000af8 <d_exprlist+0x10c>
 8000c34:	3302      	adds	r3, #2
 8000c36:	60e3      	str	r3, [r4, #12]
 8000c38:	4620      	mov	r0, r4
 8000c3a:	f000 fd59 	bl	80016f0 <d_type>
 8000c3e:	4682      	mov	sl, r0
 8000c40:	4620      	mov	r0, r4
 8000c42:	f001 f9fd 	bl	8002040 <d_unqualified_name>
 8000c46:	68e3      	ldr	r3, [r4, #12]
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b49      	cmp	r3, #73	; 0x49
 8000c4c:	4683      	mov	fp, r0
 8000c4e:	f000 8093 	beq.w	8000d78 <d_exprlist+0x38c>
 8000c52:	4603      	mov	r3, r0
 8000c54:	4629      	mov	r1, r5
 8000c56:	4652      	mov	r2, sl
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f7ff fab9 	bl	80001d0 <d_make_comp>
 8000c5e:	4605      	mov	r5, r0
 8000c60:	e74a      	b.n	8000af8 <d_exprlist+0x10c>
 8000c62:	9d01      	ldr	r5, [sp, #4]
 8000c64:	3301      	adds	r3, #1
 8000c66:	4628      	mov	r0, r5
 8000c68:	60e3      	str	r3, [r4, #12]
 8000c6a:	b003      	add	sp, #12
 8000c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c70:	3302      	adds	r3, #2
 8000c72:	60e3      	str	r3, [r4, #12]
 8000c74:	4620      	mov	r0, r4
 8000c76:	f000 f917 	bl	8000ea8 <d_expression_1>
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	4602      	mov	r2, r0
 8000c7e:	214a      	movs	r1, #74	; 0x4a
 8000c80:	4620      	mov	r0, r4
 8000c82:	f7ff faa5 	bl	80001d0 <d_make_comp>
 8000c86:	4605      	mov	r5, r0
 8000c88:	e736      	b.n	8000af8 <d_exprlist+0x10c>
 8000c8a:	f1ba 0f00 	cmp.w	sl, #0
 8000c8e:	f43f af7c 	beq.w	8000b8a <d_exprlist+0x19e>
 8000c92:	4982      	ldr	r1, [pc, #520]	; (8000e9c <d_exprlist+0x4b0>)
 8000c94:	4650      	mov	r0, sl
 8000c96:	f005 fe43 	bl	8006920 <strcmp>
 8000c9a:	2800      	cmp	r0, #0
 8000c9c:	d03f      	beq.n	8000d1e <d_exprlist+0x332>
 8000c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8000ca2:	2b66      	cmp	r3, #102	; 0x66
 8000ca4:	f000 80bd 	beq.w	8000e22 <d_exprlist+0x436>
 8000ca8:	2b6e      	cmp	r3, #110	; 0x6e
 8000caa:	f47f af6e 	bne.w	8000b8a <d_exprlist+0x19e>
 8000cae:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8000cb2:	2b77      	cmp	r3, #119	; 0x77
 8000cb4:	d002      	beq.n	8000cbc <d_exprlist+0x2d0>
 8000cb6:	2b61      	cmp	r3, #97	; 0x61
 8000cb8:	f47f af67 	bne.w	8000b8a <d_exprlist+0x19e>
 8000cbc:	215f      	movs	r1, #95	; 0x5f
 8000cbe:	4620      	mov	r0, r4
 8000cc0:	f7ff fe94 	bl	80009ec <d_exprlist>
 8000cc4:	4682      	mov	sl, r0
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	f000 fd12 	bl	80016f0 <d_type>
 8000ccc:	68e3      	ldr	r3, [r4, #12]
 8000cce:	781a      	ldrb	r2, [r3, #0]
 8000cd0:	2a45      	cmp	r2, #69	; 0x45
 8000cd2:	4683      	mov	fp, r0
 8000cd4:	f000 80a1 	beq.w	8000e1a <d_exprlist+0x42e>
 8000cd8:	2a70      	cmp	r2, #112	; 0x70
 8000cda:	f000 80a6 	beq.w	8000e2a <d_exprlist+0x43e>
 8000cde:	2a69      	cmp	r2, #105	; 0x69
 8000ce0:	f47f af53 	bne.w	8000b8a <d_exprlist+0x19e>
 8000ce4:	785b      	ldrb	r3, [r3, #1]
 8000ce6:	2b6c      	cmp	r3, #108	; 0x6c
 8000ce8:	f47f af4f 	bne.w	8000b8a <d_exprlist+0x19e>
 8000cec:	4620      	mov	r0, r4
 8000cee:	f000 f8db 	bl	8000ea8 <d_expression_1>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	e01f      	b.n	8000d36 <d_exprlist+0x34a>
 8000cf6:	4620      	mov	r0, r4
 8000cf8:	f000 f8d6 	bl	8000ea8 <d_expression_1>
 8000cfc:	4682      	mov	sl, r0
 8000cfe:	e780      	b.n	8000c02 <d_exprlist+0x216>
 8000d00:	4620      	mov	r0, r4
 8000d02:	f000 fcf5 	bl	80016f0 <d_type>
 8000d06:	e78d      	b.n	8000c24 <d_exprlist+0x238>
 8000d08:	4628      	mov	r0, r5
 8000d0a:	6367      	str	r7, [r4, #52]	; 0x34
 8000d0c:	b003      	add	sp, #12
 8000d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d12:	2145      	movs	r1, #69	; 0x45
 8000d14:	4620      	mov	r0, r4
 8000d16:	f7ff fe69 	bl	80009ec <d_exprlist>
 8000d1a:	4682      	mov	sl, r0
 8000d1c:	e771      	b.n	8000c02 <d_exprlist+0x216>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f000 f8c2 	bl	8000ea8 <d_expression_1>
 8000d24:	4682      	mov	sl, r0
 8000d26:	4620      	mov	r0, r4
 8000d28:	f000 f8be 	bl	8000ea8 <d_expression_1>
 8000d2c:	4683      	mov	fp, r0
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f000 f8ba 	bl	8000ea8 <d_expression_1>
 8000d34:	4603      	mov	r3, r0
 8000d36:	465a      	mov	r2, fp
 8000d38:	213b      	movs	r1, #59	; 0x3b
 8000d3a:	4620      	mov	r0, r4
 8000d3c:	f7ff fa48 	bl	80001d0 <d_make_comp>
 8000d40:	4652      	mov	r2, sl
 8000d42:	4603      	mov	r3, r0
 8000d44:	213a      	movs	r1, #58	; 0x3a
 8000d46:	4620      	mov	r0, r4
 8000d48:	f7ff fa42 	bl	80001d0 <d_make_comp>
 8000d4c:	462a      	mov	r2, r5
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2139      	movs	r1, #57	; 0x39
 8000d52:	4620      	mov	r0, r4
 8000d54:	f7ff fa3c 	bl	80001d0 <d_make_comp>
 8000d58:	4605      	mov	r5, r0
 8000d5a:	e6cd      	b.n	8000af8 <d_exprlist+0x10c>
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8000d62:	2a01      	cmp	r2, #1
 8000d64:	d903      	bls.n	8000d6e <d_exprlist+0x382>
 8000d66:	3b72      	subs	r3, #114	; 0x72
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	f63f af25 	bhi.w	8000bb8 <d_exprlist+0x1cc>
 8000d6e:	4620      	mov	r0, r4
 8000d70:	f000 fcbe 	bl	80016f0 <d_type>
 8000d74:	4683      	mov	fp, r0
 8000d76:	e728      	b.n	8000bca <d_exprlist+0x1de>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	f000 faf3 	bl	8001364 <d_template_args>
 8000d7e:	465a      	mov	r2, fp
 8000d80:	4603      	mov	r3, r0
 8000d82:	2104      	movs	r1, #4
 8000d84:	4620      	mov	r0, r4
 8000d86:	f7ff fa23 	bl	80001d0 <d_make_comp>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	e762      	b.n	8000c54 <d_exprlist+0x268>
 8000d8e:	3301      	adds	r3, #1
 8000d90:	60c3      	str	r3, [r0, #12]
 8000d92:	212e      	movs	r1, #46	; 0x2e
 8000d94:	4613      	mov	r3, r2
 8000d96:	b003      	add	sp, #12
 8000d98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d9c:	f7ff ba18 	b.w	80001d0 <d_make_comp>
 8000da0:	4620      	mov	r0, r4
 8000da2:	f001 f88d 	bl	8001ec0 <d_operator_name>
 8000da6:	4683      	mov	fp, r0
 8000da8:	e70f      	b.n	8000bca <d_exprlist+0x1de>
 8000daa:	f1ba 0f00 	cmp.w	sl, #0
 8000dae:	f43f af36 	beq.w	8000c1e <d_exprlist+0x232>
 8000db2:	f89a 3000 	ldrb.w	r3, [sl]
 8000db6:	2b70      	cmp	r3, #112	; 0x70
 8000db8:	d017      	beq.n	8000dea <d_exprlist+0x3fe>
 8000dba:	2b6d      	cmp	r3, #109	; 0x6d
 8000dbc:	d015      	beq.n	8000dea <d_exprlist+0x3fe>
 8000dbe:	4650      	mov	r0, sl
 8000dc0:	4937      	ldr	r1, [pc, #220]	; (8000ea0 <d_exprlist+0x4b4>)
 8000dc2:	f005 fdad 	bl	8006920 <strcmp>
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	f47f af29 	bne.w	8000c1e <d_exprlist+0x232>
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f000 fa65 	bl	800129c <d_template_args_1>
 8000dd2:	e727      	b.n	8000c24 <d_exprlist+0x238>
 8000dd4:	4620      	mov	r0, r4
 8000dd6:	f000 fac5 	bl	8001364 <d_template_args>
 8000dda:	4652      	mov	r2, sl
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2104      	movs	r1, #4
 8000de0:	4620      	mov	r0, r4
 8000de2:	f7ff f9f5 	bl	80001d0 <d_make_comp>
 8000de6:	4682      	mov	sl, r0
 8000de8:	e70b      	b.n	8000c02 <d_exprlist+0x216>
 8000dea:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d1e5      	bne.n	8000dbe <d_exprlist+0x3d2>
 8000df2:	68e3      	ldr	r3, [r4, #12]
 8000df4:	781a      	ldrb	r2, [r3, #0]
 8000df6:	2a5f      	cmp	r2, #95	; 0x5f
 8000df8:	d023      	beq.n	8000e42 <d_exprlist+0x456>
 8000dfa:	4650      	mov	r0, sl
 8000dfc:	4928      	ldr	r1, [pc, #160]	; (8000ea0 <d_exprlist+0x4b4>)
 8000dfe:	f005 fd8f 	bl	8006920 <strcmp>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	d03f      	beq.n	8000e86 <d_exprlist+0x49a>
 8000e06:	4620      	mov	r0, r4
 8000e08:	f000 f84e 	bl	8000ea8 <d_expression_1>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	461a      	mov	r2, r3
 8000e10:	2138      	movs	r1, #56	; 0x38
 8000e12:	4620      	mov	r0, r4
 8000e14:	f7ff f9dc 	bl	80001d0 <d_make_comp>
 8000e18:	e704      	b.n	8000c24 <d_exprlist+0x238>
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	60e3      	str	r3, [r4, #12]
 8000e1e:	2300      	movs	r3, #0
 8000e20:	e789      	b.n	8000d36 <d_exprlist+0x34a>
 8000e22:	4620      	mov	r0, r4
 8000e24:	f001 f84c 	bl	8001ec0 <d_operator_name>
 8000e28:	e77c      	b.n	8000d24 <d_exprlist+0x338>
 8000e2a:	785a      	ldrb	r2, [r3, #1]
 8000e2c:	2a69      	cmp	r2, #105	; 0x69
 8000e2e:	f47f aeac 	bne.w	8000b8a <d_exprlist+0x19e>
 8000e32:	3302      	adds	r3, #2
 8000e34:	60e3      	str	r3, [r4, #12]
 8000e36:	2145      	movs	r1, #69	; 0x45
 8000e38:	4620      	mov	r0, r4
 8000e3a:	f7ff fdd7 	bl	80009ec <d_exprlist>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	e779      	b.n	8000d36 <d_exprlist+0x34a>
 8000e42:	3301      	adds	r3, #1
 8000e44:	60e3      	str	r3, [r4, #12]
 8000e46:	e7ba      	b.n	8000dbe <d_exprlist+0x3d2>
 8000e48:	2a6f      	cmp	r2, #111	; 0x6f
 8000e4a:	d015      	beq.n	8000e78 <d_exprlist+0x48c>
 8000e4c:	2a69      	cmp	r2, #105	; 0x69
 8000e4e:	f47f ae8d 	bne.w	8000b6c <d_exprlist+0x180>
 8000e52:	785a      	ldrb	r2, [r3, #1]
 8000e54:	2a6c      	cmp	r2, #108	; 0x6c
 8000e56:	f47f ae0e 	bne.w	8000a76 <d_exprlist+0x8a>
 8000e5a:	2500      	movs	r5, #0
 8000e5c:	3302      	adds	r3, #2
 8000e5e:	60e3      	str	r3, [r4, #12]
 8000e60:	2145      	movs	r1, #69	; 0x45
 8000e62:	4620      	mov	r0, r4
 8000e64:	f7ff fdc2 	bl	80009ec <d_exprlist>
 8000e68:	462a      	mov	r2, r5
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2130      	movs	r1, #48	; 0x30
 8000e6e:	4620      	mov	r0, r4
 8000e70:	f7ff f9ae 	bl	80001d0 <d_make_comp>
 8000e74:	4605      	mov	r5, r0
 8000e76:	e63f      	b.n	8000af8 <d_exprlist+0x10c>
 8000e78:	785a      	ldrb	r2, [r3, #1]
 8000e7a:	2a6e      	cmp	r2, #110	; 0x6e
 8000e7c:	f47f adfb 	bne.w	8000a76 <d_exprlist+0x8a>
 8000e80:	3302      	adds	r3, #2
 8000e82:	60e3      	str	r3, [r4, #12]
 8000e84:	e5c9      	b.n	8000a1a <d_exprlist+0x2e>
 8000e86:	4620      	mov	r0, r4
 8000e88:	f000 fa08 	bl	800129c <d_template_args_1>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	e7be      	b.n	8000e0e <d_exprlist+0x422>
 8000e90:	080184f8 	.word	0x080184f8
 8000e94:	080184fc 	.word	0x080184fc
 8000e98:	08018500 	.word	0x08018500
 8000e9c:	08018504 	.word	0x08018504
 8000ea0:	080184f4 	.word	0x080184f4
 8000ea4:	080189fc 	.word	0x080189fc

08000ea8 <d_expression_1>:
 8000ea8:	68c1      	ldr	r1, [r0, #12]
 8000eaa:	780b      	ldrb	r3, [r1, #0]
 8000eac:	2b4c      	cmp	r3, #76	; 0x4c
 8000eae:	f000 8087 	beq.w	8000fc0 <d_expression_1+0x118>
 8000eb2:	2b54      	cmp	r3, #84	; 0x54
 8000eb4:	f000 8086 	beq.w	8000fc4 <d_expression_1+0x11c>
 8000eb8:	2b73      	cmp	r3, #115	; 0x73
 8000eba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	d037      	beq.n	8000f32 <d_expression_1+0x8a>
 8000ec2:	2b66      	cmp	r3, #102	; 0x66
 8000ec4:	d012      	beq.n	8000eec <d_expression_1+0x44>
 8000ec6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000eca:	2a09      	cmp	r2, #9
 8000ecc:	f200 81b8 	bhi.w	8001240 <d_expression_1+0x398>
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	f001 f8b5 	bl	8002040 <d_unqualified_name>
 8000ed6:	4605      	mov	r5, r0
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d06d      	beq.n	8000fb8 <d_expression_1+0x110>
 8000edc:	68e3      	ldr	r3, [r4, #12]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b49      	cmp	r3, #73	; 0x49
 8000ee2:	f000 8088 	beq.w	8000ff6 <d_expression_1+0x14e>
 8000ee6:	4628      	mov	r0, r5
 8000ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000eec:	784b      	ldrb	r3, [r1, #1]
 8000eee:	2b70      	cmp	r3, #112	; 0x70
 8000ef0:	d039      	beq.n	8000f66 <d_expression_1+0xbe>
 8000ef2:	4620      	mov	r0, r4
 8000ef4:	f000 ffe4 	bl	8001ec0 <d_operator_name>
 8000ef8:	4605      	mov	r5, r0
 8000efa:	2800      	cmp	r0, #0
 8000efc:	d05c      	beq.n	8000fb8 <d_expression_1+0x110>
 8000efe:	7803      	ldrb	r3, [r0, #0]
 8000f00:	2b31      	cmp	r3, #49	; 0x31
 8000f02:	d061      	beq.n	8000fc8 <d_expression_1+0x120>
 8000f04:	2b32      	cmp	r3, #50	; 0x32
 8000f06:	d025      	beq.n	8000f54 <d_expression_1+0xac>
 8000f08:	2b33      	cmp	r3, #51	; 0x33
 8000f0a:	d155      	bne.n	8000fb8 <d_expression_1+0x110>
 8000f0c:	68e3      	ldr	r3, [r4, #12]
 8000f0e:	781a      	ldrb	r2, [r3, #0]
 8000f10:	2a5f      	cmp	r2, #95	; 0x5f
 8000f12:	f040 81b4 	bne.w	800127e <d_expression_1+0x3d6>
 8000f16:	3301      	adds	r3, #1
 8000f18:	60e3      	str	r3, [r4, #12]
 8000f1a:	2145      	movs	r1, #69	; 0x45
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f7ff fd65 	bl	80009ec <d_exprlist>
 8000f22:	4603      	mov	r3, r0
 8000f24:	462a      	mov	r2, r5
 8000f26:	4620      	mov	r0, r4
 8000f28:	2136      	movs	r1, #54	; 0x36
 8000f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f2e:	f7ff b94f 	b.w	80001d0 <d_make_comp>
 8000f32:	784b      	ldrb	r3, [r1, #1]
 8000f34:	2b72      	cmp	r3, #114	; 0x72
 8000f36:	d069      	beq.n	800100c <d_expression_1+0x164>
 8000f38:	2b70      	cmp	r3, #112	; 0x70
 8000f3a:	d1da      	bne.n	8000ef2 <d_expression_1+0x4a>
 8000f3c:	3102      	adds	r1, #2
 8000f3e:	60c1      	str	r1, [r0, #12]
 8000f40:	f7ff ffb2 	bl	8000ea8 <d_expression_1>
 8000f44:	2300      	movs	r3, #0
 8000f46:	4602      	mov	r2, r0
 8000f48:	214a      	movs	r1, #74	; 0x4a
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000f50:	f7ff b93e 	b.w	80001d0 <d_make_comp>
 8000f54:	6843      	ldr	r3, [r0, #4]
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	d82e      	bhi.n	8000fb8 <d_expression_1+0x110>
 8000f5a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8000f5e:	0071      	.short	0x0071
 8000f60:	002d0190 	.word	0x002d0190
 8000f64:	002d      	.short	0x002d
 8000f66:	1c8b      	adds	r3, r1, #2
 8000f68:	60c3      	str	r3, [r0, #12]
 8000f6a:	788b      	ldrb	r3, [r1, #2]
 8000f6c:	2b54      	cmp	r3, #84	; 0x54
 8000f6e:	d063      	beq.n	8001038 <d_expression_1+0x190>
 8000f70:	f7ff fac2 	bl	80004f8 <d_compact_number>
 8000f74:	43c3      	mvns	r3, r0
 8000f76:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8000f7a:	d01d      	beq.n	8000fb8 <d_expression_1+0x110>
 8000f7c:	3001      	adds	r0, #1
 8000f7e:	6963      	ldr	r3, [r4, #20]
 8000f80:	69a2      	ldr	r2, [r4, #24]
 8000f82:	4293      	cmp	r3, r2
 8000f84:	da18      	bge.n	8000fb8 <d_expression_1+0x110>
 8000f86:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8000f8a:	6921      	ldr	r1, [r4, #16]
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	3301      	adds	r3, #1
 8000f90:	188d      	adds	r5, r1, r2
 8000f92:	6163      	str	r3, [r4, #20]
 8000f94:	d0a7      	beq.n	8000ee6 <d_expression_1+0x3e>
 8000f96:	2306      	movs	r3, #6
 8000f98:	548b      	strb	r3, [r1, r2]
 8000f9a:	6068      	str	r0, [r5, #4]
 8000f9c:	e7a3      	b.n	8000ee6 <d_expression_1+0x3e>
 8000f9e:	2b74      	cmp	r3, #116	; 0x74
 8000fa0:	d1a7      	bne.n	8000ef2 <d_expression_1+0x4a>
 8000fa2:	784b      	ldrb	r3, [r1, #1]
 8000fa4:	2b6c      	cmp	r3, #108	; 0x6c
 8000fa6:	d1a4      	bne.n	8000ef2 <d_expression_1+0x4a>
 8000fa8:	f000 fba2 	bl	80016f0 <d_type>
 8000fac:	68e1      	ldr	r1, [r4, #12]
 8000fae:	784b      	ldrb	r3, [r1, #1]
 8000fb0:	4605      	mov	r5, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	f040 814e 	bne.w	8001254 <d_expression_1+0x3ac>
 8000fb8:	2500      	movs	r5, #0
 8000fba:	4628      	mov	r0, r5
 8000fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000fc0:	f001 bc8c 	b.w	80028dc <d_expr_primary>
 8000fc4:	f7ff bab4 	b.w	8000530 <d_template_param>
 8000fc8:	6847      	ldr	r7, [r0, #4]
 8000fca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	683e      	ldr	r6, [r7, #0]
 8000fd0:	49ac      	ldr	r1, [pc, #688]	; (8001284 <d_expression_1+0x3dc>)
 8000fd2:	3a02      	subs	r2, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	6323      	str	r3, [r4, #48]	; 0x30
 8000fd8:	4630      	mov	r0, r6
 8000fda:	f005 fca1 	bl	8006920 <strcmp>
 8000fde:	2800      	cmp	r0, #0
 8000fe0:	f000 80ab 	beq.w	800113a <d_expression_1+0x292>
 8000fe4:	68ff      	ldr	r7, [r7, #12]
 8000fe6:	2f03      	cmp	r7, #3
 8000fe8:	d8e6      	bhi.n	8000fb8 <d_expression_1+0x110>
 8000fea:	e8df f017 	tbh	[pc, r7, lsl #1]
 8000fee:	0029      	.short	0x0029
 8000ff0:	007100ff 	.word	0x007100ff
 8000ff4:	0031      	.short	0x0031
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	f000 f9b4 	bl	8001364 <d_template_args>
 8000ffc:	462a      	mov	r2, r5
 8000ffe:	4603      	mov	r3, r0
 8001000:	2104      	movs	r1, #4
 8001002:	4620      	mov	r0, r4
 8001004:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001008:	f7ff b8e2 	b.w	80001d0 <d_make_comp>
 800100c:	3102      	adds	r1, #2
 800100e:	60c1      	str	r1, [r0, #12]
 8001010:	f000 fb6e 	bl	80016f0 <d_type>
 8001014:	4605      	mov	r5, r0
 8001016:	4620      	mov	r0, r4
 8001018:	f001 f812 	bl	8002040 <d_unqualified_name>
 800101c:	68e3      	ldr	r3, [r4, #12]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b49      	cmp	r3, #73	; 0x49
 8001022:	4606      	mov	r6, r0
 8001024:	f000 80ae 	beq.w	8001184 <d_expression_1+0x2dc>
 8001028:	4603      	mov	r3, r0
 800102a:	462a      	mov	r2, r5
 800102c:	4620      	mov	r0, r4
 800102e:	2101      	movs	r1, #1
 8001030:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001034:	f7ff b8cc 	b.w	80001d0 <d_make_comp>
 8001038:	3103      	adds	r1, #3
 800103a:	60c1      	str	r1, [r0, #12]
 800103c:	2000      	movs	r0, #0
 800103e:	e79e      	b.n	8000f7e <d_expression_1+0xd6>
 8001040:	462a      	mov	r2, r5
 8001042:	4620      	mov	r0, r4
 8001044:	2300      	movs	r3, #0
 8001046:	2135      	movs	r1, #53	; 0x35
 8001048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800104c:	f7ff b8c0 	b.w	80001d0 <d_make_comp>
 8001050:	2e00      	cmp	r6, #0
 8001052:	d0b1      	beq.n	8000fb8 <d_expression_1+0x110>
 8001054:	498c      	ldr	r1, [pc, #560]	; (8001288 <d_expression_1+0x3e0>)
 8001056:	4630      	mov	r0, r6
 8001058:	f005 fc62 	bl	8006920 <strcmp>
 800105c:	2800      	cmp	r0, #0
 800105e:	d071      	beq.n	8001144 <d_expression_1+0x29c>
 8001060:	7833      	ldrb	r3, [r6, #0]
 8001062:	2b66      	cmp	r3, #102	; 0x66
 8001064:	f000 80b2 	beq.w	80011cc <d_expression_1+0x324>
 8001068:	2b6e      	cmp	r3, #110	; 0x6e
 800106a:	d1a5      	bne.n	8000fb8 <d_expression_1+0x110>
 800106c:	7873      	ldrb	r3, [r6, #1]
 800106e:	2b77      	cmp	r3, #119	; 0x77
 8001070:	d001      	beq.n	8001076 <d_expression_1+0x1ce>
 8001072:	2b61      	cmp	r3, #97	; 0x61
 8001074:	d1a0      	bne.n	8000fb8 <d_expression_1+0x110>
 8001076:	215f      	movs	r1, #95	; 0x5f
 8001078:	4620      	mov	r0, r4
 800107a:	f7ff fcb7 	bl	80009ec <d_exprlist>
 800107e:	4606      	mov	r6, r0
 8001080:	4620      	mov	r0, r4
 8001082:	f000 fb35 	bl	80016f0 <d_type>
 8001086:	68e3      	ldr	r3, [r4, #12]
 8001088:	781a      	ldrb	r2, [r3, #0]
 800108a:	2a45      	cmp	r2, #69	; 0x45
 800108c:	4607      	mov	r7, r0
 800108e:	f000 8099 	beq.w	80011c4 <d_expression_1+0x31c>
 8001092:	2a70      	cmp	r2, #112	; 0x70
 8001094:	f000 809e 	beq.w	80011d4 <d_expression_1+0x32c>
 8001098:	2a69      	cmp	r2, #105	; 0x69
 800109a:	d18d      	bne.n	8000fb8 <d_expression_1+0x110>
 800109c:	785b      	ldrb	r3, [r3, #1]
 800109e:	2b6c      	cmp	r3, #108	; 0x6c
 80010a0:	d18a      	bne.n	8000fb8 <d_expression_1+0x110>
 80010a2:	4620      	mov	r0, r4
 80010a4:	f7ff ff00 	bl	8000ea8 <d_expression_1>
 80010a8:	4603      	mov	r3, r0
 80010aa:	463a      	mov	r2, r7
 80010ac:	213b      	movs	r1, #59	; 0x3b
 80010ae:	4620      	mov	r0, r4
 80010b0:	f7ff f88e 	bl	80001d0 <d_make_comp>
 80010b4:	4632      	mov	r2, r6
 80010b6:	4603      	mov	r3, r0
 80010b8:	213a      	movs	r1, #58	; 0x3a
 80010ba:	4620      	mov	r0, r4
 80010bc:	f7ff f888 	bl	80001d0 <d_make_comp>
 80010c0:	462a      	mov	r2, r5
 80010c2:	4603      	mov	r3, r0
 80010c4:	2139      	movs	r1, #57	; 0x39
 80010c6:	4620      	mov	r0, r4
 80010c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80010cc:	f7ff b880 	b.w	80001d0 <d_make_comp>
 80010d0:	2e00      	cmp	r6, #0
 80010d2:	f43f af71 	beq.w	8000fb8 <d_expression_1+0x110>
 80010d6:	686b      	ldr	r3, [r5, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	785a      	ldrb	r2, [r3, #1]
 80010dc:	2a63      	cmp	r2, #99	; 0x63
 80010de:	d044      	beq.n	800116a <d_expression_1+0x2c2>
 80010e0:	7833      	ldrb	r3, [r6, #0]
 80010e2:	2b66      	cmp	r3, #102	; 0x66
 80010e4:	d059      	beq.n	800119a <d_expression_1+0x2f2>
 80010e6:	4620      	mov	r0, r4
 80010e8:	f7ff fede 	bl	8000ea8 <d_expression_1>
 80010ec:	4607      	mov	r7, r0
 80010ee:	4967      	ldr	r1, [pc, #412]	; (800128c <d_expression_1+0x3e4>)
 80010f0:	4630      	mov	r0, r6
 80010f2:	f005 fc15 	bl	8006920 <strcmp>
 80010f6:	b390      	cbz	r0, 800115e <d_expression_1+0x2b6>
 80010f8:	4965      	ldr	r1, [pc, #404]	; (8001290 <d_expression_1+0x3e8>)
 80010fa:	4630      	mov	r0, r6
 80010fc:	f005 fc10 	bl	8006920 <strcmp>
 8001100:	b128      	cbz	r0, 800110e <d_expression_1+0x266>
 8001102:	4630      	mov	r0, r6
 8001104:	4963      	ldr	r1, [pc, #396]	; (8001294 <d_expression_1+0x3ec>)
 8001106:	f005 fc0b 	bl	8006920 <strcmp>
 800110a:	2800      	cmp	r0, #0
 800110c:	d14a      	bne.n	80011a4 <d_expression_1+0x2fc>
 800110e:	4620      	mov	r0, r4
 8001110:	f000 ff96 	bl	8002040 <d_unqualified_name>
 8001114:	68e3      	ldr	r3, [r4, #12]
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b49      	cmp	r3, #73	; 0x49
 800111a:	4606      	mov	r6, r0
 800111c:	d047      	beq.n	80011ae <d_expression_1+0x306>
 800111e:	4633      	mov	r3, r6
 8001120:	463a      	mov	r2, r7
 8001122:	2138      	movs	r1, #56	; 0x38
 8001124:	4620      	mov	r0, r4
 8001126:	f7ff f853 	bl	80001d0 <d_make_comp>
 800112a:	462a      	mov	r2, r5
 800112c:	4603      	mov	r3, r0
 800112e:	2137      	movs	r1, #55	; 0x37
 8001130:	4620      	mov	r0, r4
 8001132:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001136:	f7ff b84b 	b.w	80001d0 <d_make_comp>
 800113a:	4620      	mov	r0, r4
 800113c:	f000 fad8 	bl	80016f0 <d_type>
 8001140:	4603      	mov	r3, r0
 8001142:	e6ef      	b.n	8000f24 <d_expression_1+0x7c>
 8001144:	4620      	mov	r0, r4
 8001146:	f7ff feaf 	bl	8000ea8 <d_expression_1>
 800114a:	4606      	mov	r6, r0
 800114c:	4620      	mov	r0, r4
 800114e:	f7ff feab 	bl	8000ea8 <d_expression_1>
 8001152:	4607      	mov	r7, r0
 8001154:	4620      	mov	r0, r4
 8001156:	f7ff fea7 	bl	8000ea8 <d_expression_1>
 800115a:	4603      	mov	r3, r0
 800115c:	e7a5      	b.n	80010aa <d_expression_1+0x202>
 800115e:	2145      	movs	r1, #69	; 0x45
 8001160:	4620      	mov	r0, r4
 8001162:	f7ff fc43 	bl	80009ec <d_exprlist>
 8001166:	4606      	mov	r6, r0
 8001168:	e7d9      	b.n	800111e <d_expression_1+0x276>
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	f1a3 0263 	sub.w	r2, r3, #99	; 0x63
 8001170:	2a01      	cmp	r2, #1
 8001172:	d902      	bls.n	800117a <d_expression_1+0x2d2>
 8001174:	3b72      	subs	r3, #114	; 0x72
 8001176:	2b01      	cmp	r3, #1
 8001178:	d8b2      	bhi.n	80010e0 <d_expression_1+0x238>
 800117a:	4620      	mov	r0, r4
 800117c:	f000 fab8 	bl	80016f0 <d_type>
 8001180:	4607      	mov	r7, r0
 8001182:	e7b4      	b.n	80010ee <d_expression_1+0x246>
 8001184:	4620      	mov	r0, r4
 8001186:	f000 f8ed 	bl	8001364 <d_template_args>
 800118a:	4632      	mov	r2, r6
 800118c:	4603      	mov	r3, r0
 800118e:	2104      	movs	r1, #4
 8001190:	4620      	mov	r0, r4
 8001192:	f7ff f81d 	bl	80001d0 <d_make_comp>
 8001196:	4603      	mov	r3, r0
 8001198:	e747      	b.n	800102a <d_expression_1+0x182>
 800119a:	4620      	mov	r0, r4
 800119c:	f000 fe90 	bl	8001ec0 <d_operator_name>
 80011a0:	4607      	mov	r7, r0
 80011a2:	e7a4      	b.n	80010ee <d_expression_1+0x246>
 80011a4:	4620      	mov	r0, r4
 80011a6:	f7ff fe7f 	bl	8000ea8 <d_expression_1>
 80011aa:	4606      	mov	r6, r0
 80011ac:	e7b7      	b.n	800111e <d_expression_1+0x276>
 80011ae:	4620      	mov	r0, r4
 80011b0:	f000 f8d8 	bl	8001364 <d_template_args>
 80011b4:	4632      	mov	r2, r6
 80011b6:	4603      	mov	r3, r0
 80011b8:	2104      	movs	r1, #4
 80011ba:	4620      	mov	r0, r4
 80011bc:	f7ff f808 	bl	80001d0 <d_make_comp>
 80011c0:	4606      	mov	r6, r0
 80011c2:	e7ac      	b.n	800111e <d_expression_1+0x276>
 80011c4:	3301      	adds	r3, #1
 80011c6:	60e3      	str	r3, [r4, #12]
 80011c8:	2300      	movs	r3, #0
 80011ca:	e76e      	b.n	80010aa <d_expression_1+0x202>
 80011cc:	4620      	mov	r0, r4
 80011ce:	f000 fe77 	bl	8001ec0 <d_operator_name>
 80011d2:	e7ba      	b.n	800114a <d_expression_1+0x2a2>
 80011d4:	785a      	ldrb	r2, [r3, #1]
 80011d6:	2a69      	cmp	r2, #105	; 0x69
 80011d8:	f47f aeee 	bne.w	8000fb8 <d_expression_1+0x110>
 80011dc:	3302      	adds	r3, #2
 80011de:	60e3      	str	r3, [r4, #12]
 80011e0:	2145      	movs	r1, #69	; 0x45
 80011e2:	4620      	mov	r0, r4
 80011e4:	f7ff fc02 	bl	80009ec <d_exprlist>
 80011e8:	4603      	mov	r3, r0
 80011ea:	e75e      	b.n	80010aa <d_expression_1+0x202>
 80011ec:	2e00      	cmp	r6, #0
 80011ee:	d046      	beq.n	800127e <d_expression_1+0x3d6>
 80011f0:	7833      	ldrb	r3, [r6, #0]
 80011f2:	2b70      	cmp	r3, #112	; 0x70
 80011f4:	d015      	beq.n	8001222 <d_expression_1+0x37a>
 80011f6:	2b6d      	cmp	r3, #109	; 0x6d
 80011f8:	d013      	beq.n	8001222 <d_expression_1+0x37a>
 80011fa:	2700      	movs	r7, #0
 80011fc:	4630      	mov	r0, r6
 80011fe:	4926      	ldr	r1, [pc, #152]	; (8001298 <d_expression_1+0x3f0>)
 8001200:	f005 fb8e 	bl	8006920 <strcmp>
 8001204:	b1b8      	cbz	r0, 8001236 <d_expression_1+0x38e>
 8001206:	4620      	mov	r0, r4
 8001208:	f7ff fe4e 	bl	8000ea8 <d_expression_1>
 800120c:	4603      	mov	r3, r0
 800120e:	2f00      	cmp	r7, #0
 8001210:	f43f ae88 	beq.w	8000f24 <d_expression_1+0x7c>
 8001214:	461a      	mov	r2, r3
 8001216:	2138      	movs	r1, #56	; 0x38
 8001218:	4620      	mov	r0, r4
 800121a:	f7fe ffd9 	bl	80001d0 <d_make_comp>
 800121e:	4603      	mov	r3, r0
 8001220:	e680      	b.n	8000f24 <d_expression_1+0x7c>
 8001222:	7872      	ldrb	r2, [r6, #1]
 8001224:	429a      	cmp	r2, r3
 8001226:	d1e8      	bne.n	80011fa <d_expression_1+0x352>
 8001228:	68e3      	ldr	r3, [r4, #12]
 800122a:	781a      	ldrb	r2, [r3, #0]
 800122c:	2a5f      	cmp	r2, #95	; 0x5f
 800122e:	d1e5      	bne.n	80011fc <d_expression_1+0x354>
 8001230:	3301      	adds	r3, #1
 8001232:	60e3      	str	r3, [r4, #12]
 8001234:	e7e1      	b.n	80011fa <d_expression_1+0x352>
 8001236:	4620      	mov	r0, r4
 8001238:	f000 f830 	bl	800129c <d_template_args_1>
 800123c:	4603      	mov	r3, r0
 800123e:	e7e6      	b.n	800120e <d_expression_1+0x366>
 8001240:	2b6f      	cmp	r3, #111	; 0x6f
 8001242:	d015      	beq.n	8001270 <d_expression_1+0x3c8>
 8001244:	2b69      	cmp	r3, #105	; 0x69
 8001246:	f47f aeaa 	bne.w	8000f9e <d_expression_1+0xf6>
 800124a:	784b      	ldrb	r3, [r1, #1]
 800124c:	2b6c      	cmp	r3, #108	; 0x6c
 800124e:	f47f ae50 	bne.w	8000ef2 <d_expression_1+0x4a>
 8001252:	2500      	movs	r5, #0
 8001254:	3102      	adds	r1, #2
 8001256:	60e1      	str	r1, [r4, #12]
 8001258:	4620      	mov	r0, r4
 800125a:	2145      	movs	r1, #69	; 0x45
 800125c:	f7ff fbc6 	bl	80009ec <d_exprlist>
 8001260:	462a      	mov	r2, r5
 8001262:	4603      	mov	r3, r0
 8001264:	2130      	movs	r1, #48	; 0x30
 8001266:	4620      	mov	r0, r4
 8001268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800126c:	f7fe bfb0 	b.w	80001d0 <d_make_comp>
 8001270:	784b      	ldrb	r3, [r1, #1]
 8001272:	2b6e      	cmp	r3, #110	; 0x6e
 8001274:	f47f ae3d 	bne.w	8000ef2 <d_expression_1+0x4a>
 8001278:	3102      	adds	r1, #2
 800127a:	60c1      	str	r1, [r0, #12]
 800127c:	e628      	b.n	8000ed0 <d_expression_1+0x28>
 800127e:	2700      	movs	r7, #0
 8001280:	e7c1      	b.n	8001206 <d_expression_1+0x35e>
 8001282:	bf00      	nop
 8001284:	080189fc 	.word	0x080189fc
 8001288:	08018504 	.word	0x08018504
 800128c:	080184f8 	.word	0x080184f8
 8001290:	080184fc 	.word	0x080184fc
 8001294:	08018500 	.word	0x08018500
 8001298:	080184f4 	.word	0x080184f4

0800129c <d_template_args_1>:
 800129c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012a0:	68c2      	ldr	r2, [r0, #12]
 80012a2:	f8d0 802c 	ldr.w	r8, [r0, #44]	; 0x2c
 80012a6:	7813      	ldrb	r3, [r2, #0]
 80012a8:	2b45      	cmp	r3, #69	; 0x45
 80012aa:	b083      	sub	sp, #12
 80012ac:	4604      	mov	r4, r0
 80012ae:	d04e      	beq.n	800134e <d_template_args_1+0xb2>
 80012b0:	ae02      	add	r6, sp, #8
 80012b2:	2100      	movs	r1, #0
 80012b4:	f846 1d04 	str.w	r1, [r6, #-4]!
 80012b8:	2701      	movs	r7, #1
 80012ba:	3b49      	subs	r3, #73	; 0x49
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d83e      	bhi.n	800133e <d_template_args_1+0xa2>
 80012c0:	e8df f003 	tbb	[pc, r3]
 80012c4:	1b3d3838 	.word	0x1b3d3838
 80012c8:	3d3d3d3d 	.word	0x3d3d3d3d
 80012cc:	3d3d3d3d 	.word	0x3d3d3d3d
 80012d0:	083d3d3d 	.word	0x083d3d3d
 80012d4:	3201      	adds	r2, #1
 80012d6:	f8d4 9034 	ldr.w	r9, [r4, #52]	; 0x34
 80012da:	60e2      	str	r2, [r4, #12]
 80012dc:	6367      	str	r7, [r4, #52]	; 0x34
 80012de:	4620      	mov	r0, r4
 80012e0:	f7ff fde2 	bl	8000ea8 <d_expression_1>
 80012e4:	68e3      	ldr	r3, [r4, #12]
 80012e6:	f8c4 9034 	str.w	r9, [r4, #52]	; 0x34
 80012ea:	781a      	ldrb	r2, [r3, #0]
 80012ec:	2a45      	cmp	r2, #69	; 0x45
 80012ee:	4605      	mov	r5, r0
 80012f0:	d02a      	beq.n	8001348 <d_template_args_1+0xac>
 80012f2:	2000      	movs	r0, #0
 80012f4:	b003      	add	sp, #12
 80012f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012fa:	4620      	mov	r0, r4
 80012fc:	f001 faee 	bl	80028dc <d_expr_primary>
 8001300:	4605      	mov	r5, r0
 8001302:	2300      	movs	r3, #0
 8001304:	212f      	movs	r1, #47	; 0x2f
 8001306:	462a      	mov	r2, r5
 8001308:	4620      	mov	r0, r4
 800130a:	2d00      	cmp	r5, #0
 800130c:	d0f1      	beq.n	80012f2 <d_template_args_1+0x56>
 800130e:	f7fe ff5f 	bl	80001d0 <d_make_comp>
 8001312:	6030      	str	r0, [r6, #0]
 8001314:	f100 0608 	add.w	r6, r0, #8
 8001318:	2800      	cmp	r0, #0
 800131a:	d0ea      	beq.n	80012f2 <d_template_args_1+0x56>
 800131c:	68e2      	ldr	r2, [r4, #12]
 800131e:	7813      	ldrb	r3, [r2, #0]
 8001320:	2b45      	cmp	r3, #69	; 0x45
 8001322:	d1ca      	bne.n	80012ba <d_template_args_1+0x1e>
 8001324:	9801      	ldr	r0, [sp, #4]
 8001326:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800132a:	3201      	adds	r2, #1
 800132c:	60e2      	str	r2, [r4, #12]
 800132e:	b003      	add	sp, #12
 8001330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001334:	4620      	mov	r0, r4
 8001336:	f000 f815 	bl	8001364 <d_template_args>
 800133a:	4605      	mov	r5, r0
 800133c:	e7e1      	b.n	8001302 <d_template_args_1+0x66>
 800133e:	4620      	mov	r0, r4
 8001340:	f000 f9d6 	bl	80016f0 <d_type>
 8001344:	4605      	mov	r5, r0
 8001346:	e7dc      	b.n	8001302 <d_template_args_1+0x66>
 8001348:	3301      	adds	r3, #1
 800134a:	60e3      	str	r3, [r4, #12]
 800134c:	e7d9      	b.n	8001302 <d_template_args_1+0x66>
 800134e:	3201      	adds	r2, #1
 8001350:	2300      	movs	r3, #0
 8001352:	60c2      	str	r2, [r0, #12]
 8001354:	212f      	movs	r1, #47	; 0x2f
 8001356:	461a      	mov	r2, r3
 8001358:	b003      	add	sp, #12
 800135a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800135e:	f7fe bf37 	b.w	80001d0 <d_make_comp>
 8001362:	bf00      	nop

08001364 <d_template_args>:
 8001364:	68c2      	ldr	r2, [r0, #12]
 8001366:	7813      	ldrb	r3, [r2, #0]
 8001368:	3b49      	subs	r3, #73	; 0x49
 800136a:	2b01      	cmp	r3, #1
 800136c:	d802      	bhi.n	8001374 <d_template_args+0x10>
 800136e:	3201      	adds	r2, #1
 8001370:	60c2      	str	r2, [r0, #12]
 8001372:	e793      	b.n	800129c <d_template_args_1>
 8001374:	2000      	movs	r0, #0
 8001376:	4770      	bx	lr

08001378 <d_name>:
 8001378:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800137c:	68c2      	ldr	r2, [r0, #12]
 800137e:	7813      	ldrb	r3, [r2, #0]
 8001380:	3b4e      	subs	r3, #78	; 0x4e
 8001382:	b085      	sub	sp, #20
 8001384:	4605      	mov	r5, r0
 8001386:	2b0c      	cmp	r3, #12
 8001388:	d870      	bhi.n	800146c <d_name+0xf4>
 800138a:	e8df f003 	tbb	[pc, r3]
 800138e:	6f1e      	.short	0x6f1e
 8001390:	5b6f6f6f 	.word	0x5b6f6f6f
 8001394:	6f6f176f 	.word	0x6f6f176f
 8001398:	6f6f      	.short	0x6f6f
 800139a:	07          	.byte	0x07
 800139b:	00          	.byte	0x00
 800139c:	3201      	adds	r2, #1
 800139e:	2100      	movs	r1, #0
 80013a0:	60c2      	str	r2, [r0, #12]
 80013a2:	f000 ffbd 	bl	8002320 <d_encoding>
 80013a6:	68eb      	ldr	r3, [r5, #12]
 80013a8:	7819      	ldrb	r1, [r3, #0]
 80013aa:	2945      	cmp	r1, #69	; 0x45
 80013ac:	4606      	mov	r6, r0
 80013ae:	f000 8099 	beq.w	80014e4 <d_name+0x16c>
 80013b2:	2200      	movs	r2, #0
 80013b4:	4610      	mov	r0, r2
 80013b6:	b005      	add	sp, #20
 80013b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013bc:	f000 fe40 	bl	8002040 <d_unqualified_name>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4610      	mov	r0, r2
 80013c4:	b005      	add	sp, #20
 80013c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013ca:	3201      	adds	r2, #1
 80013cc:	60c2      	str	r2, [r0, #12]
 80013ce:	a903      	add	r1, sp, #12
 80013d0:	2201      	movs	r2, #1
 80013d2:	f7fe ff49 	bl	8000268 <d_cv_qualifiers>
 80013d6:	4681      	mov	r9, r0
 80013d8:	2800      	cmp	r0, #0
 80013da:	d0ea      	beq.n	80013b2 <d_name+0x3a>
 80013dc:	2100      	movs	r1, #0
 80013de:	4628      	mov	r0, r5
 80013e0:	f7fe ffa8 	bl	8000334 <d_ref_qualifier>
 80013e4:	68ea      	ldr	r2, [r5, #12]
 80013e6:	4eb4      	ldr	r6, [pc, #720]	; (80016b8 <d_name+0x340>)
 80013e8:	7814      	ldrb	r4, [r2, #0]
 80013ea:	4680      	mov	r8, r0
 80013ec:	2700      	movs	r7, #0
 80013ee:	2c00      	cmp	r4, #0
 80013f0:	f000 80e8 	beq.w	80015c4 <d_name+0x24c>
 80013f4:	2c44      	cmp	r4, #68	; 0x44
 80013f6:	f000 80d1 	beq.w	800159c <d_name+0x224>
 80013fa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b1c      	cmp	r3, #28
 8001402:	f240 80a8 	bls.w	8001556 <d_name+0x1de>
 8001406:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800140a:	2b19      	cmp	r3, #25
 800140c:	f240 80a8 	bls.w	8001560 <d_name+0x1e8>
 8001410:	2c55      	cmp	r4, #85	; 0x55
 8001412:	f000 80de 	beq.w	80015d2 <d_name+0x25a>
 8001416:	2c53      	cmp	r4, #83	; 0x53
 8001418:	f000 80f1 	beq.w	80015fe <d_name+0x286>
 800141c:	2c49      	cmp	r4, #73	; 0x49
 800141e:	f000 80da 	beq.w	80015d6 <d_name+0x25e>
 8001422:	2c54      	cmp	r4, #84	; 0x54
 8001424:	f000 811f 	beq.w	8001666 <d_name+0x2ee>
 8001428:	2c45      	cmp	r4, #69	; 0x45
 800142a:	f000 814b 	beq.w	80016c4 <d_name+0x34c>
 800142e:	2c4d      	cmp	r4, #77	; 0x4d
 8001430:	f040 80c8 	bne.w	80015c4 <d_name+0x24c>
 8001434:	2f00      	cmp	r7, #0
 8001436:	f000 80c5 	beq.w	80015c4 <d_name+0x24c>
 800143a:	1c53      	adds	r3, r2, #1
 800143c:	60eb      	str	r3, [r5, #12]
 800143e:	7854      	ldrb	r4, [r2, #1]
 8001440:	461a      	mov	r2, r3
 8001442:	e7d4      	b.n	80013ee <d_name+0x76>
 8001444:	7853      	ldrb	r3, [r2, #1]
 8001446:	2b74      	cmp	r3, #116	; 0x74
 8001448:	d031      	beq.n	80014ae <d_name+0x136>
 800144a:	2100      	movs	r1, #0
 800144c:	f7ff f90a 	bl	8000664 <d_substitution>
 8001450:	68eb      	ldr	r3, [r5, #12]
 8001452:	7819      	ldrb	r1, [r3, #0]
 8001454:	2949      	cmp	r1, #73	; 0x49
 8001456:	4602      	mov	r2, r0
 8001458:	d1b3      	bne.n	80013c2 <d_name+0x4a>
 800145a:	3301      	adds	r3, #1
 800145c:	60eb      	str	r3, [r5, #12]
 800145e:	4628      	mov	r0, r5
 8001460:	9201      	str	r2, [sp, #4]
 8001462:	f7ff ff1b 	bl	800129c <d_template_args_1>
 8001466:	9a01      	ldr	r2, [sp, #4]
 8001468:	4603      	mov	r3, r0
 800146a:	e017      	b.n	800149c <d_name+0x124>
 800146c:	f000 fde8 	bl	8002040 <d_unqualified_name>
 8001470:	68eb      	ldr	r3, [r5, #12]
 8001472:	7819      	ldrb	r1, [r3, #0]
 8001474:	2949      	cmp	r1, #73	; 0x49
 8001476:	4602      	mov	r2, r0
 8001478:	d1a3      	bne.n	80013c2 <d_name+0x4a>
 800147a:	2a00      	cmp	r2, #0
 800147c:	d099      	beq.n	80013b2 <d_name+0x3a>
 800147e:	6a29      	ldr	r1, [r5, #32]
 8001480:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001482:	4281      	cmp	r1, r0
 8001484:	da95      	bge.n	80013b2 <d_name+0x3a>
 8001486:	69ec      	ldr	r4, [r5, #28]
 8001488:	1c48      	adds	r0, r1, #1
 800148a:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
 800148e:	6228      	str	r0, [r5, #32]
 8001490:	7819      	ldrb	r1, [r3, #0]
 8001492:	3949      	subs	r1, #73	; 0x49
 8001494:	2901      	cmp	r1, #1
 8001496:	bf88      	it	hi
 8001498:	2300      	movhi	r3, #0
 800149a:	d9de      	bls.n	800145a <d_name+0xe2>
 800149c:	4628      	mov	r0, r5
 800149e:	2104      	movs	r1, #4
 80014a0:	f7fe fe96 	bl	80001d0 <d_make_comp>
 80014a4:	4602      	mov	r2, r0
 80014a6:	4610      	mov	r0, r2
 80014a8:	b005      	add	sp, #20
 80014aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80014ae:	6943      	ldr	r3, [r0, #20]
 80014b0:	6981      	ldr	r1, [r0, #24]
 80014b2:	3202      	adds	r2, #2
 80014b4:	428b      	cmp	r3, r1
 80014b6:	60c2      	str	r2, [r0, #12]
 80014b8:	f2c0 80ab 	blt.w	8001612 <d_name+0x29a>
 80014bc:	2400      	movs	r4, #0
 80014be:	4628      	mov	r0, r5
 80014c0:	f000 fdbe 	bl	8002040 <d_unqualified_name>
 80014c4:	4622      	mov	r2, r4
 80014c6:	4603      	mov	r3, r0
 80014c8:	2101      	movs	r1, #1
 80014ca:	4628      	mov	r0, r5
 80014cc:	f7fe fe80 	bl	80001d0 <d_make_comp>
 80014d0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80014d2:	68eb      	ldr	r3, [r5, #12]
 80014d4:	3103      	adds	r1, #3
 80014d6:	6329      	str	r1, [r5, #48]	; 0x30
 80014d8:	7819      	ldrb	r1, [r3, #0]
 80014da:	2949      	cmp	r1, #73	; 0x49
 80014dc:	4602      	mov	r2, r0
 80014de:	f47f af70 	bne.w	80013c2 <d_name+0x4a>
 80014e2:	e7ca      	b.n	800147a <d_name+0x102>
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	60ea      	str	r2, [r5, #12]
 80014e8:	7859      	ldrb	r1, [r3, #1]
 80014ea:	2973      	cmp	r1, #115	; 0x73
 80014ec:	f000 80a3 	beq.w	8001636 <d_name+0x2be>
 80014f0:	2964      	cmp	r1, #100	; 0x64
 80014f2:	f000 80bc 	beq.w	800166e <d_name+0x2f6>
 80014f6:	4628      	mov	r0, r5
 80014f8:	f7ff ff3e 	bl	8001378 <d_name>
 80014fc:	4604      	mov	r4, r0
 80014fe:	2800      	cmp	r0, #0
 8001500:	d072      	beq.n	80015e8 <d_name+0x270>
 8001502:	7803      	ldrb	r3, [r0, #0]
 8001504:	2b45      	cmp	r3, #69	; 0x45
 8001506:	f000 8094 	beq.w	8001632 <d_name+0x2ba>
 800150a:	2b47      	cmp	r3, #71	; 0x47
 800150c:	f000 8091 	beq.w	8001632 <d_name+0x2ba>
 8001510:	68eb      	ldr	r3, [r5, #12]
 8001512:	781a      	ldrb	r2, [r3, #0]
 8001514:	2a5f      	cmp	r2, #95	; 0x5f
 8001516:	f040 808c 	bne.w	8001632 <d_name+0x2ba>
 800151a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800151e:	4628      	mov	r0, r5
 8001520:	3301      	adds	r3, #1
 8001522:	f840 3f0c 	str.w	r3, [r0, #12]!
 8001526:	f7fe ffa5 	bl	8000474 <d_number.isra.0>
 800152a:	2800      	cmp	r0, #0
 800152c:	f6ff af41 	blt.w	80013b2 <d_name+0x3a>
 8001530:	1c7b      	adds	r3, r7, #1
 8001532:	d07e      	beq.n	8001632 <d_name+0x2ba>
 8001534:	696b      	ldr	r3, [r5, #20]
 8001536:	69aa      	ldr	r2, [r5, #24]
 8001538:	4293      	cmp	r3, r2
 800153a:	da55      	bge.n	80015e8 <d_name+0x270>
 800153c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001540:	6929      	ldr	r1, [r5, #16]
 8001542:	3301      	adds	r3, #1
 8001544:	0092      	lsls	r2, r2, #2
 8001546:	616b      	str	r3, [r5, #20]
 8001548:	188b      	adds	r3, r1, r2
 800154a:	d04e      	beq.n	80015ea <d_name+0x272>
 800154c:	2046      	movs	r0, #70	; 0x46
 800154e:	5488      	strb	r0, [r1, r2]
 8001550:	609f      	str	r7, [r3, #8]
 8001552:	605c      	str	r4, [r3, #4]
 8001554:	e049      	b.n	80015ea <d_name+0x272>
 8001556:	fa26 f303 	lsr.w	r3, r6, r3
 800155a:	07d9      	lsls	r1, r3, #31
 800155c:	f57f af53 	bpl.w	8001406 <d_name+0x8e>
 8001560:	4628      	mov	r0, r5
 8001562:	f000 fd6d 	bl	8002040 <d_unqualified_name>
 8001566:	b347      	cbz	r7, 80015ba <d_name+0x242>
 8001568:	2101      	movs	r1, #1
 800156a:	4603      	mov	r3, r0
 800156c:	463a      	mov	r2, r7
 800156e:	4628      	mov	r0, r5
 8001570:	f7fe fe2e 	bl	80001d0 <d_make_comp>
 8001574:	4607      	mov	r7, r0
 8001576:	2c53      	cmp	r4, #83	; 0x53
 8001578:	d01c      	beq.n	80015b4 <d_name+0x23c>
 800157a:	68ea      	ldr	r2, [r5, #12]
 800157c:	7814      	ldrb	r4, [r2, #0]
 800157e:	2c45      	cmp	r4, #69	; 0x45
 8001580:	f43f af3b 	beq.w	80013fa <d_name+0x82>
 8001584:	b1f7      	cbz	r7, 80015c4 <d_name+0x24c>
 8001586:	6a2b      	ldr	r3, [r5, #32]
 8001588:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800158a:	428b      	cmp	r3, r1
 800158c:	da1a      	bge.n	80015c4 <d_name+0x24c>
 800158e:	69e9      	ldr	r1, [r5, #28]
 8001590:	1c58      	adds	r0, r3, #1
 8001592:	f841 7023 	str.w	r7, [r1, r3, lsl #2]
 8001596:	6228      	str	r0, [r5, #32]
 8001598:	7814      	ldrb	r4, [r2, #0]
 800159a:	e728      	b.n	80013ee <d_name+0x76>
 800159c:	7853      	ldrb	r3, [r2, #1]
 800159e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80015a2:	2b54      	cmp	r3, #84	; 0x54
 80015a4:	4628      	mov	r0, r5
 80015a6:	d00a      	beq.n	80015be <d_name+0x246>
 80015a8:	f000 fd4a 	bl	8002040 <d_unqualified_name>
 80015ac:	2f00      	cmp	r7, #0
 80015ae:	d1db      	bne.n	8001568 <d_name+0x1f0>
 80015b0:	4607      	mov	r7, r0
 80015b2:	e7e2      	b.n	800157a <d_name+0x202>
 80015b4:	68ea      	ldr	r2, [r5, #12]
 80015b6:	7814      	ldrb	r4, [r2, #0]
 80015b8:	e719      	b.n	80013ee <d_name+0x76>
 80015ba:	4607      	mov	r7, r0
 80015bc:	e7db      	b.n	8001576 <d_name+0x1fe>
 80015be:	f000 f897 	bl	80016f0 <d_type>
 80015c2:	e7f3      	b.n	80015ac <d_name+0x234>
 80015c4:	2200      	movs	r2, #0
 80015c6:	4610      	mov	r0, r2
 80015c8:	f8c9 2000 	str.w	r2, [r9]
 80015cc:	b005      	add	sp, #20
 80015ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015d2:	4628      	mov	r0, r5
 80015d4:	e7e8      	b.n	80015a8 <d_name+0x230>
 80015d6:	2f00      	cmp	r7, #0
 80015d8:	d0f4      	beq.n	80015c4 <d_name+0x24c>
 80015da:	3201      	adds	r2, #1
 80015dc:	60ea      	str	r2, [r5, #12]
 80015de:	4628      	mov	r0, r5
 80015e0:	f7ff fe5c 	bl	800129c <d_template_args_1>
 80015e4:	2104      	movs	r1, #4
 80015e6:	e7c0      	b.n	800156a <d_name+0x1f2>
 80015e8:	2300      	movs	r3, #0
 80015ea:	4632      	mov	r2, r6
 80015ec:	4628      	mov	r0, r5
 80015ee:	2102      	movs	r1, #2
 80015f0:	f7fe fdee 	bl	80001d0 <d_make_comp>
 80015f4:	4602      	mov	r2, r0
 80015f6:	4610      	mov	r0, r2
 80015f8:	b005      	add	sp, #20
 80015fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80015fe:	2101      	movs	r1, #1
 8001600:	4628      	mov	r0, r5
 8001602:	f7ff f82f 	bl	8000664 <d_substitution>
 8001606:	2f00      	cmp	r7, #0
 8001608:	d1ae      	bne.n	8001568 <d_name+0x1f0>
 800160a:	68ea      	ldr	r2, [r5, #12]
 800160c:	4607      	mov	r7, r0
 800160e:	7814      	ldrb	r4, [r2, #0]
 8001610:	e6ed      	b.n	80013ee <d_name+0x76>
 8001612:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001616:	6901      	ldr	r1, [r0, #16]
 8001618:	0092      	lsls	r2, r2, #2
 800161a:	3301      	adds	r3, #1
 800161c:	188c      	adds	r4, r1, r2
 800161e:	6143      	str	r3, [r0, #20]
 8001620:	f43f af4d 	beq.w	80014be <d_name+0x146>
 8001624:	2300      	movs	r3, #0
 8001626:	548b      	strb	r3, [r1, r2]
 8001628:	4824      	ldr	r0, [pc, #144]	; (80016bc <d_name+0x344>)
 800162a:	6060      	str	r0, [r4, #4]
 800162c:	2303      	movs	r3, #3
 800162e:	60a3      	str	r3, [r4, #8]
 8001630:	e745      	b.n	80014be <d_name+0x146>
 8001632:	4623      	mov	r3, r4
 8001634:	e7d9      	b.n	80015ea <d_name+0x272>
 8001636:	1c9a      	adds	r2, r3, #2
 8001638:	60ea      	str	r2, [r5, #12]
 800163a:	789a      	ldrb	r2, [r3, #2]
 800163c:	2a5f      	cmp	r2, #95	; 0x5f
 800163e:	d032      	beq.n	80016a6 <d_name+0x32e>
 8001640:	696b      	ldr	r3, [r5, #20]
 8001642:	69aa      	ldr	r2, [r5, #24]
 8001644:	4293      	cmp	r3, r2
 8001646:	dacf      	bge.n	80015e8 <d_name+0x270>
 8001648:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800164c:	6929      	ldr	r1, [r5, #16]
 800164e:	3301      	adds	r3, #1
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	616b      	str	r3, [r5, #20]
 8001654:	188b      	adds	r3, r1, r2
 8001656:	d0c8      	beq.n	80015ea <d_name+0x272>
 8001658:	2400      	movs	r4, #0
 800165a:	548c      	strb	r4, [r1, r2]
 800165c:	4818      	ldr	r0, [pc, #96]	; (80016c0 <d_name+0x348>)
 800165e:	6058      	str	r0, [r3, #4]
 8001660:	220e      	movs	r2, #14
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	e7c1      	b.n	80015ea <d_name+0x272>
 8001666:	4628      	mov	r0, r5
 8001668:	f7fe ff62 	bl	8000530 <d_template_param>
 800166c:	e79e      	b.n	80015ac <d_name+0x234>
 800166e:	3302      	adds	r3, #2
 8001670:	60eb      	str	r3, [r5, #12]
 8001672:	4628      	mov	r0, r5
 8001674:	f7fe ff40 	bl	80004f8 <d_compact_number>
 8001678:	1e07      	subs	r7, r0, #0
 800167a:	f6ff ae9a 	blt.w	80013b2 <d_name+0x3a>
 800167e:	4628      	mov	r0, r5
 8001680:	f7ff fe7a 	bl	8001378 <d_name>
 8001684:	4604      	mov	r4, r0
 8001686:	2800      	cmp	r0, #0
 8001688:	f43f af54 	beq.w	8001534 <d_name+0x1bc>
 800168c:	7803      	ldrb	r3, [r0, #0]
 800168e:	2b45      	cmp	r3, #69	; 0x45
 8001690:	f43f af50 	beq.w	8001534 <d_name+0x1bc>
 8001694:	2b47      	cmp	r3, #71	; 0x47
 8001696:	f43f af4d 	beq.w	8001534 <d_name+0x1bc>
 800169a:	68eb      	ldr	r3, [r5, #12]
 800169c:	781a      	ldrb	r2, [r3, #0]
 800169e:	2a5f      	cmp	r2, #95	; 0x5f
 80016a0:	f47f af48 	bne.w	8001534 <d_name+0x1bc>
 80016a4:	e73b      	b.n	800151e <d_name+0x1a6>
 80016a6:	4628      	mov	r0, r5
 80016a8:	3303      	adds	r3, #3
 80016aa:	f840 3f0c 	str.w	r3, [r0, #12]!
 80016ae:	f7fe fee1 	bl	8000474 <d_number.isra.0>
 80016b2:	2800      	cmp	r0, #0
 80016b4:	dac4      	bge.n	8001640 <d_name+0x2c8>
 80016b6:	e67c      	b.n	80013b2 <d_name+0x3a>
 80016b8:	100803ff 	.word	0x100803ff
 80016bc:	08018518 	.word	0x08018518
 80016c0:	08018508 	.word	0x08018508
 80016c4:	f8c9 7000 	str.w	r7, [r9]
 80016c8:	2f00      	cmp	r7, #0
 80016ca:	f43f ae72 	beq.w	80013b2 <d_name+0x3a>
 80016ce:	f1b8 0f00 	cmp.w	r8, #0
 80016d2:	d004      	beq.n	80016de <d_name+0x366>
 80016d4:	9b03      	ldr	r3, [sp, #12]
 80016d6:	f8c8 3004 	str.w	r3, [r8, #4]
 80016da:	f8cd 800c 	str.w	r8, [sp, #12]
 80016de:	7813      	ldrb	r3, [r2, #0]
 80016e0:	2b45      	cmp	r3, #69	; 0x45
 80016e2:	f47f ae66 	bne.w	80013b2 <d_name+0x3a>
 80016e6:	3201      	adds	r2, #1
 80016e8:	60ea      	str	r2, [r5, #12]
 80016ea:	9a03      	ldr	r2, [sp, #12]
 80016ec:	e669      	b.n	80013c2 <d_name+0x4a>
 80016ee:	bf00      	nop

080016f0 <d_type>:
 80016f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016f4:	68c2      	ldr	r2, [r0, #12]
 80016f6:	7813      	ldrb	r3, [r2, #0]
 80016f8:	2b72      	cmp	r3, #114	; 0x72
 80016fa:	b083      	sub	sp, #12
 80016fc:	4604      	mov	r4, r0
 80016fe:	d058      	beq.n	80017b2 <d_type+0xc2>
 8001700:	2b56      	cmp	r3, #86	; 0x56
 8001702:	d056      	beq.n	80017b2 <d_type+0xc2>
 8001704:	2b4b      	cmp	r3, #75	; 0x4b
 8001706:	d054      	beq.n	80017b2 <d_type+0xc2>
 8001708:	2b44      	cmp	r3, #68	; 0x44
 800170a:	f000 809f 	beq.w	800184c <d_type+0x15c>
 800170e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8001712:	294a      	cmp	r1, #74	; 0x4a
 8001714:	f200 808a 	bhi.w	800182c <d_type+0x13c>
 8001718:	e8df f011 	tbh	[pc, r1, lsl #1]
 800171c:	012a012a 	.word	0x012a012a
 8001720:	012a012a 	.word	0x012a012a
 8001724:	012a012a 	.word	0x012a012a
 8001728:	012a012a 	.word	0x012a012a
 800172c:	012a012a 	.word	0x012a012a
 8001730:	00880088 	.word	0x00880088
 8001734:	00880088 	.word	0x00880088
 8001738:	00880088 	.word	0x00880088
 800173c:	020b0088 	.word	0x020b0088
 8001740:	01520088 	.word	0x01520088
 8001744:	00880088 	.word	0x00880088
 8001748:	0160014c 	.word	0x0160014c
 800174c:	00880088 	.word	0x00880088
 8001750:	00880088 	.word	0x00880088
 8001754:	016e0088 	.word	0x016e0088
 8001758:	0186012a 	.word	0x0186012a
 800175c:	008801c3 	.word	0x008801c3
 8001760:	01a20194 	.word	0x01a20194
 8001764:	01f301d1 	.word	0x01f301d1
 8001768:	00880088 	.word	0x00880088
 800176c:	00880088 	.word	0x00880088
 8001770:	0088012a 	.word	0x0088012a
 8001774:	00880088 	.word	0x00880088
 8001778:	00880088 	.word	0x00880088
 800177c:	010c0088 	.word	0x010c0088
 8001780:	010c010c 	.word	0x010c010c
 8001784:	010c010c 	.word	0x010c010c
 8001788:	010c010c 	.word	0x010c010c
 800178c:	010c010c 	.word	0x010c010c
 8001790:	0088010c 	.word	0x0088010c
 8001794:	010c010c 	.word	0x010c010c
 8001798:	010c010c 	.word	0x010c010c
 800179c:	00880088 	.word	0x00880088
 80017a0:	010c0088 	.word	0x010c0088
 80017a4:	013e010c 	.word	0x013e010c
 80017a8:	010c010c 	.word	0x010c010c
 80017ac:	010c010c 	.word	0x010c010c
 80017b0:	010c      	.short	0x010c
 80017b2:	2200      	movs	r2, #0
 80017b4:	a901      	add	r1, sp, #4
 80017b6:	4620      	mov	r0, r4
 80017b8:	f7fe fd56 	bl	8000268 <d_cv_qualifiers>
 80017bc:	4605      	mov	r5, r0
 80017be:	2800      	cmp	r0, #0
 80017c0:	d034      	beq.n	800182c <d_type+0x13c>
 80017c2:	68e3      	ldr	r3, [r4, #12]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b46      	cmp	r3, #70	; 0x46
 80017c8:	4620      	mov	r0, r4
 80017ca:	d034      	beq.n	8001836 <d_type+0x146>
 80017cc:	f7ff ff90 	bl	80016f0 <d_type>
 80017d0:	6028      	str	r0, [r5, #0]
 80017d2:	b358      	cbz	r0, 800182c <d_type+0x13c>
 80017d4:	7803      	ldrb	r3, [r0, #0]
 80017d6:	3b1f      	subs	r3, #31
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d930      	bls.n	800183e <d_type+0x14e>
 80017dc:	9a01      	ldr	r2, [sp, #4]
 80017de:	b32a      	cbz	r2, 800182c <d_type+0x13c>
 80017e0:	6a23      	ldr	r3, [r4, #32]
 80017e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80017e4:	428b      	cmp	r3, r1
 80017e6:	da21      	bge.n	800182c <d_type+0x13c>
 80017e8:	69e0      	ldr	r0, [r4, #28]
 80017ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 80017ee:	9d01      	ldr	r5, [sp, #4]
 80017f0:	1c59      	adds	r1, r3, #1
 80017f2:	4628      	mov	r0, r5
 80017f4:	6221      	str	r1, [r4, #32]
 80017f6:	b003      	add	sp, #12
 80017f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80017fc:	2301      	movs	r3, #1
 80017fe:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8001800:	6343      	str	r3, [r0, #52]	; 0x34
 8001802:	f7ff fb51 	bl	8000ea8 <d_expression_1>
 8001806:	6365      	str	r5, [r4, #52]	; 0x34
 8001808:	4602      	mov	r2, r0
 800180a:	2300      	movs	r3, #0
 800180c:	2142      	movs	r1, #66	; 0x42
 800180e:	4620      	mov	r0, r4
 8001810:	f7fe fcde 	bl	80001d0 <d_make_comp>
 8001814:	4605      	mov	r5, r0
 8001816:	9001      	str	r0, [sp, #4]
 8001818:	b140      	cbz	r0, 800182c <d_type+0x13c>
 800181a:	68e3      	ldr	r3, [r4, #12]
 800181c:	781a      	ldrb	r2, [r3, #0]
 800181e:	b12a      	cbz	r2, 800182c <d_type+0x13c>
 8001820:	1c5a      	adds	r2, r3, #1
 8001822:	60e2      	str	r2, [r4, #12]
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b45      	cmp	r3, #69	; 0x45
 8001828:	f000 80aa 	beq.w	8001980 <d_type+0x290>
 800182c:	2500      	movs	r5, #0
 800182e:	4628      	mov	r0, r5
 8001830:	b003      	add	sp, #12
 8001832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001836:	f000 fd53 	bl	80022e0 <d_function_type>
 800183a:	6028      	str	r0, [r5, #0]
 800183c:	e7c9      	b.n	80017d2 <d_type+0xe2>
 800183e:	9a01      	ldr	r2, [sp, #4]
 8001840:	6843      	ldr	r3, [r0, #4]
 8001842:	6042      	str	r2, [r0, #4]
 8001844:	682a      	ldr	r2, [r5, #0]
 8001846:	9201      	str	r2, [sp, #4]
 8001848:	602b      	str	r3, [r5, #0]
 800184a:	e7c7      	b.n	80017dc <d_type+0xec>
 800184c:	7853      	ldrb	r3, [r2, #1]
 800184e:	2b78      	cmp	r3, #120	; 0x78
 8001850:	d0af      	beq.n	80017b2 <d_type+0xc2>
 8001852:	1c53      	adds	r3, r2, #1
 8001854:	60c3      	str	r3, [r0, #12]
 8001856:	7853      	ldrb	r3, [r2, #1]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0e7      	beq.n	800182c <d_type+0x13c>
 800185c:	1c93      	adds	r3, r2, #2
 800185e:	60c3      	str	r3, [r0, #12]
 8001860:	7853      	ldrb	r3, [r2, #1]
 8001862:	3b46      	subs	r3, #70	; 0x46
 8001864:	2b30      	cmp	r3, #48	; 0x30
 8001866:	d8e1      	bhi.n	800182c <d_type+0x13c>
 8001868:	a101      	add	r1, pc, #4	; (adr r1, 8001870 <d_type+0x180>)
 800186a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800186e:	bf00      	nop
 8001870:	08001d5b 	.word	0x08001d5b
 8001874:	0800182d 	.word	0x0800182d
 8001878:	0800182d 	.word	0x0800182d
 800187c:	0800182d 	.word	0x0800182d
 8001880:	0800182d 	.word	0x0800182d
 8001884:	0800182d 	.word	0x0800182d
 8001888:	0800182d 	.word	0x0800182d
 800188c:	0800182d 	.word	0x0800182d
 8001890:	0800182d 	.word	0x0800182d
 8001894:	0800182d 	.word	0x0800182d
 8001898:	0800182d 	.word	0x0800182d
 800189c:	0800182d 	.word	0x0800182d
 80018a0:	0800182d 	.word	0x0800182d
 80018a4:	0800182d 	.word	0x0800182d
 80018a8:	080017fd 	.word	0x080017fd
 80018ac:	0800182d 	.word	0x0800182d
 80018b0:	0800182d 	.word	0x0800182d
 80018b4:	0800182d 	.word	0x0800182d
 80018b8:	0800182d 	.word	0x0800182d
 80018bc:	0800182d 	.word	0x0800182d
 80018c0:	0800182d 	.word	0x0800182d
 80018c4:	0800182d 	.word	0x0800182d
 80018c8:	0800182d 	.word	0x0800182d
 80018cc:	0800182d 	.word	0x0800182d
 80018d0:	0800182d 	.word	0x0800182d
 80018d4:	0800182d 	.word	0x0800182d
 80018d8:	0800182d 	.word	0x0800182d
 80018dc:	08001d2f 	.word	0x08001d2f
 80018e0:	0800182d 	.word	0x0800182d
 80018e4:	08001d03 	.word	0x08001d03
 80018e8:	08001ce3 	.word	0x08001ce3
 80018ec:	08001cb9 	.word	0x08001cb9
 80018f0:	08001c8b 	.word	0x08001c8b
 80018f4:	0800182d 	.word	0x0800182d
 80018f8:	08001c5d 	.word	0x08001c5d
 80018fc:	08001c39 	.word	0x08001c39
 8001900:	0800182d 	.word	0x0800182d
 8001904:	0800182d 	.word	0x0800182d
 8001908:	0800182d 	.word	0x0800182d
 800190c:	0800182d 	.word	0x0800182d
 8001910:	08001bff 	.word	0x08001bff
 8001914:	0800182d 	.word	0x0800182d
 8001918:	08001be9 	.word	0x08001be9
 800191c:	0800182d 	.word	0x0800182d
 8001920:	0800182d 	.word	0x0800182d
 8001924:	08001bbb 	.word	0x08001bbb
 8001928:	080017fd 	.word	0x080017fd
 800192c:	0800182d 	.word	0x0800182d
 8001930:	08001b85 	.word	0x08001b85
 8001934:	6960      	ldr	r0, [r4, #20]
 8001936:	69a5      	ldr	r5, [r4, #24]
 8001938:	49bc      	ldr	r1, [pc, #752]	; (8001c2c <d_type+0x53c>)
 800193a:	3b61      	subs	r3, #97	; 0x61
 800193c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001940:	42a8      	cmp	r0, r5
 8001942:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001946:	f280 823a 	bge.w	8001dbe <d_type+0x6ce>
 800194a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800194e:	6926      	ldr	r6, [r4, #16]
 8001950:	0089      	lsls	r1, r1, #2
 8001952:	3001      	adds	r0, #1
 8001954:	1875      	adds	r5, r6, r1
 8001956:	6160      	str	r0, [r4, #20]
 8001958:	f000 8231 	beq.w	8001dbe <d_type+0x6ce>
 800195c:	2027      	movs	r0, #39	; 0x27
 800195e:	5470      	strb	r0, [r6, r1]
 8001960:	606b      	str	r3, [r5, #4]
 8001962:	6859      	ldr	r1, [r3, #4]
 8001964:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001966:	3201      	adds	r2, #1
 8001968:	440b      	add	r3, r1
 800196a:	60e2      	str	r2, [r4, #12]
 800196c:	6323      	str	r3, [r4, #48]	; 0x30
 800196e:	e75e      	b.n	800182e <d_type+0x13e>
 8001970:	4620      	mov	r0, r4
 8001972:	f7ff fd01 	bl	8001378 <d_name>
 8001976:	4605      	mov	r5, r0
 8001978:	9001      	str	r0, [sp, #4]
 800197a:	2d00      	cmp	r5, #0
 800197c:	f43f af56 	beq.w	800182c <d_type+0x13c>
 8001980:	6a23      	ldr	r3, [r4, #32]
 8001982:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001984:	4293      	cmp	r3, r2
 8001986:	f6bf af51 	bge.w	800182c <d_type+0x13c>
 800198a:	69e1      	ldr	r1, [r4, #28]
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 8001992:	9d01      	ldr	r5, [sp, #4]
 8001994:	6222      	str	r2, [r4, #32]
 8001996:	e74a      	b.n	800182e <d_type+0x13e>
 8001998:	3201      	adds	r2, #1
 800199a:	60e2      	str	r2, [r4, #12]
 800199c:	4620      	mov	r0, r4
 800199e:	f7fe fde9 	bl	8000574 <d_source_name>
 80019a2:	2300      	movs	r3, #0
 80019a4:	4602      	mov	r2, r0
 80019a6:	2128      	movs	r1, #40	; 0x28
 80019a8:	4620      	mov	r0, r4
 80019aa:	f7fe fc11 	bl	80001d0 <d_make_comp>
 80019ae:	4605      	mov	r5, r0
 80019b0:	9001      	str	r0, [sp, #4]
 80019b2:	e7e2      	b.n	800197a <d_type+0x28a>
 80019b4:	4620      	mov	r0, r4
 80019b6:	f000 fc93 	bl	80022e0 <d_function_type>
 80019ba:	4605      	mov	r5, r0
 80019bc:	9001      	str	r0, [sp, #4]
 80019be:	e7dc      	b.n	800197a <d_type+0x28a>
 80019c0:	3201      	adds	r2, #1
 80019c2:	60e2      	str	r2, [r4, #12]
 80019c4:	4620      	mov	r0, r4
 80019c6:	f7ff fe93 	bl	80016f0 <d_type>
 80019ca:	2300      	movs	r3, #0
 80019cc:	4602      	mov	r2, r0
 80019ce:	2125      	movs	r1, #37	; 0x25
 80019d0:	4620      	mov	r0, r4
 80019d2:	f7fe fbfd 	bl	80001d0 <d_make_comp>
 80019d6:	4605      	mov	r5, r0
 80019d8:	9001      	str	r0, [sp, #4]
 80019da:	e7ce      	b.n	800197a <d_type+0x28a>
 80019dc:	3201      	adds	r2, #1
 80019de:	60e2      	str	r2, [r4, #12]
 80019e0:	4620      	mov	r0, r4
 80019e2:	f7ff fe85 	bl	80016f0 <d_type>
 80019e6:	2300      	movs	r3, #0
 80019e8:	4602      	mov	r2, r0
 80019ea:	2126      	movs	r1, #38	; 0x26
 80019ec:	4620      	mov	r0, r4
 80019ee:	f7fe fbef 	bl	80001d0 <d_make_comp>
 80019f2:	4605      	mov	r5, r0
 80019f4:	9001      	str	r0, [sp, #4]
 80019f6:	e7c0      	b.n	800197a <d_type+0x28a>
 80019f8:	3201      	adds	r2, #1
 80019fa:	60e2      	str	r2, [r4, #12]
 80019fc:	4620      	mov	r0, r4
 80019fe:	f7ff fe77 	bl	80016f0 <d_type>
 8001a02:	4605      	mov	r5, r0
 8001a04:	2800      	cmp	r0, #0
 8001a06:	f000 80bb 	beq.w	8001b80 <d_type+0x490>
 8001a0a:	4620      	mov	r0, r4
 8001a0c:	f7ff fe70 	bl	80016f0 <d_type>
 8001a10:	2800      	cmp	r0, #0
 8001a12:	f000 80b5 	beq.w	8001b80 <d_type+0x490>
 8001a16:	4603      	mov	r3, r0
 8001a18:	462a      	mov	r2, r5
 8001a1a:	212b      	movs	r1, #43	; 0x2b
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f7fe fbd7 	bl	80001d0 <d_make_comp>
 8001a22:	4605      	mov	r5, r0
 8001a24:	9501      	str	r5, [sp, #4]
 8001a26:	e7a8      	b.n	800197a <d_type+0x28a>
 8001a28:	3201      	adds	r2, #1
 8001a2a:	60e2      	str	r2, [r4, #12]
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f7ff fe5f 	bl	80016f0 <d_type>
 8001a32:	2300      	movs	r3, #0
 8001a34:	4602      	mov	r2, r0
 8001a36:	2124      	movs	r1, #36	; 0x24
 8001a38:	4620      	mov	r0, r4
 8001a3a:	f7fe fbc9 	bl	80001d0 <d_make_comp>
 8001a3e:	4605      	mov	r5, r0
 8001a40:	9001      	str	r0, [sp, #4]
 8001a42:	e79a      	b.n	800197a <d_type+0x28a>
 8001a44:	3201      	adds	r2, #1
 8001a46:	60e2      	str	r2, [r4, #12]
 8001a48:	4620      	mov	r0, r4
 8001a4a:	f7ff fe51 	bl	80016f0 <d_type>
 8001a4e:	2300      	movs	r3, #0
 8001a50:	4602      	mov	r2, r0
 8001a52:	2123      	movs	r1, #35	; 0x23
 8001a54:	4620      	mov	r0, r4
 8001a56:	f7fe fbbb 	bl	80001d0 <d_make_comp>
 8001a5a:	4605      	mov	r5, r0
 8001a5c:	9001      	str	r0, [sp, #4]
 8001a5e:	e78c      	b.n	800197a <d_type+0x28a>
 8001a60:	7853      	ldrb	r3, [r2, #1]
 8001a62:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8001a66:	2a09      	cmp	r2, #9
 8001a68:	d905      	bls.n	8001a76 <d_type+0x386>
 8001a6a:	2b5f      	cmp	r3, #95	; 0x5f
 8001a6c:	d003      	beq.n	8001a76 <d_type+0x386>
 8001a6e:	3b41      	subs	r3, #65	; 0x41
 8001a70:	2b19      	cmp	r3, #25
 8001a72:	f200 81c3 	bhi.w	8001dfc <d_type+0x70c>
 8001a76:	2100      	movs	r1, #0
 8001a78:	4620      	mov	r0, r4
 8001a7a:	f7fe fdf3 	bl	8000664 <d_substitution>
 8001a7e:	68e3      	ldr	r3, [r4, #12]
 8001a80:	9001      	str	r0, [sp, #4]
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b49      	cmp	r3, #73	; 0x49
 8001a86:	4605      	mov	r5, r0
 8001a88:	f47f aed1 	bne.w	800182e <d_type+0x13e>
 8001a8c:	4620      	mov	r0, r4
 8001a8e:	f7ff fc69 	bl	8001364 <d_template_args>
 8001a92:	462a      	mov	r2, r5
 8001a94:	4603      	mov	r3, r0
 8001a96:	2104      	movs	r1, #4
 8001a98:	4620      	mov	r0, r4
 8001a9a:	f7fe fb99 	bl	80001d0 <d_make_comp>
 8001a9e:	4605      	mov	r5, r0
 8001aa0:	e7c0      	b.n	8001a24 <d_type+0x334>
 8001aa2:	3201      	adds	r2, #1
 8001aa4:	60e2      	str	r2, [r4, #12]
 8001aa6:	4620      	mov	r0, r4
 8001aa8:	f7ff fe22 	bl	80016f0 <d_type>
 8001aac:	2300      	movs	r3, #0
 8001aae:	4602      	mov	r2, r0
 8001ab0:	2122      	movs	r1, #34	; 0x22
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	f7fe fb8c 	bl	80001d0 <d_make_comp>
 8001ab8:	4605      	mov	r5, r0
 8001aba:	9001      	str	r0, [sp, #4]
 8001abc:	e75d      	b.n	800197a <d_type+0x28a>
 8001abe:	4620      	mov	r0, r4
 8001ac0:	f7fe fd36 	bl	8000530 <d_template_param>
 8001ac4:	68e6      	ldr	r6, [r4, #12]
 8001ac6:	9001      	str	r0, [sp, #4]
 8001ac8:	7833      	ldrb	r3, [r6, #0]
 8001aca:	2b49      	cmp	r3, #73	; 0x49
 8001acc:	4605      	mov	r5, r0
 8001ace:	f47f af54 	bne.w	800197a <d_type+0x28a>
 8001ad2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	f040 81a9 	bne.w	8001e2c <d_type+0x73c>
 8001ada:	2800      	cmp	r0, #0
 8001adc:	f43f aea6 	beq.w	800182c <d_type+0x13c>
 8001ae0:	6a23      	ldr	r3, [r4, #32]
 8001ae2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	f6bf aea1 	bge.w	800182c <d_type+0x13c>
 8001aea:	69e1      	ldr	r1, [r4, #28]
 8001aec:	1c5a      	adds	r2, r3, #1
 8001aee:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 8001af2:	6222      	str	r2, [r4, #32]
 8001af4:	4620      	mov	r0, r4
 8001af6:	9d01      	ldr	r5, [sp, #4]
 8001af8:	f7ff fc34 	bl	8001364 <d_template_args>
 8001afc:	462a      	mov	r2, r5
 8001afe:	4603      	mov	r3, r0
 8001b00:	e7c9      	b.n	8001a96 <d_type+0x3a6>
 8001b02:	3201      	adds	r2, #1
 8001b04:	60e2      	str	r2, [r4, #12]
 8001b06:	4620      	mov	r0, r4
 8001b08:	f7fe fd34 	bl	8000574 <d_source_name>
 8001b0c:	68e3      	ldr	r3, [r4, #12]
 8001b0e:	9001      	str	r0, [sp, #4]
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	2b49      	cmp	r3, #73	; 0x49
 8001b14:	4605      	mov	r5, r0
 8001b16:	f000 817e 	beq.w	8001e16 <d_type+0x726>
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	f7ff fde8 	bl	80016f0 <d_type>
 8001b20:	9b01      	ldr	r3, [sp, #4]
 8001b22:	4602      	mov	r2, r0
 8001b24:	2121      	movs	r1, #33	; 0x21
 8001b26:	4620      	mov	r0, r4
 8001b28:	f7fe fb52 	bl	80001d0 <d_make_comp>
 8001b2c:	4605      	mov	r5, r0
 8001b2e:	9001      	str	r0, [sp, #4]
 8001b30:	e723      	b.n	800197a <d_type+0x28a>
 8001b32:	1c51      	adds	r1, r2, #1
 8001b34:	60e1      	str	r1, [r4, #12]
 8001b36:	7853      	ldrb	r3, [r2, #1]
 8001b38:	2b5f      	cmp	r3, #95	; 0x5f
 8001b3a:	f000 8144 	beq.w	8001dc6 <d_type+0x6d6>
 8001b3e:	3b30      	subs	r3, #48	; 0x30
 8001b40:	2b09      	cmp	r3, #9
 8001b42:	f200 814e 	bhi.w	8001de2 <d_type+0x6f2>
 8001b46:	460b      	mov	r3, r1
 8001b48:	3301      	adds	r3, #1
 8001b4a:	60e3      	str	r3, [r4, #12]
 8001b4c:	781a      	ldrb	r2, [r3, #0]
 8001b4e:	3a30      	subs	r2, #48	; 0x30
 8001b50:	2a09      	cmp	r2, #9
 8001b52:	d9f9      	bls.n	8001b48 <d_type+0x458>
 8001b54:	6962      	ldr	r2, [r4, #20]
 8001b56:	69a0      	ldr	r0, [r4, #24]
 8001b58:	4282      	cmp	r2, r0
 8001b5a:	da11      	bge.n	8001b80 <d_type+0x490>
 8001b5c:	eb02 0042 	add.w	r0, r2, r2, lsl #1
 8001b60:	6926      	ldr	r6, [r4, #16]
 8001b62:	0080      	lsls	r0, r0, #2
 8001b64:	3201      	adds	r2, #1
 8001b66:	1835      	adds	r5, r6, r0
 8001b68:	6162      	str	r2, [r4, #20]
 8001b6a:	d009      	beq.n	8001b80 <d_type+0x490>
 8001b6c:	1a5a      	subs	r2, r3, r1
 8001b6e:	d007      	beq.n	8001b80 <d_type+0x490>
 8001b70:	2700      	movs	r7, #0
 8001b72:	5437      	strb	r7, [r6, r0]
 8001b74:	6069      	str	r1, [r5, #4]
 8001b76:	60aa      	str	r2, [r5, #8]
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	2a5f      	cmp	r2, #95	; 0x5f
 8001b7c:	f000 8190 	beq.w	8001ea0 <d_type+0x7b0>
 8001b80:	2500      	movs	r5, #0
 8001b82:	e74f      	b.n	8001a24 <d_type+0x334>
 8001b84:	7893      	ldrb	r3, [r2, #2]
 8001b86:	2b5f      	cmp	r3, #95	; 0x5f
 8001b88:	f000 8180 	beq.w	8001e8c <d_type+0x79c>
 8001b8c:	f7fe fc9c 	bl	80004c8 <d_number_component>
 8001b90:	4605      	mov	r5, r0
 8001b92:	2d00      	cmp	r5, #0
 8001b94:	f43f af46 	beq.w	8001a24 <d_type+0x334>
 8001b98:	68e3      	ldr	r3, [r4, #12]
 8001b9a:	781a      	ldrb	r2, [r3, #0]
 8001b9c:	2a5f      	cmp	r2, #95	; 0x5f
 8001b9e:	d1ef      	bne.n	8001b80 <d_type+0x490>
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	60e3      	str	r3, [r4, #12]
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	f7ff fda3 	bl	80016f0 <d_type>
 8001baa:	462a      	mov	r2, r5
 8001bac:	4603      	mov	r3, r0
 8001bae:	212d      	movs	r1, #45	; 0x2d
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f7fe fb0d 	bl	80001d0 <d_make_comp>
 8001bb6:	4605      	mov	r5, r0
 8001bb8:	e734      	b.n	8001a24 <d_type+0x334>
 8001bba:	6942      	ldr	r2, [r0, #20]
 8001bbc:	6983      	ldr	r3, [r0, #24]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	f280 80fd 	bge.w	8001dbe <d_type+0x6ce>
 8001bc4:	230c      	movs	r3, #12
 8001bc6:	6901      	ldr	r1, [r0, #16]
 8001bc8:	fb03 f302 	mul.w	r3, r3, r2
 8001bcc:	18cd      	adds	r5, r1, r3
 8001bce:	f102 0201 	add.w	r2, r2, #1
 8001bd2:	6142      	str	r2, [r0, #20]
 8001bd4:	f000 80f3 	beq.w	8001dbe <d_type+0x6ce>
 8001bd8:	4a15      	ldr	r2, [pc, #84]	; (8001c30 <d_type+0x540>)
 8001bda:	2027      	movs	r0, #39	; 0x27
 8001bdc:	54c8      	strb	r0, [r1, r3]
 8001bde:	606a      	str	r2, [r5, #4]
 8001be0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001be2:	3308      	adds	r3, #8
 8001be4:	6323      	str	r3, [r4, #48]	; 0x30
 8001be6:	e622      	b.n	800182e <d_type+0x13e>
 8001be8:	f7ff fd82 	bl	80016f0 <d_type>
 8001bec:	2300      	movs	r3, #0
 8001bee:	4602      	mov	r2, r0
 8001bf0:	214a      	movs	r1, #74	; 0x4a
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	f7fe faec 	bl	80001d0 <d_make_comp>
 8001bf8:	4605      	mov	r5, r0
 8001bfa:	9001      	str	r0, [sp, #4]
 8001bfc:	e6bd      	b.n	800197a <d_type+0x28a>
 8001bfe:	6942      	ldr	r2, [r0, #20]
 8001c00:	6983      	ldr	r3, [r0, #24]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	f280 80db 	bge.w	8001dbe <d_type+0x6ce>
 8001c08:	230c      	movs	r3, #12
 8001c0a:	6901      	ldr	r1, [r0, #16]
 8001c0c:	fb03 f302 	mul.w	r3, r3, r2
 8001c10:	18cd      	adds	r5, r1, r3
 8001c12:	f102 0201 	add.w	r2, r2, #1
 8001c16:	6142      	str	r2, [r0, #20]
 8001c18:	f000 80d1 	beq.w	8001dbe <d_type+0x6ce>
 8001c1c:	2027      	movs	r0, #39	; 0x27
 8001c1e:	4a05      	ldr	r2, [pc, #20]	; (8001c34 <d_type+0x544>)
 8001c20:	54c8      	strb	r0, [r1, r3]
 8001c22:	606a      	str	r2, [r5, #4]
 8001c24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c26:	3311      	adds	r3, #17
 8001c28:	6323      	str	r3, [r4, #48]	; 0x30
 8001c2a:	e600      	b.n	800182e <d_type+0x13e>
 8001c2c:	080177a8 	.word	0x080177a8
 8001c30:	08017a00 	.word	0x08017a00
 8001c34:	08017a28 	.word	0x08017a28
 8001c38:	6942      	ldr	r2, [r0, #20]
 8001c3a:	6983      	ldr	r3, [r0, #24]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	f280 80be 	bge.w	8001dbe <d_type+0x6ce>
 8001c42:	230c      	movs	r3, #12
 8001c44:	6901      	ldr	r1, [r0, #16]
 8001c46:	fb03 f302 	mul.w	r3, r3, r2
 8001c4a:	18cd      	adds	r5, r1, r3
 8001c4c:	f102 0201 	add.w	r2, r2, #1
 8001c50:	6142      	str	r2, [r0, #20]
 8001c52:	f000 80b4 	beq.w	8001dbe <d_type+0x6ce>
 8001c56:	2027      	movs	r0, #39	; 0x27
 8001c58:	4a92      	ldr	r2, [pc, #584]	; (8001ea4 <d_type+0x7b4>)
 8001c5a:	e7bf      	b.n	8001bdc <d_type+0x4ec>
 8001c5c:	6942      	ldr	r2, [r0, #20]
 8001c5e:	6983      	ldr	r3, [r0, #24]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	f280 80ac 	bge.w	8001dbe <d_type+0x6ce>
 8001c66:	230c      	movs	r3, #12
 8001c68:	6901      	ldr	r1, [r0, #16]
 8001c6a:	fb03 f302 	mul.w	r3, r3, r2
 8001c6e:	18cd      	adds	r5, r1, r3
 8001c70:	f102 0201 	add.w	r2, r2, #1
 8001c74:	6142      	str	r2, [r0, #20]
 8001c76:	f000 80a2 	beq.w	8001dbe <d_type+0x6ce>
 8001c7a:	2027      	movs	r0, #39	; 0x27
 8001c7c:	4a8a      	ldr	r2, [pc, #552]	; (8001ea8 <d_type+0x7b8>)
 8001c7e:	54c8      	strb	r0, [r1, r3]
 8001c80:	606a      	str	r2, [r5, #4]
 8001c82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c84:	3304      	adds	r3, #4
 8001c86:	6323      	str	r3, [r4, #48]	; 0x30
 8001c88:	e5d1      	b.n	800182e <d_type+0x13e>
 8001c8a:	6942      	ldr	r2, [r0, #20]
 8001c8c:	6983      	ldr	r3, [r0, #24]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	f280 8095 	bge.w	8001dbe <d_type+0x6ce>
 8001c94:	230c      	movs	r3, #12
 8001c96:	6901      	ldr	r1, [r0, #16]
 8001c98:	fb03 f302 	mul.w	r3, r3, r2
 8001c9c:	18cd      	adds	r5, r1, r3
 8001c9e:	f102 0201 	add.w	r2, r2, #1
 8001ca2:	6142      	str	r2, [r0, #20]
 8001ca4:	f000 808b 	beq.w	8001dbe <d_type+0x6ce>
 8001ca8:	4a80      	ldr	r2, [pc, #512]	; (8001eac <d_type+0x7bc>)
 8001caa:	2027      	movs	r0, #39	; 0x27
 8001cac:	54c8      	strb	r0, [r1, r3]
 8001cae:	606a      	str	r2, [r5, #4]
 8001cb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001cb2:	3309      	adds	r3, #9
 8001cb4:	6323      	str	r3, [r4, #48]	; 0x30
 8001cb6:	e5ba      	b.n	800182e <d_type+0x13e>
 8001cb8:	6942      	ldr	r2, [r0, #20]
 8001cba:	6983      	ldr	r3, [r0, #24]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	da7e      	bge.n	8001dbe <d_type+0x6ce>
 8001cc0:	230c      	movs	r3, #12
 8001cc2:	6901      	ldr	r1, [r0, #16]
 8001cc4:	fb03 f302 	mul.w	r3, r3, r2
 8001cc8:	18cd      	adds	r5, r1, r3
 8001cca:	f102 0201 	add.w	r2, r2, #1
 8001cce:	6142      	str	r2, [r0, #20]
 8001cd0:	d075      	beq.n	8001dbe <d_type+0x6ce>
 8001cd2:	2027      	movs	r0, #39	; 0x27
 8001cd4:	4a76      	ldr	r2, [pc, #472]	; (8001eb0 <d_type+0x7c0>)
 8001cd6:	54c8      	strb	r0, [r1, r3]
 8001cd8:	606a      	str	r2, [r5, #4]
 8001cda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001cdc:	330a      	adds	r3, #10
 8001cde:	6323      	str	r3, [r4, #48]	; 0x30
 8001ce0:	e5a5      	b.n	800182e <d_type+0x13e>
 8001ce2:	6942      	ldr	r2, [r0, #20]
 8001ce4:	6983      	ldr	r3, [r0, #24]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	da69      	bge.n	8001dbe <d_type+0x6ce>
 8001cea:	230c      	movs	r3, #12
 8001cec:	6901      	ldr	r1, [r0, #16]
 8001cee:	fb03 f302 	mul.w	r3, r3, r2
 8001cf2:	18cd      	adds	r5, r1, r3
 8001cf4:	f102 0201 	add.w	r2, r2, #1
 8001cf8:	6142      	str	r2, [r0, #20]
 8001cfa:	d060      	beq.n	8001dbe <d_type+0x6ce>
 8001cfc:	2027      	movs	r0, #39	; 0x27
 8001cfe:	4a6d      	ldr	r2, [pc, #436]	; (8001eb4 <d_type+0x7c4>)
 8001d00:	e7d4      	b.n	8001cac <d_type+0x5bc>
 8001d02:	6942      	ldr	r2, [r0, #20]
 8001d04:	6983      	ldr	r3, [r0, #24]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	f6bf ad90 	bge.w	800182c <d_type+0x13c>
 8001d0c:	230c      	movs	r3, #12
 8001d0e:	6901      	ldr	r1, [r0, #16]
 8001d10:	fb03 f302 	mul.w	r3, r3, r2
 8001d14:	18cd      	adds	r5, r1, r3
 8001d16:	f102 0201 	add.w	r2, r2, #1
 8001d1a:	6142      	str	r2, [r0, #20]
 8001d1c:	f43f ad87 	beq.w	800182e <d_type+0x13e>
 8001d20:	2000      	movs	r0, #0
 8001d22:	54c8      	strb	r0, [r1, r3]
 8001d24:	4a64      	ldr	r2, [pc, #400]	; (8001eb8 <d_type+0x7c8>)
 8001d26:	606a      	str	r2, [r5, #4]
 8001d28:	230e      	movs	r3, #14
 8001d2a:	60ab      	str	r3, [r5, #8]
 8001d2c:	e57f      	b.n	800182e <d_type+0x13e>
 8001d2e:	6942      	ldr	r2, [r0, #20]
 8001d30:	6983      	ldr	r3, [r0, #24]
 8001d32:	429a      	cmp	r2, r3
 8001d34:	f6bf ad7a 	bge.w	800182c <d_type+0x13c>
 8001d38:	230c      	movs	r3, #12
 8001d3a:	6901      	ldr	r1, [r0, #16]
 8001d3c:	fb03 f302 	mul.w	r3, r3, r2
 8001d40:	18cd      	adds	r5, r1, r3
 8001d42:	f102 0201 	add.w	r2, r2, #1
 8001d46:	6142      	str	r2, [r0, #20]
 8001d48:	f43f ad71 	beq.w	800182e <d_type+0x13e>
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	54c8      	strb	r0, [r1, r3]
 8001d50:	4a5a      	ldr	r2, [pc, #360]	; (8001ebc <d_type+0x7cc>)
 8001d52:	606a      	str	r2, [r5, #4]
 8001d54:	2304      	movs	r3, #4
 8001d56:	60ab      	str	r3, [r5, #8]
 8001d58:	e569      	b.n	800182e <d_type+0x13e>
 8001d5a:	6943      	ldr	r3, [r0, #20]
 8001d5c:	6981      	ldr	r1, [r0, #24]
 8001d5e:	428b      	cmp	r3, r1
 8001d60:	da7a      	bge.n	8001e58 <d_type+0x768>
 8001d62:	6900      	ldr	r0, [r0, #16]
 8001d64:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8001d68:	0089      	lsls	r1, r1, #2
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	1845      	adds	r5, r0, r1
 8001d6e:	262c      	movs	r6, #44	; 0x2c
 8001d70:	6163      	str	r3, [r4, #20]
 8001d72:	9501      	str	r5, [sp, #4]
 8001d74:	5446      	strb	r6, [r0, r1]
 8001d76:	7893      	ldrb	r3, [r2, #2]
 8001d78:	3b30      	subs	r3, #48	; 0x30
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b09      	cmp	r3, #9
 8001d7e:	bf94      	ite	ls
 8001d80:	2301      	movls	r3, #1
 8001d82:	2300      	movhi	r3, #0
 8001d84:	812b      	strh	r3, [r5, #8]
 8001d86:	d97b      	bls.n	8001e80 <d_type+0x790>
 8001d88:	4620      	mov	r0, r4
 8001d8a:	f7ff fcb1 	bl	80016f0 <d_type>
 8001d8e:	9b01      	ldr	r3, [sp, #4]
 8001d90:	6068      	str	r0, [r5, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f43f ad49 	beq.w	800182c <d_type+0x13c>
 8001d9a:	f104 000c 	add.w	r0, r4, #12
 8001d9e:	f7fe fb69 	bl	8000474 <d_number.isra.0>
 8001da2:	68e2      	ldr	r2, [r4, #12]
 8001da4:	7813      	ldrb	r3, [r2, #0]
 8001da6:	b113      	cbz	r3, 8001dae <d_type+0x6be>
 8001da8:	1c53      	adds	r3, r2, #1
 8001daa:	60e3      	str	r3, [r4, #12]
 8001dac:	7813      	ldrb	r3, [r2, #0]
 8001dae:	9d01      	ldr	r5, [sp, #4]
 8001db0:	f1a3 0373 	sub.w	r3, r3, #115	; 0x73
 8001db4:	fab3 f383 	clz	r3, r3
 8001db8:	095b      	lsrs	r3, r3, #5
 8001dba:	816b      	strh	r3, [r5, #10]
 8001dbc:	e537      	b.n	800182e <d_type+0x13e>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	deff      	udf	#255	; 0xff
 8001dc6:	2500      	movs	r5, #0
 8001dc8:	3101      	adds	r1, #1
 8001dca:	60e1      	str	r1, [r4, #12]
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f7ff fc8f 	bl	80016f0 <d_type>
 8001dd2:	462a      	mov	r2, r5
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	212a      	movs	r1, #42	; 0x2a
 8001dd8:	4620      	mov	r0, r4
 8001dda:	f7fe f9f9 	bl	80001d0 <d_make_comp>
 8001dde:	4605      	mov	r5, r0
 8001de0:	e620      	b.n	8001a24 <d_type+0x334>
 8001de2:	2301      	movs	r3, #1
 8001de4:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8001de6:	6363      	str	r3, [r4, #52]	; 0x34
 8001de8:	4620      	mov	r0, r4
 8001dea:	f7ff f85d 	bl	8000ea8 <d_expression_1>
 8001dee:	6365      	str	r5, [r4, #52]	; 0x34
 8001df0:	4605      	mov	r5, r0
 8001df2:	2800      	cmp	r0, #0
 8001df4:	f43f aec4 	beq.w	8001b80 <d_type+0x490>
 8001df8:	68e3      	ldr	r3, [r4, #12]
 8001dfa:	e6bd      	b.n	8001b78 <d_type+0x488>
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7ff fabb 	bl	8001378 <d_name>
 8001e02:	4605      	mov	r5, r0
 8001e04:	9001      	str	r0, [sp, #4]
 8001e06:	2800      	cmp	r0, #0
 8001e08:	f43f ad10 	beq.w	800182c <d_type+0x13c>
 8001e0c:	7803      	ldrb	r3, [r0, #0]
 8001e0e:	2b18      	cmp	r3, #24
 8001e10:	f47f adb6 	bne.w	8001980 <d_type+0x290>
 8001e14:	e50b      	b.n	800182e <d_type+0x13e>
 8001e16:	4620      	mov	r0, r4
 8001e18:	f7ff faa4 	bl	8001364 <d_template_args>
 8001e1c:	462a      	mov	r2, r5
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2104      	movs	r1, #4
 8001e22:	4620      	mov	r0, r4
 8001e24:	f7fe f9d4 	bl	80001d0 <d_make_comp>
 8001e28:	9001      	str	r0, [sp, #4]
 8001e2a:	e676      	b.n	8001b1a <d_type+0x42a>
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8001e32:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8001e36:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001e38:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8001e3a:	f7ff fa93 	bl	8001364 <d_template_args>
 8001e3e:	68e2      	ldr	r2, [r4, #12]
 8001e40:	7812      	ldrb	r2, [r2, #0]
 8001e42:	2a49      	cmp	r2, #73	; 0x49
 8001e44:	d00b      	beq.n	8001e5e <d_type+0x76e>
 8001e46:	6325      	str	r5, [r4, #48]	; 0x30
 8001e48:	60e6      	str	r6, [r4, #12]
 8001e4a:	f8c4 9014 	str.w	r9, [r4, #20]
 8001e4e:	f8c4 8020 	str.w	r8, [r4, #32]
 8001e52:	62a7      	str	r7, [r4, #40]	; 0x28
 8001e54:	9d01      	ldr	r5, [sp, #4]
 8001e56:	e590      	b.n	800197a <d_type+0x28a>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	701b      	strb	r3, [r3, #0]
 8001e5c:	deff      	udf	#255	; 0xff
 8001e5e:	9b01      	ldr	r3, [sp, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f43f ace3 	beq.w	800182c <d_type+0x13c>
 8001e66:	6a22      	ldr	r2, [r4, #32]
 8001e68:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001e6a:	428a      	cmp	r2, r1
 8001e6c:	f6bf acde 	bge.w	800182c <d_type+0x13c>
 8001e70:	69e5      	ldr	r5, [r4, #28]
 8001e72:	1c51      	adds	r1, r2, #1
 8001e74:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
 8001e78:	9a01      	ldr	r2, [sp, #4]
 8001e7a:	6221      	str	r1, [r4, #32]
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	e60a      	b.n	8001a96 <d_type+0x3a6>
 8001e80:	f104 000c 	add.w	r0, r4, #12
 8001e84:	f7fe faf6 	bl	8000474 <d_number.isra.0>
 8001e88:	9d01      	ldr	r5, [sp, #4]
 8001e8a:	e77d      	b.n	8001d88 <d_type+0x698>
 8001e8c:	3203      	adds	r2, #3
 8001e8e:	2301      	movs	r3, #1
 8001e90:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001e92:	60c2      	str	r2, [r0, #12]
 8001e94:	6343      	str	r3, [r0, #52]	; 0x34
 8001e96:	f7ff f807 	bl	8000ea8 <d_expression_1>
 8001e9a:	6366      	str	r6, [r4, #52]	; 0x34
 8001e9c:	4605      	mov	r5, r0
 8001e9e:	e678      	b.n	8001b92 <d_type+0x4a2>
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	e791      	b.n	8001dc8 <d_type+0x6d8>
 8001ea4:	08017a14 	.word	0x08017a14
 8001ea8:	080179ec 	.word	0x080179ec
 8001eac:	080179b0 	.word	0x080179b0
 8001eb0:	080179d8 	.word	0x080179d8
 8001eb4:	080179c4 	.word	0x080179c4
 8001eb8:	08018524 	.word	0x08018524
 8001ebc:	0801851c 	.word	0x0801851c

08001ec0 <d_operator_name>:
 8001ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec2:	68c3      	ldr	r3, [r0, #12]
 8001ec4:	781e      	ldrb	r6, [r3, #0]
 8001ec6:	4684      	mov	ip, r0
 8001ec8:	b326      	cbz	r6, 8001f14 <d_operator_name+0x54>
 8001eca:	1c5a      	adds	r2, r3, #1
 8001ecc:	60c2      	str	r2, [r0, #12]
 8001ece:	785a      	ldrb	r2, [r3, #1]
 8001ed0:	781e      	ldrb	r6, [r3, #0]
 8001ed2:	2a00      	cmp	r2, #0
 8001ed4:	d058      	beq.n	8001f88 <d_operator_name+0xc8>
 8001ed6:	1c9a      	adds	r2, r3, #2
 8001ed8:	60c2      	str	r2, [r0, #12]
 8001eda:	2e76      	cmp	r6, #118	; 0x76
 8001edc:	4604      	mov	r4, r0
 8001ede:	f893 e001 	ldrb.w	lr, [r3, #1]
 8001ee2:	d043      	beq.n	8001f6c <d_operator_name+0xac>
 8001ee4:	2e63      	cmp	r6, #99	; 0x63
 8001ee6:	d116      	bne.n	8001f16 <d_operator_name+0x56>
 8001ee8:	f1be 0f76 	cmp.w	lr, #118	; 0x76
 8001eec:	d113      	bne.n	8001f16 <d_operator_name+0x56>
 8001eee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001ef0:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	095b      	lsrs	r3, r3, #5
 8001ef8:	6383      	str	r3, [r0, #56]	; 0x38
 8001efa:	f7ff fbf9 	bl	80016f0 <d_type>
 8001efe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f00:	4602      	mov	r2, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d052      	beq.n	8001fac <d_operator_name+0xec>
 8001f06:	2300      	movs	r3, #0
 8001f08:	2134      	movs	r1, #52	; 0x34
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	f7fe f960 	bl	80001d0 <d_make_comp>
 8001f10:	63a5      	str	r5, [r4, #56]	; 0x38
 8001f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f14:	46b6      	mov	lr, r6
 8001f16:	4c28      	ldr	r4, [pc, #160]	; (8001fb8 <d_operator_name+0xf8>)
 8001f18:	2043      	movs	r0, #67	; 0x43
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	e004      	b.n	8001f28 <d_operator_name+0x68>
 8001f1e:	bf94      	ite	ls
 8001f20:	1c5a      	addls	r2, r3, #1
 8001f22:	4618      	movhi	r0, r3
 8001f24:	4282      	cmp	r2, r0
 8001f26:	d02d      	beq.n	8001f84 <d_operator_name+0xc4>
 8001f28:	1a83      	subs	r3, r0, r2
 8001f2a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8001f2e:	eb02 0363 	add.w	r3, r2, r3, asr #1
 8001f32:	0119      	lsls	r1, r3, #4
 8001f34:	1867      	adds	r7, r4, r1
 8001f36:	5861      	ldr	r1, [r4, r1]
 8001f38:	780d      	ldrb	r5, [r1, #0]
 8001f3a:	42b5      	cmp	r5, r6
 8001f3c:	d1ef      	bne.n	8001f1e <d_operator_name+0x5e>
 8001f3e:	7849      	ldrb	r1, [r1, #1]
 8001f40:	4571      	cmp	r1, lr
 8001f42:	d1ec      	bne.n	8001f1e <d_operator_name+0x5e>
 8001f44:	f8dc 3014 	ldr.w	r3, [ip, #20]
 8001f48:	f8dc 2018 	ldr.w	r2, [ip, #24]
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	da19      	bge.n	8001f84 <d_operator_name+0xc4>
 8001f50:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001f54:	f8dc 1010 	ldr.w	r1, [ip, #16]
 8001f58:	0092      	lsls	r2, r2, #2
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	1888      	adds	r0, r1, r2
 8001f5e:	f8cc 3014 	str.w	r3, [ip, #20]
 8001f62:	d013      	beq.n	8001f8c <d_operator_name+0xcc>
 8001f64:	2331      	movs	r3, #49	; 0x31
 8001f66:	548b      	strb	r3, [r1, r2]
 8001f68:	6047      	str	r7, [r0, #4]
 8001f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f6c:	f1ae 0530 	sub.w	r5, lr, #48	; 0x30
 8001f70:	b2eb      	uxtb	r3, r5
 8001f72:	2b09      	cmp	r3, #9
 8001f74:	d8cf      	bhi.n	8001f16 <d_operator_name+0x56>
 8001f76:	f7fe fafd 	bl	8000574 <d_source_name>
 8001f7a:	6963      	ldr	r3, [r4, #20]
 8001f7c:	69a2      	ldr	r2, [r4, #24]
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	4601      	mov	r1, r0
 8001f82:	db04      	blt.n	8001f8e <d_operator_name+0xce>
 8001f84:	2000      	movs	r0, #0
 8001f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f88:	4696      	mov	lr, r2
 8001f8a:	e7c4      	b.n	8001f16 <d_operator_name+0x56>
 8001f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001f8e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001f92:	6926      	ldr	r6, [r4, #16]
 8001f94:	0092      	lsls	r2, r2, #2
 8001f96:	3301      	adds	r3, #1
 8001f98:	18b0      	adds	r0, r6, r2
 8001f9a:	6163      	str	r3, [r4, #20]
 8001f9c:	d0f2      	beq.n	8001f84 <d_operator_name+0xc4>
 8001f9e:	2900      	cmp	r1, #0
 8001fa0:	d0f0      	beq.n	8001f84 <d_operator_name+0xc4>
 8001fa2:	2332      	movs	r3, #50	; 0x32
 8001fa4:	54b3      	strb	r3, [r6, r2]
 8001fa6:	6045      	str	r5, [r0, #4]
 8001fa8:	6081      	str	r1, [r0, #8]
 8001faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fac:	2133      	movs	r1, #51	; 0x33
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f7fe f90e 	bl	80001d0 <d_make_comp>
 8001fb4:	e7ac      	b.n	8001f10 <d_operator_name+0x50>
 8001fb6:	bf00      	nop
 8001fb8:	08017a3c 	.word	0x08017a3c

08001fbc <d_parmlist>:
 8001fbc:	b530      	push	{r4, r5, lr}
 8001fbe:	68c2      	ldr	r2, [r0, #12]
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	9301      	str	r3, [sp, #4]
 8001fc6:	7813      	ldrb	r3, [r2, #0]
 8001fc8:	b343      	cbz	r3, 800201c <d_parmlist+0x60>
 8001fca:	2b45      	cmp	r3, #69	; 0x45
 8001fcc:	d026      	beq.n	800201c <d_parmlist+0x60>
 8001fce:	2b2e      	cmp	r3, #46	; 0x2e
 8001fd0:	d024      	beq.n	800201c <d_parmlist+0x60>
 8001fd2:	4604      	mov	r4, r0
 8001fd4:	ad01      	add	r5, sp, #4
 8001fd6:	e015      	b.n	8002004 <d_parmlist+0x48>
 8001fd8:	2b4f      	cmp	r3, #79	; 0x4f
 8001fda:	d016      	beq.n	800200a <d_parmlist+0x4e>
 8001fdc:	f7ff fb88 	bl	80016f0 <d_type>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	212e      	movs	r1, #46	; 0x2e
 8001fe6:	b1c8      	cbz	r0, 800201c <d_parmlist+0x60>
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f7fe f8f1 	bl	80001d0 <d_make_comp>
 8001fee:	6028      	str	r0, [r5, #0]
 8001ff0:	b1a0      	cbz	r0, 800201c <d_parmlist+0x60>
 8001ff2:	68e2      	ldr	r2, [r4, #12]
 8001ff4:	7813      	ldrb	r3, [r2, #0]
 8001ff6:	f100 0508 	add.w	r5, r0, #8
 8001ffa:	b14b      	cbz	r3, 8002010 <d_parmlist+0x54>
 8001ffc:	2b45      	cmp	r3, #69	; 0x45
 8001ffe:	d007      	beq.n	8002010 <d_parmlist+0x54>
 8002000:	2b2e      	cmp	r3, #46	; 0x2e
 8002002:	d005      	beq.n	8002010 <d_parmlist+0x54>
 8002004:	2b52      	cmp	r3, #82	; 0x52
 8002006:	4620      	mov	r0, r4
 8002008:	d1e6      	bne.n	8001fd8 <d_parmlist+0x1c>
 800200a:	7853      	ldrb	r3, [r2, #1]
 800200c:	2b45      	cmp	r3, #69	; 0x45
 800200e:	d1e5      	bne.n	8001fdc <d_parmlist+0x20>
 8002010:	9801      	ldr	r0, [sp, #4]
 8002012:	b118      	cbz	r0, 800201c <d_parmlist+0x60>
 8002014:	6883      	ldr	r3, [r0, #8]
 8002016:	b123      	cbz	r3, 8002022 <d_parmlist+0x66>
 8002018:	b003      	add	sp, #12
 800201a:	bd30      	pop	{r4, r5, pc}
 800201c:	2000      	movs	r0, #0
 800201e:	b003      	add	sp, #12
 8002020:	bd30      	pop	{r4, r5, pc}
 8002022:	6842      	ldr	r2, [r0, #4]
 8002024:	7811      	ldrb	r1, [r2, #0]
 8002026:	2927      	cmp	r1, #39	; 0x27
 8002028:	d1f6      	bne.n	8002018 <d_parmlist+0x5c>
 800202a:	6852      	ldr	r2, [r2, #4]
 800202c:	7c11      	ldrb	r1, [r2, #16]
 800202e:	2909      	cmp	r1, #9
 8002030:	d1f2      	bne.n	8002018 <d_parmlist+0x5c>
 8002032:	6851      	ldr	r1, [r2, #4]
 8002034:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002036:	1a52      	subs	r2, r2, r1
 8002038:	6322      	str	r2, [r4, #48]	; 0x30
 800203a:	6043      	str	r3, [r0, #4]
 800203c:	e7ec      	b.n	8002018 <d_parmlist+0x5c>
 800203e:	bf00      	nop

08002040 <d_unqualified_name>:
 8002040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002042:	68c1      	ldr	r1, [r0, #12]
 8002044:	780b      	ldrb	r3, [r1, #0]
 8002046:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800204a:	2a09      	cmp	r2, #9
 800204c:	4604      	mov	r4, r0
 800204e:	d920      	bls.n	8002092 <d_unqualified_name+0x52>
 8002050:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8002054:	2a19      	cmp	r2, #25
 8002056:	d925      	bls.n	80020a4 <d_unqualified_name+0x64>
 8002058:	f1a3 0243 	sub.w	r2, r3, #67	; 0x43
 800205c:	2a01      	cmp	r2, #1
 800205e:	d92c      	bls.n	80020ba <d_unqualified_name+0x7a>
 8002060:	2b4c      	cmp	r3, #76	; 0x4c
 8002062:	f000 8088 	beq.w	8002176 <d_unqualified_name+0x136>
 8002066:	2b55      	cmp	r3, #85	; 0x55
 8002068:	d133      	bne.n	80020d2 <d_unqualified_name+0x92>
 800206a:	784b      	ldrb	r3, [r1, #1]
 800206c:	2b6c      	cmp	r3, #108	; 0x6c
 800206e:	d033      	beq.n	80020d8 <d_unqualified_name+0x98>
 8002070:	2b74      	cmp	r3, #116	; 0x74
 8002072:	d12e      	bne.n	80020d2 <d_unqualified_name+0x92>
 8002074:	1c4b      	adds	r3, r1, #1
 8002076:	60c3      	str	r3, [r0, #12]
 8002078:	784b      	ldrb	r3, [r1, #1]
 800207a:	2b74      	cmp	r3, #116	; 0x74
 800207c:	d05a      	beq.n	8002134 <d_unqualified_name+0xf4>
 800207e:	2b42      	cmp	r3, #66	; 0x42
 8002080:	f04f 0500 	mov.w	r5, #0
 8002084:	d10c      	bne.n	80020a0 <d_unqualified_name+0x60>
 8002086:	4629      	mov	r1, r5
 8002088:	4620      	mov	r0, r4
 800208a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800208e:	f7fe bacd 	b.w	800062c <d_abi_tags>
 8002092:	f7fe fa6f 	bl	8000574 <d_source_name>
 8002096:	68e3      	ldr	r3, [r4, #12]
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	4605      	mov	r5, r0
 800209c:	2b42      	cmp	r3, #66	; 0x42
 800209e:	d0f2      	beq.n	8002086 <d_unqualified_name+0x46>
 80020a0:	4628      	mov	r0, r5
 80020a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020a4:	f7ff ff0c 	bl	8001ec0 <d_operator_name>
 80020a8:	4605      	mov	r5, r0
 80020aa:	b118      	cbz	r0, 80020b4 <d_unqualified_name+0x74>
 80020ac:	7803      	ldrb	r3, [r0, #0]
 80020ae:	2b31      	cmp	r3, #49	; 0x31
 80020b0:	f000 80b2 	beq.w	8002218 <d_unqualified_name+0x1d8>
 80020b4:	68e3      	ldr	r3, [r4, #12]
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	e7f0      	b.n	800209c <d_unqualified_name+0x5c>
 80020ba:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 80020bc:	b125      	cbz	r5, 80020c8 <d_unqualified_name+0x88>
 80020be:	782a      	ldrb	r2, [r5, #0]
 80020c0:	2a00      	cmp	r2, #0
 80020c2:	d06c      	beq.n	800219e <d_unqualified_name+0x15e>
 80020c4:	2a18      	cmp	r2, #24
 80020c6:	d06a      	beq.n	800219e <d_unqualified_name+0x15e>
 80020c8:	2b43      	cmp	r3, #67	; 0x43
 80020ca:	f000 80bf 	beq.w	800224c <d_unqualified_name+0x20c>
 80020ce:	2b44      	cmp	r3, #68	; 0x44
 80020d0:	d06f      	beq.n	80021b2 <d_unqualified_name+0x172>
 80020d2:	2500      	movs	r5, #0
 80020d4:	4628      	mov	r0, r5
 80020d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020d8:	1c4b      	adds	r3, r1, #1
 80020da:	60c3      	str	r3, [r0, #12]
 80020dc:	784b      	ldrb	r3, [r1, #1]
 80020de:	2b6c      	cmp	r3, #108	; 0x6c
 80020e0:	d1cd      	bne.n	800207e <d_unqualified_name+0x3e>
 80020e2:	3102      	adds	r1, #2
 80020e4:	60c1      	str	r1, [r0, #12]
 80020e6:	f7ff ff69 	bl	8001fbc <d_parmlist>
 80020ea:	4606      	mov	r6, r0
 80020ec:	b1f0      	cbz	r0, 800212c <d_unqualified_name+0xec>
 80020ee:	68e2      	ldr	r2, [r4, #12]
 80020f0:	7813      	ldrb	r3, [r2, #0]
 80020f2:	2b45      	cmp	r3, #69	; 0x45
 80020f4:	d1c3      	bne.n	800207e <d_unqualified_name+0x3e>
 80020f6:	3201      	adds	r2, #1
 80020f8:	60e2      	str	r2, [r4, #12]
 80020fa:	4620      	mov	r0, r4
 80020fc:	f7fe f9fc 	bl	80004f8 <d_compact_number>
 8002100:	2800      	cmp	r0, #0
 8002102:	db13      	blt.n	800212c <d_unqualified_name+0xec>
 8002104:	6963      	ldr	r3, [r4, #20]
 8002106:	69a2      	ldr	r2, [r4, #24]
 8002108:	4293      	cmp	r3, r2
 800210a:	da0f      	bge.n	800212c <d_unqualified_name+0xec>
 800210c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002110:	6921      	ldr	r1, [r4, #16]
 8002112:	0092      	lsls	r2, r2, #2
 8002114:	3301      	adds	r3, #1
 8002116:	188d      	adds	r5, r1, r2
 8002118:	6163      	str	r3, [r4, #20]
 800211a:	d0cb      	beq.n	80020b4 <d_unqualified_name+0x74>
 800211c:	2345      	movs	r3, #69	; 0x45
 800211e:	548b      	strb	r3, [r1, r2]
 8002120:	606e      	str	r6, [r5, #4]
 8002122:	60a8      	str	r0, [r5, #8]
 8002124:	6a23      	ldr	r3, [r4, #32]
 8002126:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002128:	4293      	cmp	r3, r2
 800212a:	db1c      	blt.n	8002166 <d_unqualified_name+0x126>
 800212c:	68e3      	ldr	r3, [r4, #12]
 800212e:	2500      	movs	r5, #0
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	e7b3      	b.n	800209c <d_unqualified_name+0x5c>
 8002134:	3102      	adds	r1, #2
 8002136:	60c1      	str	r1, [r0, #12]
 8002138:	f7fe f9de 	bl	80004f8 <d_compact_number>
 800213c:	2800      	cmp	r0, #0
 800213e:	dbf5      	blt.n	800212c <d_unqualified_name+0xec>
 8002140:	6963      	ldr	r3, [r4, #20]
 8002142:	69a2      	ldr	r2, [r4, #24]
 8002144:	4293      	cmp	r3, r2
 8002146:	daf1      	bge.n	800212c <d_unqualified_name+0xec>
 8002148:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800214c:	6921      	ldr	r1, [r4, #16]
 800214e:	0092      	lsls	r2, r2, #2
 8002150:	3301      	adds	r3, #1
 8002152:	188d      	adds	r5, r1, r2
 8002154:	6163      	str	r3, [r4, #20]
 8002156:	d0ad      	beq.n	80020b4 <d_unqualified_name+0x74>
 8002158:	2347      	movs	r3, #71	; 0x47
 800215a:	548b      	strb	r3, [r1, r2]
 800215c:	6068      	str	r0, [r5, #4]
 800215e:	6a23      	ldr	r3, [r4, #32]
 8002160:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002162:	4293      	cmp	r3, r2
 8002164:	dae2      	bge.n	800212c <d_unqualified_name+0xec>
 8002166:	69e1      	ldr	r1, [r4, #28]
 8002168:	68e2      	ldr	r2, [r4, #12]
 800216a:	f841 5023 	str.w	r5, [r1, r3, lsl #2]
 800216e:	3301      	adds	r3, #1
 8002170:	6223      	str	r3, [r4, #32]
 8002172:	7813      	ldrb	r3, [r2, #0]
 8002174:	e792      	b.n	800209c <d_unqualified_name+0x5c>
 8002176:	3101      	adds	r1, #1
 8002178:	60c1      	str	r1, [r0, #12]
 800217a:	f7fe f9fb 	bl	8000574 <d_source_name>
 800217e:	4605      	mov	r5, r0
 8002180:	2800      	cmp	r0, #0
 8002182:	d0a6      	beq.n	80020d2 <d_unqualified_name+0x92>
 8002184:	68e2      	ldr	r2, [r4, #12]
 8002186:	7813      	ldrb	r3, [r2, #0]
 8002188:	2b5f      	cmp	r3, #95	; 0x5f
 800218a:	d187      	bne.n	800209c <d_unqualified_name+0x5c>
 800218c:	4620      	mov	r0, r4
 800218e:	3201      	adds	r2, #1
 8002190:	f840 2f0c 	str.w	r2, [r0, #12]!
 8002194:	f7fe f96e 	bl	8000474 <d_number.isra.0>
 8002198:	2800      	cmp	r0, #0
 800219a:	da8b      	bge.n	80020b4 <d_unqualified_name+0x74>
 800219c:	e799      	b.n	80020d2 <d_unqualified_name+0x92>
 800219e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021a0:	68aa      	ldr	r2, [r5, #8]
 80021a2:	4413      	add	r3, r2
 80021a4:	6323      	str	r3, [r4, #48]	; 0x30
 80021a6:	780b      	ldrb	r3, [r1, #0]
 80021a8:	2b43      	cmp	r3, #67	; 0x43
 80021aa:	d04f      	beq.n	800224c <d_unqualified_name+0x20c>
 80021ac:	2b44      	cmp	r3, #68	; 0x44
 80021ae:	f47f af66 	bne.w	800207e <d_unqualified_name+0x3e>
 80021b2:	784b      	ldrb	r3, [r1, #1]
 80021b4:	3b30      	subs	r3, #48	; 0x30
 80021b6:	2b05      	cmp	r3, #5
 80021b8:	d88b      	bhi.n	80020d2 <d_unqualified_name+0x92>
 80021ba:	a201      	add	r2, pc, #4	; (adr r2, 80021c0 <d_unqualified_name+0x180>)
 80021bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c0:	08002215 	.word	0x08002215
 80021c4:	080021d9 	.word	0x080021d9
 80021c8:	08002211 	.word	0x08002211
 80021cc:	080020d3 	.word	0x080020d3
 80021d0:	0800220d 	.word	0x0800220d
 80021d4:	08002209 	.word	0x08002209
 80021d8:	2702      	movs	r7, #2
 80021da:	6963      	ldr	r3, [r4, #20]
 80021dc:	69a2      	ldr	r2, [r4, #24]
 80021de:	1c88      	adds	r0, r1, #2
 80021e0:	4293      	cmp	r3, r2
 80021e2:	60e0      	str	r0, [r4, #12]
 80021e4:	da56      	bge.n	8002294 <d_unqualified_name+0x254>
 80021e6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80021ea:	6920      	ldr	r0, [r4, #16]
 80021ec:	0092      	lsls	r2, r2, #2
 80021ee:	3301      	adds	r3, #1
 80021f0:	1886      	adds	r6, r0, r2
 80021f2:	6163      	str	r3, [r4, #20]
 80021f4:	d005      	beq.n	8002202 <d_unqualified_name+0x1c2>
 80021f6:	2d00      	cmp	r5, #0
 80021f8:	d04f      	beq.n	800229a <d_unqualified_name+0x25a>
 80021fa:	2308      	movs	r3, #8
 80021fc:	5483      	strb	r3, [r0, r2]
 80021fe:	7137      	strb	r7, [r6, #4]
 8002200:	60b5      	str	r5, [r6, #8]
 8002202:	788b      	ldrb	r3, [r1, #2]
 8002204:	4635      	mov	r5, r6
 8002206:	e749      	b.n	800209c <d_unqualified_name+0x5c>
 8002208:	2705      	movs	r7, #5
 800220a:	e7e6      	b.n	80021da <d_unqualified_name+0x19a>
 800220c:	2704      	movs	r7, #4
 800220e:	e7e4      	b.n	80021da <d_unqualified_name+0x19a>
 8002210:	2703      	movs	r7, #3
 8002212:	e7e2      	b.n	80021da <d_unqualified_name+0x19a>
 8002214:	2701      	movs	r7, #1
 8002216:	e7e0      	b.n	80021da <d_unqualified_name+0x19a>
 8002218:	6842      	ldr	r2, [r0, #4]
 800221a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800221c:	6896      	ldr	r6, [r2, #8]
 800221e:	6810      	ldr	r0, [r2, #0]
 8002220:	491f      	ldr	r1, [pc, #124]	; (80022a0 <d_unqualified_name+0x260>)
 8002222:	3307      	adds	r3, #7
 8002224:	4433      	add	r3, r6
 8002226:	6323      	str	r3, [r4, #48]	; 0x30
 8002228:	f004 fb7a 	bl	8006920 <strcmp>
 800222c:	2800      	cmp	r0, #0
 800222e:	f47f af41 	bne.w	80020b4 <d_unqualified_name+0x74>
 8002232:	4620      	mov	r0, r4
 8002234:	f7fe f99e 	bl	8000574 <d_source_name>
 8002238:	462a      	mov	r2, r5
 800223a:	4603      	mov	r3, r0
 800223c:	2136      	movs	r1, #54	; 0x36
 800223e:	4620      	mov	r0, r4
 8002240:	f7fd ffc6 	bl	80001d0 <d_make_comp>
 8002244:	68e3      	ldr	r3, [r4, #12]
 8002246:	4605      	mov	r5, r0
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	e727      	b.n	800209c <d_unqualified_name+0x5c>
 800224c:	784b      	ldrb	r3, [r1, #1]
 800224e:	3b31      	subs	r3, #49	; 0x31
 8002250:	2b04      	cmp	r3, #4
 8002252:	f63f af3e 	bhi.w	80020d2 <d_unqualified_name+0x92>
 8002256:	e8df f003 	tbb	[pc, r3]
 800225a:	0315      	.short	0x0315
 800225c:	191b      	.short	0x191b
 800225e:	17          	.byte	0x17
 800225f:	00          	.byte	0x00
 8002260:	2702      	movs	r7, #2
 8002262:	6963      	ldr	r3, [r4, #20]
 8002264:	69a2      	ldr	r2, [r4, #24]
 8002266:	1c88      	adds	r0, r1, #2
 8002268:	4293      	cmp	r3, r2
 800226a:	60e0      	str	r0, [r4, #12]
 800226c:	da12      	bge.n	8002294 <d_unqualified_name+0x254>
 800226e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8002272:	6920      	ldr	r0, [r4, #16]
 8002274:	0092      	lsls	r2, r2, #2
 8002276:	3301      	adds	r3, #1
 8002278:	1886      	adds	r6, r0, r2
 800227a:	6163      	str	r3, [r4, #20]
 800227c:	d0c1      	beq.n	8002202 <d_unqualified_name+0x1c2>
 800227e:	b165      	cbz	r5, 800229a <d_unqualified_name+0x25a>
 8002280:	2307      	movs	r3, #7
 8002282:	e7bb      	b.n	80021fc <d_unqualified_name+0x1bc>
 8002284:	2701      	movs	r7, #1
 8002286:	e7ec      	b.n	8002262 <d_unqualified_name+0x222>
 8002288:	2705      	movs	r7, #5
 800228a:	e7ea      	b.n	8002262 <d_unqualified_name+0x222>
 800228c:	2704      	movs	r7, #4
 800228e:	e7e8      	b.n	8002262 <d_unqualified_name+0x222>
 8002290:	2703      	movs	r7, #3
 8002292:	e7e6      	b.n	8002262 <d_unqualified_name+0x222>
 8002294:	788b      	ldrb	r3, [r1, #2]
 8002296:	2500      	movs	r5, #0
 8002298:	e700      	b.n	800209c <d_unqualified_name+0x5c>
 800229a:	788b      	ldrb	r3, [r1, #2]
 800229c:	e6fe      	b.n	800209c <d_unqualified_name+0x5c>
 800229e:	bf00      	nop
 80022a0:	08018534 	.word	0x08018534

080022a4 <d_bare_function_type>:
 80022a4:	b570      	push	{r4, r5, r6, lr}
 80022a6:	68c3      	ldr	r3, [r0, #12]
 80022a8:	781a      	ldrb	r2, [r3, #0]
 80022aa:	2a4a      	cmp	r2, #74	; 0x4a
 80022ac:	4604      	mov	r4, r0
 80022ae:	d00d      	beq.n	80022cc <d_bare_function_type+0x28>
 80022b0:	b971      	cbnz	r1, 80022d0 <d_bare_function_type+0x2c>
 80022b2:	460d      	mov	r5, r1
 80022b4:	4620      	mov	r0, r4
 80022b6:	f7ff fe81 	bl	8001fbc <d_parmlist>
 80022ba:	b178      	cbz	r0, 80022dc <d_bare_function_type+0x38>
 80022bc:	4603      	mov	r3, r0
 80022be:	462a      	mov	r2, r5
 80022c0:	4620      	mov	r0, r4
 80022c2:	2129      	movs	r1, #41	; 0x29
 80022c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80022c8:	f7fd bf82 	b.w	80001d0 <d_make_comp>
 80022cc:	3301      	adds	r3, #1
 80022ce:	60c3      	str	r3, [r0, #12]
 80022d0:	4620      	mov	r0, r4
 80022d2:	f7ff fa0d 	bl	80016f0 <d_type>
 80022d6:	4605      	mov	r5, r0
 80022d8:	2800      	cmp	r0, #0
 80022da:	d1eb      	bne.n	80022b4 <d_bare_function_type+0x10>
 80022dc:	2000      	movs	r0, #0
 80022de:	bd70      	pop	{r4, r5, r6, pc}

080022e0 <d_function_type>:
 80022e0:	68c3      	ldr	r3, [r0, #12]
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	2a46      	cmp	r2, #70	; 0x46
 80022e6:	d001      	beq.n	80022ec <d_function_type+0xc>
 80022e8:	2000      	movs	r0, #0
 80022ea:	4770      	bx	lr
 80022ec:	b510      	push	{r4, lr}
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	60c2      	str	r2, [r0, #12]
 80022f2:	785a      	ldrb	r2, [r3, #1]
 80022f4:	2a59      	cmp	r2, #89	; 0x59
 80022f6:	bf04      	itt	eq
 80022f8:	3302      	addeq	r3, #2
 80022fa:	60c3      	streq	r3, [r0, #12]
 80022fc:	2101      	movs	r1, #1
 80022fe:	4604      	mov	r4, r0
 8002300:	f7ff ffd0 	bl	80022a4 <d_bare_function_type>
 8002304:	4601      	mov	r1, r0
 8002306:	4620      	mov	r0, r4
 8002308:	f7fe f814 	bl	8000334 <d_ref_qualifier>
 800230c:	68e3      	ldr	r3, [r4, #12]
 800230e:	781a      	ldrb	r2, [r3, #0]
 8002310:	2a45      	cmp	r2, #69	; 0x45
 8002312:	d001      	beq.n	8002318 <d_function_type+0x38>
 8002314:	2000      	movs	r0, #0
 8002316:	bd10      	pop	{r4, pc}
 8002318:	3301      	adds	r3, #1
 800231a:	60e3      	str	r3, [r4, #12]
 800231c:	bd10      	pop	{r4, pc}
 800231e:	bf00      	nop

08002320 <d_encoding>:
 8002320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002324:	68c3      	ldr	r3, [r0, #12]
 8002326:	781a      	ldrb	r2, [r3, #0]
 8002328:	2a47      	cmp	r2, #71	; 0x47
 800232a:	4605      	mov	r5, r0
 800232c:	d01f      	beq.n	800236e <d_encoding+0x4e>
 800232e:	2a54      	cmp	r2, #84	; 0x54
 8002330:	d01d      	beq.n	800236e <d_encoding+0x4e>
 8002332:	460e      	mov	r6, r1
 8002334:	f7ff f820 	bl	8001378 <d_name>
 8002338:	4604      	mov	r4, r0
 800233a:	b310      	cbz	r0, 8002382 <d_encoding+0x62>
 800233c:	b32e      	cbz	r6, 800238a <d_encoding+0x6a>
 800233e:	68ab      	ldr	r3, [r5, #8]
 8002340:	07db      	lsls	r3, r3, #31
 8002342:	d422      	bmi.n	800238a <d_encoding+0x6a>
 8002344:	7823      	ldrb	r3, [r4, #0]
 8002346:	f1a3 021c 	sub.w	r2, r3, #28
 800234a:	2a04      	cmp	r2, #4
 800234c:	d940      	bls.n	80023d0 <d_encoding+0xb0>
 800234e:	2b4c      	cmp	r3, #76	; 0x4c
 8002350:	d03e      	beq.n	80023d0 <d_encoding+0xb0>
 8002352:	2b02      	cmp	r3, #2
 8002354:	d116      	bne.n	8002384 <d_encoding+0x64>
 8002356:	68a3      	ldr	r3, [r4, #8]
 8002358:	781a      	ldrb	r2, [r3, #0]
 800235a:	f1a2 011c 	sub.w	r1, r2, #28
 800235e:	2904      	cmp	r1, #4
 8002360:	f240 8283 	bls.w	800286a <d_encoding+0x54a>
 8002364:	2a4c      	cmp	r2, #76	; 0x4c
 8002366:	f000 8280 	beq.w	800286a <d_encoding+0x54a>
 800236a:	60a3      	str	r3, [r4, #8]
 800236c:	e00a      	b.n	8002384 <d_encoding+0x64>
 800236e:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8002370:	f101 0214 	add.w	r2, r1, #20
 8002374:	632a      	str	r2, [r5, #48]	; 0x30
 8002376:	781a      	ldrb	r2, [r3, #0]
 8002378:	2a54      	cmp	r2, #84	; 0x54
 800237a:	d02b      	beq.n	80023d4 <d_encoding+0xb4>
 800237c:	2a47      	cmp	r2, #71	; 0x47
 800237e:	f000 809f 	beq.w	80024c0 <d_encoding+0x1a0>
 8002382:	2400      	movs	r4, #0
 8002384:	4620      	mov	r0, r4
 8002386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800238a:	68eb      	ldr	r3, [r5, #12]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d0f8      	beq.n	8002384 <d_encoding+0x64>
 8002392:	2b45      	cmp	r3, #69	; 0x45
 8002394:	d0f6      	beq.n	8002384 <d_encoding+0x64>
 8002396:	4621      	mov	r1, r4
 8002398:	780a      	ldrb	r2, [r1, #0]
 800239a:	2a20      	cmp	r2, #32
 800239c:	f200 8113 	bhi.w	80025c6 <d_encoding+0x2a6>
 80023a0:	2a1c      	cmp	r2, #28
 80023a2:	f080 8112 	bcs.w	80025ca <d_encoding+0x2aa>
 80023a6:	2a04      	cmp	r2, #4
 80023a8:	f040 8101 	bne.w	80025ae <d_encoding+0x28e>
 80023ac:	684a      	ldr	r2, [r1, #4]
 80023ae:	b16a      	cbz	r2, 80023cc <d_encoding+0xac>
 80023b0:	7813      	ldrb	r3, [r2, #0]
 80023b2:	2b08      	cmp	r3, #8
 80023b4:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 80023b8:	f200 80f6 	bhi.w	80025a8 <d_encoding+0x288>
 80023bc:	2b07      	cmp	r3, #7
 80023be:	f080 80f6 	bcs.w	80025ae <d_encoding+0x28e>
 80023c2:	2901      	cmp	r1, #1
 80023c4:	d802      	bhi.n	80023cc <d_encoding+0xac>
 80023c6:	6892      	ldr	r2, [r2, #8]
 80023c8:	2a00      	cmp	r2, #0
 80023ca:	d1f1      	bne.n	80023b0 <d_encoding+0x90>
 80023cc:	2101      	movs	r1, #1
 80023ce:	e0ef      	b.n	80025b0 <d_encoding+0x290>
 80023d0:	6864      	ldr	r4, [r4, #4]
 80023d2:	e7b7      	b.n	8002344 <d_encoding+0x24>
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	60ea      	str	r2, [r5, #12]
 80023d8:	785a      	ldrb	r2, [r3, #1]
 80023da:	2a00      	cmp	r2, #0
 80023dc:	d0d1      	beq.n	8002382 <d_encoding+0x62>
 80023de:	1c9a      	adds	r2, r3, #2
 80023e0:	60ea      	str	r2, [r5, #12]
 80023e2:	785b      	ldrb	r3, [r3, #1]
 80023e4:	3b43      	subs	r3, #67	; 0x43
 80023e6:	2b33      	cmp	r3, #51	; 0x33
 80023e8:	d8cb      	bhi.n	8002382 <d_encoding+0x62>
 80023ea:	a201      	add	r2, pc, #4	; (adr r2, 80023f0 <d_encoding+0xd0>)
 80023ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023f0:	0800282b 	.word	0x0800282b
 80023f4:	08002383 	.word	0x08002383
 80023f8:	08002383 	.word	0x08002383
 80023fc:	08002815 	.word	0x08002815
 8002400:	08002383 	.word	0x08002383
 8002404:	080027ff 	.word	0x080027ff
 8002408:	080027e9 	.word	0x080027e9
 800240c:	080027d3 	.word	0x080027d3
 8002410:	08002383 	.word	0x08002383
 8002414:	08002383 	.word	0x08002383
 8002418:	08002383 	.word	0x08002383
 800241c:	08002383 	.word	0x08002383
 8002420:	08002383 	.word	0x08002383
 8002424:	08002383 	.word	0x08002383
 8002428:	08002383 	.word	0x08002383
 800242c:	08002383 	.word	0x08002383
 8002430:	080027bd 	.word	0x080027bd
 8002434:	080027a3 	.word	0x080027a3
 8002438:	08002383 	.word	0x08002383
 800243c:	08002789 	.word	0x08002789
 8002440:	08002773 	.word	0x08002773
 8002444:	08002383 	.word	0x08002383
 8002448:	08002383 	.word	0x08002383
 800244c:	08002383 	.word	0x08002383
 8002450:	08002383 	.word	0x08002383
 8002454:	08002383 	.word	0x08002383
 8002458:	08002383 	.word	0x08002383
 800245c:	08002383 	.word	0x08002383
 8002460:	08002383 	.word	0x08002383
 8002464:	08002383 	.word	0x08002383
 8002468:	08002383 	.word	0x08002383
 800246c:	08002383 	.word	0x08002383
 8002470:	0800273f 	.word	0x0800273f
 8002474:	08002383 	.word	0x08002383
 8002478:	08002383 	.word	0x08002383
 800247c:	08002383 	.word	0x08002383
 8002480:	08002383 	.word	0x08002383
 8002484:	08002719 	.word	0x08002719
 8002488:	08002383 	.word	0x08002383
 800248c:	08002383 	.word	0x08002383
 8002490:	08002383 	.word	0x08002383
 8002494:	08002383 	.word	0x08002383
 8002498:	08002383 	.word	0x08002383
 800249c:	08002383 	.word	0x08002383
 80024a0:	08002383 	.word	0x08002383
 80024a4:	08002383 	.word	0x08002383
 80024a8:	08002383 	.word	0x08002383
 80024ac:	08002383 	.word	0x08002383
 80024b0:	08002383 	.word	0x08002383
 80024b4:	08002383 	.word	0x08002383
 80024b8:	08002383 	.word	0x08002383
 80024bc:	080026f3 	.word	0x080026f3
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	60ea      	str	r2, [r5, #12]
 80024c4:	785a      	ldrb	r2, [r3, #1]
 80024c6:	2a00      	cmp	r2, #0
 80024c8:	f43f af5b 	beq.w	8002382 <d_encoding+0x62>
 80024cc:	1c9a      	adds	r2, r3, #2
 80024ce:	60ea      	str	r2, [r5, #12]
 80024d0:	785a      	ldrb	r2, [r3, #1]
 80024d2:	3a41      	subs	r2, #65	; 0x41
 80024d4:	2a31      	cmp	r2, #49	; 0x31
 80024d6:	f63f af54 	bhi.w	8002382 <d_encoding+0x62>
 80024da:	a101      	add	r1, pc, #4	; (adr r1, 80024e0 <d_encoding+0x1c0>)
 80024dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80024e0:	080025d5 	.word	0x080025d5
 80024e4:	08002383 	.word	0x08002383
 80024e8:	08002383 	.word	0x08002383
 80024ec:	08002383 	.word	0x08002383
 80024f0:	08002383 	.word	0x08002383
 80024f4:	08002383 	.word	0x08002383
 80024f8:	08002383 	.word	0x08002383
 80024fc:	08002383 	.word	0x08002383
 8002500:	08002383 	.word	0x08002383
 8002504:	08002383 	.word	0x08002383
 8002508:	08002383 	.word	0x08002383
 800250c:	08002383 	.word	0x08002383
 8002510:	08002383 	.word	0x08002383
 8002514:	08002383 	.word	0x08002383
 8002518:	08002383 	.word	0x08002383
 800251c:	08002383 	.word	0x08002383
 8002520:	08002383 	.word	0x08002383
 8002524:	080026d5 	.word	0x080026d5
 8002528:	08002383 	.word	0x08002383
 800252c:	080026a9 	.word	0x080026a9
 8002530:	08002383 	.word	0x08002383
 8002534:	08002693 	.word	0x08002693
 8002538:	08002383 	.word	0x08002383
 800253c:	08002383 	.word	0x08002383
 8002540:	08002383 	.word	0x08002383
 8002544:	08002383 	.word	0x08002383
 8002548:	08002383 	.word	0x08002383
 800254c:	08002383 	.word	0x08002383
 8002550:	08002383 	.word	0x08002383
 8002554:	08002383 	.word	0x08002383
 8002558:	08002383 	.word	0x08002383
 800255c:	08002383 	.word	0x08002383
 8002560:	08002383 	.word	0x08002383
 8002564:	08002383 	.word	0x08002383
 8002568:	08002383 	.word	0x08002383
 800256c:	08002383 	.word	0x08002383
 8002570:	08002383 	.word	0x08002383
 8002574:	08002383 	.word	0x08002383
 8002578:	08002383 	.word	0x08002383
 800257c:	08002383 	.word	0x08002383
 8002580:	08002383 	.word	0x08002383
 8002584:	08002383 	.word	0x08002383
 8002588:	08002383 	.word	0x08002383
 800258c:	08002383 	.word	0x08002383
 8002590:	08002383 	.word	0x08002383
 8002594:	08002383 	.word	0x08002383
 8002598:	08002383 	.word	0x08002383
 800259c:	08002383 	.word	0x08002383
 80025a0:	08002383 	.word	0x08002383
 80025a4:	080025ed 	.word	0x080025ed
 80025a8:	2b34      	cmp	r3, #52	; 0x34
 80025aa:	f47f af0f 	bne.w	80023cc <d_encoding+0xac>
 80025ae:	2100      	movs	r1, #0
 80025b0:	4628      	mov	r0, r5
 80025b2:	f7ff fe77 	bl	80022a4 <d_bare_function_type>
 80025b6:	4622      	mov	r2, r4
 80025b8:	4603      	mov	r3, r0
 80025ba:	2103      	movs	r1, #3
 80025bc:	4628      	mov	r0, r5
 80025be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025c2:	f7fd be05 	b.w	80001d0 <d_make_comp>
 80025c6:	2a4c      	cmp	r2, #76	; 0x4c
 80025c8:	d1f1      	bne.n	80025ae <d_encoding+0x28e>
 80025ca:	6849      	ldr	r1, [r1, #4]
 80025cc:	2900      	cmp	r1, #0
 80025ce:	f47f aee3 	bne.w	8002398 <d_encoding+0x78>
 80025d2:	e7ed      	b.n	80025b0 <d_encoding+0x290>
 80025d4:	2100      	movs	r1, #0
 80025d6:	4628      	mov	r0, r5
 80025d8:	f7ff fea2 	bl	8002320 <d_encoding>
 80025dc:	2300      	movs	r3, #0
 80025de:	4602      	mov	r2, r0
 80025e0:	2117      	movs	r1, #23
 80025e2:	4628      	mov	r0, r5
 80025e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025e8:	f7fd bdf2 	b.w	80001d0 <d_make_comp>
 80025ec:	f105 000c 	add.w	r0, r5, #12
 80025f0:	f7fd ff40 	bl	8000474 <d_number.isra.0>
 80025f4:	2801      	cmp	r0, #1
 80025f6:	f77f aec4 	ble.w	8002382 <d_encoding+0x62>
 80025fa:	68eb      	ldr	r3, [r5, #12]
 80025fc:	781a      	ldrb	r2, [r3, #0]
 80025fe:	2a00      	cmp	r2, #0
 8002600:	f43f aebf 	beq.w	8002382 <d_encoding+0x62>
 8002604:	1c5f      	adds	r7, r3, #1
 8002606:	60ef      	str	r7, [r5, #12]
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	2b5f      	cmp	r3, #95	; 0x5f
 800260c:	f47f aeb9 	bne.w	8002382 <d_encoding+0x62>
 8002610:	2200      	movs	r2, #0
 8002612:	1e46      	subs	r6, r0, #1
 8002614:	4690      	mov	r8, r2
 8002616:	f04f 0940 	mov.w	r9, #64	; 0x40
 800261a:	783b      	ldrb	r3, [r7, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	f43f aeb0 	beq.w	8002382 <d_encoding+0x62>
 8002622:	2b24      	cmp	r3, #36	; 0x24
 8002624:	f000 8128 	beq.w	8002878 <d_encoding+0x558>
 8002628:	463c      	mov	r4, r7
 800262a:	2100      	movs	r1, #0
 800262c:	e004      	b.n	8002638 <d_encoding+0x318>
 800262e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8002632:	b123      	cbz	r3, 800263e <d_encoding+0x31e>
 8002634:	2b24      	cmp	r3, #36	; 0x24
 8002636:	d002      	beq.n	800263e <d_encoding+0x31e>
 8002638:	3101      	adds	r1, #1
 800263a:	42b1      	cmp	r1, r6
 800263c:	dbf7      	blt.n	800262e <d_encoding+0x30e>
 800263e:	696c      	ldr	r4, [r5, #20]
 8002640:	69a8      	ldr	r0, [r5, #24]
 8002642:	4284      	cmp	r4, r0
 8002644:	f280 8113 	bge.w	800286e <d_encoding+0x54e>
 8002648:	6928      	ldr	r0, [r5, #16]
 800264a:	1c63      	adds	r3, r4, #1
 800264c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002650:	616b      	str	r3, [r5, #20]
 8002652:	eb10 0384 	adds.w	r3, r0, r4, lsl #2
 8002656:	f000 810a 	beq.w	800286e <d_encoding+0x54e>
 800265a:	f800 8024 	strb.w	r8, [r0, r4, lsl #2]
 800265e:	605f      	str	r7, [r3, #4]
 8002660:	6099      	str	r1, [r3, #8]
 8002662:	68ef      	ldr	r7, [r5, #12]
 8002664:	440f      	add	r7, r1
 8002666:	1a76      	subs	r6, r6, r1
 8002668:	60ef      	str	r7, [r5, #12]
 800266a:	2a00      	cmp	r2, #0
 800266c:	f000 8121 	beq.w	80028b2 <d_encoding+0x592>
 8002670:	213f      	movs	r1, #63	; 0x3f
 8002672:	4628      	mov	r0, r5
 8002674:	f7fd fdac 	bl	80001d0 <d_make_comp>
 8002678:	4602      	mov	r2, r0
 800267a:	2800      	cmp	r0, #0
 800267c:	f43f ae81 	beq.w	8002382 <d_encoding+0x62>
 8002680:	2e00      	cmp	r6, #0
 8002682:	dcca      	bgt.n	800261a <d_encoding+0x2fa>
 8002684:	4628      	mov	r0, r5
 8002686:	2300      	movs	r3, #0
 8002688:	213e      	movs	r1, #62	; 0x3e
 800268a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800268e:	f7fd bd9f 	b.w	80001d0 <d_make_comp>
 8002692:	4628      	mov	r0, r5
 8002694:	f7fe fe70 	bl	8001378 <d_name>
 8002698:	2300      	movs	r3, #0
 800269a:	4602      	mov	r2, r0
 800269c:	2113      	movs	r1, #19
 800269e:	4628      	mov	r0, r5
 80026a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026a4:	f7fd bd94 	b.w	80001d0 <d_make_comp>
 80026a8:	789a      	ldrb	r2, [r3, #2]
 80026aa:	2100      	movs	r1, #0
 80026ac:	4628      	mov	r0, r5
 80026ae:	2a00      	cmp	r2, #0
 80026b0:	f000 8101 	beq.w	80028b6 <d_encoding+0x596>
 80026b4:	1cda      	adds	r2, r3, #3
 80026b6:	60ea      	str	r2, [r5, #12]
 80026b8:	789b      	ldrb	r3, [r3, #2]
 80026ba:	2b6e      	cmp	r3, #110	; 0x6e
 80026bc:	f040 80fb 	bne.w	80028b6 <d_encoding+0x596>
 80026c0:	f7ff fe2e 	bl	8002320 <d_encoding>
 80026c4:	2300      	movs	r3, #0
 80026c6:	4602      	mov	r2, r0
 80026c8:	2149      	movs	r1, #73	; 0x49
 80026ca:	4628      	mov	r0, r5
 80026cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026d0:	f7fd bd7e 	b.w	80001d0 <d_make_comp>
 80026d4:	4628      	mov	r0, r5
 80026d6:	f7fe fe4f 	bl	8001378 <d_name>
 80026da:	4604      	mov	r4, r0
 80026dc:	4628      	mov	r0, r5
 80026de:	f7fd fef3 	bl	80004c8 <d_number_component>
 80026e2:	4622      	mov	r2, r4
 80026e4:	4603      	mov	r3, r0
 80026e6:	2116      	movs	r1, #22
 80026e8:	4628      	mov	r0, r5
 80026ea:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026ee:	f7fd bd6f 	b.w	80001d0 <d_make_comp>
 80026f2:	2176      	movs	r1, #118	; 0x76
 80026f4:	4628      	mov	r0, r5
 80026f6:	f7fe f871 	bl	80007dc <d_call_offset>
 80026fa:	2800      	cmp	r0, #0
 80026fc:	f43f ae41 	beq.w	8002382 <d_encoding+0x62>
 8002700:	2100      	movs	r1, #0
 8002702:	4628      	mov	r0, r5
 8002704:	f7ff fe0c 	bl	8002320 <d_encoding>
 8002708:	2300      	movs	r3, #0
 800270a:	4602      	mov	r2, r0
 800270c:	2110      	movs	r1, #16
 800270e:	4628      	mov	r0, r5
 8002710:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002714:	f7fd bd5c 	b.w	80001d0 <d_make_comp>
 8002718:	2168      	movs	r1, #104	; 0x68
 800271a:	4628      	mov	r0, r5
 800271c:	f7fe f85e 	bl	80007dc <d_call_offset>
 8002720:	2800      	cmp	r0, #0
 8002722:	f43f ae2e 	beq.w	8002382 <d_encoding+0x62>
 8002726:	2100      	movs	r1, #0
 8002728:	4628      	mov	r0, r5
 800272a:	f7ff fdf9 	bl	8002320 <d_encoding>
 800272e:	2300      	movs	r3, #0
 8002730:	4602      	mov	r2, r0
 8002732:	210f      	movs	r1, #15
 8002734:	4628      	mov	r0, r5
 8002736:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800273a:	f7fd bd49 	b.w	80001d0 <d_make_comp>
 800273e:	2100      	movs	r1, #0
 8002740:	4628      	mov	r0, r5
 8002742:	f7fe f84b 	bl	80007dc <d_call_offset>
 8002746:	2800      	cmp	r0, #0
 8002748:	f43f ae1b 	beq.w	8002382 <d_encoding+0x62>
 800274c:	2100      	movs	r1, #0
 800274e:	4628      	mov	r0, r5
 8002750:	f7fe f844 	bl	80007dc <d_call_offset>
 8002754:	2800      	cmp	r0, #0
 8002756:	f43f ae14 	beq.w	8002382 <d_encoding+0x62>
 800275a:	2100      	movs	r1, #0
 800275c:	4628      	mov	r0, r5
 800275e:	f7ff fddf 	bl	8002320 <d_encoding>
 8002762:	2300      	movs	r3, #0
 8002764:	4602      	mov	r2, r0
 8002766:	2111      	movs	r1, #17
 8002768:	4628      	mov	r0, r5
 800276a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800276e:	f7fd bd2f 	b.w	80001d0 <d_make_comp>
 8002772:	4628      	mov	r0, r5
 8002774:	f7fe fe00 	bl	8001378 <d_name>
 8002778:	2300      	movs	r3, #0
 800277a:	4602      	mov	r2, r0
 800277c:	2115      	movs	r1, #21
 800277e:	4628      	mov	r0, r5
 8002780:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002784:	f7fd bd24 	b.w	80001d0 <d_make_comp>
 8002788:	310f      	adds	r1, #15
 800278a:	6329      	str	r1, [r5, #48]	; 0x30
 800278c:	4628      	mov	r0, r5
 800278e:	f7fe ffaf 	bl	80016f0 <d_type>
 8002792:	2300      	movs	r3, #0
 8002794:	4602      	mov	r2, r0
 8002796:	2109      	movs	r1, #9
 8002798:	4628      	mov	r0, r5
 800279a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800279e:	f7fd bd17 	b.w	80001d0 <d_make_comp>
 80027a2:	310a      	adds	r1, #10
 80027a4:	6329      	str	r1, [r5, #48]	; 0x30
 80027a6:	4628      	mov	r0, r5
 80027a8:	f7fe ffa2 	bl	80016f0 <d_type>
 80027ac:	2300      	movs	r3, #0
 80027ae:	4602      	mov	r2, r0
 80027b0:	210a      	movs	r1, #10
 80027b2:	4628      	mov	r0, r5
 80027b4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027b8:	f7fd bd0a 	b.w	80001d0 <d_make_comp>
 80027bc:	4628      	mov	r0, r5
 80027be:	f7fe ff97 	bl	80016f0 <d_type>
 80027c2:	2300      	movs	r3, #0
 80027c4:	4602      	mov	r2, r0
 80027c6:	210d      	movs	r1, #13
 80027c8:	4628      	mov	r0, r5
 80027ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027ce:	f7fd bcff 	b.w	80001d0 <d_make_comp>
 80027d2:	4628      	mov	r0, r5
 80027d4:	f7fe ff8c 	bl	80016f0 <d_type>
 80027d8:	2300      	movs	r3, #0
 80027da:	4602      	mov	r2, r0
 80027dc:	2112      	movs	r1, #18
 80027de:	4628      	mov	r0, r5
 80027e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027e4:	f7fd bcf4 	b.w	80001d0 <d_make_comp>
 80027e8:	4628      	mov	r0, r5
 80027ea:	f7fe ff81 	bl	80016f0 <d_type>
 80027ee:	2300      	movs	r3, #0
 80027f0:	4602      	mov	r2, r0
 80027f2:	210c      	movs	r1, #12
 80027f4:	4628      	mov	r0, r5
 80027f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027fa:	f7fd bce9 	b.w	80001d0 <d_make_comp>
 80027fe:	4628      	mov	r0, r5
 8002800:	f7fe fdba 	bl	8001378 <d_name>
 8002804:	2300      	movs	r3, #0
 8002806:	4602      	mov	r2, r0
 8002808:	2114      	movs	r1, #20
 800280a:	4628      	mov	r0, r5
 800280c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002810:	f7fd bcde 	b.w	80001d0 <d_make_comp>
 8002814:	4628      	mov	r0, r5
 8002816:	f7fe ff6b 	bl	80016f0 <d_type>
 800281a:	2300      	movs	r3, #0
 800281c:	4602      	mov	r2, r0
 800281e:	210e      	movs	r1, #14
 8002820:	4628      	mov	r0, r5
 8002822:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002826:	f7fd bcd3 	b.w	80001d0 <d_make_comp>
 800282a:	4628      	mov	r0, r5
 800282c:	f7fe ff60 	bl	80016f0 <d_type>
 8002830:	4604      	mov	r4, r0
 8002832:	f105 000c 	add.w	r0, r5, #12
 8002836:	f7fd fe1d 	bl	8000474 <d_number.isra.0>
 800283a:	2800      	cmp	r0, #0
 800283c:	f6ff ada1 	blt.w	8002382 <d_encoding+0x62>
 8002840:	68eb      	ldr	r3, [r5, #12]
 8002842:	781a      	ldrb	r2, [r3, #0]
 8002844:	2a5f      	cmp	r2, #95	; 0x5f
 8002846:	f47f ad9c 	bne.w	8002382 <d_encoding+0x62>
 800284a:	3301      	adds	r3, #1
 800284c:	60eb      	str	r3, [r5, #12]
 800284e:	4628      	mov	r0, r5
 8002850:	f7fe ff4e 	bl	80016f0 <d_type>
 8002854:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002856:	1d59      	adds	r1, r3, #5
 8002858:	6329      	str	r1, [r5, #48]	; 0x30
 800285a:	4602      	mov	r2, r0
 800285c:	4623      	mov	r3, r4
 800285e:	4628      	mov	r0, r5
 8002860:	210b      	movs	r1, #11
 8002862:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002866:	f7fd bcb3 	b.w	80001d0 <d_make_comp>
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	e574      	b.n	8002358 <d_encoding+0x38>
 800286e:	68eb      	ldr	r3, [r5, #12]
 8002870:	440b      	add	r3, r1
 8002872:	60eb      	str	r3, [r5, #12]
 8002874:	2400      	movs	r4, #0
 8002876:	e585      	b.n	8002384 <d_encoding+0x64>
 8002878:	787b      	ldrb	r3, [r7, #1]
 800287a:	2b53      	cmp	r3, #83	; 0x53
 800287c:	d027      	beq.n	80028ce <d_encoding+0x5ae>
 800287e:	2b5f      	cmp	r3, #95	; 0x5f
 8002880:	d023      	beq.n	80028ca <d_encoding+0x5aa>
 8002882:	2b24      	cmp	r3, #36	; 0x24
 8002884:	f47f ad7d 	bne.w	8002382 <d_encoding+0x62>
 8002888:	4618      	mov	r0, r3
 800288a:	6969      	ldr	r1, [r5, #20]
 800288c:	69ab      	ldr	r3, [r5, #24]
 800288e:	4299      	cmp	r1, r3
 8002890:	da1f      	bge.n	80028d2 <d_encoding+0x5b2>
 8002892:	692c      	ldr	r4, [r5, #16]
 8002894:	1c4f      	adds	r7, r1, #1
 8002896:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800289a:	eb14 0381 	adds.w	r3, r4, r1, lsl #2
 800289e:	616f      	str	r7, [r5, #20]
 80028a0:	d017      	beq.n	80028d2 <d_encoding+0x5b2>
 80028a2:	f804 9021 	strb.w	r9, [r4, r1, lsl #2]
 80028a6:	6058      	str	r0, [r3, #4]
 80028a8:	68ef      	ldr	r7, [r5, #12]
 80028aa:	3702      	adds	r7, #2
 80028ac:	3e02      	subs	r6, #2
 80028ae:	60ef      	str	r7, [r5, #12]
 80028b0:	e6db      	b.n	800266a <d_encoding+0x34a>
 80028b2:	461a      	mov	r2, r3
 80028b4:	e6e4      	b.n	8002680 <d_encoding+0x360>
 80028b6:	f7ff fd33 	bl	8002320 <d_encoding>
 80028ba:	2300      	movs	r3, #0
 80028bc:	4602      	mov	r2, r0
 80028be:	2148      	movs	r1, #72	; 0x48
 80028c0:	4628      	mov	r0, r5
 80028c2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80028c6:	f7fd bc83 	b.w	80001d0 <d_make_comp>
 80028ca:	202e      	movs	r0, #46	; 0x2e
 80028cc:	e7dd      	b.n	800288a <d_encoding+0x56a>
 80028ce:	202f      	movs	r0, #47	; 0x2f
 80028d0:	e7db      	b.n	800288a <d_encoding+0x56a>
 80028d2:	68eb      	ldr	r3, [r5, #12]
 80028d4:	3302      	adds	r3, #2
 80028d6:	60eb      	str	r3, [r5, #12]
 80028d8:	2400      	movs	r4, #0
 80028da:	e553      	b.n	8002384 <d_encoding+0x64>

080028dc <d_expr_primary>:
 80028dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028de:	68c2      	ldr	r2, [r0, #12]
 80028e0:	7813      	ldrb	r3, [r2, #0]
 80028e2:	2b4c      	cmp	r3, #76	; 0x4c
 80028e4:	d001      	beq.n	80028ea <d_expr_primary+0xe>
 80028e6:	2000      	movs	r0, #0
 80028e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028ea:	1c53      	adds	r3, r2, #1
 80028ec:	60c3      	str	r3, [r0, #12]
 80028ee:	7851      	ldrb	r1, [r2, #1]
 80028f0:	295f      	cmp	r1, #95	; 0x5f
 80028f2:	4605      	mov	r5, r0
 80028f4:	d03a      	beq.n	800296c <d_expr_primary+0x90>
 80028f6:	295a      	cmp	r1, #90	; 0x5a
 80028f8:	d03f      	beq.n	800297a <d_expr_primary+0x9e>
 80028fa:	f7fe fef9 	bl	80016f0 <d_type>
 80028fe:	2800      	cmp	r0, #0
 8002900:	d0f1      	beq.n	80028e6 <d_expr_primary+0xa>
 8002902:	7803      	ldrb	r3, [r0, #0]
 8002904:	2b27      	cmp	r3, #39	; 0x27
 8002906:	d046      	beq.n	8002996 <d_expr_primary+0xba>
 8002908:	68ee      	ldr	r6, [r5, #12]
 800290a:	7833      	ldrb	r3, [r6, #0]
 800290c:	2b6e      	cmp	r3, #110	; 0x6e
 800290e:	d04b      	beq.n	80029a8 <d_expr_primary+0xcc>
 8002910:	213c      	movs	r1, #60	; 0x3c
 8002912:	2b45      	cmp	r3, #69	; 0x45
 8002914:	d04e      	beq.n	80029b4 <d_expr_primary+0xd8>
 8002916:	2b00      	cmp	r3, #0
 8002918:	d0e5      	beq.n	80028e6 <d_expr_primary+0xa>
 800291a:	4633      	mov	r3, r6
 800291c:	e001      	b.n	8002922 <d_expr_primary+0x46>
 800291e:	2c00      	cmp	r4, #0
 8002920:	d0e1      	beq.n	80028e6 <d_expr_primary+0xa>
 8002922:	3301      	adds	r3, #1
 8002924:	60eb      	str	r3, [r5, #12]
 8002926:	781c      	ldrb	r4, [r3, #0]
 8002928:	2c45      	cmp	r4, #69	; 0x45
 800292a:	d1f8      	bne.n	800291e <d_expr_primary+0x42>
 800292c:	1b9c      	subs	r4, r3, r6
 800292e:	696b      	ldr	r3, [r5, #20]
 8002930:	69aa      	ldr	r2, [r5, #24]
 8002932:	4293      	cmp	r3, r2
 8002934:	da2d      	bge.n	8002992 <d_expr_primary+0xb6>
 8002936:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800293a:	692f      	ldr	r7, [r5, #16]
 800293c:	3301      	adds	r3, #1
 800293e:	0092      	lsls	r2, r2, #2
 8002940:	616b      	str	r3, [r5, #20]
 8002942:	18bb      	adds	r3, r7, r2
 8002944:	d025      	beq.n	8002992 <d_expr_primary+0xb6>
 8002946:	b326      	cbz	r6, 8002992 <d_expr_primary+0xb6>
 8002948:	b31c      	cbz	r4, 8002992 <d_expr_primary+0xb6>
 800294a:	f04f 0e00 	mov.w	lr, #0
 800294e:	f807 e002 	strb.w	lr, [r7, r2]
 8002952:	605e      	str	r6, [r3, #4]
 8002954:	609c      	str	r4, [r3, #8]
 8002956:	4602      	mov	r2, r0
 8002958:	4628      	mov	r0, r5
 800295a:	f7fd fc39 	bl	80001d0 <d_make_comp>
 800295e:	68eb      	ldr	r3, [r5, #12]
 8002960:	781a      	ldrb	r2, [r3, #0]
 8002962:	2a45      	cmp	r2, #69	; 0x45
 8002964:	d1bf      	bne.n	80028e6 <d_expr_primary+0xa>
 8002966:	3301      	adds	r3, #1
 8002968:	60eb      	str	r3, [r5, #12]
 800296a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800296c:	1c93      	adds	r3, r2, #2
 800296e:	60c3      	str	r3, [r0, #12]
 8002970:	7892      	ldrb	r2, [r2, #2]
 8002972:	2a5a      	cmp	r2, #90	; 0x5a
 8002974:	bf18      	it	ne
 8002976:	2000      	movne	r0, #0
 8002978:	d107      	bne.n	800298a <d_expr_primary+0xae>
 800297a:	3301      	adds	r3, #1
 800297c:	60eb      	str	r3, [r5, #12]
 800297e:	2100      	movs	r1, #0
 8002980:	4628      	mov	r0, r5
 8002982:	f7ff fccd 	bl	8002320 <d_encoding>
 8002986:	68eb      	ldr	r3, [r5, #12]
 8002988:	781a      	ldrb	r2, [r3, #0]
 800298a:	2a45      	cmp	r2, #69	; 0x45
 800298c:	d0eb      	beq.n	8002966 <d_expr_primary+0x8a>
 800298e:	2000      	movs	r0, #0
 8002990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002992:	2300      	movs	r3, #0
 8002994:	e7df      	b.n	8002956 <d_expr_primary+0x7a>
 8002996:	6843      	ldr	r3, [r0, #4]
 8002998:	7c1a      	ldrb	r2, [r3, #16]
 800299a:	2a00      	cmp	r2, #0
 800299c:	d0b4      	beq.n	8002908 <d_expr_primary+0x2c>
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80029a2:	1a9b      	subs	r3, r3, r2
 80029a4:	632b      	str	r3, [r5, #48]	; 0x30
 80029a6:	e7af      	b.n	8002908 <d_expr_primary+0x2c>
 80029a8:	1c72      	adds	r2, r6, #1
 80029aa:	60ea      	str	r2, [r5, #12]
 80029ac:	7873      	ldrb	r3, [r6, #1]
 80029ae:	213d      	movs	r1, #61	; 0x3d
 80029b0:	4616      	mov	r6, r2
 80029b2:	e7ae      	b.n	8002912 <d_expr_primary+0x36>
 80029b4:	2400      	movs	r4, #0
 80029b6:	e7ba      	b.n	800292e <d_expr_primary+0x52>

080029b8 <d_print_comp_inner>:
 80029b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029bc:	4604      	mov	r4, r0
 80029be:	b095      	sub	sp, #84	; 0x54
 80029c0:	2a00      	cmp	r2, #0
 80029c2:	f000 80db 	beq.w	8002b7c <d_print_comp_inner+0x1c4>
 80029c6:	f8d0 7118 	ldr.w	r7, [r0, #280]	; 0x118
 80029ca:	2f00      	cmp	r7, #0
 80029cc:	f040 80c2 	bne.w	8002b54 <d_print_comp_inner+0x19c>
 80029d0:	7813      	ldrb	r3, [r2, #0]
 80029d2:	4688      	mov	r8, r1
 80029d4:	4615      	mov	r5, r2
 80029d6:	2b4d      	cmp	r3, #77	; 0x4d
 80029d8:	f201 81e6 	bhi.w	8003da8 <d_print_comp_inner+0x13f0>
 80029dc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80029e0:	043c045a 	.word	0x043c045a
 80029e4:	03a4043c 	.word	0x03a4043c
 80029e8:	048904a5 	.word	0x048904a5
 80029ec:	038e04ea 	.word	0x038e04ea
 80029f0:	0330037c 	.word	0x0330037c
 80029f4:	030a0356 	.word	0x030a0356
 80029f8:	029802e4 	.word	0x029802e4
 80029fc:	027202be 	.word	0x027202be
 8002a00:	01f0024c 	.word	0x01f0024c
 8002a04:	01ca0226 	.word	0x01ca0226
 8002a08:	015801a4 	.word	0x015801a4
 8002a0c:	0132017e 	.word	0x0132017e
 8002a10:	00f2010b 	.word	0x00f2010b
 8002a14:	00f200f2 	.word	0x00f200f2
 8002a18:	00d400d4 	.word	0x00d400d4
 8002a1c:	00d400d4 	.word	0x00d400d4
 8002a20:	00d400d4 	.word	0x00d400d4
 8002a24:	06d500d4 	.word	0x06d500d4
 8002a28:	00d406d5 	.word	0x00d406d5
 8002a2c:	06a900d4 	.word	0x06a900d4
 8002a30:	069306fc 	.word	0x069306fc
 8002a34:	0701071d 	.word	0x0701071d
 8002a38:	07010788 	.word	0x07010788
 8002a3c:	057b057b 	.word	0x057b057b
 8002a40:	06060630 	.word	0x06060630
 8002a44:	09e405e0 	.word	0x09e405e0
 8002a48:	068e05ad 	.word	0x068e05ad
 8002a4c:	004e0654 	.word	0x004e0654
 8002a50:	094c0485 	.word	0x094c0485
 8002a54:	08df08df 	.word	0x08df08df
 8002a58:	08ae08ae 	.word	0x08ae08ae
 8002a5c:	05480888 	.word	0x05480888
 8002a60:	08e4053a 	.word	0x08e4053a
 8002a64:	09be0514 	.word	0x09be0514
 8002a68:	09980914 	.word	0x09980914
 8002a6c:	07cb09e4 	.word	0x07cb09e4
 8002a70:	07f10862 	.word	0x07f10862
 8002a74:	04130817 	.word	0x04130817
 8002a78:	055200d4 	.word	0x055200d4
 8002a7c:	68ab      	ldr	r3, [r5, #8]
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b38      	cmp	r3, #56	; 0x38
 8002a82:	d17b      	bne.n	8002b7c <d_print_comp_inner+0x1c4>
 8002a84:	686a      	ldr	r2, [r5, #4]
 8002a86:	6853      	ldr	r3, [r2, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	7859      	ldrb	r1, [r3, #1]
 8002a8c:	2963      	cmp	r1, #99	; 0x63
 8002a8e:	f002 814a 	beq.w	8004d26 <d_print_comp_inner+0x236e>
 8002a92:	f105 0308 	add.w	r3, r5, #8
 8002a96:	4641      	mov	r1, r8
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f003 fbbb 	bl	8006214 <d_maybe_print_fold_expression.isra.15>
 8002a9e:	4606      	mov	r6, r0
 8002aa0:	2800      	cmp	r0, #0
 8002aa2:	d157      	bne.n	8002b54 <d_print_comp_inner+0x19c>
 8002aa4:	686b      	ldr	r3, [r5, #4]
 8002aa6:	781a      	ldrb	r2, [r3, #0]
 8002aa8:	2a31      	cmp	r2, #49	; 0x31
 8002aaa:	f002 836b 	beq.w	8005184 <d_print_comp_inner+0x27cc>
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	49c7      	ldr	r1, [pc, #796]	; (8002dd0 <d_print_comp_inner+0x418>)
 8002ab2:	6818      	ldr	r0, [r3, #0]
 8002ab4:	f003 ff34 	bl	8006920 <strcmp>
 8002ab8:	68ab      	ldr	r3, [r5, #8]
 8002aba:	b920      	cbnz	r0, 8002ac6 <d_print_comp_inner+0x10e>
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	7811      	ldrb	r1, [r2, #0]
 8002ac0:	2903      	cmp	r1, #3
 8002ac2:	f002 83a5 	beq.w	8005210 <d_print_comp_inner+0x2858>
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4641      	mov	r1, r8
 8002aca:	4620      	mov	r0, r4
 8002acc:	f003 fb3e 	bl	800614c <d_print_subexpr>
 8002ad0:	686f      	ldr	r7, [r5, #4]
 8002ad2:	49c0      	ldr	r1, [pc, #768]	; (8002dd4 <d_print_comp_inner+0x41c>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8d3 9000 	ldr.w	r9, [r3]
 8002ada:	4648      	mov	r0, r9
 8002adc:	f003 ff20 	bl	8006920 <strcmp>
 8002ae0:	4606      	mov	r6, r0
 8002ae2:	2800      	cmp	r0, #0
 8002ae4:	f042 826f 	bne.w	8004fc6 <d_print_comp_inner+0x260e>
 8002ae8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002aec:	29ff      	cmp	r1, #255	; 0xff
 8002aee:	f002 844a 	beq.w	8005386 <d_print_comp_inner+0x29ce>
 8002af2:	1c4a      	adds	r2, r1, #1
 8002af4:	235b      	movs	r3, #91	; 0x5b
 8002af6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002afa:	5463      	strb	r3, [r4, r1]
 8002afc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002b00:	68ab      	ldr	r3, [r5, #8]
 8002b02:	4641      	mov	r1, r8
 8002b04:	689a      	ldr	r2, [r3, #8]
 8002b06:	4620      	mov	r0, r4
 8002b08:	f002 fcfa 	bl	8005500 <d_print_comp>
 8002b0c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002b10:	29ff      	cmp	r1, #255	; 0xff
 8002b12:	f002 8425 	beq.w	8005360 <d_print_comp_inner+0x29a8>
 8002b16:	235d      	movs	r3, #93	; 0x5d
 8002b18:	1c4a      	adds	r2, r1, #1
 8002b1a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002b1e:	5463      	strb	r3, [r4, r1]
 8002b20:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002b24:	686b      	ldr	r3, [r5, #4]
 8002b26:	781a      	ldrb	r2, [r3, #0]
 8002b28:	2a31      	cmp	r2, #49	; 0x31
 8002b2a:	d113      	bne.n	8002b54 <d_print_comp_inner+0x19c>
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	2a01      	cmp	r2, #1
 8002b32:	d10f      	bne.n	8002b54 <d_print_comp_inner+0x19c>
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b3e      	cmp	r3, #62	; 0x3e
 8002b3a:	d10b      	bne.n	8002b54 <d_print_comp_inner+0x19c>
 8002b3c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8002b40:	29ff      	cmp	r1, #255	; 0xff
 8002b42:	f002 8482 	beq.w	800544a <d_print_comp_inner+0x2a92>
 8002b46:	2329      	movs	r3, #41	; 0x29
 8002b48:	1c4a      	adds	r2, r1, #1
 8002b4a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8002b4e:	5463      	strb	r3, [r4, r1]
 8002b50:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8002b54:	b015      	add	sp, #84	; 0x54
 8002b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b5a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f2c1 84a4 	blt.w	80044ac <d_print_comp_inner+0x1af4>
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f002 8432 	beq.w	80053ce <d_print_comp_inner+0x2a16>
 8002b6a:	6880      	ldr	r0, [r0, #8]
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b110      	cbz	r0, 8002b76 <d_print_comp_inner+0x1be>
 8002b70:	7802      	ldrb	r2, [r0, #0]
 8002b72:	2a2f      	cmp	r2, #47	; 0x2f
 8002b74:	d0f6      	beq.n	8002b64 <d_print_comp_inner+0x1ac>
 8002b76:	b10f      	cbz	r7, 8002b7c <d_print_comp_inner+0x1c4>
 8002b78:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8002b82:	b015      	add	sp, #84	; 0x54
 8002b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b88:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 8002b8c:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8002b90:	9505      	str	r5, [sp, #20]
 8002b92:	ab14      	add	r3, sp, #80	; 0x50
 8002b94:	2100      	movs	r1, #0
 8002b96:	f843 cd40 	str.w	ip, [r3, #-64]!
 8002b9a:	9106      	str	r1, [sp, #24]
 8002b9c:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002ba0:	9207      	str	r2, [sp, #28]
 8002ba2:	686a      	ldr	r2, [r5, #4]
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	4620      	mov	r0, r4
 8002ba8:	f002 fcaa 	bl	8005500 <d_print_comp>
 8002bac:	9b06      	ldr	r3, [sp, #24]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f001 8389 	beq.w	80042c6 <d_print_comp_inner+0x190e>
 8002bb4:	9b04      	ldr	r3, [sp, #16]
 8002bb6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8002bba:	2f00      	cmp	r7, #0
 8002bbc:	d0ca      	beq.n	8002b54 <d_print_comp_inner+0x19c>
 8002bbe:	f8c4 6110 	str.w	r6, [r4, #272]	; 0x110
 8002bc2:	e7c7      	b.n	8002b54 <d_print_comp_inner+0x19c>
 8002bc4:	f8d0 c114 	ldr.w	ip, [r0, #276]	; 0x114
 8002bc8:	f1bc 0f00 	cmp.w	ip, #0
 8002bcc:	d0de      	beq.n	8002b8c <d_print_comp_inner+0x1d4>
 8002bce:	4662      	mov	r2, ip
 8002bd0:	e005      	b.n	8002bde <d_print_comp_inner+0x226>
 8002bd2:	428b      	cmp	r3, r1
 8002bd4:	f001 86b8 	beq.w	8004948 <d_print_comp_inner+0x1f90>
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	2a00      	cmp	r2, #0
 8002bdc:	d0d6      	beq.n	8002b8c <d_print_comp_inner+0x1d4>
 8002bde:	6890      	ldr	r0, [r2, #8]
 8002be0:	2800      	cmp	r0, #0
 8002be2:	d1f9      	bne.n	8002bd8 <d_print_comp_inner+0x220>
 8002be4:	6851      	ldr	r1, [r2, #4]
 8002be6:	7809      	ldrb	r1, [r1, #0]
 8002be8:	f1a1 0e19 	sub.w	lr, r1, #25
 8002bec:	f1be 0f02 	cmp.w	lr, #2
 8002bf0:	d9ef      	bls.n	8002bd2 <d_print_comp_inner+0x21a>
 8002bf2:	4607      	mov	r7, r0
 8002bf4:	e7ca      	b.n	8002b8c <d_print_comp_inner+0x1d4>
 8002bf6:	68af      	ldr	r7, [r5, #8]
 8002bf8:	686d      	ldr	r5, [r5, #4]
 8002bfa:	2f00      	cmp	r7, #0
 8002bfc:	d0aa      	beq.n	8002b54 <d_print_comp_inner+0x19c>
 8002bfe:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002c02:	442f      	add	r7, r5
 8002c04:	f04f 0800 	mov.w	r8, #0
 8002c08:	e008      	b.n	8002c1c <d_print_comp_inner+0x264>
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	3101      	adds	r1, #1
 8002c0e:	42bd      	cmp	r5, r7
 8002c10:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002c14:	54e6      	strb	r6, [r4, r3]
 8002c16:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8002c1a:	d09b      	beq.n	8002b54 <d_print_comp_inner+0x19c>
 8002c1c:	29ff      	cmp	r1, #255	; 0xff
 8002c1e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8002c22:	d1f2      	bne.n	8002c0a <d_print_comp_inner+0x252>
 8002c24:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002c28:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8002c2c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002c30:	4620      	mov	r0, r4
 8002c32:	4798      	blx	r3
 8002c34:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002c38:	3301      	adds	r3, #1
 8002c3a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002c3e:	2101      	movs	r1, #1
 8002c40:	2300      	movs	r3, #0
 8002c42:	e7e4      	b.n	8002c0e <d_print_comp_inner+0x256>
 8002c44:	4e64      	ldr	r6, [pc, #400]	; (8002dd8 <d_print_comp_inner+0x420>)
 8002c46:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002c4a:	f106 0a11 	add.w	sl, r6, #17
 8002c4e:	f04f 0900 	mov.w	r9, #0
 8002c52:	e009      	b.n	8002c68 <d_print_comp_inner+0x2b0>
 8002c54:	460b      	mov	r3, r1
 8002c56:	3101      	adds	r1, #1
 8002c58:	4556      	cmp	r6, sl
 8002c5a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002c5e:	54e7      	strb	r7, [r4, r3]
 8002c60:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002c64:	f001 8296 	beq.w	8004194 <d_print_comp_inner+0x17dc>
 8002c68:	29ff      	cmp	r1, #255	; 0xff
 8002c6a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002c6e:	d1f1      	bne.n	8002c54 <d_print_comp_inner+0x29c>
 8002c70:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002c74:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002c78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002c7c:	4620      	mov	r0, r4
 8002c7e:	4798      	blx	r3
 8002c80:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002c84:	3301      	adds	r3, #1
 8002c86:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e7e3      	b.n	8002c58 <d_print_comp_inner+0x2a0>
 8002c90:	4e52      	ldr	r6, [pc, #328]	; (8002ddc <d_print_comp_inner+0x424>)
 8002c92:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002c96:	f106 0a19 	add.w	sl, r6, #25
 8002c9a:	f04f 0900 	mov.w	r9, #0
 8002c9e:	e009      	b.n	8002cb4 <d_print_comp_inner+0x2fc>
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	3101      	adds	r1, #1
 8002ca4:	4556      	cmp	r6, sl
 8002ca6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002caa:	54e7      	strb	r7, [r4, r3]
 8002cac:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002cb0:	f001 82a8 	beq.w	8004204 <d_print_comp_inner+0x184c>
 8002cb4:	29ff      	cmp	r1, #255	; 0xff
 8002cb6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002cba:	d1f1      	bne.n	8002ca0 <d_print_comp_inner+0x2e8>
 8002cbc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002cc0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002cc4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002cc8:	4620      	mov	r0, r4
 8002cca:	4798      	blx	r3
 8002ccc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e7e3      	b.n	8002ca4 <d_print_comp_inner+0x2ec>
 8002cdc:	4e40      	ldr	r6, [pc, #256]	; (8002de0 <d_print_comp_inner+0x428>)
 8002cde:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002ce2:	f106 0a15 	add.w	sl, r6, #21
 8002ce6:	f04f 0900 	mov.w	r9, #0
 8002cea:	e009      	b.n	8002d00 <d_print_comp_inner+0x348>
 8002cec:	460b      	mov	r3, r1
 8002cee:	3101      	adds	r1, #1
 8002cf0:	4556      	cmp	r6, sl
 8002cf2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002cf6:	54e7      	strb	r7, [r4, r3]
 8002cf8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002cfc:	f001 8251 	beq.w	80041a2 <d_print_comp_inner+0x17ea>
 8002d00:	29ff      	cmp	r1, #255	; 0xff
 8002d02:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002d06:	d1f1      	bne.n	8002cec <d_print_comp_inner+0x334>
 8002d08:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d0c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002d10:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d14:	4620      	mov	r0, r4
 8002d16:	4798      	blx	r3
 8002d18:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d22:	2101      	movs	r1, #1
 8002d24:	2300      	movs	r3, #0
 8002d26:	e7e3      	b.n	8002cf0 <d_print_comp_inner+0x338>
 8002d28:	4e2e      	ldr	r6, [pc, #184]	; (8002de4 <d_print_comp_inner+0x42c>)
 8002d2a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002d2e:	f106 0a16 	add.w	sl, r6, #22
 8002d32:	f04f 0900 	mov.w	r9, #0
 8002d36:	e009      	b.n	8002d4c <d_print_comp_inner+0x394>
 8002d38:	460b      	mov	r3, r1
 8002d3a:	3101      	adds	r1, #1
 8002d3c:	4556      	cmp	r6, sl
 8002d3e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002d42:	54e7      	strb	r7, [r4, r3]
 8002d44:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002d48:	f001 8263 	beq.w	8004212 <d_print_comp_inner+0x185a>
 8002d4c:	29ff      	cmp	r1, #255	; 0xff
 8002d4e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002d52:	d1f1      	bne.n	8002d38 <d_print_comp_inner+0x380>
 8002d54:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002d58:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002d5c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002d60:	4620      	mov	r0, r4
 8002d62:	4798      	blx	r3
 8002d64:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002d68:	3301      	adds	r3, #1
 8002d6a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002d6e:	2101      	movs	r1, #1
 8002d70:	2300      	movs	r3, #0
 8002d72:	e7e3      	b.n	8002d3c <d_print_comp_inner+0x384>
 8002d74:	4e1c      	ldr	r6, [pc, #112]	; (8002de8 <d_print_comp_inner+0x430>)
 8002d76:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002d7a:	f106 0a13 	add.w	sl, r6, #19
 8002d7e:	f04f 0900 	mov.w	r9, #0
 8002d82:	e009      	b.n	8002d98 <d_print_comp_inner+0x3e0>
 8002d84:	460b      	mov	r3, r1
 8002d86:	3101      	adds	r1, #1
 8002d88:	45b2      	cmp	sl, r6
 8002d8a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002d8e:	54e7      	strb	r7, [r4, r3]
 8002d90:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002d94:	f001 8077 	beq.w	8003e86 <d_print_comp_inner+0x14ce>
 8002d98:	29ff      	cmp	r1, #255	; 0xff
 8002d9a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002d9e:	d1f1      	bne.n	8002d84 <d_print_comp_inner+0x3cc>
 8002da0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002da4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002da8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002dac:	4620      	mov	r0, r4
 8002dae:	4798      	blx	r3
 8002db0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002db4:	3301      	adds	r3, #1
 8002db6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002dba:	2101      	movs	r1, #1
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	e7e3      	b.n	8002d88 <d_print_comp_inner+0x3d0>
 8002dc0:	4e0a      	ldr	r6, [pc, #40]	; (8002dec <d_print_comp_inner+0x434>)
 8002dc2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002dc6:	f106 0a1a 	add.w	sl, r6, #26
 8002dca:	f04f 0900 	mov.w	r9, #0
 8002dce:	e019      	b.n	8002e04 <d_print_comp_inner+0x44c>
 8002dd0:	080184f8 	.word	0x080184f8
 8002dd4:	080186f4 	.word	0x080186f4
 8002dd8:	08018683 	.word	0x08018683
 8002ddc:	0801864f 	.word	0x0801864f
 8002de0:	0801866b 	.word	0x0801866b
 8002de4:	08018637 	.word	0x08018637
 8002de8:	08018623 	.word	0x08018623
 8002dec:	080185f7 	.word	0x080185f7
 8002df0:	460b      	mov	r3, r1
 8002df2:	3101      	adds	r1, #1
 8002df4:	4556      	cmp	r6, sl
 8002df6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002dfa:	54e7      	strb	r7, [r4, r3]
 8002dfc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002e00:	f001 804f 	beq.w	8003ea2 <d_print_comp_inner+0x14ea>
 8002e04:	29ff      	cmp	r1, #255	; 0xff
 8002e06:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002e0a:	d1f1      	bne.n	8002df0 <d_print_comp_inner+0x438>
 8002e0c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e10:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002e14:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e18:	4620      	mov	r0, r4
 8002e1a:	4798      	blx	r3
 8002e1c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002e20:	3301      	adds	r3, #1
 8002e22:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002e26:	2101      	movs	r1, #1
 8002e28:	2300      	movs	r3, #0
 8002e2a:	e7e3      	b.n	8002df4 <d_print_comp_inner+0x43c>
 8002e2c:	4eb5      	ldr	r6, [pc, #724]	; (8003104 <d_print_comp_inner+0x74c>)
 8002e2e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002e32:	f106 0a0f 	add.w	sl, r6, #15
 8002e36:	f04f 0900 	mov.w	r9, #0
 8002e3a:	e009      	b.n	8002e50 <d_print_comp_inner+0x498>
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	3101      	adds	r1, #1
 8002e40:	4556      	cmp	r6, sl
 8002e42:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002e46:	54e7      	strb	r7, [r4, r3]
 8002e48:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002e4c:	f001 8022 	beq.w	8003e94 <d_print_comp_inner+0x14dc>
 8002e50:	29ff      	cmp	r1, #255	; 0xff
 8002e52:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002e56:	d1f1      	bne.n	8002e3c <d_print_comp_inner+0x484>
 8002e58:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002e5c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002e60:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002e64:	4620      	mov	r0, r4
 8002e66:	4798      	blx	r3
 8002e68:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002e72:	2101      	movs	r1, #1
 8002e74:	2300      	movs	r3, #0
 8002e76:	e7e3      	b.n	8002e40 <d_print_comp_inner+0x488>
 8002e78:	4ea3      	ldr	r6, [pc, #652]	; (8003108 <d_print_comp_inner+0x750>)
 8002e7a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002e7e:	f106 0a11 	add.w	sl, r6, #17
 8002e82:	f04f 0900 	mov.w	r9, #0
 8002e86:	e009      	b.n	8002e9c <d_print_comp_inner+0x4e4>
 8002e88:	460b      	mov	r3, r1
 8002e8a:	3101      	adds	r1, #1
 8002e8c:	4556      	cmp	r6, sl
 8002e8e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002e92:	54e7      	strb	r7, [r4, r3]
 8002e94:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002e98:	f001 800a 	beq.w	8003eb0 <d_print_comp_inner+0x14f8>
 8002e9c:	29ff      	cmp	r1, #255	; 0xff
 8002e9e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002ea2:	d1f1      	bne.n	8002e88 <d_print_comp_inner+0x4d0>
 8002ea4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ea8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002eac:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	4798      	blx	r3
 8002eb4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002eb8:	3301      	adds	r3, #1
 8002eba:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002ebe:	2101      	movs	r1, #1
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e7e3      	b.n	8002e8c <d_print_comp_inner+0x4d4>
 8002ec4:	4e91      	ldr	r6, [pc, #580]	; (800310c <d_print_comp_inner+0x754>)
 8002ec6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002eca:	f106 0a15 	add.w	sl, r6, #21
 8002ece:	f04f 0900 	mov.w	r9, #0
 8002ed2:	e009      	b.n	8002ee8 <d_print_comp_inner+0x530>
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	3101      	adds	r1, #1
 8002ed8:	4556      	cmp	r6, sl
 8002eda:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002ede:	54e7      	strb	r7, [r4, r3]
 8002ee0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002ee4:	f000 87b3 	beq.w	8003e4e <d_print_comp_inner+0x1496>
 8002ee8:	29ff      	cmp	r1, #255	; 0xff
 8002eea:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002eee:	d1f1      	bne.n	8002ed4 <d_print_comp_inner+0x51c>
 8002ef0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002ef4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002ef8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002efc:	4620      	mov	r0, r4
 8002efe:	4798      	blx	r3
 8002f00:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f04:	3301      	adds	r3, #1
 8002f06:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f0a:	2101      	movs	r1, #1
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e7e3      	b.n	8002ed8 <d_print_comp_inner+0x520>
 8002f10:	4e7f      	ldr	r6, [pc, #508]	; (8003110 <d_print_comp_inner+0x758>)
 8002f12:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002f16:	f106 0a12 	add.w	sl, r6, #18
 8002f1a:	f04f 0900 	mov.w	r9, #0
 8002f1e:	e009      	b.n	8002f34 <d_print_comp_inner+0x57c>
 8002f20:	460b      	mov	r3, r1
 8002f22:	3101      	adds	r1, #1
 8002f24:	45b2      	cmp	sl, r6
 8002f26:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002f2a:	54e7      	strb	r7, [r4, r3]
 8002f2c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002f30:	f000 879b 	beq.w	8003e6a <d_print_comp_inner+0x14b2>
 8002f34:	29ff      	cmp	r1, #255	; 0xff
 8002f36:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002f3a:	d1f1      	bne.n	8002f20 <d_print_comp_inner+0x568>
 8002f3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f40:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f44:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f48:	4620      	mov	r0, r4
 8002f4a:	4798      	blx	r3
 8002f4c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f50:	3301      	adds	r3, #1
 8002f52:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002f56:	2101      	movs	r1, #1
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e7e3      	b.n	8002f24 <d_print_comp_inner+0x56c>
 8002f5c:	4e6d      	ldr	r6, [pc, #436]	; (8003114 <d_print_comp_inner+0x75c>)
 8002f5e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002f62:	f106 0a10 	add.w	sl, r6, #16
 8002f66:	f04f 0900 	mov.w	r9, #0
 8002f6a:	e009      	b.n	8002f80 <d_print_comp_inner+0x5c8>
 8002f6c:	460b      	mov	r3, r1
 8002f6e:	3101      	adds	r1, #1
 8002f70:	4556      	cmp	r6, sl
 8002f72:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002f76:	54e7      	strb	r7, [r4, r3]
 8002f78:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002f7c:	f000 876e 	beq.w	8003e5c <d_print_comp_inner+0x14a4>
 8002f80:	29ff      	cmp	r1, #255	; 0xff
 8002f82:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8002f86:	d1f1      	bne.n	8002f6c <d_print_comp_inner+0x5b4>
 8002f88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002f8c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002f90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002f94:	4620      	mov	r0, r4
 8002f96:	4798      	blx	r3
 8002f98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e7e3      	b.n	8002f70 <d_print_comp_inner+0x5b8>
 8002fa8:	4e5b      	ldr	r6, [pc, #364]	; (8003118 <d_print_comp_inner+0x760>)
 8002faa:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002fae:	f106 0a0d 	add.w	sl, r6, #13
 8002fb2:	f04f 0900 	mov.w	r9, #0
 8002fb6:	e009      	b.n	8002fcc <d_print_comp_inner+0x614>
 8002fb8:	460b      	mov	r3, r1
 8002fba:	3101      	adds	r1, #1
 8002fbc:	4556      	cmp	r6, sl
 8002fbe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8002fc2:	54e7      	strb	r7, [r4, r3]
 8002fc4:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8002fc8:	f000 8756 	beq.w	8003e78 <d_print_comp_inner+0x14c0>
 8002fcc:	29ff      	cmp	r1, #255	; 0xff
 8002fce:	f816 7b01 	ldrb.w	r7, [r6], #1
 8002fd2:	d1f1      	bne.n	8002fb8 <d_print_comp_inner+0x600>
 8002fd4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8002fd8:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8002fdc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8002fe0:	4620      	mov	r0, r4
 8002fe2:	4798      	blx	r3
 8002fe4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8002fe8:	3301      	adds	r3, #1
 8002fea:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8002fee:	2101      	movs	r1, #1
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e7e3      	b.n	8002fbc <d_print_comp_inner+0x604>
 8002ff4:	4e49      	ldr	r6, [pc, #292]	; (800311c <d_print_comp_inner+0x764>)
 8002ff6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8002ffa:	f106 0a18 	add.w	sl, r6, #24
 8002ffe:	f04f 0900 	mov.w	r9, #0
 8003002:	e009      	b.n	8003018 <d_print_comp_inner+0x660>
 8003004:	460b      	mov	r3, r1
 8003006:	3101      	adds	r1, #1
 8003008:	45b2      	cmp	sl, r6
 800300a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800300e:	54e7      	strb	r7, [r4, r3]
 8003010:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003014:	f000 86e3 	beq.w	8003dde <d_print_comp_inner+0x1426>
 8003018:	29ff      	cmp	r1, #255	; 0xff
 800301a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800301e:	d1f1      	bne.n	8003004 <d_print_comp_inner+0x64c>
 8003020:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003024:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003028:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800302c:	4620      	mov	r0, r4
 800302e:	4798      	blx	r3
 8003030:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003034:	3301      	adds	r3, #1
 8003036:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800303a:	2101      	movs	r1, #1
 800303c:	2300      	movs	r3, #0
 800303e:	e7e3      	b.n	8003008 <d_print_comp_inner+0x650>
 8003040:	4e37      	ldr	r6, [pc, #220]	; (8003120 <d_print_comp_inner+0x768>)
 8003042:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003046:	f106 0a0b 	add.w	sl, r6, #11
 800304a:	f04f 0900 	mov.w	r9, #0
 800304e:	e009      	b.n	8003064 <d_print_comp_inner+0x6ac>
 8003050:	460b      	mov	r3, r1
 8003052:	3101      	adds	r1, #1
 8003054:	45b2      	cmp	sl, r6
 8003056:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800305a:	54e7      	strb	r7, [r4, r3]
 800305c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003060:	f000 87ca 	beq.w	8003ff8 <d_print_comp_inner+0x1640>
 8003064:	29ff      	cmp	r1, #255	; 0xff
 8003066:	f816 7b01 	ldrb.w	r7, [r6], #1
 800306a:	d1f1      	bne.n	8003050 <d_print_comp_inner+0x698>
 800306c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003070:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003074:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003078:	4620      	mov	r0, r4
 800307a:	4798      	blx	r3
 800307c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003080:	3301      	adds	r3, #1
 8003082:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003086:	2101      	movs	r1, #1
 8003088:	2300      	movs	r3, #0
 800308a:	e7e3      	b.n	8003054 <d_print_comp_inner+0x69c>
 800308c:	4e25      	ldr	r6, [pc, #148]	; (8003124 <d_print_comp_inner+0x76c>)
 800308e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003092:	f106 0a08 	add.w	sl, r6, #8
 8003096:	f04f 0900 	mov.w	r9, #0
 800309a:	e009      	b.n	80030b0 <d_print_comp_inner+0x6f8>
 800309c:	460b      	mov	r3, r1
 800309e:	3101      	adds	r1, #1
 80030a0:	45b2      	cmp	sl, r6
 80030a2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80030a6:	54e7      	strb	r7, [r4, r3]
 80030a8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80030ac:	f000 86c8 	beq.w	8003e40 <d_print_comp_inner+0x1488>
 80030b0:	29ff      	cmp	r1, #255	; 0xff
 80030b2:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80030b6:	d1f1      	bne.n	800309c <d_print_comp_inner+0x6e4>
 80030b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80030bc:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80030c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80030c4:	4620      	mov	r0, r4
 80030c6:	4798      	blx	r3
 80030c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80030cc:	3301      	adds	r3, #1
 80030ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80030d2:	2101      	movs	r1, #1
 80030d4:	2300      	movs	r3, #0
 80030d6:	e7e3      	b.n	80030a0 <d_print_comp_inner+0x6e8>
 80030d8:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80030dc:	29ff      	cmp	r1, #255	; 0xff
 80030de:	f001 847c 	beq.w	80049da <d_print_comp_inner+0x2022>
 80030e2:	1c4a      	adds	r2, r1, #1
 80030e4:	237e      	movs	r3, #126	; 0x7e
 80030e6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80030ea:	5463      	strb	r3, [r4, r1]
 80030ec:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80030f0:	4641      	mov	r1, r8
 80030f2:	68aa      	ldr	r2, [r5, #8]
 80030f4:	4620      	mov	r0, r4
 80030f6:	f002 fa03 	bl	8005500 <d_print_comp>
 80030fa:	e52b      	b.n	8002b54 <d_print_comp_inner+0x19c>
 80030fc:	68aa      	ldr	r2, [r5, #8]
 80030fe:	f002 f9ff 	bl	8005500 <d_print_comp>
 8003102:	e527      	b.n	8002b54 <d_print_comp_inner+0x19c>
 8003104:	08018613 	.word	0x08018613
 8003108:	080185e3 	.word	0x080185e3
 800310c:	080185df 	.word	0x080185df
 8003110:	080185b7 	.word	0x080185b7
 8003114:	080185cb 	.word	0x080185cb
 8003118:	080185a8 	.word	0x080185a8
 800311c:	08018583 	.word	0x08018583
 8003120:	0801856c 	.word	0x0801856c
 8003124:	08018577 	.word	0x08018577
 8003128:	2200      	movs	r2, #0
 800312a:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 800312e:	f8c0 2114 	str.w	r2, [r0, #276]	; 0x114
 8003132:	686e      	ldr	r6, [r5, #4]
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	2e00      	cmp	r6, #0
 8003138:	f000 864c 	beq.w	8003dd4 <d_print_comp_inner+0x141c>
 800313c:	f10d 0910 	add.w	r9, sp, #16
 8003140:	f8d0 c110 	ldr.w	ip, [r0, #272]	; 0x110
 8003144:	4617      	mov	r7, r2
 8003146:	4696      	mov	lr, r2
 8003148:	464b      	mov	r3, r9
 800314a:	7831      	ldrb	r1, [r6, #0]
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	f1a1 021c 	sub.w	r2, r1, #28
 8003152:	2a04      	cmp	r2, #4
 8003154:	605e      	str	r6, [r3, #4]
 8003156:	f8c3 e008 	str.w	lr, [r3, #8]
 800315a:	f8c3 c00c 	str.w	ip, [r3, #12]
 800315e:	f107 0701 	add.w	r7, r7, #1
 8003162:	4618      	mov	r0, r3
 8003164:	461a      	mov	r2, r3
 8003166:	f240 862a 	bls.w	8003dbe <d_print_comp_inner+0x1406>
 800316a:	294c      	cmp	r1, #76	; 0x4c
 800316c:	f000 8627 	beq.w	8003dbe <d_print_comp_inner+0x1406>
 8003170:	2904      	cmp	r1, #4
 8003172:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003176:	f001 87bb 	beq.w	80050f0 <d_print_comp_inner+0x2738>
 800317a:	2902      	cmp	r1, #2
 800317c:	d11a      	bne.n	80031b4 <d_print_comp_inner+0x7fc>
 800317e:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8003182:	f89b 3000 	ldrb.w	r3, [fp]
 8003186:	2b46      	cmp	r3, #70	; 0x46
 8003188:	f002 8035 	beq.w	80051f6 <d_print_comp_inner+0x283e>
 800318c:	462b      	mov	r3, r5
 800318e:	eb09 1e07 	add.w	lr, r9, r7, lsl #4
 8003192:	9601      	str	r6, [sp, #4]
 8003194:	465d      	mov	r5, fp
 8003196:	4676      	mov	r6, lr
 8003198:	46a2      	mov	sl, r4
 800319a:	469b      	mov	fp, r3
 800319c:	782b      	ldrb	r3, [r5, #0]
 800319e:	f1a3 021c 	sub.w	r2, r3, #28
 80031a2:	2a04      	cmp	r2, #4
 80031a4:	f241 805d 	bls.w	8004262 <d_print_comp_inner+0x18aa>
 80031a8:	2b4c      	cmp	r3, #76	; 0x4c
 80031aa:	f001 805a 	beq.w	8004262 <d_print_comp_inner+0x18aa>
 80031ae:	9e01      	ldr	r6, [sp, #4]
 80031b0:	4654      	mov	r4, sl
 80031b2:	465d      	mov	r5, fp
 80031b4:	68aa      	ldr	r2, [r5, #8]
 80031b6:	4641      	mov	r1, r8
 80031b8:	4620      	mov	r0, r4
 80031ba:	f002 f9a1 	bl	8005500 <d_print_comp>
 80031be:	7833      	ldrb	r3, [r6, #0]
 80031c0:	2b04      	cmp	r3, #4
 80031c2:	f002 8020 	beq.w	8005206 <d_print_comp_inner+0x284e>
 80031c6:	eb09 1907 	add.w	r9, r9, r7, lsl #4
 80031ca:	2620      	movs	r6, #32
 80031cc:	f859 5c08 	ldr.w	r5, [r9, #-8]
 80031d0:	3f01      	subs	r7, #1
 80031d2:	b985      	cbnz	r5, 80031f6 <d_print_comp_inner+0x83e>
 80031d4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80031d8:	29ff      	cmp	r1, #255	; 0xff
 80031da:	f002 8043 	beq.w	8005264 <d_print_comp_inner+0x28ac>
 80031de:	1c4b      	adds	r3, r1, #1
 80031e0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80031e4:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 80031e8:	5466      	strb	r6, [r4, r1]
 80031ea:	4620      	mov	r0, r4
 80031ec:	4641      	mov	r1, r8
 80031ee:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80031f2:	f002 f995 	bl	8005520 <d_print_mod>
 80031f6:	f1a9 0910 	sub.w	r9, r9, #16
 80031fa:	2f00      	cmp	r7, #0
 80031fc:	d1e6      	bne.n	80031cc <d_print_comp_inner+0x814>
 80031fe:	9b00      	ldr	r3, [sp, #0]
 8003200:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003204:	e4a6      	b.n	8002b54 <d_print_comp_inner+0x19c>
 8003206:	4ed1      	ldr	r6, [pc, #836]	; (800354c <d_print_comp_inner+0xb94>)
 8003208:	686a      	ldr	r2, [r5, #4]
 800320a:	f002 f979 	bl	8005500 <d_print_comp>
 800320e:	f106 0a05 	add.w	sl, r6, #5
 8003212:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003216:	f04f 0900 	mov.w	r9, #0
 800321a:	e009      	b.n	8003230 <d_print_comp_inner+0x878>
 800321c:	460b      	mov	r3, r1
 800321e:	3101      	adds	r1, #1
 8003220:	45b2      	cmp	sl, r6
 8003222:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003226:	54e7      	strb	r7, [r4, r3]
 8003228:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 800322c:	f000 86d1 	beq.w	8003fd2 <d_print_comp_inner+0x161a>
 8003230:	29ff      	cmp	r1, #255	; 0xff
 8003232:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003236:	d1f1      	bne.n	800321c <d_print_comp_inner+0x864>
 8003238:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800323c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003240:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003244:	4620      	mov	r0, r4
 8003246:	4798      	blx	r3
 8003248:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800324c:	3301      	adds	r3, #1
 800324e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003252:	2101      	movs	r1, #1
 8003254:	2300      	movs	r3, #0
 8003256:	e7e3      	b.n	8003220 <d_print_comp_inner+0x868>
 8003258:	686a      	ldr	r2, [r5, #4]
 800325a:	f002 f951 	bl	8005500 <d_print_comp>
 800325e:	f018 0904 	ands.w	r9, r8, #4
 8003262:	f001 82aa 	beq.w	80047ba <d_print_comp_inner+0x1e02>
 8003266:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800326a:	29ff      	cmp	r1, #255	; 0xff
 800326c:	f001 859a 	beq.w	8004da4 <d_print_comp_inner+0x23ec>
 8003270:	1c4a      	adds	r2, r1, #1
 8003272:	232e      	movs	r3, #46	; 0x2e
 8003274:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003278:	5463      	strb	r3, [r4, r1]
 800327a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800327e:	68ad      	ldr	r5, [r5, #8]
 8003280:	782b      	ldrb	r3, [r5, #0]
 8003282:	2b46      	cmp	r3, #70	; 0x46
 8003284:	f001 83cc 	beq.w	8004a20 <d_print_comp_inner+0x2068>
 8003288:	462a      	mov	r2, r5
 800328a:	4641      	mov	r1, r8
 800328c:	4620      	mov	r0, r4
 800328e:	f002 f937 	bl	8005500 <d_print_comp>
 8003292:	e45f      	b.n	8002b54 <d_print_comp_inner+0x19c>
 8003294:	f011 0804 	ands.w	r8, r1, #4
 8003298:	f041 808b 	bne.w	80043b2 <d_print_comp_inner+0x19fa>
 800329c:	68af      	ldr	r7, [r5, #8]
 800329e:	686d      	ldr	r5, [r5, #4]
 80032a0:	2f00      	cmp	r7, #0
 80032a2:	f43f ac57 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 80032a6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80032aa:	442f      	add	r7, r5
 80032ac:	e009      	b.n	80032c2 <d_print_comp_inner+0x90a>
 80032ae:	460b      	mov	r3, r1
 80032b0:	3101      	adds	r1, #1
 80032b2:	42bd      	cmp	r5, r7
 80032b4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80032b8:	54e6      	strb	r6, [r4, r3]
 80032ba:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80032be:	f43f ac49 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 80032c2:	29ff      	cmp	r1, #255	; 0xff
 80032c4:	f815 6b01 	ldrb.w	r6, [r5], #1
 80032c8:	d1f1      	bne.n	80032ae <d_print_comp_inner+0x8f6>
 80032ca:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80032ce:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80032d2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80032d6:	4620      	mov	r0, r4
 80032d8:	4798      	blx	r3
 80032da:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80032de:	3301      	adds	r3, #1
 80032e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80032e4:	2101      	movs	r1, #1
 80032e6:	2300      	movs	r3, #0
 80032e8:	e7e3      	b.n	80032b2 <d_print_comp_inner+0x8fa>
 80032ea:	2301      	movs	r3, #1
 80032ec:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 80032f0:	e430      	b.n	8002b54 <d_print_comp_inner+0x19c>
 80032f2:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	f041 8106 	bne.w	8004508 <d_print_comp_inner+0x1b50>
 80032fc:	1d29      	adds	r1, r5, #4
 80032fe:	f7fd fa97 	bl	8000830 <d_lookup_template_argument.isra.6>
 8003302:	2800      	cmp	r0, #0
 8003304:	f43f ac3a 	beq.w	8002b7c <d_print_comp_inner+0x1c4>
 8003308:	7803      	ldrb	r3, [r0, #0]
 800330a:	2b2f      	cmp	r3, #47	; 0x2f
 800330c:	f001 83fc 	beq.w	8004b08 <d_print_comp_inner+0x2150>
 8003310:	f8d4 5110 	ldr.w	r5, [r4, #272]	; 0x110
 8003314:	682b      	ldr	r3, [r5, #0]
 8003316:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800331a:	4602      	mov	r2, r0
 800331c:	4641      	mov	r1, r8
 800331e:	4620      	mov	r0, r4
 8003320:	f002 f8ee 	bl	8005500 <d_print_comp>
 8003324:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
 8003328:	e414      	b.n	8002b54 <d_print_comp_inner+0x19c>
 800332a:	2300      	movs	r3, #0
 800332c:	f8d0 9114 	ldr.w	r9, [r0, #276]	; 0x114
 8003330:	f8d0 7144 	ldr.w	r7, [r0, #324]	; 0x144
 8003334:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 8003338:	f8c0 5144 	str.w	r5, [r0, #324]	; 0x144
 800333c:	f011 0f04 	tst.w	r1, #4
 8003340:	686e      	ldr	r6, [r5, #4]
 8003342:	d005      	beq.n	8003350 <d_print_comp_inner+0x998>
 8003344:	7833      	ldrb	r3, [r6, #0]
 8003346:	b91b      	cbnz	r3, 8003350 <d_print_comp_inner+0x998>
 8003348:	68b2      	ldr	r2, [r6, #8]
 800334a:	2a06      	cmp	r2, #6
 800334c:	f001 853c 	beq.w	8004dc8 <d_print_comp_inner+0x2410>
 8003350:	4632      	mov	r2, r6
 8003352:	4641      	mov	r1, r8
 8003354:	4620      	mov	r0, r4
 8003356:	f002 f8d3 	bl	8005500 <d_print_comp>
 800335a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800335e:	2b3c      	cmp	r3, #60	; 0x3c
 8003360:	f001 8274 	beq.w	800484c <d_print_comp_inner+0x1e94>
 8003364:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003368:	2bff      	cmp	r3, #255	; 0xff
 800336a:	f001 8489 	beq.w	8004c80 <d_print_comp_inner+0x22c8>
 800336e:	1c59      	adds	r1, r3, #1
 8003370:	223c      	movs	r2, #60	; 0x3c
 8003372:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003376:	54e2      	strb	r2, [r4, r3]
 8003378:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800337c:	4641      	mov	r1, r8
 800337e:	68aa      	ldr	r2, [r5, #8]
 8003380:	4620      	mov	r0, r4
 8003382:	f002 f8bd 	bl	8005500 <d_print_comp>
 8003386:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800338a:	2b3e      	cmp	r3, #62	; 0x3e
 800338c:	f001 8239 	beq.w	8004802 <d_print_comp_inner+0x1e4a>
 8003390:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003394:	2bff      	cmp	r3, #255	; 0xff
 8003396:	f001 8460 	beq.w	8004c5a <d_print_comp_inner+0x22a2>
 800339a:	1c59      	adds	r1, r3, #1
 800339c:	223e      	movs	r2, #62	; 0x3e
 800339e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80033a2:	54e2      	strb	r2, [r4, r3]
 80033a4:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80033a8:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80033ac:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
 80033b0:	f7ff bbd0 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80033b4:	686f      	ldr	r7, [r5, #4]
 80033b6:	2f00      	cmp	r7, #0
 80033b8:	f001 8082 	beq.w	80044c0 <d_print_comp_inner+0x1b08>
 80033bc:	4d64      	ldr	r5, [pc, #400]	; (8003550 <d_print_comp_inner+0xb98>)
 80033be:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80033c2:	f105 0906 	add.w	r9, r5, #6
 80033c6:	f04f 0800 	mov.w	r8, #0
 80033ca:	e009      	b.n	80033e0 <d_print_comp_inner+0xa28>
 80033cc:	460b      	mov	r3, r1
 80033ce:	3101      	adds	r1, #1
 80033d0:	45a9      	cmp	r9, r5
 80033d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80033d6:	54e6      	strb	r6, [r4, r3]
 80033d8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80033dc:	f000 8782 	beq.w	80042e4 <d_print_comp_inner+0x192c>
 80033e0:	29ff      	cmp	r1, #255	; 0xff
 80033e2:	f815 6b01 	ldrb.w	r6, [r5], #1
 80033e6:	d1f1      	bne.n	80033cc <d_print_comp_inner+0xa14>
 80033e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80033ec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80033f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80033f4:	4620      	mov	r0, r4
 80033f6:	4798      	blx	r3
 80033f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80033fc:	3301      	adds	r3, #1
 80033fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003402:	2101      	movs	r1, #1
 8003404:	2300      	movs	r3, #0
 8003406:	e7e3      	b.n	80033d0 <d_print_comp_inner+0xa18>
 8003408:	4e52      	ldr	r6, [pc, #328]	; (8003554 <d_print_comp_inner+0xb9c>)
 800340a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800340e:	f106 0a0a 	add.w	sl, r6, #10
 8003412:	f04f 0900 	mov.w	r9, #0
 8003416:	e009      	b.n	800342c <d_print_comp_inner+0xa74>
 8003418:	460b      	mov	r3, r1
 800341a:	3101      	adds	r1, #1
 800341c:	4556      	cmp	r6, sl
 800341e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003422:	54e7      	strb	r7, [r4, r3]
 8003424:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003428:	f000 8701 	beq.w	800422e <d_print_comp_inner+0x1876>
 800342c:	29ff      	cmp	r1, #255	; 0xff
 800342e:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003432:	d1f1      	bne.n	8003418 <d_print_comp_inner+0xa60>
 8003434:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003438:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800343c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003440:	4620      	mov	r0, r4
 8003442:	4798      	blx	r3
 8003444:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003448:	3301      	adds	r3, #1
 800344a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800344e:	2101      	movs	r1, #1
 8003450:	2300      	movs	r3, #0
 8003452:	e7e3      	b.n	800341c <d_print_comp_inner+0xa64>
 8003454:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003458:	792d      	ldrb	r5, [r5, #4]
 800345a:	29ff      	cmp	r1, #255	; 0xff
 800345c:	f001 82ab 	beq.w	80049b6 <d_print_comp_inner+0x1ffe>
 8003460:	1c4b      	adds	r3, r1, #1
 8003462:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8003466:	5465      	strb	r5, [r4, r1]
 8003468:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 800346c:	f7ff bb72 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003470:	686a      	ldr	r2, [r5, #4]
 8003472:	f002 f845 	bl	8005500 <d_print_comp>
 8003476:	68aa      	ldr	r2, [r5, #8]
 8003478:	4641      	mov	r1, r8
 800347a:	4620      	mov	r0, r4
 800347c:	f002 f840 	bl	8005500 <d_print_comp>
 8003480:	f7ff bb68 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003484:	4e34      	ldr	r6, [pc, #208]	; (8003558 <d_print_comp_inner+0xba0>)
 8003486:	686a      	ldr	r2, [r5, #4]
 8003488:	f002 f83a 	bl	8005500 <d_print_comp>
 800348c:	f106 0a08 	add.w	sl, r6, #8
 8003490:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003494:	f04f 0900 	mov.w	r9, #0
 8003498:	e009      	b.n	80034ae <d_print_comp_inner+0xaf6>
 800349a:	460b      	mov	r3, r1
 800349c:	3101      	adds	r1, #1
 800349e:	4556      	cmp	r6, sl
 80034a0:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80034a4:	54e7      	strb	r7, [r4, r3]
 80034a6:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80034aa:	f000 8508 	beq.w	8003ebe <d_print_comp_inner+0x1506>
 80034ae:	29ff      	cmp	r1, #255	; 0xff
 80034b0:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80034b4:	d1f1      	bne.n	800349a <d_print_comp_inner+0xae2>
 80034b6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80034ba:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80034be:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80034c2:	4620      	mov	r0, r4
 80034c4:	4798      	blx	r3
 80034c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80034ca:	3301      	adds	r3, #1
 80034cc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80034d0:	2101      	movs	r1, #1
 80034d2:	2300      	movs	r3, #0
 80034d4:	e7e3      	b.n	800349e <d_print_comp_inner+0xae6>
 80034d6:	686a      	ldr	r2, [r5, #4]
 80034d8:	b10a      	cbz	r2, 80034de <d_print_comp_inner+0xb26>
 80034da:	f002 f811 	bl	8005500 <d_print_comp>
 80034de:	68ab      	ldr	r3, [r5, #8]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f43f ab37 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 80034e6:	f8d4 6100 	ldr.w	r6, [r4, #256]	; 0x100
 80034ea:	2efd      	cmp	r6, #253	; 0xfd
 80034ec:	f201 81bc 	bhi.w	8004868 <d_print_comp_inner+0x1eb0>
 80034f0:	4f1a      	ldr	r7, [pc, #104]	; (800355c <d_print_comp_inner+0xba4>)
 80034f2:	f04f 0a00 	mov.w	sl, #0
 80034f6:	f107 0b02 	add.w	fp, r7, #2
 80034fa:	4631      	mov	r1, r6
 80034fc:	e009      	b.n	8003512 <d_print_comp_inner+0xb5a>
 80034fe:	460b      	mov	r3, r1
 8003500:	3101      	adds	r1, #1
 8003502:	455f      	cmp	r7, fp
 8003504:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003508:	54e6      	strb	r6, [r4, r3]
 800350a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800350e:	f000 86c1 	beq.w	8004294 <d_print_comp_inner+0x18dc>
 8003512:	29ff      	cmp	r1, #255	; 0xff
 8003514:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003518:	d1f1      	bne.n	80034fe <d_print_comp_inner+0xb46>
 800351a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800351e:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003522:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003526:	4620      	mov	r0, r4
 8003528:	4798      	blx	r3
 800352a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800352e:	3301      	adds	r3, #1
 8003530:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003534:	2101      	movs	r1, #1
 8003536:	2300      	movs	r3, #0
 8003538:	e7e3      	b.n	8003502 <d_print_comp_inner+0xb4a>
 800353a:	4e09      	ldr	r6, [pc, #36]	; (8003560 <d_print_comp_inner+0xba8>)
 800353c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003540:	f106 0a09 	add.w	sl, r6, #9
 8003544:	f04f 0900 	mov.w	r9, #0
 8003548:	e016      	b.n	8003578 <d_print_comp_inner+0xbc0>
 800354a:	bf00      	nop
 800354c:	08018538 	.word	0x08018538
 8003550:	08018748 	.word	0x08018748
 8003554:	08018730 	.word	0x08018730
 8003558:	080187af 	.word	0x080187af
 800355c:	080186cc 	.word	0x080186cc
 8003560:	080186db 	.word	0x080186db
 8003564:	460b      	mov	r3, r1
 8003566:	3101      	adds	r1, #1
 8003568:	4556      	cmp	r6, sl
 800356a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800356e:	54e7      	strb	r7, [r4, r3]
 8003570:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003574:	f000 8594 	beq.w	80040a0 <d_print_comp_inner+0x16e8>
 8003578:	29ff      	cmp	r1, #255	; 0xff
 800357a:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 800357e:	d1f1      	bne.n	8003564 <d_print_comp_inner+0xbac>
 8003580:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003584:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003588:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800358c:	4620      	mov	r0, r4
 800358e:	4798      	blx	r3
 8003590:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003594:	3301      	adds	r3, #1
 8003596:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800359a:	2101      	movs	r1, #1
 800359c:	2300      	movs	r3, #0
 800359e:	e7e3      	b.n	8003568 <d_print_comp_inner+0xbb0>
 80035a0:	4ed1      	ldr	r6, [pc, #836]	; (80038e8 <d_print_comp_inner+0xf30>)
 80035a2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80035a6:	f106 0a09 	add.w	sl, r6, #9
 80035aa:	f04f 0900 	mov.w	r9, #0
 80035ae:	e009      	b.n	80035c4 <d_print_comp_inner+0xc0c>
 80035b0:	460b      	mov	r3, r1
 80035b2:	3101      	adds	r1, #1
 80035b4:	4556      	cmp	r6, sl
 80035b6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80035ba:	54e7      	strb	r7, [r4, r3]
 80035bc:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80035c0:	f000 8597 	beq.w	80040f2 <d_print_comp_inner+0x173a>
 80035c4:	29ff      	cmp	r1, #255	; 0xff
 80035c6:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80035ca:	d1f1      	bne.n	80035b0 <d_print_comp_inner+0xbf8>
 80035cc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80035d0:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80035d4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80035d8:	4620      	mov	r0, r4
 80035da:	4798      	blx	r3
 80035dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80035e0:	3301      	adds	r3, #1
 80035e2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80035e6:	2101      	movs	r1, #1
 80035e8:	2300      	movs	r3, #0
 80035ea:	e7e3      	b.n	80035b4 <d_print_comp_inner+0xbfc>
 80035ec:	f8d5 a004 	ldr.w	sl, [r5, #4]
 80035f0:	4dbe      	ldr	r5, [pc, #760]	; (80038ec <d_print_comp_inner+0xf34>)
 80035f2:	f8da 7008 	ldr.w	r7, [sl, #8]
 80035f6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80035fa:	f105 0808 	add.w	r8, r5, #8
 80035fe:	f04f 0900 	mov.w	r9, #0
 8003602:	e009      	b.n	8003618 <d_print_comp_inner+0xc60>
 8003604:	460b      	mov	r3, r1
 8003606:	3101      	adds	r1, #1
 8003608:	45a8      	cmp	r8, r5
 800360a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800360e:	54e6      	strb	r6, [r4, r3]
 8003610:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003614:	f000 8506 	beq.w	8004024 <d_print_comp_inner+0x166c>
 8003618:	29ff      	cmp	r1, #255	; 0xff
 800361a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800361e:	d1f1      	bne.n	8003604 <d_print_comp_inner+0xc4c>
 8003620:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003624:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003628:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800362c:	4620      	mov	r0, r4
 800362e:	4798      	blx	r3
 8003630:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003634:	3301      	adds	r3, #1
 8003636:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800363a:	2101      	movs	r1, #1
 800363c:	2300      	movs	r3, #0
 800363e:	e7e3      	b.n	8003608 <d_print_comp_inner+0xc50>
 8003640:	686a      	ldr	r2, [r5, #4]
 8003642:	68ae      	ldr	r6, [r5, #8]
 8003644:	b10a      	cbz	r2, 800364a <d_print_comp_inner+0xc92>
 8003646:	f001 ff5b 	bl	8005500 <d_print_comp>
 800364a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 800364e:	2bff      	cmp	r3, #255	; 0xff
 8003650:	f001 82b1 	beq.w	8004bb6 <d_print_comp_inner+0x21fe>
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	257b      	movs	r5, #123	; 0x7b
 8003658:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800365c:	4641      	mov	r1, r8
 800365e:	54e5      	strb	r5, [r4, r3]
 8003660:	4632      	mov	r2, r6
 8003662:	4620      	mov	r0, r4
 8003664:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8003668:	f001 ff4a 	bl	8005500 <d_print_comp>
 800366c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003670:	29ff      	cmp	r1, #255	; 0xff
 8003672:	f001 81e7 	beq.w	8004a44 <d_print_comp_inner+0x208c>
 8003676:	1c4a      	adds	r2, r1, #1
 8003678:	237d      	movs	r3, #125	; 0x7d
 800367a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800367e:	5463      	strb	r3, [r4, r1]
 8003680:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003684:	f7ff ba66 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003688:	f8d5 9004 	ldr.w	r9, [r5, #4]
 800368c:	68ae      	ldr	r6, [r5, #8]
 800368e:	f899 3000 	ldrb.w	r3, [r9]
 8003692:	2b31      	cmp	r3, #49	; 0x31
 8003694:	f000 87cb 	beq.w	800462e <d_print_comp_inner+0x1c76>
 8003698:	2b33      	cmp	r3, #51	; 0x33
 800369a:	f041 86d3 	bne.w	8005444 <d_print_comp_inner+0x2a8c>
 800369e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80036a2:	29ff      	cmp	r1, #255	; 0xff
 80036a4:	f001 84c3 	beq.w	800502e <d_print_comp_inner+0x2676>
 80036a8:	1c4a      	adds	r2, r1, #1
 80036aa:	2328      	movs	r3, #40	; 0x28
 80036ac:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80036b0:	5463      	strb	r3, [r4, r1]
 80036b2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80036b6:	a904      	add	r1, sp, #16
 80036b8:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80036bc:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80036c0:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
 80036c4:	4620      	mov	r0, r4
 80036c6:	4641      	mov	r1, r8
 80036c8:	9305      	str	r3, [sp, #20]
 80036ca:	9204      	str	r2, [sp, #16]
 80036cc:	f7ff f974 	bl	80029b8 <d_print_comp_inner>
 80036d0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80036d4:	9b05      	ldr	r3, [sp, #20]
 80036d6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80036da:	29ff      	cmp	r1, #255	; 0xff
 80036dc:	f001 8496 	beq.w	800500c <d_print_comp_inner+0x2654>
 80036e0:	2329      	movs	r3, #41	; 0x29
 80036e2:	1c4a      	adds	r2, r1, #1
 80036e4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80036e8:	5463      	strb	r3, [r4, r1]
 80036ea:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80036ee:	4632      	mov	r2, r6
 80036f0:	4641      	mov	r1, r8
 80036f2:	4620      	mov	r0, r4
 80036f4:	f002 fd2a 	bl	800614c <d_print_subexpr>
 80036f8:	f7ff ba2c 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80036fc:	686a      	ldr	r2, [r5, #4]
 80036fe:	f002 fce7 	bl	80060d0 <d_print_expr_op>
 8003702:	f7ff ba27 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003706:	f011 0f20 	tst.w	r1, #32
 800370a:	f040 8753 	bne.w	80045b4 <d_print_comp_inner+0x1bfc>
 800370e:	686a      	ldr	r2, [r5, #4]
 8003710:	b11a      	cbz	r2, 800371a <d_print_comp_inner+0xd62>
 8003712:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8003716:	f001 81d0 	beq.w	8004aba <d_print_comp_inner+0x2102>
 800371a:	f028 0860 	bic.w	r8, r8, #96	; 0x60
 800371e:	f105 0208 	add.w	r2, r5, #8
 8003722:	4641      	mov	r1, r8
 8003724:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 8003728:	4620      	mov	r0, r4
 800372a:	f002 fbdd 	bl	8005ee8 <d_print_function_type.isra.11>
 800372e:	f7ff ba11 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003732:	f011 0804 	ands.w	r8, r1, #4
 8003736:	686b      	ldr	r3, [r5, #4]
 8003738:	f040 8612 	bne.w	8004360 <d_print_comp_inner+0x19a8>
 800373c:	e893 00a0 	ldmia.w	r3, {r5, r7}
 8003740:	2f00      	cmp	r7, #0
 8003742:	f43f aa07 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8003746:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800374a:	442f      	add	r7, r5
 800374c:	e009      	b.n	8003762 <d_print_comp_inner+0xdaa>
 800374e:	460b      	mov	r3, r1
 8003750:	3101      	adds	r1, #1
 8003752:	42bd      	cmp	r5, r7
 8003754:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003758:	54e6      	strb	r6, [r4, r3]
 800375a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800375e:	f43f a9f9 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8003762:	29ff      	cmp	r1, #255	; 0xff
 8003764:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003768:	d1f1      	bne.n	800374e <d_print_comp_inner+0xd96>
 800376a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800376e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003772:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003776:	4620      	mov	r0, r4
 8003778:	4798      	blx	r3
 800377a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800377e:	3301      	adds	r3, #1
 8003780:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003784:	2101      	movs	r1, #1
 8003786:	2300      	movs	r3, #0
 8003788:	e7e3      	b.n	8003752 <d_print_comp_inner+0xd9a>
 800378a:	6869      	ldr	r1, [r5, #4]
 800378c:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
 8003790:	780b      	ldrb	r3, [r1, #0]
 8003792:	2f00      	cmp	r7, #0
 8003794:	f040 85e1 	bne.w	800435a <d_print_comp_inner+0x19a2>
 8003798:	2b05      	cmp	r3, #5
 800379a:	f001 81c7 	beq.w	8004b2c <d_print_comp_inner+0x2174>
 800379e:	2b23      	cmp	r3, #35	; 0x23
 80037a0:	f000 8689 	beq.w	80044b6 <d_print_comp_inner+0x1afe>
 80037a4:	782a      	ldrb	r2, [r5, #0]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	f000 8685 	beq.w	80044b6 <d_print_comp_inner+0x1afe>
 80037ac:	2b24      	cmp	r3, #36	; 0x24
 80037ae:	f47f a9eb 	bne.w	8002b88 <d_print_comp_inner+0x1d0>
 80037b2:	a814      	add	r0, sp, #80	; 0x50
 80037b4:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80037b8:	684a      	ldr	r2, [r1, #4]
 80037ba:	f840 3d40 	str.w	r3, [r0, #-64]!
 80037be:	2100      	movs	r1, #0
 80037c0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 80037c4:	9505      	str	r5, [sp, #20]
 80037c6:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 80037ca:	9106      	str	r1, [sp, #24]
 80037cc:	9307      	str	r3, [sp, #28]
 80037ce:	2a00      	cmp	r2, #0
 80037d0:	f47f a9e8 	bne.w	8002ba4 <d_print_comp_inner+0x1ec>
 80037d4:	f7ff b9e5 	b.w	8002ba2 <d_print_comp_inner+0x1ea>
 80037d8:	686a      	ldr	r2, [r5, #4]
 80037da:	f001 fe91 	bl	8005500 <d_print_comp>
 80037de:	f7ff b9b9 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80037e2:	ab14      	add	r3, sp, #80	; 0x50
 80037e4:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
 80037e8:	f843 2d40 	str.w	r2, [r3, #-64]!
 80037ec:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
 80037f0:	68aa      	ldr	r2, [r5, #8]
 80037f2:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 80037f6:	9307      	str	r3, [sp, #28]
 80037f8:	2600      	movs	r6, #0
 80037fa:	9505      	str	r5, [sp, #20]
 80037fc:	9606      	str	r6, [sp, #24]
 80037fe:	f001 fe7f 	bl	8005500 <d_print_comp>
 8003802:	9b06      	ldr	r3, [sp, #24]
 8003804:	b923      	cbnz	r3, 8003810 <d_print_comp_inner+0xe58>
 8003806:	462a      	mov	r2, r5
 8003808:	4641      	mov	r1, r8
 800380a:	4620      	mov	r0, r4
 800380c:	f001 fe88 	bl	8005520 <d_print_mod>
 8003810:	9b04      	ldr	r3, [sp, #16]
 8003812:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8003816:	f7ff b99d 	b.w	8002b54 <d_print_comp_inner+0x19c>
 800381a:	f10d 0950 	add.w	r9, sp, #80	; 0x50
 800381e:	f8d0 b114 	ldr.w	fp, [r0, #276]	; 0x114
 8003822:	f849 bd40 	str.w	fp, [r9, #-64]!
 8003826:	2200      	movs	r2, #0
 8003828:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 800382c:	f8cd b000 	str.w	fp, [sp]
 8003830:	4659      	mov	r1, fp
 8003832:	f8c0 9114 	str.w	r9, [r0, #276]	; 0x114
 8003836:	9505      	str	r5, [sp, #20]
 8003838:	9206      	str	r2, [sp, #24]
 800383a:	9307      	str	r3, [sp, #28]
 800383c:	2900      	cmp	r1, #0
 800383e:	f001 83a0 	beq.w	8004f82 <d_print_comp_inner+0x25ca>
 8003842:	684b      	ldr	r3, [r1, #4]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	3b19      	subs	r3, #25
 8003848:	2b02      	cmp	r3, #2
 800384a:	f201 839a 	bhi.w	8004f82 <d_print_comp_inner+0x25ca>
 800384e:	46ac      	mov	ip, r5
 8003850:	2701      	movs	r7, #1
 8003852:	460e      	mov	r6, r1
 8003854:	464d      	mov	r5, r9
 8003856:	e004      	b.n	8003862 <d_print_comp_inner+0xeaa>
 8003858:	6873      	ldr	r3, [r6, #4]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	3b19      	subs	r3, #25
 800385e:	2b02      	cmp	r3, #2
 8003860:	d81b      	bhi.n	800389a <d_print_comp_inner+0xee2>
 8003862:	68b3      	ldr	r3, [r6, #8]
 8003864:	ea4f 1e07 	mov.w	lr, r7, lsl #4
 8003868:	aa14      	add	r2, sp, #80	; 0x50
 800386a:	eb02 0b0e 	add.w	fp, r2, lr
 800386e:	b98b      	cbnz	r3, 8003894 <d_print_comp_inner+0xedc>
 8003870:	2f03      	cmp	r7, #3
 8003872:	f201 80f9 	bhi.w	8004a68 <d_print_comp_inner+0x20b0>
 8003876:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800387a:	f1ab 0a40 	sub.w	sl, fp, #64	; 0x40
 800387e:	e88a 000f 	stmia.w	sl, {r0, r1, r2, r3}
 8003882:	f84b 5c40 	str.w	r5, [fp, #-64]
 8003886:	2301      	movs	r3, #1
 8003888:	eb09 050e 	add.w	r5, r9, lr
 800388c:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
 8003890:	3701      	adds	r7, #1
 8003892:	60b3      	str	r3, [r6, #8]
 8003894:	6836      	ldr	r6, [r6, #0]
 8003896:	2e00      	cmp	r6, #0
 8003898:	d1de      	bne.n	8003858 <d_print_comp_inner+0xea0>
 800389a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800389e:	4641      	mov	r1, r8
 80038a0:	4620      	mov	r0, r4
 80038a2:	4665      	mov	r5, ip
 80038a4:	f001 fe2c 	bl	8005500 <d_print_comp>
 80038a8:	9b06      	ldr	r3, [sp, #24]
 80038aa:	9a00      	ldr	r2, [sp, #0]
 80038ac:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f47f a94f 	bne.w	8002b54 <d_print_comp_inner+0x19c>
 80038b6:	2f01      	cmp	r7, #1
 80038b8:	d00c      	beq.n	80038d4 <d_print_comp_inner+0xf1c>
 80038ba:	eb09 1907 	add.w	r9, r9, r7, lsl #4
 80038be:	f859 2c0c 	ldr.w	r2, [r9, #-12]
 80038c2:	3f01      	subs	r7, #1
 80038c4:	4641      	mov	r1, r8
 80038c6:	4620      	mov	r0, r4
 80038c8:	f001 fe2a 	bl	8005520 <d_print_mod>
 80038cc:	2f01      	cmp	r7, #1
 80038ce:	f1a9 0910 	sub.w	r9, r9, #16
 80038d2:	d1f4      	bne.n	80038be <d_print_comp_inner+0xf06>
 80038d4:	1d2a      	adds	r2, r5, #4
 80038d6:	4641      	mov	r1, r8
 80038d8:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80038dc:	4620      	mov	r0, r4
 80038de:	f002 fa27 	bl	8005d30 <d_print_array_type.isra.10>
 80038e2:	f7ff b937 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80038e6:	bf00      	nop
 80038e8:	080186db 	.word	0x080186db
 80038ec:	080186cf 	.word	0x080186cf
 80038f0:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f040 8674 	bne.w	80045e2 <d_print_comp_inner+0x1c2a>
 80038fa:	686a      	ldr	r2, [r5, #4]
 80038fc:	4bd5      	ldr	r3, [pc, #852]	; (8003c54 <d_print_comp_inner+0x129c>)
 80038fe:	6851      	ldr	r1, [r2, #4]
 8003900:	4299      	cmp	r1, r3
 8003902:	f000 866a 	beq.w	80045da <d_print_comp_inner+0x1c22>
 8003906:	4641      	mov	r1, r8
 8003908:	4620      	mov	r0, r4
 800390a:	f001 fdf9 	bl	8005500 <d_print_comp>
 800390e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003912:	2bff      	cmp	r3, #255	; 0xff
 8003914:	f001 82b2 	beq.w	8004e7c <d_print_comp_inner+0x24c4>
 8003918:	1c59      	adds	r1, r3, #1
 800391a:	2220      	movs	r2, #32
 800391c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003920:	54e2      	strb	r2, [r4, r3]
 8003922:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003926:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 8595 	beq.w	800445a <d_print_comp_inner+0x1aa2>
 8003930:	4dc9      	ldr	r5, [pc, #804]	; (8003c58 <d_print_comp_inner+0x12a0>)
 8003932:	f04f 0800 	mov.w	r8, #0
 8003936:	1daf      	adds	r7, r5, #6
 8003938:	e009      	b.n	800394e <d_print_comp_inner+0xf96>
 800393a:	460b      	mov	r3, r1
 800393c:	3101      	adds	r1, #1
 800393e:	42bd      	cmp	r5, r7
 8003940:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003944:	54e6      	strb	r6, [r4, r3]
 8003946:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800394a:	f43f a903 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 800394e:	29ff      	cmp	r1, #255	; 0xff
 8003950:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003954:	d1f1      	bne.n	800393a <d_print_comp_inner+0xf82>
 8003956:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800395a:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800395e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003962:	4620      	mov	r0, r4
 8003964:	4798      	blx	r3
 8003966:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800396a:	3301      	adds	r3, #1
 800396c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003970:	2101      	movs	r1, #1
 8003972:	2300      	movs	r3, #0
 8003974:	e7e3      	b.n	800393e <d_print_comp_inner+0xf86>
 8003976:	4eb9      	ldr	r6, [pc, #740]	; (8003c5c <d_print_comp_inner+0x12a4>)
 8003978:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800397c:	f106 090e 	add.w	r9, r6, #14
 8003980:	f04f 0800 	mov.w	r8, #0
 8003984:	e009      	b.n	800399a <d_print_comp_inner+0xfe2>
 8003986:	460b      	mov	r3, r1
 8003988:	3101      	adds	r1, #1
 800398a:	45b1      	cmp	r9, r6
 800398c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003990:	54e7      	strb	r7, [r4, r3]
 8003992:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003996:	f000 83b3 	beq.w	8004100 <d_print_comp_inner+0x1748>
 800399a:	29ff      	cmp	r1, #255	; 0xff
 800399c:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80039a0:	d1f1      	bne.n	8003986 <d_print_comp_inner+0xfce>
 80039a2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039a6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80039aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039ae:	4620      	mov	r0, r4
 80039b0:	4798      	blx	r3
 80039b2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80039b6:	3301      	adds	r3, #1
 80039b8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80039bc:	2101      	movs	r1, #1
 80039be:	2300      	movs	r3, #0
 80039c0:	e7e3      	b.n	800398a <d_print_comp_inner+0xfd2>
 80039c2:	4ea7      	ldr	r6, [pc, #668]	; (8003c60 <d_print_comp_inner+0x12a8>)
 80039c4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80039c8:	f106 0a1a 	add.w	sl, r6, #26
 80039cc:	f04f 0900 	mov.w	r9, #0
 80039d0:	e009      	b.n	80039e6 <d_print_comp_inner+0x102e>
 80039d2:	460b      	mov	r3, r1
 80039d4:	3101      	adds	r1, #1
 80039d6:	4556      	cmp	r6, sl
 80039d8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80039dc:	54e7      	strb	r7, [r4, r3]
 80039de:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80039e2:	f000 82ef 	beq.w	8003fc4 <d_print_comp_inner+0x160c>
 80039e6:	29ff      	cmp	r1, #255	; 0xff
 80039e8:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 80039ec:	d1f1      	bne.n	80039d2 <d_print_comp_inner+0x101a>
 80039ee:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80039f2:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80039f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80039fa:	4620      	mov	r0, r4
 80039fc:	4798      	blx	r3
 80039fe:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a02:	3301      	adds	r3, #1
 8003a04:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003a08:	2101      	movs	r1, #1
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	e7e3      	b.n	80039d6 <d_print_comp_inner+0x101e>
 8003a0e:	6869      	ldr	r1, [r5, #4]
 8003a10:	f7fc ff2a 	bl	8000868 <d_find_pack>
 8003a14:	f04f 0900 	mov.w	r9, #0
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	f001 835d 	beq.w	80050d8 <d_print_comp_inner+0x2720>
 8003a1e:	7803      	ldrb	r3, [r0, #0]
 8003a20:	2b2f      	cmp	r3, #47	; 0x2f
 8003a22:	f040 8457 	bne.w	80042d4 <d_print_comp_inner+0x191c>
 8003a26:	6843      	ldr	r3, [r0, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8453 	beq.w	80042d4 <d_print_comp_inner+0x191c>
 8003a2e:	6880      	ldr	r0, [r0, #8]
 8003a30:	f109 0901 	add.w	r9, r9, #1
 8003a34:	2800      	cmp	r0, #0
 8003a36:	d1f2      	bne.n	8003a1e <d_print_comp_inner+0x1066>
 8003a38:	686b      	ldr	r3, [r5, #4]
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	f04f 0a00 	mov.w	sl, #0
 8003a46:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 8003a4a:	9a00      	ldr	r2, [sp, #0]
 8003a4c:	4641      	mov	r1, r8
 8003a4e:	4620      	mov	r0, r4
 8003a50:	f001 fd56 	bl	8005500 <d_print_comp>
 8003a54:	9b01      	ldr	r3, [sp, #4]
 8003a56:	42bb      	cmp	r3, r7
 8003a58:	f340 81ab 	ble.w	8003db2 <d_print_comp_inner+0x13fa>
 8003a5c:	4d81      	ldr	r5, [pc, #516]	; (8003c64 <d_print_comp_inner+0x12ac>)
 8003a5e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003a62:	f105 0b02 	add.w	fp, r5, #2
 8003a66:	e009      	b.n	8003a7c <d_print_comp_inner+0x10c4>
 8003a68:	460b      	mov	r3, r1
 8003a6a:	3101      	adds	r1, #1
 8003a6c:	45ab      	cmp	fp, r5
 8003a6e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003a72:	54e6      	strb	r6, [r4, r3]
 8003a74:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003a78:	f000 819b 	beq.w	8003db2 <d_print_comp_inner+0x13fa>
 8003a7c:	29ff      	cmp	r1, #255	; 0xff
 8003a7e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003a82:	d1f1      	bne.n	8003a68 <d_print_comp_inner+0x10b0>
 8003a84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003a88:	f884 a0ff 	strb.w	sl, [r4, #255]	; 0xff
 8003a8c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003a90:	4620      	mov	r0, r4
 8003a92:	4798      	blx	r3
 8003a94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003a98:	3301      	adds	r3, #1
 8003a9a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e7e3      	b.n	8003a6c <d_print_comp_inner+0x10b4>
 8003aa4:	4e70      	ldr	r6, [pc, #448]	; (8003c68 <d_print_comp_inner+0x12b0>)
 8003aa6:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003aaa:	f106 0a16 	add.w	sl, r6, #22
 8003aae:	f04f 0900 	mov.w	r9, #0
 8003ab2:	e009      	b.n	8003ac8 <d_print_comp_inner+0x1110>
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	3101      	adds	r1, #1
 8003ab8:	45b2      	cmp	sl, r6
 8003aba:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003abe:	54e7      	strb	r7, [r4, r3]
 8003ac0:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003ac4:	f000 835f 	beq.w	8004186 <d_print_comp_inner+0x17ce>
 8003ac8:	29ff      	cmp	r1, #255	; 0xff
 8003aca:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003ace:	d1f1      	bne.n	8003ab4 <d_print_comp_inner+0x10fc>
 8003ad0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003ad4:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003ad8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003adc:	4620      	mov	r0, r4
 8003ade:	4798      	blx	r3
 8003ae0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003aea:	2101      	movs	r1, #1
 8003aec:	2300      	movs	r3, #0
 8003aee:	e7e3      	b.n	8003ab8 <d_print_comp_inner+0x1100>
 8003af0:	4e5e      	ldr	r6, [pc, #376]	; (8003c6c <d_print_comp_inner+0x12b4>)
 8003af2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003af6:	f106 0a0e 	add.w	sl, r6, #14
 8003afa:	f04f 0900 	mov.w	r9, #0
 8003afe:	e009      	b.n	8003b14 <d_print_comp_inner+0x115c>
 8003b00:	460b      	mov	r3, r1
 8003b02:	3101      	adds	r1, #1
 8003b04:	4556      	cmp	r6, sl
 8003b06:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003b0a:	54e7      	strb	r7, [r4, r3]
 8003b0c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003b10:	f000 83a0 	beq.w	8004254 <d_print_comp_inner+0x189c>
 8003b14:	29ff      	cmp	r1, #255	; 0xff
 8003b16:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003b1a:	d1f1      	bne.n	8003b00 <d_print_comp_inner+0x1148>
 8003b1c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003b20:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003b24:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003b28:	4620      	mov	r0, r4
 8003b2a:	4798      	blx	r3
 8003b2c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003b30:	3301      	adds	r3, #1
 8003b32:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003b36:	2101      	movs	r1, #1
 8003b38:	2300      	movs	r3, #0
 8003b3a:	e7e3      	b.n	8003b04 <d_print_comp_inner+0x114c>
 8003b3c:	686a      	ldr	r2, [r5, #4]
 8003b3e:	7811      	ldrb	r1, [r2, #0]
 8003b40:	2927      	cmp	r1, #39	; 0x27
 8003b42:	f000 8615 	beq.w	8004770 <d_print_comp_inner+0x1db8>
 8003b46:	2600      	movs	r6, #0
 8003b48:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003b4c:	29ff      	cmp	r1, #255	; 0xff
 8003b4e:	f001 80c5 	beq.w	8004cdc <d_print_comp_inner+0x2324>
 8003b52:	2328      	movs	r3, #40	; 0x28
 8003b54:	1c4a      	adds	r2, r1, #1
 8003b56:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003b5a:	5463      	strb	r3, [r4, r1]
 8003b5c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003b60:	686a      	ldr	r2, [r5, #4]
 8003b62:	4641      	mov	r1, r8
 8003b64:	4620      	mov	r0, r4
 8003b66:	f001 fccb 	bl	8005500 <d_print_comp>
 8003b6a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8003b6e:	2bff      	cmp	r3, #255	; 0xff
 8003b70:	f001 8099 	beq.w	8004ca6 <d_print_comp_inner+0x22ee>
 8003b74:	1c59      	adds	r1, r3, #1
 8003b76:	2229      	movs	r2, #41	; 0x29
 8003b78:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003b7c:	54e2      	strb	r2, [r4, r3]
 8003b7e:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8003b82:	782b      	ldrb	r3, [r5, #0]
 8003b84:	2b3d      	cmp	r3, #61	; 0x3d
 8003b86:	f000 86e6 	beq.w	8004956 <d_print_comp_inner+0x1f9e>
 8003b8a:	2e08      	cmp	r6, #8
 8003b8c:	f000 867f 	beq.w	800488e <d_print_comp_inner+0x1ed6>
 8003b90:	68aa      	ldr	r2, [r5, #8]
 8003b92:	4641      	mov	r1, r8
 8003b94:	4620      	mov	r0, r4
 8003b96:	f001 fcb3 	bl	8005500 <d_print_comp>
 8003b9a:	f7fe bfdb 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8003ba4:	f7fe bfd6 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003ba8:	686a      	ldr	r2, [r5, #4]
 8003baa:	4931      	ldr	r1, [pc, #196]	; (8003c70 <d_print_comp_inner+0x12b8>)
 8003bac:	a804      	add	r0, sp, #16
 8003bae:	f00d fd15 	bl	80115dc <sprintf>
 8003bb2:	a804      	add	r0, sp, #16
 8003bb4:	f002 febe 	bl	8006934 <strlen>
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	f43e afcb 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8003bbe:	ad04      	add	r5, sp, #16
 8003bc0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003bc4:	182f      	adds	r7, r5, r0
 8003bc6:	f04f 0800 	mov.w	r8, #0
 8003bca:	e009      	b.n	8003be0 <d_print_comp_inner+0x1228>
 8003bcc:	460b      	mov	r3, r1
 8003bce:	3101      	adds	r1, #1
 8003bd0:	42bd      	cmp	r5, r7
 8003bd2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003bd6:	54e6      	strb	r6, [r4, r3]
 8003bd8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003bdc:	f43e afba 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8003be0:	29ff      	cmp	r1, #255	; 0xff
 8003be2:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003be6:	d1f1      	bne.n	8003bcc <d_print_comp_inner+0x1214>
 8003be8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003bec:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003bf0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	4798      	blx	r3
 8003bf8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c02:	2101      	movs	r1, #1
 8003c04:	2300      	movs	r3, #0
 8003c06:	e7e3      	b.n	8003bd0 <d_print_comp_inner+0x1218>
 8003c08:	4e1a      	ldr	r6, [pc, #104]	; (8003c74 <d_print_comp_inner+0x12bc>)
 8003c0a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003c0e:	f106 0a1c 	add.w	sl, r6, #28
 8003c12:	f04f 0900 	mov.w	r9, #0
 8003c16:	e009      	b.n	8003c2c <d_print_comp_inner+0x1274>
 8003c18:	460b      	mov	r3, r1
 8003c1a:	3101      	adds	r1, #1
 8003c1c:	4556      	cmp	r6, sl
 8003c1e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003c22:	54e7      	strb	r7, [r4, r3]
 8003c24:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003c28:	f000 82fa 	beq.w	8004220 <d_print_comp_inner+0x1868>
 8003c2c:	29ff      	cmp	r1, #255	; 0xff
 8003c2e:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003c32:	d1f1      	bne.n	8003c18 <d_print_comp_inner+0x1260>
 8003c34:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003c38:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003c3c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003c40:	4620      	mov	r0, r4
 8003c42:	4798      	blx	r3
 8003c44:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003c48:	3301      	adds	r3, #1
 8003c4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003c4e:	2101      	movs	r1, #1
 8003c50:	2300      	movs	r3, #0
 8003c52:	e7e3      	b.n	8003c1c <d_print_comp_inner+0x1264>
 8003c54:	08017848 	.word	0x08017848
 8003c58:	080186bc 	.word	0x080186bc
 8003c5c:	0801879f 	.word	0x0801879f
 8003c60:	08018697 	.word	0x08018697
 8003c64:	080186cc 	.word	0x080186cc
 8003c68:	0801869b 	.word	0x0801869b
 8003c6c:	0801871f 	.word	0x0801871f
 8003c70:	080184f0 	.word	0x080184f0
 8003c74:	0801876f 	.word	0x0801876f
 8003c78:	68ab      	ldr	r3, [r5, #8]
 8003c7a:	781a      	ldrb	r2, [r3, #0]
 8003c7c:	2a3a      	cmp	r2, #58	; 0x3a
 8003c7e:	f47e af7d 	bne.w	8002b7c <d_print_comp_inner+0x1c4>
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b3b      	cmp	r3, #59	; 0x3b
 8003c88:	f47e af78 	bne.w	8002b7c <d_print_comp_inner+0x1c4>
 8003c8c:	f105 0308 	add.w	r3, r5, #8
 8003c90:	686a      	ldr	r2, [r5, #4]
 8003c92:	f002 fabf 	bl	8006214 <d_maybe_print_fold_expression.isra.15>
 8003c96:	4606      	mov	r6, r0
 8003c98:	2800      	cmp	r0, #0
 8003c9a:	f47e af5b 	bne.w	8002b54 <d_print_comp_inner+0x19c>
 8003c9e:	f8d5 a004 	ldr.w	sl, [r5, #4]
 8003ca2:	68aa      	ldr	r2, [r5, #8]
 8003ca4:	f8da 1004 	ldr.w	r1, [sl, #4]
 8003ca8:	6893      	ldr	r3, [r2, #8]
 8003caa:	6808      	ldr	r0, [r1, #0]
 8003cac:	49d6      	ldr	r1, [pc, #856]	; (8004008 <d_print_comp_inner+0x1650>)
 8003cae:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8003cb2:	685f      	ldr	r7, [r3, #4]
 8003cb4:	689d      	ldr	r5, [r3, #8]
 8003cb6:	f002 fe33 	bl	8006920 <strcmp>
 8003cba:	2800      	cmp	r0, #0
 8003cbc:	f001 82e2 	beq.w	8005284 <d_print_comp_inner+0x28cc>
 8003cc0:	2204      	movs	r2, #4
 8003cc2:	49d2      	ldr	r1, [pc, #840]	; (800400c <d_print_comp_inner+0x1654>)
 8003cc4:	4620      	mov	r0, r4
 8003cc6:	f7fc fba3 	bl	8000410 <d_append_buffer>
 8003cca:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8003cce:	b183      	cbz	r3, 8003cf2 <d_print_comp_inner+0x133a>
 8003cd0:	4641      	mov	r1, r8
 8003cd2:	464a      	mov	r2, r9
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	f002 fa39 	bl	800614c <d_print_subexpr>
 8003cda:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003cde:	29ff      	cmp	r1, #255	; 0xff
 8003ce0:	f001 83ec 	beq.w	80054bc <d_print_comp_inner+0x2b04>
 8003ce4:	2320      	movs	r3, #32
 8003ce6:	1c4a      	adds	r2, r1, #1
 8003ce8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003cec:	5463      	strb	r3, [r4, r1]
 8003cee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003cf2:	463a      	mov	r2, r7
 8003cf4:	4641      	mov	r1, r8
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	f001 fc02 	bl	8005500 <d_print_comp>
 8003cfc:	2d00      	cmp	r5, #0
 8003cfe:	f43e af29 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8003d02:	462a      	mov	r2, r5
 8003d04:	4641      	mov	r1, r8
 8003d06:	4620      	mov	r0, r4
 8003d08:	f002 fa20 	bl	800614c <d_print_subexpr>
 8003d0c:	f7fe bf22 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003d10:	4ebf      	ldr	r6, [pc, #764]	; (8004010 <d_print_comp_inner+0x1658>)
 8003d12:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003d16:	f106 0a08 	add.w	sl, r6, #8
 8003d1a:	f04f 0900 	mov.w	r9, #0
 8003d1e:	e009      	b.n	8003d34 <d_print_comp_inner+0x137c>
 8003d20:	460b      	mov	r3, r1
 8003d22:	3101      	adds	r1, #1
 8003d24:	4556      	cmp	r6, sl
 8003d26:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003d2a:	54e7      	strb	r7, [r4, r3]
 8003d2c:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003d30:	f000 80d8 	beq.w	8003ee4 <d_print_comp_inner+0x152c>
 8003d34:	29ff      	cmp	r1, #255	; 0xff
 8003d36:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003d3a:	d1f1      	bne.n	8003d20 <d_print_comp_inner+0x1368>
 8003d3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d40:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d44:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d48:	4620      	mov	r0, r4
 8003d4a:	4798      	blx	r3
 8003d4c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d50:	3301      	adds	r3, #1
 8003d52:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003d56:	2101      	movs	r1, #1
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e7e3      	b.n	8003d24 <d_print_comp_inner+0x136c>
 8003d5c:	4ead      	ldr	r6, [pc, #692]	; (8004014 <d_print_comp_inner+0x165c>)
 8003d5e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8003d62:	f106 0a1d 	add.w	sl, r6, #29
 8003d66:	f04f 0900 	mov.w	r9, #0
 8003d6a:	e009      	b.n	8003d80 <d_print_comp_inner+0x13c8>
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	3101      	adds	r1, #1
 8003d70:	45b2      	cmp	sl, r6
 8003d72:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003d76:	54e7      	strb	r7, [r4, r3]
 8003d78:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003d7c:	f000 81fc 	beq.w	8004178 <d_print_comp_inner+0x17c0>
 8003d80:	29ff      	cmp	r1, #255	; 0xff
 8003d82:	f816 7f01 	ldrb.w	r7, [r6, #1]!
 8003d86:	d1f1      	bne.n	8003d6c <d_print_comp_inner+0x13b4>
 8003d88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003d8c:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003d90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003d94:	4620      	mov	r0, r4
 8003d96:	4798      	blx	r3
 8003d98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003da2:	2101      	movs	r1, #1
 8003da4:	2300      	movs	r3, #0
 8003da6:	e7e3      	b.n	8003d70 <d_print_comp_inner+0x13b8>
 8003da8:	2301      	movs	r3, #1
 8003daa:	f8c0 3118 	str.w	r3, [r0, #280]	; 0x118
 8003dae:	f7fe bed1 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003db2:	3701      	adds	r7, #1
 8003db4:	454f      	cmp	r7, r9
 8003db6:	f47f ae46 	bne.w	8003a46 <d_print_comp_inner+0x108e>
 8003dba:	f7fe becb 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003dbe:	6876      	ldr	r6, [r6, #4]
 8003dc0:	2e00      	cmp	r6, #0
 8003dc2:	f001 806e 	beq.w	8004ea2 <d_print_comp_inner+0x24ea>
 8003dc6:	2f04      	cmp	r7, #4
 8003dc8:	f103 0310 	add.w	r3, r3, #16
 8003dcc:	f47f a9bd 	bne.w	800314a <d_print_comp_inner+0x792>
 8003dd0:	f8c4 0114 	str.w	r0, [r4, #276]	; 0x114
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8003dda:	f7fe bebb 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003dde:	4e8e      	ldr	r6, [pc, #568]	; (8004018 <d_print_comp_inner+0x1660>)
 8003de0:	686a      	ldr	r2, [r5, #4]
 8003de2:	4641      	mov	r1, r8
 8003de4:	4620      	mov	r0, r4
 8003de6:	f001 fb8b 	bl	8005500 <d_print_comp>
 8003dea:	f106 0a04 	add.w	sl, r6, #4
 8003dee:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003df2:	f04f 0900 	mov.w	r9, #0
 8003df6:	e008      	b.n	8003e0a <d_print_comp_inner+0x1452>
 8003df8:	460b      	mov	r3, r1
 8003dfa:	3101      	adds	r1, #1
 8003dfc:	45b2      	cmp	sl, r6
 8003dfe:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003e02:	54e7      	strb	r7, [r4, r3]
 8003e04:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003e08:	d013      	beq.n	8003e32 <d_print_comp_inner+0x147a>
 8003e0a:	29ff      	cmp	r1, #255	; 0xff
 8003e0c:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003e10:	d1f2      	bne.n	8003df8 <d_print_comp_inner+0x1440>
 8003e12:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003e16:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8003e1a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003e1e:	4620      	mov	r0, r4
 8003e20:	4798      	blx	r3
 8003e22:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003e26:	3301      	adds	r3, #1
 8003e28:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	2300      	movs	r3, #0
 8003e30:	e7e4      	b.n	8003dfc <d_print_comp_inner+0x1444>
 8003e32:	68aa      	ldr	r2, [r5, #8]
 8003e34:	4641      	mov	r1, r8
 8003e36:	4620      	mov	r0, r4
 8003e38:	f001 fb62 	bl	8005500 <d_print_comp>
 8003e3c:	f7fe be8a 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003e40:	686a      	ldr	r2, [r5, #4]
 8003e42:	4641      	mov	r1, r8
 8003e44:	4620      	mov	r0, r4
 8003e46:	f001 fb5b 	bl	8005500 <d_print_comp>
 8003e4a:	f7fe be83 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003e4e:	686a      	ldr	r2, [r5, #4]
 8003e50:	4641      	mov	r1, r8
 8003e52:	4620      	mov	r0, r4
 8003e54:	f001 fb54 	bl	8005500 <d_print_comp>
 8003e58:	f7fe be7c 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003e5c:	686a      	ldr	r2, [r5, #4]
 8003e5e:	4641      	mov	r1, r8
 8003e60:	4620      	mov	r0, r4
 8003e62:	f001 fb4d 	bl	8005500 <d_print_comp>
 8003e66:	f7fe be75 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003e6a:	686a      	ldr	r2, [r5, #4]
 8003e6c:	4641      	mov	r1, r8
 8003e6e:	4620      	mov	r0, r4
 8003e70:	f001 fb46 	bl	8005500 <d_print_comp>
 8003e74:	f7fe be6e 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003e78:	686a      	ldr	r2, [r5, #4]
 8003e7a:	4641      	mov	r1, r8
 8003e7c:	4620      	mov	r0, r4
 8003e7e:	f001 fb3f 	bl	8005500 <d_print_comp>
 8003e82:	f7fe be67 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003e86:	686a      	ldr	r2, [r5, #4]
 8003e88:	4641      	mov	r1, r8
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f001 fb38 	bl	8005500 <d_print_comp>
 8003e90:	f7fe be60 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003e94:	686a      	ldr	r2, [r5, #4]
 8003e96:	4641      	mov	r1, r8
 8003e98:	4620      	mov	r0, r4
 8003e9a:	f001 fb31 	bl	8005500 <d_print_comp>
 8003e9e:	f7fe be59 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003ea2:	686a      	ldr	r2, [r5, #4]
 8003ea4:	4641      	mov	r1, r8
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	f001 fb2a 	bl	8005500 <d_print_comp>
 8003eac:	f7fe be52 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003eb0:	686a      	ldr	r2, [r5, #4]
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f001 fb23 	bl	8005500 <d_print_comp>
 8003eba:	f7fe be4b 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003ebe:	4641      	mov	r1, r8
 8003ec0:	68aa      	ldr	r2, [r5, #8]
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f001 fb1c 	bl	8005500 <d_print_comp>
 8003ec8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003ecc:	29ff      	cmp	r1, #255	; 0xff
 8003ece:	f000 8560 	beq.w	8004992 <d_print_comp_inner+0x1fda>
 8003ed2:	1c4a      	adds	r2, r1, #1
 8003ed4:	235d      	movs	r3, #93	; 0x5d
 8003ed6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003eda:	5463      	strb	r3, [r4, r1]
 8003edc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003ee0:	f7fe be38 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003ee4:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8003ee8:	4e4c      	ldr	r6, [pc, #304]	; (800401c <d_print_comp_inner+0x1664>)
 8003eea:	3301      	adds	r3, #1
 8003eec:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8003ef0:	4641      	mov	r1, r8
 8003ef2:	686a      	ldr	r2, [r5, #4]
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	f001 fb03 	bl	8005500 <d_print_comp>
 8003efa:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
 8003efe:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003f02:	3b01      	subs	r3, #1
 8003f04:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
 8003f08:	f106 0902 	add.w	r9, r6, #2
 8003f0c:	f04f 0800 	mov.w	r8, #0
 8003f10:	e008      	b.n	8003f24 <d_print_comp_inner+0x156c>
 8003f12:	460b      	mov	r3, r1
 8003f14:	3101      	adds	r1, #1
 8003f16:	454e      	cmp	r6, r9
 8003f18:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003f1c:	54e7      	strb	r7, [r4, r3]
 8003f1e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8003f22:	d013      	beq.n	8003f4c <d_print_comp_inner+0x1594>
 8003f24:	29ff      	cmp	r1, #255	; 0xff
 8003f26:	f816 7b01 	ldrb.w	r7, [r6], #1
 8003f2a:	d1f2      	bne.n	8003f12 <d_print_comp_inner+0x155a>
 8003f2c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003f30:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003f34:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003f38:	4620      	mov	r0, r4
 8003f3a:	4798      	blx	r3
 8003f3c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003f40:	3301      	adds	r3, #1
 8003f42:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003f46:	2101      	movs	r1, #1
 8003f48:	2300      	movs	r3, #0
 8003f4a:	e7e4      	b.n	8003f16 <d_print_comp_inner+0x155e>
 8003f4c:	68aa      	ldr	r2, [r5, #8]
 8003f4e:	4934      	ldr	r1, [pc, #208]	; (8004020 <d_print_comp_inner+0x1668>)
 8003f50:	3201      	adds	r2, #1
 8003f52:	a804      	add	r0, sp, #16
 8003f54:	f00d fb42 	bl	80115dc <sprintf>
 8003f58:	a804      	add	r0, sp, #16
 8003f5a:	f002 fceb 	bl	8006934 <strlen>
 8003f5e:	b318      	cbz	r0, 8003fa8 <d_print_comp_inner+0x15f0>
 8003f60:	ad04      	add	r5, sp, #16
 8003f62:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003f66:	182f      	adds	r7, r5, r0
 8003f68:	f04f 0800 	mov.w	r8, #0
 8003f6c:	e008      	b.n	8003f80 <d_print_comp_inner+0x15c8>
 8003f6e:	460b      	mov	r3, r1
 8003f70:	3101      	adds	r1, #1
 8003f72:	42af      	cmp	r7, r5
 8003f74:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8003f78:	54e6      	strb	r6, [r4, r3]
 8003f7a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8003f7e:	d015      	beq.n	8003fac <d_print_comp_inner+0x15f4>
 8003f80:	29ff      	cmp	r1, #255	; 0xff
 8003f82:	f815 6b01 	ldrb.w	r6, [r5], #1
 8003f86:	d1f2      	bne.n	8003f6e <d_print_comp_inner+0x15b6>
 8003f88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8003f8c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8003f90:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8003f94:	4620      	mov	r0, r4
 8003f96:	4798      	blx	r3
 8003f98:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	e7e4      	b.n	8003f72 <d_print_comp_inner+0x15ba>
 8003fa8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003fac:	29ff      	cmp	r1, #255	; 0xff
 8003fae:	f000 8560 	beq.w	8004a72 <d_print_comp_inner+0x20ba>
 8003fb2:	1c4a      	adds	r2, r1, #1
 8003fb4:	237d      	movs	r3, #125	; 0x7d
 8003fb6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003fba:	5463      	strb	r3, [r4, r1]
 8003fbc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003fc0:	f7fe bdc8 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003fc4:	686a      	ldr	r2, [r5, #4]
 8003fc6:	4641      	mov	r1, r8
 8003fc8:	4620      	mov	r0, r4
 8003fca:	f001 fa99 	bl	8005500 <d_print_comp>
 8003fce:	f7fe bdc1 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003fd2:	4641      	mov	r1, r8
 8003fd4:	68aa      	ldr	r2, [r5, #8]
 8003fd6:	4620      	mov	r0, r4
 8003fd8:	f001 fa92 	bl	8005500 <d_print_comp>
 8003fdc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8003fe0:	29ff      	cmp	r1, #255	; 0xff
 8003fe2:	f000 850b 	beq.w	80049fc <d_print_comp_inner+0x2044>
 8003fe6:	1c4a      	adds	r2, r1, #1
 8003fe8:	235d      	movs	r3, #93	; 0x5d
 8003fea:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8003fee:	5463      	strb	r3, [r4, r1]
 8003ff0:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8003ff4:	f7fe bdae 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8003ff8:	686a      	ldr	r2, [r5, #4]
 8003ffa:	4641      	mov	r1, r8
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	f001 fa7f 	bl	8005500 <d_print_comp>
 8004002:	f7fe bda7 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004006:	bf00      	nop
 8004008:	08018504 	.word	0x08018504
 800400c:	080186fc 	.word	0x080186fc
 8004010:	0801878f 	.word	0x0801878f
 8004014:	0801874f 	.word	0x0801874f
 8004018:	080185a0 	.word	0x080185a0
 800401c:	0801879c 	.word	0x0801879c
 8004020:	080184f0 	.word	0x080184f0
 8004024:	f8da 5004 	ldr.w	r5, [sl, #4]
 8004028:	782b      	ldrb	r3, [r5, #0]
 800402a:	3b61      	subs	r3, #97	; 0x61
 800402c:	2b19      	cmp	r3, #25
 800402e:	d809      	bhi.n	8004044 <d_print_comp_inner+0x168c>
 8004030:	29ff      	cmp	r1, #255	; 0xff
 8004032:	f000 8793 	beq.w	8004f5c <d_print_comp_inner+0x25a4>
 8004036:	2320      	movs	r3, #32
 8004038:	1c4a      	adds	r2, r1, #1
 800403a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800403e:	5463      	strb	r3, [r4, r1]
 8004040:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004044:	19eb      	adds	r3, r5, r7
 8004046:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800404a:	2b20      	cmp	r3, #32
 800404c:	bf08      	it	eq
 800404e:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
 8004052:	2f00      	cmp	r7, #0
 8004054:	f43e ad7e 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8004058:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800405c:	442f      	add	r7, r5
 800405e:	f04f 0800 	mov.w	r8, #0
 8004062:	e009      	b.n	8004078 <d_print_comp_inner+0x16c0>
 8004064:	460b      	mov	r3, r1
 8004066:	3101      	adds	r1, #1
 8004068:	42af      	cmp	r7, r5
 800406a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800406e:	54e6      	strb	r6, [r4, r3]
 8004070:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004074:	f43e ad6e 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8004078:	29ff      	cmp	r1, #255	; 0xff
 800407a:	f815 6b01 	ldrb.w	r6, [r5], #1
 800407e:	d1f1      	bne.n	8004064 <d_print_comp_inner+0x16ac>
 8004080:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004084:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004088:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800408c:	4620      	mov	r0, r4
 800408e:	4798      	blx	r3
 8004090:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004094:	3301      	adds	r3, #1
 8004096:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800409a:	2101      	movs	r1, #1
 800409c:	2300      	movs	r3, #0
 800409e:	e7e3      	b.n	8004068 <d_print_comp_inner+0x16b0>
 80040a0:	f8d4 2144 	ldr.w	r2, [r4, #324]	; 0x144
 80040a4:	b13a      	cbz	r2, 80040b6 <d_print_comp_inner+0x16fe>
 80040a6:	ab14      	add	r3, sp, #80	; 0x50
 80040a8:	f8d4 1110 	ldr.w	r1, [r4, #272]	; 0x110
 80040ac:	f843 1d48 	str.w	r1, [r3, #-72]!
 80040b0:	9203      	str	r2, [sp, #12]
 80040b2:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80040b6:	686b      	ldr	r3, [r5, #4]
 80040b8:	781a      	ldrb	r2, [r3, #0]
 80040ba:	2a04      	cmp	r2, #4
 80040bc:	f000 830e 	beq.w	80046dc <d_print_comp_inner+0x1d24>
 80040c0:	a804      	add	r0, sp, #16
 80040c2:	461a      	mov	r2, r3
 80040c4:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
 80040c8:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
 80040cc:	4641      	mov	r1, r8
 80040ce:	4620      	mov	r0, r4
 80040d0:	9304      	str	r3, [sp, #16]
 80040d2:	9505      	str	r5, [sp, #20]
 80040d4:	f7fe fc70 	bl	80029b8 <d_print_comp_inner>
 80040d8:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 80040dc:	9a05      	ldr	r2, [sp, #20]
 80040de:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	f43e ad36 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 80040e8:	9b02      	ldr	r3, [sp, #8]
 80040ea:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80040ee:	f7fe bd31 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80040f2:	68aa      	ldr	r2, [r5, #8]
 80040f4:	4641      	mov	r1, r8
 80040f6:	4620      	mov	r0, r4
 80040f8:	f001 fa02 	bl	8005500 <d_print_comp>
 80040fc:	f7fe bd2a 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004100:	686a      	ldr	r2, [r5, #4]
 8004102:	49d8      	ldr	r1, [pc, #864]	; (8004464 <d_print_comp_inner+0x1aac>)
 8004104:	3201      	adds	r2, #1
 8004106:	a804      	add	r0, sp, #16
 8004108:	f00d fa68 	bl	80115dc <sprintf>
 800410c:	a804      	add	r0, sp, #16
 800410e:	f002 fc11 	bl	8006934 <strlen>
 8004112:	b318      	cbz	r0, 800415c <d_print_comp_inner+0x17a4>
 8004114:	ad04      	add	r5, sp, #16
 8004116:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800411a:	182f      	adds	r7, r5, r0
 800411c:	f04f 0800 	mov.w	r8, #0
 8004120:	e008      	b.n	8004134 <d_print_comp_inner+0x177c>
 8004122:	460b      	mov	r3, r1
 8004124:	3101      	adds	r1, #1
 8004126:	42bd      	cmp	r5, r7
 8004128:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800412c:	54e6      	strb	r6, [r4, r3]
 800412e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004132:	d015      	beq.n	8004160 <d_print_comp_inner+0x17a8>
 8004134:	29ff      	cmp	r1, #255	; 0xff
 8004136:	f815 6b01 	ldrb.w	r6, [r5], #1
 800413a:	d1f2      	bne.n	8004122 <d_print_comp_inner+0x176a>
 800413c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004140:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004144:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004148:	4620      	mov	r0, r4
 800414a:	4798      	blx	r3
 800414c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004150:	3301      	adds	r3, #1
 8004152:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004156:	2101      	movs	r1, #1
 8004158:	2300      	movs	r3, #0
 800415a:	e7e4      	b.n	8004126 <d_print_comp_inner+0x176e>
 800415c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004160:	29ff      	cmp	r1, #255	; 0xff
 8004162:	f000 8404 	beq.w	800496e <d_print_comp_inner+0x1fb6>
 8004166:	1c4a      	adds	r2, r1, #1
 8004168:	237d      	movs	r3, #125	; 0x7d
 800416a:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800416e:	5463      	strb	r3, [r4, r1]
 8004170:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004174:	f7fe bcee 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004178:	686a      	ldr	r2, [r5, #4]
 800417a:	4641      	mov	r1, r8
 800417c:	4620      	mov	r0, r4
 800417e:	f001 f9bf 	bl	8005500 <d_print_comp>
 8004182:	f7fe bce7 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004186:	686a      	ldr	r2, [r5, #4]
 8004188:	4641      	mov	r1, r8
 800418a:	4620      	mov	r0, r4
 800418c:	f001 f9b8 	bl	8005500 <d_print_comp>
 8004190:	f7fe bce0 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004194:	686a      	ldr	r2, [r5, #4]
 8004196:	4641      	mov	r1, r8
 8004198:	4620      	mov	r0, r4
 800419a:	f001 f9b1 	bl	8005500 <d_print_comp>
 800419e:	f7fe bcd9 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80041a2:	4eb1      	ldr	r6, [pc, #708]	; (8004468 <d_print_comp_inner+0x1ab0>)
 80041a4:	68aa      	ldr	r2, [r5, #8]
 80041a6:	4641      	mov	r1, r8
 80041a8:	4620      	mov	r0, r4
 80041aa:	f001 f9a9 	bl	8005500 <d_print_comp>
 80041ae:	f106 0a05 	add.w	sl, r6, #5
 80041b2:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80041b6:	f04f 0900 	mov.w	r9, #0
 80041ba:	e008      	b.n	80041ce <d_print_comp_inner+0x1816>
 80041bc:	460b      	mov	r3, r1
 80041be:	3101      	adds	r1, #1
 80041c0:	4556      	cmp	r6, sl
 80041c2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80041c6:	54e7      	strb	r7, [r4, r3]
 80041c8:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80041cc:	d013      	beq.n	80041f6 <d_print_comp_inner+0x183e>
 80041ce:	29ff      	cmp	r1, #255	; 0xff
 80041d0:	f816 7b01 	ldrb.w	r7, [r6], #1
 80041d4:	d1f2      	bne.n	80041bc <d_print_comp_inner+0x1804>
 80041d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80041da:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80041de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80041e2:	4620      	mov	r0, r4
 80041e4:	4798      	blx	r3
 80041e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80041ea:	3301      	adds	r3, #1
 80041ec:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80041f0:	2101      	movs	r1, #1
 80041f2:	2300      	movs	r3, #0
 80041f4:	e7e4      	b.n	80041c0 <d_print_comp_inner+0x1808>
 80041f6:	686a      	ldr	r2, [r5, #4]
 80041f8:	4641      	mov	r1, r8
 80041fa:	4620      	mov	r0, r4
 80041fc:	f001 f980 	bl	8005500 <d_print_comp>
 8004200:	f7fe bca8 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004204:	686a      	ldr	r2, [r5, #4]
 8004206:	4641      	mov	r1, r8
 8004208:	4620      	mov	r0, r4
 800420a:	f001 f979 	bl	8005500 <d_print_comp>
 800420e:	f7fe bca1 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004212:	686a      	ldr	r2, [r5, #4]
 8004214:	4641      	mov	r1, r8
 8004216:	4620      	mov	r0, r4
 8004218:	f001 f972 	bl	8005500 <d_print_comp>
 800421c:	f7fe bc9a 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004220:	686a      	ldr	r2, [r5, #4]
 8004222:	4641      	mov	r1, r8
 8004224:	4620      	mov	r0, r4
 8004226:	f001 f96b 	bl	8005500 <d_print_comp>
 800422a:	f7fe bc93 	b.w	8002b54 <d_print_comp_inner+0x19c>
 800422e:	4641      	mov	r1, r8
 8004230:	686a      	ldr	r2, [r5, #4]
 8004232:	4620      	mov	r0, r4
 8004234:	f001 f964 	bl	8005500 <d_print_comp>
 8004238:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800423c:	29ff      	cmp	r1, #255	; 0xff
 800423e:	f000 842a 	beq.w	8004a96 <d_print_comp_inner+0x20de>
 8004242:	1c4a      	adds	r2, r1, #1
 8004244:	2329      	movs	r3, #41	; 0x29
 8004246:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800424a:	5463      	strb	r3, [r4, r1]
 800424c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004250:	f7fe bc80 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004254:	686a      	ldr	r2, [r5, #4]
 8004256:	4641      	mov	r1, r8
 8004258:	4620      	mov	r0, r4
 800425a:	f001 f951 	bl	8005500 <d_print_comp>
 800425e:	f7fe bc79 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004262:	2f04      	cmp	r7, #4
 8004264:	f1a6 0410 	sub.w	r4, r6, #16
 8004268:	f106 0e10 	add.w	lr, r6, #16
 800426c:	f000 8722 	beq.w	80050b4 <d_print_comp_inner+0x26fc>
 8004270:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004274:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8004278:	2300      	movs	r3, #0
 800427a:	f84e 4c10 	str.w	r4, [lr, #-16]
 800427e:	e906 1008 	stmdb	r6, {r3, ip}
 8004282:	f8ca 6114 	str.w	r6, [sl, #276]	; 0x114
 8004286:	f846 5c0c 	str.w	r5, [r6, #-12]
 800428a:	686d      	ldr	r5, [r5, #4]
 800428c:	3701      	adds	r7, #1
 800428e:	4676      	mov	r6, lr
 8004290:	f7fe bf84 	b.w	800319c <d_print_comp_inner+0x7e4>
 8004294:	68aa      	ldr	r2, [r5, #8]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	460e      	mov	r6, r1
 800429a:	4620      	mov	r0, r4
 800429c:	4641      	mov	r1, r8
 800429e:	f8d4 5124 	ldr.w	r5, [r4, #292]	; 0x124
 80042a2:	f001 f92d 	bl	8005500 <d_print_comp>
 80042a6:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
 80042aa:	9b00      	ldr	r3, [sp, #0]
 80042ac:	4295      	cmp	r5, r2
 80042ae:	f47e ac51 	bne.w	8002b54 <d_print_comp_inner+0x19c>
 80042b2:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
 80042b6:	42b2      	cmp	r2, r6
 80042b8:	f47e ac4c 	bne.w	8002b54 <d_print_comp_inner+0x19c>
 80042bc:	3b01      	subs	r3, #1
 80042be:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80042c2:	f7fe bc47 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80042c6:	462a      	mov	r2, r5
 80042c8:	4641      	mov	r1, r8
 80042ca:	4620      	mov	r0, r4
 80042cc:	f001 f928 	bl	8005520 <d_print_mod>
 80042d0:	f7fe bc70 	b.w	8002bb4 <d_print_comp_inner+0x1fc>
 80042d4:	686b      	ldr	r3, [r5, #4]
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	f1b9 0f00 	cmp.w	r9, #0
 80042dc:	f47f abae 	bne.w	8003a3c <d_print_comp_inner+0x1084>
 80042e0:	f7fe bc38 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80042e4:	463a      	mov	r2, r7
 80042e6:	a804      	add	r0, sp, #16
 80042e8:	495e      	ldr	r1, [pc, #376]	; (8004464 <d_print_comp_inner+0x1aac>)
 80042ea:	f00d f977 	bl	80115dc <sprintf>
 80042ee:	a804      	add	r0, sp, #16
 80042f0:	f002 fb20 	bl	8006934 <strlen>
 80042f4:	b318      	cbz	r0, 800433e <d_print_comp_inner+0x1986>
 80042f6:	ad04      	add	r5, sp, #16
 80042f8:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80042fc:	182f      	adds	r7, r5, r0
 80042fe:	f04f 0800 	mov.w	r8, #0
 8004302:	e008      	b.n	8004316 <d_print_comp_inner+0x195e>
 8004304:	460b      	mov	r3, r1
 8004306:	3101      	adds	r1, #1
 8004308:	42af      	cmp	r7, r5
 800430a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800430e:	54e6      	strb	r6, [r4, r3]
 8004310:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004314:	d015      	beq.n	8004342 <d_print_comp_inner+0x198a>
 8004316:	29ff      	cmp	r1, #255	; 0xff
 8004318:	f815 6b01 	ldrb.w	r6, [r5], #1
 800431c:	d1f2      	bne.n	8004304 <d_print_comp_inner+0x194c>
 800431e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004322:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004326:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800432a:	4620      	mov	r0, r4
 800432c:	4798      	blx	r3
 800432e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004332:	3301      	adds	r3, #1
 8004334:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004338:	2101      	movs	r1, #1
 800433a:	2300      	movs	r3, #0
 800433c:	e7e4      	b.n	8004308 <d_print_comp_inner+0x1950>
 800433e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004342:	29ff      	cmp	r1, #255	; 0xff
 8004344:	f000 84dd 	beq.w	8004d02 <d_print_comp_inner+0x234a>
 8004348:	1c4a      	adds	r2, r1, #1
 800434a:	237d      	movs	r3, #125	; 0x7d
 800434c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004350:	5463      	strb	r3, [r4, r1]
 8004352:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004356:	f7fe bbfd 	b.w	8002b54 <d_print_comp_inner+0x19c>
 800435a:	2700      	movs	r7, #0
 800435c:	f7ff ba1f 	b.w	800379e <d_print_comp_inner+0xde6>
 8004360:	68df      	ldr	r7, [r3, #12]
 8004362:	689d      	ldr	r5, [r3, #8]
 8004364:	2f00      	cmp	r7, #0
 8004366:	f43e abf5 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 800436a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800436e:	442f      	add	r7, r5
 8004370:	f04f 0800 	mov.w	r8, #0
 8004374:	e009      	b.n	800438a <d_print_comp_inner+0x19d2>
 8004376:	460b      	mov	r3, r1
 8004378:	3101      	adds	r1, #1
 800437a:	42bd      	cmp	r5, r7
 800437c:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004380:	54e6      	strb	r6, [r4, r3]
 8004382:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004386:	f43e abe5 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 800438a:	29ff      	cmp	r1, #255	; 0xff
 800438c:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004390:	d1f1      	bne.n	8004376 <d_print_comp_inner+0x19be>
 8004392:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004396:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800439a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800439e:	4620      	mov	r0, r4
 80043a0:	4798      	blx	r3
 80043a2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80043a6:	3301      	adds	r3, #1
 80043a8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80043ac:	2101      	movs	r1, #1
 80043ae:	2300      	movs	r3, #0
 80043b0:	e7e3      	b.n	800437a <d_print_comp_inner+0x19c2>
 80043b2:	686e      	ldr	r6, [r5, #4]
 80043b4:	68af      	ldr	r7, [r5, #8]
 80043b6:	4437      	add	r7, r6
 80043b8:	42be      	cmp	r6, r7
 80043ba:	f4be abcb 	bcs.w	8002b54 <d_print_comp_inner+0x19c>
 80043be:	f04f 0800 	mov.w	r8, #0
 80043c2:	e00d      	b.n	80043e0 <d_print_comp_inner+0x1a28>
 80043c4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80043c8:	29ff      	cmp	r1, #255	; 0xff
 80043ca:	d036      	beq.n	800443a <d_print_comp_inner+0x1a82>
 80043cc:	1c4b      	adds	r3, r1, #1
 80043ce:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80043d2:	5465      	strb	r5, [r4, r1]
 80043d4:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80043d8:	3601      	adds	r6, #1
 80043da:	42b7      	cmp	r7, r6
 80043dc:	f67e abba 	bls.w	8002b54 <d_print_comp_inner+0x19c>
 80043e0:	1bbb      	subs	r3, r7, r6
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	7835      	ldrb	r5, [r6, #0]
 80043e6:	dded      	ble.n	80043c4 <d_print_comp_inner+0x1a0c>
 80043e8:	2d5f      	cmp	r5, #95	; 0x5f
 80043ea:	d1eb      	bne.n	80043c4 <d_print_comp_inner+0x1a0c>
 80043ec:	7873      	ldrb	r3, [r6, #1]
 80043ee:	2b5f      	cmp	r3, #95	; 0x5f
 80043f0:	d1e8      	bne.n	80043c4 <d_print_comp_inner+0x1a0c>
 80043f2:	78b3      	ldrb	r3, [r6, #2]
 80043f4:	2b55      	cmp	r3, #85	; 0x55
 80043f6:	d1e5      	bne.n	80043c4 <d_print_comp_inner+0x1a0c>
 80043f8:	1cf3      	adds	r3, r6, #3
 80043fa:	429f      	cmp	r7, r3
 80043fc:	d9e2      	bls.n	80043c4 <d_print_comp_inner+0x1a0c>
 80043fe:	2000      	movs	r0, #0
 8004400:	e006      	b.n	8004410 <d_print_comp_inner+0x1a58>
 8004402:	f1a5 0237 	sub.w	r2, r5, #55	; 0x37
 8004406:	429f      	cmp	r7, r3
 8004408:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 800440c:	f000 85c7 	beq.w	8004f9e <d_print_comp_inner+0x25e6>
 8004410:	4699      	mov	r9, r3
 8004412:	f813 5b01 	ldrb.w	r5, [r3], #1
 8004416:	f1a5 0230 	sub.w	r2, r5, #48	; 0x30
 800441a:	b2d1      	uxtb	r1, r2
 800441c:	2909      	cmp	r1, #9
 800441e:	f1a5 0e41 	sub.w	lr, r5, #65	; 0x41
 8004422:	d9f0      	bls.n	8004406 <d_print_comp_inner+0x1a4e>
 8004424:	f1be 0f05 	cmp.w	lr, #5
 8004428:	f1a5 0261 	sub.w	r2, r5, #97	; 0x61
 800442c:	d9e9      	bls.n	8004402 <d_print_comp_inner+0x1a4a>
 800442e:	2a05      	cmp	r2, #5
 8004430:	f200 8743 	bhi.w	80052ba <d_print_comp_inner+0x2902>
 8004434:	f1a5 0257 	sub.w	r2, r5, #87	; 0x57
 8004438:	e7e5      	b.n	8004406 <d_print_comp_inner+0x1a4e>
 800443a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800443e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004442:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004446:	4620      	mov	r0, r4
 8004448:	4798      	blx	r3
 800444a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800444e:	3301      	adds	r3, #1
 8004450:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004454:	2100      	movs	r1, #0
 8004456:	2301      	movs	r3, #1
 8004458:	e7b9      	b.n	80043ce <d_print_comp_inner+0x1a16>
 800445a:	4d04      	ldr	r5, [pc, #16]	; (800446c <d_print_comp_inner+0x1ab4>)
 800445c:	4698      	mov	r8, r3
 800445e:	1daf      	adds	r7, r5, #6
 8004460:	e010      	b.n	8004484 <d_print_comp_inner+0x1acc>
 8004462:	bf00      	nop
 8004464:	080184f0 	.word	0x080184f0
 8004468:	08018664 	.word	0x08018664
 800446c:	080186c4 	.word	0x080186c4
 8004470:	460b      	mov	r3, r1
 8004472:	3101      	adds	r1, #1
 8004474:	42bd      	cmp	r5, r7
 8004476:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800447a:	54e6      	strb	r6, [r4, r3]
 800447c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004480:	f43e ab68 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8004484:	29ff      	cmp	r1, #255	; 0xff
 8004486:	f815 6b01 	ldrb.w	r6, [r5], #1
 800448a:	d1f1      	bne.n	8004470 <d_print_comp_inner+0x1ab8>
 800448c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004490:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004494:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004498:	4620      	mov	r0, r4
 800449a:	4798      	blx	r3
 800449c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80044a0:	3301      	adds	r3, #1
 80044a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80044a6:	2101      	movs	r1, #1
 80044a8:	2300      	movs	r3, #0
 80044aa:	e7e3      	b.n	8004474 <d_print_comp_inner+0x1abc>
 80044ac:	782b      	ldrb	r3, [r5, #0]
 80044ae:	2b2f      	cmp	r3, #47	; 0x2f
 80044b0:	f47e ab6a 	bne.w	8002b88 <d_print_comp_inner+0x1d0>
 80044b4:	4601      	mov	r1, r0
 80044b6:	460d      	mov	r5, r1
 80044b8:	f8d4 c114 	ldr.w	ip, [r4, #276]	; 0x114
 80044bc:	f7fe bb66 	b.w	8002b8c <d_print_comp_inner+0x1d4>
 80044c0:	4dd7      	ldr	r5, [pc, #860]	; (8004820 <d_print_comp_inner+0x1e68>)
 80044c2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80044c6:	f105 0804 	add.w	r8, r5, #4
 80044ca:	e009      	b.n	80044e0 <d_print_comp_inner+0x1b28>
 80044cc:	460b      	mov	r3, r1
 80044ce:	3101      	adds	r1, #1
 80044d0:	45a8      	cmp	r8, r5
 80044d2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80044d6:	54e6      	strb	r6, [r4, r3]
 80044d8:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80044dc:	f43e ab3a 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 80044e0:	29ff      	cmp	r1, #255	; 0xff
 80044e2:	f815 6b01 	ldrb.w	r6, [r5], #1
 80044e6:	d1f1      	bne.n	80044cc <d_print_comp_inner+0x1b14>
 80044e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80044ec:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80044f0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80044f4:	4620      	mov	r0, r4
 80044f6:	4798      	blx	r3
 80044f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80044fc:	3301      	adds	r3, #1
 80044fe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004502:	2101      	movs	r1, #1
 8004504:	2300      	movs	r3, #0
 8004506:	e7e3      	b.n	80044d0 <d_print_comp_inner+0x1b18>
 8004508:	4ec6      	ldr	r6, [pc, #792]	; (8004824 <d_print_comp_inner+0x1e6c>)
 800450a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800450e:	f106 0905 	add.w	r9, r6, #5
 8004512:	f04f 0800 	mov.w	r8, #0
 8004516:	e008      	b.n	800452a <d_print_comp_inner+0x1b72>
 8004518:	460b      	mov	r3, r1
 800451a:	3101      	adds	r1, #1
 800451c:	45b1      	cmp	r9, r6
 800451e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004522:	54e7      	strb	r7, [r4, r3]
 8004524:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004528:	d013      	beq.n	8004552 <d_print_comp_inner+0x1b9a>
 800452a:	29ff      	cmp	r1, #255	; 0xff
 800452c:	f816 7b01 	ldrb.w	r7, [r6], #1
 8004530:	d1f2      	bne.n	8004518 <d_print_comp_inner+0x1b60>
 8004532:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004536:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800453a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800453e:	4620      	mov	r0, r4
 8004540:	4798      	blx	r3
 8004542:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004546:	3301      	adds	r3, #1
 8004548:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800454c:	2101      	movs	r1, #1
 800454e:	2300      	movs	r3, #0
 8004550:	e7e4      	b.n	800451c <d_print_comp_inner+0x1b64>
 8004552:	686a      	ldr	r2, [r5, #4]
 8004554:	49b4      	ldr	r1, [pc, #720]	; (8004828 <d_print_comp_inner+0x1e70>)
 8004556:	3201      	adds	r2, #1
 8004558:	a804      	add	r0, sp, #16
 800455a:	f00d f83f 	bl	80115dc <sprintf>
 800455e:	a804      	add	r0, sp, #16
 8004560:	f002 f9e8 	bl	8006934 <strlen>
 8004564:	2800      	cmp	r0, #0
 8004566:	f43e aaf5 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 800456a:	ad04      	add	r5, sp, #16
 800456c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004570:	182f      	adds	r7, r5, r0
 8004572:	f04f 0800 	mov.w	r8, #0
 8004576:	e009      	b.n	800458c <d_print_comp_inner+0x1bd4>
 8004578:	460b      	mov	r3, r1
 800457a:	3101      	adds	r1, #1
 800457c:	42af      	cmp	r7, r5
 800457e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004582:	54e6      	strb	r6, [r4, r3]
 8004584:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8004588:	f43e aae4 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 800458c:	29ff      	cmp	r1, #255	; 0xff
 800458e:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004592:	d1f1      	bne.n	8004578 <d_print_comp_inner+0x1bc0>
 8004594:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004598:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800459c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80045a0:	4620      	mov	r0, r4
 80045a2:	4798      	blx	r3
 80045a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80045a8:	3301      	adds	r3, #1
 80045aa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80045ae:	2101      	movs	r1, #1
 80045b0:	2300      	movs	r3, #0
 80045b2:	e7e3      	b.n	800457c <d_print_comp_inner+0x1bc4>
 80045b4:	f021 0860 	bic.w	r8, r1, #96	; 0x60
 80045b8:	f105 0208 	add.w	r2, r5, #8
 80045bc:	4641      	mov	r1, r8
 80045be:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 80045c2:	f001 fc91 	bl	8005ee8 <d_print_function_type.isra.11>
 80045c6:	686a      	ldr	r2, [r5, #4]
 80045c8:	2a00      	cmp	r2, #0
 80045ca:	f43e aac3 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 80045ce:	4641      	mov	r1, r8
 80045d0:	4620      	mov	r0, r4
 80045d2:	f000 ff95 	bl	8005500 <d_print_comp>
 80045d6:	f7fe babd 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80045da:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80045de:	f7ff b9a2 	b.w	8003926 <d_print_comp_inner+0xf6e>
 80045e2:	4e92      	ldr	r6, [pc, #584]	; (800482c <d_print_comp_inner+0x1e74>)
 80045e4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80045e8:	f106 0a05 	add.w	sl, r6, #5
 80045ec:	f04f 0900 	mov.w	r9, #0
 80045f0:	e009      	b.n	8004606 <d_print_comp_inner+0x1c4e>
 80045f2:	460b      	mov	r3, r1
 80045f4:	3101      	adds	r1, #1
 80045f6:	45b2      	cmp	sl, r6
 80045f8:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80045fc:	54e7      	strb	r7, [r4, r3]
 80045fe:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8004602:	f43f a97a 	beq.w	80038fa <d_print_comp_inner+0xf42>
 8004606:	29ff      	cmp	r1, #255	; 0xff
 8004608:	f816 7b01 	ldrb.w	r7, [r6], #1
 800460c:	d1f1      	bne.n	80045f2 <d_print_comp_inner+0x1c3a>
 800460e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004612:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8004616:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800461a:	4620      	mov	r0, r4
 800461c:	4798      	blx	r3
 800461e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004622:	3301      	adds	r3, #1
 8004624:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004628:	2101      	movs	r1, #1
 800462a:	2300      	movs	r3, #0
 800462c:	e7e3      	b.n	80045f6 <d_print_comp_inner+0x1c3e>
 800462e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004632:	497f      	ldr	r1, [pc, #508]	; (8004830 <d_print_comp_inner+0x1e78>)
 8004634:	681f      	ldr	r7, [r3, #0]
 8004636:	4638      	mov	r0, r7
 8004638:	f002 f972 	bl	8006920 <strcmp>
 800463c:	f896 a000 	ldrb.w	sl, [r6]
 8004640:	b918      	cbnz	r0, 800464a <d_print_comp_inner+0x1c92>
 8004642:	f1ba 0f03 	cmp.w	sl, #3
 8004646:	f000 851b 	beq.w	8005080 <d_print_comp_inner+0x26c8>
 800464a:	f1ba 0f38 	cmp.w	sl, #56	; 0x38
 800464e:	f000 85fd 	beq.w	800524c <d_print_comp_inner+0x2894>
 8004652:	4978      	ldr	r1, [pc, #480]	; (8004834 <d_print_comp_inner+0x1e7c>)
 8004654:	4638      	mov	r0, r7
 8004656:	f002 f963 	bl	8006920 <strcmp>
 800465a:	4605      	mov	r5, r0
 800465c:	2800      	cmp	r0, #0
 800465e:	f000 8135 	beq.w	80048cc <d_print_comp_inner+0x1f14>
 8004662:	4975      	ldr	r1, [pc, #468]	; (8004838 <d_print_comp_inner+0x1e80>)
 8004664:	4638      	mov	r0, r7
 8004666:	f002 f95b 	bl	8006920 <strcmp>
 800466a:	2800      	cmp	r0, #0
 800466c:	f000 82b6 	beq.w	8004bdc <d_print_comp_inner+0x2224>
 8004670:	464a      	mov	r2, r9
 8004672:	4641      	mov	r1, r8
 8004674:	4620      	mov	r0, r4
 8004676:	f001 fd2b 	bl	80060d0 <d_print_expr_op>
 800467a:	2f00      	cmp	r7, #0
 800467c:	f43f a837 	beq.w	80036ee <d_print_comp_inner+0xd36>
 8004680:	496e      	ldr	r1, [pc, #440]	; (800483c <d_print_comp_inner+0x1e84>)
 8004682:	4638      	mov	r0, r7
 8004684:	f002 f94c 	bl	8006920 <strcmp>
 8004688:	2800      	cmp	r0, #0
 800468a:	f000 8384 	beq.w	8004d96 <d_print_comp_inner+0x23de>
 800468e:	4638      	mov	r0, r7
 8004690:	496b      	ldr	r1, [pc, #428]	; (8004840 <d_print_comp_inner+0x1e88>)
 8004692:	f002 f945 	bl	8006920 <strcmp>
 8004696:	4605      	mov	r5, r0
 8004698:	2800      	cmp	r0, #0
 800469a:	f47f a828 	bne.w	80036ee <d_print_comp_inner+0xd36>
 800469e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 80046a2:	2bff      	cmp	r3, #255	; 0xff
 80046a4:	f000 84db 	beq.w	800505e <d_print_comp_inner+0x26a6>
 80046a8:	1c58      	adds	r0, r3, #1
 80046aa:	2528      	movs	r5, #40	; 0x28
 80046ac:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
 80046b0:	4641      	mov	r1, r8
 80046b2:	54e5      	strb	r5, [r4, r3]
 80046b4:	4632      	mov	r2, r6
 80046b6:	4620      	mov	r0, r4
 80046b8:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 80046bc:	f000 ff20 	bl	8005500 <d_print_comp>
 80046c0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80046c4:	29ff      	cmp	r1, #255	; 0xff
 80046c6:	f000 846d 	beq.w	8004fa4 <d_print_comp_inner+0x25ec>
 80046ca:	2329      	movs	r3, #41	; 0x29
 80046cc:	1c4a      	adds	r2, r1, #1
 80046ce:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80046d2:	5463      	strb	r3, [r4, r1]
 80046d4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80046d8:	f7fe ba3c 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80046dc:	f10d 0910 	add.w	r9, sp, #16
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80046e6:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 80046ea:	4641      	mov	r1, r8
 80046ec:	4620      	mov	r0, r4
 80046ee:	9204      	str	r2, [sp, #16]
 80046f0:	9305      	str	r3, [sp, #20]
 80046f2:	f7fe f961 	bl	80029b8 <d_print_comp_inner>
 80046f6:	f8d4 3144 	ldr.w	r3, [r4, #324]	; 0x144
 80046fa:	9a05      	ldr	r2, [sp, #20]
 80046fc:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8004700:	b113      	cbz	r3, 8004708 <d_print_comp_inner+0x1d50>
 8004702:	9b02      	ldr	r3, [sp, #8]
 8004704:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004708:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 800470c:	2b3c      	cmp	r3, #60	; 0x3c
 800470e:	f000 83d9 	beq.w	8004ec4 <d_print_comp_inner+0x250c>
 8004712:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004716:	29ff      	cmp	r1, #255	; 0xff
 8004718:	f000 8467 	beq.w	8004fea <d_print_comp_inner+0x2632>
 800471c:	1c4a      	adds	r2, r1, #1
 800471e:	233c      	movs	r3, #60	; 0x3c
 8004720:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004724:	5463      	strb	r3, [r4, r1]
 8004726:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800472a:	686b      	ldr	r3, [r5, #4]
 800472c:	f8d4 5128 	ldr.w	r5, [r4, #296]	; 0x128
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 8004736:	461a      	mov	r2, r3
 8004738:	4641      	mov	r1, r8
 800473a:	4620      	mov	r0, r4
 800473c:	9304      	str	r3, [sp, #16]
 800473e:	9505      	str	r5, [sp, #20]
 8004740:	f7fe f93a 	bl	80029b8 <d_print_comp_inner>
 8004744:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8004748:	9a05      	ldr	r2, [sp, #20]
 800474a:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 800474e:	2b3e      	cmp	r3, #62	; 0x3e
 8004750:	f000 83ab 	beq.w	8004eaa <d_print_comp_inner+0x24f2>
 8004754:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004758:	29ff      	cmp	r1, #255	; 0xff
 800475a:	f000 849a 	beq.w	8005092 <d_print_comp_inner+0x26da>
 800475e:	233e      	movs	r3, #62	; 0x3e
 8004760:	1c4a      	adds	r2, r1, #1
 8004762:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004766:	5463      	strb	r3, [r4, r1]
 8004768:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800476c:	f7fe b9f2 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004770:	6852      	ldr	r2, [r2, #4]
 8004772:	7c16      	ldrb	r6, [r2, #16]
 8004774:	2e00      	cmp	r6, #0
 8004776:	f43f a9e7 	beq.w	8003b48 <d_print_comp_inner+0x1190>
 800477a:	2e06      	cmp	r6, #6
 800477c:	f240 8337 	bls.w	8004dee <d_print_comp_inner+0x2436>
 8004780:	2e07      	cmp	r6, #7
 8004782:	f47f a9e1 	bne.w	8003b48 <d_print_comp_inner+0x1190>
 8004786:	68aa      	ldr	r2, [r5, #8]
 8004788:	7811      	ldrb	r1, [r2, #0]
 800478a:	2900      	cmp	r1, #0
 800478c:	f47f a9dc 	bne.w	8003b48 <d_print_comp_inner+0x1190>
 8004790:	6891      	ldr	r1, [r2, #8]
 8004792:	2901      	cmp	r1, #1
 8004794:	f47f a9d8 	bne.w	8003b48 <d_print_comp_inner+0x1190>
 8004798:	2b3c      	cmp	r3, #60	; 0x3c
 800479a:	f47f a9d5 	bne.w	8003b48 <d_print_comp_inner+0x1190>
 800479e:	6853      	ldr	r3, [r2, #4]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b30      	cmp	r3, #48	; 0x30
 80047a4:	f000 8626 	beq.w	80053f4 <d_print_comp_inner+0x2a3c>
 80047a8:	2b31      	cmp	r3, #49	; 0x31
 80047aa:	f47f a9cd 	bne.w	8003b48 <d_print_comp_inner+0x1190>
 80047ae:	2204      	movs	r2, #4
 80047b0:	4924      	ldr	r1, [pc, #144]	; (8004844 <d_print_comp_inner+0x1e8c>)
 80047b2:	f7fb fe2d 	bl	8000410 <d_append_buffer>
 80047b6:	f7fe b9cd 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80047ba:	4e23      	ldr	r6, [pc, #140]	; (8004848 <d_print_comp_inner+0x1e90>)
 80047bc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80047c0:	f106 0a02 	add.w	sl, r6, #2
 80047c4:	e009      	b.n	80047da <d_print_comp_inner+0x1e22>
 80047c6:	460b      	mov	r3, r1
 80047c8:	3101      	adds	r1, #1
 80047ca:	45b2      	cmp	sl, r6
 80047cc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80047d0:	54e7      	strb	r7, [r4, r3]
 80047d2:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 80047d6:	f43e ad52 	beq.w	800327e <d_print_comp_inner+0x8c6>
 80047da:	29ff      	cmp	r1, #255	; 0xff
 80047dc:	f816 7b01 	ldrb.w	r7, [r6], #1
 80047e0:	d1f1      	bne.n	80047c6 <d_print_comp_inner+0x1e0e>
 80047e2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80047e6:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 80047ea:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80047ee:	4620      	mov	r0, r4
 80047f0:	4798      	blx	r3
 80047f2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80047f6:	3301      	adds	r3, #1
 80047f8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80047fc:	2101      	movs	r1, #1
 80047fe:	2300      	movs	r3, #0
 8004800:	e7e3      	b.n	80047ca <d_print_comp_inner+0x1e12>
 8004802:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004806:	29ff      	cmp	r1, #255	; 0xff
 8004808:	f000 84e4 	beq.w	80051d4 <d_print_comp_inner+0x281c>
 800480c:	2220      	movs	r2, #32
 800480e:	1c4b      	adds	r3, r1, #1
 8004810:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8004814:	5462      	strb	r2, [r4, r1]
 8004816:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800481a:	f7fe bdbb 	b.w	8003394 <d_print_comp_inner+0x9dc>
 800481e:	bf00      	nop
 8004820:	08018740 	.word	0x08018740
 8004824:	08018564 	.word	0x08018564
 8004828:	080184f0 	.word	0x080184f0
 800482c:	080186b4 	.word	0x080186b4
 8004830:	080186e8 	.word	0x080186e8
 8004834:	080187bc 	.word	0x080187bc
 8004838:	080184f4 	.word	0x080184f4
 800483c:	080186ec 	.word	0x080186ec
 8004840:	080189fc 	.word	0x080189fc
 8004844:	08018718 	.word	0x08018718
 8004848:	08018540 	.word	0x08018540
 800484c:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004850:	29ff      	cmp	r1, #255	; 0xff
 8004852:	f000 8465 	beq.w	8005120 <d_print_comp_inner+0x2768>
 8004856:	2220      	movs	r2, #32
 8004858:	1c4b      	adds	r3, r1, #1
 800485a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 800485e:	5462      	strb	r2, [r4, r1]
 8004860:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8004864:	f7fe bd80 	b.w	8003368 <d_print_comp_inner+0x9b0>
 8004868:	2700      	movs	r7, #0
 800486a:	55a7      	strb	r7, [r4, r6]
 800486c:	4631      	mov	r1, r6
 800486e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004872:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004876:	4620      	mov	r0, r4
 8004878:	4798      	blx	r3
 800487a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800487e:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8004882:	3301      	adds	r3, #1
 8004884:	463e      	mov	r6, r7
 8004886:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800488a:	f7fe be31 	b.w	80034f0 <d_print_comp_inner+0xb38>
 800488e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004892:	29ff      	cmp	r1, #255	; 0xff
 8004894:	f000 8465 	beq.w	8005162 <d_print_comp_inner+0x27aa>
 8004898:	1c4a      	adds	r2, r1, #1
 800489a:	235b      	movs	r3, #91	; 0x5b
 800489c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80048a0:	5463      	strb	r3, [r4, r1]
 80048a2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80048a6:	4641      	mov	r1, r8
 80048a8:	68aa      	ldr	r2, [r5, #8]
 80048aa:	4620      	mov	r0, r4
 80048ac:	f000 fe28 	bl	8005500 <d_print_comp>
 80048b0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80048b4:	29ff      	cmp	r1, #255	; 0xff
 80048b6:	f000 8312 	beq.w	8004ede <d_print_comp_inner+0x2526>
 80048ba:	235d      	movs	r3, #93	; 0x5d
 80048bc:	1c4a      	adds	r2, r1, #1
 80048be:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80048c2:	5463      	strb	r3, [r4, r1]
 80048c4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80048c8:	f7fe b944 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80048cc:	4631      	mov	r1, r6
 80048ce:	4620      	mov	r0, r4
 80048d0:	f7fb ffca 	bl	8000868 <d_find_pack>
 80048d4:	b928      	cbnz	r0, 80048e2 <d_print_comp_inner+0x1f2a>
 80048d6:	e007      	b.n	80048e8 <d_print_comp_inner+0x1f30>
 80048d8:	6843      	ldr	r3, [r0, #4]
 80048da:	b12b      	cbz	r3, 80048e8 <d_print_comp_inner+0x1f30>
 80048dc:	6880      	ldr	r0, [r0, #8]
 80048de:	3501      	adds	r5, #1
 80048e0:	b110      	cbz	r0, 80048e8 <d_print_comp_inner+0x1f30>
 80048e2:	7803      	ldrb	r3, [r0, #0]
 80048e4:	2b2f      	cmp	r3, #47	; 0x2f
 80048e6:	d0f7      	beq.n	80048d8 <d_print_comp_inner+0x1f20>
 80048e8:	462a      	mov	r2, r5
 80048ea:	a804      	add	r0, sp, #16
 80048ec:	49d4      	ldr	r1, [pc, #848]	; (8004c40 <d_print_comp_inner+0x2288>)
 80048ee:	f00c fe75 	bl	80115dc <sprintf>
 80048f2:	a804      	add	r0, sp, #16
 80048f4:	f002 f81e 	bl	8006934 <strlen>
 80048f8:	2800      	cmp	r0, #0
 80048fa:	f43e a92b 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 80048fe:	ad04      	add	r5, sp, #16
 8004900:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004904:	182f      	adds	r7, r5, r0
 8004906:	f04f 0800 	mov.w	r8, #0
 800490a:	e009      	b.n	8004920 <d_print_comp_inner+0x1f68>
 800490c:	460b      	mov	r3, r1
 800490e:	3101      	adds	r1, #1
 8004910:	42bd      	cmp	r5, r7
 8004912:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004916:	54e6      	strb	r6, [r4, r3]
 8004918:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800491c:	f43e a91a 	beq.w	8002b54 <d_print_comp_inner+0x19c>
 8004920:	29ff      	cmp	r1, #255	; 0xff
 8004922:	f815 6b01 	ldrb.w	r6, [r5], #1
 8004926:	d1f1      	bne.n	800490c <d_print_comp_inner+0x1f54>
 8004928:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800492c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8004930:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004934:	4620      	mov	r0, r4
 8004936:	4798      	blx	r3
 8004938:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800493c:	3301      	adds	r3, #1
 800493e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004942:	2101      	movs	r1, #1
 8004944:	2300      	movs	r3, #0
 8004946:	e7e3      	b.n	8004910 <d_print_comp_inner+0x1f58>
 8004948:	686a      	ldr	r2, [r5, #4]
 800494a:	4641      	mov	r1, r8
 800494c:	4620      	mov	r0, r4
 800494e:	f000 fdd7 	bl	8005500 <d_print_comp>
 8004952:	f7fe b8ff 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004956:	29ff      	cmp	r1, #255	; 0xff
 8004958:	f000 83d2 	beq.w	8005100 <d_print_comp_inner+0x2748>
 800495c:	232d      	movs	r3, #45	; 0x2d
 800495e:	1c4a      	adds	r2, r1, #1
 8004960:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004964:	5463      	strb	r3, [r4, r1]
 8004966:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800496a:	f7ff b90e 	b.w	8003b8a <d_print_comp_inner+0x11d2>
 800496e:	2500      	movs	r5, #0
 8004970:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004974:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004978:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800497c:	4620      	mov	r0, r4
 800497e:	4798      	blx	r3
 8004980:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004984:	3301      	adds	r3, #1
 8004986:	4629      	mov	r1, r5
 8004988:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800498c:	2201      	movs	r2, #1
 800498e:	f7ff bbeb 	b.w	8004168 <d_print_comp_inner+0x17b0>
 8004992:	2500      	movs	r5, #0
 8004994:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004998:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800499c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80049a0:	4620      	mov	r0, r4
 80049a2:	4798      	blx	r3
 80049a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80049a8:	3301      	adds	r3, #1
 80049aa:	4629      	mov	r1, r5
 80049ac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80049b0:	2201      	movs	r2, #1
 80049b2:	f7ff ba8f 	b.w	8003ed4 <d_print_comp_inner+0x151c>
 80049b6:	2600      	movs	r6, #0
 80049b8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80049bc:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80049c0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80049c4:	4798      	blx	r3
 80049c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80049ca:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80049ce:	3301      	adds	r3, #1
 80049d0:	4631      	mov	r1, r6
 80049d2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80049d6:	f7fe bd43 	b.w	8003460 <d_print_comp_inner+0xaa8>
 80049da:	2600      	movs	r6, #0
 80049dc:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80049e0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80049e4:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80049e8:	4798      	blx	r3
 80049ea:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80049ee:	3301      	adds	r3, #1
 80049f0:	4631      	mov	r1, r6
 80049f2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80049f6:	2201      	movs	r2, #1
 80049f8:	f7fe bb74 	b.w	80030e4 <d_print_comp_inner+0x72c>
 80049fc:	2500      	movs	r5, #0
 80049fe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a02:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a06:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	4798      	blx	r3
 8004a0e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a12:	3301      	adds	r3, #1
 8004a14:	4629      	mov	r1, r5
 8004a16:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f7ff bae4 	b.w	8003fe8 <d_print_comp_inner+0x1630>
 8004a20:	220d      	movs	r2, #13
 8004a22:	4988      	ldr	r1, [pc, #544]	; (8004c44 <d_print_comp_inner+0x228c>)
 8004a24:	4620      	mov	r0, r4
 8004a26:	f7fb fcf3 	bl	8000410 <d_append_buffer>
 8004a2a:	68a9      	ldr	r1, [r5, #8]
 8004a2c:	4620      	mov	r0, r4
 8004a2e:	3101      	adds	r1, #1
 8004a30:	f7fb ff9e 	bl	8000970 <d_append_num>
 8004a34:	2203      	movs	r2, #3
 8004a36:	4984      	ldr	r1, [pc, #528]	; (8004c48 <d_print_comp_inner+0x2290>)
 8004a38:	4620      	mov	r0, r4
 8004a3a:	f7fb fce9 	bl	8000410 <d_append_buffer>
 8004a3e:	686d      	ldr	r5, [r5, #4]
 8004a40:	f7fe bc22 	b.w	8003288 <d_print_comp_inner+0x8d0>
 8004a44:	2500      	movs	r5, #0
 8004a46:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a4a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a4e:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004a52:	4620      	mov	r0, r4
 8004a54:	4798      	blx	r3
 8004a56:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a62:	2201      	movs	r2, #1
 8004a64:	f7fe be08 	b.w	8003678 <d_print_comp_inner+0xcc0>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 8004a6e:	f7fe b871 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004a72:	2500      	movs	r5, #0
 8004a74:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a78:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004a7c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004a80:	4620      	mov	r0, r4
 8004a82:	4798      	blx	r3
 8004a84:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004a88:	3301      	adds	r3, #1
 8004a8a:	4629      	mov	r1, r5
 8004a8c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004a90:	2201      	movs	r2, #1
 8004a92:	f7ff ba8f 	b.w	8003fb4 <d_print_comp_inner+0x15fc>
 8004a96:	2500      	movs	r5, #0
 8004a98:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004a9c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004aa0:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004aa4:	4620      	mov	r0, r4
 8004aa6:	4798      	blx	r3
 8004aa8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004aac:	3301      	adds	r3, #1
 8004aae:	4629      	mov	r1, r5
 8004ab0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f7ff bbc5 	b.w	8004244 <d_print_comp_inner+0x188c>
 8004aba:	a914      	add	r1, sp, #80	; 0x50
 8004abc:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8004ac0:	f841 0d40 	str.w	r0, [r1, #-64]!
 8004ac4:	f028 0860 	bic.w	r8, r8, #96	; 0x60
 8004ac8:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 8004acc:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	4641      	mov	r1, r8
 8004ad4:	9306      	str	r3, [sp, #24]
 8004ad6:	9607      	str	r6, [sp, #28]
 8004ad8:	9505      	str	r5, [sp, #20]
 8004ada:	f000 fd11 	bl	8005500 <d_print_comp>
 8004ade:	9e06      	ldr	r6, [sp, #24]
 8004ae0:	9b04      	ldr	r3, [sp, #16]
 8004ae2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8004ae6:	2e00      	cmp	r6, #0
 8004ae8:	f47e a834 	bne.w	8002b54 <d_print_comp_inner+0x19c>
 8004aec:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004af0:	29ff      	cmp	r1, #255	; 0xff
 8004af2:	f000 8409 	beq.w	8005308 <d_print_comp_inner+0x2950>
 8004af6:	2320      	movs	r3, #32
 8004af8:	1c4a      	adds	r2, r1, #1
 8004afa:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004afe:	5463      	strb	r3, [r4, r1]
 8004b00:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004b04:	f7fe be0b 	b.w	800371e <d_print_comp_inner+0xd66>
 8004b08:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f6fe abff 	blt.w	8003310 <d_print_comp_inner+0x958>
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 829d 	beq.w	8005052 <d_print_comp_inner+0x269a>
 8004b18:	6880      	ldr	r0, [r0, #8]
 8004b1a:	3b01      	subs	r3, #1
 8004b1c:	2800      	cmp	r0, #0
 8004b1e:	f43e a82d 	beq.w	8002b7c <d_print_comp_inner+0x1c4>
 8004b22:	7802      	ldrb	r2, [r0, #0]
 8004b24:	2a2f      	cmp	r2, #47	; 0x2f
 8004b26:	d0f4      	beq.n	8004b12 <d_print_comp_inner+0x215a>
 8004b28:	f7fe b828 	b.w	8002b7c <d_print_comp_inner+0x1c4>
 8004b2c:	f8d0 e130 	ldr.w	lr, [r0, #304]	; 0x130
 8004b30:	f8d0 212c 	ldr.w	r2, [r0, #300]	; 0x12c
 8004b34:	f1be 0f00 	cmp.w	lr, #0
 8004b38:	dd14      	ble.n	8004b64 <d_print_comp_inner+0x21ac>
 8004b3a:	6813      	ldr	r3, [r2, #0]
 8004b3c:	4299      	cmp	r1, r3
 8004b3e:	f000 83f5 	beq.w	800532c <d_print_comp_inner+0x2974>
 8004b42:	f102 0008 	add.w	r0, r2, #8
 8004b46:	463b      	mov	r3, r7
 8004b48:	46a4      	mov	ip, r4
 8004b4a:	e004      	b.n	8004b56 <d_print_comp_inner+0x219e>
 8004b4c:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8004b50:	42a1      	cmp	r1, r4
 8004b52:	f000 81d4 	beq.w	8004efe <d_print_comp_inner+0x2546>
 8004b56:	3301      	adds	r3, #1
 8004b58:	459e      	cmp	lr, r3
 8004b5a:	4681      	mov	r9, r0
 8004b5c:	f100 0008 	add.w	r0, r0, #8
 8004b60:	d1f4      	bne.n	8004b4c <d_print_comp_inner+0x2194>
 8004b62:	4664      	mov	r4, ip
 8004b64:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
 8004b68:	459e      	cmp	lr, r3
 8004b6a:	f280 84b9 	bge.w	80054e0 <d_print_comp_inner+0x2b28>
 8004b6e:	f10e 0301 	add.w	r3, lr, #1
 8004b72:	eb02 00ce 	add.w	r0, r2, lr, lsl #3
 8004b76:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
 8004b7a:	f842 103e 	str.w	r1, [r2, lr, lsl #3]
 8004b7e:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
 8004b82:	3004      	adds	r0, #4
 8004b84:	468e      	mov	lr, r1
 8004b86:	2a00      	cmp	r2, #0
 8004b88:	f000 848d 	beq.w	80054a6 <d_print_comp_inner+0x2aee>
 8004b8c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
 8004b90:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
 8004b94:	428b      	cmp	r3, r1
 8004b96:	f103 0c01 	add.w	ip, r3, #1
 8004b9a:	f280 84a1 	bge.w	80054e0 <d_print_comp_inner+0x2b28>
 8004b9e:	f8d4 1138 	ldr.w	r1, [r4, #312]	; 0x138
 8004ba2:	f8c4 c13c 	str.w	ip, [r4, #316]	; 0x13c
 8004ba6:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8004baa:	6851      	ldr	r1, [r2, #4]
 8004bac:	6059      	str	r1, [r3, #4]
 8004bae:	6003      	str	r3, [r0, #0]
 8004bb0:	6812      	ldr	r2, [r2, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	e7e7      	b.n	8004b86 <d_print_comp_inner+0x21ce>
 8004bb6:	2500      	movs	r5, #0
 8004bb8:	4619      	mov	r1, r3
 8004bba:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004bbe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004bc2:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004bc6:	4620      	mov	r0, r4
 8004bc8:	4798      	blx	r3
 8004bca:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004bce:	1c5a      	adds	r2, r3, #1
 8004bd0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004bd4:	462b      	mov	r3, r5
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f7fe bd3d 	b.w	8003656 <d_print_comp_inner+0xc9e>
 8004bdc:	2e00      	cmp	r6, #0
 8004bde:	f000 844d 	beq.w	800547c <d_print_comp_inner+0x2ac4>
 8004be2:	f1ba 0f2f 	cmp.w	sl, #47	; 0x2f
 8004be6:	f040 8488 	bne.w	80054fa <d_print_comp_inner+0x2b42>
 8004bea:	6873      	ldr	r3, [r6, #4]
 8004bec:	b373      	cbz	r3, 8004c4c <d_print_comp_inner+0x2294>
 8004bee:	4607      	mov	r7, r0
 8004bf0:	e007      	b.n	8004c02 <d_print_comp_inner+0x224a>
 8004bf2:	3701      	adds	r7, #1
 8004bf4:	68b6      	ldr	r6, [r6, #8]
 8004bf6:	b356      	cbz	r6, 8004c4e <d_print_comp_inner+0x2296>
 8004bf8:	7833      	ldrb	r3, [r6, #0]
 8004bfa:	2b2f      	cmp	r3, #47	; 0x2f
 8004bfc:	d127      	bne.n	8004c4e <d_print_comp_inner+0x2296>
 8004bfe:	6873      	ldr	r3, [r6, #4]
 8004c00:	b32b      	cbz	r3, 8004c4e <d_print_comp_inner+0x2296>
 8004c02:	781a      	ldrb	r2, [r3, #0]
 8004c04:	2a4a      	cmp	r2, #74	; 0x4a
 8004c06:	d1f4      	bne.n	8004bf2 <d_print_comp_inner+0x223a>
 8004c08:	6859      	ldr	r1, [r3, #4]
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f7fb fe2c 	bl	8000868 <d_find_pack>
 8004c10:	b198      	cbz	r0, 8004c3a <d_print_comp_inner+0x2282>
 8004c12:	7803      	ldrb	r3, [r0, #0]
 8004c14:	2b2f      	cmp	r3, #47	; 0x2f
 8004c16:	f040 846c 	bne.w	80054f2 <d_print_comp_inner+0x2b3a>
 8004c1a:	6843      	ldr	r3, [r0, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8464 	beq.w	80054ea <d_print_comp_inner+0x2b32>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2000      	movs	r0, #0
 8004c26:	e004      	b.n	8004c32 <d_print_comp_inner+0x227a>
 8004c28:	781a      	ldrb	r2, [r3, #0]
 8004c2a:	2a2f      	cmp	r2, #47	; 0x2f
 8004c2c:	d105      	bne.n	8004c3a <d_print_comp_inner+0x2282>
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	b11a      	cbz	r2, 8004c3a <d_print_comp_inner+0x2282>
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	3001      	adds	r0, #1
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f6      	bne.n	8004c28 <d_print_comp_inner+0x2270>
 8004c3a:	4407      	add	r7, r0
 8004c3c:	e7da      	b.n	8004bf4 <d_print_comp_inner+0x223c>
 8004c3e:	bf00      	nop
 8004c40:	080184f0 	.word	0x080184f0
 8004c44:	08018544 	.word	0x08018544
 8004c48:	08018554 	.word	0x08018554
 8004c4c:	461f      	mov	r7, r3
 8004c4e:	4639      	mov	r1, r7
 8004c50:	4620      	mov	r0, r4
 8004c52:	f7fb fe8d 	bl	8000970 <d_append_num>
 8004c56:	f7fd bf7d 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004c5a:	2500      	movs	r5, #0
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c62:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c66:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	4798      	blx	r3
 8004c6e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004c78:	462b      	mov	r3, r5
 8004c7a:	2101      	movs	r1, #1
 8004c7c:	f7fe bb8e 	b.w	800339c <d_print_comp_inner+0x9e4>
 8004c80:	2600      	movs	r6, #0
 8004c82:	4619      	mov	r1, r3
 8004c84:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004c88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004c8c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004c90:	4620      	mov	r0, r4
 8004c92:	4798      	blx	r3
 8004c94:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004c9e:	4633      	mov	r3, r6
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	f7fe bb65 	b.w	8003370 <d_print_comp_inner+0x9b8>
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	4619      	mov	r1, r3
 8004caa:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8004cae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004cb2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	4798      	blx	r3
 8004cba:	2329      	movs	r3, #41	; 0x29
 8004cbc:	7023      	strb	r3, [r4, #0]
 8004cbe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004cc2:	782a      	ldrb	r2, [r5, #0]
 8004cc4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004cc8:	2101      	movs	r1, #1
 8004cca:	3301      	adds	r3, #1
 8004ccc:	2a3d      	cmp	r2, #61	; 0x3d
 8004cce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004cd2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8004cd6:	f47e af58 	bne.w	8003b8a <d_print_comp_inner+0x11d2>
 8004cda:	e63f      	b.n	800495c <d_print_comp_inner+0x1fa4>
 8004cdc:	2700      	movs	r7, #0
 8004cde:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ce2:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 8004ce6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004cea:	4620      	mov	r0, r4
 8004cec:	4798      	blx	r3
 8004cee:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004cf2:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	4639      	mov	r1, r7
 8004cfa:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004cfe:	f7fe bf28 	b.w	8003b52 <d_print_comp_inner+0x119a>
 8004d02:	2500      	movs	r5, #0
 8004d04:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004d08:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004d0c:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004d10:	4620      	mov	r0, r4
 8004d12:	4798      	blx	r3
 8004d14:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004d18:	3301      	adds	r3, #1
 8004d1a:	4629      	mov	r1, r5
 8004d1c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004d20:	2201      	movs	r2, #1
 8004d22:	f7ff bb12 	b.w	800434a <d_print_comp_inner+0x1992>
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	f1a3 0163 	sub.w	r1, r3, #99	; 0x63
 8004d2c:	2901      	cmp	r1, #1
 8004d2e:	d903      	bls.n	8004d38 <d_print_comp_inner+0x2380>
 8004d30:	3b72      	subs	r3, #114	; 0x72
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	f63d aead 	bhi.w	8002a92 <d_print_comp_inner+0xda>
 8004d38:	4641      	mov	r1, r8
 8004d3a:	4620      	mov	r0, r4
 8004d3c:	f001 f9c8 	bl	80060d0 <d_print_expr_op>
 8004d40:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004d44:	29ff      	cmp	r1, #255	; 0xff
 8004d46:	f000 8271 	beq.w	800522c <d_print_comp_inner+0x2874>
 8004d4a:	1c4a      	adds	r2, r1, #1
 8004d4c:	233c      	movs	r3, #60	; 0x3c
 8004d4e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004d52:	5463      	strb	r3, [r4, r1]
 8004d54:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004d58:	68ab      	ldr	r3, [r5, #8]
 8004d5a:	4641      	mov	r1, r8
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f000 fbce 	bl	8005500 <d_print_comp>
 8004d64:	2202      	movs	r2, #2
 8004d66:	49d5      	ldr	r1, [pc, #852]	; (80050bc <d_print_comp_inner+0x2704>)
 8004d68:	4620      	mov	r0, r4
 8004d6a:	f7fb fb51 	bl	8000410 <d_append_buffer>
 8004d6e:	68ab      	ldr	r3, [r5, #8]
 8004d70:	4641      	mov	r1, r8
 8004d72:	689a      	ldr	r2, [r3, #8]
 8004d74:	4620      	mov	r0, r4
 8004d76:	f000 fbc3 	bl	8005500 <d_print_comp>
 8004d7a:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004d7e:	29ff      	cmp	r1, #255	; 0xff
 8004d80:	f000 81df 	beq.w	8005142 <d_print_comp_inner+0x278a>
 8004d84:	2329      	movs	r3, #41	; 0x29
 8004d86:	1c4a      	adds	r2, r1, #1
 8004d88:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004d8c:	5463      	strb	r3, [r4, r1]
 8004d8e:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004d92:	f7fd bedf 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004d96:	4632      	mov	r2, r6
 8004d98:	4641      	mov	r1, r8
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f000 fbb0 	bl	8005500 <d_print_comp>
 8004da0:	f7fd bed8 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004da4:	2600      	movs	r6, #0
 8004da6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004daa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004dae:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004db2:	4620      	mov	r0, r4
 8004db4:	4798      	blx	r3
 8004db6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004dba:	3301      	adds	r3, #1
 8004dbc:	4631      	mov	r1, r6
 8004dbe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f7fe ba55 	b.w	8003272 <d_print_comp_inner+0x8ba>
 8004dc8:	49bd      	ldr	r1, [pc, #756]	; (80050c0 <d_print_comp_inner+0x2708>)
 8004dca:	6870      	ldr	r0, [r6, #4]
 8004dcc:	f00c fe5e 	bl	8011a8c <strncmp>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	f47e aabd 	bne.w	8003350 <d_print_comp_inner+0x998>
 8004dd6:	68aa      	ldr	r2, [r5, #8]
 8004dd8:	4641      	mov	r1, r8
 8004dda:	4620      	mov	r0, r4
 8004ddc:	f000 fb90 	bl	8005500 <d_print_comp>
 8004de0:	2202      	movs	r2, #2
 8004de2:	49b8      	ldr	r1, [pc, #736]	; (80050c4 <d_print_comp_inner+0x270c>)
 8004de4:	4620      	mov	r0, r4
 8004de6:	f7fb fb13 	bl	8000410 <d_append_buffer>
 8004dea:	f7fe badd 	b.w	80033a8 <d_print_comp_inner+0x9f0>
 8004dee:	68aa      	ldr	r2, [r5, #8]
 8004df0:	7817      	ldrb	r7, [r2, #0]
 8004df2:	2f00      	cmp	r7, #0
 8004df4:	f47e aea8 	bne.w	8003b48 <d_print_comp_inner+0x1190>
 8004df8:	2b3d      	cmp	r3, #61	; 0x3d
 8004dfa:	f000 82ef 	beq.w	80053dc <d_print_comp_inner+0x2a24>
 8004dfe:	68aa      	ldr	r2, [r5, #8]
 8004e00:	4641      	mov	r1, r8
 8004e02:	4620      	mov	r0, r4
 8004e04:	3e02      	subs	r6, #2
 8004e06:	f000 fb7b 	bl	8005500 <d_print_comp>
 8004e0a:	2e04      	cmp	r6, #4
 8004e0c:	f63d aea2 	bhi.w	8002b54 <d_print_comp_inner+0x19c>
 8004e10:	e8df f006 	tbb	[pc, r6]
 8004e14:	0a111826 	.word	0x0a111826
 8004e18:	03          	.byte	0x03
 8004e19:	00          	.byte	0x00
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	2203      	movs	r2, #3
 8004e1e:	49aa      	ldr	r1, [pc, #680]	; (80050c8 <d_print_comp_inner+0x2710>)
 8004e20:	f7fb faf6 	bl	8000410 <d_append_buffer>
 8004e24:	f7fd be96 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004e28:	4620      	mov	r0, r4
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	49a7      	ldr	r1, [pc, #668]	; (80050cc <d_print_comp_inner+0x2714>)
 8004e2e:	f7fb faef 	bl	8000410 <d_append_buffer>
 8004e32:	f7fd be8f 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004e36:	4620      	mov	r0, r4
 8004e38:	2202      	movs	r2, #2
 8004e3a:	49a5      	ldr	r1, [pc, #660]	; (80050d0 <d_print_comp_inner+0x2718>)
 8004e3c:	f7fb fae8 	bl	8000410 <d_append_buffer>
 8004e40:	f7fd be88 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004e44:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004e48:	29ff      	cmp	r1, #255	; 0xff
 8004e4a:	f000 831a 	beq.w	8005482 <d_print_comp_inner+0x2aca>
 8004e4e:	236c      	movs	r3, #108	; 0x6c
 8004e50:	1c4a      	adds	r2, r1, #1
 8004e52:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004e56:	5463      	strb	r3, [r4, r1]
 8004e58:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e5c:	f7fd be7a 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004e60:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004e64:	29ff      	cmp	r1, #255	; 0xff
 8004e66:	f000 82db 	beq.w	8005420 <d_print_comp_inner+0x2a68>
 8004e6a:	2375      	movs	r3, #117	; 0x75
 8004e6c:	1c4a      	adds	r2, r1, #1
 8004e6e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004e72:	5463      	strb	r3, [r4, r1]
 8004e74:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004e78:	f7fd be6c 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004e7c:	2600      	movs	r6, #0
 8004e7e:	4619      	mov	r1, r3
 8004e80:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004e84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004e88:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	4798      	blx	r3
 8004e90:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8004e9a:	4633      	mov	r3, r6
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	f7fe bd3c 	b.w	800391a <d_print_comp_inner+0xf62>
 8004ea2:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8004ea6:	f7fe bf95 	b.w	8003dd4 <d_print_comp_inner+0x141c>
 8004eaa:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004eae:	29ff      	cmp	r1, #255	; 0xff
 8004eb0:	f000 8244 	beq.w	800533c <d_print_comp_inner+0x2984>
 8004eb4:	2320      	movs	r3, #32
 8004eb6:	1c4a      	adds	r2, r1, #1
 8004eb8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004ebc:	5463      	strb	r3, [r4, r1]
 8004ebe:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004ec2:	e447      	b.n	8004754 <d_print_comp_inner+0x1d9c>
 8004ec4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8004ec8:	29ff      	cmp	r1, #255	; 0xff
 8004eca:	f000 826e 	beq.w	80053aa <d_print_comp_inner+0x29f2>
 8004ece:	2320      	movs	r3, #32
 8004ed0:	1c4a      	adds	r2, r1, #1
 8004ed2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8004ed6:	5463      	strb	r3, [r4, r1]
 8004ed8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8004edc:	e419      	b.n	8004712 <d_print_comp_inner+0x1d5a>
 8004ede:	2500      	movs	r5, #0
 8004ee0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ee4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004ee8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004eec:	4620      	mov	r0, r4
 8004eee:	4798      	blx	r3
 8004ef0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004efc:	e4dd      	b.n	80048ba <d_print_comp_inner+0x1f02>
 8004efe:	4664      	mov	r4, ip
 8004f00:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
 8004f04:	b1d8      	cbz	r0, 8004f3e <d_print_comp_inner+0x2586>
 8004f06:	6802      	ldr	r2, [r0, #0]
 8004f08:	4291      	cmp	r1, r2
 8004f0a:	d00a      	beq.n	8004f22 <d_print_comp_inner+0x256a>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	e004      	b.n	8004f1a <d_print_comp_inner+0x2562>
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	b1a3      	cbz	r3, 8004f3e <d_print_comp_inner+0x2586>
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	4291      	cmp	r1, r2
 8004f18:	d003      	beq.n	8004f22 <d_print_comp_inner+0x256a>
 8004f1a:	4295      	cmp	r5, r2
 8004f1c:	d1f8      	bne.n	8004f10 <d_print_comp_inner+0x2558>
 8004f1e:	4298      	cmp	r0, r3
 8004f20:	d0f6      	beq.n	8004f10 <d_print_comp_inner+0x2558>
 8004f22:	3104      	adds	r1, #4
 8004f24:	4620      	mov	r0, r4
 8004f26:	f7fb fc83 	bl	8000830 <d_lookup_template_argument.isra.6>
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	f43d ae26 	beq.w	8002b7c <d_print_comp_inner+0x1c4>
 8004f30:	7803      	ldrb	r3, [r0, #0]
 8004f32:	2b2f      	cmp	r3, #47	; 0x2f
 8004f34:	f43d ae11 	beq.w	8002b5a <d_print_comp_inner+0x1a2>
 8004f38:	4601      	mov	r1, r0
 8004f3a:	f7fe bc30 	b.w	800379e <d_print_comp_inner+0xde6>
 8004f3e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004f42:	f8d4 6110 	ldr.w	r6, [r4, #272]	; 0x110
 8004f46:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 8004f4a:	3104      	adds	r1, #4
 8004f4c:	4620      	mov	r0, r4
 8004f4e:	f7fb fc6f 	bl	8000830 <d_lookup_template_argument.isra.6>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	f43d ae10 	beq.w	8002b78 <d_print_comp_inner+0x1c0>
 8004f58:	2701      	movs	r7, #1
 8004f5a:	e7e9      	b.n	8004f30 <d_print_comp_inner+0x2578>
 8004f5c:	2600      	movs	r6, #0
 8004f5e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004f62:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004f66:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	4798      	blx	r3
 8004f6e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004f72:	f8da 5004 	ldr.w	r5, [sl, #4]
 8004f76:	3301      	adds	r3, #1
 8004f78:	4631      	mov	r1, r6
 8004f7a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004f7e:	f7ff b85a 	b.w	8004036 <d_print_comp_inner+0x167e>
 8004f82:	68aa      	ldr	r2, [r5, #8]
 8004f84:	4641      	mov	r1, r8
 8004f86:	4620      	mov	r0, r4
 8004f88:	f000 faba 	bl	8005500 <d_print_comp>
 8004f8c:	9b06      	ldr	r3, [sp, #24]
 8004f8e:	9a00      	ldr	r2, [sp, #0]
 8004f90:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f43e ac9d 	beq.w	80038d4 <d_print_comp_inner+0xf1c>
 8004f9a:	f7fd bddb 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8004f9e:	255f      	movs	r5, #95	; 0x5f
 8004fa0:	f7ff ba10 	b.w	80043c4 <d_print_comp_inner+0x1a0c>
 8004fa4:	2500      	movs	r5, #0
 8004fa6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004faa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8004fae:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	4798      	blx	r3
 8004fb6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8004fba:	3301      	adds	r3, #1
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8004fc2:	f7ff bb82 	b.w	80046ca <d_print_comp_inner+0x1d12>
 8004fc6:	4648      	mov	r0, r9
 8004fc8:	4942      	ldr	r1, [pc, #264]	; (80050d4 <d_print_comp_inner+0x271c>)
 8004fca:	f001 fca9 	bl	8006920 <strcmp>
 8004fce:	b120      	cbz	r0, 8004fda <d_print_comp_inner+0x2622>
 8004fd0:	463a      	mov	r2, r7
 8004fd2:	4641      	mov	r1, r8
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	f001 f87b 	bl	80060d0 <d_print_expr_op>
 8004fda:	68ab      	ldr	r3, [r5, #8]
 8004fdc:	4641      	mov	r1, r8
 8004fde:	689a      	ldr	r2, [r3, #8]
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f001 f8b3 	bl	800614c <d_print_subexpr>
 8004fe6:	f7fd bd9d 	b.w	8002b24 <d_print_comp_inner+0x16c>
 8004fea:	2600      	movs	r6, #0
 8004fec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8004ff0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8004ff4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8004ff8:	4620      	mov	r0, r4
 8004ffa:	4798      	blx	r3
 8004ffc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005000:	3301      	adds	r3, #1
 8005002:	4631      	mov	r1, r6
 8005004:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005008:	f7ff bb88 	b.w	800471c <d_print_comp_inner+0x1d64>
 800500c:	2500      	movs	r5, #0
 800500e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005012:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005016:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800501a:	4620      	mov	r0, r4
 800501c:	4798      	blx	r3
 800501e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005022:	3301      	adds	r3, #1
 8005024:	4629      	mov	r1, r5
 8005026:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800502a:	f7fe bb59 	b.w	80036e0 <d_print_comp_inner+0xd28>
 800502e:	2500      	movs	r5, #0
 8005030:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005034:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005038:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800503c:	4798      	blx	r3
 800503e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005042:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005046:	3301      	adds	r3, #1
 8005048:	4629      	mov	r1, r5
 800504a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800504e:	f7fe bb2b 	b.w	80036a8 <d_print_comp_inner+0xcf0>
 8005052:	6840      	ldr	r0, [r0, #4]
 8005054:	2800      	cmp	r0, #0
 8005056:	f43d ad91 	beq.w	8002b7c <d_print_comp_inner+0x1c4>
 800505a:	f7fe b959 	b.w	8003310 <d_print_comp_inner+0x958>
 800505e:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 8005062:	4619      	mov	r1, r3
 8005064:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005068:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800506c:	4620      	mov	r0, r4
 800506e:	4798      	blx	r3
 8005070:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800507a:	462b      	mov	r3, r5
 800507c:	f7ff bb14 	b.w	80046a8 <d_print_comp_inner+0x1cf0>
 8005080:	6873      	ldr	r3, [r6, #4]
 8005082:	781a      	ldrb	r2, [r3, #0]
 8005084:	2a01      	cmp	r2, #1
 8005086:	f000 8153 	beq.w	8005330 <d_print_comp_inner+0x2978>
 800508a:	f896 a000 	ldrb.w	sl, [r6]
 800508e:	f7ff bae0 	b.w	8004652 <d_print_comp_inner+0x1c9a>
 8005092:	2500      	movs	r5, #0
 8005094:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005098:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800509c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80050a0:	4620      	mov	r0, r4
 80050a2:	4798      	blx	r3
 80050a4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80050a8:	3301      	adds	r3, #1
 80050aa:	4629      	mov	r1, r5
 80050ac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80050b0:	f7ff bb55 	b.w	800475e <d_print_comp_inner+0x1da6>
 80050b4:	4654      	mov	r4, sl
 80050b6:	f7fe be8d 	b.w	8003dd4 <d_print_comp_inner+0x141c>
 80050ba:	bf00      	nop
 80050bc:	080186f0 	.word	0x080186f0
 80050c0:	08018558 	.word	0x08018558
 80050c4:	08018560 	.word	0x08018560
 80050c8:	0801870c 	.word	0x0801870c
 80050cc:	08018708 	.word	0x08018708
 80050d0:	08018704 	.word	0x08018704
 80050d4:	080184f8 	.word	0x080184f8
 80050d8:	686a      	ldr	r2, [r5, #4]
 80050da:	4641      	mov	r1, r8
 80050dc:	4620      	mov	r0, r4
 80050de:	f001 f835 	bl	800614c <d_print_subexpr>
 80050e2:	4620      	mov	r0, r4
 80050e4:	2203      	movs	r2, #3
 80050e6:	49e2      	ldr	r1, [pc, #904]	; (8005470 <d_print_comp_inner+0x2ab8>)
 80050e8:	f7fb f992 	bl	8000410 <d_append_buffer>
 80050ec:	f7fd bd32 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80050f0:	ab14      	add	r3, sp, #80	; 0x50
 80050f2:	9603      	str	r6, [sp, #12]
 80050f4:	f843 cd48 	str.w	ip, [r3, #-72]!
 80050f8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 80050fc:	f7fe b85a 	b.w	80031b4 <d_print_comp_inner+0x7fc>
 8005100:	2700      	movs	r7, #0
 8005102:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005106:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800510a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800510e:	4620      	mov	r0, r4
 8005110:	4798      	blx	r3
 8005112:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005116:	3301      	adds	r3, #1
 8005118:	4639      	mov	r1, r7
 800511a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800511e:	e41d      	b.n	800495c <d_print_comp_inner+0x1fa4>
 8005120:	2600      	movs	r6, #0
 8005122:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005126:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800512a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800512e:	4620      	mov	r0, r4
 8005130:	4798      	blx	r3
 8005132:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005136:	3301      	adds	r3, #1
 8005138:	4631      	mov	r1, r6
 800513a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800513e:	f7ff bb8a 	b.w	8004856 <d_print_comp_inner+0x1e9e>
 8005142:	2500      	movs	r5, #0
 8005144:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005148:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800514c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005150:	4620      	mov	r0, r4
 8005152:	4798      	blx	r3
 8005154:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005158:	3301      	adds	r3, #1
 800515a:	4629      	mov	r1, r5
 800515c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005160:	e610      	b.n	8004d84 <d_print_comp_inner+0x23cc>
 8005162:	2600      	movs	r6, #0
 8005164:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005168:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800516c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005170:	4620      	mov	r0, r4
 8005172:	4798      	blx	r3
 8005174:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005178:	3301      	adds	r3, #1
 800517a:	4631      	mov	r1, r6
 800517c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005180:	f7ff bb8a 	b.w	8004898 <d_print_comp_inner+0x1ee0>
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	6891      	ldr	r1, [r2, #8]
 8005188:	2901      	cmp	r1, #1
 800518a:	f47d ac90 	bne.w	8002aae <d_print_comp_inner+0xf6>
 800518e:	6852      	ldr	r2, [r2, #4]
 8005190:	7812      	ldrb	r2, [r2, #0]
 8005192:	2a3e      	cmp	r2, #62	; 0x3e
 8005194:	f47d ac8b 	bne.w	8002aae <d_print_comp_inner+0xf6>
 8005198:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 800519c:	29ff      	cmp	r1, #255	; 0xff
 800519e:	d10f      	bne.n	80051c0 <d_print_comp_inner+0x2808>
 80051a0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80051a4:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80051a8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80051ac:	4620      	mov	r0, r4
 80051ae:	4798      	blx	r3
 80051b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80051b4:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80051b8:	3301      	adds	r3, #1
 80051ba:	4631      	mov	r1, r6
 80051bc:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80051c0:	2328      	movs	r3, #40	; 0x28
 80051c2:	1c4a      	adds	r2, r1, #1
 80051c4:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80051c8:	5463      	strb	r3, [r4, r1]
 80051ca:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80051ce:	686b      	ldr	r3, [r5, #4]
 80051d0:	f7fd bc6d 	b.w	8002aae <d_print_comp_inner+0xf6>
 80051d4:	2500      	movs	r5, #0
 80051d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80051da:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80051de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80051e2:	4620      	mov	r0, r4
 80051e4:	4798      	blx	r3
 80051e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80051ea:	3301      	adds	r3, #1
 80051ec:	4629      	mov	r1, r5
 80051ee:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80051f2:	f7ff bb0b 	b.w	800480c <d_print_comp_inner+0x1e54>
 80051f6:	f8db b004 	ldr.w	fp, [fp, #4]
 80051fa:	f1bb 0f00 	cmp.w	fp, #0
 80051fe:	f43e ade9 	beq.w	8003dd4 <d_print_comp_inner+0x141c>
 8005202:	f7fd bfc3 	b.w	800318c <d_print_comp_inner+0x7d4>
 8005206:	9b02      	ldr	r3, [sp, #8]
 8005208:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
 800520c:	f7fd bfdb 	b.w	80031c6 <d_print_comp_inner+0x80e>
 8005210:	6893      	ldr	r3, [r2, #8]
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b29      	cmp	r3, #41	; 0x29
 8005216:	bf1c      	itt	ne
 8005218:	2301      	movne	r3, #1
 800521a:	f8c4 3118 	strne.w	r3, [r4, #280]	; 0x118
 800521e:	6852      	ldr	r2, [r2, #4]
 8005220:	4641      	mov	r1, r8
 8005222:	4620      	mov	r0, r4
 8005224:	f000 ff92 	bl	800614c <d_print_subexpr>
 8005228:	f7fd bc52 	b.w	8002ad0 <d_print_comp_inner+0x118>
 800522c:	2600      	movs	r6, #0
 800522e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005232:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005236:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800523a:	4620      	mov	r0, r4
 800523c:	4798      	blx	r3
 800523e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005242:	3301      	adds	r3, #1
 8005244:	4631      	mov	r1, r6
 8005246:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800524a:	e57e      	b.n	8004d4a <d_print_comp_inner+0x2392>
 800524c:	6872      	ldr	r2, [r6, #4]
 800524e:	4641      	mov	r1, r8
 8005250:	4620      	mov	r0, r4
 8005252:	f000 ff7b 	bl	800614c <d_print_subexpr>
 8005256:	464a      	mov	r2, r9
 8005258:	4641      	mov	r1, r8
 800525a:	4620      	mov	r0, r4
 800525c:	f000 ff38 	bl	80060d0 <d_print_expr_op>
 8005260:	f7fd bc78 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8005264:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005268:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800526c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005270:	4620      	mov	r0, r4
 8005272:	4798      	blx	r3
 8005274:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005278:	3301      	adds	r3, #1
 800527a:	4629      	mov	r1, r5
 800527c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005280:	f7fd bfad 	b.w	80031de <d_print_comp_inner+0x826>
 8005284:	464a      	mov	r2, r9
 8005286:	4641      	mov	r1, r8
 8005288:	4620      	mov	r0, r4
 800528a:	f000 ff5f 	bl	800614c <d_print_subexpr>
 800528e:	4652      	mov	r2, sl
 8005290:	4641      	mov	r1, r8
 8005292:	4620      	mov	r0, r4
 8005294:	f000 ff1c 	bl	80060d0 <d_print_expr_op>
 8005298:	463a      	mov	r2, r7
 800529a:	4641      	mov	r1, r8
 800529c:	4620      	mov	r0, r4
 800529e:	f000 ff55 	bl	800614c <d_print_subexpr>
 80052a2:	4620      	mov	r0, r4
 80052a4:	2203      	movs	r2, #3
 80052a6:	4973      	ldr	r1, [pc, #460]	; (8005474 <d_print_comp_inner+0x2abc>)
 80052a8:	f7fb f8b2 	bl	8000410 <d_append_buffer>
 80052ac:	462a      	mov	r2, r5
 80052ae:	4641      	mov	r1, r8
 80052b0:	4620      	mov	r0, r4
 80052b2:	f000 ff4b 	bl	800614c <d_print_subexpr>
 80052b6:	f7fd bc4d 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80052ba:	454f      	cmp	r7, r9
 80052bc:	f67f ae6f 	bls.w	8004f9e <d_print_comp_inner+0x25e6>
 80052c0:	2d5f      	cmp	r5, #95	; 0x5f
 80052c2:	f47f ae6c 	bne.w	8004f9e <d_print_comp_inner+0x25e6>
 80052c6:	28ff      	cmp	r0, #255	; 0xff
 80052c8:	f63f a87c 	bhi.w	80043c4 <d_print_comp_inner+0x1a0c>
 80052cc:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80052d0:	29ff      	cmp	r1, #255	; 0xff
 80052d2:	b2c5      	uxtb	r5, r0
 80052d4:	d10f      	bne.n	80052f6 <d_print_comp_inner+0x293e>
 80052d6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80052da:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80052de:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80052e2:	4620      	mov	r0, r4
 80052e4:	4798      	blx	r3
 80052e6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80052ea:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
 80052ee:	3301      	adds	r3, #1
 80052f0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80052f4:	2100      	movs	r1, #0
 80052f6:	1c4b      	adds	r3, r1, #1
 80052f8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80052fc:	464e      	mov	r6, r9
 80052fe:	5465      	strb	r5, [r4, r1]
 8005300:	f884 5104 	strb.w	r5, [r4, #260]	; 0x104
 8005304:	f7ff b868 	b.w	80043d8 <d_print_comp_inner+0x1a20>
 8005308:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800530c:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 8005310:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005314:	4620      	mov	r0, r4
 8005316:	4798      	blx	r3
 8005318:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800531c:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 8005320:	3301      	adds	r3, #1
 8005322:	4631      	mov	r1, r6
 8005324:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005328:	f7ff bbe5 	b.w	8004af6 <d_print_comp_inner+0x213e>
 800532c:	4691      	mov	r9, r2
 800532e:	e5e7      	b.n	8004f00 <d_print_comp_inner+0x2548>
 8005330:	68b2      	ldr	r2, [r6, #8]
 8005332:	7812      	ldrb	r2, [r2, #0]
 8005334:	2a29      	cmp	r2, #41	; 0x29
 8005336:	bf08      	it	eq
 8005338:	461e      	moveq	r6, r3
 800533a:	e6a6      	b.n	800508a <d_print_comp_inner+0x26d2>
 800533c:	2500      	movs	r5, #0
 800533e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005342:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005346:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800534a:	4620      	mov	r0, r4
 800534c:	4798      	blx	r3
 800534e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005352:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005356:	3301      	adds	r3, #1
 8005358:	4629      	mov	r1, r5
 800535a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800535e:	e5a9      	b.n	8004eb4 <d_print_comp_inner+0x24fc>
 8005360:	2600      	movs	r6, #0
 8005362:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005366:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 800536a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800536e:	4620      	mov	r0, r4
 8005370:	4798      	blx	r3
 8005372:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005376:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800537a:	3301      	adds	r3, #1
 800537c:	4631      	mov	r1, r6
 800537e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005382:	f7fd bbc8 	b.w	8002b16 <d_print_comp_inner+0x15e>
 8005386:	f884 00ff 	strb.w	r0, [r4, #255]	; 0xff
 800538a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800538e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005392:	4620      	mov	r0, r4
 8005394:	4798      	blx	r3
 8005396:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800539a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 800539e:	3301      	adds	r3, #1
 80053a0:	4631      	mov	r1, r6
 80053a2:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80053a6:	f7fd bba4 	b.w	8002af2 <d_print_comp_inner+0x13a>
 80053aa:	2600      	movs	r6, #0
 80053ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80053b0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80053b4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80053b8:	4620      	mov	r0, r4
 80053ba:	4798      	blx	r3
 80053bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80053c0:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80053c4:	3301      	adds	r3, #1
 80053c6:	4631      	mov	r1, r6
 80053c8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80053cc:	e57f      	b.n	8004ece <d_print_comp_inner+0x2516>
 80053ce:	6841      	ldr	r1, [r0, #4]
 80053d0:	2900      	cmp	r1, #0
 80053d2:	f43d abd0 	beq.w	8002b76 <d_print_comp_inner+0x1be>
 80053d6:	780b      	ldrb	r3, [r1, #0]
 80053d8:	f7fe b9e1 	b.w	800379e <d_print_comp_inner+0xde6>
 80053dc:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80053e0:	29ff      	cmp	r1, #255	; 0xff
 80053e2:	d00d      	beq.n	8005400 <d_print_comp_inner+0x2a48>
 80053e4:	232d      	movs	r3, #45	; 0x2d
 80053e6:	1c4a      	adds	r2, r1, #1
 80053e8:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80053ec:	5463      	strb	r3, [r4, r1]
 80053ee:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80053f2:	e504      	b.n	8004dfe <d_print_comp_inner+0x2446>
 80053f4:	2205      	movs	r2, #5
 80053f6:	4920      	ldr	r1, [pc, #128]	; (8005478 <d_print_comp_inner+0x2ac0>)
 80053f8:	f7fb f80a 	bl	8000410 <d_append_buffer>
 80053fc:	f7fd bbaa 	b.w	8002b54 <d_print_comp_inner+0x19c>
 8005400:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005404:	f880 70ff 	strb.w	r7, [r0, #255]	; 0xff
 8005408:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800540c:	4798      	blx	r3
 800540e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005412:	f8c4 7100 	str.w	r7, [r4, #256]	; 0x100
 8005416:	3301      	adds	r3, #1
 8005418:	4639      	mov	r1, r7
 800541a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800541e:	e7e1      	b.n	80053e4 <d_print_comp_inner+0x2a2c>
 8005420:	2500      	movs	r5, #0
 8005422:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005426:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800542a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800542e:	4620      	mov	r0, r4
 8005430:	4798      	blx	r3
 8005432:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005436:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800543a:	3301      	adds	r3, #1
 800543c:	4629      	mov	r1, r5
 800543e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005442:	e512      	b.n	8004e6a <d_print_comp_inner+0x24b2>
 8005444:	2700      	movs	r7, #0
 8005446:	f7ff b913 	b.w	8004670 <d_print_comp_inner+0x1cb8>
 800544a:	2500      	movs	r5, #0
 800544c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005450:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005454:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005458:	4620      	mov	r0, r4
 800545a:	4798      	blx	r3
 800545c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005460:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005464:	3301      	adds	r3, #1
 8005466:	4629      	mov	r1, r5
 8005468:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800546c:	f7fd bb6b 	b.w	8002b46 <d_print_comp_inner+0x18e>
 8005470:	0801873c 	.word	0x0801873c
 8005474:	080186f8 	.word	0x080186f8
 8005478:	08018710 	.word	0x08018710
 800547c:	4637      	mov	r7, r6
 800547e:	f7ff bbe6 	b.w	8004c4e <d_print_comp_inner+0x2296>
 8005482:	2500      	movs	r5, #0
 8005484:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005488:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800548c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005490:	4620      	mov	r0, r4
 8005492:	4798      	blx	r3
 8005494:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005498:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 800549c:	3301      	adds	r3, #1
 800549e:	4629      	mov	r1, r5
 80054a0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80054a4:	e4d3      	b.n	8004e4e <d_print_comp_inner+0x2496>
 80054a6:	4671      	mov	r1, lr
 80054a8:	6002      	str	r2, [r0, #0]
 80054aa:	3104      	adds	r1, #4
 80054ac:	4620      	mov	r0, r4
 80054ae:	f7fb f9bf 	bl	8000830 <d_lookup_template_argument.isra.6>
 80054b2:	2800      	cmp	r0, #0
 80054b4:	f47f ad3c 	bne.w	8004f30 <d_print_comp_inner+0x2578>
 80054b8:	f7fd bb60 	b.w	8002b7c <d_print_comp_inner+0x1c4>
 80054bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80054c0:	f884 60ff 	strb.w	r6, [r4, #255]	; 0xff
 80054c4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80054c8:	4620      	mov	r0, r4
 80054ca:	4798      	blx	r3
 80054cc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80054d0:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80054d4:	3301      	adds	r3, #1
 80054d6:	4631      	mov	r1, r6
 80054d8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80054dc:	f7fe bc02 	b.w	8003ce4 <d_print_comp_inner+0x132c>
 80054e0:	2301      	movs	r3, #1
 80054e2:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
 80054e6:	f7fd bb35 	b.w	8002b54 <d_print_comp_inner+0x19c>
 80054ea:	4618      	mov	r0, r3
 80054ec:	4407      	add	r7, r0
 80054ee:	f7ff bb81 	b.w	8004bf4 <d_print_comp_inner+0x223c>
 80054f2:	2000      	movs	r0, #0
 80054f4:	4407      	add	r7, r0
 80054f6:	f7ff bb7d 	b.w	8004bf4 <d_print_comp_inner+0x223c>
 80054fa:	4607      	mov	r7, r0
 80054fc:	f7ff bba7 	b.w	8004c4e <d_print_comp_inner+0x2296>

08005500 <d_print_comp>:
 8005500:	b510      	push	{r4, lr}
 8005502:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 8005506:	b082      	sub	sp, #8
 8005508:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
 800550c:	4604      	mov	r4, r0
 800550e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005512:	f7fd fa51 	bl	80029b8 <d_print_comp_inner>
 8005516:	9b01      	ldr	r3, [sp, #4]
 8005518:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800551c:	b002      	add	sp, #8
 800551e:	bd10      	pop	{r4, pc}

08005520 <d_print_mod>:
 8005520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005524:	7813      	ldrb	r3, [r2, #0]
 8005526:	3b03      	subs	r3, #3
 8005528:	b082      	sub	sp, #8
 800552a:	4615      	mov	r5, r2
 800552c:	4604      	mov	r4, r0
 800552e:	4688      	mov	r8, r1
 8005530:	2b49      	cmp	r3, #73	; 0x49
 8005532:	f200 8223 	bhi.w	800597c <d_print_mod+0x45c>
 8005536:	e8df f013 	tbh	[pc, r3, lsl #1]
 800553a:	01e7      	.short	0x01e7
 800553c:	02210221 	.word	0x02210221
 8005540:	02210221 	.word	0x02210221
 8005544:	02210221 	.word	0x02210221
 8005548:	02210221 	.word	0x02210221
 800554c:	02210221 	.word	0x02210221
 8005550:	02210221 	.word	0x02210221
 8005554:	02210221 	.word	0x02210221
 8005558:	02210221 	.word	0x02210221
 800555c:	02210221 	.word	0x02210221
 8005560:	02210221 	.word	0x02210221
 8005564:	01e90221 	.word	0x01e90221
 8005568:	01a80182 	.word	0x01a80182
 800556c:	018201e9 	.word	0x018201e9
 8005570:	01cd01a8 	.word	0x01cd01a8
 8005574:	006f01da 	.word	0x006f01da
 8005578:	009c008c 	.word	0x009c008c
 800557c:	00cf00ab 	.word	0x00cf00ab
 8005580:	022100f4 	.word	0x022100f4
 8005584:	02210221 	.word	0x02210221
 8005588:	01190221 	.word	0x01190221
 800558c:	015c0221 	.word	0x015c0221
 8005590:	02210221 	.word	0x02210221
 8005594:	02210221 	.word	0x02210221
 8005598:	02210221 	.word	0x02210221
 800559c:	02210221 	.word	0x02210221
 80055a0:	02210221 	.word	0x02210221
 80055a4:	02210221 	.word	0x02210221
 80055a8:	02210221 	.word	0x02210221
 80055ac:	02210221 	.word	0x02210221
 80055b0:	02210221 	.word	0x02210221
 80055b4:	02210221 	.word	0x02210221
 80055b8:	02210221 	.word	0x02210221
 80055bc:	02210221 	.word	0x02210221
 80055c0:	02210221 	.word	0x02210221
 80055c4:	02210221 	.word	0x02210221
 80055c8:	02210221 	.word	0x02210221
 80055cc:	004a      	.short	0x004a
 80055ce:	4dd3      	ldr	r5, [pc, #844]	; (800591c <d_print_mod+0x3fc>)
 80055d0:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80055d4:	f105 0711 	add.w	r7, r5, #17
 80055d8:	f04f 0800 	mov.w	r8, #0
 80055dc:	e008      	b.n	80055f0 <d_print_mod+0xd0>
 80055de:	460b      	mov	r3, r1
 80055e0:	3101      	adds	r1, #1
 80055e2:	42bd      	cmp	r5, r7
 80055e4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80055e8:	54e6      	strb	r6, [r4, r3]
 80055ea:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80055ee:	d02d      	beq.n	800564c <d_print_mod+0x12c>
 80055f0:	29ff      	cmp	r1, #255	; 0xff
 80055f2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80055f6:	d1f2      	bne.n	80055de <d_print_mod+0xbe>
 80055f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80055fc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005600:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005604:	4620      	mov	r0, r4
 8005606:	4798      	blx	r3
 8005608:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800560c:	3301      	adds	r3, #1
 800560e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005612:	2101      	movs	r1, #1
 8005614:	2300      	movs	r3, #0
 8005616:	e7e4      	b.n	80055e2 <d_print_mod+0xc2>
 8005618:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800561c:	29ff      	cmp	r1, #255	; 0xff
 800561e:	f000 81f7 	beq.w	8005a10 <d_print_mod+0x4f0>
 8005622:	1c4a      	adds	r2, r1, #1
 8005624:	2320      	movs	r3, #32
 8005626:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800562a:	5463      	strb	r3, [r4, r1]
 800562c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005630:	68aa      	ldr	r2, [r5, #8]
 8005632:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005636:	9200      	str	r2, [sp, #0]
 8005638:	4641      	mov	r1, r8
 800563a:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 800563e:	4620      	mov	r0, r4
 8005640:	9301      	str	r3, [sp, #4]
 8005642:	f7fd f9b9 	bl	80029b8 <d_print_comp_inner>
 8005646:	9b01      	ldr	r3, [sp, #4]
 8005648:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800564c:	b002      	add	sp, #8
 800564e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005652:	f011 0504 	ands.w	r5, r1, #4
 8005656:	d1f9      	bne.n	800564c <d_print_mod+0x12c>
 8005658:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 800565c:	2bff      	cmp	r3, #255	; 0xff
 800565e:	f000 821c 	beq.w	8005a9a <d_print_mod+0x57a>
 8005662:	222a      	movs	r2, #42	; 0x2a
 8005664:	1c59      	adds	r1, r3, #1
 8005666:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800566a:	54e2      	strb	r2, [r4, r3]
 800566c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005670:	e7ec      	b.n	800564c <d_print_mod+0x12c>
 8005672:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005676:	29ff      	cmp	r1, #255	; 0xff
 8005678:	f000 81b9 	beq.w	80059ee <d_print_mod+0x4ce>
 800567c:	1c4a      	adds	r2, r1, #1
 800567e:	2326      	movs	r3, #38	; 0x26
 8005680:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005684:	5463      	strb	r3, [r4, r1]
 8005686:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800568a:	b002      	add	sp, #8
 800568c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005690:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005694:	4da2      	ldr	r5, [pc, #648]	; (8005920 <d_print_mod+0x400>)
 8005696:	f04f 0800 	mov.w	r8, #0
 800569a:	1caf      	adds	r7, r5, #2
 800569c:	e008      	b.n	80056b0 <d_print_mod+0x190>
 800569e:	460b      	mov	r3, r1
 80056a0:	3101      	adds	r1, #1
 80056a2:	42bd      	cmp	r5, r7
 80056a4:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80056a8:	54e6      	strb	r6, [r4, r3]
 80056aa:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80056ae:	d0cd      	beq.n	800564c <d_print_mod+0x12c>
 80056b0:	29ff      	cmp	r1, #255	; 0xff
 80056b2:	f815 6b01 	ldrb.w	r6, [r5], #1
 80056b6:	d1f2      	bne.n	800569e <d_print_mod+0x17e>
 80056b8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80056bc:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80056c0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80056c4:	4620      	mov	r0, r4
 80056c6:	4798      	blx	r3
 80056c8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80056cc:	3301      	adds	r3, #1
 80056ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80056d2:	2101      	movs	r1, #1
 80056d4:	2300      	movs	r3, #0
 80056d6:	e7e4      	b.n	80056a2 <d_print_mod+0x182>
 80056d8:	4d92      	ldr	r5, [pc, #584]	; (8005924 <d_print_mod+0x404>)
 80056da:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80056de:	f105 0708 	add.w	r7, r5, #8
 80056e2:	f04f 0800 	mov.w	r8, #0
 80056e6:	e008      	b.n	80056fa <d_print_mod+0x1da>
 80056e8:	460b      	mov	r3, r1
 80056ea:	3101      	adds	r1, #1
 80056ec:	42bd      	cmp	r5, r7
 80056ee:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80056f2:	54e6      	strb	r6, [r4, r3]
 80056f4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80056f8:	d0a8      	beq.n	800564c <d_print_mod+0x12c>
 80056fa:	29ff      	cmp	r1, #255	; 0xff
 80056fc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005700:	d1f2      	bne.n	80056e8 <d_print_mod+0x1c8>
 8005702:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005706:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 800570a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800570e:	4620      	mov	r0, r4
 8005710:	4798      	blx	r3
 8005712:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005716:	3301      	adds	r3, #1
 8005718:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800571c:	2101      	movs	r1, #1
 800571e:	2300      	movs	r3, #0
 8005720:	e7e4      	b.n	80056ec <d_print_mod+0x1cc>
 8005722:	4d81      	ldr	r5, [pc, #516]	; (8005928 <d_print_mod+0x408>)
 8005724:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005728:	f105 070a 	add.w	r7, r5, #10
 800572c:	f04f 0800 	mov.w	r8, #0
 8005730:	e008      	b.n	8005744 <d_print_mod+0x224>
 8005732:	460b      	mov	r3, r1
 8005734:	3101      	adds	r1, #1
 8005736:	42bd      	cmp	r5, r7
 8005738:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800573c:	54e6      	strb	r6, [r4, r3]
 800573e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005742:	d083      	beq.n	800564c <d_print_mod+0x12c>
 8005744:	29ff      	cmp	r1, #255	; 0xff
 8005746:	f815 6b01 	ldrb.w	r6, [r5], #1
 800574a:	d1f2      	bne.n	8005732 <d_print_mod+0x212>
 800574c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005750:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005754:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005758:	4620      	mov	r0, r4
 800575a:	4798      	blx	r3
 800575c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005760:	3301      	adds	r3, #1
 8005762:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005766:	2101      	movs	r1, #1
 8005768:	2300      	movs	r3, #0
 800576a:	e7e4      	b.n	8005736 <d_print_mod+0x216>
 800576c:	f890 3104 	ldrb.w	r3, [r0, #260]	; 0x104
 8005770:	2b28      	cmp	r3, #40	; 0x28
 8005772:	d00b      	beq.n	800578c <d_print_mod+0x26c>
 8005774:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8005778:	2bff      	cmp	r3, #255	; 0xff
 800577a:	f000 8126 	beq.w	80059ca <d_print_mod+0x4aa>
 800577e:	2220      	movs	r2, #32
 8005780:	1c59      	adds	r1, r3, #1
 8005782:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005786:	54e2      	strb	r2, [r4, r3]
 8005788:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 800578c:	686a      	ldr	r2, [r5, #4]
 800578e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005792:	4d66      	ldr	r5, [pc, #408]	; (800592c <d_print_mod+0x40c>)
 8005794:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 8005798:	4641      	mov	r1, r8
 800579a:	4620      	mov	r0, r4
 800579c:	9301      	str	r3, [sp, #4]
 800579e:	9200      	str	r2, [sp, #0]
 80057a0:	f7fd f90a 	bl	80029b8 <d_print_comp_inner>
 80057a4:	9b01      	ldr	r3, [sp, #4]
 80057a6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80057aa:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80057ae:	1cef      	adds	r7, r5, #3
 80057b0:	f04f 0800 	mov.w	r8, #0
 80057b4:	e009      	b.n	80057ca <d_print_mod+0x2aa>
 80057b6:	460b      	mov	r3, r1
 80057b8:	3101      	adds	r1, #1
 80057ba:	42bd      	cmp	r5, r7
 80057bc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80057c0:	54e6      	strb	r6, [r4, r3]
 80057c2:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80057c6:	f43f af41 	beq.w	800564c <d_print_mod+0x12c>
 80057ca:	29ff      	cmp	r1, #255	; 0xff
 80057cc:	f815 6b01 	ldrb.w	r6, [r5], #1
 80057d0:	d1f1      	bne.n	80057b6 <d_print_mod+0x296>
 80057d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80057d6:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80057da:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80057de:	4620      	mov	r0, r4
 80057e0:	4798      	blx	r3
 80057e2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80057e6:	3301      	adds	r3, #1
 80057e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80057ec:	2101      	movs	r1, #1
 80057ee:	2300      	movs	r3, #0
 80057f0:	e7e3      	b.n	80057ba <d_print_mod+0x29a>
 80057f2:	4e4f      	ldr	r6, [pc, #316]	; (8005930 <d_print_mod+0x410>)
 80057f4:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80057f8:	f106 0a0a 	add.w	sl, r6, #10
 80057fc:	f04f 0900 	mov.w	r9, #0
 8005800:	e009      	b.n	8005816 <d_print_mod+0x2f6>
 8005802:	460b      	mov	r3, r1
 8005804:	3101      	adds	r1, #1
 8005806:	4556      	cmp	r6, sl
 8005808:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800580c:	54e7      	strb	r7, [r4, r3]
 800580e:	f884 7104 	strb.w	r7, [r4, #260]	; 0x104
 8005812:	f000 80c0 	beq.w	8005996 <d_print_mod+0x476>
 8005816:	29ff      	cmp	r1, #255	; 0xff
 8005818:	f816 7b01 	ldrb.w	r7, [r6], #1
 800581c:	d1f1      	bne.n	8005802 <d_print_mod+0x2e2>
 800581e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005822:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8005826:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800582a:	4620      	mov	r0, r4
 800582c:	4798      	blx	r3
 800582e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005832:	3301      	adds	r3, #1
 8005834:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005838:	2101      	movs	r1, #1
 800583a:	2300      	movs	r3, #0
 800583c:	e7e3      	b.n	8005806 <d_print_mod+0x2e6>
 800583e:	4d3d      	ldr	r5, [pc, #244]	; (8005934 <d_print_mod+0x414>)
 8005840:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005844:	f105 0709 	add.w	r7, r5, #9
 8005848:	f04f 0800 	mov.w	r8, #0
 800584c:	e009      	b.n	8005862 <d_print_mod+0x342>
 800584e:	460b      	mov	r3, r1
 8005850:	3101      	adds	r1, #1
 8005852:	42bd      	cmp	r5, r7
 8005854:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005858:	54e6      	strb	r6, [r4, r3]
 800585a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800585e:	f43f aef5 	beq.w	800564c <d_print_mod+0x12c>
 8005862:	29ff      	cmp	r1, #255	; 0xff
 8005864:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005868:	d1f1      	bne.n	800584e <d_print_mod+0x32e>
 800586a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800586e:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005872:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005876:	4620      	mov	r0, r4
 8005878:	4798      	blx	r3
 800587a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800587e:	3301      	adds	r3, #1
 8005880:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005884:	2101      	movs	r1, #1
 8005886:	2300      	movs	r3, #0
 8005888:	e7e3      	b.n	8005852 <d_print_mod+0x332>
 800588a:	4d2b      	ldr	r5, [pc, #172]	; (8005938 <d_print_mod+0x418>)
 800588c:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005890:	1daf      	adds	r7, r5, #6
 8005892:	f04f 0800 	mov.w	r8, #0
 8005896:	e009      	b.n	80058ac <d_print_mod+0x38c>
 8005898:	460b      	mov	r3, r1
 800589a:	3101      	adds	r1, #1
 800589c:	42bd      	cmp	r5, r7
 800589e:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80058a2:	54e6      	strb	r6, [r4, r3]
 80058a4:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 80058a8:	f43f aed0 	beq.w	800564c <d_print_mod+0x12c>
 80058ac:	29ff      	cmp	r1, #255	; 0xff
 80058ae:	f815 6b01 	ldrb.w	r6, [r5], #1
 80058b2:	d1f1      	bne.n	8005898 <d_print_mod+0x378>
 80058b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80058b8:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80058bc:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80058c0:	4620      	mov	r0, r4
 80058c2:	4798      	blx	r3
 80058c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80058c8:	3301      	adds	r3, #1
 80058ca:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80058ce:	2101      	movs	r1, #1
 80058d0:	2300      	movs	r3, #0
 80058d2:	e7e3      	b.n	800589c <d_print_mod+0x37c>
 80058d4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80058d8:	2bff      	cmp	r3, #255	; 0xff
 80058da:	f000 80cc 	beq.w	8005a76 <d_print_mod+0x556>
 80058de:	2220      	movs	r2, #32
 80058e0:	1c59      	adds	r1, r3, #1
 80058e2:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80058e6:	54e2      	strb	r2, [r4, r3]
 80058e8:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 80058ec:	e6c3      	b.n	8005676 <d_print_mod+0x156>
 80058ee:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80058f2:	2bff      	cmp	r3, #255	; 0xff
 80058f4:	f000 80ad 	beq.w	8005a52 <d_print_mod+0x532>
 80058f8:	2220      	movs	r2, #32
 80058fa:	1c59      	adds	r1, r3, #1
 80058fc:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005900:	54e2      	strb	r2, [r4, r3]
 8005902:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005906:	e6c5      	b.n	8005694 <d_print_mod+0x174>
 8005908:	686a      	ldr	r2, [r5, #4]
 800590a:	e692      	b.n	8005632 <d_print_mod+0x112>
 800590c:	4d0b      	ldr	r5, [pc, #44]	; (800593c <d_print_mod+0x41c>)
 800590e:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8005912:	f105 0709 	add.w	r7, r5, #9
 8005916:	f04f 0800 	mov.w	r8, #0
 800591a:	e01b      	b.n	8005954 <d_print_mod+0x434>
 800591c:	080187df 	.word	0x080187df
 8005920:	080187f4 	.word	0x080187f4
 8005924:	080187f7 	.word	0x080187f7
 8005928:	08018804 	.word	0x08018804
 800592c:	08018810 	.word	0x08018810
 8005930:	08018814 	.word	0x08018814
 8005934:	080187cb 	.word	0x080187cb
 8005938:	080187d8 	.word	0x080187d8
 800593c:	080187bf 	.word	0x080187bf
 8005940:	460b      	mov	r3, r1
 8005942:	3101      	adds	r1, #1
 8005944:	42af      	cmp	r7, r5
 8005946:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800594a:	54e6      	strb	r6, [r4, r3]
 800594c:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8005950:	f43f ae7c 	beq.w	800564c <d_print_mod+0x12c>
 8005954:	29ff      	cmp	r1, #255	; 0xff
 8005956:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800595a:	d1f1      	bne.n	8005940 <d_print_mod+0x420>
 800595c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005960:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8005964:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005968:	4620      	mov	r0, r4
 800596a:	4798      	blx	r3
 800596c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005970:	3301      	adds	r3, #1
 8005972:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005976:	2101      	movs	r1, #1
 8005978:	2300      	movs	r3, #0
 800597a:	e7e3      	b.n	8005944 <d_print_mod+0x424>
 800597c:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
 8005980:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
 8005984:	462a      	mov	r2, r5
 8005986:	9301      	str	r3, [sp, #4]
 8005988:	9500      	str	r5, [sp, #0]
 800598a:	f7fd f815 	bl	80029b8 <d_print_comp_inner>
 800598e:	9b01      	ldr	r3, [sp, #4]
 8005990:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8005994:	e65a      	b.n	800564c <d_print_mod+0x12c>
 8005996:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 800599a:	686a      	ldr	r2, [r5, #4]
 800599c:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 80059a0:	4641      	mov	r1, r8
 80059a2:	4620      	mov	r0, r4
 80059a4:	9301      	str	r3, [sp, #4]
 80059a6:	9200      	str	r2, [sp, #0]
 80059a8:	f7fd f806 	bl	80029b8 <d_print_comp_inner>
 80059ac:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80059b0:	9b01      	ldr	r3, [sp, #4]
 80059b2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80059b6:	29ff      	cmp	r1, #255	; 0xff
 80059b8:	d03a      	beq.n	8005a30 <d_print_mod+0x510>
 80059ba:	1c4a      	adds	r2, r1, #1
 80059bc:	2329      	movs	r3, #41	; 0x29
 80059be:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80059c2:	5463      	strb	r3, [r4, r1]
 80059c4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80059c8:	e640      	b.n	800564c <d_print_mod+0x12c>
 80059ca:	2600      	movs	r6, #0
 80059cc:	4619      	mov	r1, r3
 80059ce:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 80059d2:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 80059d6:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 80059da:	4798      	blx	r3
 80059dc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80059e0:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80059ea:	4633      	mov	r3, r6
 80059ec:	e6c7      	b.n	800577e <d_print_mod+0x25e>
 80059ee:	2500      	movs	r5, #0
 80059f0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80059f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80059f8:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80059fc:	4620      	mov	r0, r4
 80059fe:	4798      	blx	r3
 8005a00:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a04:	3301      	adds	r3, #1
 8005a06:	4629      	mov	r1, r5
 8005a08:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	e636      	b.n	800567e <d_print_mod+0x15e>
 8005a10:	2600      	movs	r6, #0
 8005a12:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005a16:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005a1a:	f880 60ff 	strb.w	r6, [r0, #255]	; 0xff
 8005a1e:	4798      	blx	r3
 8005a20:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a24:	3301      	adds	r3, #1
 8005a26:	4631      	mov	r1, r6
 8005a28:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	e5f9      	b.n	8005624 <d_print_mod+0x104>
 8005a30:	2500      	movs	r5, #0
 8005a32:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005a36:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005a3a:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005a3e:	4620      	mov	r0, r4
 8005a40:	4798      	blx	r3
 8005a42:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a46:	3301      	adds	r3, #1
 8005a48:	4629      	mov	r1, r5
 8005a4a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005a4e:	2201      	movs	r2, #1
 8005a50:	e7b4      	b.n	80059bc <d_print_mod+0x49c>
 8005a52:	2500      	movs	r5, #0
 8005a54:	4619      	mov	r1, r3
 8005a56:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005a5a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005a5e:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005a62:	4798      	blx	r3
 8005a64:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a68:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005a72:	462b      	mov	r3, r5
 8005a74:	e740      	b.n	80058f8 <d_print_mod+0x3d8>
 8005a76:	2500      	movs	r5, #0
 8005a78:	4619      	mov	r1, r3
 8005a7a:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005a7e:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005a82:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005a86:	4798      	blx	r3
 8005a88:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005a8c:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005a96:	462b      	mov	r3, r5
 8005a98:	e721      	b.n	80058de <d_print_mod+0x3be>
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8005aa0:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 8005aa4:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8005aa8:	4798      	blx	r3
 8005aaa:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005aae:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005ab8:	462b      	mov	r3, r5
 8005aba:	e5d2      	b.n	8005662 <d_print_mod+0x142>

08005abc <d_print_mod_list>:
 8005abc:	2a00      	cmp	r2, #0
 8005abe:	f000 80a1 	beq.w	8005c04 <d_print_mod_list+0x148>
 8005ac2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ac6:	461e      	mov	r6, r3
 8005ac8:	f8d0 3118 	ldr.w	r3, [r0, #280]	; 0x118
 8005acc:	b089      	sub	sp, #36	; 0x24
 8005ace:	4605      	mov	r5, r0
 8005ad0:	bb43      	cbnz	r3, 8005b24 <d_print_mod_list+0x68>
 8005ad2:	460f      	mov	r7, r1
 8005ad4:	4614      	mov	r4, r2
 8005ad6:	f04f 0801 	mov.w	r8, #1
 8005ada:	e002      	b.n	8005ae2 <d_print_mod_list+0x26>
 8005adc:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
 8005ae0:	bb03      	cbnz	r3, 8005b24 <d_print_mod_list+0x68>
 8005ae2:	68a3      	ldr	r3, [r4, #8]
 8005ae4:	b9db      	cbnz	r3, 8005b1e <d_print_mod_list+0x62>
 8005ae6:	6862      	ldr	r2, [r4, #4]
 8005ae8:	7813      	ldrb	r3, [r2, #0]
 8005aea:	b92e      	cbnz	r6, 8005af8 <d_print_mod_list+0x3c>
 8005aec:	f1a3 011c 	sub.w	r1, r3, #28
 8005af0:	2904      	cmp	r1, #4
 8005af2:	d914      	bls.n	8005b1e <d_print_mod_list+0x62>
 8005af4:	2b4c      	cmp	r3, #76	; 0x4c
 8005af6:	d012      	beq.n	8005b1e <d_print_mod_list+0x62>
 8005af8:	68e1      	ldr	r1, [r4, #12]
 8005afa:	f8c4 8008 	str.w	r8, [r4, #8]
 8005afe:	2b29      	cmp	r3, #41	; 0x29
 8005b00:	f8d5 9110 	ldr.w	r9, [r5, #272]	; 0x110
 8005b04:	f8c5 1110 	str.w	r1, [r5, #272]	; 0x110
 8005b08:	d00f      	beq.n	8005b2a <d_print_mod_list+0x6e>
 8005b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b0c:	d018      	beq.n	8005b40 <d_print_mod_list+0x84>
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d021      	beq.n	8005b56 <d_print_mod_list+0x9a>
 8005b12:	4639      	mov	r1, r7
 8005b14:	4628      	mov	r0, r5
 8005b16:	f7ff fd03 	bl	8005520 <d_print_mod>
 8005b1a:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005b1e:	6824      	ldr	r4, [r4, #0]
 8005b20:	2c00      	cmp	r4, #0
 8005b22:	d1db      	bne.n	8005adc <d_print_mod_list+0x20>
 8005b24:	b009      	add	sp, #36	; 0x24
 8005b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	3208      	adds	r2, #8
 8005b2e:	4639      	mov	r1, r7
 8005b30:	4628      	mov	r0, r5
 8005b32:	f000 f9d9 	bl	8005ee8 <d_print_function_type.isra.11>
 8005b36:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005b3a:	b009      	add	sp, #36	; 0x24
 8005b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b40:	6823      	ldr	r3, [r4, #0]
 8005b42:	3204      	adds	r2, #4
 8005b44:	4639      	mov	r1, r7
 8005b46:	4628      	mov	r0, r5
 8005b48:	f000 f8f2 	bl	8005d30 <d_print_array_type.isra.10>
 8005b4c:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005b50:	b009      	add	sp, #36	; 0x24
 8005b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b56:	2600      	movs	r6, #0
 8005b58:	f8d5 8114 	ldr.w	r8, [r5, #276]	; 0x114
 8005b5c:	f8c5 6114 	str.w	r6, [r5, #276]	; 0x114
 8005b60:	6852      	ldr	r2, [r2, #4]
 8005b62:	4639      	mov	r1, r7
 8005b64:	4628      	mov	r0, r5
 8005b66:	f7ff fccb 	bl	8005500 <d_print_comp>
 8005b6a:	f017 0a04 	ands.w	sl, r7, #4
 8005b6e:	f8c5 8114 	str.w	r8, [r5, #276]	; 0x114
 8005b72:	d023      	beq.n	8005bbc <d_print_mod_list+0x100>
 8005b74:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005b78:	29ff      	cmp	r1, #255	; 0xff
 8005b7a:	f000 80c1 	beq.w	8005d00 <d_print_mod_list+0x244>
 8005b7e:	1c4a      	adds	r2, r1, #1
 8005b80:	232e      	movs	r3, #46	; 0x2e
 8005b82:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
 8005b86:	546b      	strb	r3, [r5, r1]
 8005b88:	f885 3104 	strb.w	r3, [r5, #260]	; 0x104
 8005b8c:	6863      	ldr	r3, [r4, #4]
 8005b8e:	689c      	ldr	r4, [r3, #8]
 8005b90:	7823      	ldrb	r3, [r4, #0]
 8005b92:	2b46      	cmp	r3, #70	; 0x46
 8005b94:	d037      	beq.n	8005c06 <d_print_mod_list+0x14a>
 8005b96:	f1a3 021c 	sub.w	r2, r3, #28
 8005b9a:	2a04      	cmp	r2, #4
 8005b9c:	d90b      	bls.n	8005bb6 <d_print_mod_list+0xfa>
 8005b9e:	2b4c      	cmp	r3, #76	; 0x4c
 8005ba0:	d009      	beq.n	8005bb6 <d_print_mod_list+0xfa>
 8005ba2:	4622      	mov	r2, r4
 8005ba4:	4639      	mov	r1, r7
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f7ff fcaa 	bl	8005500 <d_print_comp>
 8005bac:	f8c5 9110 	str.w	r9, [r5, #272]	; 0x110
 8005bb0:	b009      	add	sp, #36	; 0x24
 8005bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb6:	6864      	ldr	r4, [r4, #4]
 8005bb8:	7823      	ldrb	r3, [r4, #0]
 8005bba:	e7ec      	b.n	8005b96 <d_print_mod_list+0xda>
 8005bbc:	4e58      	ldr	r6, [pc, #352]	; (8005d20 <d_print_mod_list+0x264>)
 8005bbe:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005bc2:	f106 0b02 	add.w	fp, r6, #2
 8005bc6:	e009      	b.n	8005bdc <d_print_mod_list+0x120>
 8005bc8:	460b      	mov	r3, r1
 8005bca:	3101      	adds	r1, #1
 8005bcc:	455e      	cmp	r6, fp
 8005bce:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005bd2:	f805 8003 	strb.w	r8, [r5, r3]
 8005bd6:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005bda:	d0d7      	beq.n	8005b8c <d_print_mod_list+0xd0>
 8005bdc:	29ff      	cmp	r1, #255	; 0xff
 8005bde:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005be2:	d1f1      	bne.n	8005bc8 <d_print_mod_list+0x10c>
 8005be4:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005be8:	f885 a0ff 	strb.w	sl, [r5, #255]	; 0xff
 8005bec:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	4798      	blx	r3
 8005bf4:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005bfe:	2101      	movs	r1, #1
 8005c00:	2300      	movs	r3, #0
 8005c02:	e7e3      	b.n	8005bcc <d_print_mod_list+0x110>
 8005c04:	4770      	bx	lr
 8005c06:	4e47      	ldr	r6, [pc, #284]	; (8005d24 <d_print_mod_list+0x268>)
 8005c08:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005c0c:	f106 0a0d 	add.w	sl, r6, #13
 8005c10:	f04f 0b00 	mov.w	fp, #0
 8005c14:	e009      	b.n	8005c2a <d_print_mod_list+0x16e>
 8005c16:	460b      	mov	r3, r1
 8005c18:	3101      	adds	r1, #1
 8005c1a:	45b2      	cmp	sl, r6
 8005c1c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005c20:	f805 8003 	strb.w	r8, [r5, r3]
 8005c24:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005c28:	d013      	beq.n	8005c52 <d_print_mod_list+0x196>
 8005c2a:	29ff      	cmp	r1, #255	; 0xff
 8005c2c:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005c30:	d1f1      	bne.n	8005c16 <d_print_mod_list+0x15a>
 8005c32:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005c36:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8005c3a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005c3e:	4628      	mov	r0, r5
 8005c40:	4798      	blx	r3
 8005c42:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005c46:	3301      	adds	r3, #1
 8005c48:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005c4c:	2101      	movs	r1, #1
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e7e3      	b.n	8005c1a <d_print_mod_list+0x15e>
 8005c52:	68a2      	ldr	r2, [r4, #8]
 8005c54:	4934      	ldr	r1, [pc, #208]	; (8005d28 <d_print_mod_list+0x26c>)
 8005c56:	3201      	adds	r2, #1
 8005c58:	a801      	add	r0, sp, #4
 8005c5a:	f00b fcbf 	bl	80115dc <sprintf>
 8005c5e:	a801      	add	r0, sp, #4
 8005c60:	f000 fe68 	bl	8006934 <strlen>
 8005c64:	b328      	cbz	r0, 8005cb2 <d_print_mod_list+0x1f6>
 8005c66:	ae01      	add	r6, sp, #4
 8005c68:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005c6c:	eb06 0a00 	add.w	sl, r6, r0
 8005c70:	f04f 0b00 	mov.w	fp, #0
 8005c74:	e009      	b.n	8005c8a <d_print_mod_list+0x1ce>
 8005c76:	460b      	mov	r3, r1
 8005c78:	3101      	adds	r1, #1
 8005c7a:	45b2      	cmp	sl, r6
 8005c7c:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005c80:	f805 8003 	strb.w	r8, [r5, r3]
 8005c84:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005c88:	d015      	beq.n	8005cb6 <d_print_mod_list+0x1fa>
 8005c8a:	29ff      	cmp	r1, #255	; 0xff
 8005c8c:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005c90:	d1f1      	bne.n	8005c76 <d_print_mod_list+0x1ba>
 8005c92:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005c96:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8005c9a:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	4798      	blx	r3
 8005ca2:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005cac:	2101      	movs	r1, #1
 8005cae:	2300      	movs	r3, #0
 8005cb0:	e7e3      	b.n	8005c7a <d_print_mod_list+0x1be>
 8005cb2:	f8d5 1100 	ldr.w	r1, [r5, #256]	; 0x100
 8005cb6:	4e1d      	ldr	r6, [pc, #116]	; (8005d2c <d_print_mod_list+0x270>)
 8005cb8:	f04f 0b00 	mov.w	fp, #0
 8005cbc:	f106 0a03 	add.w	sl, r6, #3
 8005cc0:	e00a      	b.n	8005cd8 <d_print_mod_list+0x21c>
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	3101      	adds	r1, #1
 8005cc6:	45b2      	cmp	sl, r6
 8005cc8:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
 8005ccc:	f805 8003 	strb.w	r8, [r5, r3]
 8005cd0:	f885 8104 	strb.w	r8, [r5, #260]	; 0x104
 8005cd4:	f43f af6f 	beq.w	8005bb6 <d_print_mod_list+0xfa>
 8005cd8:	29ff      	cmp	r1, #255	; 0xff
 8005cda:	f816 8b01 	ldrb.w	r8, [r6], #1
 8005cde:	d1f0      	bne.n	8005cc2 <d_print_mod_list+0x206>
 8005ce0:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005ce4:	f885 b0ff 	strb.w	fp, [r5, #255]	; 0xff
 8005ce8:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005cec:	4628      	mov	r0, r5
 8005cee:	4798      	blx	r3
 8005cf0:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005cf4:	3301      	adds	r3, #1
 8005cf6:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005cfa:	2101      	movs	r1, #1
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	e7e2      	b.n	8005cc6 <d_print_mod_list+0x20a>
 8005d00:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
 8005d04:	f8d5 210c 	ldr.w	r2, [r5, #268]	; 0x10c
 8005d08:	f885 60ff 	strb.w	r6, [r5, #255]	; 0xff
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	4798      	blx	r3
 8005d10:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8005d14:	3301      	adds	r3, #1
 8005d16:	4631      	mov	r1, r6
 8005d18:	f8c5 3124 	str.w	r3, [r5, #292]	; 0x124
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	e72f      	b.n	8005b80 <d_print_mod_list+0xc4>
 8005d20:	08018540 	.word	0x08018540
 8005d24:	08018544 	.word	0x08018544
 8005d28:	080184f0 	.word	0x080184f0
 8005d2c:	08018554 	.word	0x08018554

08005d30 <d_print_array_type.isra.10>:
 8005d30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d34:	4604      	mov	r4, r0
 8005d36:	460f      	mov	r7, r1
 8005d38:	4690      	mov	r8, r2
 8005d3a:	b163      	cbz	r3, 8005d56 <d_print_array_type.isra.10+0x26>
 8005d3c:	461e      	mov	r6, r3
 8005d3e:	461a      	mov	r2, r3
 8005d40:	6893      	ldr	r3, [r2, #8]
 8005d42:	b393      	cbz	r3, 8005daa <d_print_array_type.isra.10+0x7a>
 8005d44:	6812      	ldr	r2, [r2, #0]
 8005d46:	2a00      	cmp	r2, #0
 8005d48:	d1fa      	bne.n	8005d40 <d_print_array_type.isra.10+0x10>
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	4639      	mov	r1, r7
 8005d4e:	4632      	mov	r2, r6
 8005d50:	4620      	mov	r0, r4
 8005d52:	f7ff feb3 	bl	8005abc <d_print_mod_list>
 8005d56:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005d5a:	29ff      	cmp	r1, #255	; 0xff
 8005d5c:	f000 808d 	beq.w	8005e7a <d_print_array_type.isra.10+0x14a>
 8005d60:	1c4b      	adds	r3, r1, #1
 8005d62:	2220      	movs	r2, #32
 8005d64:	2bff      	cmp	r3, #255	; 0xff
 8005d66:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005d6a:	5462      	strb	r2, [r4, r1]
 8005d6c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005d70:	d068      	beq.n	8005e44 <d_print_array_type.isra.10+0x114>
 8005d72:	225b      	movs	r2, #91	; 0x5b
 8005d74:	1c59      	adds	r1, r3, #1
 8005d76:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005d7a:	54e2      	strb	r2, [r4, r3]
 8005d7c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005d80:	f8d8 2000 	ldr.w	r2, [r8]
 8005d84:	b12a      	cbz	r2, 8005d92 <d_print_array_type.isra.10+0x62>
 8005d86:	4639      	mov	r1, r7
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f7ff fbb9 	bl	8005500 <d_print_comp>
 8005d8e:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005d92:	29ff      	cmp	r1, #255	; 0xff
 8005d94:	f000 8082 	beq.w	8005e9c <d_print_array_type.isra.10+0x16c>
 8005d98:	1c4a      	adds	r2, r1, #1
 8005d9a:	235d      	movs	r3, #93	; 0x5d
 8005d9c:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005da0:	5463      	strb	r3, [r4, r1]
 8005da2:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005da6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005daa:	6852      	ldr	r2, [r2, #4]
 8005dac:	7812      	ldrb	r2, [r2, #0]
 8005dae:	2a2a      	cmp	r2, #42	; 0x2a
 8005db0:	d03f      	beq.n	8005e32 <d_print_array_type.isra.10+0x102>
 8005db2:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8005ee4 <d_print_array_type.isra.10+0x1b4>
 8005db6:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005dba:	461d      	mov	r5, r3
 8005dbc:	f109 0b02 	add.w	fp, r9, #2
 8005dc0:	e00a      	b.n	8005dd8 <d_print_array_type.isra.10+0xa8>
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	45cb      	cmp	fp, r9
 8005dc6:	f101 0101 	add.w	r1, r1, #1
 8005dca:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005dce:	f804 a003 	strb.w	sl, [r4, r3]
 8005dd2:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005dd6:	d01a      	beq.n	8005e0e <d_print_array_type.isra.10+0xde>
 8005dd8:	29ff      	cmp	r1, #255	; 0xff
 8005dda:	f819 ab01 	ldrb.w	sl, [r9], #1
 8005dde:	d1f0      	bne.n	8005dc2 <d_print_array_type.isra.10+0x92>
 8005de0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005de4:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005de8:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005dec:	4620      	mov	r0, r4
 8005dee:	4798      	blx	r3
 8005df0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005df4:	3301      	adds	r3, #1
 8005df6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	45cb      	cmp	fp, r9
 8005e00:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e04:	f804 a003 	strb.w	sl, [r4, r3]
 8005e08:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8005e0c:	d1e4      	bne.n	8005dd8 <d_print_array_type.isra.10+0xa8>
 8005e0e:	2300      	movs	r3, #0
 8005e10:	4632      	mov	r2, r6
 8005e12:	4639      	mov	r1, r7
 8005e14:	4620      	mov	r0, r4
 8005e16:	f7ff fe51 	bl	8005abc <d_print_mod_list>
 8005e1a:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005e1e:	2bff      	cmp	r3, #255	; 0xff
 8005e20:	d04d      	beq.n	8005ebe <d_print_array_type.isra.10+0x18e>
 8005e22:	1c59      	adds	r1, r3, #1
 8005e24:	2229      	movs	r2, #41	; 0x29
 8005e26:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e2a:	54e2      	strb	r2, [r4, r3]
 8005e2c:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005e30:	e793      	b.n	8005d5a <d_print_array_type.isra.10+0x2a>
 8005e32:	4632      	mov	r2, r6
 8005e34:	4639      	mov	r1, r7
 8005e36:	4620      	mov	r0, r4
 8005e38:	f7ff fe40 	bl	8005abc <d_print_mod_list>
 8005e3c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005e40:	2bff      	cmp	r3, #255	; 0xff
 8005e42:	d196      	bne.n	8005d72 <d_print_array_type.isra.10+0x42>
 8005e44:	2200      	movs	r2, #0
 8005e46:	4619      	mov	r1, r3
 8005e48:	f884 20ff 	strb.w	r2, [r4, #255]	; 0xff
 8005e4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e50:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e54:	4620      	mov	r0, r4
 8005e56:	4798      	blx	r3
 8005e58:	235b      	movs	r3, #91	; 0x5b
 8005e5a:	7023      	strb	r3, [r4, #0]
 8005e5c:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005e60:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e64:	f8d8 2000 	ldr.w	r2, [r8]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	2101      	movs	r1, #1
 8005e6c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005e70:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005e74:	2a00      	cmp	r2, #0
 8005e76:	d186      	bne.n	8005d86 <d_print_array_type.isra.10+0x56>
 8005e78:	e78e      	b.n	8005d98 <d_print_array_type.isra.10+0x68>
 8005e7a:	2500      	movs	r5, #0
 8005e7c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005e80:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005e84:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005e88:	4620      	mov	r0, r4
 8005e8a:	4798      	blx	r3
 8005e8c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005e90:	3301      	adds	r3, #1
 8005e92:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005e96:	4629      	mov	r1, r5
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e762      	b.n	8005d62 <d_print_array_type.isra.10+0x32>
 8005e9c:	2500      	movs	r5, #0
 8005e9e:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005ea2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ea6:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005eaa:	4620      	mov	r0, r4
 8005eac:	4798      	blx	r3
 8005eae:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8005eba:	2201      	movs	r2, #1
 8005ebc:	e76d      	b.n	8005d9a <d_print_array_type.isra.10+0x6a>
 8005ebe:	2500      	movs	r5, #0
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8005ec6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8005eca:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 8005ece:	4620      	mov	r0, r4
 8005ed0:	4798      	blx	r3
 8005ed2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8005edc:	462b      	mov	r3, r5
 8005ede:	2101      	movs	r1, #1
 8005ee0:	e7a0      	b.n	8005e24 <d_print_array_type.isra.10+0xf4>
 8005ee2:	bf00      	nop
 8005ee4:	08018738 	.word	0x08018738

08005ee8 <d_print_function_type.isra.11>:
 8005ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005eec:	4604      	mov	r4, r0
 8005eee:	b083      	sub	sp, #12
 8005ef0:	460e      	mov	r6, r1
 8005ef2:	4617      	mov	r7, r2
 8005ef4:	461d      	mov	r5, r3
 8005ef6:	b34b      	cbz	r3, 8005f4c <d_print_function_type.isra.11+0x64>
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	bb3b      	cbnz	r3, 8005f4c <d_print_function_type.isra.11+0x64>
 8005efc:	462a      	mov	r2, r5
 8005efe:	2001      	movs	r0, #1
 8005f00:	f8df e1c8 	ldr.w	lr, [pc, #456]	; 80060cc <d_print_function_type.isra.11+0x1e4>
 8005f04:	e006      	b.n	8005f14 <d_print_function_type.isra.11+0x2c>
 8005f06:	f411 6f60 	tst.w	r1, #3584	; 0xe00
 8005f0a:	d15a      	bne.n	8005fc2 <d_print_function_type.isra.11+0xda>
 8005f0c:	6812      	ldr	r2, [r2, #0]
 8005f0e:	b1ea      	cbz	r2, 8005f4c <d_print_function_type.isra.11+0x64>
 8005f10:	6893      	ldr	r3, [r2, #8]
 8005f12:	b9db      	cbnz	r3, 8005f4c <d_print_function_type.isra.11+0x64>
 8005f14:	6853      	ldr	r3, [r2, #4]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	3b19      	subs	r3, #25
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b12      	cmp	r3, #18
 8005f1e:	fa00 f103 	lsl.w	r1, r0, r3
 8005f22:	d8f3      	bhi.n	8005f0c <d_print_function_type.isra.11+0x24>
 8005f24:	ea11 0f0e 	tst.w	r1, lr
 8005f28:	d0ed      	beq.n	8005f06 <d_print_function_type.isra.11+0x1e>
 8005f2a:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8005f2e:	2b20      	cmp	r3, #32
 8005f30:	d04d      	beq.n	8005fce <d_print_function_type.isra.11+0xe6>
 8005f32:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005f36:	2bff      	cmp	r3, #255	; 0xff
 8005f38:	f000 80b4 	beq.w	80060a4 <d_print_function_type.isra.11+0x1bc>
 8005f3c:	1c59      	adds	r1, r3, #1
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8005f44:	54e2      	strb	r2, [r4, r3]
 8005f46:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005f4a:	e042      	b.n	8005fd2 <d_print_function_type.isra.11+0xea>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8005f52:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 8005f56:	4631      	mov	r1, r6
 8005f58:	462a      	mov	r2, r5
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f7ff fdae 	bl	8005abc <d_print_mod_list>
 8005f60:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005f64:	29ff      	cmp	r1, #255	; 0xff
 8005f66:	d056      	beq.n	8006016 <d_print_function_type.isra.11+0x12e>
 8005f68:	1c4b      	adds	r3, r1, #1
 8005f6a:	2228      	movs	r2, #40	; 0x28
 8005f6c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 8005f70:	5462      	strb	r2, [r4, r1]
 8005f72:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8005f76:	6838      	ldr	r0, [r7, #0]
 8005f78:	b178      	cbz	r0, 8005f9a <d_print_function_type.isra.11+0xb2>
 8005f7a:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8005f7e:	9000      	str	r0, [sp, #0]
 8005f80:	4602      	mov	r2, r0
 8005f82:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 8005f86:	4631      	mov	r1, r6
 8005f88:	4620      	mov	r0, r4
 8005f8a:	9301      	str	r3, [sp, #4]
 8005f8c:	f7fc fd14 	bl	80029b8 <d_print_comp_inner>
 8005f90:	9a01      	ldr	r2, [sp, #4]
 8005f92:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8005f96:	f8c4 2128 	str.w	r2, [r4, #296]	; 0x128
 8005f9a:	2bff      	cmp	r3, #255	; 0xff
 8005f9c:	d04d      	beq.n	800603a <d_print_function_type.isra.11+0x152>
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	2029      	movs	r0, #41	; 0x29
 8005fa2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	54e0      	strb	r0, [r4, r3]
 8005faa:	462a      	mov	r2, r5
 8005fac:	f884 0104 	strb.w	r0, [r4, #260]	; 0x104
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	4620      	mov	r0, r4
 8005fb4:	f7ff fd82 	bl	8005abc <d_print_mod_list>
 8005fb8:	f8c4 8114 	str.w	r8, [r4, #276]	; 0x114
 8005fbc:	b003      	add	sp, #12
 8005fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fc2:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
 8005fc6:	f003 02fd 	and.w	r2, r3, #253	; 0xfd
 8005fca:	2a28      	cmp	r2, #40	; 0x28
 8005fcc:	d1af      	bne.n	8005f2e <d_print_function_type.isra.11+0x46>
 8005fce:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8005fd2:	29ff      	cmp	r1, #255	; 0xff
 8005fd4:	d054      	beq.n	8006080 <d_print_function_type.isra.11+0x198>
 8005fd6:	1c4a      	adds	r2, r1, #1
 8005fd8:	2328      	movs	r3, #40	; 0x28
 8005fda:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8005fde:	5463      	strb	r3, [r4, r1]
 8005fe0:	f04f 0900 	mov.w	r9, #0
 8005fe4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 8005fe8:	f8d4 8114 	ldr.w	r8, [r4, #276]	; 0x114
 8005fec:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 8005ff0:	464b      	mov	r3, r9
 8005ff2:	462a      	mov	r2, r5
 8005ff4:	4631      	mov	r1, r6
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	f7ff fd60 	bl	8005abc <d_print_mod_list>
 8005ffc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
 8006000:	2bff      	cmp	r3, #255	; 0xff
 8006002:	d02c      	beq.n	800605e <d_print_function_type.isra.11+0x176>
 8006004:	1c59      	adds	r1, r3, #1
 8006006:	2229      	movs	r2, #41	; 0x29
 8006008:	29ff      	cmp	r1, #255	; 0xff
 800600a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800600e:	54e2      	strb	r2, [r4, r3]
 8006010:	f884 2104 	strb.w	r2, [r4, #260]	; 0x104
 8006014:	d1a8      	bne.n	8005f68 <d_print_function_type.isra.11+0x80>
 8006016:	f04f 0900 	mov.w	r9, #0
 800601a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800601e:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 8006022:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006026:	4620      	mov	r0, r4
 8006028:	4798      	blx	r3
 800602a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800602e:	3301      	adds	r3, #1
 8006030:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006034:	4649      	mov	r1, r9
 8006036:	2301      	movs	r3, #1
 8006038:	e797      	b.n	8005f6a <d_print_function_type.isra.11+0x82>
 800603a:	2700      	movs	r7, #0
 800603c:	4619      	mov	r1, r3
 800603e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006042:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006046:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 800604a:	4620      	mov	r0, r4
 800604c:	4798      	blx	r3
 800604e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006058:	463b      	mov	r3, r7
 800605a:	2201      	movs	r2, #1
 800605c:	e7a0      	b.n	8005fa0 <d_print_function_type.isra.11+0xb8>
 800605e:	4619      	mov	r1, r3
 8006060:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006064:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006068:	f884 90ff 	strb.w	r9, [r4, #255]	; 0xff
 800606c:	4620      	mov	r0, r4
 800606e:	4798      	blx	r3
 8006070:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 800607a:	464b      	mov	r3, r9
 800607c:	2101      	movs	r1, #1
 800607e:	e7c2      	b.n	8006006 <d_print_function_type.isra.11+0x11e>
 8006080:	f04f 0800 	mov.w	r8, #0
 8006084:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006088:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800608c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006090:	4620      	mov	r0, r4
 8006092:	4798      	blx	r3
 8006094:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006098:	3301      	adds	r3, #1
 800609a:	4641      	mov	r1, r8
 800609c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80060a0:	2201      	movs	r2, #1
 80060a2:	e799      	b.n	8005fd8 <d_print_function_type.isra.11+0xf0>
 80060a4:	f04f 0800 	mov.w	r8, #0
 80060a8:	4619      	mov	r1, r3
 80060aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80060ae:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80060b2:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 80060b6:	4620      	mov	r0, r4
 80060b8:	4798      	blx	r3
 80060ba:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80060be:	1c5a      	adds	r2, r3, #1
 80060c0:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 80060c4:	4643      	mov	r3, r8
 80060c6:	2101      	movs	r1, #1
 80060c8:	e739      	b.n	8005f3e <d_print_function_type.isra.11+0x56>
 80060ca:	bf00      	nop
 80060cc:	00043107 	.word	0x00043107

080060d0 <d_print_expr_op>:
 80060d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060d4:	7815      	ldrb	r5, [r2, #0]
 80060d6:	2d31      	cmp	r5, #49	; 0x31
 80060d8:	b082      	sub	sp, #8
 80060da:	4613      	mov	r3, r2
 80060dc:	4604      	mov	r4, r0
 80060de:	d00d      	beq.n	80060fc <d_print_expr_op+0x2c>
 80060e0:	f8d0 5128 	ldr.w	r5, [r0, #296]	; 0x128
 80060e4:	f8c0 d128 	str.w	sp, [r0, #296]	; 0x128
 80060e8:	e88d 0028 	stmia.w	sp, {r3, r5}
 80060ec:	f7fc fc64 	bl	80029b8 <d_print_comp_inner>
 80060f0:	9b01      	ldr	r3, [sp, #4]
 80060f2:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80060f6:	b002      	add	sp, #8
 80060f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060fc:	6853      	ldr	r3, [r2, #4]
 80060fe:	689f      	ldr	r7, [r3, #8]
 8006100:	685d      	ldr	r5, [r3, #4]
 8006102:	2f00      	cmp	r7, #0
 8006104:	d0f7      	beq.n	80060f6 <d_print_expr_op+0x26>
 8006106:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800610a:	442f      	add	r7, r5
 800610c:	f04f 0800 	mov.w	r8, #0
 8006110:	e008      	b.n	8006124 <d_print_expr_op+0x54>
 8006112:	460b      	mov	r3, r1
 8006114:	3101      	adds	r1, #1
 8006116:	42bd      	cmp	r5, r7
 8006118:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800611c:	54e6      	strb	r6, [r4, r3]
 800611e:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 8006122:	d0e8      	beq.n	80060f6 <d_print_expr_op+0x26>
 8006124:	29ff      	cmp	r1, #255	; 0xff
 8006126:	f815 6b01 	ldrb.w	r6, [r5], #1
 800612a:	d1f2      	bne.n	8006112 <d_print_expr_op+0x42>
 800612c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006130:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006134:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006138:	4620      	mov	r0, r4
 800613a:	4798      	blx	r3
 800613c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006140:	3301      	adds	r3, #1
 8006142:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006146:	2101      	movs	r1, #1
 8006148:	2300      	movs	r3, #0
 800614a:	e7e4      	b.n	8006116 <d_print_expr_op+0x46>

0800614c <d_print_subexpr>:
 800614c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800614e:	7813      	ldrb	r3, [r2, #0]
 8006150:	2b01      	cmp	r3, #1
 8006152:	b083      	sub	sp, #12
 8006154:	4615      	mov	r5, r2
 8006156:	460e      	mov	r6, r1
 8006158:	4604      	mov	r4, r0
 800615a:	d929      	bls.n	80061b0 <d_print_subexpr+0x64>
 800615c:	2b30      	cmp	r3, #48	; 0x30
 800615e:	d027      	beq.n	80061b0 <d_print_subexpr+0x64>
 8006160:	2b06      	cmp	r3, #6
 8006162:	d025      	beq.n	80061b0 <d_print_subexpr+0x64>
 8006164:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 8006168:	29ff      	cmp	r1, #255	; 0xff
 800616a:	d031      	beq.n	80061d0 <d_print_subexpr+0x84>
 800616c:	1c4a      	adds	r2, r1, #1
 800616e:	2328      	movs	r3, #40	; 0x28
 8006170:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8006174:	5463      	strb	r3, [r4, r1]
 8006176:	462a      	mov	r2, r5
 8006178:	4631      	mov	r1, r6
 800617a:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 800617e:	4620      	mov	r0, r4
 8006180:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8006184:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 8006188:	9301      	str	r3, [sp, #4]
 800618a:	9500      	str	r5, [sp, #0]
 800618c:	f7fc fc14 	bl	80029b8 <d_print_comp_inner>
 8006190:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006194:	9b01      	ldr	r3, [sp, #4]
 8006196:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 800619a:	29ff      	cmp	r1, #255	; 0xff
 800619c:	d028      	beq.n	80061f0 <d_print_subexpr+0xa4>
 800619e:	1c4a      	adds	r2, r1, #1
 80061a0:	2329      	movs	r3, #41	; 0x29
 80061a2:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80061a6:	5463      	strb	r3, [r4, r1]
 80061a8:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80061ac:	b003      	add	sp, #12
 80061ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061b0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80061b4:	f8c4 d128 	str.w	sp, [r4, #296]	; 0x128
 80061b8:	4631      	mov	r1, r6
 80061ba:	462a      	mov	r2, r5
 80061bc:	4620      	mov	r0, r4
 80061be:	9301      	str	r3, [sp, #4]
 80061c0:	9500      	str	r5, [sp, #0]
 80061c2:	f7fc fbf9 	bl	80029b8 <d_print_comp_inner>
 80061c6:	9b01      	ldr	r3, [sp, #4]
 80061c8:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 80061cc:	b003      	add	sp, #12
 80061ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061d0:	2700      	movs	r7, #0
 80061d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80061d6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80061da:	f884 70ff 	strb.w	r7, [r4, #255]	; 0xff
 80061de:	4798      	blx	r3
 80061e0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80061e4:	3301      	adds	r3, #1
 80061e6:	4639      	mov	r1, r7
 80061e8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80061ec:	2201      	movs	r2, #1
 80061ee:	e7be      	b.n	800616e <d_print_subexpr+0x22>
 80061f0:	2500      	movs	r5, #0
 80061f2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80061f6:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80061fa:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 80061fe:	4620      	mov	r0, r4
 8006200:	4798      	blx	r3
 8006202:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006206:	3301      	adds	r3, #1
 8006208:	4629      	mov	r1, r5
 800620a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800620e:	2201      	movs	r2, #1
 8006210:	e7c6      	b.n	80061a0 <d_print_subexpr+0x54>
 8006212:	bf00      	nop

08006214 <d_maybe_print_fold_expression.isra.15>:
 8006214:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006218:	6852      	ldr	r2, [r2, #4]
 800621a:	6812      	ldr	r2, [r2, #0]
 800621c:	7815      	ldrb	r5, [r2, #0]
 800621e:	2d66      	cmp	r5, #102	; 0x66
 8006220:	d002      	beq.n	8006228 <d_maybe_print_fold_expression.isra.15+0x14>
 8006222:	2000      	movs	r0, #0
 8006224:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f8d0 7120 	ldr.w	r7, [r0, #288]	; 0x120
 800622e:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8006232:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8006236:	f899 3000 	ldrb.w	r3, [r9]
 800623a:	2b3b      	cmp	r3, #59	; 0x3b
 800623c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006240:	bf04      	itt	eq
 8006242:	f8d9 5008 	ldreq.w	r5, [r9, #8]
 8006246:	f8d9 9004 	ldreq.w	r9, [r9, #4]
 800624a:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
 800624e:	7853      	ldrb	r3, [r2, #1]
 8006250:	f1a3 034c 	sub.w	r3, r3, #76	; 0x4c
 8006254:	bf18      	it	ne
 8006256:	2500      	movne	r5, #0
 8006258:	460e      	mov	r6, r1
 800625a:	4604      	mov	r4, r0
 800625c:	2b26      	cmp	r3, #38	; 0x26
 800625e:	d82b      	bhi.n	80062b8 <d_maybe_print_fold_expression.isra.15+0xa4>
 8006260:	e8df f003 	tbb	[pc, r3]
 8006264:	2a2a2a90 	.word	0x2a2a2a90
 8006268:	2a902a2a 	.word	0x2a902a2a
 800626c:	2a2a2a2a 	.word	0x2a2a2a2a
 8006270:	2a2a2a2a 	.word	0x2a2a2a2a
 8006274:	2a2a2a2a 	.word	0x2a2a2a2a
 8006278:	2a2a2a2a 	.word	0x2a2a2a2a
 800627c:	2a2a2a2a 	.word	0x2a2a2a2a
 8006280:	2a2a2a2a 	.word	0x2a2a2a2a
 8006284:	2a2a2a6a 	.word	0x2a2a2a6a
 8006288:	2a2a      	.short	0x2a2a
 800628a:	2f          	.byte	0x2f
 800628b:	00          	.byte	0x00
 800628c:	4642      	mov	r2, r8
 800628e:	4631      	mov	r1, r6
 8006290:	4620      	mov	r0, r4
 8006292:	f7ff ff1d 	bl	80060d0 <d_print_expr_op>
 8006296:	464a      	mov	r2, r9
 8006298:	4631      	mov	r1, r6
 800629a:	4620      	mov	r0, r4
 800629c:	f7ff ff56 	bl	800614c <d_print_subexpr>
 80062a0:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80062a4:	29ff      	cmp	r1, #255	; 0xff
 80062a6:	f000 80b2 	beq.w	800640e <d_maybe_print_fold_expression.isra.15+0x1fa>
 80062aa:	1c4a      	adds	r2, r1, #1
 80062ac:	2329      	movs	r3, #41	; 0x29
 80062ae:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80062b2:	5463      	strb	r3, [r4, r1]
 80062b4:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80062b8:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120
 80062bc:	2001      	movs	r0, #1
 80062be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c2:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 80062c6:	29ff      	cmp	r1, #255	; 0xff
 80062c8:	f000 80c5 	beq.w	8006456 <d_maybe_print_fold_expression.isra.15+0x242>
 80062cc:	1c4a      	adds	r2, r1, #1
 80062ce:	2328      	movs	r3, #40	; 0x28
 80062d0:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80062d4:	4620      	mov	r0, r4
 80062d6:	5463      	strb	r3, [r4, r1]
 80062d8:	464a      	mov	r2, r9
 80062da:	4631      	mov	r1, r6
 80062dc:	f884 3104 	strb.w	r3, [r4, #260]	; 0x104
 80062e0:	4d65      	ldr	r5, [pc, #404]	; (8006478 <d_maybe_print_fold_expression.isra.15+0x264>)
 80062e2:	f7ff ff33 	bl	800614c <d_print_subexpr>
 80062e6:	4642      	mov	r2, r8
 80062e8:	4631      	mov	r1, r6
 80062ea:	4620      	mov	r0, r4
 80062ec:	f7ff fef0 	bl	80060d0 <d_print_expr_op>
 80062f0:	f105 0904 	add.w	r9, r5, #4
 80062f4:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80062f8:	f04f 0800 	mov.w	r8, #0
 80062fc:	e008      	b.n	8006310 <d_maybe_print_fold_expression.isra.15+0xfc>
 80062fe:	460b      	mov	r3, r1
 8006300:	3101      	adds	r1, #1
 8006302:	45a9      	cmp	r9, r5
 8006304:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006308:	54e6      	strb	r6, [r4, r3]
 800630a:	f884 6104 	strb.w	r6, [r4, #260]	; 0x104
 800630e:	d0d3      	beq.n	80062b8 <d_maybe_print_fold_expression.isra.15+0xa4>
 8006310:	29ff      	cmp	r1, #255	; 0xff
 8006312:	f815 6b01 	ldrb.w	r6, [r5], #1
 8006316:	d1f2      	bne.n	80062fe <d_maybe_print_fold_expression.isra.15+0xea>
 8006318:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800631c:	f884 80ff 	strb.w	r8, [r4, #255]	; 0xff
 8006320:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006324:	4620      	mov	r0, r4
 8006326:	4798      	blx	r3
 8006328:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800632c:	3301      	adds	r3, #1
 800632e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006332:	2101      	movs	r1, #1
 8006334:	2300      	movs	r3, #0
 8006336:	e7e4      	b.n	8006302 <d_maybe_print_fold_expression.isra.15+0xee>
 8006338:	4d50      	ldr	r5, [pc, #320]	; (800647c <d_maybe_print_fold_expression.isra.15+0x268>)
 800633a:	f8d0 1100 	ldr.w	r1, [r0, #256]	; 0x100
 800633e:	f105 0b04 	add.w	fp, r5, #4
 8006342:	e009      	b.n	8006358 <d_maybe_print_fold_expression.isra.15+0x144>
 8006344:	460b      	mov	r3, r1
 8006346:	3101      	adds	r1, #1
 8006348:	455d      	cmp	r5, fp
 800634a:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 800634e:	f804 a003 	strb.w	sl, [r4, r3]
 8006352:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 8006356:	d099      	beq.n	800628c <d_maybe_print_fold_expression.isra.15+0x78>
 8006358:	29ff      	cmp	r1, #255	; 0xff
 800635a:	f815 ab01 	ldrb.w	sl, [r5], #1
 800635e:	d1f1      	bne.n	8006344 <d_maybe_print_fold_expression.isra.15+0x130>
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 8006368:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 800636c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006370:	4620      	mov	r0, r4
 8006372:	4798      	blx	r3
 8006374:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006378:	3301      	adds	r3, #1
 800637a:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800637e:	2101      	movs	r1, #1
 8006380:	2300      	movs	r3, #0
 8006382:	e7e1      	b.n	8006348 <d_maybe_print_fold_expression.isra.15+0x134>
 8006384:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8006388:	2bff      	cmp	r3, #255	; 0xff
 800638a:	d051      	beq.n	8006430 <d_maybe_print_fold_expression.isra.15+0x21c>
 800638c:	1c59      	adds	r1, r3, #1
 800638e:	f04f 0e28 	mov.w	lr, #40	; 0x28
 8006392:	464a      	mov	r2, r9
 8006394:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 8006398:	4620      	mov	r0, r4
 800639a:	f804 e003 	strb.w	lr, [r4, r3]
 800639e:	4631      	mov	r1, r6
 80063a0:	f884 e104 	strb.w	lr, [r4, #260]	; 0x104
 80063a4:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 8006480 <d_maybe_print_fold_expression.isra.15+0x26c>
 80063a8:	f7ff fed0 	bl	800614c <d_print_subexpr>
 80063ac:	4631      	mov	r1, r6
 80063ae:	4642      	mov	r2, r8
 80063b0:	4620      	mov	r0, r4
 80063b2:	f7ff fe8d 	bl	80060d0 <d_print_expr_op>
 80063b6:	f109 0b03 	add.w	fp, r9, #3
 80063ba:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 80063be:	e009      	b.n	80063d4 <d_maybe_print_fold_expression.isra.15+0x1c0>
 80063c0:	460b      	mov	r3, r1
 80063c2:	3101      	adds	r1, #1
 80063c4:	45cb      	cmp	fp, r9
 80063c6:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
 80063ca:	f804 a003 	strb.w	sl, [r4, r3]
 80063ce:	f884 a104 	strb.w	sl, [r4, #260]	; 0x104
 80063d2:	d015      	beq.n	8006400 <d_maybe_print_fold_expression.isra.15+0x1ec>
 80063d4:	29ff      	cmp	r1, #255	; 0xff
 80063d6:	f819 ab01 	ldrb.w	sl, [r9], #1
 80063da:	d1f1      	bne.n	80063c0 <d_maybe_print_fold_expression.isra.15+0x1ac>
 80063dc:	f04f 0300 	mov.w	r3, #0
 80063e0:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
 80063e4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 80063e8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 80063ec:	4620      	mov	r0, r4
 80063ee:	4798      	blx	r3
 80063f0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 80063f4:	3301      	adds	r3, #1
 80063f6:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 80063fa:	2101      	movs	r1, #1
 80063fc:	2300      	movs	r3, #0
 80063fe:	e7e1      	b.n	80063c4 <d_maybe_print_fold_expression.isra.15+0x1b0>
 8006400:	4642      	mov	r2, r8
 8006402:	4631      	mov	r1, r6
 8006404:	4620      	mov	r0, r4
 8006406:	f7ff fe63 	bl	80060d0 <d_print_expr_op>
 800640a:	462a      	mov	r2, r5
 800640c:	e744      	b.n	8006298 <d_maybe_print_fold_expression.isra.15+0x84>
 800640e:	2500      	movs	r5, #0
 8006410:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 8006414:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006418:	f884 50ff 	strb.w	r5, [r4, #255]	; 0xff
 800641c:	4620      	mov	r0, r4
 800641e:	4798      	blx	r3
 8006420:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006424:	3301      	adds	r3, #1
 8006426:	4629      	mov	r1, r5
 8006428:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 800642c:	2201      	movs	r2, #1
 800642e:	e73d      	b.n	80062ac <d_maybe_print_fold_expression.isra.15+0x98>
 8006430:	f04f 0a00 	mov.w	sl, #0
 8006434:	4619      	mov	r1, r3
 8006436:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 800643a:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800643e:	f880 a0ff 	strb.w	sl, [r0, #255]	; 0xff
 8006442:	4798      	blx	r3
 8006444:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 8006448:	f8c4 a100 	str.w	sl, [r4, #256]	; 0x100
 800644c:	1c5a      	adds	r2, r3, #1
 800644e:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
 8006452:	4653      	mov	r3, sl
 8006454:	e79a      	b.n	800638c <d_maybe_print_fold_expression.isra.15+0x178>
 8006456:	2500      	movs	r5, #0
 8006458:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
 800645c:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
 8006460:	f880 50ff 	strb.w	r5, [r0, #255]	; 0xff
 8006464:	4798      	blx	r3
 8006466:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800646a:	3301      	adds	r3, #1
 800646c:	4629      	mov	r1, r5
 800646e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
 8006472:	2201      	movs	r2, #1
 8006474:	e72b      	b.n	80062ce <d_maybe_print_fold_expression.isra.15+0xba>
 8006476:	bf00      	nop
 8006478:	08018828 	.word	0x08018828
 800647c:	08018820 	.word	0x08018820
 8006480:	0801873c 	.word	0x0801873c

08006484 <d_demangle_callback.constprop.17>:
 8006484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006488:	b0e7      	sub	sp, #412	; 0x19c
 800648a:	f890 9000 	ldrb.w	r9, [r0]
 800648e:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 8006492:	af00      	add	r7, sp, #0
 8006494:	4605      	mov	r5, r0
 8006496:	4688      	mov	r8, r1
 8006498:	4616      	mov	r6, r2
 800649a:	f000 80f1 	beq.w	8006680 <d_demangle_callback.constprop.17+0x1fc>
 800649e:	2208      	movs	r2, #8
 80064a0:	49bd      	ldr	r1, [pc, #756]	; (8006798 <d_demangle_callback.constprop.17+0x314>)
 80064a2:	4628      	mov	r0, r5
 80064a4:	f00b faf2 	bl	8011a8c <strncmp>
 80064a8:	b948      	cbnz	r0, 80064be <d_demangle_callback.constprop.17+0x3a>
 80064aa:	7a2b      	ldrb	r3, [r5, #8]
 80064ac:	2b2e      	cmp	r3, #46	; 0x2e
 80064ae:	f000 80d6 	beq.w	800665e <d_demangle_callback.constprop.17+0x1da>
 80064b2:	2b5f      	cmp	r3, #95	; 0x5f
 80064b4:	f000 80d3 	beq.w	800665e <d_demangle_callback.constprop.17+0x1da>
 80064b8:	2b24      	cmp	r3, #36	; 0x24
 80064ba:	f000 80d0 	beq.w	800665e <d_demangle_callback.constprop.17+0x1da>
 80064be:	f04f 0a00 	mov.w	sl, #0
 80064c2:	4628      	mov	r0, r5
 80064c4:	f000 fa36 	bl	8006934 <strlen>
 80064c8:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 80064cc:	0083      	lsls	r3, r0, #2
 80064ce:	eb03 020b 	add.w	r2, r3, fp
 80064d2:	0092      	lsls	r2, r2, #2
 80064d4:	3208      	adds	r2, #8
 80064d6:	330a      	adds	r3, #10
 80064d8:	ebad 0d02 	sub.w	sp, sp, r2
 80064dc:	f023 0307 	bic.w	r3, r3, #7
 80064e0:	2400      	movs	r4, #0
 80064e2:	466a      	mov	r2, sp
 80064e4:	1829      	adds	r1, r5, r0
 80064e6:	ebad 0d03 	sub.w	sp, sp, r3
 80064ea:	f1ba 0f01 	cmp.w	sl, #1
 80064ee:	f04f 0311 	mov.w	r3, #17
 80064f2:	627a      	str	r2, [r7, #36]	; 0x24
 80064f4:	f8c7 d030 	str.w	sp, [r7, #48]	; 0x30
 80064f8:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 80064fc:	617d      	str	r5, [r7, #20]
 80064fe:	623d      	str	r5, [r7, #32]
 8006500:	63b8      	str	r0, [r7, #56]	; 0x38
 8006502:	61b9      	str	r1, [r7, #24]
 8006504:	61fb      	str	r3, [r7, #28]
 8006506:	62bc      	str	r4, [r7, #40]	; 0x28
 8006508:	637c      	str	r4, [r7, #52]	; 0x34
 800650a:	63fc      	str	r4, [r7, #60]	; 0x3c
 800650c:	643c      	str	r4, [r7, #64]	; 0x40
 800650e:	647c      	str	r4, [r7, #68]	; 0x44
 8006510:	64bc      	str	r4, [r7, #72]	; 0x48
 8006512:	64fc      	str	r4, [r7, #76]	; 0x4c
 8006514:	f000 80bb 	beq.w	800668e <d_demangle_callback.constprop.17+0x20a>
 8006518:	f0c0 80cf 	bcc.w	80066ba <d_demangle_callback.constprop.17+0x236>
 800651c:	7aeb      	ldrb	r3, [r5, #11]
 800651e:	f1ba 0f02 	cmp.w	sl, #2
 8006522:	bf18      	it	ne
 8006524:	f04f 0944 	movne.w	r9, #68	; 0x44
 8006528:	f105 0a0b 	add.w	sl, r5, #11
 800652c:	bf08      	it	eq
 800652e:	f04f 0943 	moveq.w	r9, #67	; 0x43
 8006532:	2b5f      	cmp	r3, #95	; 0x5f
 8006534:	f8c7 a020 	str.w	sl, [r7, #32]
 8006538:	f000 80b2 	beq.w	80066a0 <d_demangle_callback.constprop.17+0x21c>
 800653c:	4650      	mov	r0, sl
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	f000 f9f8 	bl	8006934 <strlen>
 8006544:	f1bb 0f00 	cmp.w	fp, #0
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	f340 80bf 	ble.w	80066cc <d_demangle_callback.constprop.17+0x248>
 800654e:	2301      	movs	r3, #1
 8006550:	62bb      	str	r3, [r7, #40]	; 0x28
 8006552:	2800      	cmp	r0, #0
 8006554:	f000 80ba 	beq.w	80066cc <d_demangle_callback.constprop.17+0x248>
 8006558:	2300      	movs	r3, #0
 800655a:	f8c2 a004 	str.w	sl, [r2, #4]
 800655e:	6090      	str	r0, [r2, #8]
 8006560:	7013      	strb	r3, [r2, #0]
 8006562:	4649      	mov	r1, r9
 8006564:	2300      	movs	r3, #0
 8006566:	f107 0014 	add.w	r0, r7, #20
 800656a:	f7f9 fe31 	bl	80001d0 <d_make_comp>
 800656e:	6a3c      	ldr	r4, [r7, #32]
 8006570:	4605      	mov	r5, r0
 8006572:	4620      	mov	r0, r4
 8006574:	f000 f9de 	bl	8006934 <strlen>
 8006578:	1823      	adds	r3, r4, r0
 800657a:	623b      	str	r3, [r7, #32]
 800657c:	f814 9000 	ldrb.w	r9, [r4, r0]
 8006580:	f1b9 0f00 	cmp.w	r9, #0
 8006584:	f040 8086 	bne.w	8006694 <d_demangle_callback.constprop.17+0x210>
 8006588:	2d00      	cmp	r5, #0
 800658a:	f000 8083 	beq.w	8006694 <d_demangle_callback.constprop.17+0x210>
 800658e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8006592:	462a      	mov	r2, r5
 8006594:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 8006598:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 800659c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
 80065a0:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
 80065a4:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
 80065a8:	f884 9104 	strb.w	r9, [r4, #260]	; 0x104
 80065ac:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
 80065b0:	f8c4 9114 	str.w	r9, [r4, #276]	; 0x114
 80065b4:	f8c4 9120 	str.w	r9, [r4, #288]	; 0x120
 80065b8:	f8c4 9124 	str.w	r9, [r4, #292]	; 0x124
 80065bc:	f8c4 9118 	str.w	r9, [r4, #280]	; 0x118
 80065c0:	f8c4 911c 	str.w	r9, [r4, #284]	; 0x11c
 80065c4:	f8c4 9128 	str.w	r9, [r4, #296]	; 0x128
 80065c8:	f8c4 912c 	str.w	r9, [r4, #300]	; 0x12c
 80065cc:	f8c4 9130 	str.w	r9, [r4, #304]	; 0x130
 80065d0:	f8c4 9134 	str.w	r9, [r4, #308]	; 0x134
 80065d4:	f8c4 9138 	str.w	r9, [r4, #312]	; 0x138
 80065d8:	f8c4 913c 	str.w	r9, [r4, #316]	; 0x13c
 80065dc:	f8c4 9140 	str.w	r9, [r4, #320]	; 0x140
 80065e0:	f7f9 fec4 	bl	800036c <d_count_templates_scopes>
 80065e4:	f8d4 2134 	ldr.w	r2, [r4, #308]	; 0x134
 80065e8:	f8d4 1140 	ldr.w	r1, [r4, #320]	; 0x140
 80065ec:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 80065f0:	613b      	str	r3, [r7, #16]
 80065f2:	00d0      	lsls	r0, r2, #3
 80065f4:	fb01 f102 	mul.w	r1, r1, r2
 80065f8:	3008      	adds	r0, #8
 80065fa:	46e8      	mov	r8, sp
 80065fc:	00ca      	lsls	r2, r1, #3
 80065fe:	ebad 0d00 	sub.w	sp, sp, r0
 8006602:	4668      	mov	r0, sp
 8006604:	3208      	adds	r2, #8
 8006606:	ebad 0d02 	sub.w	sp, sp, r2
 800660a:	f107 060c 	add.w	r6, r7, #12
 800660e:	462a      	mov	r2, r5
 8006610:	f8c4 012c 	str.w	r0, [r4, #300]	; 0x12c
 8006614:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
 8006618:	4620      	mov	r0, r4
 800661a:	2111      	movs	r1, #17
 800661c:	f8c4 d138 	str.w	sp, [r4, #312]	; 0x138
 8006620:	60fd      	str	r5, [r7, #12]
 8006622:	f8c4 9144 	str.w	r9, [r4, #324]	; 0x144
 8006626:	f8c4 6128 	str.w	r6, [r4, #296]	; 0x128
 800662a:	f7fc f9c5 	bl	80029b8 <d_print_comp_inner>
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
 8006634:	f8d4 1100 	ldr.w	r1, [r4, #256]	; 0x100
 8006638:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
 800663c:	f804 9001 	strb.w	r9, [r4, r1]
 8006640:	4620      	mov	r0, r4
 8006642:	46c5      	mov	sp, r8
 8006644:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
 8006648:	4798      	blx	r3
 800664a:	f8d4 0118 	ldr.w	r0, [r4, #280]	; 0x118
 800664e:	fab0 f080 	clz	r0, r0
 8006652:	0940      	lsrs	r0, r0, #5
 8006654:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 8006658:	46bd      	mov	sp, r7
 800665a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800665e:	7a6b      	ldrb	r3, [r5, #9]
 8006660:	2b44      	cmp	r3, #68	; 0x44
 8006662:	d002      	beq.n	800666a <d_demangle_callback.constprop.17+0x1e6>
 8006664:	2b49      	cmp	r3, #73	; 0x49
 8006666:	f47f af2a 	bne.w	80064be <d_demangle_callback.constprop.17+0x3a>
 800666a:	7aaa      	ldrb	r2, [r5, #10]
 800666c:	2a5f      	cmp	r2, #95	; 0x5f
 800666e:	f47f af26 	bne.w	80064be <d_demangle_callback.constprop.17+0x3a>
 8006672:	2b49      	cmp	r3, #73	; 0x49
 8006674:	bf14      	ite	ne
 8006676:	f04f 0a03 	movne.w	sl, #3
 800667a:	f04f 0a02 	moveq.w	sl, #2
 800667e:	e720      	b.n	80064c2 <d_demangle_callback.constprop.17+0x3e>
 8006680:	7843      	ldrb	r3, [r0, #1]
 8006682:	2b5a      	cmp	r3, #90	; 0x5a
 8006684:	f47f af0b 	bne.w	800649e <d_demangle_callback.constprop.17+0x1a>
 8006688:	f04f 0a01 	mov.w	sl, #1
 800668c:	e719      	b.n	80064c2 <d_demangle_callback.constprop.17+0x3e>
 800668e:	f1b9 0f5f 	cmp.w	r9, #95	; 0x5f
 8006692:	d01d      	beq.n	80066d0 <d_demangle_callback.constprop.17+0x24c>
 8006694:	2000      	movs	r0, #0
 8006696:	f507 77ce 	add.w	r7, r7, #412	; 0x19c
 800669a:	46bd      	mov	sp, r7
 800669c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a0:	7b2b      	ldrb	r3, [r5, #12]
 80066a2:	2b5a      	cmp	r3, #90	; 0x5a
 80066a4:	f47f af4a 	bne.w	800653c <d_demangle_callback.constprop.17+0xb8>
 80066a8:	350d      	adds	r5, #13
 80066aa:	4621      	mov	r1, r4
 80066ac:	f107 0014 	add.w	r0, r7, #20
 80066b0:	623d      	str	r5, [r7, #32]
 80066b2:	f7fb fe35 	bl	8002320 <d_encoding>
 80066b6:	4602      	mov	r2, r0
 80066b8:	e753      	b.n	8006562 <d_demangle_callback.constprop.17+0xde>
 80066ba:	f107 0014 	add.w	r0, r7, #20
 80066be:	f7fb f817 	bl	80016f0 <d_type>
 80066c2:	6a3b      	ldr	r3, [r7, #32]
 80066c4:	4605      	mov	r5, r0
 80066c6:	f893 9000 	ldrb.w	r9, [r3]
 80066ca:	e759      	b.n	8006580 <d_demangle_callback.constprop.17+0xfc>
 80066cc:	2200      	movs	r2, #0
 80066ce:	e748      	b.n	8006562 <d_demangle_callback.constprop.17+0xde>
 80066d0:	786b      	ldrb	r3, [r5, #1]
 80066d2:	2b5a      	cmp	r3, #90	; 0x5a
 80066d4:	d1de      	bne.n	8006694 <d_demangle_callback.constprop.17+0x210>
 80066d6:	3502      	adds	r5, #2
 80066d8:	4651      	mov	r1, sl
 80066da:	f107 0014 	add.w	r0, r7, #20
 80066de:	623d      	str	r5, [r7, #32]
 80066e0:	f7fb fe1e 	bl	8002320 <d_encoding>
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	07db      	lsls	r3, r3, #31
 80066e8:	4605      	mov	r5, r0
 80066ea:	d551      	bpl.n	8006790 <d_demangle_callback.constprop.17+0x30c>
 80066ec:	6a38      	ldr	r0, [r7, #32]
 80066ee:	f890 9000 	ldrb.w	r9, [r0]
 80066f2:	f1b9 0f2e 	cmp.w	r9, #46	; 0x2e
 80066f6:	f47f af43 	bne.w	8006580 <d_demangle_callback.constprop.17+0xfc>
 80066fa:	7843      	ldrb	r3, [r0, #1]
 80066fc:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006700:	2a19      	cmp	r2, #25
 8006702:	d939      	bls.n	8006778 <d_demangle_callback.constprop.17+0x2f4>
 8006704:	2b5f      	cmp	r3, #95	; 0x5f
 8006706:	d037      	beq.n	8006778 <d_demangle_callback.constprop.17+0x2f4>
 8006708:	3b30      	subs	r3, #48	; 0x30
 800670a:	2b09      	cmp	r3, #9
 800670c:	d840      	bhi.n	8006790 <d_demangle_callback.constprop.17+0x30c>
 800670e:	7803      	ldrb	r3, [r0, #0]
 8006710:	4602      	mov	r2, r0
 8006712:	2b2e      	cmp	r3, #46	; 0x2e
 8006714:	d112      	bne.n	800673c <d_demangle_callback.constprop.17+0x2b8>
 8006716:	7853      	ldrb	r3, [r2, #1]
 8006718:	3b30      	subs	r3, #48	; 0x30
 800671a:	2b09      	cmp	r3, #9
 800671c:	d80e      	bhi.n	800673c <d_demangle_callback.constprop.17+0x2b8>
 800671e:	7893      	ldrb	r3, [r2, #2]
 8006720:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006724:	2909      	cmp	r1, #9
 8006726:	f102 0202 	add.w	r2, r2, #2
 800672a:	d8f2      	bhi.n	8006712 <d_demangle_callback.constprop.17+0x28e>
 800672c:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8006730:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006734:	2909      	cmp	r1, #9
 8006736:	d9f9      	bls.n	800672c <d_demangle_callback.constprop.17+0x2a8>
 8006738:	2b2e      	cmp	r3, #46	; 0x2e
 800673a:	d0ec      	beq.n	8006716 <d_demangle_callback.constprop.17+0x292>
 800673c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006740:	623a      	str	r2, [r7, #32]
 8006742:	4299      	cmp	r1, r3
 8006744:	da16      	bge.n	8006774 <d_demangle_callback.constprop.17+0x2f0>
 8006746:	f8d7 e024 	ldr.w	lr, [r7, #36]	; 0x24
 800674a:	1c4b      	adds	r3, r1, #1
 800674c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006750:	62bb      	str	r3, [r7, #40]	; 0x28
 8006752:	eb1e 0381 	adds.w	r3, lr, r1, lsl #2
 8006756:	d00d      	beq.n	8006774 <d_demangle_callback.constprop.17+0x2f0>
 8006758:	1a12      	subs	r2, r2, r0
 800675a:	d00b      	beq.n	8006774 <d_demangle_callback.constprop.17+0x2f0>
 800675c:	f80e 4021 	strb.w	r4, [lr, r1, lsl #2]
 8006760:	6058      	str	r0, [r3, #4]
 8006762:	609a      	str	r2, [r3, #8]
 8006764:	462a      	mov	r2, r5
 8006766:	214d      	movs	r1, #77	; 0x4d
 8006768:	f107 0014 	add.w	r0, r7, #20
 800676c:	f7f9 fd30 	bl	80001d0 <d_make_comp>
 8006770:	4605      	mov	r5, r0
 8006772:	e7bb      	b.n	80066ec <d_demangle_callback.constprop.17+0x268>
 8006774:	2300      	movs	r3, #0
 8006776:	e7f5      	b.n	8006764 <d_demangle_callback.constprop.17+0x2e0>
 8006778:	1c81      	adds	r1, r0, #2
 800677a:	460a      	mov	r2, r1
 800677c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006780:	f1a3 0e61 	sub.w	lr, r3, #97	; 0x61
 8006784:	f1be 0f19 	cmp.w	lr, #25
 8006788:	d9f7      	bls.n	800677a <d_demangle_callback.constprop.17+0x2f6>
 800678a:	2b5f      	cmp	r3, #95	; 0x5f
 800678c:	d0f5      	beq.n	800677a <d_demangle_callback.constprop.17+0x2f6>
 800678e:	e7c0      	b.n	8006712 <d_demangle_callback.constprop.17+0x28e>
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	f893 9000 	ldrb.w	r9, [r3]
 8006796:	e6f3      	b.n	8006580 <d_demangle_callback.constprop.17+0xfc>
 8006798:	080184cc 	.word	0x080184cc

0800679c <__cxa_demangle>:
 800679c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067a0:	b084      	sub	sp, #16
 80067a2:	b378      	cbz	r0, 8006804 <__cxa_demangle+0x68>
 80067a4:	b101      	cbz	r1, 80067a8 <__cxa_demangle+0xc>
 80067a6:	b36a      	cbz	r2, 8006804 <__cxa_demangle+0x68>
 80067a8:	2400      	movs	r4, #0
 80067aa:	4616      	mov	r6, r2
 80067ac:	460d      	mov	r5, r1
 80067ae:	466a      	mov	r2, sp
 80067b0:	4927      	ldr	r1, [pc, #156]	; (8006850 <__cxa_demangle+0xb4>)
 80067b2:	9400      	str	r4, [sp, #0]
 80067b4:	461f      	mov	r7, r3
 80067b6:	9401      	str	r4, [sp, #4]
 80067b8:	9402      	str	r4, [sp, #8]
 80067ba:	9403      	str	r4, [sp, #12]
 80067bc:	f7ff fe62 	bl	8006484 <d_demangle_callback.constprop.17>
 80067c0:	2800      	cmp	r0, #0
 80067c2:	d03f      	beq.n	8006844 <__cxa_demangle+0xa8>
 80067c4:	9b03      	ldr	r3, [sp, #12]
 80067c6:	b1d3      	cbz	r3, 80067fe <__cxa_demangle+0x62>
 80067c8:	f04f 0801 	mov.w	r8, #1
 80067cc:	9c00      	ldr	r4, [sp, #0]
 80067ce:	b35c      	cbz	r4, 8006828 <__cxa_demangle+0x8c>
 80067d0:	b33d      	cbz	r5, 8006822 <__cxa_demangle+0x86>
 80067d2:	4620      	mov	r0, r4
 80067d4:	f000 f8ae 	bl	8006934 <strlen>
 80067d8:	6833      	ldr	r3, [r6, #0]
 80067da:	4298      	cmp	r0, r3
 80067dc:	d21b      	bcs.n	8006816 <__cxa_demangle+0x7a>
 80067de:	1c42      	adds	r2, r0, #1
 80067e0:	4621      	mov	r1, r4
 80067e2:	4628      	mov	r0, r5
 80067e4:	f00a fc35 	bl	8011052 <memcpy>
 80067e8:	4620      	mov	r0, r4
 80067ea:	f00a f9fb 	bl	8010be4 <free>
 80067ee:	462c      	mov	r4, r5
 80067f0:	b10f      	cbz	r7, 80067f6 <__cxa_demangle+0x5a>
 80067f2:	2300      	movs	r3, #0
 80067f4:	603b      	str	r3, [r7, #0]
 80067f6:	4620      	mov	r0, r4
 80067f8:	b004      	add	sp, #16
 80067fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067fe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006802:	e7e3      	b.n	80067cc <__cxa_demangle+0x30>
 8006804:	b113      	cbz	r3, 800680c <__cxa_demangle+0x70>
 8006806:	f06f 0202 	mvn.w	r2, #2
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	2400      	movs	r4, #0
 800680e:	4620      	mov	r0, r4
 8006810:	b004      	add	sp, #16
 8006812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006816:	4628      	mov	r0, r5
 8006818:	f00a f9e4 	bl	8010be4 <free>
 800681c:	f8c6 8000 	str.w	r8, [r6]
 8006820:	e7e6      	b.n	80067f0 <__cxa_demangle+0x54>
 8006822:	2e00      	cmp	r6, #0
 8006824:	d1fa      	bne.n	800681c <__cxa_demangle+0x80>
 8006826:	e7e3      	b.n	80067f0 <__cxa_demangle+0x54>
 8006828:	2f00      	cmp	r7, #0
 800682a:	d0ef      	beq.n	800680c <__cxa_demangle+0x70>
 800682c:	f1b8 0f01 	cmp.w	r8, #1
 8006830:	d004      	beq.n	800683c <__cxa_demangle+0xa0>
 8006832:	f06f 0301 	mvn.w	r3, #1
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	2400      	movs	r4, #0
 800683a:	e7dc      	b.n	80067f6 <__cxa_demangle+0x5a>
 800683c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006840:	603b      	str	r3, [r7, #0]
 8006842:	e7d8      	b.n	80067f6 <__cxa_demangle+0x5a>
 8006844:	9800      	ldr	r0, [sp, #0]
 8006846:	f00a f9cd 	bl	8010be4 <free>
 800684a:	2f00      	cmp	r7, #0
 800684c:	d1f1      	bne.n	8006832 <__cxa_demangle+0x96>
 800684e:	e7dd      	b.n	800680c <__cxa_demangle+0x70>
 8006850:	080008f5 	.word	0x080008f5

08006854 <__gcclibcxx_demangle_callback>:
 8006854:	b160      	cbz	r0, 8006870 <__gcclibcxx_demangle_callback+0x1c>
 8006856:	b508      	push	{r3, lr}
 8006858:	b139      	cbz	r1, 800686a <__gcclibcxx_demangle_callback+0x16>
 800685a:	f7ff fe13 	bl	8006484 <d_demangle_callback.constprop.17>
 800685e:	2800      	cmp	r0, #0
 8006860:	bf0c      	ite	eq
 8006862:	f06f 0001 	mvneq.w	r0, #1
 8006866:	2000      	movne	r0, #0
 8006868:	bd08      	pop	{r3, pc}
 800686a:	f06f 0002 	mvn.w	r0, #2
 800686e:	bd08      	pop	{r3, pc}
 8006870:	f06f 0002 	mvn.w	r0, #2
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
	...

08006880 <memchr>:
 8006880:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8006884:	2a10      	cmp	r2, #16
 8006886:	db2b      	blt.n	80068e0 <memchr+0x60>
 8006888:	f010 0f07 	tst.w	r0, #7
 800688c:	d008      	beq.n	80068a0 <memchr+0x20>
 800688e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006892:	3a01      	subs	r2, #1
 8006894:	428b      	cmp	r3, r1
 8006896:	d02d      	beq.n	80068f4 <memchr+0x74>
 8006898:	f010 0f07 	tst.w	r0, #7
 800689c:	b342      	cbz	r2, 80068f0 <memchr+0x70>
 800689e:	d1f6      	bne.n	800688e <memchr+0xe>
 80068a0:	b4f0      	push	{r4, r5, r6, r7}
 80068a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80068a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80068aa:	f022 0407 	bic.w	r4, r2, #7
 80068ae:	f07f 0700 	mvns.w	r7, #0
 80068b2:	2300      	movs	r3, #0
 80068b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80068b8:	3c08      	subs	r4, #8
 80068ba:	ea85 0501 	eor.w	r5, r5, r1
 80068be:	ea86 0601 	eor.w	r6, r6, r1
 80068c2:	fa85 f547 	uadd8	r5, r5, r7
 80068c6:	faa3 f587 	sel	r5, r3, r7
 80068ca:	fa86 f647 	uadd8	r6, r6, r7
 80068ce:	faa5 f687 	sel	r6, r5, r7
 80068d2:	b98e      	cbnz	r6, 80068f8 <memchr+0x78>
 80068d4:	d1ee      	bne.n	80068b4 <memchr+0x34>
 80068d6:	bcf0      	pop	{r4, r5, r6, r7}
 80068d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80068dc:	f002 0207 	and.w	r2, r2, #7
 80068e0:	b132      	cbz	r2, 80068f0 <memchr+0x70>
 80068e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80068e6:	3a01      	subs	r2, #1
 80068e8:	ea83 0301 	eor.w	r3, r3, r1
 80068ec:	b113      	cbz	r3, 80068f4 <memchr+0x74>
 80068ee:	d1f8      	bne.n	80068e2 <memchr+0x62>
 80068f0:	2000      	movs	r0, #0
 80068f2:	4770      	bx	lr
 80068f4:	3801      	subs	r0, #1
 80068f6:	4770      	bx	lr
 80068f8:	2d00      	cmp	r5, #0
 80068fa:	bf06      	itte	eq
 80068fc:	4635      	moveq	r5, r6
 80068fe:	3803      	subeq	r0, #3
 8006900:	3807      	subne	r0, #7
 8006902:	f015 0f01 	tst.w	r5, #1
 8006906:	d107      	bne.n	8006918 <memchr+0x98>
 8006908:	3001      	adds	r0, #1
 800690a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800690e:	bf02      	ittt	eq
 8006910:	3001      	addeq	r0, #1
 8006912:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8006916:	3001      	addeq	r0, #1
 8006918:	bcf0      	pop	{r4, r5, r6, r7}
 800691a:	3801      	subs	r0, #1
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop

08006920 <strcmp>:
 8006920:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006924:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006928:	2a01      	cmp	r2, #1
 800692a:	bf28      	it	cs
 800692c:	429a      	cmpcs	r2, r3
 800692e:	d0f7      	beq.n	8006920 <strcmp>
 8006930:	1ad0      	subs	r0, r2, r3
 8006932:	4770      	bx	lr

08006934 <strlen>:
 8006934:	4603      	mov	r3, r0
 8006936:	f813 2b01 	ldrb.w	r2, [r3], #1
 800693a:	2a00      	cmp	r2, #0
 800693c:	d1fb      	bne.n	8006936 <strlen+0x2>
 800693e:	1a18      	subs	r0, r3, r0
 8006940:	3801      	subs	r0, #1
 8006942:	4770      	bx	lr

08006944 <__aeabi_drsub>:
 8006944:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8006948:	e002      	b.n	8006950 <__adddf3>
 800694a:	bf00      	nop

0800694c <__aeabi_dsub>:
 800694c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08006950 <__adddf3>:
 8006950:	b530      	push	{r4, r5, lr}
 8006952:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8006956:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800695a:	ea94 0f05 	teq	r4, r5
 800695e:	bf08      	it	eq
 8006960:	ea90 0f02 	teqeq	r0, r2
 8006964:	bf1f      	itttt	ne
 8006966:	ea54 0c00 	orrsne.w	ip, r4, r0
 800696a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800696e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8006972:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006976:	f000 80e2 	beq.w	8006b3e <__adddf3+0x1ee>
 800697a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800697e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8006982:	bfb8      	it	lt
 8006984:	426d      	neglt	r5, r5
 8006986:	dd0c      	ble.n	80069a2 <__adddf3+0x52>
 8006988:	442c      	add	r4, r5
 800698a:	ea80 0202 	eor.w	r2, r0, r2
 800698e:	ea81 0303 	eor.w	r3, r1, r3
 8006992:	ea82 0000 	eor.w	r0, r2, r0
 8006996:	ea83 0101 	eor.w	r1, r3, r1
 800699a:	ea80 0202 	eor.w	r2, r0, r2
 800699e:	ea81 0303 	eor.w	r3, r1, r3
 80069a2:	2d36      	cmp	r5, #54	; 0x36
 80069a4:	bf88      	it	hi
 80069a6:	bd30      	pophi	{r4, r5, pc}
 80069a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80069ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80069b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80069b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80069b8:	d002      	beq.n	80069c0 <__adddf3+0x70>
 80069ba:	4240      	negs	r0, r0
 80069bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80069c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80069c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80069c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80069cc:	d002      	beq.n	80069d4 <__adddf3+0x84>
 80069ce:	4252      	negs	r2, r2
 80069d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80069d4:	ea94 0f05 	teq	r4, r5
 80069d8:	f000 80a7 	beq.w	8006b2a <__adddf3+0x1da>
 80069dc:	f1a4 0401 	sub.w	r4, r4, #1
 80069e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80069e4:	db0d      	blt.n	8006a02 <__adddf3+0xb2>
 80069e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80069ea:	fa22 f205 	lsr.w	r2, r2, r5
 80069ee:	1880      	adds	r0, r0, r2
 80069f0:	f141 0100 	adc.w	r1, r1, #0
 80069f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80069f8:	1880      	adds	r0, r0, r2
 80069fa:	fa43 f305 	asr.w	r3, r3, r5
 80069fe:	4159      	adcs	r1, r3
 8006a00:	e00e      	b.n	8006a20 <__adddf3+0xd0>
 8006a02:	f1a5 0520 	sub.w	r5, r5, #32
 8006a06:	f10e 0e20 	add.w	lr, lr, #32
 8006a0a:	2a01      	cmp	r2, #1
 8006a0c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006a10:	bf28      	it	cs
 8006a12:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006a16:	fa43 f305 	asr.w	r3, r3, r5
 8006a1a:	18c0      	adds	r0, r0, r3
 8006a1c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006a20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006a24:	d507      	bpl.n	8006a36 <__adddf3+0xe6>
 8006a26:	f04f 0e00 	mov.w	lr, #0
 8006a2a:	f1dc 0c00 	rsbs	ip, ip, #0
 8006a2e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006a32:	eb6e 0101 	sbc.w	r1, lr, r1
 8006a36:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006a3a:	d31b      	bcc.n	8006a74 <__adddf3+0x124>
 8006a3c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006a40:	d30c      	bcc.n	8006a5c <__adddf3+0x10c>
 8006a42:	0849      	lsrs	r1, r1, #1
 8006a44:	ea5f 0030 	movs.w	r0, r0, rrx
 8006a48:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006a4c:	f104 0401 	add.w	r4, r4, #1
 8006a50:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006a54:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006a58:	f080 809a 	bcs.w	8006b90 <__adddf3+0x240>
 8006a5c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006a60:	bf08      	it	eq
 8006a62:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006a66:	f150 0000 	adcs.w	r0, r0, #0
 8006a6a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006a6e:	ea41 0105 	orr.w	r1, r1, r5
 8006a72:	bd30      	pop	{r4, r5, pc}
 8006a74:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006a78:	4140      	adcs	r0, r0
 8006a7a:	eb41 0101 	adc.w	r1, r1, r1
 8006a7e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006a82:	f1a4 0401 	sub.w	r4, r4, #1
 8006a86:	d1e9      	bne.n	8006a5c <__adddf3+0x10c>
 8006a88:	f091 0f00 	teq	r1, #0
 8006a8c:	bf04      	itt	eq
 8006a8e:	4601      	moveq	r1, r0
 8006a90:	2000      	moveq	r0, #0
 8006a92:	fab1 f381 	clz	r3, r1
 8006a96:	bf08      	it	eq
 8006a98:	3320      	addeq	r3, #32
 8006a9a:	f1a3 030b 	sub.w	r3, r3, #11
 8006a9e:	f1b3 0220 	subs.w	r2, r3, #32
 8006aa2:	da0c      	bge.n	8006abe <__adddf3+0x16e>
 8006aa4:	320c      	adds	r2, #12
 8006aa6:	dd08      	ble.n	8006aba <__adddf3+0x16a>
 8006aa8:	f102 0c14 	add.w	ip, r2, #20
 8006aac:	f1c2 020c 	rsb	r2, r2, #12
 8006ab0:	fa01 f00c 	lsl.w	r0, r1, ip
 8006ab4:	fa21 f102 	lsr.w	r1, r1, r2
 8006ab8:	e00c      	b.n	8006ad4 <__adddf3+0x184>
 8006aba:	f102 0214 	add.w	r2, r2, #20
 8006abe:	bfd8      	it	le
 8006ac0:	f1c2 0c20 	rsble	ip, r2, #32
 8006ac4:	fa01 f102 	lsl.w	r1, r1, r2
 8006ac8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006acc:	bfdc      	itt	le
 8006ace:	ea41 010c 	orrle.w	r1, r1, ip
 8006ad2:	4090      	lslle	r0, r2
 8006ad4:	1ae4      	subs	r4, r4, r3
 8006ad6:	bfa2      	ittt	ge
 8006ad8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006adc:	4329      	orrge	r1, r5
 8006ade:	bd30      	popge	{r4, r5, pc}
 8006ae0:	ea6f 0404 	mvn.w	r4, r4
 8006ae4:	3c1f      	subs	r4, #31
 8006ae6:	da1c      	bge.n	8006b22 <__adddf3+0x1d2>
 8006ae8:	340c      	adds	r4, #12
 8006aea:	dc0e      	bgt.n	8006b0a <__adddf3+0x1ba>
 8006aec:	f104 0414 	add.w	r4, r4, #20
 8006af0:	f1c4 0220 	rsb	r2, r4, #32
 8006af4:	fa20 f004 	lsr.w	r0, r0, r4
 8006af8:	fa01 f302 	lsl.w	r3, r1, r2
 8006afc:	ea40 0003 	orr.w	r0, r0, r3
 8006b00:	fa21 f304 	lsr.w	r3, r1, r4
 8006b04:	ea45 0103 	orr.w	r1, r5, r3
 8006b08:	bd30      	pop	{r4, r5, pc}
 8006b0a:	f1c4 040c 	rsb	r4, r4, #12
 8006b0e:	f1c4 0220 	rsb	r2, r4, #32
 8006b12:	fa20 f002 	lsr.w	r0, r0, r2
 8006b16:	fa01 f304 	lsl.w	r3, r1, r4
 8006b1a:	ea40 0003 	orr.w	r0, r0, r3
 8006b1e:	4629      	mov	r1, r5
 8006b20:	bd30      	pop	{r4, r5, pc}
 8006b22:	fa21 f004 	lsr.w	r0, r1, r4
 8006b26:	4629      	mov	r1, r5
 8006b28:	bd30      	pop	{r4, r5, pc}
 8006b2a:	f094 0f00 	teq	r4, #0
 8006b2e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006b32:	bf06      	itte	eq
 8006b34:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006b38:	3401      	addeq	r4, #1
 8006b3a:	3d01      	subne	r5, #1
 8006b3c:	e74e      	b.n	80069dc <__adddf3+0x8c>
 8006b3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006b42:	bf18      	it	ne
 8006b44:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006b48:	d029      	beq.n	8006b9e <__adddf3+0x24e>
 8006b4a:	ea94 0f05 	teq	r4, r5
 8006b4e:	bf08      	it	eq
 8006b50:	ea90 0f02 	teqeq	r0, r2
 8006b54:	d005      	beq.n	8006b62 <__adddf3+0x212>
 8006b56:	ea54 0c00 	orrs.w	ip, r4, r0
 8006b5a:	bf04      	itt	eq
 8006b5c:	4619      	moveq	r1, r3
 8006b5e:	4610      	moveq	r0, r2
 8006b60:	bd30      	pop	{r4, r5, pc}
 8006b62:	ea91 0f03 	teq	r1, r3
 8006b66:	bf1e      	ittt	ne
 8006b68:	2100      	movne	r1, #0
 8006b6a:	2000      	movne	r0, #0
 8006b6c:	bd30      	popne	{r4, r5, pc}
 8006b6e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006b72:	d105      	bne.n	8006b80 <__adddf3+0x230>
 8006b74:	0040      	lsls	r0, r0, #1
 8006b76:	4149      	adcs	r1, r1
 8006b78:	bf28      	it	cs
 8006b7a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006b7e:	bd30      	pop	{r4, r5, pc}
 8006b80:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006b84:	bf3c      	itt	cc
 8006b86:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006b8a:	bd30      	popcc	{r4, r5, pc}
 8006b8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006b90:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006b94:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b98:	f04f 0000 	mov.w	r0, #0
 8006b9c:	bd30      	pop	{r4, r5, pc}
 8006b9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006ba2:	bf1a      	itte	ne
 8006ba4:	4619      	movne	r1, r3
 8006ba6:	4610      	movne	r0, r2
 8006ba8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006bac:	bf1c      	itt	ne
 8006bae:	460b      	movne	r3, r1
 8006bb0:	4602      	movne	r2, r0
 8006bb2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006bb6:	bf06      	itte	eq
 8006bb8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006bbc:	ea91 0f03 	teqeq	r1, r3
 8006bc0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006bc4:	bd30      	pop	{r4, r5, pc}
 8006bc6:	bf00      	nop

08006bc8 <__aeabi_ui2d>:
 8006bc8:	f090 0f00 	teq	r0, #0
 8006bcc:	bf04      	itt	eq
 8006bce:	2100      	moveq	r1, #0
 8006bd0:	4770      	bxeq	lr
 8006bd2:	b530      	push	{r4, r5, lr}
 8006bd4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006bd8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006bdc:	f04f 0500 	mov.w	r5, #0
 8006be0:	f04f 0100 	mov.w	r1, #0
 8006be4:	e750      	b.n	8006a88 <__adddf3+0x138>
 8006be6:	bf00      	nop

08006be8 <__aeabi_i2d>:
 8006be8:	f090 0f00 	teq	r0, #0
 8006bec:	bf04      	itt	eq
 8006bee:	2100      	moveq	r1, #0
 8006bf0:	4770      	bxeq	lr
 8006bf2:	b530      	push	{r4, r5, lr}
 8006bf4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006bf8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006bfc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006c00:	bf48      	it	mi
 8006c02:	4240      	negmi	r0, r0
 8006c04:	f04f 0100 	mov.w	r1, #0
 8006c08:	e73e      	b.n	8006a88 <__adddf3+0x138>
 8006c0a:	bf00      	nop

08006c0c <__aeabi_f2d>:
 8006c0c:	0042      	lsls	r2, r0, #1
 8006c0e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006c12:	ea4f 0131 	mov.w	r1, r1, rrx
 8006c16:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006c1a:	bf1f      	itttt	ne
 8006c1c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006c20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006c24:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006c28:	4770      	bxne	lr
 8006c2a:	f092 0f00 	teq	r2, #0
 8006c2e:	bf14      	ite	ne
 8006c30:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006c34:	4770      	bxeq	lr
 8006c36:	b530      	push	{r4, r5, lr}
 8006c38:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006c3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006c40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006c44:	e720      	b.n	8006a88 <__adddf3+0x138>
 8006c46:	bf00      	nop

08006c48 <__aeabi_ul2d>:
 8006c48:	ea50 0201 	orrs.w	r2, r0, r1
 8006c4c:	bf08      	it	eq
 8006c4e:	4770      	bxeq	lr
 8006c50:	b530      	push	{r4, r5, lr}
 8006c52:	f04f 0500 	mov.w	r5, #0
 8006c56:	e00a      	b.n	8006c6e <__aeabi_l2d+0x16>

08006c58 <__aeabi_l2d>:
 8006c58:	ea50 0201 	orrs.w	r2, r0, r1
 8006c5c:	bf08      	it	eq
 8006c5e:	4770      	bxeq	lr
 8006c60:	b530      	push	{r4, r5, lr}
 8006c62:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006c66:	d502      	bpl.n	8006c6e <__aeabi_l2d+0x16>
 8006c68:	4240      	negs	r0, r0
 8006c6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006c6e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006c72:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006c76:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006c7a:	f43f aedc 	beq.w	8006a36 <__adddf3+0xe6>
 8006c7e:	f04f 0203 	mov.w	r2, #3
 8006c82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006c86:	bf18      	it	ne
 8006c88:	3203      	addne	r2, #3
 8006c8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006c8e:	bf18      	it	ne
 8006c90:	3203      	addne	r2, #3
 8006c92:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006c96:	f1c2 0320 	rsb	r3, r2, #32
 8006c9a:	fa00 fc03 	lsl.w	ip, r0, r3
 8006c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8006ca2:	fa01 fe03 	lsl.w	lr, r1, r3
 8006ca6:	ea40 000e 	orr.w	r0, r0, lr
 8006caa:	fa21 f102 	lsr.w	r1, r1, r2
 8006cae:	4414      	add	r4, r2
 8006cb0:	e6c1      	b.n	8006a36 <__adddf3+0xe6>
 8006cb2:	bf00      	nop

08006cb4 <__aeabi_dmul>:
 8006cb4:	b570      	push	{r4, r5, r6, lr}
 8006cb6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006cba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006cbe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006cc2:	bf1d      	ittte	ne
 8006cc4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006cc8:	ea94 0f0c 	teqne	r4, ip
 8006ccc:	ea95 0f0c 	teqne	r5, ip
 8006cd0:	f000 f8de 	bleq	8006e90 <__aeabi_dmul+0x1dc>
 8006cd4:	442c      	add	r4, r5
 8006cd6:	ea81 0603 	eor.w	r6, r1, r3
 8006cda:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8006cde:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006ce2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006ce6:	bf18      	it	ne
 8006ce8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006cec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006cf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cf4:	d038      	beq.n	8006d68 <__aeabi_dmul+0xb4>
 8006cf6:	fba0 ce02 	umull	ip, lr, r0, r2
 8006cfa:	f04f 0500 	mov.w	r5, #0
 8006cfe:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006d02:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8006d06:	fbe0 e503 	umlal	lr, r5, r0, r3
 8006d0a:	f04f 0600 	mov.w	r6, #0
 8006d0e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006d12:	f09c 0f00 	teq	ip, #0
 8006d16:	bf18      	it	ne
 8006d18:	f04e 0e01 	orrne.w	lr, lr, #1
 8006d1c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006d20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006d24:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006d28:	d204      	bcs.n	8006d34 <__aeabi_dmul+0x80>
 8006d2a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006d2e:	416d      	adcs	r5, r5
 8006d30:	eb46 0606 	adc.w	r6, r6, r6
 8006d34:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006d38:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006d3c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006d40:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006d44:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006d48:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006d4c:	bf88      	it	hi
 8006d4e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006d52:	d81e      	bhi.n	8006d92 <__aeabi_dmul+0xde>
 8006d54:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006d58:	bf08      	it	eq
 8006d5a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8006d5e:	f150 0000 	adcs.w	r0, r0, #0
 8006d62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006d66:	bd70      	pop	{r4, r5, r6, pc}
 8006d68:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006d6c:	ea46 0101 	orr.w	r1, r6, r1
 8006d70:	ea40 0002 	orr.w	r0, r0, r2
 8006d74:	ea81 0103 	eor.w	r1, r1, r3
 8006d78:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006d7c:	bfc2      	ittt	gt
 8006d7e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006d82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006d86:	bd70      	popgt	{r4, r5, r6, pc}
 8006d88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006d8c:	f04f 0e00 	mov.w	lr, #0
 8006d90:	3c01      	subs	r4, #1
 8006d92:	f300 80ab 	bgt.w	8006eec <__aeabi_dmul+0x238>
 8006d96:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8006d9a:	bfde      	ittt	le
 8006d9c:	2000      	movle	r0, #0
 8006d9e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8006da2:	bd70      	pople	{r4, r5, r6, pc}
 8006da4:	f1c4 0400 	rsb	r4, r4, #0
 8006da8:	3c20      	subs	r4, #32
 8006daa:	da35      	bge.n	8006e18 <__aeabi_dmul+0x164>
 8006dac:	340c      	adds	r4, #12
 8006dae:	dc1b      	bgt.n	8006de8 <__aeabi_dmul+0x134>
 8006db0:	f104 0414 	add.w	r4, r4, #20
 8006db4:	f1c4 0520 	rsb	r5, r4, #32
 8006db8:	fa00 f305 	lsl.w	r3, r0, r5
 8006dbc:	fa20 f004 	lsr.w	r0, r0, r4
 8006dc0:	fa01 f205 	lsl.w	r2, r1, r5
 8006dc4:	ea40 0002 	orr.w	r0, r0, r2
 8006dc8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006dcc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006dd0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006dd4:	fa21 f604 	lsr.w	r6, r1, r4
 8006dd8:	eb42 0106 	adc.w	r1, r2, r6
 8006ddc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006de0:	bf08      	it	eq
 8006de2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006de6:	bd70      	pop	{r4, r5, r6, pc}
 8006de8:	f1c4 040c 	rsb	r4, r4, #12
 8006dec:	f1c4 0520 	rsb	r5, r4, #32
 8006df0:	fa00 f304 	lsl.w	r3, r0, r4
 8006df4:	fa20 f005 	lsr.w	r0, r0, r5
 8006df8:	fa01 f204 	lsl.w	r2, r1, r4
 8006dfc:	ea40 0002 	orr.w	r0, r0, r2
 8006e00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006e04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006e08:	f141 0100 	adc.w	r1, r1, #0
 8006e0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006e10:	bf08      	it	eq
 8006e12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006e16:	bd70      	pop	{r4, r5, r6, pc}
 8006e18:	f1c4 0520 	rsb	r5, r4, #32
 8006e1c:	fa00 f205 	lsl.w	r2, r0, r5
 8006e20:	ea4e 0e02 	orr.w	lr, lr, r2
 8006e24:	fa20 f304 	lsr.w	r3, r0, r4
 8006e28:	fa01 f205 	lsl.w	r2, r1, r5
 8006e2c:	ea43 0302 	orr.w	r3, r3, r2
 8006e30:	fa21 f004 	lsr.w	r0, r1, r4
 8006e34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006e38:	fa21 f204 	lsr.w	r2, r1, r4
 8006e3c:	ea20 0002 	bic.w	r0, r0, r2
 8006e40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006e44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006e48:	bf08      	it	eq
 8006e4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	f094 0f00 	teq	r4, #0
 8006e54:	d10f      	bne.n	8006e76 <__aeabi_dmul+0x1c2>
 8006e56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8006e5a:	0040      	lsls	r0, r0, #1
 8006e5c:	eb41 0101 	adc.w	r1, r1, r1
 8006e60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006e64:	bf08      	it	eq
 8006e66:	3c01      	subeq	r4, #1
 8006e68:	d0f7      	beq.n	8006e5a <__aeabi_dmul+0x1a6>
 8006e6a:	ea41 0106 	orr.w	r1, r1, r6
 8006e6e:	f095 0f00 	teq	r5, #0
 8006e72:	bf18      	it	ne
 8006e74:	4770      	bxne	lr
 8006e76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8006e7a:	0052      	lsls	r2, r2, #1
 8006e7c:	eb43 0303 	adc.w	r3, r3, r3
 8006e80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006e84:	bf08      	it	eq
 8006e86:	3d01      	subeq	r5, #1
 8006e88:	d0f7      	beq.n	8006e7a <__aeabi_dmul+0x1c6>
 8006e8a:	ea43 0306 	orr.w	r3, r3, r6
 8006e8e:	4770      	bx	lr
 8006e90:	ea94 0f0c 	teq	r4, ip
 8006e94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006e98:	bf18      	it	ne
 8006e9a:	ea95 0f0c 	teqne	r5, ip
 8006e9e:	d00c      	beq.n	8006eba <__aeabi_dmul+0x206>
 8006ea0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006ea4:	bf18      	it	ne
 8006ea6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006eaa:	d1d1      	bne.n	8006e50 <__aeabi_dmul+0x19c>
 8006eac:	ea81 0103 	eor.w	r1, r1, r3
 8006eb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006eb4:	f04f 0000 	mov.w	r0, #0
 8006eb8:	bd70      	pop	{r4, r5, r6, pc}
 8006eba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006ebe:	bf06      	itte	eq
 8006ec0:	4610      	moveq	r0, r2
 8006ec2:	4619      	moveq	r1, r3
 8006ec4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006ec8:	d019      	beq.n	8006efe <__aeabi_dmul+0x24a>
 8006eca:	ea94 0f0c 	teq	r4, ip
 8006ece:	d102      	bne.n	8006ed6 <__aeabi_dmul+0x222>
 8006ed0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006ed4:	d113      	bne.n	8006efe <__aeabi_dmul+0x24a>
 8006ed6:	ea95 0f0c 	teq	r5, ip
 8006eda:	d105      	bne.n	8006ee8 <__aeabi_dmul+0x234>
 8006edc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006ee0:	bf1c      	itt	ne
 8006ee2:	4610      	movne	r0, r2
 8006ee4:	4619      	movne	r1, r3
 8006ee6:	d10a      	bne.n	8006efe <__aeabi_dmul+0x24a>
 8006ee8:	ea81 0103 	eor.w	r1, r1, r3
 8006eec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006ef0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006ef4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006ef8:	f04f 0000 	mov.w	r0, #0
 8006efc:	bd70      	pop	{r4, r5, r6, pc}
 8006efe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006f02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8006f06:	bd70      	pop	{r4, r5, r6, pc}

08006f08 <__aeabi_ddiv>:
 8006f08:	b570      	push	{r4, r5, r6, lr}
 8006f0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006f0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006f12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006f16:	bf1d      	ittte	ne
 8006f18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006f1c:	ea94 0f0c 	teqne	r4, ip
 8006f20:	ea95 0f0c 	teqne	r5, ip
 8006f24:	f000 f8a7 	bleq	8007076 <__aeabi_ddiv+0x16e>
 8006f28:	eba4 0405 	sub.w	r4, r4, r5
 8006f2c:	ea81 0e03 	eor.w	lr, r1, r3
 8006f30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006f34:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006f38:	f000 8088 	beq.w	800704c <__aeabi_ddiv+0x144>
 8006f3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006f40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006f44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006f48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006f4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006f50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006f54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006f58:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006f5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006f60:	429d      	cmp	r5, r3
 8006f62:	bf08      	it	eq
 8006f64:	4296      	cmpeq	r6, r2
 8006f66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8006f6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8006f6e:	d202      	bcs.n	8006f76 <__aeabi_ddiv+0x6e>
 8006f70:	085b      	lsrs	r3, r3, #1
 8006f72:	ea4f 0232 	mov.w	r2, r2, rrx
 8006f76:	1ab6      	subs	r6, r6, r2
 8006f78:	eb65 0503 	sbc.w	r5, r5, r3
 8006f7c:	085b      	lsrs	r3, r3, #1
 8006f7e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006f82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006f86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8006f8a:	ebb6 0e02 	subs.w	lr, r6, r2
 8006f8e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006f92:	bf22      	ittt	cs
 8006f94:	1ab6      	subcs	r6, r6, r2
 8006f96:	4675      	movcs	r5, lr
 8006f98:	ea40 000c 	orrcs.w	r0, r0, ip
 8006f9c:	085b      	lsrs	r3, r3, #1
 8006f9e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006fa2:	ebb6 0e02 	subs.w	lr, r6, r2
 8006fa6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006faa:	bf22      	ittt	cs
 8006fac:	1ab6      	subcs	r6, r6, r2
 8006fae:	4675      	movcs	r5, lr
 8006fb0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006fb4:	085b      	lsrs	r3, r3, #1
 8006fb6:	ea4f 0232 	mov.w	r2, r2, rrx
 8006fba:	ebb6 0e02 	subs.w	lr, r6, r2
 8006fbe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006fc2:	bf22      	ittt	cs
 8006fc4:	1ab6      	subcs	r6, r6, r2
 8006fc6:	4675      	movcs	r5, lr
 8006fc8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006fcc:	085b      	lsrs	r3, r3, #1
 8006fce:	ea4f 0232 	mov.w	r2, r2, rrx
 8006fd2:	ebb6 0e02 	subs.w	lr, r6, r2
 8006fd6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006fda:	bf22      	ittt	cs
 8006fdc:	1ab6      	subcs	r6, r6, r2
 8006fde:	4675      	movcs	r5, lr
 8006fe0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006fe4:	ea55 0e06 	orrs.w	lr, r5, r6
 8006fe8:	d018      	beq.n	800701c <__aeabi_ddiv+0x114>
 8006fea:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8006fee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8006ff2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006ff6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006ffa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8006ffe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8007002:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8007006:	d1c0      	bne.n	8006f8a <__aeabi_ddiv+0x82>
 8007008:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800700c:	d10b      	bne.n	8007026 <__aeabi_ddiv+0x11e>
 800700e:	ea41 0100 	orr.w	r1, r1, r0
 8007012:	f04f 0000 	mov.w	r0, #0
 8007016:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800701a:	e7b6      	b.n	8006f8a <__aeabi_ddiv+0x82>
 800701c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007020:	bf04      	itt	eq
 8007022:	4301      	orreq	r1, r0
 8007024:	2000      	moveq	r0, #0
 8007026:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800702a:	bf88      	it	hi
 800702c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8007030:	f63f aeaf 	bhi.w	8006d92 <__aeabi_dmul+0xde>
 8007034:	ebb5 0c03 	subs.w	ip, r5, r3
 8007038:	bf04      	itt	eq
 800703a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800703e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8007042:	f150 0000 	adcs.w	r0, r0, #0
 8007046:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800704a:	bd70      	pop	{r4, r5, r6, pc}
 800704c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8007050:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8007054:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8007058:	bfc2      	ittt	gt
 800705a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800705e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8007062:	bd70      	popgt	{r4, r5, r6, pc}
 8007064:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007068:	f04f 0e00 	mov.w	lr, #0
 800706c:	3c01      	subs	r4, #1
 800706e:	e690      	b.n	8006d92 <__aeabi_dmul+0xde>
 8007070:	ea45 0e06 	orr.w	lr, r5, r6
 8007074:	e68d      	b.n	8006d92 <__aeabi_dmul+0xde>
 8007076:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800707a:	ea94 0f0c 	teq	r4, ip
 800707e:	bf08      	it	eq
 8007080:	ea95 0f0c 	teqeq	r5, ip
 8007084:	f43f af3b 	beq.w	8006efe <__aeabi_dmul+0x24a>
 8007088:	ea94 0f0c 	teq	r4, ip
 800708c:	d10a      	bne.n	80070a4 <__aeabi_ddiv+0x19c>
 800708e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007092:	f47f af34 	bne.w	8006efe <__aeabi_dmul+0x24a>
 8007096:	ea95 0f0c 	teq	r5, ip
 800709a:	f47f af25 	bne.w	8006ee8 <__aeabi_dmul+0x234>
 800709e:	4610      	mov	r0, r2
 80070a0:	4619      	mov	r1, r3
 80070a2:	e72c      	b.n	8006efe <__aeabi_dmul+0x24a>
 80070a4:	ea95 0f0c 	teq	r5, ip
 80070a8:	d106      	bne.n	80070b8 <__aeabi_ddiv+0x1b0>
 80070aa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80070ae:	f43f aefd 	beq.w	8006eac <__aeabi_dmul+0x1f8>
 80070b2:	4610      	mov	r0, r2
 80070b4:	4619      	mov	r1, r3
 80070b6:	e722      	b.n	8006efe <__aeabi_dmul+0x24a>
 80070b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80070bc:	bf18      	it	ne
 80070be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80070c2:	f47f aec5 	bne.w	8006e50 <__aeabi_dmul+0x19c>
 80070c6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80070ca:	f47f af0d 	bne.w	8006ee8 <__aeabi_dmul+0x234>
 80070ce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80070d2:	f47f aeeb 	bne.w	8006eac <__aeabi_dmul+0x1f8>
 80070d6:	e712      	b.n	8006efe <__aeabi_dmul+0x24a>

080070d8 <__gedf2>:
 80070d8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80070dc:	e006      	b.n	80070ec <__cmpdf2+0x4>
 80070de:	bf00      	nop

080070e0 <__ledf2>:
 80070e0:	f04f 0c01 	mov.w	ip, #1
 80070e4:	e002      	b.n	80070ec <__cmpdf2+0x4>
 80070e6:	bf00      	nop

080070e8 <__cmpdf2>:
 80070e8:	f04f 0c01 	mov.w	ip, #1
 80070ec:	f84d cd04 	str.w	ip, [sp, #-4]!
 80070f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80070f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80070f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80070fc:	bf18      	it	ne
 80070fe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8007102:	d01b      	beq.n	800713c <__cmpdf2+0x54>
 8007104:	b001      	add	sp, #4
 8007106:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800710a:	bf0c      	ite	eq
 800710c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8007110:	ea91 0f03 	teqne	r1, r3
 8007114:	bf02      	ittt	eq
 8007116:	ea90 0f02 	teqeq	r0, r2
 800711a:	2000      	moveq	r0, #0
 800711c:	4770      	bxeq	lr
 800711e:	f110 0f00 	cmn.w	r0, #0
 8007122:	ea91 0f03 	teq	r1, r3
 8007126:	bf58      	it	pl
 8007128:	4299      	cmppl	r1, r3
 800712a:	bf08      	it	eq
 800712c:	4290      	cmpeq	r0, r2
 800712e:	bf2c      	ite	cs
 8007130:	17d8      	asrcs	r0, r3, #31
 8007132:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8007136:	f040 0001 	orr.w	r0, r0, #1
 800713a:	4770      	bx	lr
 800713c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8007140:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007144:	d102      	bne.n	800714c <__cmpdf2+0x64>
 8007146:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800714a:	d107      	bne.n	800715c <__cmpdf2+0x74>
 800714c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8007150:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007154:	d1d6      	bne.n	8007104 <__cmpdf2+0x1c>
 8007156:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800715a:	d0d3      	beq.n	8007104 <__cmpdf2+0x1c>
 800715c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8007160:	4770      	bx	lr
 8007162:	bf00      	nop

08007164 <__aeabi_cdrcmple>:
 8007164:	4684      	mov	ip, r0
 8007166:	4610      	mov	r0, r2
 8007168:	4662      	mov	r2, ip
 800716a:	468c      	mov	ip, r1
 800716c:	4619      	mov	r1, r3
 800716e:	4663      	mov	r3, ip
 8007170:	e000      	b.n	8007174 <__aeabi_cdcmpeq>
 8007172:	bf00      	nop

08007174 <__aeabi_cdcmpeq>:
 8007174:	b501      	push	{r0, lr}
 8007176:	f7ff ffb7 	bl	80070e8 <__cmpdf2>
 800717a:	2800      	cmp	r0, #0
 800717c:	bf48      	it	mi
 800717e:	f110 0f00 	cmnmi.w	r0, #0
 8007182:	bd01      	pop	{r0, pc}

08007184 <__aeabi_dcmpeq>:
 8007184:	f84d ed08 	str.w	lr, [sp, #-8]!
 8007188:	f7ff fff4 	bl	8007174 <__aeabi_cdcmpeq>
 800718c:	bf0c      	ite	eq
 800718e:	2001      	moveq	r0, #1
 8007190:	2000      	movne	r0, #0
 8007192:	f85d fb08 	ldr.w	pc, [sp], #8
 8007196:	bf00      	nop

08007198 <__aeabi_dcmplt>:
 8007198:	f84d ed08 	str.w	lr, [sp, #-8]!
 800719c:	f7ff ffea 	bl	8007174 <__aeabi_cdcmpeq>
 80071a0:	bf34      	ite	cc
 80071a2:	2001      	movcc	r0, #1
 80071a4:	2000      	movcs	r0, #0
 80071a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80071aa:	bf00      	nop

080071ac <__aeabi_dcmple>:
 80071ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80071b0:	f7ff ffe0 	bl	8007174 <__aeabi_cdcmpeq>
 80071b4:	bf94      	ite	ls
 80071b6:	2001      	movls	r0, #1
 80071b8:	2000      	movhi	r0, #0
 80071ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80071be:	bf00      	nop

080071c0 <__aeabi_dcmpge>:
 80071c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80071c4:	f7ff ffce 	bl	8007164 <__aeabi_cdrcmple>
 80071c8:	bf94      	ite	ls
 80071ca:	2001      	movls	r0, #1
 80071cc:	2000      	movhi	r0, #0
 80071ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80071d2:	bf00      	nop

080071d4 <__aeabi_dcmpgt>:
 80071d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80071d8:	f7ff ffc4 	bl	8007164 <__aeabi_cdrcmple>
 80071dc:	bf34      	ite	cc
 80071de:	2001      	movcc	r0, #1
 80071e0:	2000      	movcs	r0, #0
 80071e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80071e6:	bf00      	nop

080071e8 <__aeabi_dcmpun>:
 80071e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80071ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80071f0:	d102      	bne.n	80071f8 <__aeabi_dcmpun+0x10>
 80071f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80071f6:	d10a      	bne.n	800720e <__aeabi_dcmpun+0x26>
 80071f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80071fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8007200:	d102      	bne.n	8007208 <__aeabi_dcmpun+0x20>
 8007202:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8007206:	d102      	bne.n	800720e <__aeabi_dcmpun+0x26>
 8007208:	f04f 0000 	mov.w	r0, #0
 800720c:	4770      	bx	lr
 800720e:	f04f 0001 	mov.w	r0, #1
 8007212:	4770      	bx	lr

08007214 <__aeabi_d2iz>:
 8007214:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007218:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800721c:	d215      	bcs.n	800724a <__aeabi_d2iz+0x36>
 800721e:	d511      	bpl.n	8007244 <__aeabi_d2iz+0x30>
 8007220:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8007224:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8007228:	d912      	bls.n	8007250 <__aeabi_d2iz+0x3c>
 800722a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800722e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007232:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8007236:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800723a:	fa23 f002 	lsr.w	r0, r3, r2
 800723e:	bf18      	it	ne
 8007240:	4240      	negne	r0, r0
 8007242:	4770      	bx	lr
 8007244:	f04f 0000 	mov.w	r0, #0
 8007248:	4770      	bx	lr
 800724a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800724e:	d105      	bne.n	800725c <__aeabi_d2iz+0x48>
 8007250:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8007254:	bf08      	it	eq
 8007256:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800725a:	4770      	bx	lr
 800725c:	f04f 0000 	mov.w	r0, #0
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop

08007264 <__aeabi_uldivmod>:
 8007264:	b953      	cbnz	r3, 800727c <__aeabi_uldivmod+0x18>
 8007266:	b94a      	cbnz	r2, 800727c <__aeabi_uldivmod+0x18>
 8007268:	2900      	cmp	r1, #0
 800726a:	bf08      	it	eq
 800726c:	2800      	cmpeq	r0, #0
 800726e:	bf1c      	itt	ne
 8007270:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8007274:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8007278:	f001 b8f6 	b.w	8008468 <__aeabi_idiv0>
 800727c:	f1ad 0c08 	sub.w	ip, sp, #8
 8007280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8007284:	f000 f806 	bl	8007294 <__udivmoddi4>
 8007288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800728c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007290:	b004      	add	sp, #16
 8007292:	4770      	bx	lr

08007294 <__udivmoddi4>:
 8007294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007298:	468c      	mov	ip, r1
 800729a:	460d      	mov	r5, r1
 800729c:	4604      	mov	r4, r0
 800729e:	9e08      	ldr	r6, [sp, #32]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d151      	bne.n	8007348 <__udivmoddi4+0xb4>
 80072a4:	428a      	cmp	r2, r1
 80072a6:	4617      	mov	r7, r2
 80072a8:	d96d      	bls.n	8007386 <__udivmoddi4+0xf2>
 80072aa:	fab2 fe82 	clz	lr, r2
 80072ae:	f1be 0f00 	cmp.w	lr, #0
 80072b2:	d00b      	beq.n	80072cc <__udivmoddi4+0x38>
 80072b4:	f1ce 0c20 	rsb	ip, lr, #32
 80072b8:	fa01 f50e 	lsl.w	r5, r1, lr
 80072bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80072c0:	fa02 f70e 	lsl.w	r7, r2, lr
 80072c4:	ea4c 0c05 	orr.w	ip, ip, r5
 80072c8:	fa00 f40e 	lsl.w	r4, r0, lr
 80072cc:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80072d0:	0c25      	lsrs	r5, r4, #16
 80072d2:	fbbc f8fa 	udiv	r8, ip, sl
 80072d6:	fa1f f987 	uxth.w	r9, r7
 80072da:	fb0a cc18 	mls	ip, sl, r8, ip
 80072de:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80072e2:	fb08 f309 	mul.w	r3, r8, r9
 80072e6:	42ab      	cmp	r3, r5
 80072e8:	d90a      	bls.n	8007300 <__udivmoddi4+0x6c>
 80072ea:	19ed      	adds	r5, r5, r7
 80072ec:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80072f0:	f080 8123 	bcs.w	800753a <__udivmoddi4+0x2a6>
 80072f4:	42ab      	cmp	r3, r5
 80072f6:	f240 8120 	bls.w	800753a <__udivmoddi4+0x2a6>
 80072fa:	f1a8 0802 	sub.w	r8, r8, #2
 80072fe:	443d      	add	r5, r7
 8007300:	1aed      	subs	r5, r5, r3
 8007302:	b2a4      	uxth	r4, r4
 8007304:	fbb5 f0fa 	udiv	r0, r5, sl
 8007308:	fb0a 5510 	mls	r5, sl, r0, r5
 800730c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8007310:	fb00 f909 	mul.w	r9, r0, r9
 8007314:	45a1      	cmp	r9, r4
 8007316:	d909      	bls.n	800732c <__udivmoddi4+0x98>
 8007318:	19e4      	adds	r4, r4, r7
 800731a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800731e:	f080 810a 	bcs.w	8007536 <__udivmoddi4+0x2a2>
 8007322:	45a1      	cmp	r9, r4
 8007324:	f240 8107 	bls.w	8007536 <__udivmoddi4+0x2a2>
 8007328:	3802      	subs	r0, #2
 800732a:	443c      	add	r4, r7
 800732c:	eba4 0409 	sub.w	r4, r4, r9
 8007330:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8007334:	2100      	movs	r1, #0
 8007336:	2e00      	cmp	r6, #0
 8007338:	d061      	beq.n	80073fe <__udivmoddi4+0x16a>
 800733a:	fa24 f40e 	lsr.w	r4, r4, lr
 800733e:	2300      	movs	r3, #0
 8007340:	6034      	str	r4, [r6, #0]
 8007342:	6073      	str	r3, [r6, #4]
 8007344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007348:	428b      	cmp	r3, r1
 800734a:	d907      	bls.n	800735c <__udivmoddi4+0xc8>
 800734c:	2e00      	cmp	r6, #0
 800734e:	d054      	beq.n	80073fa <__udivmoddi4+0x166>
 8007350:	2100      	movs	r1, #0
 8007352:	e886 0021 	stmia.w	r6, {r0, r5}
 8007356:	4608      	mov	r0, r1
 8007358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800735c:	fab3 f183 	clz	r1, r3
 8007360:	2900      	cmp	r1, #0
 8007362:	f040 808e 	bne.w	8007482 <__udivmoddi4+0x1ee>
 8007366:	42ab      	cmp	r3, r5
 8007368:	d302      	bcc.n	8007370 <__udivmoddi4+0xdc>
 800736a:	4282      	cmp	r2, r0
 800736c:	f200 80fa 	bhi.w	8007564 <__udivmoddi4+0x2d0>
 8007370:	1a84      	subs	r4, r0, r2
 8007372:	eb65 0503 	sbc.w	r5, r5, r3
 8007376:	2001      	movs	r0, #1
 8007378:	46ac      	mov	ip, r5
 800737a:	2e00      	cmp	r6, #0
 800737c:	d03f      	beq.n	80073fe <__udivmoddi4+0x16a>
 800737e:	e886 1010 	stmia.w	r6, {r4, ip}
 8007382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007386:	b912      	cbnz	r2, 800738e <__udivmoddi4+0xfa>
 8007388:	2701      	movs	r7, #1
 800738a:	fbb7 f7f2 	udiv	r7, r7, r2
 800738e:	fab7 fe87 	clz	lr, r7
 8007392:	f1be 0f00 	cmp.w	lr, #0
 8007396:	d134      	bne.n	8007402 <__udivmoddi4+0x16e>
 8007398:	1beb      	subs	r3, r5, r7
 800739a:	0c3a      	lsrs	r2, r7, #16
 800739c:	fa1f fc87 	uxth.w	ip, r7
 80073a0:	2101      	movs	r1, #1
 80073a2:	fbb3 f8f2 	udiv	r8, r3, r2
 80073a6:	0c25      	lsrs	r5, r4, #16
 80073a8:	fb02 3318 	mls	r3, r2, r8, r3
 80073ac:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80073b0:	fb0c f308 	mul.w	r3, ip, r8
 80073b4:	42ab      	cmp	r3, r5
 80073b6:	d907      	bls.n	80073c8 <__udivmoddi4+0x134>
 80073b8:	19ed      	adds	r5, r5, r7
 80073ba:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80073be:	d202      	bcs.n	80073c6 <__udivmoddi4+0x132>
 80073c0:	42ab      	cmp	r3, r5
 80073c2:	f200 80d1 	bhi.w	8007568 <__udivmoddi4+0x2d4>
 80073c6:	4680      	mov	r8, r0
 80073c8:	1aed      	subs	r5, r5, r3
 80073ca:	b2a3      	uxth	r3, r4
 80073cc:	fbb5 f0f2 	udiv	r0, r5, r2
 80073d0:	fb02 5510 	mls	r5, r2, r0, r5
 80073d4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80073d8:	fb0c fc00 	mul.w	ip, ip, r0
 80073dc:	45a4      	cmp	ip, r4
 80073de:	d907      	bls.n	80073f0 <__udivmoddi4+0x15c>
 80073e0:	19e4      	adds	r4, r4, r7
 80073e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80073e6:	d202      	bcs.n	80073ee <__udivmoddi4+0x15a>
 80073e8:	45a4      	cmp	ip, r4
 80073ea:	f200 80b8 	bhi.w	800755e <__udivmoddi4+0x2ca>
 80073ee:	4618      	mov	r0, r3
 80073f0:	eba4 040c 	sub.w	r4, r4, ip
 80073f4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80073f8:	e79d      	b.n	8007336 <__udivmoddi4+0xa2>
 80073fa:	4631      	mov	r1, r6
 80073fc:	4630      	mov	r0, r6
 80073fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007402:	f1ce 0420 	rsb	r4, lr, #32
 8007406:	fa05 f30e 	lsl.w	r3, r5, lr
 800740a:	fa07 f70e 	lsl.w	r7, r7, lr
 800740e:	fa20 f804 	lsr.w	r8, r0, r4
 8007412:	0c3a      	lsrs	r2, r7, #16
 8007414:	fa25 f404 	lsr.w	r4, r5, r4
 8007418:	ea48 0803 	orr.w	r8, r8, r3
 800741c:	fbb4 f1f2 	udiv	r1, r4, r2
 8007420:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8007424:	fb02 4411 	mls	r4, r2, r1, r4
 8007428:	fa1f fc87 	uxth.w	ip, r7
 800742c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8007430:	fb01 f30c 	mul.w	r3, r1, ip
 8007434:	42ab      	cmp	r3, r5
 8007436:	fa00 f40e 	lsl.w	r4, r0, lr
 800743a:	d909      	bls.n	8007450 <__udivmoddi4+0x1bc>
 800743c:	19ed      	adds	r5, r5, r7
 800743e:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8007442:	f080 808a 	bcs.w	800755a <__udivmoddi4+0x2c6>
 8007446:	42ab      	cmp	r3, r5
 8007448:	f240 8087 	bls.w	800755a <__udivmoddi4+0x2c6>
 800744c:	3902      	subs	r1, #2
 800744e:	443d      	add	r5, r7
 8007450:	1aeb      	subs	r3, r5, r3
 8007452:	fa1f f588 	uxth.w	r5, r8
 8007456:	fbb3 f0f2 	udiv	r0, r3, r2
 800745a:	fb02 3310 	mls	r3, r2, r0, r3
 800745e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8007462:	fb00 f30c 	mul.w	r3, r0, ip
 8007466:	42ab      	cmp	r3, r5
 8007468:	d907      	bls.n	800747a <__udivmoddi4+0x1e6>
 800746a:	19ed      	adds	r5, r5, r7
 800746c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8007470:	d26f      	bcs.n	8007552 <__udivmoddi4+0x2be>
 8007472:	42ab      	cmp	r3, r5
 8007474:	d96d      	bls.n	8007552 <__udivmoddi4+0x2be>
 8007476:	3802      	subs	r0, #2
 8007478:	443d      	add	r5, r7
 800747a:	1aeb      	subs	r3, r5, r3
 800747c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8007480:	e78f      	b.n	80073a2 <__udivmoddi4+0x10e>
 8007482:	f1c1 0720 	rsb	r7, r1, #32
 8007486:	fa22 f807 	lsr.w	r8, r2, r7
 800748a:	408b      	lsls	r3, r1
 800748c:	fa05 f401 	lsl.w	r4, r5, r1
 8007490:	ea48 0303 	orr.w	r3, r8, r3
 8007494:	fa20 fe07 	lsr.w	lr, r0, r7
 8007498:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800749c:	40fd      	lsrs	r5, r7
 800749e:	ea4e 0e04 	orr.w	lr, lr, r4
 80074a2:	fbb5 f9fc 	udiv	r9, r5, ip
 80074a6:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80074aa:	fb0c 5519 	mls	r5, ip, r9, r5
 80074ae:	fa1f f883 	uxth.w	r8, r3
 80074b2:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80074b6:	fb09 f408 	mul.w	r4, r9, r8
 80074ba:	42ac      	cmp	r4, r5
 80074bc:	fa02 f201 	lsl.w	r2, r2, r1
 80074c0:	fa00 fa01 	lsl.w	sl, r0, r1
 80074c4:	d908      	bls.n	80074d8 <__udivmoddi4+0x244>
 80074c6:	18ed      	adds	r5, r5, r3
 80074c8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80074cc:	d243      	bcs.n	8007556 <__udivmoddi4+0x2c2>
 80074ce:	42ac      	cmp	r4, r5
 80074d0:	d941      	bls.n	8007556 <__udivmoddi4+0x2c2>
 80074d2:	f1a9 0902 	sub.w	r9, r9, #2
 80074d6:	441d      	add	r5, r3
 80074d8:	1b2d      	subs	r5, r5, r4
 80074da:	fa1f fe8e 	uxth.w	lr, lr
 80074de:	fbb5 f0fc 	udiv	r0, r5, ip
 80074e2:	fb0c 5510 	mls	r5, ip, r0, r5
 80074e6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80074ea:	fb00 f808 	mul.w	r8, r0, r8
 80074ee:	45a0      	cmp	r8, r4
 80074f0:	d907      	bls.n	8007502 <__udivmoddi4+0x26e>
 80074f2:	18e4      	adds	r4, r4, r3
 80074f4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80074f8:	d229      	bcs.n	800754e <__udivmoddi4+0x2ba>
 80074fa:	45a0      	cmp	r8, r4
 80074fc:	d927      	bls.n	800754e <__udivmoddi4+0x2ba>
 80074fe:	3802      	subs	r0, #2
 8007500:	441c      	add	r4, r3
 8007502:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8007506:	eba4 0408 	sub.w	r4, r4, r8
 800750a:	fba0 8902 	umull	r8, r9, r0, r2
 800750e:	454c      	cmp	r4, r9
 8007510:	46c6      	mov	lr, r8
 8007512:	464d      	mov	r5, r9
 8007514:	d315      	bcc.n	8007542 <__udivmoddi4+0x2ae>
 8007516:	d012      	beq.n	800753e <__udivmoddi4+0x2aa>
 8007518:	b156      	cbz	r6, 8007530 <__udivmoddi4+0x29c>
 800751a:	ebba 030e 	subs.w	r3, sl, lr
 800751e:	eb64 0405 	sbc.w	r4, r4, r5
 8007522:	fa04 f707 	lsl.w	r7, r4, r7
 8007526:	40cb      	lsrs	r3, r1
 8007528:	431f      	orrs	r7, r3
 800752a:	40cc      	lsrs	r4, r1
 800752c:	6037      	str	r7, [r6, #0]
 800752e:	6074      	str	r4, [r6, #4]
 8007530:	2100      	movs	r1, #0
 8007532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007536:	4618      	mov	r0, r3
 8007538:	e6f8      	b.n	800732c <__udivmoddi4+0x98>
 800753a:	4690      	mov	r8, r2
 800753c:	e6e0      	b.n	8007300 <__udivmoddi4+0x6c>
 800753e:	45c2      	cmp	sl, r8
 8007540:	d2ea      	bcs.n	8007518 <__udivmoddi4+0x284>
 8007542:	ebb8 0e02 	subs.w	lr, r8, r2
 8007546:	eb69 0503 	sbc.w	r5, r9, r3
 800754a:	3801      	subs	r0, #1
 800754c:	e7e4      	b.n	8007518 <__udivmoddi4+0x284>
 800754e:	4628      	mov	r0, r5
 8007550:	e7d7      	b.n	8007502 <__udivmoddi4+0x26e>
 8007552:	4640      	mov	r0, r8
 8007554:	e791      	b.n	800747a <__udivmoddi4+0x1e6>
 8007556:	4681      	mov	r9, r0
 8007558:	e7be      	b.n	80074d8 <__udivmoddi4+0x244>
 800755a:	4601      	mov	r1, r0
 800755c:	e778      	b.n	8007450 <__udivmoddi4+0x1bc>
 800755e:	3802      	subs	r0, #2
 8007560:	443c      	add	r4, r7
 8007562:	e745      	b.n	80073f0 <__udivmoddi4+0x15c>
 8007564:	4608      	mov	r0, r1
 8007566:	e708      	b.n	800737a <__udivmoddi4+0xe6>
 8007568:	f1a8 0802 	sub.w	r8, r8, #2
 800756c:	443d      	add	r5, r7
 800756e:	e72b      	b.n	80073c8 <__udivmoddi4+0x134>

08007570 <selfrel_offset31>:
 8007570:	6803      	ldr	r3, [r0, #0]
 8007572:	005a      	lsls	r2, r3, #1
 8007574:	bf4c      	ite	mi
 8007576:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800757a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800757e:	4418      	add	r0, r3
 8007580:	4770      	bx	lr
 8007582:	bf00      	nop

08007584 <search_EIT_table>:
 8007584:	b361      	cbz	r1, 80075e0 <search_EIT_table+0x5c>
 8007586:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800758a:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 800758e:	4690      	mov	r8, r2
 8007590:	4606      	mov	r6, r0
 8007592:	46d1      	mov	r9, sl
 8007594:	2700      	movs	r7, #0
 8007596:	eb07 0409 	add.w	r4, r7, r9
 800759a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800759e:	1064      	asrs	r4, r4, #1
 80075a0:	00e5      	lsls	r5, r4, #3
 80075a2:	1971      	adds	r1, r6, r5
 80075a4:	4608      	mov	r0, r1
 80075a6:	f7ff ffe3 	bl	8007570 <selfrel_offset31>
 80075aa:	45a2      	cmp	sl, r4
 80075ac:	4683      	mov	fp, r0
 80075ae:	f105 0008 	add.w	r0, r5, #8
 80075b2:	4430      	add	r0, r6
 80075b4:	d009      	beq.n	80075ca <search_EIT_table+0x46>
 80075b6:	f7ff ffdb 	bl	8007570 <selfrel_offset31>
 80075ba:	45c3      	cmp	fp, r8
 80075bc:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80075c0:	d805      	bhi.n	80075ce <search_EIT_table+0x4a>
 80075c2:	4540      	cmp	r0, r8
 80075c4:	d209      	bcs.n	80075da <search_EIT_table+0x56>
 80075c6:	1c67      	adds	r7, r4, #1
 80075c8:	e7e5      	b.n	8007596 <search_EIT_table+0x12>
 80075ca:	45c3      	cmp	fp, r8
 80075cc:	d905      	bls.n	80075da <search_EIT_table+0x56>
 80075ce:	42a7      	cmp	r7, r4
 80075d0:	d002      	beq.n	80075d8 <search_EIT_table+0x54>
 80075d2:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 80075d6:	e7de      	b.n	8007596 <search_EIT_table+0x12>
 80075d8:	2100      	movs	r1, #0
 80075da:	4608      	mov	r0, r1
 80075dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e0:	4608      	mov	r0, r1
 80075e2:	4770      	bx	lr

080075e4 <__gnu_unwind_get_pr_addr>:
 80075e4:	2801      	cmp	r0, #1
 80075e6:	d007      	beq.n	80075f8 <__gnu_unwind_get_pr_addr+0x14>
 80075e8:	2802      	cmp	r0, #2
 80075ea:	d007      	beq.n	80075fc <__gnu_unwind_get_pr_addr+0x18>
 80075ec:	4b04      	ldr	r3, [pc, #16]	; (8007600 <__gnu_unwind_get_pr_addr+0x1c>)
 80075ee:	2800      	cmp	r0, #0
 80075f0:	bf0c      	ite	eq
 80075f2:	4618      	moveq	r0, r3
 80075f4:	2000      	movne	r0, #0
 80075f6:	4770      	bx	lr
 80075f8:	4802      	ldr	r0, [pc, #8]	; (8007604 <__gnu_unwind_get_pr_addr+0x20>)
 80075fa:	4770      	bx	lr
 80075fc:	4802      	ldr	r0, [pc, #8]	; (8007608 <__gnu_unwind_get_pr_addr+0x24>)
 80075fe:	4770      	bx	lr
 8007600:	08007ce9 	.word	0x08007ce9
 8007604:	08007ced 	.word	0x08007ced
 8007608:	08007cf1 	.word	0x08007cf1

0800760c <get_eit_entry>:
 800760c:	b530      	push	{r4, r5, lr}
 800760e:	4b24      	ldr	r3, [pc, #144]	; (80076a0 <get_eit_entry+0x94>)
 8007610:	b083      	sub	sp, #12
 8007612:	4604      	mov	r4, r0
 8007614:	1e8d      	subs	r5, r1, #2
 8007616:	b37b      	cbz	r3, 8007678 <get_eit_entry+0x6c>
 8007618:	a901      	add	r1, sp, #4
 800761a:	4628      	mov	r0, r5
 800761c:	f3af 8000 	nop.w
 8007620:	b320      	cbz	r0, 800766c <get_eit_entry+0x60>
 8007622:	9901      	ldr	r1, [sp, #4]
 8007624:	462a      	mov	r2, r5
 8007626:	f7ff ffad 	bl	8007584 <search_EIT_table>
 800762a:	4601      	mov	r1, r0
 800762c:	b1f0      	cbz	r0, 800766c <get_eit_entry+0x60>
 800762e:	f7ff ff9f 	bl	8007570 <selfrel_offset31>
 8007632:	684b      	ldr	r3, [r1, #4]
 8007634:	64a0      	str	r0, [r4, #72]	; 0x48
 8007636:	2b01      	cmp	r3, #1
 8007638:	d012      	beq.n	8007660 <get_eit_entry+0x54>
 800763a:	2b00      	cmp	r3, #0
 800763c:	f101 0004 	add.w	r0, r1, #4
 8007640:	db20      	blt.n	8007684 <get_eit_entry+0x78>
 8007642:	f7ff ff95 	bl	8007570 <selfrel_offset31>
 8007646:	2300      	movs	r3, #0
 8007648:	64e0      	str	r0, [r4, #76]	; 0x4c
 800764a:	6523      	str	r3, [r4, #80]	; 0x50
 800764c:	6803      	ldr	r3, [r0, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	db1c      	blt.n	800768c <get_eit_entry+0x80>
 8007652:	f7ff ff8d 	bl	8007570 <selfrel_offset31>
 8007656:	2300      	movs	r3, #0
 8007658:	6120      	str	r0, [r4, #16]
 800765a:	4618      	mov	r0, r3
 800765c:	b003      	add	sp, #12
 800765e:	bd30      	pop	{r4, r5, pc}
 8007660:	2300      	movs	r3, #0
 8007662:	6123      	str	r3, [r4, #16]
 8007664:	2305      	movs	r3, #5
 8007666:	4618      	mov	r0, r3
 8007668:	b003      	add	sp, #12
 800766a:	bd30      	pop	{r4, r5, pc}
 800766c:	2300      	movs	r3, #0
 800766e:	6123      	str	r3, [r4, #16]
 8007670:	2309      	movs	r3, #9
 8007672:	4618      	mov	r0, r3
 8007674:	b003      	add	sp, #12
 8007676:	bd30      	pop	{r4, r5, pc}
 8007678:	490a      	ldr	r1, [pc, #40]	; (80076a4 <get_eit_entry+0x98>)
 800767a:	480b      	ldr	r0, [pc, #44]	; (80076a8 <get_eit_entry+0x9c>)
 800767c:	1a09      	subs	r1, r1, r0
 800767e:	10c9      	asrs	r1, r1, #3
 8007680:	9101      	str	r1, [sp, #4]
 8007682:	e7cf      	b.n	8007624 <get_eit_entry+0x18>
 8007684:	2301      	movs	r3, #1
 8007686:	64e0      	str	r0, [r4, #76]	; 0x4c
 8007688:	6523      	str	r3, [r4, #80]	; 0x50
 800768a:	e7df      	b.n	800764c <get_eit_entry+0x40>
 800768c:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8007690:	f7ff ffa8 	bl	80075e4 <__gnu_unwind_get_pr_addr>
 8007694:	2800      	cmp	r0, #0
 8007696:	6120      	str	r0, [r4, #16]
 8007698:	bf14      	ite	ne
 800769a:	2300      	movne	r3, #0
 800769c:	2309      	moveq	r3, #9
 800769e:	e7dc      	b.n	800765a <get_eit_entry+0x4e>
 80076a0:	00000000 	.word	0x00000000
 80076a4:	0801a5bc 	.word	0x0801a5bc
 80076a8:	08019f6c 	.word	0x08019f6c

080076ac <restore_non_core_regs>:
 80076ac:	6803      	ldr	r3, [r0, #0]
 80076ae:	07da      	lsls	r2, r3, #31
 80076b0:	b510      	push	{r4, lr}
 80076b2:	4604      	mov	r4, r0
 80076b4:	d406      	bmi.n	80076c4 <restore_non_core_regs+0x18>
 80076b6:	079b      	lsls	r3, r3, #30
 80076b8:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80076bc:	d509      	bpl.n	80076d2 <restore_non_core_regs+0x26>
 80076be:	f000 fc51 	bl	8007f64 <__gnu_Unwind_Restore_VFP_D>
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	0759      	lsls	r1, r3, #29
 80076c6:	d509      	bpl.n	80076dc <restore_non_core_regs+0x30>
 80076c8:	071a      	lsls	r2, r3, #28
 80076ca:	d50e      	bpl.n	80076ea <restore_non_core_regs+0x3e>
 80076cc:	06db      	lsls	r3, r3, #27
 80076ce:	d513      	bpl.n	80076f8 <restore_non_core_regs+0x4c>
 80076d0:	bd10      	pop	{r4, pc}
 80076d2:	f000 fc3f 	bl	8007f54 <__gnu_Unwind_Restore_VFP>
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	0759      	lsls	r1, r3, #29
 80076da:	d4f5      	bmi.n	80076c8 <restore_non_core_regs+0x1c>
 80076dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80076e0:	f000 fc48 	bl	8007f74 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80076e4:	6823      	ldr	r3, [r4, #0]
 80076e6:	071a      	lsls	r2, r3, #28
 80076e8:	d4f0      	bmi.n	80076cc <restore_non_core_regs+0x20>
 80076ea:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80076ee:	f000 fc49 	bl	8007f84 <__gnu_Unwind_Restore_WMMXD>
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	06db      	lsls	r3, r3, #27
 80076f6:	d4eb      	bmi.n	80076d0 <restore_non_core_regs+0x24>
 80076f8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80076fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007700:	f000 bc84 	b.w	800800c <__gnu_Unwind_Restore_WMMXC>

08007704 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8007704:	6803      	ldr	r3, [r0, #0]
 8007706:	b103      	cbz	r3, 800770a <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8007708:	4403      	add	r3, r0
 800770a:	4618      	mov	r0, r3
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop

08007710 <__gnu_unwind_24bit.isra.1>:
 8007710:	2009      	movs	r0, #9
 8007712:	4770      	bx	lr

08007714 <_Unwind_DebugHook>:
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop

08007718 <unwind_phase2>:
 8007718:	b570      	push	{r4, r5, r6, lr}
 800771a:	4604      	mov	r4, r0
 800771c:	460d      	mov	r5, r1
 800771e:	e008      	b.n	8007732 <unwind_phase2+0x1a>
 8007720:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8007722:	6163      	str	r3, [r4, #20]
 8007724:	462a      	mov	r2, r5
 8007726:	6923      	ldr	r3, [r4, #16]
 8007728:	4621      	mov	r1, r4
 800772a:	2001      	movs	r0, #1
 800772c:	4798      	blx	r3
 800772e:	2808      	cmp	r0, #8
 8007730:	d108      	bne.n	8007744 <unwind_phase2+0x2c>
 8007732:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8007734:	4620      	mov	r0, r4
 8007736:	f7ff ff69 	bl	800760c <get_eit_entry>
 800773a:	4606      	mov	r6, r0
 800773c:	2800      	cmp	r0, #0
 800773e:	d0ef      	beq.n	8007720 <unwind_phase2+0x8>
 8007740:	f008 ff44 	bl	80105cc <abort>
 8007744:	2807      	cmp	r0, #7
 8007746:	d1fb      	bne.n	8007740 <unwind_phase2+0x28>
 8007748:	4630      	mov	r0, r6
 800774a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 800774c:	f7ff ffe2 	bl	8007714 <_Unwind_DebugHook>
 8007750:	1d28      	adds	r0, r5, #4
 8007752:	f000 fbf3 	bl	8007f3c <__restore_core_regs>
 8007756:	bf00      	nop

08007758 <unwind_phase2_forced>:
 8007758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800775c:	1d0c      	adds	r4, r1, #4
 800775e:	4605      	mov	r5, r0
 8007760:	4692      	mov	sl, r2
 8007762:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007764:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8007768:	ae03      	add	r6, sp, #12
 800776a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800776c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800776e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007770:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007772:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007774:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007778:	ac02      	add	r4, sp, #8
 800777a:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800777e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8007782:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8007786:	2300      	movs	r3, #0
 8007788:	4628      	mov	r0, r5
 800778a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800778c:	6023      	str	r3, [r4, #0]
 800778e:	f7ff ff3d 	bl	800760c <get_eit_entry>
 8007792:	f1ba 0f00 	cmp.w	sl, #0
 8007796:	4607      	mov	r7, r0
 8007798:	bf14      	ite	ne
 800779a:	260a      	movne	r6, #10
 800779c:	2609      	moveq	r6, #9
 800779e:	b17f      	cbz	r7, 80077c0 <unwind_phase2_forced+0x68>
 80077a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80077a2:	f046 0110 	orr.w	r1, r6, #16
 80077a6:	e88d 0210 	stmia.w	sp, {r4, r9}
 80077aa:	462a      	mov	r2, r5
 80077ac:	6463      	str	r3, [r4, #68]	; 0x44
 80077ae:	2001      	movs	r0, #1
 80077b0:	462b      	mov	r3, r5
 80077b2:	47c0      	blx	r8
 80077b4:	bb78      	cbnz	r0, 8007816 <unwind_phase2_forced+0xbe>
 80077b6:	4638      	mov	r0, r7
 80077b8:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80077bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077c2:	616b      	str	r3, [r5, #20]
 80077c4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80077c8:	4621      	mov	r1, r4
 80077ca:	a87a      	add	r0, sp, #488	; 0x1e8
 80077cc:	f009 fc41 	bl	8011052 <memcpy>
 80077d0:	692b      	ldr	r3, [r5, #16]
 80077d2:	aa7a      	add	r2, sp, #488	; 0x1e8
 80077d4:	4629      	mov	r1, r5
 80077d6:	4630      	mov	r0, r6
 80077d8:	4798      	blx	r3
 80077da:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80077dc:	4682      	mov	sl, r0
 80077de:	e88d 0210 	stmia.w	sp, {r4, r9}
 80077e2:	4631      	mov	r1, r6
 80077e4:	6463      	str	r3, [r4, #68]	; 0x44
 80077e6:	462a      	mov	r2, r5
 80077e8:	462b      	mov	r3, r5
 80077ea:	2001      	movs	r0, #1
 80077ec:	47c0      	blx	r8
 80077ee:	b990      	cbnz	r0, 8007816 <unwind_phase2_forced+0xbe>
 80077f0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80077f4:	a97a      	add	r1, sp, #488	; 0x1e8
 80077f6:	4620      	mov	r0, r4
 80077f8:	f009 fc2b 	bl	8011052 <memcpy>
 80077fc:	f1ba 0f08 	cmp.w	sl, #8
 8007800:	d106      	bne.n	8007810 <unwind_phase2_forced+0xb8>
 8007802:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007804:	4628      	mov	r0, r5
 8007806:	f7ff ff01 	bl	800760c <get_eit_entry>
 800780a:	2609      	movs	r6, #9
 800780c:	4607      	mov	r7, r0
 800780e:	e7c6      	b.n	800779e <unwind_phase2_forced+0x46>
 8007810:	f1ba 0f07 	cmp.w	sl, #7
 8007814:	d005      	beq.n	8007822 <unwind_phase2_forced+0xca>
 8007816:	2709      	movs	r7, #9
 8007818:	4638      	mov	r0, r7
 800781a:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800781e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007822:	4638      	mov	r0, r7
 8007824:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007826:	f7ff ff75 	bl	8007714 <_Unwind_DebugHook>
 800782a:	a803      	add	r0, sp, #12
 800782c:	f000 fb86 	bl	8007f3c <__restore_core_regs>

08007830 <_Unwind_GetCFA>:
 8007830:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8007832:	4770      	bx	lr

08007834 <__gnu_Unwind_RaiseException>:
 8007834:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007836:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8007838:	640b      	str	r3, [r1, #64]	; 0x40
 800783a:	1d0e      	adds	r6, r1, #4
 800783c:	460f      	mov	r7, r1
 800783e:	4604      	mov	r4, r0
 8007840:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007842:	b0f9      	sub	sp, #484	; 0x1e4
 8007844:	ad01      	add	r5, sp, #4
 8007846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007848:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800784a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800784c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800784e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007850:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8007854:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8007858:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800785c:	9600      	str	r6, [sp, #0]
 800785e:	e006      	b.n	800786e <__gnu_Unwind_RaiseException+0x3a>
 8007860:	6923      	ldr	r3, [r4, #16]
 8007862:	466a      	mov	r2, sp
 8007864:	4621      	mov	r1, r4
 8007866:	4798      	blx	r3
 8007868:	2808      	cmp	r0, #8
 800786a:	4605      	mov	r5, r0
 800786c:	d108      	bne.n	8007880 <__gnu_Unwind_RaiseException+0x4c>
 800786e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007870:	4620      	mov	r0, r4
 8007872:	f7ff fecb 	bl	800760c <get_eit_entry>
 8007876:	2800      	cmp	r0, #0
 8007878:	d0f2      	beq.n	8007860 <__gnu_Unwind_RaiseException+0x2c>
 800787a:	2009      	movs	r0, #9
 800787c:	b079      	add	sp, #484	; 0x1e4
 800787e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007880:	4668      	mov	r0, sp
 8007882:	f7ff ff13 	bl	80076ac <restore_non_core_regs>
 8007886:	2d06      	cmp	r5, #6
 8007888:	d1f7      	bne.n	800787a <__gnu_Unwind_RaiseException+0x46>
 800788a:	4639      	mov	r1, r7
 800788c:	4620      	mov	r0, r4
 800788e:	f7ff ff43 	bl	8007718 <unwind_phase2>
 8007892:	bf00      	nop

08007894 <__gnu_Unwind_ForcedUnwind>:
 8007894:	b430      	push	{r4, r5}
 8007896:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8007898:	60c1      	str	r1, [r0, #12]
 800789a:	6182      	str	r2, [r0, #24]
 800789c:	4619      	mov	r1, r3
 800789e:	641d      	str	r5, [r3, #64]	; 0x40
 80078a0:	2200      	movs	r2, #0
 80078a2:	bc30      	pop	{r4, r5}
 80078a4:	e758      	b.n	8007758 <unwind_phase2_forced>
 80078a6:	bf00      	nop

080078a8 <__gnu_Unwind_Resume>:
 80078a8:	b570      	push	{r4, r5, r6, lr}
 80078aa:	68c6      	ldr	r6, [r0, #12]
 80078ac:	6943      	ldr	r3, [r0, #20]
 80078ae:	640b      	str	r3, [r1, #64]	; 0x40
 80078b0:	b126      	cbz	r6, 80078bc <__gnu_Unwind_Resume+0x14>
 80078b2:	2201      	movs	r2, #1
 80078b4:	f7ff ff50 	bl	8007758 <unwind_phase2_forced>
 80078b8:	f008 fe88 	bl	80105cc <abort>
 80078bc:	6903      	ldr	r3, [r0, #16]
 80078be:	460a      	mov	r2, r1
 80078c0:	4604      	mov	r4, r0
 80078c2:	460d      	mov	r5, r1
 80078c4:	4601      	mov	r1, r0
 80078c6:	2002      	movs	r0, #2
 80078c8:	4798      	blx	r3
 80078ca:	2807      	cmp	r0, #7
 80078cc:	d007      	beq.n	80078de <__gnu_Unwind_Resume+0x36>
 80078ce:	2808      	cmp	r0, #8
 80078d0:	d103      	bne.n	80078da <__gnu_Unwind_Resume+0x32>
 80078d2:	4629      	mov	r1, r5
 80078d4:	4620      	mov	r0, r4
 80078d6:	f7ff ff1f 	bl	8007718 <unwind_phase2>
 80078da:	f008 fe77 	bl	80105cc <abort>
 80078de:	4630      	mov	r0, r6
 80078e0:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80078e2:	f7ff ff17 	bl	8007714 <_Unwind_DebugHook>
 80078e6:	1d28      	adds	r0, r5, #4
 80078e8:	f000 fb28 	bl	8007f3c <__restore_core_regs>

080078ec <__gnu_Unwind_Resume_or_Rethrow>:
 80078ec:	68c2      	ldr	r2, [r0, #12]
 80078ee:	b11a      	cbz	r2, 80078f8 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80078f0:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80078f2:	640a      	str	r2, [r1, #64]	; 0x40
 80078f4:	2200      	movs	r2, #0
 80078f6:	e72f      	b.n	8007758 <unwind_phase2_forced>
 80078f8:	e79c      	b.n	8007834 <__gnu_Unwind_RaiseException>
 80078fa:	bf00      	nop

080078fc <_Unwind_Complete>:
 80078fc:	4770      	bx	lr
 80078fe:	bf00      	nop

08007900 <_Unwind_DeleteException>:
 8007900:	6883      	ldr	r3, [r0, #8]
 8007902:	b113      	cbz	r3, 800790a <_Unwind_DeleteException+0xa>
 8007904:	4601      	mov	r1, r0
 8007906:	2001      	movs	r0, #1
 8007908:	4718      	bx	r3
 800790a:	4770      	bx	lr

0800790c <_Unwind_VRS_Get>:
 800790c:	b500      	push	{lr}
 800790e:	2904      	cmp	r1, #4
 8007910:	d807      	bhi.n	8007922 <_Unwind_VRS_Get+0x16>
 8007912:	e8df f001 	tbb	[pc, r1]
 8007916:	0903      	.short	0x0903
 8007918:	0906      	.short	0x0906
 800791a:	09          	.byte	0x09
 800791b:	00          	.byte	0x00
 800791c:	b90b      	cbnz	r3, 8007922 <_Unwind_VRS_Get+0x16>
 800791e:	2a0f      	cmp	r2, #15
 8007920:	d905      	bls.n	800792e <_Unwind_VRS_Get+0x22>
 8007922:	2002      	movs	r0, #2
 8007924:	f85d fb04 	ldr.w	pc, [sp], #4
 8007928:	2001      	movs	r0, #1
 800792a:	f85d fb04 	ldr.w	pc, [sp], #4
 800792e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007932:	4618      	mov	r0, r3
 8007934:	6853      	ldr	r3, [r2, #4]
 8007936:	9a01      	ldr	r2, [sp, #4]
 8007938:	6013      	str	r3, [r2, #0]
 800793a:	f85d fb04 	ldr.w	pc, [sp], #4
 800793e:	bf00      	nop

08007940 <_Unwind_GetGR>:
 8007940:	b510      	push	{r4, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	2300      	movs	r3, #0
 8007946:	ac03      	add	r4, sp, #12
 8007948:	460a      	mov	r2, r1
 800794a:	9400      	str	r4, [sp, #0]
 800794c:	4619      	mov	r1, r3
 800794e:	f7ff ffdd 	bl	800790c <_Unwind_VRS_Get>
 8007952:	9803      	ldr	r0, [sp, #12]
 8007954:	b004      	add	sp, #16
 8007956:	bd10      	pop	{r4, pc}

08007958 <_Unwind_VRS_Set>:
 8007958:	b500      	push	{lr}
 800795a:	2904      	cmp	r1, #4
 800795c:	d807      	bhi.n	800796e <_Unwind_VRS_Set+0x16>
 800795e:	e8df f001 	tbb	[pc, r1]
 8007962:	0903      	.short	0x0903
 8007964:	0906      	.short	0x0906
 8007966:	09          	.byte	0x09
 8007967:	00          	.byte	0x00
 8007968:	b90b      	cbnz	r3, 800796e <_Unwind_VRS_Set+0x16>
 800796a:	2a0f      	cmp	r2, #15
 800796c:	d905      	bls.n	800797a <_Unwind_VRS_Set+0x22>
 800796e:	2002      	movs	r0, #2
 8007970:	f85d fb04 	ldr.w	pc, [sp], #4
 8007974:	2001      	movs	r0, #1
 8007976:	f85d fb04 	ldr.w	pc, [sp], #4
 800797a:	9901      	ldr	r1, [sp, #4]
 800797c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8007980:	6809      	ldr	r1, [r1, #0]
 8007982:	6051      	str	r1, [r2, #4]
 8007984:	4618      	mov	r0, r3
 8007986:	f85d fb04 	ldr.w	pc, [sp], #4
 800798a:	bf00      	nop

0800798c <_Unwind_SetGR>:
 800798c:	b510      	push	{r4, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	ac04      	add	r4, sp, #16
 8007992:	2300      	movs	r3, #0
 8007994:	f844 2d04 	str.w	r2, [r4, #-4]!
 8007998:	460a      	mov	r2, r1
 800799a:	9400      	str	r4, [sp, #0]
 800799c:	4619      	mov	r1, r3
 800799e:	f7ff ffdb 	bl	8007958 <_Unwind_VRS_Set>
 80079a2:	b004      	add	sp, #16
 80079a4:	bd10      	pop	{r4, pc}
 80079a6:	bf00      	nop

080079a8 <__gnu_Unwind_Backtrace>:
 80079a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079aa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80079ac:	6413      	str	r3, [r2, #64]	; 0x40
 80079ae:	1d15      	adds	r5, r2, #4
 80079b0:	4607      	mov	r7, r0
 80079b2:	460e      	mov	r6, r1
 80079b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079b6:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80079ba:	ac17      	add	r4, sp, #92	; 0x5c
 80079bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80079c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80079c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80079ca:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80079ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80079d2:	9516      	str	r5, [sp, #88]	; 0x58
 80079d4:	e010      	b.n	80079f8 <__gnu_Unwind_Backtrace+0x50>
 80079d6:	a816      	add	r0, sp, #88	; 0x58
 80079d8:	f7ff ffd8 	bl	800798c <_Unwind_SetGR>
 80079dc:	4631      	mov	r1, r6
 80079de:	a816      	add	r0, sp, #88	; 0x58
 80079e0:	47b8      	blx	r7
 80079e2:	aa16      	add	r2, sp, #88	; 0x58
 80079e4:	4669      	mov	r1, sp
 80079e6:	b978      	cbnz	r0, 8007a08 <__gnu_Unwind_Backtrace+0x60>
 80079e8:	9b04      	ldr	r3, [sp, #16]
 80079ea:	2008      	movs	r0, #8
 80079ec:	4798      	blx	r3
 80079ee:	2805      	cmp	r0, #5
 80079f0:	4604      	mov	r4, r0
 80079f2:	d00a      	beq.n	8007a0a <__gnu_Unwind_Backtrace+0x62>
 80079f4:	2809      	cmp	r0, #9
 80079f6:	d007      	beq.n	8007a08 <__gnu_Unwind_Backtrace+0x60>
 80079f8:	9926      	ldr	r1, [sp, #152]	; 0x98
 80079fa:	4668      	mov	r0, sp
 80079fc:	f7ff fe06 	bl	800760c <get_eit_entry>
 8007a00:	466a      	mov	r2, sp
 8007a02:	210c      	movs	r1, #12
 8007a04:	2800      	cmp	r0, #0
 8007a06:	d0e6      	beq.n	80079d6 <__gnu_Unwind_Backtrace+0x2e>
 8007a08:	2409      	movs	r4, #9
 8007a0a:	a816      	add	r0, sp, #88	; 0x58
 8007a0c:	f7ff fe4e 	bl	80076ac <restore_non_core_regs>
 8007a10:	4620      	mov	r0, r4
 8007a12:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8007a16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007a18 <__gnu_unwind_pr_common>:
 8007a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1c:	460d      	mov	r5, r1
 8007a1e:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007a20:	b08b      	sub	sp, #44	; 0x2c
 8007a22:	1d0c      	adds	r4, r1, #4
 8007a24:	6809      	ldr	r1, [r1, #0]
 8007a26:	9107      	str	r1, [sp, #28]
 8007a28:	4691      	mov	r9, r2
 8007a2a:	9408      	str	r4, [sp, #32]
 8007a2c:	f000 0b03 	and.w	fp, r0, #3
 8007a30:	461e      	mov	r6, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d160      	bne.n	8007af8 <__gnu_unwind_pr_common+0xe0>
 8007a36:	0209      	lsls	r1, r1, #8
 8007a38:	2303      	movs	r3, #3
 8007a3a:	9107      	str	r1, [sp, #28]
 8007a3c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8007a40:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8007a44:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8007a46:	f1bb 0f02 	cmp.w	fp, #2
 8007a4a:	bf08      	it	eq
 8007a4c:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8007a4e:	f013 0301 	ands.w	r3, r3, #1
 8007a52:	d140      	bne.n	8007ad6 <__gnu_unwind_pr_common+0xbe>
 8007a54:	9301      	str	r3, [sp, #4]
 8007a56:	f000 0308 	and.w	r3, r0, #8
 8007a5a:	9303      	str	r3, [sp, #12]
 8007a5c:	f8d4 8000 	ldr.w	r8, [r4]
 8007a60:	f1b8 0f00 	cmp.w	r8, #0
 8007a64:	d039      	beq.n	8007ada <__gnu_unwind_pr_common+0xc2>
 8007a66:	2e02      	cmp	r6, #2
 8007a68:	d043      	beq.n	8007af2 <__gnu_unwind_pr_common+0xda>
 8007a6a:	f8b4 8000 	ldrh.w	r8, [r4]
 8007a6e:	8867      	ldrh	r7, [r4, #2]
 8007a70:	3404      	adds	r4, #4
 8007a72:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8007a74:	f027 0a01 	bic.w	sl, r7, #1
 8007a78:	210f      	movs	r1, #15
 8007a7a:	4648      	mov	r0, r9
 8007a7c:	449a      	add	sl, r3
 8007a7e:	f7ff ff5f 	bl	8007940 <_Unwind_GetGR>
 8007a82:	4582      	cmp	sl, r0
 8007a84:	d833      	bhi.n	8007aee <__gnu_unwind_pr_common+0xd6>
 8007a86:	f028 0301 	bic.w	r3, r8, #1
 8007a8a:	449a      	add	sl, r3
 8007a8c:	4550      	cmp	r0, sl
 8007a8e:	bf2c      	ite	cs
 8007a90:	2000      	movcs	r0, #0
 8007a92:	2001      	movcc	r0, #1
 8007a94:	007f      	lsls	r7, r7, #1
 8007a96:	f007 0702 	and.w	r7, r7, #2
 8007a9a:	f008 0801 	and.w	r8, r8, #1
 8007a9e:	ea47 0708 	orr.w	r7, r7, r8
 8007aa2:	2f01      	cmp	r7, #1
 8007aa4:	d03e      	beq.n	8007b24 <__gnu_unwind_pr_common+0x10c>
 8007aa6:	d335      	bcc.n	8007b14 <__gnu_unwind_pr_common+0xfc>
 8007aa8:	2f02      	cmp	r7, #2
 8007aaa:	d11c      	bne.n	8007ae6 <__gnu_unwind_pr_common+0xce>
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007ab2:	9202      	str	r2, [sp, #8]
 8007ab4:	f1bb 0f00 	cmp.w	fp, #0
 8007ab8:	d176      	bne.n	8007ba8 <__gnu_unwind_pr_common+0x190>
 8007aba:	b128      	cbz	r0, 8007ac8 <__gnu_unwind_pr_common+0xb0>
 8007abc:	9903      	ldr	r1, [sp, #12]
 8007abe:	2900      	cmp	r1, #0
 8007ac0:	d07e      	beq.n	8007bc0 <__gnu_unwind_pr_common+0x1a8>
 8007ac2:	2a00      	cmp	r2, #0
 8007ac4:	f000 80a6 	beq.w	8007c14 <__gnu_unwind_pr_common+0x1fc>
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	db77      	blt.n	8007bbc <__gnu_unwind_pr_common+0x1a4>
 8007acc:	9b02      	ldr	r3, [sp, #8]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8007ad4:	e7c2      	b.n	8007a5c <__gnu_unwind_pr_common+0x44>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	9301      	str	r3, [sp, #4]
 8007ada:	2e02      	cmp	r6, #2
 8007adc:	dd3e      	ble.n	8007b5c <__gnu_unwind_pr_common+0x144>
 8007ade:	f7ff fe17 	bl	8007710 <__gnu_unwind_24bit.isra.1>
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	d040      	beq.n	8007b68 <__gnu_unwind_pr_common+0x150>
 8007ae6:	2009      	movs	r0, #9
 8007ae8:	b00b      	add	sp, #44	; 0x2c
 8007aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aee:	2000      	movs	r0, #0
 8007af0:	e7d0      	b.n	8007a94 <__gnu_unwind_pr_common+0x7c>
 8007af2:	6867      	ldr	r7, [r4, #4]
 8007af4:	3408      	adds	r4, #8
 8007af6:	e7bc      	b.n	8007a72 <__gnu_unwind_pr_common+0x5a>
 8007af8:	2b02      	cmp	r3, #2
 8007afa:	dca3      	bgt.n	8007a44 <__gnu_unwind_pr_common+0x2c>
 8007afc:	0c0b      	lsrs	r3, r1, #16
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	0409      	lsls	r1, r1, #16
 8007b02:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8007b06:	2302      	movs	r3, #2
 8007b08:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8007b0c:	9107      	str	r1, [sp, #28]
 8007b0e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8007b12:	e797      	b.n	8007a44 <__gnu_unwind_pr_common+0x2c>
 8007b14:	f1bb 0f00 	cmp.w	fp, #0
 8007b18:	d002      	beq.n	8007b20 <__gnu_unwind_pr_common+0x108>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	f040 80bd 	bne.w	8007c9a <__gnu_unwind_pr_common+0x282>
 8007b20:	3404      	adds	r4, #4
 8007b22:	e79b      	b.n	8007a5c <__gnu_unwind_pr_common+0x44>
 8007b24:	f1bb 0f00 	cmp.w	fp, #0
 8007b28:	d125      	bne.n	8007b76 <__gnu_unwind_pr_common+0x15e>
 8007b2a:	b1a8      	cbz	r0, 8007b58 <__gnu_unwind_pr_common+0x140>
 8007b2c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8007b30:	1c99      	adds	r1, r3, #2
 8007b32:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8007b36:	d0d6      	beq.n	8007ae6 <__gnu_unwind_pr_common+0xce>
 8007b38:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	9106      	str	r1, [sp, #24]
 8007b40:	f000 80a3 	beq.w	8007c8a <__gnu_unwind_pr_common+0x272>
 8007b44:	1d20      	adds	r0, r4, #4
 8007b46:	f7ff fddd 	bl	8007704 <_Unwind_decode_typeinfo_ptr.isra.0>
 8007b4a:	ab06      	add	r3, sp, #24
 8007b4c:	4601      	mov	r1, r0
 8007b4e:	4628      	mov	r0, r5
 8007b50:	f007 fb6c 	bl	800f22c <__cxa_type_match>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	d177      	bne.n	8007c48 <__gnu_unwind_pr_common+0x230>
 8007b58:	3408      	adds	r4, #8
 8007b5a:	e77f      	b.n	8007a5c <__gnu_unwind_pr_common+0x44>
 8007b5c:	a907      	add	r1, sp, #28
 8007b5e:	4648      	mov	r0, r9
 8007b60:	f000 faee 	bl	8008140 <__gnu_unwind_execute>
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d1be      	bne.n	8007ae6 <__gnu_unwind_pr_common+0xce>
 8007b68:	9b01      	ldr	r3, [sp, #4]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d15c      	bne.n	8007c28 <__gnu_unwind_pr_common+0x210>
 8007b6e:	2008      	movs	r0, #8
 8007b70:	b00b      	add	sp, #44	; 0x2c
 8007b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b76:	210d      	movs	r1, #13
 8007b78:	4648      	mov	r0, r9
 8007b7a:	6a2f      	ldr	r7, [r5, #32]
 8007b7c:	f7ff fee0 	bl	8007940 <_Unwind_GetGR>
 8007b80:	4287      	cmp	r7, r0
 8007b82:	d1e9      	bne.n	8007b58 <__gnu_unwind_pr_common+0x140>
 8007b84:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007b86:	429c      	cmp	r4, r3
 8007b88:	d1e6      	bne.n	8007b58 <__gnu_unwind_pr_common+0x140>
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f7ff fcf0 	bl	8007570 <selfrel_offset31>
 8007b90:	210f      	movs	r1, #15
 8007b92:	4602      	mov	r2, r0
 8007b94:	4648      	mov	r0, r9
 8007b96:	f7ff fef9 	bl	800798c <_Unwind_SetGR>
 8007b9a:	4648      	mov	r0, r9
 8007b9c:	462a      	mov	r2, r5
 8007b9e:	2100      	movs	r1, #0
 8007ba0:	f7ff fef4 	bl	800798c <_Unwind_SetGR>
 8007ba4:	2007      	movs	r0, #7
 8007ba6:	e79f      	b.n	8007ae8 <__gnu_unwind_pr_common+0xd0>
 8007ba8:	210d      	movs	r1, #13
 8007baa:	4648      	mov	r0, r9
 8007bac:	6a2f      	ldr	r7, [r5, #32]
 8007bae:	f7ff fec7 	bl	8007940 <_Unwind_GetGR>
 8007bb2:	4287      	cmp	r7, r0
 8007bb4:	d058      	beq.n	8007c68 <__gnu_unwind_pr_common+0x250>
 8007bb6:	6823      	ldr	r3, [r4, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	da87      	bge.n	8007acc <__gnu_unwind_pr_common+0xb4>
 8007bbc:	3404      	adds	r4, #4
 8007bbe:	e785      	b.n	8007acc <__gnu_unwind_pr_common+0xb4>
 8007bc0:	9b02      	ldr	r3, [sp, #8]
 8007bc2:	b33b      	cbz	r3, 8007c14 <__gnu_unwind_pr_common+0x1fc>
 8007bc4:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8007bc8:	1d27      	adds	r7, r4, #4
 8007bca:	f8cd b010 	str.w	fp, [sp, #16]
 8007bce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007bd2:	f8dd a008 	ldr.w	sl, [sp, #8]
 8007bd6:	9605      	str	r6, [sp, #20]
 8007bd8:	46a3      	mov	fp, r4
 8007bda:	461c      	mov	r4, r3
 8007bdc:	e002      	b.n	8007be4 <__gnu_unwind_pr_common+0x1cc>
 8007bde:	45b2      	cmp	sl, r6
 8007be0:	46b0      	mov	r8, r6
 8007be2:	d016      	beq.n	8007c12 <__gnu_unwind_pr_common+0x1fa>
 8007be4:	4638      	mov	r0, r7
 8007be6:	9406      	str	r4, [sp, #24]
 8007be8:	f7ff fd8c 	bl	8007704 <_Unwind_decode_typeinfo_ptr.isra.0>
 8007bec:	ab06      	add	r3, sp, #24
 8007bee:	4601      	mov	r1, r0
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	4628      	mov	r0, r5
 8007bf4:	f007 fb1a 	bl	800f22c <__cxa_type_match>
 8007bf8:	f108 0601 	add.w	r6, r8, #1
 8007bfc:	3704      	adds	r7, #4
 8007bfe:	2800      	cmp	r0, #0
 8007c00:	d0ed      	beq.n	8007bde <__gnu_unwind_pr_common+0x1c6>
 8007c02:	9b02      	ldr	r3, [sp, #8]
 8007c04:	9e05      	ldr	r6, [sp, #20]
 8007c06:	4543      	cmp	r3, r8
 8007c08:	465c      	mov	r4, fp
 8007c0a:	f8dd b010 	ldr.w	fp, [sp, #16]
 8007c0e:	d1d2      	bne.n	8007bb6 <__gnu_unwind_pr_common+0x19e>
 8007c10:	e000      	b.n	8007c14 <__gnu_unwind_pr_common+0x1fc>
 8007c12:	465c      	mov	r4, fp
 8007c14:	4648      	mov	r0, r9
 8007c16:	210d      	movs	r1, #13
 8007c18:	f7ff fe92 	bl	8007940 <_Unwind_GetGR>
 8007c1c:	9b06      	ldr	r3, [sp, #24]
 8007c1e:	6228      	str	r0, [r5, #32]
 8007c20:	62ac      	str	r4, [r5, #40]	; 0x28
 8007c22:	626b      	str	r3, [r5, #36]	; 0x24
 8007c24:	2006      	movs	r0, #6
 8007c26:	e75f      	b.n	8007ae8 <__gnu_unwind_pr_common+0xd0>
 8007c28:	210f      	movs	r1, #15
 8007c2a:	4648      	mov	r0, r9
 8007c2c:	f7ff fe88 	bl	8007940 <_Unwind_GetGR>
 8007c30:	210e      	movs	r1, #14
 8007c32:	4602      	mov	r2, r0
 8007c34:	4648      	mov	r0, r9
 8007c36:	f7ff fea9 	bl	800798c <_Unwind_SetGR>
 8007c3a:	4648      	mov	r0, r9
 8007c3c:	4a29      	ldr	r2, [pc, #164]	; (8007ce4 <__gnu_unwind_pr_common+0x2cc>)
 8007c3e:	210f      	movs	r1, #15
 8007c40:	f7ff fea4 	bl	800798c <_Unwind_SetGR>
 8007c44:	2007      	movs	r0, #7
 8007c46:	e74f      	b.n	8007ae8 <__gnu_unwind_pr_common+0xd0>
 8007c48:	4607      	mov	r7, r0
 8007c4a:	210d      	movs	r1, #13
 8007c4c:	4648      	mov	r0, r9
 8007c4e:	f7ff fe77 	bl	8007940 <_Unwind_GetGR>
 8007c52:	2f02      	cmp	r7, #2
 8007c54:	6228      	str	r0, [r5, #32]
 8007c56:	d11d      	bne.n	8007c94 <__gnu_unwind_pr_common+0x27c>
 8007c58:	462b      	mov	r3, r5
 8007c5a:	9a06      	ldr	r2, [sp, #24]
 8007c5c:	f843 2f2c 	str.w	r2, [r3, #44]!
 8007c60:	626b      	str	r3, [r5, #36]	; 0x24
 8007c62:	62ac      	str	r4, [r5, #40]	; 0x28
 8007c64:	2006      	movs	r0, #6
 8007c66:	e73f      	b.n	8007ae8 <__gnu_unwind_pr_common+0xd0>
 8007c68:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8007c6a:	429c      	cmp	r4, r3
 8007c6c:	d1a3      	bne.n	8007bb6 <__gnu_unwind_pr_common+0x19e>
 8007c6e:	2204      	movs	r2, #4
 8007c70:	2700      	movs	r7, #0
 8007c72:	18a3      	adds	r3, r4, r2
 8007c74:	9902      	ldr	r1, [sp, #8]
 8007c76:	62a9      	str	r1, [r5, #40]	; 0x28
 8007c78:	62ef      	str	r7, [r5, #44]	; 0x2c
 8007c7a:	632a      	str	r2, [r5, #48]	; 0x30
 8007c7c:	636b      	str	r3, [r5, #52]	; 0x34
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	42bb      	cmp	r3, r7
 8007c82:	db1d      	blt.n	8007cc0 <__gnu_unwind_pr_common+0x2a8>
 8007c84:	2301      	movs	r3, #1
 8007c86:	9301      	str	r3, [sp, #4]
 8007c88:	e720      	b.n	8007acc <__gnu_unwind_pr_common+0xb4>
 8007c8a:	4648      	mov	r0, r9
 8007c8c:	210d      	movs	r1, #13
 8007c8e:	f7ff fe57 	bl	8007940 <_Unwind_GetGR>
 8007c92:	6228      	str	r0, [r5, #32]
 8007c94:	9b06      	ldr	r3, [sp, #24]
 8007c96:	626b      	str	r3, [r5, #36]	; 0x24
 8007c98:	e7e3      	b.n	8007c62 <__gnu_unwind_pr_common+0x24a>
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f7ff fc68 	bl	8007570 <selfrel_offset31>
 8007ca0:	3404      	adds	r4, #4
 8007ca2:	4606      	mov	r6, r0
 8007ca4:	63ac      	str	r4, [r5, #56]	; 0x38
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	f007 fb1c 	bl	800f2e4 <__cxa_begin_cleanup>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	f43f af1a 	beq.w	8007ae6 <__gnu_unwind_pr_common+0xce>
 8007cb2:	4648      	mov	r0, r9
 8007cb4:	4632      	mov	r2, r6
 8007cb6:	210f      	movs	r1, #15
 8007cb8:	f7ff fe68 	bl	800798c <_Unwind_SetGR>
 8007cbc:	2007      	movs	r0, #7
 8007cbe:	e713      	b.n	8007ae8 <__gnu_unwind_pr_common+0xd0>
 8007cc0:	4608      	mov	r0, r1
 8007cc2:	3001      	adds	r0, #1
 8007cc4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8007cc8:	f7ff fc52 	bl	8007570 <selfrel_offset31>
 8007ccc:	210f      	movs	r1, #15
 8007cce:	4602      	mov	r2, r0
 8007cd0:	4648      	mov	r0, r9
 8007cd2:	f7ff fe5b 	bl	800798c <_Unwind_SetGR>
 8007cd6:	4648      	mov	r0, r9
 8007cd8:	462a      	mov	r2, r5
 8007cda:	4639      	mov	r1, r7
 8007cdc:	f7ff fe56 	bl	800798c <_Unwind_SetGR>
 8007ce0:	2007      	movs	r0, #7
 8007ce2:	e701      	b.n	8007ae8 <__gnu_unwind_pr_common+0xd0>
 8007ce4:	0800fd51 	.word	0x0800fd51

08007ce8 <__aeabi_unwind_cpp_pr0>:
 8007ce8:	2300      	movs	r3, #0
 8007cea:	e695      	b.n	8007a18 <__gnu_unwind_pr_common>

08007cec <__aeabi_unwind_cpp_pr1>:
 8007cec:	2301      	movs	r3, #1
 8007cee:	e693      	b.n	8007a18 <__gnu_unwind_pr_common>

08007cf0 <__aeabi_unwind_cpp_pr2>:
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e691      	b.n	8007a18 <__gnu_unwind_pr_common>

08007cf4 <_Unwind_VRS_Pop>:
 8007cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cf6:	4604      	mov	r4, r0
 8007cf8:	b0c5      	sub	sp, #276	; 0x114
 8007cfa:	2904      	cmp	r1, #4
 8007cfc:	d80d      	bhi.n	8007d1a <_Unwind_VRS_Pop+0x26>
 8007cfe:	e8df f001 	tbb	[pc, r1]
 8007d02:	0353      	.short	0x0353
 8007d04:	310c      	.short	0x310c
 8007d06:	0f          	.byte	0x0f
 8007d07:	00          	.byte	0x00
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8007d0e:	b295      	uxth	r5, r2
 8007d10:	d162      	bne.n	8007dd8 <_Unwind_VRS_Pop+0xe4>
 8007d12:	1972      	adds	r2, r6, r5
 8007d14:	2a10      	cmp	r2, #16
 8007d16:	f240 809b 	bls.w	8007e50 <_Unwind_VRS_Pop+0x15c>
 8007d1a:	2002      	movs	r0, #2
 8007d1c:	b045      	add	sp, #276	; 0x114
 8007d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1fa      	bne.n	8007d1a <_Unwind_VRS_Pop+0x26>
 8007d24:	2a10      	cmp	r2, #16
 8007d26:	d8f8      	bhi.n	8007d1a <_Unwind_VRS_Pop+0x26>
 8007d28:	6823      	ldr	r3, [r4, #0]
 8007d2a:	06d8      	lsls	r0, r3, #27
 8007d2c:	f100 80c6 	bmi.w	8007ebc <_Unwind_VRS_Pop+0x1c8>
 8007d30:	ae22      	add	r6, sp, #136	; 0x88
 8007d32:	4630      	mov	r0, r6
 8007d34:	9201      	str	r2, [sp, #4]
 8007d36:	f000 f973 	bl	8008020 <__gnu_Unwind_Save_WMMXC>
 8007d3a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007d3c:	9a01      	ldr	r2, [sp, #4]
 8007d3e:	2300      	movs	r3, #0
 8007d40:	2501      	movs	r5, #1
 8007d42:	fa05 f103 	lsl.w	r1, r5, r3
 8007d46:	4211      	tst	r1, r2
 8007d48:	d003      	beq.n	8007d52 <_Unwind_VRS_Pop+0x5e>
 8007d4a:	6801      	ldr	r1, [r0, #0]
 8007d4c:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8007d50:	3004      	adds	r0, #4
 8007d52:	3301      	adds	r3, #1
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	d1f4      	bne.n	8007d42 <_Unwind_VRS_Pop+0x4e>
 8007d58:	63a0      	str	r0, [r4, #56]	; 0x38
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	f000 f956 	bl	800800c <__gnu_Unwind_Restore_WMMXC>
 8007d60:	2000      	movs	r0, #0
 8007d62:	e7db      	b.n	8007d1c <_Unwind_VRS_Pop+0x28>
 8007d64:	2b03      	cmp	r3, #3
 8007d66:	d1d8      	bne.n	8007d1a <_Unwind_VRS_Pop+0x26>
 8007d68:	0c15      	lsrs	r5, r2, #16
 8007d6a:	b297      	uxth	r7, r2
 8007d6c:	19eb      	adds	r3, r5, r7
 8007d6e:	2b10      	cmp	r3, #16
 8007d70:	d8d3      	bhi.n	8007d1a <_Unwind_VRS_Pop+0x26>
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	071e      	lsls	r6, r3, #28
 8007d76:	f100 80b5 	bmi.w	8007ee4 <_Unwind_VRS_Pop+0x1f0>
 8007d7a:	ae22      	add	r6, sp, #136	; 0x88
 8007d7c:	4630      	mov	r0, r6
 8007d7e:	f000 f923 	bl	8007fc8 <__gnu_Unwind_Save_WMMXD>
 8007d82:	00ed      	lsls	r5, r5, #3
 8007d84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007d86:	b14f      	cbz	r7, 8007d9c <_Unwind_VRS_Pop+0xa8>
 8007d88:	3d04      	subs	r5, #4
 8007d8a:	1971      	adds	r1, r6, r5
 8007d8c:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8007d90:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d94:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d98:	4283      	cmp	r3, r0
 8007d9a:	d1f9      	bne.n	8007d90 <_Unwind_VRS_Pop+0x9c>
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	63a3      	str	r3, [r4, #56]	; 0x38
 8007da0:	f000 f8f0 	bl	8007f84 <__gnu_Unwind_Restore_WMMXD>
 8007da4:	2000      	movs	r0, #0
 8007da6:	e7b9      	b.n	8007d1c <_Unwind_VRS_Pop+0x28>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1b6      	bne.n	8007d1a <_Unwind_VRS_Pop+0x26>
 8007dac:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8007dae:	b297      	uxth	r7, r2
 8007db0:	1d20      	adds	r0, r4, #4
 8007db2:	2601      	movs	r6, #1
 8007db4:	fa06 f103 	lsl.w	r1, r6, r3
 8007db8:	4239      	tst	r1, r7
 8007dba:	f103 0301 	add.w	r3, r3, #1
 8007dbe:	d002      	beq.n	8007dc6 <_Unwind_VRS_Pop+0xd2>
 8007dc0:	6829      	ldr	r1, [r5, #0]
 8007dc2:	6001      	str	r1, [r0, #0]
 8007dc4:	3504      	adds	r5, #4
 8007dc6:	2b10      	cmp	r3, #16
 8007dc8:	f100 0004 	add.w	r0, r0, #4
 8007dcc:	d1f2      	bne.n	8007db4 <_Unwind_VRS_Pop+0xc0>
 8007dce:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8007dd2:	d13b      	bne.n	8007e4c <_Unwind_VRS_Pop+0x158>
 8007dd4:	63a5      	str	r5, [r4, #56]	; 0x38
 8007dd6:	e7a1      	b.n	8007d1c <_Unwind_VRS_Pop+0x28>
 8007dd8:	2b05      	cmp	r3, #5
 8007dda:	d19e      	bne.n	8007d1a <_Unwind_VRS_Pop+0x26>
 8007ddc:	1977      	adds	r7, r6, r5
 8007dde:	2f20      	cmp	r7, #32
 8007de0:	d89b      	bhi.n	8007d1a <_Unwind_VRS_Pop+0x26>
 8007de2:	2e0f      	cmp	r6, #15
 8007de4:	d966      	bls.n	8007eb4 <_Unwind_VRS_Pop+0x1c0>
 8007de6:	462f      	mov	r7, r5
 8007de8:	2d00      	cmp	r5, #0
 8007dea:	d13a      	bne.n	8007e62 <_Unwind_VRS_Pop+0x16e>
 8007dec:	462a      	mov	r2, r5
 8007dee:	2700      	movs	r7, #0
 8007df0:	2a00      	cmp	r2, #0
 8007df2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007df4:	dd72      	ble.n	8007edc <_Unwind_VRS_Pop+0x1e8>
 8007df6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8007dfa:	4601      	mov	r1, r0
 8007dfc:	a844      	add	r0, sp, #272	; 0x110
 8007dfe:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8007e02:	388c      	subs	r0, #140	; 0x8c
 8007e04:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e08:	f840 5f04 	str.w	r5, [r0, #4]!
 8007e0c:	4291      	cmp	r1, r2
 8007e0e:	d1f9      	bne.n	8007e04 <_Unwind_VRS_Pop+0x110>
 8007e10:	4608      	mov	r0, r1
 8007e12:	b197      	cbz	r7, 8007e3a <_Unwind_VRS_Pop+0x146>
 8007e14:	2e10      	cmp	r6, #16
 8007e16:	4632      	mov	r2, r6
 8007e18:	a944      	add	r1, sp, #272	; 0x110
 8007e1a:	bf38      	it	cc
 8007e1c:	2210      	movcc	r2, #16
 8007e1e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007e22:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8007e26:	0079      	lsls	r1, r7, #1
 8007e28:	3a04      	subs	r2, #4
 8007e2a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007e2e:	f850 5b04 	ldr.w	r5, [r0], #4
 8007e32:	f842 5f04 	str.w	r5, [r2, #4]!
 8007e36:	4288      	cmp	r0, r1
 8007e38:	d1f9      	bne.n	8007e2e <_Unwind_VRS_Pop+0x13a>
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d048      	beq.n	8007ed0 <_Unwind_VRS_Pop+0x1dc>
 8007e3e:	2e0f      	cmp	r6, #15
 8007e40:	63a1      	str	r1, [r4, #56]	; 0x38
 8007e42:	d933      	bls.n	8007eac <_Unwind_VRS_Pop+0x1b8>
 8007e44:	b117      	cbz	r7, 8007e4c <_Unwind_VRS_Pop+0x158>
 8007e46:	a802      	add	r0, sp, #8
 8007e48:	f000 f894 	bl	8007f74 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8007e4c:	2000      	movs	r0, #0
 8007e4e:	e765      	b.n	8007d1c <_Unwind_VRS_Pop+0x28>
 8007e50:	2e0f      	cmp	r6, #15
 8007e52:	f63f af62 	bhi.w	8007d1a <_Unwind_VRS_Pop+0x26>
 8007e56:	2700      	movs	r7, #0
 8007e58:	6822      	ldr	r2, [r4, #0]
 8007e5a:	07d1      	lsls	r1, r2, #31
 8007e5c:	d417      	bmi.n	8007e8e <_Unwind_VRS_Pop+0x19a>
 8007e5e:	2f00      	cmp	r7, #0
 8007e60:	d060      	beq.n	8007f24 <_Unwind_VRS_Pop+0x230>
 8007e62:	6822      	ldr	r2, [r4, #0]
 8007e64:	0751      	lsls	r1, r2, #29
 8007e66:	d445      	bmi.n	8007ef4 <_Unwind_VRS_Pop+0x200>
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d04d      	beq.n	8007f08 <_Unwind_VRS_Pop+0x214>
 8007e6c:	2e0f      	cmp	r6, #15
 8007e6e:	d806      	bhi.n	8007e7e <_Unwind_VRS_Pop+0x18a>
 8007e70:	a822      	add	r0, sp, #136	; 0x88
 8007e72:	9301      	str	r3, [sp, #4]
 8007e74:	f000 f87a 	bl	8007f6c <__gnu_Unwind_Save_VFP_D>
 8007e78:	9b01      	ldr	r3, [sp, #4]
 8007e7a:	2f00      	cmp	r7, #0
 8007e7c:	d0b6      	beq.n	8007dec <_Unwind_VRS_Pop+0xf8>
 8007e7e:	a802      	add	r0, sp, #8
 8007e80:	9301      	str	r3, [sp, #4]
 8007e82:	f000 f87b 	bl	8007f7c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007e86:	9b01      	ldr	r3, [sp, #4]
 8007e88:	f1c6 0210 	rsb	r2, r6, #16
 8007e8c:	e7b0      	b.n	8007df0 <_Unwind_VRS_Pop+0xfc>
 8007e8e:	f022 0101 	bic.w	r1, r2, #1
 8007e92:	2b05      	cmp	r3, #5
 8007e94:	6021      	str	r1, [r4, #0]
 8007e96:	9301      	str	r3, [sp, #4]
 8007e98:	4620      	mov	r0, r4
 8007e9a:	d03b      	beq.n	8007f14 <_Unwind_VRS_Pop+0x220>
 8007e9c:	f022 0203 	bic.w	r2, r2, #3
 8007ea0:	f840 2b48 	str.w	r2, [r0], #72
 8007ea4:	f000 f85a 	bl	8007f5c <__gnu_Unwind_Save_VFP>
 8007ea8:	9b01      	ldr	r3, [sp, #4]
 8007eaa:	e7d8      	b.n	8007e5e <_Unwind_VRS_Pop+0x16a>
 8007eac:	a822      	add	r0, sp, #136	; 0x88
 8007eae:	f000 f859 	bl	8007f64 <__gnu_Unwind_Restore_VFP_D>
 8007eb2:	e7c7      	b.n	8007e44 <_Unwind_VRS_Pop+0x150>
 8007eb4:	2f10      	cmp	r7, #16
 8007eb6:	d9ce      	bls.n	8007e56 <_Unwind_VRS_Pop+0x162>
 8007eb8:	3f10      	subs	r7, #16
 8007eba:	e7cd      	b.n	8007e58 <_Unwind_VRS_Pop+0x164>
 8007ebc:	f023 0310 	bic.w	r3, r3, #16
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8007ec6:	9201      	str	r2, [sp, #4]
 8007ec8:	f000 f8aa 	bl	8008020 <__gnu_Unwind_Save_WMMXC>
 8007ecc:	9a01      	ldr	r2, [sp, #4]
 8007ece:	e72f      	b.n	8007d30 <_Unwind_VRS_Pop+0x3c>
 8007ed0:	3104      	adds	r1, #4
 8007ed2:	63a1      	str	r1, [r4, #56]	; 0x38
 8007ed4:	a822      	add	r0, sp, #136	; 0x88
 8007ed6:	f000 f83d 	bl	8007f54 <__gnu_Unwind_Restore_VFP>
 8007eda:	e7b7      	b.n	8007e4c <_Unwind_VRS_Pop+0x158>
 8007edc:	2f00      	cmp	r7, #0
 8007ede:	d199      	bne.n	8007e14 <_Unwind_VRS_Pop+0x120>
 8007ee0:	4601      	mov	r1, r0
 8007ee2:	e7aa      	b.n	8007e3a <_Unwind_VRS_Pop+0x146>
 8007ee4:	f023 0308 	bic.w	r3, r3, #8
 8007ee8:	6023      	str	r3, [r4, #0]
 8007eea:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8007eee:	f000 f86b 	bl	8007fc8 <__gnu_Unwind_Save_WMMXD>
 8007ef2:	e742      	b.n	8007d7a <_Unwind_VRS_Pop+0x86>
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f022 0204 	bic.w	r2, r2, #4
 8007efa:	f840 2bd0 	str.w	r2, [r0], #208
 8007efe:	9301      	str	r3, [sp, #4]
 8007f00:	f000 f83c 	bl	8007f7c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8007f04:	9b01      	ldr	r3, [sp, #4]
 8007f06:	e7af      	b.n	8007e68 <_Unwind_VRS_Pop+0x174>
 8007f08:	a822      	add	r0, sp, #136	; 0x88
 8007f0a:	9301      	str	r3, [sp, #4]
 8007f0c:	f000 f826 	bl	8007f5c <__gnu_Unwind_Save_VFP>
 8007f10:	9b01      	ldr	r3, [sp, #4]
 8007f12:	e7b9      	b.n	8007e88 <_Unwind_VRS_Pop+0x194>
 8007f14:	f041 0102 	orr.w	r1, r1, #2
 8007f18:	f840 1b48 	str.w	r1, [r0], #72
 8007f1c:	f000 f826 	bl	8007f6c <__gnu_Unwind_Save_VFP_D>
 8007f20:	9b01      	ldr	r3, [sp, #4]
 8007f22:	e79c      	b.n	8007e5e <_Unwind_VRS_Pop+0x16a>
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d003      	beq.n	8007f30 <_Unwind_VRS_Pop+0x23c>
 8007f28:	2e0f      	cmp	r6, #15
 8007f2a:	f63f af5f 	bhi.w	8007dec <_Unwind_VRS_Pop+0xf8>
 8007f2e:	e79f      	b.n	8007e70 <_Unwind_VRS_Pop+0x17c>
 8007f30:	a822      	add	r0, sp, #136	; 0x88
 8007f32:	9301      	str	r3, [sp, #4]
 8007f34:	f000 f812 	bl	8007f5c <__gnu_Unwind_Save_VFP>
 8007f38:	9b01      	ldr	r3, [sp, #4]
 8007f3a:	e757      	b.n	8007dec <_Unwind_VRS_Pop+0xf8>

08007f3c <__restore_core_regs>:
 8007f3c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8007f40:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8007f44:	469c      	mov	ip, r3
 8007f46:	46a6      	mov	lr, r4
 8007f48:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8007f4c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8007f50:	46e5      	mov	sp, ip
 8007f52:	bd00      	pop	{pc}

08007f54 <__gnu_Unwind_Restore_VFP>:
 8007f54:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop

08007f5c <__gnu_Unwind_Save_VFP>:
 8007f5c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop

08007f64 <__gnu_Unwind_Restore_VFP_D>:
 8007f64:	ec90 0b20 	vldmia	r0, {d0-d15}
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop

08007f6c <__gnu_Unwind_Save_VFP_D>:
 8007f6c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop

08007f74 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8007f74:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop

08007f7c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8007f7c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop

08007f84 <__gnu_Unwind_Restore_WMMXD>:
 8007f84:	ecf0 0102 	ldfe	f0, [r0], #8
 8007f88:	ecf0 1102 	ldfe	f1, [r0], #8
 8007f8c:	ecf0 2102 	ldfe	f2, [r0], #8
 8007f90:	ecf0 3102 	ldfe	f3, [r0], #8
 8007f94:	ecf0 4102 	ldfe	f4, [r0], #8
 8007f98:	ecf0 5102 	ldfe	f5, [r0], #8
 8007f9c:	ecf0 6102 	ldfe	f6, [r0], #8
 8007fa0:	ecf0 7102 	ldfe	f7, [r0], #8
 8007fa4:	ecf0 8102 	ldfp	f0, [r0], #8
 8007fa8:	ecf0 9102 	ldfp	f1, [r0], #8
 8007fac:	ecf0 a102 	ldfp	f2, [r0], #8
 8007fb0:	ecf0 b102 	ldfp	f3, [r0], #8
 8007fb4:	ecf0 c102 	ldfp	f4, [r0], #8
 8007fb8:	ecf0 d102 	ldfp	f5, [r0], #8
 8007fbc:	ecf0 e102 	ldfp	f6, [r0], #8
 8007fc0:	ecf0 f102 	ldfp	f7, [r0], #8
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop

08007fc8 <__gnu_Unwind_Save_WMMXD>:
 8007fc8:	ece0 0102 	stfe	f0, [r0], #8
 8007fcc:	ece0 1102 	stfe	f1, [r0], #8
 8007fd0:	ece0 2102 	stfe	f2, [r0], #8
 8007fd4:	ece0 3102 	stfe	f3, [r0], #8
 8007fd8:	ece0 4102 	stfe	f4, [r0], #8
 8007fdc:	ece0 5102 	stfe	f5, [r0], #8
 8007fe0:	ece0 6102 	stfe	f6, [r0], #8
 8007fe4:	ece0 7102 	stfe	f7, [r0], #8
 8007fe8:	ece0 8102 	stfp	f0, [r0], #8
 8007fec:	ece0 9102 	stfp	f1, [r0], #8
 8007ff0:	ece0 a102 	stfp	f2, [r0], #8
 8007ff4:	ece0 b102 	stfp	f3, [r0], #8
 8007ff8:	ece0 c102 	stfp	f4, [r0], #8
 8007ffc:	ece0 d102 	stfp	f5, [r0], #8
 8008000:	ece0 e102 	stfp	f6, [r0], #8
 8008004:	ece0 f102 	stfp	f7, [r0], #8
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop

0800800c <__gnu_Unwind_Restore_WMMXC>:
 800800c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8008010:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8008014:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8008018:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop

08008020 <__gnu_Unwind_Save_WMMXC>:
 8008020:	fca0 8101 	stc2	1, cr8, [r0], #4
 8008024:	fca0 9101 	stc2	1, cr9, [r0], #4
 8008028:	fca0 a101 	stc2	1, cr10, [r0], #4
 800802c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop

08008034 <_Unwind_RaiseException>:
 8008034:	46ec      	mov	ip, sp
 8008036:	b500      	push	{lr}
 8008038:	e92d 5000 	stmdb	sp!, {ip, lr}
 800803c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008040:	f04f 0300 	mov.w	r3, #0
 8008044:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008048:	a901      	add	r1, sp, #4
 800804a:	f7ff fbf3 	bl	8007834 <__gnu_Unwind_RaiseException>
 800804e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8008052:	b012      	add	sp, #72	; 0x48
 8008054:	4770      	bx	lr
 8008056:	bf00      	nop

08008058 <_Unwind_Resume>:
 8008058:	46ec      	mov	ip, sp
 800805a:	b500      	push	{lr}
 800805c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008060:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008064:	f04f 0300 	mov.w	r3, #0
 8008068:	e92d 000c 	stmdb	sp!, {r2, r3}
 800806c:	a901      	add	r1, sp, #4
 800806e:	f7ff fc1b 	bl	80078a8 <__gnu_Unwind_Resume>
 8008072:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8008076:	b012      	add	sp, #72	; 0x48
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop

0800807c <_Unwind_Resume_or_Rethrow>:
 800807c:	46ec      	mov	ip, sp
 800807e:	b500      	push	{lr}
 8008080:	e92d 5000 	stmdb	sp!, {ip, lr}
 8008084:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8008088:	f04f 0300 	mov.w	r3, #0
 800808c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8008090:	a901      	add	r1, sp, #4
 8008092:	f7ff fc2b 	bl	80078ec <__gnu_Unwind_Resume_or_Rethrow>
 8008096:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800809a:	b012      	add	sp, #72	; 0x48
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop

080080a0 <_Unwind_ForcedUnwind>:
 80080a0:	46ec      	mov	ip, sp
 80080a2:	b500      	push	{lr}
 80080a4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80080a8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80080ac:	f04f 0300 	mov.w	r3, #0
 80080b0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80080b4:	ab01      	add	r3, sp, #4
 80080b6:	f7ff fbed 	bl	8007894 <__gnu_Unwind_ForcedUnwind>
 80080ba:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80080be:	b012      	add	sp, #72	; 0x48
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop

080080c4 <_Unwind_Backtrace>:
 80080c4:	46ec      	mov	ip, sp
 80080c6:	b500      	push	{lr}
 80080c8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80080cc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80080d0:	f04f 0300 	mov.w	r3, #0
 80080d4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80080d8:	aa01      	add	r2, sp, #4
 80080da:	f7ff fc65 	bl	80079a8 <__gnu_Unwind_Backtrace>
 80080de:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80080e2:	b012      	add	sp, #72	; 0x48
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop

080080e8 <next_unwind_byte>:
 80080e8:	7a02      	ldrb	r2, [r0, #8]
 80080ea:	b91a      	cbnz	r2, 80080f4 <next_unwind_byte+0xc>
 80080ec:	7a43      	ldrb	r3, [r0, #9]
 80080ee:	b943      	cbnz	r3, 8008102 <next_unwind_byte+0x1a>
 80080f0:	20b0      	movs	r0, #176	; 0xb0
 80080f2:	4770      	bx	lr
 80080f4:	6803      	ldr	r3, [r0, #0]
 80080f6:	3a01      	subs	r2, #1
 80080f8:	7202      	strb	r2, [r0, #8]
 80080fa:	021a      	lsls	r2, r3, #8
 80080fc:	6002      	str	r2, [r0, #0]
 80080fe:	0e18      	lsrs	r0, r3, #24
 8008100:	4770      	bx	lr
 8008102:	6842      	ldr	r2, [r0, #4]
 8008104:	3b01      	subs	r3, #1
 8008106:	b410      	push	{r4}
 8008108:	7243      	strb	r3, [r0, #9]
 800810a:	6813      	ldr	r3, [r2, #0]
 800810c:	2103      	movs	r1, #3
 800810e:	1d14      	adds	r4, r2, #4
 8008110:	7201      	strb	r1, [r0, #8]
 8008112:	021a      	lsls	r2, r3, #8
 8008114:	6044      	str	r4, [r0, #4]
 8008116:	6002      	str	r2, [r0, #0]
 8008118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800811c:	0e18      	lsrs	r0, r3, #24
 800811e:	4770      	bx	lr

08008120 <_Unwind_GetGR.constprop.0>:
 8008120:	b500      	push	{lr}
 8008122:	b085      	sub	sp, #20
 8008124:	aa03      	add	r2, sp, #12
 8008126:	2300      	movs	r3, #0
 8008128:	9200      	str	r2, [sp, #0]
 800812a:	4619      	mov	r1, r3
 800812c:	220c      	movs	r2, #12
 800812e:	f7ff fbed 	bl	800790c <_Unwind_VRS_Get>
 8008132:	9803      	ldr	r0, [sp, #12]
 8008134:	b005      	add	sp, #20
 8008136:	f85d fb04 	ldr.w	pc, [sp], #4
 800813a:	bf00      	nop

0800813c <unwind_UCB_from_context>:
 800813c:	e7f0      	b.n	8008120 <_Unwind_GetGR.constprop.0>
 800813e:	bf00      	nop

08008140 <__gnu_unwind_execute>:
 8008140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008144:	4606      	mov	r6, r0
 8008146:	b085      	sub	sp, #20
 8008148:	460f      	mov	r7, r1
 800814a:	f04f 0800 	mov.w	r8, #0
 800814e:	4638      	mov	r0, r7
 8008150:	f7ff ffca 	bl	80080e8 <next_unwind_byte>
 8008154:	28b0      	cmp	r0, #176	; 0xb0
 8008156:	4604      	mov	r4, r0
 8008158:	d023      	beq.n	80081a2 <__gnu_unwind_execute+0x62>
 800815a:	0605      	lsls	r5, r0, #24
 800815c:	d427      	bmi.n	80081ae <__gnu_unwind_execute+0x6e>
 800815e:	2300      	movs	r3, #0
 8008160:	f10d 090c 	add.w	r9, sp, #12
 8008164:	4619      	mov	r1, r3
 8008166:	0085      	lsls	r5, r0, #2
 8008168:	220d      	movs	r2, #13
 800816a:	f8cd 9000 	str.w	r9, [sp]
 800816e:	4630      	mov	r0, r6
 8008170:	f7ff fbcc 	bl	800790c <_Unwind_VRS_Get>
 8008174:	b2ed      	uxtb	r5, r5
 8008176:	9b03      	ldr	r3, [sp, #12]
 8008178:	f8cd 9000 	str.w	r9, [sp]
 800817c:	0660      	lsls	r0, r4, #25
 800817e:	f105 0504 	add.w	r5, r5, #4
 8008182:	bf4c      	ite	mi
 8008184:	1b5d      	submi	r5, r3, r5
 8008186:	18ed      	addpl	r5, r5, r3
 8008188:	2300      	movs	r3, #0
 800818a:	4619      	mov	r1, r3
 800818c:	220d      	movs	r2, #13
 800818e:	4630      	mov	r0, r6
 8008190:	9503      	str	r5, [sp, #12]
 8008192:	f7ff fbe1 	bl	8007958 <_Unwind_VRS_Set>
 8008196:	4638      	mov	r0, r7
 8008198:	f7ff ffa6 	bl	80080e8 <next_unwind_byte>
 800819c:	28b0      	cmp	r0, #176	; 0xb0
 800819e:	4604      	mov	r4, r0
 80081a0:	d1db      	bne.n	800815a <__gnu_unwind_execute+0x1a>
 80081a2:	f1b8 0f00 	cmp.w	r8, #0
 80081a6:	f000 8095 	beq.w	80082d4 <__gnu_unwind_execute+0x194>
 80081aa:	2000      	movs	r0, #0
 80081ac:	e01c      	b.n	80081e8 <__gnu_unwind_execute+0xa8>
 80081ae:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80081b2:	2b80      	cmp	r3, #128	; 0x80
 80081b4:	d05d      	beq.n	8008272 <__gnu_unwind_execute+0x132>
 80081b6:	2b90      	cmp	r3, #144	; 0x90
 80081b8:	d019      	beq.n	80081ee <__gnu_unwind_execute+0xae>
 80081ba:	2ba0      	cmp	r3, #160	; 0xa0
 80081bc:	d02c      	beq.n	8008218 <__gnu_unwind_execute+0xd8>
 80081be:	2bb0      	cmp	r3, #176	; 0xb0
 80081c0:	d03f      	beq.n	8008242 <__gnu_unwind_execute+0x102>
 80081c2:	2bc0      	cmp	r3, #192	; 0xc0
 80081c4:	d06c      	beq.n	80082a0 <__gnu_unwind_execute+0x160>
 80081c6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80081ca:	2bd0      	cmp	r3, #208	; 0xd0
 80081cc:	d10b      	bne.n	80081e6 <__gnu_unwind_execute+0xa6>
 80081ce:	f000 0207 	and.w	r2, r0, #7
 80081d2:	3201      	adds	r2, #1
 80081d4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80081d8:	2305      	movs	r3, #5
 80081da:	2101      	movs	r1, #1
 80081dc:	4630      	mov	r0, r6
 80081de:	f7ff fd89 	bl	8007cf4 <_Unwind_VRS_Pop>
 80081e2:	2800      	cmp	r0, #0
 80081e4:	d0b3      	beq.n	800814e <__gnu_unwind_execute+0xe>
 80081e6:	2009      	movs	r0, #9
 80081e8:	b005      	add	sp, #20
 80081ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081ee:	f000 030d 	and.w	r3, r0, #13
 80081f2:	2b0d      	cmp	r3, #13
 80081f4:	d0f7      	beq.n	80081e6 <__gnu_unwind_execute+0xa6>
 80081f6:	ad03      	add	r5, sp, #12
 80081f8:	2300      	movs	r3, #0
 80081fa:	f000 020f 	and.w	r2, r0, #15
 80081fe:	4619      	mov	r1, r3
 8008200:	9500      	str	r5, [sp, #0]
 8008202:	4630      	mov	r0, r6
 8008204:	f7ff fb82 	bl	800790c <_Unwind_VRS_Get>
 8008208:	2300      	movs	r3, #0
 800820a:	9500      	str	r5, [sp, #0]
 800820c:	4619      	mov	r1, r3
 800820e:	220d      	movs	r2, #13
 8008210:	4630      	mov	r0, r6
 8008212:	f7ff fba1 	bl	8007958 <_Unwind_VRS_Set>
 8008216:	e79a      	b.n	800814e <__gnu_unwind_execute+0xe>
 8008218:	43c2      	mvns	r2, r0
 800821a:	f002 0307 	and.w	r3, r2, #7
 800821e:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8008222:	411a      	asrs	r2, r3
 8008224:	0701      	lsls	r1, r0, #28
 8008226:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 800822a:	f04f 0300 	mov.w	r3, #0
 800822e:	bf48      	it	mi
 8008230:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8008234:	4619      	mov	r1, r3
 8008236:	4630      	mov	r0, r6
 8008238:	f7ff fd5c 	bl	8007cf4 <_Unwind_VRS_Pop>
 800823c:	2800      	cmp	r0, #0
 800823e:	d1d2      	bne.n	80081e6 <__gnu_unwind_execute+0xa6>
 8008240:	e785      	b.n	800814e <__gnu_unwind_execute+0xe>
 8008242:	28b1      	cmp	r0, #177	; 0xb1
 8008244:	d057      	beq.n	80082f6 <__gnu_unwind_execute+0x1b6>
 8008246:	28b2      	cmp	r0, #178	; 0xb2
 8008248:	d068      	beq.n	800831c <__gnu_unwind_execute+0x1dc>
 800824a:	28b3      	cmp	r0, #179	; 0xb3
 800824c:	f000 8095 	beq.w	800837a <__gnu_unwind_execute+0x23a>
 8008250:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8008254:	2bb4      	cmp	r3, #180	; 0xb4
 8008256:	d0c6      	beq.n	80081e6 <__gnu_unwind_execute+0xa6>
 8008258:	f000 0207 	and.w	r2, r0, #7
 800825c:	3201      	adds	r2, #1
 800825e:	2301      	movs	r3, #1
 8008260:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8008264:	4619      	mov	r1, r3
 8008266:	4630      	mov	r0, r6
 8008268:	f7ff fd44 	bl	8007cf4 <_Unwind_VRS_Pop>
 800826c:	2800      	cmp	r0, #0
 800826e:	d1ba      	bne.n	80081e6 <__gnu_unwind_execute+0xa6>
 8008270:	e76d      	b.n	800814e <__gnu_unwind_execute+0xe>
 8008272:	4638      	mov	r0, r7
 8008274:	f7ff ff38 	bl	80080e8 <next_unwind_byte>
 8008278:	0224      	lsls	r4, r4, #8
 800827a:	4304      	orrs	r4, r0
 800827c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8008280:	d0b1      	beq.n	80081e6 <__gnu_unwind_execute+0xa6>
 8008282:	0124      	lsls	r4, r4, #4
 8008284:	2300      	movs	r3, #0
 8008286:	b2a2      	uxth	r2, r4
 8008288:	4619      	mov	r1, r3
 800828a:	4630      	mov	r0, r6
 800828c:	f7ff fd32 	bl	8007cf4 <_Unwind_VRS_Pop>
 8008290:	2800      	cmp	r0, #0
 8008292:	d1a8      	bne.n	80081e6 <__gnu_unwind_execute+0xa6>
 8008294:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8008298:	bf18      	it	ne
 800829a:	f04f 0801 	movne.w	r8, #1
 800829e:	e756      	b.n	800814e <__gnu_unwind_execute+0xe>
 80082a0:	28c6      	cmp	r0, #198	; 0xc6
 80082a2:	d07d      	beq.n	80083a0 <__gnu_unwind_execute+0x260>
 80082a4:	28c7      	cmp	r0, #199	; 0xc7
 80082a6:	f000 8086 	beq.w	80083b6 <__gnu_unwind_execute+0x276>
 80082aa:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80082ae:	2bc0      	cmp	r3, #192	; 0xc0
 80082b0:	f000 8094 	beq.w	80083dc <__gnu_unwind_execute+0x29c>
 80082b4:	28c8      	cmp	r0, #200	; 0xc8
 80082b6:	f000 809f 	beq.w	80083f8 <__gnu_unwind_execute+0x2b8>
 80082ba:	28c9      	cmp	r0, #201	; 0xc9
 80082bc:	d193      	bne.n	80081e6 <__gnu_unwind_execute+0xa6>
 80082be:	4638      	mov	r0, r7
 80082c0:	f7ff ff12 	bl	80080e8 <next_unwind_byte>
 80082c4:	0302      	lsls	r2, r0, #12
 80082c6:	f000 000f 	and.w	r0, r0, #15
 80082ca:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80082ce:	3001      	adds	r0, #1
 80082d0:	4302      	orrs	r2, r0
 80082d2:	e781      	b.n	80081d8 <__gnu_unwind_execute+0x98>
 80082d4:	ac03      	add	r4, sp, #12
 80082d6:	4643      	mov	r3, r8
 80082d8:	220e      	movs	r2, #14
 80082da:	4641      	mov	r1, r8
 80082dc:	9400      	str	r4, [sp, #0]
 80082de:	4630      	mov	r0, r6
 80082e0:	f7ff fb14 	bl	800790c <_Unwind_VRS_Get>
 80082e4:	9400      	str	r4, [sp, #0]
 80082e6:	4630      	mov	r0, r6
 80082e8:	4643      	mov	r3, r8
 80082ea:	220f      	movs	r2, #15
 80082ec:	4641      	mov	r1, r8
 80082ee:	f7ff fb33 	bl	8007958 <_Unwind_VRS_Set>
 80082f2:	4640      	mov	r0, r8
 80082f4:	e778      	b.n	80081e8 <__gnu_unwind_execute+0xa8>
 80082f6:	4638      	mov	r0, r7
 80082f8:	f7ff fef6 	bl	80080e8 <next_unwind_byte>
 80082fc:	2800      	cmp	r0, #0
 80082fe:	f43f af72 	beq.w	80081e6 <__gnu_unwind_execute+0xa6>
 8008302:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8008306:	f47f af6e 	bne.w	80081e6 <__gnu_unwind_execute+0xa6>
 800830a:	4602      	mov	r2, r0
 800830c:	4619      	mov	r1, r3
 800830e:	4630      	mov	r0, r6
 8008310:	f7ff fcf0 	bl	8007cf4 <_Unwind_VRS_Pop>
 8008314:	2800      	cmp	r0, #0
 8008316:	f47f af66 	bne.w	80081e6 <__gnu_unwind_execute+0xa6>
 800831a:	e718      	b.n	800814e <__gnu_unwind_execute+0xe>
 800831c:	2300      	movs	r3, #0
 800831e:	f10d 090c 	add.w	r9, sp, #12
 8008322:	220d      	movs	r2, #13
 8008324:	4619      	mov	r1, r3
 8008326:	f8cd 9000 	str.w	r9, [sp]
 800832a:	4630      	mov	r0, r6
 800832c:	f7ff faee 	bl	800790c <_Unwind_VRS_Get>
 8008330:	4638      	mov	r0, r7
 8008332:	f7ff fed9 	bl	80080e8 <next_unwind_byte>
 8008336:	0602      	lsls	r2, r0, #24
 8008338:	f04f 0402 	mov.w	r4, #2
 800833c:	d50c      	bpl.n	8008358 <__gnu_unwind_execute+0x218>
 800833e:	9b03      	ldr	r3, [sp, #12]
 8008340:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8008344:	40a0      	lsls	r0, r4
 8008346:	4403      	add	r3, r0
 8008348:	4638      	mov	r0, r7
 800834a:	9303      	str	r3, [sp, #12]
 800834c:	f7ff fecc 	bl	80080e8 <next_unwind_byte>
 8008350:	0603      	lsls	r3, r0, #24
 8008352:	f104 0407 	add.w	r4, r4, #7
 8008356:	d4f2      	bmi.n	800833e <__gnu_unwind_execute+0x1fe>
 8008358:	9b03      	ldr	r3, [sp, #12]
 800835a:	f8cd 9000 	str.w	r9, [sp]
 800835e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8008362:	40a2      	lsls	r2, r4
 8008364:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8008368:	2300      	movs	r3, #0
 800836a:	4414      	add	r4, r2
 800836c:	4619      	mov	r1, r3
 800836e:	220d      	movs	r2, #13
 8008370:	4630      	mov	r0, r6
 8008372:	9403      	str	r4, [sp, #12]
 8008374:	f7ff faf0 	bl	8007958 <_Unwind_VRS_Set>
 8008378:	e6e9      	b.n	800814e <__gnu_unwind_execute+0xe>
 800837a:	4638      	mov	r0, r7
 800837c:	f7ff feb4 	bl	80080e8 <next_unwind_byte>
 8008380:	0301      	lsls	r1, r0, #12
 8008382:	f000 000f 	and.w	r0, r0, #15
 8008386:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 800838a:	1c42      	adds	r2, r0, #1
 800838c:	2301      	movs	r3, #1
 800838e:	430a      	orrs	r2, r1
 8008390:	4630      	mov	r0, r6
 8008392:	4619      	mov	r1, r3
 8008394:	f7ff fcae 	bl	8007cf4 <_Unwind_VRS_Pop>
 8008398:	2800      	cmp	r0, #0
 800839a:	f47f af24 	bne.w	80081e6 <__gnu_unwind_execute+0xa6>
 800839e:	e6d6      	b.n	800814e <__gnu_unwind_execute+0xe>
 80083a0:	4638      	mov	r0, r7
 80083a2:	f7ff fea1 	bl	80080e8 <next_unwind_byte>
 80083a6:	0301      	lsls	r1, r0, #12
 80083a8:	f000 000f 	and.w	r0, r0, #15
 80083ac:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80083b0:	1c42      	adds	r2, r0, #1
 80083b2:	2303      	movs	r3, #3
 80083b4:	e7eb      	b.n	800838e <__gnu_unwind_execute+0x24e>
 80083b6:	4638      	mov	r0, r7
 80083b8:	f7ff fe96 	bl	80080e8 <next_unwind_byte>
 80083bc:	2800      	cmp	r0, #0
 80083be:	f43f af12 	beq.w	80081e6 <__gnu_unwind_execute+0xa6>
 80083c2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80083c6:	f47f af0e 	bne.w	80081e6 <__gnu_unwind_execute+0xa6>
 80083ca:	4602      	mov	r2, r0
 80083cc:	2104      	movs	r1, #4
 80083ce:	4630      	mov	r0, r6
 80083d0:	f7ff fc90 	bl	8007cf4 <_Unwind_VRS_Pop>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	f47f af06 	bne.w	80081e6 <__gnu_unwind_execute+0xa6>
 80083da:	e6b8      	b.n	800814e <__gnu_unwind_execute+0xe>
 80083dc:	f000 020f 	and.w	r2, r0, #15
 80083e0:	3201      	adds	r2, #1
 80083e2:	2303      	movs	r3, #3
 80083e4:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80083e8:	4619      	mov	r1, r3
 80083ea:	4630      	mov	r0, r6
 80083ec:	f7ff fc82 	bl	8007cf4 <_Unwind_VRS_Pop>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	f47f aef8 	bne.w	80081e6 <__gnu_unwind_execute+0xa6>
 80083f6:	e6aa      	b.n	800814e <__gnu_unwind_execute+0xe>
 80083f8:	4638      	mov	r0, r7
 80083fa:	f7ff fe75 	bl	80080e8 <next_unwind_byte>
 80083fe:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8008402:	f000 030f 	and.w	r3, r0, #15
 8008406:	3210      	adds	r2, #16
 8008408:	3301      	adds	r3, #1
 800840a:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800840e:	e6e3      	b.n	80081d8 <__gnu_unwind_execute+0x98>

08008410 <__gnu_unwind_frame>:
 8008410:	b510      	push	{r4, lr}
 8008412:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8008414:	b084      	sub	sp, #16
 8008416:	685a      	ldr	r2, [r3, #4]
 8008418:	2003      	movs	r0, #3
 800841a:	f88d 000c 	strb.w	r0, [sp, #12]
 800841e:	79dc      	ldrb	r4, [r3, #7]
 8008420:	f88d 400d 	strb.w	r4, [sp, #13]
 8008424:	0212      	lsls	r2, r2, #8
 8008426:	3308      	adds	r3, #8
 8008428:	4608      	mov	r0, r1
 800842a:	a901      	add	r1, sp, #4
 800842c:	9201      	str	r2, [sp, #4]
 800842e:	9302      	str	r3, [sp, #8]
 8008430:	f7ff fe86 	bl	8008140 <__gnu_unwind_execute>
 8008434:	b004      	add	sp, #16
 8008436:	bd10      	pop	{r4, pc}

08008438 <_Unwind_GetRegionStart>:
 8008438:	b508      	push	{r3, lr}
 800843a:	f7ff fe7f 	bl	800813c <unwind_UCB_from_context>
 800843e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8008440:	bd08      	pop	{r3, pc}
 8008442:	bf00      	nop

08008444 <_Unwind_GetLanguageSpecificData>:
 8008444:	b508      	push	{r3, lr}
 8008446:	f7ff fe79 	bl	800813c <unwind_UCB_from_context>
 800844a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800844c:	79c3      	ldrb	r3, [r0, #7]
 800844e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008452:	3008      	adds	r0, #8
 8008454:	bd08      	pop	{r3, pc}
 8008456:	bf00      	nop

08008458 <_Unwind_GetTextRelBase>:
 8008458:	b508      	push	{r3, lr}
 800845a:	f008 f8b7 	bl	80105cc <abort>
 800845e:	bf00      	nop

08008460 <_Unwind_GetDataRelBase>:
 8008460:	b508      	push	{r3, lr}
 8008462:	f7ff fff9 	bl	8008458 <_Unwind_GetTextRelBase>
 8008466:	bf00      	nop

08008468 <__aeabi_idiv0>:
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop

0800846c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800846c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800846e:	4a0e      	ldr	r2, [pc, #56]	; (80084a8 <HAL_InitTick+0x3c>)
 8008470:	4b0e      	ldr	r3, [pc, #56]	; (80084ac <HAL_InitTick+0x40>)
{
 8008472:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008474:	7818      	ldrb	r0, [r3, #0]
 8008476:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800847a:	fbb3 f3f0 	udiv	r3, r3, r0
 800847e:	6810      	ldr	r0, [r2, #0]
 8008480:	fbb0 f0f3 	udiv	r0, r0, r3
 8008484:	f000 f8a8 	bl	80085d8 <HAL_SYSTICK_Config>
 8008488:	4604      	mov	r4, r0
 800848a:	b958      	cbnz	r0, 80084a4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800848c:	2d0f      	cmp	r5, #15
 800848e:	d809      	bhi.n	80084a4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008490:	4602      	mov	r2, r0
 8008492:	4629      	mov	r1, r5
 8008494:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008498:	f000 f85e 	bl	8008558 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800849c:	4b04      	ldr	r3, [pc, #16]	; (80084b0 <HAL_InitTick+0x44>)
 800849e:	4620      	mov	r0, r4
 80084a0:	601d      	str	r5, [r3, #0]
 80084a2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80084a4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80084a6:	bd38      	pop	{r3, r4, r5, pc}
 80084a8:	2000000c 	.word	0x2000000c
 80084ac:	20000004 	.word	0x20000004
 80084b0:	20000008 	.word	0x20000008

080084b4 <HAL_Init>:
{
 80084b4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80084b6:	4b0b      	ldr	r3, [pc, #44]	; (80084e4 <HAL_Init+0x30>)
 80084b8:	681a      	ldr	r2, [r3, #0]
 80084ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084be:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084c6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084ce:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80084d0:	2003      	movs	r0, #3
 80084d2:	f000 f82f 	bl	8008534 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80084d6:	2000      	movs	r0, #0
 80084d8:	f7ff ffc8 	bl	800846c <HAL_InitTick>
  HAL_MspInit();
 80084dc:	f002 fbca 	bl	800ac74 <HAL_MspInit>
}
 80084e0:	2000      	movs	r0, #0
 80084e2:	bd08      	pop	{r3, pc}
 80084e4:	40023c00 	.word	0x40023c00

080084e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80084e8:	4a03      	ldr	r2, [pc, #12]	; (80084f8 <HAL_IncTick+0x10>)
 80084ea:	4b04      	ldr	r3, [pc, #16]	; (80084fc <HAL_IncTick+0x14>)
 80084ec:	6811      	ldr	r1, [r2, #0]
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	440b      	add	r3, r1
 80084f2:	6013      	str	r3, [r2, #0]
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	20008e74 	.word	0x20008e74
 80084fc:	20000004 	.word	0x20000004

08008500 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008500:	4b01      	ldr	r3, [pc, #4]	; (8008508 <HAL_GetTick+0x8>)
 8008502:	6818      	ldr	r0, [r3, #0]
}
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	20008e74 	.word	0x20008e74

0800850c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800850c:	b538      	push	{r3, r4, r5, lr}
 800850e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008510:	f7ff fff6 	bl	8008500 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008514:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8008516:	bf1c      	itt	ne
 8008518:	4b05      	ldrne	r3, [pc, #20]	; (8008530 <HAL_Delay+0x24>)
 800851a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800851c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800851e:	bf18      	it	ne
 8008520:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008522:	f7ff ffed 	bl	8008500 <HAL_GetTick>
 8008526:	1b40      	subs	r0, r0, r5
 8008528:	4284      	cmp	r4, r0
 800852a:	d8fa      	bhi.n	8008522 <HAL_Delay+0x16>
  {
  }
}
 800852c:	bd38      	pop	{r3, r4, r5, pc}
 800852e:	bf00      	nop
 8008530:	20000004 	.word	0x20000004

08008534 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008534:	4a07      	ldr	r2, [pc, #28]	; (8008554 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8008536:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008538:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800853c:	041b      	lsls	r3, r3, #16
 800853e:	0c1b      	lsrs	r3, r3, #16
 8008540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8008544:	0200      	lsls	r0, r0, #8
 8008546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800854a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800854e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8008550:	60d3      	str	r3, [r2, #12]
 8008552:	4770      	bx	lr
 8008554:	e000ed00 	.word	0xe000ed00

08008558 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008558:	4b17      	ldr	r3, [pc, #92]	; (80085b8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800855a:	b530      	push	{r4, r5, lr}
 800855c:	68dc      	ldr	r4, [r3, #12]
 800855e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008562:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008566:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008568:	2b04      	cmp	r3, #4
 800856a:	bf28      	it	cs
 800856c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800856e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008570:	f04f 0501 	mov.w	r5, #1
 8008574:	fa05 f303 	lsl.w	r3, r5, r3
 8008578:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800857c:	bf8c      	ite	hi
 800857e:	3c03      	subhi	r4, #3
 8008580:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008582:	4019      	ands	r1, r3
 8008584:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008586:	fa05 f404 	lsl.w	r4, r5, r4
 800858a:	3c01      	subs	r4, #1
 800858c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800858e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008590:	ea42 0201 	orr.w	r2, r2, r1
 8008594:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008598:	bfaf      	iteee	ge
 800859a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800859e:	f000 000f 	andlt.w	r0, r0, #15
 80085a2:	4b06      	ldrlt	r3, [pc, #24]	; (80085bc <HAL_NVIC_SetPriority+0x64>)
 80085a4:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085a6:	bfa5      	ittet	ge
 80085a8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80085ac:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085ae:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085b0:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80085b4:	bd30      	pop	{r4, r5, pc}
 80085b6:	bf00      	nop
 80085b8:	e000ed00 	.word	0xe000ed00
 80085bc:	e000ed14 	.word	0xe000ed14

080085c0 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80085c0:	0942      	lsrs	r2, r0, #5
 80085c2:	2301      	movs	r3, #1
 80085c4:	f000 001f 	and.w	r0, r0, #31
 80085c8:	fa03 f000 	lsl.w	r0, r3, r0
 80085cc:	4b01      	ldr	r3, [pc, #4]	; (80085d4 <HAL_NVIC_EnableIRQ+0x14>)
 80085ce:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80085d2:	4770      	bx	lr
 80085d4:	e000e100 	.word	0xe000e100

080085d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80085d8:	3801      	subs	r0, #1
 80085da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80085de:	d20a      	bcs.n	80085f6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80085e0:	4b06      	ldr	r3, [pc, #24]	; (80085fc <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085e2:	4a07      	ldr	r2, [pc, #28]	; (8008600 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80085e4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085e6:	21f0      	movs	r1, #240	; 0xf0
 80085e8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80085ec:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80085ee:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80085f0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80085f6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80085f8:	4770      	bx	lr
 80085fa:	bf00      	nop
 80085fc:	e000e010 	.word	0xe000e010
 8008600:	e000ed00 	.word	0xe000ed00

08008604 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008604:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008608:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800860a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800860c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80087bc <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008610:	4a68      	ldr	r2, [pc, #416]	; (80087b4 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008612:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80087c0 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008616:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008618:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800861a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800861e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8008620:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008624:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8008628:	45b6      	cmp	lr, r6
 800862a:	f040 80ae 	bne.w	800878a <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800862e:	684c      	ldr	r4, [r1, #4]
 8008630:	f024 0710 	bic.w	r7, r4, #16
 8008634:	2f02      	cmp	r7, #2
 8008636:	d116      	bne.n	8008666 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8008638:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800863c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008640:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8008644:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008648:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800864c:	f04f 0c0f 	mov.w	ip, #15
 8008650:	fa0c fc0b 	lsl.w	ip, ip, fp
 8008654:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008658:	690d      	ldr	r5, [r1, #16]
 800865a:	fa05 f50b 	lsl.w	r5, r5, fp
 800865e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8008662:	f8ca 5020 	str.w	r5, [sl, #32]
 8008666:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800866a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800866c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008670:	fa05 f50a 	lsl.w	r5, r5, sl
 8008674:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008676:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800867a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800867e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008682:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008684:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008688:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800868a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800868e:	d811      	bhi.n	80086b4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8008690:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008692:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008696:	68cf      	ldr	r7, [r1, #12]
 8008698:	fa07 fc0a 	lsl.w	ip, r7, sl
 800869c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80086a0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80086a2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80086a4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80086a8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80086ac:	409f      	lsls	r7, r3
 80086ae:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80086b2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80086b4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80086b6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80086b8:	688f      	ldr	r7, [r1, #8]
 80086ba:	fa07 f70a 	lsl.w	r7, r7, sl
 80086be:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80086c0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80086c2:	00e5      	lsls	r5, r4, #3
 80086c4:	d561      	bpl.n	800878a <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086c6:	f04f 0b00 	mov.w	fp, #0
 80086ca:	f8cd b00c 	str.w	fp, [sp, #12]
 80086ce:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80086d2:	4d39      	ldr	r5, [pc, #228]	; (80087b8 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086d4:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80086d8:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80086dc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80086e0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80086e4:	9703      	str	r7, [sp, #12]
 80086e6:	9f03      	ldr	r7, [sp, #12]
 80086e8:	f023 0703 	bic.w	r7, r3, #3
 80086ec:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80086f0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80086f4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80086f8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80086fc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8008700:	f04f 0e0f 	mov.w	lr, #15
 8008704:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008708:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800870a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800870e:	d043      	beq.n	8008798 <HAL_GPIO_Init+0x194>
 8008710:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008714:	42a8      	cmp	r0, r5
 8008716:	d041      	beq.n	800879c <HAL_GPIO_Init+0x198>
 8008718:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800871c:	42a8      	cmp	r0, r5
 800871e:	d03f      	beq.n	80087a0 <HAL_GPIO_Init+0x19c>
 8008720:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008724:	42a8      	cmp	r0, r5
 8008726:	d03d      	beq.n	80087a4 <HAL_GPIO_Init+0x1a0>
 8008728:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800872c:	42a8      	cmp	r0, r5
 800872e:	d03b      	beq.n	80087a8 <HAL_GPIO_Init+0x1a4>
 8008730:	4548      	cmp	r0, r9
 8008732:	d03b      	beq.n	80087ac <HAL_GPIO_Init+0x1a8>
 8008734:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8008738:	42a8      	cmp	r0, r5
 800873a:	d039      	beq.n	80087b0 <HAL_GPIO_Init+0x1ac>
 800873c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8008740:	42a8      	cmp	r0, r5
 8008742:	bf14      	ite	ne
 8008744:	2508      	movne	r5, #8
 8008746:	2507      	moveq	r5, #7
 8008748:	fa05 f50c 	lsl.w	r5, r5, ip
 800874c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008750:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8008752:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8008754:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008756:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800875a:	bf0c      	ite	eq
 800875c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800875e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8008760:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8008762:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008764:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8008768:	bf0c      	ite	eq
 800876a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800876c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800876e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008770:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008772:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8008776:	bf0c      	ite	eq
 8008778:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800877a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800877c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800877e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008780:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8008782:	bf54      	ite	pl
 8008784:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8008786:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8008788:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800878a:	3301      	adds	r3, #1
 800878c:	2b10      	cmp	r3, #16
 800878e:	f47f af44 	bne.w	800861a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8008792:	b005      	add	sp, #20
 8008794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008798:	465d      	mov	r5, fp
 800879a:	e7d5      	b.n	8008748 <HAL_GPIO_Init+0x144>
 800879c:	2501      	movs	r5, #1
 800879e:	e7d3      	b.n	8008748 <HAL_GPIO_Init+0x144>
 80087a0:	2502      	movs	r5, #2
 80087a2:	e7d1      	b.n	8008748 <HAL_GPIO_Init+0x144>
 80087a4:	2503      	movs	r5, #3
 80087a6:	e7cf      	b.n	8008748 <HAL_GPIO_Init+0x144>
 80087a8:	2504      	movs	r5, #4
 80087aa:	e7cd      	b.n	8008748 <HAL_GPIO_Init+0x144>
 80087ac:	2505      	movs	r5, #5
 80087ae:	e7cb      	b.n	8008748 <HAL_GPIO_Init+0x144>
 80087b0:	2506      	movs	r5, #6
 80087b2:	e7c9      	b.n	8008748 <HAL_GPIO_Init+0x144>
 80087b4:	40013c00 	.word	0x40013c00
 80087b8:	40020000 	.word	0x40020000
 80087bc:	40023800 	.word	0x40023800
 80087c0:	40021400 	.word	0x40021400

080087c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80087c4:	b10a      	cbz	r2, 80087ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80087c6:	6181      	str	r1, [r0, #24]
 80087c8:	4770      	bx	lr
 80087ca:	0409      	lsls	r1, r1, #16
 80087cc:	e7fb      	b.n	80087c6 <HAL_GPIO_WritePin+0x2>

080087ce <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80087ce:	6802      	ldr	r2, [r0, #0]
 80087d0:	6953      	ldr	r3, [r2, #20]
 80087d2:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80087d6:	d00d      	beq.n	80087f4 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80087d8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80087dc:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80087de:	2304      	movs	r3, #4
 80087e0:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 80087e2:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 80087e4:	2300      	movs	r3, #0
 80087e6:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 80087ec:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 80087f0:	2001      	movs	r0, #1
 80087f2:	4770      	bx	lr
  }
  return HAL_OK;
 80087f4:	4618      	mov	r0, r3
}
 80087f6:	4770      	bx	lr

080087f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80087f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087fc:	4604      	mov	r4, r0
 80087fe:	4617      	mov	r7, r2
 8008800:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008802:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8008806:	b28e      	uxth	r6, r1
 8008808:	6825      	ldr	r5, [r4, #0]
 800880a:	f1b8 0f01 	cmp.w	r8, #1
 800880e:	bf0c      	ite	eq
 8008810:	696b      	ldreq	r3, [r5, #20]
 8008812:	69ab      	ldrne	r3, [r5, #24]
 8008814:	ea36 0303 	bics.w	r3, r6, r3
 8008818:	bf14      	ite	ne
 800881a:	2001      	movne	r0, #1
 800881c:	2000      	moveq	r0, #0
 800881e:	b908      	cbnz	r0, 8008824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8008820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008824:	696b      	ldr	r3, [r5, #20]
 8008826:	055a      	lsls	r2, r3, #21
 8008828:	d512      	bpl.n	8008850 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800882a:	682b      	ldr	r3, [r5, #0]
 800882c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008830:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008832:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8008836:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008838:	2304      	movs	r3, #4
 800883a:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 800883c:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 800883e:	2300      	movs	r3, #0
 8008840:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8008842:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8008846:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 800884a:	2001      	movs	r0, #1
 800884c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8008850:	1c7b      	adds	r3, r7, #1
 8008852:	d0d9      	beq.n	8008808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8008854:	b94f      	cbnz	r7, 800886a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008856:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8008858:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800885a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800885c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8008860:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8008864:	2003      	movs	r0, #3
 8008866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800886a:	f7ff fe49 	bl	8008500 <HAL_GetTick>
 800886e:	eba0 0009 	sub.w	r0, r0, r9
 8008872:	4287      	cmp	r7, r0
 8008874:	d2c8      	bcs.n	8008808 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8008876:	e7ee      	b.n	8008856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08008878 <I2C_WaitOnFlagUntilTimeout>:
{
 8008878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800887c:	9e08      	ldr	r6, [sp, #32]
 800887e:	4604      	mov	r4, r0
 8008880:	4690      	mov	r8, r2
 8008882:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8008884:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8008888:	b28d      	uxth	r5, r1
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	f1b9 0f01 	cmp.w	r9, #1
 8008890:	bf0c      	ite	eq
 8008892:	695b      	ldreq	r3, [r3, #20]
 8008894:	699b      	ldrne	r3, [r3, #24]
 8008896:	ea35 0303 	bics.w	r3, r5, r3
 800889a:	bf0c      	ite	eq
 800889c:	2301      	moveq	r3, #1
 800889e:	2300      	movne	r3, #0
 80088a0:	4543      	cmp	r3, r8
 80088a2:	d002      	beq.n	80088aa <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80088a4:	2000      	movs	r0, #0
}
 80088a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80088aa:	1c7b      	adds	r3, r7, #1
 80088ac:	d0ed      	beq.n	800888a <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80088ae:	b95f      	cbnz	r7, 80088c8 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80088b0:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80088b2:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80088b4:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80088b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80088ba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 80088be:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80088c0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80088c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80088c8:	f7ff fe1a 	bl	8008500 <HAL_GetTick>
 80088cc:	1b80      	subs	r0, r0, r6
 80088ce:	4287      	cmp	r7, r0
 80088d0:	d2db      	bcs.n	800888a <I2C_WaitOnFlagUntilTimeout+0x12>
 80088d2:	e7ed      	b.n	80088b0 <I2C_WaitOnFlagUntilTimeout+0x38>

080088d4 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 80088d4:	b570      	push	{r4, r5, r6, lr}
 80088d6:	4604      	mov	r4, r0
 80088d8:	460d      	mov	r5, r1
 80088da:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80088dc:	6823      	ldr	r3, [r4, #0]
 80088de:	695b      	ldr	r3, [r3, #20]
 80088e0:	061b      	lsls	r3, r3, #24
 80088e2:	d501      	bpl.n	80088e8 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 80088e4:	2000      	movs	r0, #0
 80088e6:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80088e8:	4620      	mov	r0, r4
 80088ea:	f7ff ff70 	bl	80087ce <I2C_IsAcknowledgeFailed>
 80088ee:	b9a8      	cbnz	r0, 800891c <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80088f0:	1c6a      	adds	r2, r5, #1
 80088f2:	d0f3      	beq.n	80088dc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80088f4:	b965      	cbnz	r5, 8008910 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80088f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80088f8:	f043 0320 	orr.w	r3, r3, #32
 80088fc:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80088fe:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8008900:	2300      	movs	r3, #0
 8008902:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8008904:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8008908:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 800890c:	2003      	movs	r0, #3
 800890e:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8008910:	f7ff fdf6 	bl	8008500 <HAL_GetTick>
 8008914:	1b80      	subs	r0, r0, r6
 8008916:	4285      	cmp	r5, r0
 8008918:	d2e0      	bcs.n	80088dc <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 800891a:	e7ec      	b.n	80088f6 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800891c:	2001      	movs	r0, #1
}
 800891e:	bd70      	pop	{r4, r5, r6, pc}

08008920 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 8008920:	b570      	push	{r4, r5, r6, lr}
 8008922:	4604      	mov	r4, r0
 8008924:	460d      	mov	r5, r1
 8008926:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	695b      	ldr	r3, [r3, #20]
 800892c:	075b      	lsls	r3, r3, #29
 800892e:	d501      	bpl.n	8008934 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8008930:	2000      	movs	r0, #0
 8008932:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008934:	4620      	mov	r0, r4
 8008936:	f7ff ff4a 	bl	80087ce <I2C_IsAcknowledgeFailed>
 800893a:	b9a8      	cbnz	r0, 8008968 <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800893c:	1c6a      	adds	r2, r5, #1
 800893e:	d0f3      	beq.n	8008928 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8008940:	b965      	cbnz	r5, 800895c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008942:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008944:	f043 0320 	orr.w	r3, r3, #32
 8008948:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 800894a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800894c:	2300      	movs	r3, #0
 800894e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8008950:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8008954:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8008958:	2003      	movs	r0, #3
 800895a:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800895c:	f7ff fdd0 	bl	8008500 <HAL_GetTick>
 8008960:	1b80      	subs	r0, r0, r6
 8008962:	4285      	cmp	r5, r0
 8008964:	d2e0      	bcs.n	8008928 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 8008966:	e7ec      	b.n	8008942 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8008968:	2001      	movs	r0, #1
}
 800896a:	bd70      	pop	{r4, r5, r6, pc}

0800896c <HAL_I2C_Init>:
{
 800896c:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 800896e:	4604      	mov	r4, r0
 8008970:	2800      	cmp	r0, #0
 8008972:	d062      	beq.n	8008a3a <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8008974:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008978:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800897c:	b91b      	cbnz	r3, 8008986 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 800897e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8008982:	f002 f997 	bl	800acb4 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8008986:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8008988:	4e2d      	ldr	r6, [pc, #180]	; (8008a40 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 800898a:	4d2e      	ldr	r5, [pc, #184]	; (8008a44 <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 800898c:	2324      	movs	r3, #36	; 0x24
 800898e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8008992:	6813      	ldr	r3, [r2, #0]
 8008994:	f023 0301 	bic.w	r3, r3, #1
 8008998:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800899a:	f000 fb75 	bl	8009088 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800899e:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 80089a0:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80089a2:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80089a6:	42b3      	cmp	r3, r6
 80089a8:	bf84      	itt	hi
 80089aa:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80089ae:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 80089b0:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80089b2:	bf91      	iteee	ls
 80089b4:	1c69      	addls	r1, r5, #1
 80089b6:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80089ba:	fbb1 f1f5 	udivhi	r1, r1, r5
 80089be:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80089c0:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80089c2:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80089c4:	d821      	bhi.n	8008a0a <HAL_I2C_Init+0x9e>
 80089c6:	005b      	lsls	r3, r3, #1
 80089c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80089cc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80089d0:	2b03      	cmp	r3, #3
 80089d2:	bf98      	it	ls
 80089d4:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80089d6:	6a21      	ldr	r1, [r4, #32]
 80089d8:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80089da:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80089dc:	430b      	orrs	r3, r1
 80089de:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80089e0:	68e1      	ldr	r1, [r4, #12]
 80089e2:	6923      	ldr	r3, [r4, #16]
 80089e4:	430b      	orrs	r3, r1
 80089e6:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 80089e8:	69a1      	ldr	r1, [r4, #24]
 80089ea:	6963      	ldr	r3, [r4, #20]
 80089ec:	430b      	orrs	r3, r1
 80089ee:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80089f0:	6813      	ldr	r3, [r2, #0]
 80089f2:	f043 0301 	orr.w	r3, r3, #1
 80089f6:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089f8:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80089fa:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089fc:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80089fe:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a02:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a04:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8008a08:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8008a0a:	68a1      	ldr	r1, [r4, #8]
 8008a0c:	b949      	cbnz	r1, 8008a22 <HAL_I2C_Init+0xb6>
 8008a0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008a12:	fbb0 f0f3 	udiv	r0, r0, r3
 8008a16:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8008a1a:	b163      	cbz	r3, 8008a36 <HAL_I2C_Init+0xca>
 8008a1c:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8008a20:	e7d9      	b.n	80089d6 <HAL_I2C_Init+0x6a>
 8008a22:	2119      	movs	r1, #25
 8008a24:	434b      	muls	r3, r1
 8008a26:	fbb0 f0f3 	udiv	r0, r0, r3
 8008a2a:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8008a2e:	b113      	cbz	r3, 8008a36 <HAL_I2C_Init+0xca>
 8008a30:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8008a34:	e7cf      	b.n	80089d6 <HAL_I2C_Init+0x6a>
 8008a36:	2001      	movs	r0, #1
 8008a38:	e7cd      	b.n	80089d6 <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8008a3a:	2001      	movs	r0, #1
}
 8008a3c:	bd70      	pop	{r4, r5, r6, pc}
 8008a3e:	bf00      	nop
 8008a40:	000186a0 	.word	0x000186a0
 8008a44:	000f4240 	.word	0x000f4240

08008a48 <HAL_I2C_Master_Transmit>:
{
 8008a48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	461f      	mov	r7, r3
 8008a50:	460d      	mov	r5, r1
 8008a52:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 8008a54:	f7ff fd54 	bl	8008500 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8008a58:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8008a5c:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8008a5e:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8008a60:	d004      	beq.n	8008a6c <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8008a62:	2502      	movs	r5, #2
}
 8008a64:	4628      	mov	r0, r5
 8008a66:	b004      	add	sp, #16
 8008a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008a6c:	9000      	str	r0, [sp, #0]
 8008a6e:	2319      	movs	r3, #25
 8008a70:	2201      	movs	r2, #1
 8008a72:	495d      	ldr	r1, [pc, #372]	; (8008be8 <HAL_I2C_Master_Transmit+0x1a0>)
 8008a74:	4620      	mov	r0, r4
 8008a76:	f7ff feff 	bl	8008878 <I2C_WaitOnFlagUntilTimeout>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d1f1      	bne.n	8008a62 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8008a7e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d0ed      	beq.n	8008a62 <HAL_I2C_Master_Transmit+0x1a>
 8008a86:	2301      	movs	r3, #1
 8008a88:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a8c:	6823      	ldr	r3, [r4, #0]
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8008a92:	bf5e      	ittt	pl
 8008a94:	681a      	ldrpl	r2, [r3, #0]
 8008a96:	f042 0201 	orrpl.w	r2, r2, #1
 8008a9a:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008a9c:	681a      	ldr	r2, [r3, #0]
 8008a9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008aa2:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008aa4:	2221      	movs	r2, #33	; 0x21
 8008aa6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008aaa:	2210      	movs	r2, #16
 8008aac:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ab4:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8008ab8:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008aba:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8008abc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8008abe:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008ac0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8008ac2:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008ac6:	2a04      	cmp	r2, #4
 8008ac8:	d004      	beq.n	8008ad4 <HAL_I2C_Master_Transmit+0x8c>
 8008aca:	2a01      	cmp	r2, #1
 8008acc:	d002      	beq.n	8008ad4 <HAL_I2C_Master_Transmit+0x8c>
 8008ace:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8008ad2:	d104      	bne.n	8008ade <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ada:	601a      	str	r2, [r3, #0]
 8008adc:	e002      	b.n	8008ae4 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008ade:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008ae0:	2a12      	cmp	r2, #18
 8008ae2:	d0f7      	beq.n	8008ad4 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008ae4:	9600      	str	r6, [sp, #0]
 8008ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008aee:	4620      	mov	r0, r4
 8008af0:	f7ff fec2 	bl	8008878 <I2C_WaitOnFlagUntilTimeout>
 8008af4:	bb28      	cbnz	r0, 8008b42 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008af6:	6923      	ldr	r3, [r4, #16]
 8008af8:	6822      	ldr	r2, [r4, #0]
 8008afa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008afe:	d112      	bne.n	8008b26 <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b00:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8008b04:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b06:	4633      	mov	r3, r6
 8008b08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b0a:	4938      	ldr	r1, [pc, #224]	; (8008bec <HAL_I2C_Master_Transmit+0x1a4>)
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f7ff fe73 	bl	80087f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b12:	4605      	mov	r5, r0
 8008b14:	b9a0      	cbnz	r0, 8008b40 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b16:	6823      	ldr	r3, [r4, #0]
 8008b18:	9003      	str	r0, [sp, #12]
 8008b1a:	695a      	ldr	r2, [r3, #20]
 8008b1c:	9203      	str	r2, [sp, #12]
 8008b1e:	699b      	ldr	r3, [r3, #24]
 8008b20:	9303      	str	r3, [sp, #12]
 8008b22:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 8008b24:	e050      	b.n	8008bc8 <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008b26:	11eb      	asrs	r3, r5, #7
 8008b28:	f003 0306 	and.w	r3, r3, #6
 8008b2c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8008b30:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008b32:	492f      	ldr	r1, [pc, #188]	; (8008bf0 <HAL_I2C_Master_Transmit+0x1a8>)
 8008b34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b36:	4633      	mov	r3, r6
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f7ff fe5d 	bl	80087f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b3e:	b148      	cbz	r0, 8008b54 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b40:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b44:	2b04      	cmp	r3, #4
 8008b46:	f04f 0300 	mov.w	r3, #0
 8008b4a:	d107      	bne.n	8008b5c <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 8008b4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8008b50:	2501      	movs	r5, #1
 8008b52:	e787      	b.n	8008a64 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008b54:	6823      	ldr	r3, [r4, #0]
 8008b56:	b2ed      	uxtb	r5, r5
 8008b58:	611d      	str	r5, [r3, #16]
 8008b5a:	e7d4      	b.n	8008b06 <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8008b5c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8008b60:	2503      	movs	r5, #3
 8008b62:	e77f      	b.n	8008a64 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b64:	4632      	mov	r2, r6
 8008b66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f7ff feb3 	bl	80088d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008b6e:	b140      	cbz	r0, 8008b82 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b72:	2b04      	cmp	r3, #4
 8008b74:	d1f4      	bne.n	8008b60 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008b76:	6822      	ldr	r2, [r4, #0]
 8008b78:	6813      	ldr	r3, [r2, #0]
 8008b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b7e:	6013      	str	r3, [r2, #0]
 8008b80:	e7e6      	b.n	8008b50 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8008b82:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008b84:	6820      	ldr	r0, [r4, #0]
      hi2c->XferSize--;
 8008b86:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8008b88:	1c4b      	adds	r3, r1, #1
 8008b8a:	6263      	str	r3, [r4, #36]	; 0x24
 8008b8c:	780b      	ldrb	r3, [r1, #0]
 8008b8e:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8008b90:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008b92:	3b01      	subs	r3, #1
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008b98:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 8008b9a:	1e53      	subs	r3, r2, #1
 8008b9c:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008b9e:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8008ba0:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008ba2:	d50a      	bpl.n	8008bba <HAL_I2C_Master_Transmit+0x172>
 8008ba4:	b14b      	cbz	r3, 8008bba <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8008ba6:	1c8b      	adds	r3, r1, #2
 8008ba8:	6263      	str	r3, [r4, #36]	; 0x24
 8008baa:	784b      	ldrb	r3, [r1, #1]
 8008bac:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8008bae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008bb0:	3b01      	subs	r3, #1
 8008bb2:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8008bb4:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8008bb6:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8008bb8:	8522      	strh	r2, [r4, #40]	; 0x28
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bba:	4632      	mov	r2, r6
 8008bbc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	f7ff feae 	bl	8008920 <I2C_WaitOnBTFFlagUntilTimeout>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d1d3      	bne.n	8008b70 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 8008bc8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1ca      	bne.n	8008b64 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8008bce:	6821      	ldr	r1, [r4, #0]
 8008bd0:	680a      	ldr	r2, [r1, #0]
 8008bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bd6:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008bd8:	2220      	movs	r2, #32
 8008bda:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8008bde:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008be2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8008be6:	e73d      	b.n	8008a64 <HAL_I2C_Master_Transmit+0x1c>
 8008be8:	00100002 	.word	0x00100002
 8008bec:	00010002 	.word	0x00010002
 8008bf0:	00010008 	.word	0x00010008

08008bf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bf4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008bf8:	4604      	mov	r4, r0
 8008bfa:	b918      	cbnz	r0, 8008c04 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8008bfc:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8008bfe:	b002      	add	sp, #8
 8008c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c04:	6803      	ldr	r3, [r0, #0]
 8008c06:	07dd      	lsls	r5, r3, #31
 8008c08:	d410      	bmi.n	8008c2c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c0a:	6823      	ldr	r3, [r4, #0]
 8008c0c:	0798      	lsls	r0, r3, #30
 8008c0e:	d458      	bmi.n	8008cc2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c10:	6823      	ldr	r3, [r4, #0]
 8008c12:	071a      	lsls	r2, r3, #28
 8008c14:	f100 809a 	bmi.w	8008d4c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c18:	6823      	ldr	r3, [r4, #0]
 8008c1a:	075b      	lsls	r3, r3, #29
 8008c1c:	f100 80b8 	bmi.w	8008d90 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c20:	69a2      	ldr	r2, [r4, #24]
 8008c22:	2a00      	cmp	r2, #0
 8008c24:	f040 8119 	bne.w	8008e5a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8008c28:	2000      	movs	r0, #0
 8008c2a:	e7e8      	b.n	8008bfe <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c2c:	4ba6      	ldr	r3, [pc, #664]	; (8008ec8 <HAL_RCC_OscConfig+0x2d4>)
 8008c2e:	689a      	ldr	r2, [r3, #8]
 8008c30:	f002 020c 	and.w	r2, r2, #12
 8008c34:	2a04      	cmp	r2, #4
 8008c36:	d007      	beq.n	8008c48 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c38:	689a      	ldr	r2, [r3, #8]
 8008c3a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008c3e:	2a08      	cmp	r2, #8
 8008c40:	d10a      	bne.n	8008c58 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	0259      	lsls	r1, r3, #9
 8008c46:	d507      	bpl.n	8008c58 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c48:	4b9f      	ldr	r3, [pc, #636]	; (8008ec8 <HAL_RCC_OscConfig+0x2d4>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	039a      	lsls	r2, r3, #14
 8008c4e:	d5dc      	bpl.n	8008c0a <HAL_RCC_OscConfig+0x16>
 8008c50:	6863      	ldr	r3, [r4, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1d9      	bne.n	8008c0a <HAL_RCC_OscConfig+0x16>
 8008c56:	e7d1      	b.n	8008bfc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c58:	6863      	ldr	r3, [r4, #4]
 8008c5a:	4d9b      	ldr	r5, [pc, #620]	; (8008ec8 <HAL_RCC_OscConfig+0x2d4>)
 8008c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c60:	d111      	bne.n	8008c86 <HAL_RCC_OscConfig+0x92>
 8008c62:	682b      	ldr	r3, [r5, #0]
 8008c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c68:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008c6a:	f7ff fc49 	bl	8008500 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c6e:	4d96      	ldr	r5, [pc, #600]	; (8008ec8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8008c70:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c72:	682b      	ldr	r3, [r5, #0]
 8008c74:	039b      	lsls	r3, r3, #14
 8008c76:	d4c8      	bmi.n	8008c0a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c78:	f7ff fc42 	bl	8008500 <HAL_GetTick>
 8008c7c:	1b80      	subs	r0, r0, r6
 8008c7e:	2864      	cmp	r0, #100	; 0x64
 8008c80:	d9f7      	bls.n	8008c72 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8008c82:	2003      	movs	r0, #3
 8008c84:	e7bb      	b.n	8008bfe <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c8a:	d104      	bne.n	8008c96 <HAL_RCC_OscConfig+0xa2>
 8008c8c:	682b      	ldr	r3, [r5, #0]
 8008c8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c92:	602b      	str	r3, [r5, #0]
 8008c94:	e7e5      	b.n	8008c62 <HAL_RCC_OscConfig+0x6e>
 8008c96:	682a      	ldr	r2, [r5, #0]
 8008c98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008c9c:	602a      	str	r2, [r5, #0]
 8008c9e:	682a      	ldr	r2, [r5, #0]
 8008ca0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008ca4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1df      	bne.n	8008c6a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8008caa:	f7ff fc29 	bl	8008500 <HAL_GetTick>
 8008cae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cb0:	682b      	ldr	r3, [r5, #0]
 8008cb2:	039f      	lsls	r7, r3, #14
 8008cb4:	d5a9      	bpl.n	8008c0a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008cb6:	f7ff fc23 	bl	8008500 <HAL_GetTick>
 8008cba:	1b80      	subs	r0, r0, r6
 8008cbc:	2864      	cmp	r0, #100	; 0x64
 8008cbe:	d9f7      	bls.n	8008cb0 <HAL_RCC_OscConfig+0xbc>
 8008cc0:	e7df      	b.n	8008c82 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008cc2:	4b81      	ldr	r3, [pc, #516]	; (8008ec8 <HAL_RCC_OscConfig+0x2d4>)
 8008cc4:	689a      	ldr	r2, [r3, #8]
 8008cc6:	f012 0f0c 	tst.w	r2, #12
 8008cca:	d007      	beq.n	8008cdc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ccc:	689a      	ldr	r2, [r3, #8]
 8008cce:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008cd2:	2a08      	cmp	r2, #8
 8008cd4:	d111      	bne.n	8008cfa <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008cd6:	685b      	ldr	r3, [r3, #4]
 8008cd8:	025e      	lsls	r6, r3, #9
 8008cda:	d40e      	bmi.n	8008cfa <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cdc:	4b7a      	ldr	r3, [pc, #488]	; (8008ec8 <HAL_RCC_OscConfig+0x2d4>)
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	0795      	lsls	r5, r2, #30
 8008ce2:	d502      	bpl.n	8008cea <HAL_RCC_OscConfig+0xf6>
 8008ce4:	68e2      	ldr	r2, [r4, #12]
 8008ce6:	2a01      	cmp	r2, #1
 8008ce8:	d188      	bne.n	8008bfc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	6921      	ldr	r1, [r4, #16]
 8008cee:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8008cf2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8008cf6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cf8:	e78a      	b.n	8008c10 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008cfa:	68e2      	ldr	r2, [r4, #12]
 8008cfc:	4b73      	ldr	r3, [pc, #460]	; (8008ecc <HAL_RCC_OscConfig+0x2d8>)
 8008cfe:	b1b2      	cbz	r2, 8008d2e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8008d00:	2201      	movs	r2, #1
 8008d02:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008d04:	f7ff fbfc 	bl	8008500 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d08:	4d6f      	ldr	r5, [pc, #444]	; (8008ec8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8008d0a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d0c:	682b      	ldr	r3, [r5, #0]
 8008d0e:	0798      	lsls	r0, r3, #30
 8008d10:	d507      	bpl.n	8008d22 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d12:	682b      	ldr	r3, [r5, #0]
 8008d14:	6922      	ldr	r2, [r4, #16]
 8008d16:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008d1a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8008d1e:	602b      	str	r3, [r5, #0]
 8008d20:	e776      	b.n	8008c10 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d22:	f7ff fbed 	bl	8008500 <HAL_GetTick>
 8008d26:	1b80      	subs	r0, r0, r6
 8008d28:	2802      	cmp	r0, #2
 8008d2a:	d9ef      	bls.n	8008d0c <HAL_RCC_OscConfig+0x118>
 8008d2c:	e7a9      	b.n	8008c82 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8008d2e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8008d30:	f7ff fbe6 	bl	8008500 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d34:	4d64      	ldr	r5, [pc, #400]	; (8008ec8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8008d36:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d38:	682b      	ldr	r3, [r5, #0]
 8008d3a:	0799      	lsls	r1, r3, #30
 8008d3c:	f57f af68 	bpl.w	8008c10 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d40:	f7ff fbde 	bl	8008500 <HAL_GetTick>
 8008d44:	1b80      	subs	r0, r0, r6
 8008d46:	2802      	cmp	r0, #2
 8008d48:	d9f6      	bls.n	8008d38 <HAL_RCC_OscConfig+0x144>
 8008d4a:	e79a      	b.n	8008c82 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d4c:	6962      	ldr	r2, [r4, #20]
 8008d4e:	4b60      	ldr	r3, [pc, #384]	; (8008ed0 <HAL_RCC_OscConfig+0x2dc>)
 8008d50:	b17a      	cbz	r2, 8008d72 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8008d52:	2201      	movs	r2, #1
 8008d54:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008d56:	f7ff fbd3 	bl	8008500 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d5a:	4d5b      	ldr	r5, [pc, #364]	; (8008ec8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8008d5c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d5e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008d60:	079f      	lsls	r7, r3, #30
 8008d62:	f53f af59 	bmi.w	8008c18 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d66:	f7ff fbcb 	bl	8008500 <HAL_GetTick>
 8008d6a:	1b80      	subs	r0, r0, r6
 8008d6c:	2802      	cmp	r0, #2
 8008d6e:	d9f6      	bls.n	8008d5e <HAL_RCC_OscConfig+0x16a>
 8008d70:	e787      	b.n	8008c82 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8008d72:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8008d74:	f7ff fbc4 	bl	8008500 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d78:	4d53      	ldr	r5, [pc, #332]	; (8008ec8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8008d7a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d7c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8008d7e:	0798      	lsls	r0, r3, #30
 8008d80:	f57f af4a 	bpl.w	8008c18 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d84:	f7ff fbbc 	bl	8008500 <HAL_GetTick>
 8008d88:	1b80      	subs	r0, r0, r6
 8008d8a:	2802      	cmp	r0, #2
 8008d8c:	d9f6      	bls.n	8008d7c <HAL_RCC_OscConfig+0x188>
 8008d8e:	e778      	b.n	8008c82 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008d90:	4b4d      	ldr	r3, [pc, #308]	; (8008ec8 <HAL_RCC_OscConfig+0x2d4>)
 8008d92:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d94:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8008d98:	d128      	bne.n	8008dec <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8008d9a:	9201      	str	r2, [sp, #4]
 8008d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008da2:	641a      	str	r2, [r3, #64]	; 0x40
 8008da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008daa:	9301      	str	r3, [sp, #4]
 8008dac:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008dae:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008db0:	4d48      	ldr	r5, [pc, #288]	; (8008ed4 <HAL_RCC_OscConfig+0x2e0>)
 8008db2:	682b      	ldr	r3, [r5, #0]
 8008db4:	05d9      	lsls	r1, r3, #23
 8008db6:	d51b      	bpl.n	8008df0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008db8:	68a3      	ldr	r3, [r4, #8]
 8008dba:	4d43      	ldr	r5, [pc, #268]	; (8008ec8 <HAL_RCC_OscConfig+0x2d4>)
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d127      	bne.n	8008e10 <HAL_RCC_OscConfig+0x21c>
 8008dc0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008dc2:	f043 0301 	orr.w	r3, r3, #1
 8008dc6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8008dc8:	f7ff fb9a 	bl	8008500 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dcc:	4d3e      	ldr	r5, [pc, #248]	; (8008ec8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8008dce:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008dd0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dd4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008dd6:	079b      	lsls	r3, r3, #30
 8008dd8:	d539      	bpl.n	8008e4e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8008dda:	2e00      	cmp	r6, #0
 8008ddc:	f43f af20 	beq.w	8008c20 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008de0:	4a39      	ldr	r2, [pc, #228]	; (8008ec8 <HAL_RCC_OscConfig+0x2d4>)
 8008de2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008de8:	6413      	str	r3, [r2, #64]	; 0x40
 8008dea:	e719      	b.n	8008c20 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8008dec:	2600      	movs	r6, #0
 8008dee:	e7df      	b.n	8008db0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008df0:	682b      	ldr	r3, [r5, #0]
 8008df2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008df6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8008df8:	f7ff fb82 	bl	8008500 <HAL_GetTick>
 8008dfc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dfe:	682b      	ldr	r3, [r5, #0]
 8008e00:	05da      	lsls	r2, r3, #23
 8008e02:	d4d9      	bmi.n	8008db8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e04:	f7ff fb7c 	bl	8008500 <HAL_GetTick>
 8008e08:	1bc0      	subs	r0, r0, r7
 8008e0a:	2802      	cmp	r0, #2
 8008e0c:	d9f7      	bls.n	8008dfe <HAL_RCC_OscConfig+0x20a>
 8008e0e:	e738      	b.n	8008c82 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e10:	2b05      	cmp	r3, #5
 8008e12:	d104      	bne.n	8008e1e <HAL_RCC_OscConfig+0x22a>
 8008e14:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008e16:	f043 0304 	orr.w	r3, r3, #4
 8008e1a:	672b      	str	r3, [r5, #112]	; 0x70
 8008e1c:	e7d0      	b.n	8008dc0 <HAL_RCC_OscConfig+0x1cc>
 8008e1e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8008e20:	f022 0201 	bic.w	r2, r2, #1
 8008e24:	672a      	str	r2, [r5, #112]	; 0x70
 8008e26:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8008e28:	f022 0204 	bic.w	r2, r2, #4
 8008e2c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1ca      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8008e32:	f7ff fb65 	bl	8008500 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e36:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8008e3a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008e3c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8008e3e:	0798      	lsls	r0, r3, #30
 8008e40:	d5cb      	bpl.n	8008dda <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e42:	f7ff fb5d 	bl	8008500 <HAL_GetTick>
 8008e46:	1bc0      	subs	r0, r0, r7
 8008e48:	4540      	cmp	r0, r8
 8008e4a:	d9f7      	bls.n	8008e3c <HAL_RCC_OscConfig+0x248>
 8008e4c:	e719      	b.n	8008c82 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e4e:	f7ff fb57 	bl	8008500 <HAL_GetTick>
 8008e52:	1bc0      	subs	r0, r0, r7
 8008e54:	4540      	cmp	r0, r8
 8008e56:	d9bd      	bls.n	8008dd4 <HAL_RCC_OscConfig+0x1e0>
 8008e58:	e713      	b.n	8008c82 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008e5a:	4d1b      	ldr	r5, [pc, #108]	; (8008ec8 <HAL_RCC_OscConfig+0x2d4>)
 8008e5c:	68ab      	ldr	r3, [r5, #8]
 8008e5e:	f003 030c 	and.w	r3, r3, #12
 8008e62:	2b08      	cmp	r3, #8
 8008e64:	f43f aeca 	beq.w	8008bfc <HAL_RCC_OscConfig+0x8>
 8008e68:	4e1b      	ldr	r6, [pc, #108]	; (8008ed8 <HAL_RCC_OscConfig+0x2e4>)
 8008e6a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e6c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8008e6e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e70:	d134      	bne.n	8008edc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8008e72:	f7ff fb45 	bl	8008500 <HAL_GetTick>
 8008e76:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008e78:	682b      	ldr	r3, [r5, #0]
 8008e7a:	0199      	lsls	r1, r3, #6
 8008e7c:	d41e      	bmi.n	8008ebc <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008e7e:	6a22      	ldr	r2, [r4, #32]
 8008e80:	69e3      	ldr	r3, [r4, #28]
 8008e82:	4313      	orrs	r3, r2
 8008e84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008e86:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8008e8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8008e8c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008e90:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e92:	4c0d      	ldr	r4, [pc, #52]	; (8008ec8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008e94:	0852      	lsrs	r2, r2, #1
 8008e96:	3a01      	subs	r2, #1
 8008e98:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008e9c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8008ea2:	f7ff fb2d 	bl	8008500 <HAL_GetTick>
 8008ea6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	019a      	lsls	r2, r3, #6
 8008eac:	f53f aebc 	bmi.w	8008c28 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008eb0:	f7ff fb26 	bl	8008500 <HAL_GetTick>
 8008eb4:	1b40      	subs	r0, r0, r5
 8008eb6:	2802      	cmp	r0, #2
 8008eb8:	d9f6      	bls.n	8008ea8 <HAL_RCC_OscConfig+0x2b4>
 8008eba:	e6e2      	b.n	8008c82 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ebc:	f7ff fb20 	bl	8008500 <HAL_GetTick>
 8008ec0:	1bc0      	subs	r0, r0, r7
 8008ec2:	2802      	cmp	r0, #2
 8008ec4:	d9d8      	bls.n	8008e78 <HAL_RCC_OscConfig+0x284>
 8008ec6:	e6dc      	b.n	8008c82 <HAL_RCC_OscConfig+0x8e>
 8008ec8:	40023800 	.word	0x40023800
 8008ecc:	42470000 	.word	0x42470000
 8008ed0:	42470e80 	.word	0x42470e80
 8008ed4:	40007000 	.word	0x40007000
 8008ed8:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8008edc:	f7ff fb10 	bl	8008500 <HAL_GetTick>
 8008ee0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ee2:	682b      	ldr	r3, [r5, #0]
 8008ee4:	019b      	lsls	r3, r3, #6
 8008ee6:	f57f ae9f 	bpl.w	8008c28 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008eea:	f7ff fb09 	bl	8008500 <HAL_GetTick>
 8008eee:	1b00      	subs	r0, r0, r4
 8008ef0:	2802      	cmp	r0, #2
 8008ef2:	d9f6      	bls.n	8008ee2 <HAL_RCC_OscConfig+0x2ee>
 8008ef4:	e6c5      	b.n	8008c82 <HAL_RCC_OscConfig+0x8e>
 8008ef6:	bf00      	nop

08008ef8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008ef8:	4913      	ldr	r1, [pc, #76]	; (8008f48 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8008efa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008efc:	688b      	ldr	r3, [r1, #8]
 8008efe:	f003 030c 	and.w	r3, r3, #12
 8008f02:	2b04      	cmp	r3, #4
 8008f04:	d003      	beq.n	8008f0e <HAL_RCC_GetSysClockFreq+0x16>
 8008f06:	2b08      	cmp	r3, #8
 8008f08:	d003      	beq.n	8008f12 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008f0a:	4810      	ldr	r0, [pc, #64]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8008f0c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8008f0e:	4810      	ldr	r0, [pc, #64]	; (8008f50 <HAL_RCC_GetSysClockFreq+0x58>)
 8008f10:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008f12:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008f14:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f16:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008f18:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f1c:	bf14      	ite	ne
 8008f1e:	480c      	ldrne	r0, [pc, #48]	; (8008f50 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f20:	480a      	ldreq	r0, [pc, #40]	; (8008f4c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f22:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8008f26:	bf18      	it	ne
 8008f28:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008f2a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008f2e:	fba1 0100 	umull	r0, r1, r1, r0
 8008f32:	f7fe f997 	bl	8007264 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008f36:	4b04      	ldr	r3, [pc, #16]	; (8008f48 <HAL_RCC_GetSysClockFreq+0x50>)
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8008f3e:	3301      	adds	r3, #1
 8008f40:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8008f42:	fbb0 f0f3 	udiv	r0, r0, r3
 8008f46:	bd08      	pop	{r3, pc}
 8008f48:	40023800 	.word	0x40023800
 8008f4c:	00f42400 	.word	0x00f42400
 8008f50:	017d7840 	.word	0x017d7840

08008f54 <HAL_RCC_ClockConfig>:
{
 8008f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f58:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8008f5a:	4604      	mov	r4, r0
 8008f5c:	b910      	cbnz	r0, 8008f64 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8008f5e:	2001      	movs	r0, #1
 8008f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008f64:	4b44      	ldr	r3, [pc, #272]	; (8009078 <HAL_RCC_ClockConfig+0x124>)
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	f002 020f 	and.w	r2, r2, #15
 8008f6c:	428a      	cmp	r2, r1
 8008f6e:	d328      	bcc.n	8008fc2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f70:	6821      	ldr	r1, [r4, #0]
 8008f72:	078f      	lsls	r7, r1, #30
 8008f74:	d42d      	bmi.n	8008fd2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f76:	07c8      	lsls	r0, r1, #31
 8008f78:	d440      	bmi.n	8008ffc <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008f7a:	4b3f      	ldr	r3, [pc, #252]	; (8009078 <HAL_RCC_ClockConfig+0x124>)
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	f002 020f 	and.w	r2, r2, #15
 8008f82:	4295      	cmp	r5, r2
 8008f84:	d366      	bcc.n	8009054 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f86:	6822      	ldr	r2, [r4, #0]
 8008f88:	0751      	lsls	r1, r2, #29
 8008f8a:	d46c      	bmi.n	8009066 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f8c:	0713      	lsls	r3, r2, #28
 8008f8e:	d507      	bpl.n	8008fa0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008f90:	4a3a      	ldr	r2, [pc, #232]	; (800907c <HAL_RCC_ClockConfig+0x128>)
 8008f92:	6921      	ldr	r1, [r4, #16]
 8008f94:	6893      	ldr	r3, [r2, #8]
 8008f96:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8008f9a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008f9e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008fa0:	f7ff ffaa 	bl	8008ef8 <HAL_RCC_GetSysClockFreq>
 8008fa4:	4b35      	ldr	r3, [pc, #212]	; (800907c <HAL_RCC_ClockConfig+0x128>)
 8008fa6:	4a36      	ldr	r2, [pc, #216]	; (8009080 <HAL_RCC_ClockConfig+0x12c>)
 8008fa8:	689b      	ldr	r3, [r3, #8]
 8008faa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8008fae:	5cd3      	ldrb	r3, [r2, r3]
 8008fb0:	40d8      	lsrs	r0, r3
 8008fb2:	4b34      	ldr	r3, [pc, #208]	; (8009084 <HAL_RCC_ClockConfig+0x130>)
 8008fb4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	f7ff fa58 	bl	800846c <HAL_InitTick>
  return HAL_OK;
 8008fbc:	2000      	movs	r0, #0
 8008fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008fc2:	b2ca      	uxtb	r2, r1
 8008fc4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 030f 	and.w	r3, r3, #15
 8008fcc:	4299      	cmp	r1, r3
 8008fce:	d1c6      	bne.n	8008f5e <HAL_RCC_ClockConfig+0xa>
 8008fd0:	e7ce      	b.n	8008f70 <HAL_RCC_ClockConfig+0x1c>
 8008fd2:	4b2a      	ldr	r3, [pc, #168]	; (800907c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fd4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008fd8:	bf1e      	ittt	ne
 8008fda:	689a      	ldrne	r2, [r3, #8]
 8008fdc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8008fe0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fe2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008fe4:	bf42      	ittt	mi
 8008fe6:	689a      	ldrmi	r2, [r3, #8]
 8008fe8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8008fec:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008fee:	689a      	ldr	r2, [r3, #8]
 8008ff0:	68a0      	ldr	r0, [r4, #8]
 8008ff2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8008ff6:	4302      	orrs	r2, r0
 8008ff8:	609a      	str	r2, [r3, #8]
 8008ffa:	e7bc      	b.n	8008f76 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ffc:	6862      	ldr	r2, [r4, #4]
 8008ffe:	4b1f      	ldr	r3, [pc, #124]	; (800907c <HAL_RCC_ClockConfig+0x128>)
 8009000:	2a01      	cmp	r2, #1
 8009002:	d11d      	bne.n	8009040 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800900a:	d0a8      	beq.n	8008f5e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800900c:	4e1b      	ldr	r6, [pc, #108]	; (800907c <HAL_RCC_ClockConfig+0x128>)
 800900e:	68b3      	ldr	r3, [r6, #8]
 8009010:	f023 0303 	bic.w	r3, r3, #3
 8009014:	4313      	orrs	r3, r2
 8009016:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8009018:	f7ff fa72 	bl	8008500 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800901c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8009020:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009022:	68b3      	ldr	r3, [r6, #8]
 8009024:	6862      	ldr	r2, [r4, #4]
 8009026:	f003 030c 	and.w	r3, r3, #12
 800902a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800902e:	d0a4      	beq.n	8008f7a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009030:	f7ff fa66 	bl	8008500 <HAL_GetTick>
 8009034:	1bc0      	subs	r0, r0, r7
 8009036:	4540      	cmp	r0, r8
 8009038:	d9f3      	bls.n	8009022 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800903a:	2003      	movs	r0, #3
}
 800903c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009040:	1e91      	subs	r1, r2, #2
 8009042:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009044:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009046:	d802      	bhi.n	800904e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009048:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800904c:	e7dd      	b.n	800900a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800904e:	f013 0f02 	tst.w	r3, #2
 8009052:	e7da      	b.n	800900a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009054:	b2ea      	uxtb	r2, r5
 8009056:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 030f 	and.w	r3, r3, #15
 800905e:	429d      	cmp	r5, r3
 8009060:	f47f af7d 	bne.w	8008f5e <HAL_RCC_ClockConfig+0xa>
 8009064:	e78f      	b.n	8008f86 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009066:	4905      	ldr	r1, [pc, #20]	; (800907c <HAL_RCC_ClockConfig+0x128>)
 8009068:	68e0      	ldr	r0, [r4, #12]
 800906a:	688b      	ldr	r3, [r1, #8]
 800906c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009070:	4303      	orrs	r3, r0
 8009072:	608b      	str	r3, [r1, #8]
 8009074:	e78a      	b.n	8008f8c <HAL_RCC_ClockConfig+0x38>
 8009076:	bf00      	nop
 8009078:	40023c00 	.word	0x40023c00
 800907c:	40023800 	.word	0x40023800
 8009080:	08017e7c 	.word	0x08017e7c
 8009084:	2000000c 	.word	0x2000000c

08009088 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009088:	4b04      	ldr	r3, [pc, #16]	; (800909c <HAL_RCC_GetPCLK1Freq+0x14>)
 800908a:	4a05      	ldr	r2, [pc, #20]	; (80090a0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800908c:	689b      	ldr	r3, [r3, #8]
 800908e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8009092:	5cd3      	ldrb	r3, [r2, r3]
 8009094:	4a03      	ldr	r2, [pc, #12]	; (80090a4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009096:	6810      	ldr	r0, [r2, #0]
}
 8009098:	40d8      	lsrs	r0, r3
 800909a:	4770      	bx	lr
 800909c:	40023800 	.word	0x40023800
 80090a0:	08017e8c 	.word	0x08017e8c
 80090a4:	2000000c 	.word	0x2000000c

080090a8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80090a8:	4b04      	ldr	r3, [pc, #16]	; (80090bc <HAL_RCC_GetPCLK2Freq+0x14>)
 80090aa:	4a05      	ldr	r2, [pc, #20]	; (80090c0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80090b2:	5cd3      	ldrb	r3, [r2, r3]
 80090b4:	4a03      	ldr	r2, [pc, #12]	; (80090c4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80090b6:	6810      	ldr	r0, [r2, #0]
}
 80090b8:	40d8      	lsrs	r0, r3
 80090ba:	4770      	bx	lr
 80090bc:	40023800 	.word	0x40023800
 80090c0:	08017e8c 	.word	0x08017e8c
 80090c4:	2000000c 	.word	0x2000000c

080090c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80090c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090cc:	9e06      	ldr	r6, [sp, #24]
 80090ce:	4604      	mov	r4, r0
 80090d0:	4688      	mov	r8, r1
 80090d2:	4617      	mov	r7, r2
 80090d4:	461d      	mov	r5, r3
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80090d6:	6822      	ldr	r2, [r4, #0]
 80090d8:	6893      	ldr	r3, [r2, #8]
 80090da:	ea38 0303 	bics.w	r3, r8, r3
 80090de:	bf0c      	ite	eq
 80090e0:	2301      	moveq	r3, #1
 80090e2:	2300      	movne	r3, #0
 80090e4:	429f      	cmp	r7, r3
 80090e6:	d102      	bne.n	80090ee <SPI_WaitFlagStateUntilTimeout+0x26>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80090e8:	2000      	movs	r0, #0
}
 80090ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80090ee:	1c6b      	adds	r3, r5, #1
 80090f0:	d0f2      	beq.n	80090d8 <SPI_WaitFlagStateUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80090f2:	bb55      	cbnz	r5, 800914a <SPI_WaitFlagStateUntilTimeout+0x82>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80090f4:	6823      	ldr	r3, [r4, #0]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80090fc:	605a      	str	r2, [r3, #4]
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80090fe:	6862      	ldr	r2, [r4, #4]
 8009100:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8009104:	d10a      	bne.n	800911c <SPI_WaitFlagStateUntilTimeout+0x54>
 8009106:	68a2      	ldr	r2, [r4, #8]
 8009108:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800910c:	d002      	beq.n	8009114 <SPI_WaitFlagStateUntilTimeout+0x4c>
 800910e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8009112:	d103      	bne.n	800911c <SPI_WaitFlagStateUntilTimeout+0x54>
          __HAL_SPI_DISABLE(hspi);
 8009114:	681a      	ldr	r2, [r3, #0]
 8009116:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800911a:	601a      	str	r2, [r3, #0]
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800911c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800911e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8009122:	d109      	bne.n	8009138 <SPI_WaitFlagStateUntilTimeout+0x70>
          SPI_RESET_CRC(hspi);
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800912a:	0412      	lsls	r2, r2, #16
 800912c:	0c12      	lsrs	r2, r2, #16
 800912e:	601a      	str	r2, [r3, #0]
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009136:	601a      	str	r2, [r3, #0]
        hspi->State= HAL_SPI_STATE_READY;
 8009138:	2301      	movs	r3, #1
 800913a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 800913e:	2300      	movs	r3, #0
 8009140:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8009144:	2003      	movs	r0, #3
 8009146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 800914a:	f7ff f9d9 	bl	8008500 <HAL_GetTick>
 800914e:	1b80      	subs	r0, r0, r6
 8009150:	4285      	cmp	r5, r0
 8009152:	d8c0      	bhi.n	80090d6 <SPI_WaitFlagStateUntilTimeout+0xe>
 8009154:	e7ce      	b.n	80090f4 <SPI_WaitFlagStateUntilTimeout+0x2c>

08009156 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009156:	b513      	push	{r0, r1, r4, lr}
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009158:	460b      	mov	r3, r1
 800915a:	9200      	str	r2, [sp, #0]
 800915c:	2180      	movs	r1, #128	; 0x80
 800915e:	2200      	movs	r2, #0
{
 8009160:	4604      	mov	r4, r0
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009162:	f7ff ffb1 	bl	80090c8 <SPI_WaitFlagStateUntilTimeout>
 8009166:	b120      	cbz	r0, 8009172 <SPI_CheckFlag_BSY+0x1c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009168:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800916a:	f043 0320 	orr.w	r3, r3, #32
 800916e:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8009170:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8009172:	b002      	add	sp, #8
 8009174:	bd10      	pop	{r4, pc}

08009176 <HAL_SPI_Init>:
{
 8009176:	b510      	push	{r4, lr}
  if(hspi == NULL)
 8009178:	4604      	mov	r4, r0
 800917a:	2800      	cmp	r0, #0
 800917c:	d036      	beq.n	80091ec <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800917e:	2300      	movs	r3, #0
 8009180:	6283      	str	r3, [r0, #40]	; 0x28
  if(hspi->State == HAL_SPI_STATE_RESET)
 8009182:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8009186:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800918a:	b91b      	cbnz	r3, 8009194 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 800918c:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8009190:	f001 fdc8 	bl	800ad24 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8009194:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8009196:	68a0      	ldr	r0, [r4, #8]
 8009198:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 800919a:	2302      	movs	r3, #2
 800919c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 80091a0:	680b      	ldr	r3, [r1, #0]
 80091a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091a6:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80091a8:	6863      	ldr	r3, [r4, #4]
 80091aa:	4303      	orrs	r3, r0
 80091ac:	68e0      	ldr	r0, [r4, #12]
 80091ae:	4303      	orrs	r3, r0
 80091b0:	6920      	ldr	r0, [r4, #16]
 80091b2:	4303      	orrs	r3, r0
 80091b4:	6960      	ldr	r0, [r4, #20]
 80091b6:	4303      	orrs	r3, r0
 80091b8:	69e0      	ldr	r0, [r4, #28]
 80091ba:	4303      	orrs	r3, r0
 80091bc:	6a20      	ldr	r0, [r4, #32]
 80091be:	4303      	orrs	r3, r0
 80091c0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80091c2:	4303      	orrs	r3, r0
 80091c4:	f402 7000 	and.w	r0, r2, #512	; 0x200
 80091c8:	4303      	orrs	r3, r0
 80091ca:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80091cc:	0c12      	lsrs	r2, r2, #16
 80091ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091d0:	f002 0204 	and.w	r2, r2, #4
 80091d4:	431a      	orrs	r2, r3
 80091d6:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80091d8:	69cb      	ldr	r3, [r1, #28]
 80091da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80091de:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091e0:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80091e2:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80091e4:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80091e6:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 80091ea:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80091ec:	2001      	movs	r0, #1
}
 80091ee:	bd10      	pop	{r4, pc}

080091f0 <HAL_SPI_TransmitReceive>:
{
 80091f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091f4:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 80091f6:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80091fa:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 80091fc:	2b01      	cmp	r3, #1
{
 80091fe:	4604      	mov	r4, r0
 8009200:	460d      	mov	r5, r1
 8009202:	4616      	mov	r6, r2
 8009204:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 8009206:	f000 80ed 	beq.w	80093e4 <HAL_SPI_TransmitReceive+0x1f4>
 800920a:	2301      	movs	r3, #1
 800920c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8009210:	f7ff f976 	bl	8008500 <HAL_GetTick>
  tmp  = hspi->State;
 8009214:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp1 = hspi->Init.Mode;
 8009218:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 800921a:	b2db      	uxtb	r3, r3
  if(!((tmp == HAL_SPI_STATE_READY) || \
 800921c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800921e:	4680      	mov	r8, r0
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8009220:	d00a      	beq.n	8009238 <HAL_SPI_TransmitReceive+0x48>
 8009222:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8009226:	f040 80db 	bne.w	80093e0 <HAL_SPI_TransmitReceive+0x1f0>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 800922a:	68a2      	ldr	r2, [r4, #8]
 800922c:	2a00      	cmp	r2, #0
 800922e:	f040 80d7 	bne.w	80093e0 <HAL_SPI_TransmitReceive+0x1f0>
 8009232:	2b04      	cmp	r3, #4
 8009234:	f040 80d4 	bne.w	80093e0 <HAL_SPI_TransmitReceive+0x1f0>
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8009238:	2d00      	cmp	r5, #0
 800923a:	d04e      	beq.n	80092da <HAL_SPI_TransmitReceive+0xea>
 800923c:	2e00      	cmp	r6, #0
 800923e:	d04c      	beq.n	80092da <HAL_SPI_TransmitReceive+0xea>
 8009240:	f1b9 0f00 	cmp.w	r9, #0
 8009244:	d049      	beq.n	80092da <HAL_SPI_TransmitReceive+0xea>
  if(hspi->State == HAL_SPI_STATE_READY)
 8009246:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800924a:	63a6      	str	r6, [r4, #56]	; 0x38
  if(hspi->State == HAL_SPI_STATE_READY)
 800924c:	2b01      	cmp	r3, #1
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800924e:	bf04      	itt	eq
 8009250:	2305      	moveq	r3, #5
 8009252:	f884 3051 	strbeq.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009256:	2300      	movs	r3, #0
 8009258:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 800925a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800925c:	6463      	str	r3, [r4, #68]	; 0x44
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800925e:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8009260:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8009264:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8009268:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 800926a:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800926e:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8009270:	bf58      	it	pl
 8009272:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009274:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8009276:	bf58      	it	pl
 8009278:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 800927c:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8009280:	bf58      	it	pl
 8009282:	601a      	strpl	r2, [r3, #0]
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009284:	68e2      	ldr	r2, [r4, #12]
 8009286:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800928a:	d15d      	bne.n	8009348 <HAL_SPI_TransmitReceive+0x158>
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800928c:	b119      	cbz	r1, 8009296 <HAL_SPI_TransmitReceive+0xa6>
 800928e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8009290:	b292      	uxth	r2, r2
 8009292:	2a01      	cmp	r2, #1
 8009294:	d106      	bne.n	80092a4 <HAL_SPI_TransmitReceive+0xb4>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8009296:	f835 2b02 	ldrh.w	r2, [r5], #2
 800929a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800929c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800929e:	3b01      	subs	r3, #1
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80092a4:	f04f 0901 	mov.w	r9, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80092a8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	b9bb      	cbnz	r3, 80092de <HAL_SPI_TransmitReceive+0xee>
 80092ae:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80092b0:	b29b      	uxth	r3, r3
 80092b2:	b9a3      	cbnz	r3, 80092de <HAL_SPI_TransmitReceive+0xee>
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80092b4:	f8cd 8000 	str.w	r8, [sp]
 80092b8:	463b      	mov	r3, r7
 80092ba:	2201      	movs	r2, #1
 80092bc:	2102      	movs	r1, #2
 80092be:	4620      	mov	r0, r4
 80092c0:	f7ff ff02 	bl	80090c8 <SPI_WaitFlagStateUntilTimeout>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	d135      	bne.n	8009334 <HAL_SPI_TransmitReceive+0x144>
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 80092c8:	4642      	mov	r2, r8
 80092ca:	4639      	mov	r1, r7
 80092cc:	4620      	mov	r0, r4
 80092ce:	f7ff ff42 	bl	8009156 <SPI_CheckFlag_BSY>
 80092d2:	2800      	cmp	r0, #0
 80092d4:	d079      	beq.n	80093ca <HAL_SPI_TransmitReceive+0x1da>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80092d6:	2320      	movs	r3, #32
 80092d8:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80092da:	2001      	movs	r0, #1
 80092dc:	e02b      	b.n	8009336 <HAL_SPI_TransmitReceive+0x146>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 80092de:	f1b9 0f00 	cmp.w	r9, #0
 80092e2:	d00f      	beq.n	8009304 <HAL_SPI_TransmitReceive+0x114>
 80092e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80092e6:	b29b      	uxth	r3, r3
 80092e8:	b163      	cbz	r3, 8009304 <HAL_SPI_TransmitReceive+0x114>
 80092ea:	6823      	ldr	r3, [r4, #0]
 80092ec:	689a      	ldr	r2, [r3, #8]
 80092ee:	0791      	lsls	r1, r2, #30
 80092f0:	d508      	bpl.n	8009304 <HAL_SPI_TransmitReceive+0x114>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 80092f2:	f835 2b02 	ldrh.w	r2, [r5], #2
 80092f6:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 80092f8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80092fa:	3b01      	subs	r3, #1
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8009300:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8009304:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8009306:	b29b      	uxth	r3, r3
 8009308:	b163      	cbz	r3, 8009324 <HAL_SPI_TransmitReceive+0x134>
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	689a      	ldr	r2, [r3, #8]
 800930e:	07d2      	lsls	r2, r2, #31
 8009310:	d508      	bpl.n	8009324 <HAL_SPI_TransmitReceive+0x134>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8009312:	68db      	ldr	r3, [r3, #12]
 8009314:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8009318:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800931a:	3b01      	subs	r3, #1
 800931c:	b29b      	uxth	r3, r3
 800931e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8009320:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 8009324:	1c78      	adds	r0, r7, #1
 8009326:	d0bf      	beq.n	80092a8 <HAL_SPI_TransmitReceive+0xb8>
 8009328:	f7ff f8ea 	bl	8008500 <HAL_GetTick>
 800932c:	eba0 0008 	sub.w	r0, r0, r8
 8009330:	4287      	cmp	r7, r0
 8009332:	d8b9      	bhi.n	80092a8 <HAL_SPI_TransmitReceive+0xb8>
        errorcode = HAL_TIMEOUT;
 8009334:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8009336:	2301      	movs	r3, #1
 8009338:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800933c:	2300      	movs	r3, #0
 800933e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8009342:	b005      	add	sp, #20
 8009344:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8009348:	b119      	cbz	r1, 8009352 <HAL_SPI_TransmitReceive+0x162>
 800934a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800934c:	b292      	uxth	r2, r2
 800934e:	2a01      	cmp	r2, #1
 8009350:	d106      	bne.n	8009360 <HAL_SPI_TransmitReceive+0x170>
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8009352:	f815 2b01 	ldrb.w	r2, [r5], #1
 8009356:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8009358:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800935a:	3b01      	subs	r3, #1
 800935c:	b29b      	uxth	r3, r3
 800935e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8009360:	f04f 0901 	mov.w	r9, #1
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009364:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8009366:	b29b      	uxth	r3, r3
 8009368:	b91b      	cbnz	r3, 8009372 <HAL_SPI_TransmitReceive+0x182>
 800936a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800936c:	b29b      	uxth	r3, r3
 800936e:	2b00      	cmp	r3, #0
 8009370:	d0a0      	beq.n	80092b4 <HAL_SPI_TransmitReceive+0xc4>
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8009372:	f1b9 0f00 	cmp.w	r9, #0
 8009376:	d00f      	beq.n	8009398 <HAL_SPI_TransmitReceive+0x1a8>
 8009378:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800937a:	b29b      	uxth	r3, r3
 800937c:	b163      	cbz	r3, 8009398 <HAL_SPI_TransmitReceive+0x1a8>
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	689a      	ldr	r2, [r3, #8]
 8009382:	0791      	lsls	r1, r2, #30
 8009384:	d508      	bpl.n	8009398 <HAL_SPI_TransmitReceive+0x1a8>
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8009386:	782a      	ldrb	r2, [r5, #0]
 8009388:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800938a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800938c:	3b01      	subs	r3, #1
 800938e:	b29b      	uxth	r3, r3
 8009390:	86e3      	strh	r3, [r4, #54]	; 0x36
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8009392:	3501      	adds	r5, #1
        txallowed = 0U;
 8009394:	f04f 0900 	mov.w	r9, #0
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8009398:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800939a:	b29b      	uxth	r3, r3
 800939c:	b163      	cbz	r3, 80093b8 <HAL_SPI_TransmitReceive+0x1c8>
 800939e:	6823      	ldr	r3, [r4, #0]
 80093a0:	689a      	ldr	r2, [r3, #8]
 80093a2:	07d2      	lsls	r2, r2, #31
 80093a4:	d508      	bpl.n	80093b8 <HAL_SPI_TransmitReceive+0x1c8>
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80093a6:	68db      	ldr	r3, [r3, #12]
 80093a8:	7033      	strb	r3, [r6, #0]
        hspi->RxXferCount--;
 80093aa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80093ac:	3b01      	subs	r3, #1
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80093b2:	3601      	adds	r6, #1
        txallowed = 1U;
 80093b4:	f04f 0901 	mov.w	r9, #1
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80093b8:	1c7b      	adds	r3, r7, #1
 80093ba:	d0d3      	beq.n	8009364 <HAL_SPI_TransmitReceive+0x174>
 80093bc:	f7ff f8a0 	bl	8008500 <HAL_GetTick>
 80093c0:	eba0 0008 	sub.w	r0, r0, r8
 80093c4:	4287      	cmp	r7, r0
 80093c6:	d8cd      	bhi.n	8009364 <HAL_SPI_TransmitReceive+0x174>
 80093c8:	e7b4      	b.n	8009334 <HAL_SPI_TransmitReceive+0x144>
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80093ca:	68a3      	ldr	r3, [r4, #8]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d1b2      	bne.n	8009336 <HAL_SPI_TransmitReceive+0x146>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80093d0:	6823      	ldr	r3, [r4, #0]
 80093d2:	9003      	str	r0, [sp, #12]
 80093d4:	68da      	ldr	r2, [r3, #12]
 80093d6:	9203      	str	r2, [sp, #12]
 80093d8:	689b      	ldr	r3, [r3, #8]
 80093da:	9303      	str	r3, [sp, #12]
 80093dc:	9b03      	ldr	r3, [sp, #12]
 80093de:	e7aa      	b.n	8009336 <HAL_SPI_TransmitReceive+0x146>
    errorcode = HAL_BUSY;
 80093e0:	2002      	movs	r0, #2
 80093e2:	e7a8      	b.n	8009336 <HAL_SPI_TransmitReceive+0x146>
  __HAL_LOCK(hspi);
 80093e4:	2002      	movs	r0, #2
 80093e6:	e7ac      	b.n	8009342 <HAL_SPI_TransmitReceive+0x152>

080093e8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093e8:	6a03      	ldr	r3, [r0, #32]
 80093ea:	f023 0301 	bic.w	r3, r3, #1
 80093ee:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093f0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80093f2:	6842      	ldr	r2, [r0, #4]
{
 80093f4:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093f6:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093f8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80093fa:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80093fe:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009400:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8009402:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8009406:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8009408:	4c0c      	ldr	r4, [pc, #48]	; (800943c <TIM_OC1_SetConfig+0x54>)
 800940a:	42a0      	cmp	r0, r4
 800940c:	d009      	beq.n	8009422 <TIM_OC1_SetConfig+0x3a>
 800940e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009412:	42a0      	cmp	r0, r4
 8009414:	d005      	beq.n	8009422 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009416:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009418:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800941a:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800941c:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800941e:	6203      	str	r3, [r0, #32]
} 
 8009420:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8009422:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8009424:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8009426:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800942a:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 800942c:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800942e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8009432:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8009434:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8009438:	4322      	orrs	r2, r4
 800943a:	e7ec      	b.n	8009416 <TIM_OC1_SetConfig+0x2e>
 800943c:	40010000 	.word	0x40010000

08009440 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009440:	6a03      	ldr	r3, [r0, #32]
 8009442:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009446:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009448:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 800944a:	6842      	ldr	r2, [r0, #4]
{
 800944c:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800944e:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009450:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8009452:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8009456:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009458:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800945a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800945e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8009462:	4c0e      	ldr	r4, [pc, #56]	; (800949c <TIM_OC3_SetConfig+0x5c>)
 8009464:	42a0      	cmp	r0, r4
 8009466:	d009      	beq.n	800947c <TIM_OC3_SetConfig+0x3c>
 8009468:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800946c:	42a0      	cmp	r0, r4
 800946e:	d005      	beq.n	800947c <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009470:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009472:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8009474:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8009476:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009478:	6203      	str	r3, [r0, #32]
}
 800947a:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800947c:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800947e:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8009480:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009484:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009488:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800948a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800948e:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8009490:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009494:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8009498:	e7ea      	b.n	8009470 <TIM_OC3_SetConfig+0x30>
 800949a:	bf00      	nop
 800949c:	40010000 	.word	0x40010000

080094a0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80094a0:	6a03      	ldr	r3, [r0, #32]
 80094a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094a6:	6203      	str	r3, [r0, #32]
{
 80094a8:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094aa:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80094ac:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094ae:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094b0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80094b2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094b6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80094ba:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80094bc:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80094c0:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80094c4:	4d09      	ldr	r5, [pc, #36]	; (80094ec <TIM_OC4_SetConfig+0x4c>)
 80094c6:	42a8      	cmp	r0, r5
 80094c8:	d009      	beq.n	80094de <TIM_OC4_SetConfig+0x3e>
 80094ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80094ce:	42a8      	cmp	r0, r5
 80094d0:	d005      	beq.n	80094de <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094d2:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80094d4:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80094d6:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80094d8:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094da:	6204      	str	r4, [r0, #32]
}
 80094dc:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094de:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80094e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094e4:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80094e8:	e7f3      	b.n	80094d2 <TIM_OC4_SetConfig+0x32>
 80094ea:	bf00      	nop
 80094ec:	40010000 	.word	0x40010000

080094f0 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

 /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094f0:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80094f2:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 80094f4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80094f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
{
 80094fa:	b530      	push	{r4, r5, lr}
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80094fc:	4302      	orrs	r2, r0

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80094fe:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009500:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009504:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
  
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009506:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8009508:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800950a:	d021      	beq.n	8009550 <TIM_SlaveTimer_SetConfig+0x60>
 800950c:	d802      	bhi.n	8009514 <TIM_SlaveTimer_SetConfig+0x24>
 800950e:	2840      	cmp	r0, #64	; 0x40
 8009510:	d010      	beq.n	8009534 <TIM_SlaveTimer_SetConfig+0x44>
 8009512:	bd30      	pop	{r4, r5, pc}
 8009514:	2860      	cmp	r0, #96	; 0x60
 8009516:	d02d      	beq.n	8009574 <TIM_SlaveTimer_SetConfig+0x84>
 8009518:	2870      	cmp	r0, #112	; 0x70
 800951a:	d13d      	bne.n	8009598 <TIM_SlaveTimer_SetConfig+0xa8>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800951c:	68ca      	ldr	r2, [r1, #12]
 800951e:	688c      	ldr	r4, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8009520:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8009522:	6909      	ldr	r1, [r1, #16]
 8009524:	4322      	orrs	r2, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009526:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800952a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800952e:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009530:	609a      	str	r2, [r3, #8]
 8009532:	bd30      	pop	{r4, r5, pc}
      tmpccer = htim->Instance->CCER;
 8009534:	6a18      	ldr	r0, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009536:	6a1a      	ldr	r2, [r3, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009538:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800953a:	f022 0201 	bic.w	r2, r2, #1
 800953e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 8009540:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009542:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009546:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800954a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;                               
 800954c:	6218      	str	r0, [r3, #32]
    break;
 800954e:	bd30      	pop	{r4, r5, pc}
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009550:	6888      	ldr	r0, [r1, #8]
 8009552:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8009554:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009556:	6a1c      	ldr	r4, [r3, #32]
 8009558:	f024 0401 	bic.w	r4, r4, #1
 800955c:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800955e:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009560:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009564:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009568:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 800956c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800956e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009570:	6219      	str	r1, [r3, #32]
 8009572:	bd30      	pop	{r4, r5, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009574:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009576:	688c      	ldr	r4, [r1, #8]
 8009578:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800957a:	f020 0010 	bic.w	r0, r0, #16
 800957e:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009580:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8009582:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009584:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009588:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800958c:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8009590:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8009594:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8009596:	621a      	str	r2, [r3, #32]
 8009598:	bd30      	pop	{r4, r5, pc}

0800959a <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800959a:	6803      	ldr	r3, [r0, #0]
 800959c:	68da      	ldr	r2, [r3, #12]
 800959e:	f042 0201 	orr.w	r2, r2, #1
 80095a2:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	f042 0201 	orr.w	r2, r2, #1
 80095aa:	601a      	str	r2, [r3, #0]
}
 80095ac:	2000      	movs	r0, #0
 80095ae:	4770      	bx	lr

080095b0 <HAL_TIM_OC_MspInit>:
 80095b0:	4770      	bx	lr

080095b2 <HAL_TIM_IC_MspInit>:
 80095b2:	4770      	bx	lr

080095b4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80095b4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80095b8:	2b01      	cmp	r3, #1
{
 80095ba:	b570      	push	{r4, r5, r6, lr}
 80095bc:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 80095c0:	d01c      	beq.n	80095fc <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 80095c2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 80095c6:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 80095c8:	2201      	movs	r2, #1
 80095ca:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 80095ce:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80095d0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80095d4:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80095d8:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80095da:	680a      	ldr	r2, [r1, #0]
 80095dc:	2a40      	cmp	r2, #64	; 0x40
 80095de:	d079      	beq.n	80096d4 <HAL_TIM_ConfigClockSource+0x120>
 80095e0:	d819      	bhi.n	8009616 <HAL_TIM_ConfigClockSource+0x62>
 80095e2:	2a10      	cmp	r2, #16
 80095e4:	f000 8093 	beq.w	800970e <HAL_TIM_ConfigClockSource+0x15a>
 80095e8:	d80a      	bhi.n	8009600 <HAL_TIM_ConfigClockSource+0x4c>
 80095ea:	2a00      	cmp	r2, #0
 80095ec:	f000 8089 	beq.w	8009702 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80095f0:	2301      	movs	r3, #1
 80095f2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80095f6:	2300      	movs	r3, #0
 80095f8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80095fc:	4618      	mov	r0, r3
}
 80095fe:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8009600:	2a20      	cmp	r2, #32
 8009602:	f000 808a 	beq.w	800971a <HAL_TIM_ConfigClockSource+0x166>
 8009606:	2a30      	cmp	r2, #48	; 0x30
 8009608:	d1f2      	bne.n	80095f0 <HAL_TIM_ConfigClockSource+0x3c>
   tmpsmcr = TIMx->SMCR;
 800960a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800960c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8009610:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8009614:	e036      	b.n	8009684 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8009616:	2a70      	cmp	r2, #112	; 0x70
 8009618:	d036      	beq.n	8009688 <HAL_TIM_ConfigClockSource+0xd4>
 800961a:	d81b      	bhi.n	8009654 <HAL_TIM_ConfigClockSource+0xa0>
 800961c:	2a50      	cmp	r2, #80	; 0x50
 800961e:	d042      	beq.n	80096a6 <HAL_TIM_ConfigClockSource+0xf2>
 8009620:	2a60      	cmp	r2, #96	; 0x60
 8009622:	d1e5      	bne.n	80095f0 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009624:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8009626:	684d      	ldr	r5, [r1, #4]
 8009628:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800962a:	f024 0410 	bic.w	r4, r4, #16
 800962e:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009630:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8009632:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009634:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009638:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800963c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009640:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8009644:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8009646:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8009648:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800964a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 800964e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8009652:	e017      	b.n	8009684 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8009654:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8009658:	d011      	beq.n	800967e <HAL_TIM_ConfigClockSource+0xca>
 800965a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800965e:	d1c7      	bne.n	80095f0 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8009660:	688a      	ldr	r2, [r1, #8]
 8009662:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8009664:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8009666:	68c9      	ldr	r1, [r1, #12]
 8009668:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800966a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800966e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8009672:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8009674:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009676:	689a      	ldr	r2, [r3, #8]
 8009678:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800967c:	e002      	b.n	8009684 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800967e:	689a      	ldr	r2, [r3, #8]
 8009680:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8009684:	609a      	str	r2, [r3, #8]
 8009686:	e7b3      	b.n	80095f0 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8009688:	688a      	ldr	r2, [r1, #8]
 800968a:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800968c:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800968e:	68c9      	ldr	r1, [r1, #12]
 8009690:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009692:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8009696:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800969a:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800969c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 800969e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80096a0:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80096a4:	e7ee      	b.n	8009684 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80096a6:	684c      	ldr	r4, [r1, #4]
 80096a8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80096aa:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096ac:	6a1d      	ldr	r5, [r3, #32]
 80096ae:	f025 0501 	bic.w	r5, r5, #1
 80096b2:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80096b4:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096b6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096be:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80096c2:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80096c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096c6:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80096c8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80096ca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80096ce:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 80096d2:	e7d7      	b.n	8009684 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80096d4:	684c      	ldr	r4, [r1, #4]
 80096d6:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80096d8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096da:	6a1d      	ldr	r5, [r3, #32]
 80096dc:	f025 0501 	bic.w	r5, r5, #1
 80096e0:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80096e2:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80096e4:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096e8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80096ec:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80096f0:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80096f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096f4:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80096f6:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80096f8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 80096fc:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8009700:	e7c0      	b.n	8009684 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8009702:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8009704:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8009708:	f042 0207 	orr.w	r2, r2, #7
 800970c:	e7ba      	b.n	8009684 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800970e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8009710:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8009714:	f042 0217 	orr.w	r2, r2, #23
 8009718:	e7b4      	b.n	8009684 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 800971a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800971c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8009720:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8009724:	e7ae      	b.n	8009684 <HAL_TIM_ConfigClockSource+0xd0>

08009726 <HAL_TIM_SlaveConfigSynchronization>:
{
 8009726:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8009728:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800972c:	2b01      	cmp	r3, #1
{
 800972e:	4604      	mov	r4, r0
 8009730:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8009734:	d015      	beq.n	8009762 <HAL_TIM_SlaveConfigSynchronization+0x3c>
 8009736:	2501      	movs	r5, #1
 8009738:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 800973c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8009740:	f7ff fed6 	bl	80094f0 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009744:	6823      	ldr	r3, [r4, #0]
 8009746:	68da      	ldr	r2, [r3, #12]
 8009748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800974c:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800974e:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);  
 8009750:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009752:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009756:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8009758:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);  
 800975c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8009760:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8009762:	4618      	mov	r0, r3
} 
 8009764:	bd38      	pop	{r3, r4, r5, pc}

08009766 <HAL_TIM_OC_DelayElapsedCallback>:
 8009766:	4770      	bx	lr

08009768 <HAL_TIM_TriggerCallback>:
 8009768:	4770      	bx	lr

0800976a <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800976a:	6803      	ldr	r3, [r0, #0]
 800976c:	691a      	ldr	r2, [r3, #16]
 800976e:	0791      	lsls	r1, r2, #30
{
 8009770:	b510      	push	{r4, lr}
 8009772:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009774:	d50e      	bpl.n	8009794 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8009776:	68da      	ldr	r2, [r3, #12]
 8009778:	0792      	lsls	r2, r2, #30
 800977a:	d50b      	bpl.n	8009794 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800977c:	f06f 0202 	mvn.w	r2, #2
 8009780:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009782:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009784:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009786:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009788:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800978a:	d077      	beq.n	800987c <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800978c:	f000 fcfe 	bl	800a18c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009790:	2300      	movs	r3, #0
 8009792:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009794:	6823      	ldr	r3, [r4, #0]
 8009796:	691a      	ldr	r2, [r3, #16]
 8009798:	0750      	lsls	r0, r2, #29
 800979a:	d510      	bpl.n	80097be <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800979c:	68da      	ldr	r2, [r3, #12]
 800979e:	0751      	lsls	r1, r2, #29
 80097a0:	d50d      	bpl.n	80097be <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80097a2:	f06f 0204 	mvn.w	r2, #4
 80097a6:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80097a8:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80097aa:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80097ac:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80097b0:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80097b2:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80097b4:	d068      	beq.n	8009888 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80097b6:	f000 fce9 	bl	800a18c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097ba:	2300      	movs	r3, #0
 80097bc:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80097be:	6823      	ldr	r3, [r4, #0]
 80097c0:	691a      	ldr	r2, [r3, #16]
 80097c2:	0712      	lsls	r2, r2, #28
 80097c4:	d50f      	bpl.n	80097e6 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80097c6:	68da      	ldr	r2, [r3, #12]
 80097c8:	0710      	lsls	r0, r2, #28
 80097ca:	d50c      	bpl.n	80097e6 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80097cc:	f06f 0208 	mvn.w	r2, #8
 80097d0:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097d2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097d4:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097d6:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097d8:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80097da:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097dc:	d05a      	beq.n	8009894 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80097de:	f000 fcd5 	bl	800a18c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097e2:	2300      	movs	r3, #0
 80097e4:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80097e6:	6823      	ldr	r3, [r4, #0]
 80097e8:	691a      	ldr	r2, [r3, #16]
 80097ea:	06d2      	lsls	r2, r2, #27
 80097ec:	d510      	bpl.n	8009810 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80097ee:	68da      	ldr	r2, [r3, #12]
 80097f0:	06d0      	lsls	r0, r2, #27
 80097f2:	d50d      	bpl.n	8009810 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80097f4:	f06f 0210 	mvn.w	r2, #16
 80097f8:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097fa:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80097fc:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80097fe:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009802:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8009804:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009806:	d04b      	beq.n	80098a0 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8009808:	f000 fcc0 	bl	800a18c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800980c:	2300      	movs	r3, #0
 800980e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009810:	6823      	ldr	r3, [r4, #0]
 8009812:	691a      	ldr	r2, [r3, #16]
 8009814:	07d1      	lsls	r1, r2, #31
 8009816:	d508      	bpl.n	800982a <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8009818:	68da      	ldr	r2, [r3, #12]
 800981a:	07d2      	lsls	r2, r2, #31
 800981c:	d505      	bpl.n	800982a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800981e:	f06f 0201 	mvn.w	r2, #1
 8009822:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8009824:	4620      	mov	r0, r4
 8009826:	f000 fd5d 	bl	800a2e4 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800982a:	6823      	ldr	r3, [r4, #0]
 800982c:	691a      	ldr	r2, [r3, #16]
 800982e:	0610      	lsls	r0, r2, #24
 8009830:	d508      	bpl.n	8009844 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8009832:	68da      	ldr	r2, [r3, #12]
 8009834:	0611      	lsls	r1, r2, #24
 8009836:	d505      	bpl.n	8009844 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009838:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800983c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800983e:	4620      	mov	r0, r4
 8009840:	f000 fad5 	bl	8009dee <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009844:	6823      	ldr	r3, [r4, #0]
 8009846:	691a      	ldr	r2, [r3, #16]
 8009848:	0652      	lsls	r2, r2, #25
 800984a:	d508      	bpl.n	800985e <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800984c:	68da      	ldr	r2, [r3, #12]
 800984e:	0650      	lsls	r0, r2, #25
 8009850:	d505      	bpl.n	800985e <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009852:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009856:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8009858:	4620      	mov	r0, r4
 800985a:	f7ff ff85 	bl	8009768 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800985e:	6823      	ldr	r3, [r4, #0]
 8009860:	691a      	ldr	r2, [r3, #16]
 8009862:	0691      	lsls	r1, r2, #26
 8009864:	d522      	bpl.n	80098ac <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8009866:	68da      	ldr	r2, [r3, #12]
 8009868:	0692      	lsls	r2, r2, #26
 800986a:	d51f      	bpl.n	80098ac <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800986c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8009870:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009872:	611a      	str	r2, [r3, #16]
}
 8009874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8009878:	f000 bab8 	b.w	8009dec <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800987c:	f7ff ff73 	bl	8009766 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009880:	4620      	mov	r0, r4
 8009882:	f000 fce9 	bl	800a258 <HAL_TIM_PWM_PulseFinishedCallback>
 8009886:	e783      	b.n	8009790 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009888:	f7ff ff6d 	bl	8009766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800988c:	4620      	mov	r0, r4
 800988e:	f000 fce3 	bl	800a258 <HAL_TIM_PWM_PulseFinishedCallback>
 8009892:	e792      	b.n	80097ba <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009894:	f7ff ff67 	bl	8009766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8009898:	4620      	mov	r0, r4
 800989a:	f000 fcdd 	bl	800a258 <HAL_TIM_PWM_PulseFinishedCallback>
 800989e:	e7a0      	b.n	80097e2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098a0:	f7ff ff61 	bl	8009766 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098a4:	4620      	mov	r0, r4
 80098a6:	f000 fcd7 	bl	800a258 <HAL_TIM_PWM_PulseFinishedCallback>
 80098aa:	e7af      	b.n	800980c <HAL_TIM_IRQHandler+0xa2>
 80098ac:	bd10      	pop	{r4, pc}
	...

080098b0 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80098b0:	4a2e      	ldr	r2, [pc, #184]	; (800996c <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 80098b2:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 80098b4:	4290      	cmp	r0, r2
 80098b6:	d012      	beq.n	80098de <TIM_Base_SetConfig+0x2e>
 80098b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80098bc:	d00f      	beq.n	80098de <TIM_Base_SetConfig+0x2e>
 80098be:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80098c2:	4290      	cmp	r0, r2
 80098c4:	d00b      	beq.n	80098de <TIM_Base_SetConfig+0x2e>
 80098c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80098ca:	4290      	cmp	r0, r2
 80098cc:	d007      	beq.n	80098de <TIM_Base_SetConfig+0x2e>
 80098ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80098d2:	4290      	cmp	r0, r2
 80098d4:	d003      	beq.n	80098de <TIM_Base_SetConfig+0x2e>
 80098d6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80098da:	4290      	cmp	r0, r2
 80098dc:	d11d      	bne.n	800991a <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80098de:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80098e4:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80098e6:	4a21      	ldr	r2, [pc, #132]	; (800996c <TIM_Base_SetConfig+0xbc>)
 80098e8:	4290      	cmp	r0, r2
 80098ea:	d104      	bne.n	80098f6 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098ec:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80098ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098f2:	4313      	orrs	r3, r2
 80098f4:	e028      	b.n	8009948 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80098f6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80098fa:	d0f7      	beq.n	80098ec <TIM_Base_SetConfig+0x3c>
 80098fc:	4a1c      	ldr	r2, [pc, #112]	; (8009970 <TIM_Base_SetConfig+0xc0>)
 80098fe:	4290      	cmp	r0, r2
 8009900:	d0f4      	beq.n	80098ec <TIM_Base_SetConfig+0x3c>
 8009902:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009906:	4290      	cmp	r0, r2
 8009908:	d0f0      	beq.n	80098ec <TIM_Base_SetConfig+0x3c>
 800990a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800990e:	4290      	cmp	r0, r2
 8009910:	d0ec      	beq.n	80098ec <TIM_Base_SetConfig+0x3c>
 8009912:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8009916:	4290      	cmp	r0, r2
 8009918:	d0e8      	beq.n	80098ec <TIM_Base_SetConfig+0x3c>
 800991a:	4a16      	ldr	r2, [pc, #88]	; (8009974 <TIM_Base_SetConfig+0xc4>)
 800991c:	4290      	cmp	r0, r2
 800991e:	d0e5      	beq.n	80098ec <TIM_Base_SetConfig+0x3c>
 8009920:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009924:	4290      	cmp	r0, r2
 8009926:	d0e1      	beq.n	80098ec <TIM_Base_SetConfig+0x3c>
 8009928:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800992c:	4290      	cmp	r0, r2
 800992e:	d0dd      	beq.n	80098ec <TIM_Base_SetConfig+0x3c>
 8009930:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8009934:	4290      	cmp	r0, r2
 8009936:	d0d9      	beq.n	80098ec <TIM_Base_SetConfig+0x3c>
 8009938:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800993c:	4290      	cmp	r0, r2
 800993e:	d0d5      	beq.n	80098ec <TIM_Base_SetConfig+0x3c>
 8009940:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009944:	4290      	cmp	r0, r2
 8009946:	d0d1      	beq.n	80098ec <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8009948:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800994a:	688b      	ldr	r3, [r1, #8]
 800994c:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800994e:	680b      	ldr	r3, [r1, #0]
 8009950:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8009952:	4b06      	ldr	r3, [pc, #24]	; (800996c <TIM_Base_SetConfig+0xbc>)
 8009954:	4298      	cmp	r0, r3
 8009956:	d006      	beq.n	8009966 <TIM_Base_SetConfig+0xb6>
 8009958:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800995c:	4298      	cmp	r0, r3
 800995e:	d002      	beq.n	8009966 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8009960:	2301      	movs	r3, #1
 8009962:	6143      	str	r3, [r0, #20]
}
 8009964:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8009966:	690b      	ldr	r3, [r1, #16]
 8009968:	6303      	str	r3, [r0, #48]	; 0x30
 800996a:	e7f9      	b.n	8009960 <TIM_Base_SetConfig+0xb0>
 800996c:	40010000 	.word	0x40010000
 8009970:	40000400 	.word	0x40000400
 8009974:	40014000 	.word	0x40014000

08009978 <HAL_TIM_Base_Init>:
{ 
 8009978:	b510      	push	{r4, lr}
  if(htim == NULL)
 800997a:	4604      	mov	r4, r0
 800997c:	b1a0      	cbz	r0, 80099a8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800997e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8009982:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009986:	b91b      	cbnz	r3, 8009990 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8009988:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800998c:	f001 fa2a 	bl	800ade4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8009990:	2302      	movs	r3, #2
 8009992:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8009996:	6820      	ldr	r0, [r4, #0]
 8009998:	1d21      	adds	r1, r4, #4
 800999a:	f7ff ff89 	bl	80098b0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800999e:	2301      	movs	r3, #1
 80099a0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80099a4:	2000      	movs	r0, #0
 80099a6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80099a8:	2001      	movs	r0, #1
}
 80099aa:	bd10      	pop	{r4, pc}

080099ac <HAL_TIM_OC_Init>:
{
 80099ac:	b510      	push	{r4, lr}
  if(htim == NULL)
 80099ae:	4604      	mov	r4, r0
 80099b0:	b1a0      	cbz	r0, 80099dc <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80099b2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80099b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80099ba:	b91b      	cbnz	r3, 80099c4 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80099bc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_OC_MspInit(htim);
 80099c0:	f7ff fdf6 	bl	80095b0 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80099c4:	2302      	movs	r3, #2
 80099c6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 80099ca:	6820      	ldr	r0, [r4, #0]
 80099cc:	1d21      	adds	r1, r4, #4
 80099ce:	f7ff ff6f 	bl	80098b0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80099d2:	2301      	movs	r3, #1
 80099d4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80099d8:	2000      	movs	r0, #0
 80099da:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80099dc:	2001      	movs	r0, #1
}
 80099de:	bd10      	pop	{r4, pc}

080099e0 <HAL_TIM_IC_Init>:
{
 80099e0:	b510      	push	{r4, lr}
  if(htim == NULL)
 80099e2:	4604      	mov	r4, r0
 80099e4:	b1a0      	cbz	r0, 8009a10 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80099e6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80099ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80099ee:	b91b      	cbnz	r3, 80099f8 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80099f0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
 80099f4:	f7ff fddd 	bl	80095b2 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;   
 80099f8:	2302      	movs	r3, #2
 80099fa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 80099fe:	6820      	ldr	r0, [r4, #0]
 8009a00:	1d21      	adds	r1, r4, #4
 8009a02:	f7ff ff55 	bl	80098b0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8009a06:	2301      	movs	r3, #1
 8009a08:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8009a0c:	2000      	movs	r0, #0
 8009a0e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8009a10:	2001      	movs	r0, #1
}
 8009a12:	bd10      	pop	{r4, pc}

08009a14 <TIM_TI1_SetConfig>:
{
 8009a14:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a16:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009a18:	4e1a      	ldr	r6, [pc, #104]	; (8009a84 <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a1a:	f024 0401 	bic.w	r4, r4, #1
 8009a1e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a20:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8009a22:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8009a24:	42b0      	cmp	r0, r6
 8009a26:	f024 0403 	bic.w	r4, r4, #3
 8009a2a:	d01a      	beq.n	8009a62 <TIM_TI1_SetConfig+0x4e>
 8009a2c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009a30:	d017      	beq.n	8009a62 <TIM_TI1_SetConfig+0x4e>
 8009a32:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8009a36:	42b0      	cmp	r0, r6
 8009a38:	d013      	beq.n	8009a62 <TIM_TI1_SetConfig+0x4e>
 8009a3a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009a3e:	42b0      	cmp	r0, r6
 8009a40:	d00f      	beq.n	8009a62 <TIM_TI1_SetConfig+0x4e>
 8009a42:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8009a46:	42b0      	cmp	r0, r6
 8009a48:	d00b      	beq.n	8009a62 <TIM_TI1_SetConfig+0x4e>
 8009a4a:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8009a4e:	42b0      	cmp	r0, r6
 8009a50:	d007      	beq.n	8009a62 <TIM_TI1_SetConfig+0x4e>
 8009a52:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8009a56:	42b0      	cmp	r0, r6
 8009a58:	d003      	beq.n	8009a62 <TIM_TI1_SetConfig+0x4e>
 8009a5a:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8009a5e:	42b0      	cmp	r0, r6
 8009a60:	d10d      	bne.n	8009a7e <TIM_TI1_SetConfig+0x6a>
    tmpccmr1 |= TIM_ICSelection;
 8009a62:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009a64:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a66:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009a6a:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009a6c:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009a70:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009a74:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009a76:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8009a78:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8009a7a:	6201      	str	r1, [r0, #32]
}
 8009a7c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009a7e:	f044 0201 	orr.w	r2, r4, #1
 8009a82:	e7ef      	b.n	8009a64 <TIM_TI1_SetConfig+0x50>
 8009a84:	40010000 	.word	0x40010000

08009a88 <HAL_TIM_IC_ConfigChannel>:
{
 8009a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8009a8a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8009a8e:	2b01      	cmp	r3, #1
{
 8009a90:	4604      	mov	r4, r0
 8009a92:	460d      	mov	r5, r1
 8009a94:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8009a98:	d019      	beq.n	8009ace <HAL_TIM_IC_ConfigChannel+0x46>
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8009aa0:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
 8009aa4:	b9a2      	cbnz	r2, 8009ad0 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8009aa6:	68cb      	ldr	r3, [r1, #12]
 8009aa8:	6820      	ldr	r0, [r4, #0]
 8009aaa:	c906      	ldmia	r1, {r1, r2}
 8009aac:	f7ff ffb2 	bl	8009a14 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009ab0:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009ab2:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8009ab4:	699a      	ldr	r2, [r3, #24]
 8009ab6:	f022 020c 	bic.w	r2, r2, #12
 8009aba:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8009abc:	699a      	ldr	r2, [r3, #24]
 8009abe:	430a      	orrs	r2, r1
 8009ac0:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8009ac2:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8009ac4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8009ac6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8009aca:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8009ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8009ad0:	2a04      	cmp	r2, #4
 8009ad2:	688e      	ldr	r6, [r1, #8]
 8009ad4:	6823      	ldr	r3, [r4, #0]
 8009ad6:	68e8      	ldr	r0, [r5, #12]
 8009ad8:	c982      	ldmia	r1, {r1, r7}
 8009ada:	d11f      	bne.n	8009b1c <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009adc:	6a1a      	ldr	r2, [r3, #32]
 8009ade:	f022 0210 	bic.w	r2, r2, #16
 8009ae2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ae4:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8009ae6:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009ae8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009aec:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009af0:	0300      	lsls	r0, r0, #12
 8009af2:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009af4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009af8:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009afa:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009afc:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b00:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009b04:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8009b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b08:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8009b0a:	699a      	ldr	r2, [r3, #24]
 8009b0c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009b10:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8009b12:	699a      	ldr	r2, [r3, #24]
 8009b14:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8009b18:	619e      	str	r6, [r3, #24]
 8009b1a:	e7d2      	b.n	8009ac2 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8009b1c:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b1e:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8009b20:	d11c      	bne.n	8009b5c <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009b26:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009b28:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8009b2a:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009b2c:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8009b30:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009b32:	0100      	lsls	r0, r0, #4
 8009b34:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009b36:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009b3a:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009b3c:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009b3e:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009b42:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009b46:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8009b48:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009b4a:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009b4c:	69da      	ldr	r2, [r3, #28]
 8009b4e:	f022 020c 	bic.w	r2, r2, #12
 8009b52:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009b54:	69da      	ldr	r2, [r3, #28]
 8009b56:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009b58:	61de      	str	r6, [r3, #28]
 8009b5a:	e7b2      	b.n	8009ac2 <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b5c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009b60:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009b62:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8009b64:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009b66:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009b6a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009b6e:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009b70:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009b74:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009b76:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009b78:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009b7a:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009b7e:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009b82:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8009b84:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009b86:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009b88:	69da      	ldr	r2, [r3, #28]
 8009b8a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009b8e:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009b90:	69da      	ldr	r2, [r3, #28]
 8009b92:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8009b96:	e7df      	b.n	8009b58 <HAL_TIM_IC_ConfigChannel+0xd0>

08009b98 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b98:	6a03      	ldr	r3, [r0, #32]
 8009b9a:	f023 0310 	bic.w	r3, r3, #16
 8009b9e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8009ba0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8009ba2:	6842      	ldr	r2, [r0, #4]
{
 8009ba4:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8009ba6:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ba8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009baa:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bae:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009bb2:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8009bb4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009bb8:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8009bbc:	4c0d      	ldr	r4, [pc, #52]	; (8009bf4 <TIM_OC2_SetConfig+0x5c>)
 8009bbe:	42a0      	cmp	r0, r4
 8009bc0:	d009      	beq.n	8009bd6 <TIM_OC2_SetConfig+0x3e>
 8009bc2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009bc6:	42a0      	cmp	r0, r4
 8009bc8:	d005      	beq.n	8009bd6 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 8009bca:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8009bcc:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8009bce:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8009bd0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8009bd2:	6203      	str	r3, [r0, #32]
}
 8009bd4:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009bd6:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009bd8:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 8009bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009bde:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009be2:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009be4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009be8:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8009bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009bee:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8009bf2:	e7ea      	b.n	8009bca <TIM_OC2_SetConfig+0x32>
 8009bf4:	40010000 	.word	0x40010000

08009bf8 <HAL_TIM_OC_ConfigChannel>:
{
 8009bf8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim); 
 8009bfa:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8009bfe:	2b01      	cmp	r3, #1
{
 8009c00:	4604      	mov	r4, r0
 8009c02:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim); 
 8009c06:	d018      	beq.n	8009c3a <HAL_TIM_OC_ConfigChannel+0x42>
 8009c08:	2301      	movs	r3, #1
 8009c0a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8009c0e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 8009c12:	461d      	mov	r5, r3
  switch (Channel)
 8009c14:	2a0c      	cmp	r2, #12
 8009c16:	d80b      	bhi.n	8009c30 <HAL_TIM_OC_ConfigChannel+0x38>
 8009c18:	e8df f002 	tbb	[pc, r2]
 8009c1c:	0a0a0a07 	.word	0x0a0a0a07
 8009c20:	0a0a0a10 	.word	0x0a0a0a10
 8009c24:	0a0a0a14 	.word	0x0a0a0a14
 8009c28:	18          	.byte	0x18
 8009c29:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009c2a:	6820      	ldr	r0, [r4, #0]
 8009c2c:	f7ff fbdc 	bl	80093e8 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim); 
 8009c30:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8009c32:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim); 
 8009c36:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8009c3a:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c3c:	6820      	ldr	r0, [r4, #0]
 8009c3e:	f7ff ffab 	bl	8009b98 <TIM_OC2_SetConfig>
    break;
 8009c42:	e7f5      	b.n	8009c30 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c44:	6820      	ldr	r0, [r4, #0]
 8009c46:	f7ff fbfb 	bl	8009440 <TIM_OC3_SetConfig>
    break;
 8009c4a:	e7f1      	b.n	8009c30 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c4c:	6820      	ldr	r0, [r4, #0]
 8009c4e:	f7ff fc27 	bl	80094a0 <TIM_OC4_SetConfig>
    break;
 8009c52:	e7ed      	b.n	8009c30 <HAL_TIM_OC_ConfigChannel+0x38>

08009c54 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8009c54:	6a03      	ldr	r3, [r0, #32]
{
 8009c56:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8009c58:	2401      	movs	r4, #1
 8009c5a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8009c5c:	ea23 0304 	bic.w	r3, r3, r4
 8009c60:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8009c62:	6a03      	ldr	r3, [r0, #32]
 8009c64:	408a      	lsls	r2, r1
 8009c66:	431a      	orrs	r2, r3
 8009c68:	6202      	str	r2, [r0, #32]
 8009c6a:	bd10      	pop	{r4, pc}

08009c6c <HAL_TIM_PWM_Start_IT>:
{
 8009c6c:	b510      	push	{r4, lr}
 8009c6e:	4604      	mov	r4, r0
  switch (Channel)
 8009c70:	290c      	cmp	r1, #12
 8009c72:	d80d      	bhi.n	8009c90 <HAL_TIM_PWM_Start_IT+0x24>
 8009c74:	e8df f001 	tbb	[pc, r1]
 8009c78:	0c0c0c07 	.word	0x0c0c0c07
 8009c7c:	0c0c0c22 	.word	0x0c0c0c22
 8009c80:	0c0c0c27 	.word	0x0c0c0c27
 8009c84:	2c          	.byte	0x2c
 8009c85:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009c86:	6802      	ldr	r2, [r0, #0]
 8009c88:	68d3      	ldr	r3, [r2, #12]
 8009c8a:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009c8e:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009c90:	2201      	movs	r2, #1
 8009c92:	6820      	ldr	r0, [r4, #0]
 8009c94:	f7ff ffde 	bl	8009c54 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8009c98:	6823      	ldr	r3, [r4, #0]
 8009c9a:	4a10      	ldr	r2, [pc, #64]	; (8009cdc <HAL_TIM_PWM_Start_IT+0x70>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d003      	beq.n	8009ca8 <HAL_TIM_PWM_Start_IT+0x3c>
 8009ca0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	d103      	bne.n	8009cb0 <HAL_TIM_PWM_Start_IT+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 8009ca8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009caa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009cae:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	f042 0201 	orr.w	r2, r2, #1
 8009cb6:	601a      	str	r2, [r3, #0]
} 
 8009cb8:	2000      	movs	r0, #0
 8009cba:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009cbc:	6802      	ldr	r2, [r0, #0]
 8009cbe:	68d3      	ldr	r3, [r2, #12]
 8009cc0:	f043 0304 	orr.w	r3, r3, #4
 8009cc4:	e7e3      	b.n	8009c8e <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009cc6:	6802      	ldr	r2, [r0, #0]
 8009cc8:	68d3      	ldr	r3, [r2, #12]
 8009cca:	f043 0308 	orr.w	r3, r3, #8
 8009cce:	e7de      	b.n	8009c8e <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009cd0:	6802      	ldr	r2, [r0, #0]
 8009cd2:	68d3      	ldr	r3, [r2, #12]
 8009cd4:	f043 0310 	orr.w	r3, r3, #16
 8009cd8:	e7d9      	b.n	8009c8e <HAL_TIM_PWM_Start_IT+0x22>
 8009cda:	bf00      	nop
 8009cdc:	40010000 	.word	0x40010000

08009ce0 <HAL_TIM_OC_Start_IT>:
 8009ce0:	f7ff bfc4 	b.w	8009c6c <HAL_TIM_PWM_Start_IT>

08009ce4 <HAL_TIM_IC_Start_IT>:
{
 8009ce4:	b510      	push	{r4, lr}
 8009ce6:	4604      	mov	r4, r0
  switch (Channel)
 8009ce8:	290c      	cmp	r1, #12
 8009cea:	d80d      	bhi.n	8009d08 <HAL_TIM_IC_Start_IT+0x24>
 8009cec:	e8df f001 	tbb	[pc, r1]
 8009cf0:	0c0c0c07 	.word	0x0c0c0c07
 8009cf4:	0c0c0c17 	.word	0x0c0c0c17
 8009cf8:	0c0c0c1c 	.word	0x0c0c0c1c
 8009cfc:	21          	.byte	0x21
 8009cfd:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009cfe:	6802      	ldr	r2, [r0, #0]
 8009d00:	68d3      	ldr	r3, [r2, #12]
 8009d02:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009d06:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d08:	6820      	ldr	r0, [r4, #0]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f7ff ffa2 	bl	8009c54 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 8009d10:	6822      	ldr	r2, [r4, #0]
 8009d12:	6813      	ldr	r3, [r2, #0]
 8009d14:	f043 0301 	orr.w	r3, r3, #1
 8009d18:	6013      	str	r3, [r2, #0]
} 
 8009d1a:	2000      	movs	r0, #0
 8009d1c:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009d1e:	6802      	ldr	r2, [r0, #0]
 8009d20:	68d3      	ldr	r3, [r2, #12]
 8009d22:	f043 0304 	orr.w	r3, r3, #4
 8009d26:	e7ee      	b.n	8009d06 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009d28:	6802      	ldr	r2, [r0, #0]
 8009d2a:	68d3      	ldr	r3, [r2, #12]
 8009d2c:	f043 0308 	orr.w	r3, r3, #8
 8009d30:	e7e9      	b.n	8009d06 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009d32:	6802      	ldr	r2, [r0, #0]
 8009d34:	68d3      	ldr	r3, [r2, #12]
 8009d36:	f043 0310 	orr.w	r3, r3, #16
 8009d3a:	e7e4      	b.n	8009d06 <HAL_TIM_IC_Start_IT+0x22>

08009d3c <HAL_TIM_IC_Stop_IT>:
{
 8009d3c:	b510      	push	{r4, lr}
 8009d3e:	4604      	mov	r4, r0
  switch (Channel)
 8009d40:	290c      	cmp	r1, #12
 8009d42:	d80d      	bhi.n	8009d60 <HAL_TIM_IC_Stop_IT+0x24>
 8009d44:	e8df f001 	tbb	[pc, r1]
 8009d48:	0c0c0c07 	.word	0x0c0c0c07
 8009d4c:	0c0c0c21 	.word	0x0c0c0c21
 8009d50:	0c0c0c26 	.word	0x0c0c0c26
 8009d54:	2b          	.byte	0x2b
 8009d55:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8009d56:	6802      	ldr	r2, [r0, #0]
 8009d58:	68d3      	ldr	r3, [r2, #12]
 8009d5a:	f023 0302 	bic.w	r3, r3, #2
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009d5e:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE); 
 8009d60:	2200      	movs	r2, #0
 8009d62:	6820      	ldr	r0, [r4, #0]
 8009d64:	f7ff ff76 	bl	8009c54 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim); 
 8009d68:	6823      	ldr	r3, [r4, #0]
 8009d6a:	6a19      	ldr	r1, [r3, #32]
 8009d6c:	f241 1211 	movw	r2, #4369	; 0x1111
 8009d70:	4211      	tst	r1, r2
 8009d72:	d108      	bne.n	8009d86 <HAL_TIM_IC_Stop_IT+0x4a>
 8009d74:	6a19      	ldr	r1, [r3, #32]
 8009d76:	f240 4244 	movw	r2, #1092	; 0x444
 8009d7a:	4211      	tst	r1, r2
 8009d7c:	bf02      	ittt	eq
 8009d7e:	681a      	ldreq	r2, [r3, #0]
 8009d80:	f022 0201 	biceq.w	r2, r2, #1
 8009d84:	601a      	streq	r2, [r3, #0]
}
 8009d86:	2000      	movs	r0, #0
 8009d88:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8009d8a:	6802      	ldr	r2, [r0, #0]
 8009d8c:	68d3      	ldr	r3, [r2, #12]
 8009d8e:	f023 0304 	bic.w	r3, r3, #4
 8009d92:	e7e4      	b.n	8009d5e <HAL_TIM_IC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8009d94:	6802      	ldr	r2, [r0, #0]
 8009d96:	68d3      	ldr	r3, [r2, #12]
 8009d98:	f023 0308 	bic.w	r3, r3, #8
 8009d9c:	e7df      	b.n	8009d5e <HAL_TIM_IC_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8009d9e:	6802      	ldr	r2, [r0, #0]
 8009da0:	68d3      	ldr	r3, [r2, #12]
 8009da2:	f023 0310 	bic.w	r3, r3, #16
 8009da6:	e7da      	b.n	8009d5e <HAL_TIM_IC_Stop_IT+0x22>

08009da8 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8009da8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8009dac:	2b01      	cmp	r3, #1
{
 8009dae:	b510      	push	{r4, lr}
 8009db0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8009db4:	d018      	beq.n	8009de8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8009db6:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8009dba:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8009dbc:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8009dbe:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8009dc0:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8009dc2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009dc6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8009dc8:	685a      	ldr	r2, [r3, #4]
 8009dca:	4322      	orrs	r2, r4
 8009dcc:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8009dce:	689a      	ldr	r2, [r3, #8]
 8009dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009dd4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8009dd6:	689a      	ldr	r2, [r3, #8]
 8009dd8:	430a      	orrs	r2, r1
 8009dda:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8009de2:	2300      	movs	r3, #0
 8009de4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8009de8:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8009dea:	bd10      	pop	{r4, pc}

08009dec <HAL_TIMEx_CommutationCallback>:
 8009dec:	4770      	bx	lr

08009dee <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009dee:	4770      	bx	lr

08009df0 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8009df4:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8009df6:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8009df8:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009dfa:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8009dfc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8009e00:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8009e02:	6133      	str	r3, [r6, #16]
{
 8009e04:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e06:	6883      	ldr	r3, [r0, #8]
 8009e08:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8009e0a:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e0c:	4303      	orrs	r3, r0
 8009e0e:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8009e10:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e14:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8009e16:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e1a:	430b      	orrs	r3, r1
 8009e1c:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8009e1e:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8009e20:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8009e22:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8009e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8009e28:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e2a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8009e2e:	6173      	str	r3, [r6, #20]
 8009e30:	4b7a      	ldr	r3, [pc, #488]	; (800a01c <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e32:	d17c      	bne.n	8009f2e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e34:	429e      	cmp	r6, r3
 8009e36:	d003      	beq.n	8009e40 <UART_SetConfig+0x50>
 8009e38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009e3c:	429e      	cmp	r6, r3
 8009e3e:	d144      	bne.n	8009eca <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8009e40:	f7ff f932 	bl	80090a8 <HAL_RCC_GetPCLK2Freq>
 8009e44:	2519      	movs	r5, #25
 8009e46:	fb05 f300 	mul.w	r3, r5, r0
 8009e4a:	6860      	ldr	r0, [r4, #4]
 8009e4c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8009e50:	0040      	lsls	r0, r0, #1
 8009e52:	fbb3 f3f0 	udiv	r3, r3, r0
 8009e56:	fbb3 f3f9 	udiv	r3, r3, r9
 8009e5a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009e5e:	f7ff f923 	bl	80090a8 <HAL_RCC_GetPCLK2Freq>
 8009e62:	6863      	ldr	r3, [r4, #4]
 8009e64:	4368      	muls	r0, r5
 8009e66:	005b      	lsls	r3, r3, #1
 8009e68:	fbb0 f7f3 	udiv	r7, r0, r3
 8009e6c:	f7ff f91c 	bl	80090a8 <HAL_RCC_GetPCLK2Freq>
 8009e70:	6863      	ldr	r3, [r4, #4]
 8009e72:	4368      	muls	r0, r5
 8009e74:	005b      	lsls	r3, r3, #1
 8009e76:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e7a:	fbb3 f3f9 	udiv	r3, r3, r9
 8009e7e:	fb09 7313 	mls	r3, r9, r3, r7
 8009e82:	00db      	lsls	r3, r3, #3
 8009e84:	3332      	adds	r3, #50	; 0x32
 8009e86:	fbb3 f3f9 	udiv	r3, r3, r9
 8009e8a:	005b      	lsls	r3, r3, #1
 8009e8c:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8009e90:	f7ff f90a 	bl	80090a8 <HAL_RCC_GetPCLK2Freq>
 8009e94:	6862      	ldr	r2, [r4, #4]
 8009e96:	4368      	muls	r0, r5
 8009e98:	0052      	lsls	r2, r2, #1
 8009e9a:	fbb0 faf2 	udiv	sl, r0, r2
 8009e9e:	f7ff f903 	bl	80090a8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8009ea2:	6863      	ldr	r3, [r4, #4]
 8009ea4:	4368      	muls	r0, r5
 8009ea6:	005b      	lsls	r3, r3, #1
 8009ea8:	fbb0 f3f3 	udiv	r3, r0, r3
 8009eac:	fbb3 f3f9 	udiv	r3, r3, r9
 8009eb0:	fb09 a313 	mls	r3, r9, r3, sl
 8009eb4:	00db      	lsls	r3, r3, #3
 8009eb6:	3332      	adds	r3, #50	; 0x32
 8009eb8:	fbb3 f3f9 	udiv	r3, r3, r9
 8009ebc:	f003 0307 	and.w	r3, r3, #7
 8009ec0:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8009ec2:	443b      	add	r3, r7
 8009ec4:	60b3      	str	r3, [r6, #8]
 8009ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8009eca:	f7ff f8dd 	bl	8009088 <HAL_RCC_GetPCLK1Freq>
 8009ece:	2519      	movs	r5, #25
 8009ed0:	fb05 f300 	mul.w	r3, r5, r0
 8009ed4:	6860      	ldr	r0, [r4, #4]
 8009ed6:	f04f 0964 	mov.w	r9, #100	; 0x64
 8009eda:	0040      	lsls	r0, r0, #1
 8009edc:	fbb3 f3f0 	udiv	r3, r3, r0
 8009ee0:	fbb3 f3f9 	udiv	r3, r3, r9
 8009ee4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009ee8:	f7ff f8ce 	bl	8009088 <HAL_RCC_GetPCLK1Freq>
 8009eec:	6863      	ldr	r3, [r4, #4]
 8009eee:	4368      	muls	r0, r5
 8009ef0:	005b      	lsls	r3, r3, #1
 8009ef2:	fbb0 f7f3 	udiv	r7, r0, r3
 8009ef6:	f7ff f8c7 	bl	8009088 <HAL_RCC_GetPCLK1Freq>
 8009efa:	6863      	ldr	r3, [r4, #4]
 8009efc:	4368      	muls	r0, r5
 8009efe:	005b      	lsls	r3, r3, #1
 8009f00:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f04:	fbb3 f3f9 	udiv	r3, r3, r9
 8009f08:	fb09 7313 	mls	r3, r9, r3, r7
 8009f0c:	00db      	lsls	r3, r3, #3
 8009f0e:	3332      	adds	r3, #50	; 0x32
 8009f10:	fbb3 f3f9 	udiv	r3, r3, r9
 8009f14:	005b      	lsls	r3, r3, #1
 8009f16:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8009f1a:	f7ff f8b5 	bl	8009088 <HAL_RCC_GetPCLK1Freq>
 8009f1e:	6862      	ldr	r2, [r4, #4]
 8009f20:	4368      	muls	r0, r5
 8009f22:	0052      	lsls	r2, r2, #1
 8009f24:	fbb0 faf2 	udiv	sl, r0, r2
 8009f28:	f7ff f8ae 	bl	8009088 <HAL_RCC_GetPCLK1Freq>
 8009f2c:	e7b9      	b.n	8009ea2 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8009f2e:	429e      	cmp	r6, r3
 8009f30:	d002      	beq.n	8009f38 <UART_SetConfig+0x148>
 8009f32:	4b3b      	ldr	r3, [pc, #236]	; (800a020 <UART_SetConfig+0x230>)
 8009f34:	429e      	cmp	r6, r3
 8009f36:	d140      	bne.n	8009fba <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8009f38:	f7ff f8b6 	bl	80090a8 <HAL_RCC_GetPCLK2Freq>
 8009f3c:	6867      	ldr	r7, [r4, #4]
 8009f3e:	2519      	movs	r5, #25
 8009f40:	f04f 0964 	mov.w	r9, #100	; 0x64
 8009f44:	fb05 f300 	mul.w	r3, r5, r0
 8009f48:	00bf      	lsls	r7, r7, #2
 8009f4a:	fbb3 f3f7 	udiv	r3, r3, r7
 8009f4e:	fbb3 f3f9 	udiv	r3, r3, r9
 8009f52:	011f      	lsls	r7, r3, #4
 8009f54:	f7ff f8a8 	bl	80090a8 <HAL_RCC_GetPCLK2Freq>
 8009f58:	6863      	ldr	r3, [r4, #4]
 8009f5a:	4368      	muls	r0, r5
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	fbb0 f8f3 	udiv	r8, r0, r3
 8009f62:	f7ff f8a1 	bl	80090a8 <HAL_RCC_GetPCLK2Freq>
 8009f66:	6863      	ldr	r3, [r4, #4]
 8009f68:	4368      	muls	r0, r5
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009f70:	fbb3 f3f9 	udiv	r3, r3, r9
 8009f74:	fb09 8313 	mls	r3, r9, r3, r8
 8009f78:	011b      	lsls	r3, r3, #4
 8009f7a:	3332      	adds	r3, #50	; 0x32
 8009f7c:	fbb3 f3f9 	udiv	r3, r3, r9
 8009f80:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8009f84:	f7ff f890 	bl	80090a8 <HAL_RCC_GetPCLK2Freq>
 8009f88:	6862      	ldr	r2, [r4, #4]
 8009f8a:	4368      	muls	r0, r5
 8009f8c:	0092      	lsls	r2, r2, #2
 8009f8e:	fbb0 faf2 	udiv	sl, r0, r2
 8009f92:	f7ff f889 	bl	80090a8 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8009f96:	6863      	ldr	r3, [r4, #4]
 8009f98:	4368      	muls	r0, r5
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009fa0:	fbb3 f3f9 	udiv	r3, r3, r9
 8009fa4:	fb09 a313 	mls	r3, r9, r3, sl
 8009fa8:	011b      	lsls	r3, r3, #4
 8009faa:	3332      	adds	r3, #50	; 0x32
 8009fac:	fbb3 f3f9 	udiv	r3, r3, r9
 8009fb0:	f003 030f 	and.w	r3, r3, #15
 8009fb4:	ea43 0308 	orr.w	r3, r3, r8
 8009fb8:	e783      	b.n	8009ec2 <UART_SetConfig+0xd2>
 8009fba:	f7ff f865 	bl	8009088 <HAL_RCC_GetPCLK1Freq>
 8009fbe:	6867      	ldr	r7, [r4, #4]
 8009fc0:	2519      	movs	r5, #25
 8009fc2:	f04f 0964 	mov.w	r9, #100	; 0x64
 8009fc6:	fb05 f300 	mul.w	r3, r5, r0
 8009fca:	00bf      	lsls	r7, r7, #2
 8009fcc:	fbb3 f3f7 	udiv	r3, r3, r7
 8009fd0:	fbb3 f3f9 	udiv	r3, r3, r9
 8009fd4:	011f      	lsls	r7, r3, #4
 8009fd6:	f7ff f857 	bl	8009088 <HAL_RCC_GetPCLK1Freq>
 8009fda:	6863      	ldr	r3, [r4, #4]
 8009fdc:	4368      	muls	r0, r5
 8009fde:	009b      	lsls	r3, r3, #2
 8009fe0:	fbb0 f8f3 	udiv	r8, r0, r3
 8009fe4:	f7ff f850 	bl	8009088 <HAL_RCC_GetPCLK1Freq>
 8009fe8:	6863      	ldr	r3, [r4, #4]
 8009fea:	4368      	muls	r0, r5
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8009ff2:	fbb3 f3f9 	udiv	r3, r3, r9
 8009ff6:	fb09 8313 	mls	r3, r9, r3, r8
 8009ffa:	011b      	lsls	r3, r3, #4
 8009ffc:	3332      	adds	r3, #50	; 0x32
 8009ffe:	fbb3 f3f9 	udiv	r3, r3, r9
 800a002:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 800a006:	f7ff f83f 	bl	8009088 <HAL_RCC_GetPCLK1Freq>
 800a00a:	6862      	ldr	r2, [r4, #4]
 800a00c:	4368      	muls	r0, r5
 800a00e:	0092      	lsls	r2, r2, #2
 800a010:	fbb0 faf2 	udiv	sl, r0, r2
 800a014:	f7ff f838 	bl	8009088 <HAL_RCC_GetPCLK1Freq>
 800a018:	e7bd      	b.n	8009f96 <UART_SetConfig+0x1a6>
 800a01a:	bf00      	nop
 800a01c:	40011000 	.word	0x40011000
 800a020:	40011400 	.word	0x40011400

0800a024 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 800a024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a026:	4604      	mov	r4, r0
 800a028:	460e      	mov	r6, r1
 800a02a:	4617      	mov	r7, r2
 800a02c:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800a02e:	6821      	ldr	r1, [r4, #0]
 800a030:	680b      	ldr	r3, [r1, #0]
 800a032:	ea36 0303 	bics.w	r3, r6, r3
 800a036:	d101      	bne.n	800a03c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800a038:	2000      	movs	r0, #0
}
 800a03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 800a03c:	1c6b      	adds	r3, r5, #1
 800a03e:	d0f7      	beq.n	800a030 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800a040:	b995      	cbnz	r5, 800a068 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a042:	6823      	ldr	r3, [r4, #0]
 800a044:	68da      	ldr	r2, [r3, #12]
 800a046:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a04a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a04c:	695a      	ldr	r2, [r3, #20]
 800a04e:	f022 0201 	bic.w	r2, r2, #1
 800a052:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800a054:	2320      	movs	r3, #32
 800a056:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800a05a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800a05e:	2300      	movs	r3, #0
 800a060:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 800a064:	2003      	movs	r0, #3
 800a066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800a068:	f7fe fa4a 	bl	8008500 <HAL_GetTick>
 800a06c:	1bc0      	subs	r0, r0, r7
 800a06e:	4285      	cmp	r5, r0
 800a070:	d2dd      	bcs.n	800a02e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800a072:	e7e6      	b.n	800a042 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

0800a074 <HAL_UART_Init>:
{
 800a074:	b510      	push	{r4, lr}
  if(huart == NULL)
 800a076:	4604      	mov	r4, r0
 800a078:	b340      	cbz	r0, 800a0cc <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800a07a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800a07e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a082:	b91b      	cbnz	r3, 800a08c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800a084:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800a088:	f000 ff16 	bl	800aeb8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800a08c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800a08e:	2324      	movs	r3, #36	; 0x24
 800a090:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 800a094:	68d3      	ldr	r3, [r2, #12]
 800a096:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a09a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800a09c:	4620      	mov	r0, r4
 800a09e:	f7ff fea7 	bl	8009df0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a0a2:	6823      	ldr	r3, [r4, #0]
 800a0a4:	691a      	ldr	r2, [r3, #16]
 800a0a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a0aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a0ac:	695a      	ldr	r2, [r3, #20]
 800a0ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a0b2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800a0b4:	68da      	ldr	r2, [r3, #12]
 800a0b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a0ba:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0bc:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800a0be:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0c0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800a0c2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800a0c6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800a0ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800a0cc:	2001      	movs	r0, #1
}
 800a0ce:	bd10      	pop	{r4, pc}

0800a0d0 <HAL_UART_Transmit>:
{
 800a0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d4:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 800a0d6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800a0da:	2b20      	cmp	r3, #32
{
 800a0dc:	4604      	mov	r4, r0
 800a0de:	460d      	mov	r5, r1
 800a0e0:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 800a0e2:	d14f      	bne.n	800a184 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 800a0e4:	2900      	cmp	r1, #0
 800a0e6:	d04a      	beq.n	800a17e <HAL_UART_Transmit+0xae>
 800a0e8:	2a00      	cmp	r2, #0
 800a0ea:	d048      	beq.n	800a17e <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 800a0ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d047      	beq.n	800a184 <HAL_UART_Transmit+0xb4>
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0fe:	2321      	movs	r3, #33	; 0x21
 800a100:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800a104:	f7fe f9fc 	bl	8008500 <HAL_GetTick>
    huart->TxXferSize = Size;
 800a108:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800a10c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800a10e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 800a112:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800a114:	b29b      	uxth	r3, r3
 800a116:	b96b      	cbnz	r3, 800a134 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a118:	463b      	mov	r3, r7
 800a11a:	4632      	mov	r2, r6
 800a11c:	2140      	movs	r1, #64	; 0x40
 800a11e:	4620      	mov	r0, r4
 800a120:	f7ff ff80 	bl	800a024 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800a124:	b9b0      	cbnz	r0, 800a154 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 800a126:	2320      	movs	r3, #32
 800a128:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800a12c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 800a130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 800a134:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800a136:	3b01      	subs	r3, #1
 800a138:	b29b      	uxth	r3, r3
 800a13a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a13c:	68a3      	ldr	r3, [r4, #8]
 800a13e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a142:	4632      	mov	r2, r6
 800a144:	463b      	mov	r3, r7
 800a146:	f04f 0180 	mov.w	r1, #128	; 0x80
 800a14a:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800a14c:	d10e      	bne.n	800a16c <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a14e:	f7ff ff69 	bl	800a024 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800a152:	b110      	cbz	r0, 800a15a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 800a154:	2003      	movs	r0, #3
 800a156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800a15a:	882b      	ldrh	r3, [r5, #0]
 800a15c:	6822      	ldr	r2, [r4, #0]
 800a15e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a162:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800a164:	6923      	ldr	r3, [r4, #16]
 800a166:	b943      	cbnz	r3, 800a17a <HAL_UART_Transmit+0xaa>
          pData +=2U;
 800a168:	3502      	adds	r5, #2
 800a16a:	e7d2      	b.n	800a112 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a16c:	f7ff ff5a 	bl	800a024 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800a170:	2800      	cmp	r0, #0
 800a172:	d1ef      	bne.n	800a154 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800a174:	6823      	ldr	r3, [r4, #0]
 800a176:	782a      	ldrb	r2, [r5, #0]
 800a178:	605a      	str	r2, [r3, #4]
 800a17a:	3501      	adds	r5, #1
 800a17c:	e7c9      	b.n	800a112 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800a17e:	2001      	movs	r0, #1
 800a180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800a184:	2002      	movs	r0, #2
}
 800a186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800a18c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a19c:	d151      	bne.n	800a242 <HAL_TIM_IC_CaptureCallback+0xb6>
		static uint32_t lastCounterValue;
		uint32_t period = TIM2->CCR1-lastCounterValue;
 800a19e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a1a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1a4:	4b29      	ldr	r3, [pc, #164]	; (800a24c <HAL_TIM_IC_CaptureCallback+0xc0>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	1ad3      	subs	r3, r2, r3
 800a1aa:	60fb      	str	r3, [r7, #12]

		// After an hour or so the 32bit CNT register will overflow, we should mitigate this
		if(TIM2->CNT > 4000000000UL){
 800a1ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a1b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b2:	4a27      	ldr	r2, [pc, #156]	; (800a250 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	bf8c      	ite	hi
 800a1b8:	2301      	movhi	r3, #1
 800a1ba:	2300      	movls	r3, #0
 800a1bc:	b2db      	uxtb	r3, r3
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d007      	beq.n	800a1d2 <HAL_TIM_IC_CaptureCallback+0x46>
			TIM2->CNT = 0;
 800a1c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	625a      	str	r2, [r3, #36]	; 0x24
			lastCounterValue = 0;
 800a1ca:	4b20      	ldr	r3, [pc, #128]	; (800a24c <HAL_TIM_IC_CaptureCallback+0xc0>)
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	601a      	str	r2, [r3, #0]
 800a1d0:	e004      	b.n	800a1dc <HAL_TIM_IC_CaptureCallback+0x50>
		}else{lastCounterValue = TIM2->CNT;}
 800a1d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d8:	4a1c      	ldr	r2, [pc, #112]	; (800a24c <HAL_TIM_IC_CaptureCallback+0xc0>)
 800a1da:	6013      	str	r3, [r2, #0]

		// Average the difference between CNT values, after 2 inputs "lock" the clock enabling outputs
		// This will set the TIM5 timebase and the TIM2 channel 2 timebase.
		if (clock.addPeriodSample(period)) {
 800a1dc:	68f9      	ldr	r1, [r7, #12]
 800a1de:	481d      	ldr	r0, [pc, #116]	; (800a254 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800a1e0:	f001 faaf 	bl	800b742 <_ZN5Clock15addPeriodSampleEj>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	bf14      	ite	ne
 800a1ea:	2301      	movne	r3, #1
 800a1ec:	2300      	moveq	r3, #0
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d023      	beq.n	800a23c <HAL_TIM_IC_CaptureCallback+0xb0>
			clock.masterTick();
 800a1f4:	4817      	ldr	r0, [pc, #92]	; (800a254 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800a1f6:	f001 fb9c 	bl	800b932 <_ZN5Clock10masterTickEv>
			clock.lock();
 800a1fa:	4816      	ldr	r0, [pc, #88]	; (800a254 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800a1fc:	f001 fbd8 	bl	800b9b0 <_ZN5Clock4lockEv>
			clock.slaveTimer->Instance->CNT = 0;
 800a200:	4b14      	ldr	r3, [pc, #80]	; (800a254 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2200      	movs	r2, #0
 800a208:	625a      	str	r2, [r3, #36]	; 0x24
			clock.slaveTimer->Instance->ARR = (clock.averagedPeriod+50)/16;
 800a20a:	4b12      	ldr	r3, [pc, #72]	; (800a254 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a10      	ldr	r2, [pc, #64]	; (800a254 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800a212:	69d2      	ldr	r2, [r2, #28]
 800a214:	3232      	adds	r2, #50	; 0x32
 800a216:	0912      	lsrs	r2, r2, #4
 800a218:	62da      	str	r2, [r3, #44]	; 0x2c
			clock.slaveTimer->Instance->CCR2 = 1000;
 800a21a:	4b0e      	ldr	r3, [pc, #56]	; (800a254 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a224:	639a      	str	r2, [r3, #56]	; 0x38
			// Set timer 2 channel 2 to trigger after the period has elapsed
			clock.masterTimer->Instance->CCR2 = TIM2->CNT+clock.averagedPeriod;
 800a226:	4b0b      	ldr	r3, [pc, #44]	; (800a254 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a230:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800a232:	4a08      	ldr	r2, [pc, #32]	; (800a254 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800a234:	69d2      	ldr	r2, [r2, #28]
 800a236:	440a      	add	r2, r1
 800a238:	639a      	str	r2, [r3, #56]	; 0x38
		}
		else{
			clock.unlock();
		}
	}
}
 800a23a:	e002      	b.n	800a242 <HAL_TIM_IC_CaptureCallback+0xb6>
			clock.unlock();
 800a23c:	4805      	ldr	r0, [pc, #20]	; (800a254 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800a23e:	f001 fbce 	bl	800b9de <_ZN5Clock6unlockEv>
}
 800a242:	bf00      	nop
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	20008c50 	.word	0x20008c50
 800a250:	ee6b2800 	.word	0xee6b2800
 800a254:	200008b0 	.word	0x200008b0

0800a258 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 800a258:	b580      	push	{r7, lr}
 800a25a:	b082      	sub	sp, #8
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a268:	d135      	bne.n	800a2d6 <HAL_TIM_PWM_PulseFinishedCallback+0x7e>
		if(clock.clockSource==INTERNAL){
 800a26a:	4b1d      	ldr	r3, [pc, #116]	; (800a2e0 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 800a26c:	7a1b      	ldrb	r3, [r3, #8]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d115      	bne.n	800a29e <HAL_TIM_PWM_PulseFinishedCallback+0x46>
			clock.lock();
 800a272:	481b      	ldr	r0, [pc, #108]	; (800a2e0 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 800a274:	f001 fb9c 	bl	800b9b0 <_ZN5Clock4lockEv>
			clock.masterTick();
 800a278:	4819      	ldr	r0, [pc, #100]	; (800a2e0 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 800a27a:	f001 fb5a 	bl	800b932 <_ZN5Clock10masterTickEv>
			clock.slaveTimer->Instance->CNT = 0;
 800a27e:	4b18      	ldr	r3, [pc, #96]	; (800a2e0 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	2200      	movs	r2, #0
 800a286:	625a      	str	r2, [r3, #36]	; 0x24
			clock.masterTimer->Instance->CCR2 = TIM2->CNT+clock.period;
 800a288:	4b15      	ldr	r3, [pc, #84]	; (800a2e0 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a292:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800a294:	4a12      	ldr	r2, [pc, #72]	; (800a2e0 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 800a296:	68d2      	ldr	r2, [r2, #12]
 800a298:	440a      	add	r2, r1
 800a29a:	639a      	str	r2, [r3, #56]	; 0x38
 800a29c:	e01b      	b.n	800a2d6 <HAL_TIM_PWM_PulseFinishedCallback+0x7e>

		}
		else if(clock.clockSource==EXTERNAL){
 800a29e:	4b10      	ldr	r3, [pc, #64]	; (800a2e0 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 800a2a0:	7a1b      	ldrb	r3, [r3, #8]
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d117      	bne.n	800a2d6 <HAL_TIM_PWM_PulseFinishedCallback+0x7e>
			// When no tempo is being tapped/clocked in this will be the main time base
			if(clock.isLocked()){
 800a2a6:	480e      	ldr	r0, [pc, #56]	; (800a2e0 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 800a2a8:	f001 fba6 	bl	800b9f8 <_ZN5Clock8isLockedEv>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d011      	beq.n	800a2d6 <HAL_TIM_PWM_PulseFinishedCallback+0x7e>
				clock.masterTick();
 800a2b2:	480b      	ldr	r0, [pc, #44]	; (800a2e0 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 800a2b4:	f001 fb3d 	bl	800b932 <_ZN5Clock10masterTickEv>
				clock.slaveTimer->Instance->CNT = 0;
 800a2b8:	4b09      	ldr	r3, [pc, #36]	; (800a2e0 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	625a      	str	r2, [r3, #36]	; 0x24
				clock.masterTimer->Instance->CCR2 = TIM2->CNT+clock.averagedPeriod;
 800a2c2:	4b07      	ldr	r3, [pc, #28]	; (800a2e0 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a2cc:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800a2ce:	4a04      	ldr	r2, [pc, #16]	; (800a2e0 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 800a2d0:	69d2      	ldr	r2, [r2, #28]
 800a2d2:	440a      	add	r2, r1
 800a2d4:	639a      	str	r2, [r3, #56]	; 0x38
	if(htim->Instance==TIM5){
		// HAL_GPIO_WritePin(OUT1_GPIO_Port,OUT1_Pin,GPIO_PIN_RESET);
		// HAL_GPIO_WritePin(OUT2_GPIO_Port,OUT2_Pin,GPIO_PIN_RESET);
		// HAL_GPIO_WritePin(OUT3_GPIO_Port,OUT3_Pin,GPIO_PIN_RESET);
	}
}
 800a2d6:	bf00      	nop
 800a2d8:	3708      	adds	r7, #8
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	bd80      	pop	{r7, pc}
 800a2de:	bf00      	nop
 800a2e0:	200008b0 	.word	0x200008b0

0800a2e4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b082      	sub	sp, #8
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM5){
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a16      	ldr	r2, [pc, #88]	; (800a34c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d10f      	bne.n	800a316 <HAL_TIM_PeriodElapsedCallback+0x32>
		if(clock.isLocked()){
 800a2f6:	4816      	ldr	r0, [pc, #88]	; (800a350 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800a2f8:	f001 fb7e 	bl	800b9f8 <_ZN5Clock8isLockedEv>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d009      	beq.n	800a316 <HAL_TIM_PeriodElapsedCallback+0x32>
			sequencer.subStepAdvance(&clock);
 800a302:	4913      	ldr	r1, [pc, #76]	; (800a350 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800a304:	4813      	ldr	r0, [pc, #76]	; (800a354 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800a306:	f001 ff09 	bl	800c11c <_ZN9Sequencer14subStepAdvanceEP5Clock>
			sequencer.writeTrigPattern();
 800a30a:	4812      	ldr	r0, [pc, #72]	; (800a354 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800a30c:	f001 fff0 	bl	800c2f0 <_ZN9Sequencer16writeTrigPatternEv>
			clock.subTick();
 800a310:	480f      	ldr	r0, [pc, #60]	; (800a350 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800a312:	f001 fb20 	bl	800b956 <_ZN5Clock7subTickEv>
			// HAL_UART_Transmit(&huart2,(uint8_t*)stringTx,strlen(stringTx),100);

		}
	}
	// Update gui
	if(htim->Instance==TIM10){
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a0f      	ldr	r2, [pc, #60]	; (800a358 <HAL_TIM_PeriodElapsedCallback+0x74>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d111      	bne.n	800a344 <HAL_TIM_PeriodElapsedCallback+0x60>
		sequencer.stepSwitches.spi();
 800a320:	480e      	ldr	r0, [pc, #56]	; (800a35c <HAL_TIM_PeriodElapsedCallback+0x78>)
 800a322:	f002 fa69 	bl	800c7f8 <_ZN8Switches3spiEv>
		sequencer.readWrite();
 800a326:	480b      	ldr	r0, [pc, #44]	; (800a354 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800a328:	f001 fc3c 	bl	800bba4 <_ZN9Sequencer9readWriteEv>
		sequencer.stepSwitches.update(clock.sub);
 800a32c:	4b08      	ldr	r3, [pc, #32]	; (800a350 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800a32e:	699b      	ldr	r3, [r3, #24]
 800a330:	4619      	mov	r1, r3
 800a332:	480a      	ldr	r0, [pc, #40]	; (800a35c <HAL_TIM_PeriodElapsedCallback+0x78>)
 800a334:	f002 fa8c 	bl	800c850 <_ZN8Switches6updateEi>
		sequencer.menuSwitches.update(clock.sub);
 800a338:	4b05      	ldr	r3, [pc, #20]	; (800a350 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800a33a:	699b      	ldr	r3, [r3, #24]
 800a33c:	4619      	mov	r1, r3
 800a33e:	4808      	ldr	r0, [pc, #32]	; (800a360 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800a340:	f002 fa86 	bl	800c850 <_ZN8Switches6updateEi>
	}
}
 800a344:	bf00      	nop
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	40000c00 	.word	0x40000c00
 800a350:	200008b0 	.word	0x200008b0
 800a354:	20000928 	.word	0x20000928
 800a358:	40014400 	.word	0x40014400
 800a35c:	20008b80 	.word	0x20008b80
 800a360:	20008be8 	.word	0x20008be8

0800a364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a364:	b590      	push	{r4, r7, lr}
 800a366:	b097      	sub	sp, #92	; 0x5c
 800a368:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a36a:	f7fe f8a3 	bl	80084b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a36e:	f000 f903 	bl	800a578 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a372:	f000 fbd5 	bl	800ab20 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 800a376:	f000 fa1f 	bl	800a7b8 <_ZL12MX_TIM2_Initv>
  MX_TIM5_Init();
 800a37a:	f000 fad5 	bl	800a928 <_ZL12MX_TIM5_Initv>
  MX_USART2_UART_Init();
 800a37e:	f000 fba1 	bl	800aac4 <_ZL19MX_USART2_UART_Initv>
  MX_SPI1_Init();
 800a382:	f000 f9a1 	bl	800a6c8 <_ZL12MX_SPI1_Initv>
  MX_TIM10_Init();
 800a386:	f000 fb77 	bl	800aa78 <_ZL13MX_TIM10_Initv>
  MX_SPI2_Init();
 800a38a:	f000 f9d9 	bl	800a740 <_ZL12MX_SPI2_Initv>
  MX_I2C1_Init();
 800a38e:	f000 f967 	bl	800a660 <_ZL12MX_I2C1_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim5);
 800a392:	486e      	ldr	r0, [pc, #440]	; (800a54c <main+0x1e8>)
 800a394:	f7ff f901 	bl	800959a <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim5,TIM_CHANNEL_2);
 800a398:	2104      	movs	r1, #4
 800a39a:	486c      	ldr	r0, [pc, #432]	; (800a54c <main+0x1e8>)
 800a39c:	f7ff fca0 	bl	8009ce0 <HAL_TIM_OC_Start_IT>

  clock.setTimer(&htim2,&htim5);
 800a3a0:	4a6a      	ldr	r2, [pc, #424]	; (800a54c <main+0x1e8>)
 800a3a2:	496b      	ldr	r1, [pc, #428]	; (800a550 <main+0x1ec>)
 800a3a4:	486b      	ldr	r0, [pc, #428]	; (800a554 <main+0x1f0>)
 800a3a6:	f001 faf1 	bl	800b98c <_ZN5Clock8setTimerEP17TIM_HandleTypeDefS1_>
  clock.setSource(INTERNAL);
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	4869      	ldr	r0, [pc, #420]	; (800a554 <main+0x1f0>)
 800a3ae:	f001 fb55 	bl	800ba5c <_ZN5Clock9setSourceE11ClockSource>
  clock.setPeriod(5000000);
 800a3b2:	4969      	ldr	r1, [pc, #420]	; (800a558 <main+0x1f4>)
 800a3b4:	4867      	ldr	r0, [pc, #412]	; (800a554 <main+0x1f0>)
 800a3b6:	f001 fb2b 	bl	800ba10 <_ZN5Clock9setPeriodEj>
  clock.setSlaveDivision(192);
 800a3ba:	21c0      	movs	r1, #192	; 0xc0
 800a3bc:	4865      	ldr	r0, [pc, #404]	; (800a554 <main+0x1f0>)
 800a3be:	f001 fb79 	bl	800bab4 <_ZN5Clock16setSlaveDivisionEj>

  HAL_TIM_Base_Start_IT(&htim10);
 800a3c2:	4866      	ldr	r0, [pc, #408]	; (800a55c <main+0x1f8>)
 800a3c4:	f7ff f8e9 	bl	800959a <HAL_TIM_Base_Start_IT>

  shiftRegInit();
 800a3c8:	f002 f8b2 	bl	800c530 <_Z12shiftRegInitv>
  // editSwitches.setLedAll(FULL,PULSE_MODE_8TH);

  char stringTx[32];
  sprintf((char*)stringTx,"HELLO WORLD!");
 800a3cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a3d0:	4a63      	ldr	r2, [pc, #396]	; (800a560 <main+0x1fc>)
 800a3d2:	461c      	mov	r4, r3
 800a3d4:	4613      	mov	r3, r2
 800a3d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a3d8:	c407      	stmia	r4!, {r0, r1, r2}
 800a3da:	7023      	strb	r3, [r4, #0]
  HAL_UART_Transmit(&huart2,(uint8_t*)stringTx,32,10);
 800a3dc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800a3e0:	230a      	movs	r3, #10
 800a3e2:	2220      	movs	r2, #32
 800a3e4:	485f      	ldr	r0, [pc, #380]	; (800a564 <main+0x200>)
 800a3e6:	f7ff fe73 	bl	800a0d0 <HAL_UART_Transmit>

  System_Init();
 800a3ea:	f000 fe0f 	bl	800b00c <System_Init>

  OLED_Init(SCAN_DIR_DFT);//SCAN_DIR_DFT = D2U_L2R
 800a3ee:	2000      	movs	r0, #0
 800a3f0:	f000 fe42 	bl	800b078 <OLED_Init>

  GUI_DrawRectangle(1,1,30,30,0xF,DRAW_EMPTY,DOT_PIXEL_1X1);
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	9302      	str	r3, [sp, #8]
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	9301      	str	r3, [sp, #4]
 800a3fc:	230f      	movs	r3, #15
 800a3fe:	9300      	str	r3, [sp, #0]
 800a400:	231e      	movs	r3, #30
 800a402:	221e      	movs	r2, #30
 800a404:	2101      	movs	r1, #1
 800a406:	2001      	movs	r0, #1
 800a408:	f001 f870 	bl	800b4ec <GUI_DrawRectangle>
  GUI_DisString_EN(5, 5, "PLAY", &Font8, FONT_BACKGROUND, WHITE);
 800a40c:	230f      	movs	r3, #15
 800a40e:	9301      	str	r3, [sp, #4]
 800a410:	2300      	movs	r3, #0
 800a412:	9300      	str	r3, [sp, #0]
 800a414:	4b54      	ldr	r3, [pc, #336]	; (800a568 <main+0x204>)
 800a416:	4a55      	ldr	r2, [pc, #340]	; (800a56c <main+0x208>)
 800a418:	2105      	movs	r1, #5
 800a41a:	2005      	movs	r0, #5
 800a41c:	f001 f92a 	bl	800b674 <GUI_DisString_EN>

  GUI_DrawRectangle(32,1,62,30,0xF,DRAW_EMPTY,DOT_PIXEL_1X1);
 800a420:	2301      	movs	r3, #1
 800a422:	9302      	str	r3, [sp, #8]
 800a424:	2300      	movs	r3, #0
 800a426:	9301      	str	r3, [sp, #4]
 800a428:	230f      	movs	r3, #15
 800a42a:	9300      	str	r3, [sp, #0]
 800a42c:	231e      	movs	r3, #30
 800a42e:	223e      	movs	r2, #62	; 0x3e
 800a430:	2101      	movs	r1, #1
 800a432:	2020      	movs	r0, #32
 800a434:	f001 f85a 	bl	800b4ec <GUI_DrawRectangle>
  GUI_DrawRectangle(64,1,94,30,0xF,DRAW_EMPTY,DOT_PIXEL_1X1);
 800a438:	2301      	movs	r3, #1
 800a43a:	9302      	str	r3, [sp, #8]
 800a43c:	2300      	movs	r3, #0
 800a43e:	9301      	str	r3, [sp, #4]
 800a440:	230f      	movs	r3, #15
 800a442:	9300      	str	r3, [sp, #0]
 800a444:	231e      	movs	r3, #30
 800a446:	225e      	movs	r2, #94	; 0x5e
 800a448:	2101      	movs	r1, #1
 800a44a:	2040      	movs	r0, #64	; 0x40
 800a44c:	f001 f84e 	bl	800b4ec <GUI_DrawRectangle>
  GUI_DrawRectangle(96,1,126,30,0xF,DRAW_EMPTY,DOT_PIXEL_1X1);
 800a450:	2301      	movs	r3, #1
 800a452:	9302      	str	r3, [sp, #8]
 800a454:	2300      	movs	r3, #0
 800a456:	9301      	str	r3, [sp, #4]
 800a458:	230f      	movs	r3, #15
 800a45a:	9300      	str	r3, [sp, #0]
 800a45c:	231e      	movs	r3, #30
 800a45e:	227e      	movs	r2, #126	; 0x7e
 800a460:	2101      	movs	r1, #1
 800a462:	2060      	movs	r0, #96	; 0x60
 800a464:	f001 f842 	bl	800b4ec <GUI_DrawRectangle>

  GUI_DrawRectangle(1,32,30,62,0xF,DRAW_EMPTY,DOT_PIXEL_1X1);
 800a468:	2301      	movs	r3, #1
 800a46a:	9302      	str	r3, [sp, #8]
 800a46c:	2300      	movs	r3, #0
 800a46e:	9301      	str	r3, [sp, #4]
 800a470:	230f      	movs	r3, #15
 800a472:	9300      	str	r3, [sp, #0]
 800a474:	233e      	movs	r3, #62	; 0x3e
 800a476:	221e      	movs	r2, #30
 800a478:	2120      	movs	r1, #32
 800a47a:	2001      	movs	r0, #1
 800a47c:	f001 f836 	bl	800b4ec <GUI_DrawRectangle>
  GUI_DrawRectangle(32,32,62,62,0xF,DRAW_EMPTY,DOT_PIXEL_1X1);
 800a480:	2301      	movs	r3, #1
 800a482:	9302      	str	r3, [sp, #8]
 800a484:	2300      	movs	r3, #0
 800a486:	9301      	str	r3, [sp, #4]
 800a488:	230f      	movs	r3, #15
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	233e      	movs	r3, #62	; 0x3e
 800a48e:	223e      	movs	r2, #62	; 0x3e
 800a490:	2120      	movs	r1, #32
 800a492:	2020      	movs	r0, #32
 800a494:	f001 f82a 	bl	800b4ec <GUI_DrawRectangle>
  GUI_DrawRectangle(64,32,94,62,0xF,DRAW_EMPTY,DOT_PIXEL_1X1);
 800a498:	2301      	movs	r3, #1
 800a49a:	9302      	str	r3, [sp, #8]
 800a49c:	2300      	movs	r3, #0
 800a49e:	9301      	str	r3, [sp, #4]
 800a4a0:	230f      	movs	r3, #15
 800a4a2:	9300      	str	r3, [sp, #0]
 800a4a4:	233e      	movs	r3, #62	; 0x3e
 800a4a6:	225e      	movs	r2, #94	; 0x5e
 800a4a8:	2120      	movs	r1, #32
 800a4aa:	2040      	movs	r0, #64	; 0x40
 800a4ac:	f001 f81e 	bl	800b4ec <GUI_DrawRectangle>
  GUI_DrawRectangle(96,32,126,62,0xF,DRAW_EMPTY,DOT_PIXEL_1X1);
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	9302      	str	r3, [sp, #8]
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	9301      	str	r3, [sp, #4]
 800a4b8:	230f      	movs	r3, #15
 800a4ba:	9300      	str	r3, [sp, #0]
 800a4bc:	233e      	movs	r3, #62	; 0x3e
 800a4be:	227e      	movs	r2, #126	; 0x7e
 800a4c0:	2120      	movs	r1, #32
 800a4c2:	2060      	movs	r0, #96	; 0x60
 800a4c4:	f001 f812 	bl	800b4ec <GUI_DrawRectangle>

  GUI_DisString_EN(5 , 52, "DELTRONIX", &Font8, FONT_BACKGROUND, WHITE);
 800a4c8:	230f      	movs	r3, #15
 800a4ca:	9301      	str	r3, [sp, #4]
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	9300      	str	r3, [sp, #0]
 800a4d0:	4b25      	ldr	r3, [pc, #148]	; (800a568 <main+0x204>)
 800a4d2:	4a27      	ldr	r2, [pc, #156]	; (800a570 <main+0x20c>)
 800a4d4:	2134      	movs	r1, #52	; 0x34
 800a4d6:	2005      	movs	r0, #5
 800a4d8:	f001 f8cc 	bl	800b674 <GUI_DisString_EN>


  OLED_Display();
 800a4dc:	f000 fea6 	bl	800b22c <OLED_Display>

 unsigned int temp;

  while (1)
  {
	  if((temp != clock.sub)){
 800a4e0:	4b1c      	ldr	r3, [pc, #112]	; (800a554 <main+0x1f0>)
 800a4e2:	699a      	ldr	r2, [r3, #24]
 800a4e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	bf14      	ite	ne
 800a4ea:	2301      	movne	r3, #1
 800a4ec:	2300      	moveq	r3, #0
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d0f5      	beq.n	800a4e0 <main+0x17c>
			char stringTx[32];

			if (!clock.sub){
 800a4f4:	4b17      	ldr	r3, [pc, #92]	; (800a554 <main+0x1f0>)
 800a4f6:	699b      	ldr	r3, [r3, #24]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	bf0c      	ite	eq
 800a4fc:	2301      	moveq	r3, #1
 800a4fe:	2300      	movne	r3, #0
 800a500:	b2db      	uxtb	r3, r3
 800a502:	2b00      	cmp	r3, #0
 800a504:	d0ec      	beq.n	800a4e0 <main+0x17c>
			OLED_ClearWindow(0,60,127,90,0);
 800a506:	2300      	movs	r3, #0
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	235a      	movs	r3, #90	; 0x5a
 800a50c:	227f      	movs	r2, #127	; 0x7f
 800a50e:	213c      	movs	r1, #60	; 0x3c
 800a510:	2000      	movs	r0, #0
 800a512:	f000 feaf 	bl	800b274 <OLED_ClearWindow>
			stringTx[0]='\0';
 800a516:	2300      	movs	r3, #0
 800a518:	713b      	strb	r3, [r7, #4]
			sprintf((char*)stringTx," M: %d S: %d",clock.master,clock.sub);
 800a51a:	4b0e      	ldr	r3, [pc, #56]	; (800a554 <main+0x1f0>)
 800a51c:	695a      	ldr	r2, [r3, #20]
 800a51e:	4b0d      	ldr	r3, [pc, #52]	; (800a554 <main+0x1f0>)
 800a520:	699b      	ldr	r3, [r3, #24]
 800a522:	1d38      	adds	r0, r7, #4
 800a524:	4913      	ldr	r1, [pc, #76]	; (800a574 <main+0x210>)
 800a526:	f007 f859 	bl	80115dc <sprintf>
			GUI_DisString_EN(5,62, stringTx, &Font8, FONT_BACKGROUND, WHITE);
 800a52a:	1d3a      	adds	r2, r7, #4
 800a52c:	230f      	movs	r3, #15
 800a52e:	9301      	str	r3, [sp, #4]
 800a530:	2300      	movs	r3, #0
 800a532:	9300      	str	r3, [sp, #0]
 800a534:	4b0c      	ldr	r3, [pc, #48]	; (800a568 <main+0x204>)
 800a536:	213e      	movs	r1, #62	; 0x3e
 800a538:	2005      	movs	r0, #5
 800a53a:	f001 f89b 	bl	800b674 <GUI_DisString_EN>

			OLED_DisWindow(0, 60, 127, 90);
 800a53e:	235a      	movs	r3, #90	; 0x5a
 800a540:	227f      	movs	r2, #127	; 0x7f
 800a542:	213c      	movs	r1, #60	; 0x3c
 800a544:	2000      	movs	r0, #0
 800a546:	f000 fec5 	bl	800b2d4 <OLED_DisWindow>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800a54a:	e7c9      	b.n	800a4e0 <main+0x17c>
 800a54c:	200007f8 	.word	0x200007f8
 800a550:	200007bc 	.word	0x200007bc
 800a554:	200008b0 	.word	0x200008b0
 800a558:	004c4b40 	.word	0x004c4b40
 800a55c:	20000834 	.word	0x20000834
 800a560:	08017688 	.word	0x08017688
 800a564:	20000870 	.word	0x20000870
 800a568:	20000010 	.word	0x20000010
 800a56c:	08017698 	.word	0x08017698
 800a570:	080176a0 	.word	0x080176a0
 800a574:	080176ac 	.word	0x080176ac

0800a578 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b094      	sub	sp, #80	; 0x50
 800a57c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a57e:	f107 0320 	add.w	r3, r7, #32
 800a582:	2230      	movs	r2, #48	; 0x30
 800a584:	2100      	movs	r1, #0
 800a586:	4618      	mov	r0, r3
 800a588:	f006 fd88 	bl	801109c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a58c:	f107 030c 	add.w	r3, r7, #12
 800a590:	2200      	movs	r2, #0
 800a592:	601a      	str	r2, [r3, #0]
 800a594:	605a      	str	r2, [r3, #4]
 800a596:	609a      	str	r2, [r3, #8]
 800a598:	60da      	str	r2, [r3, #12]
 800a59a:	611a      	str	r2, [r3, #16]

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a59c:	2300      	movs	r3, #0
 800a59e:	60bb      	str	r3, [r7, #8]
 800a5a0:	4a2d      	ldr	r2, [pc, #180]	; (800a658 <_Z18SystemClock_Configv+0xe0>)
 800a5a2:	4b2d      	ldr	r3, [pc, #180]	; (800a658 <_Z18SystemClock_Configv+0xe0>)
 800a5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5aa:	6413      	str	r3, [r2, #64]	; 0x40
 800a5ac:	4b2a      	ldr	r3, [pc, #168]	; (800a658 <_Z18SystemClock_Configv+0xe0>)
 800a5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5b4:	60bb      	str	r3, [r7, #8]
 800a5b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	607b      	str	r3, [r7, #4]
 800a5bc:	4a27      	ldr	r2, [pc, #156]	; (800a65c <_Z18SystemClock_Configv+0xe4>)
 800a5be:	4b27      	ldr	r3, [pc, #156]	; (800a65c <_Z18SystemClock_Configv+0xe4>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a5c6:	6013      	str	r3, [r2, #0]
 800a5c8:	4b24      	ldr	r3, [pc, #144]	; (800a65c <_Z18SystemClock_Configv+0xe4>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a5d0:	607b      	str	r3, [r7, #4]
 800a5d2:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800a5d4:	2302      	movs	r3, #2
 800a5d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a5dc:	2310      	movs	r3, #16
 800a5de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800a5e8:	2308      	movs	r3, #8
 800a5ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800a5ec:	23a8      	movs	r3, #168	; 0xa8
 800a5ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800a5f4:	2304      	movs	r3, #4
 800a5f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a5f8:	f107 0320 	add.w	r3, r7, #32
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7fe faf9 	bl	8008bf4 <HAL_RCC_OscConfig>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	bf14      	ite	ne
 800a608:	2301      	movne	r3, #1
 800a60a:	2300      	moveq	r3, #0
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d001      	beq.n	800a616 <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800a612:	f000 faeb 	bl	800abec <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a616:	230f      	movs	r3, #15
 800a618:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a61a:	2302      	movs	r3, #2
 800a61c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a61e:	2300      	movs	r3, #0
 800a620:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a622:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a626:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800a628:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a62c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a62e:	f107 030c 	add.w	r3, r7, #12
 800a632:	2105      	movs	r1, #5
 800a634:	4618      	mov	r0, r3
 800a636:	f7fe fc8d 	bl	8008f54 <HAL_RCC_ClockConfig>
 800a63a:	4603      	mov	r3, r0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	bf14      	ite	ne
 800a640:	2301      	movne	r3, #1
 800a642:	2300      	moveq	r3, #0
 800a644:	b2db      	uxtb	r3, r3
 800a646:	2b00      	cmp	r3, #0
 800a648:	d001      	beq.n	800a64e <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800a64a:	f000 facf 	bl	800abec <Error_Handler>
  }
}
 800a64e:	bf00      	nop
 800a650:	3750      	adds	r7, #80	; 0x50
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	40023800 	.word	0x40023800
 800a65c:	40007000 	.word	0x40007000

0800a660 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a664:	4b15      	ldr	r3, [pc, #84]	; (800a6bc <_ZL12MX_I2C1_Initv+0x5c>)
 800a666:	4a16      	ldr	r2, [pc, #88]	; (800a6c0 <_ZL12MX_I2C1_Initv+0x60>)
 800a668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800a66a:	4b14      	ldr	r3, [pc, #80]	; (800a6bc <_ZL12MX_I2C1_Initv+0x5c>)
 800a66c:	4a15      	ldr	r2, [pc, #84]	; (800a6c4 <_ZL12MX_I2C1_Initv+0x64>)
 800a66e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a670:	4b12      	ldr	r3, [pc, #72]	; (800a6bc <_ZL12MX_I2C1_Initv+0x5c>)
 800a672:	2200      	movs	r2, #0
 800a674:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a676:	4b11      	ldr	r3, [pc, #68]	; (800a6bc <_ZL12MX_I2C1_Initv+0x5c>)
 800a678:	2200      	movs	r2, #0
 800a67a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a67c:	4b0f      	ldr	r3, [pc, #60]	; (800a6bc <_ZL12MX_I2C1_Initv+0x5c>)
 800a67e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a682:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a684:	4b0d      	ldr	r3, [pc, #52]	; (800a6bc <_ZL12MX_I2C1_Initv+0x5c>)
 800a686:	2200      	movs	r2, #0
 800a688:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a68a:	4b0c      	ldr	r3, [pc, #48]	; (800a6bc <_ZL12MX_I2C1_Initv+0x5c>)
 800a68c:	2200      	movs	r2, #0
 800a68e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a690:	4b0a      	ldr	r3, [pc, #40]	; (800a6bc <_ZL12MX_I2C1_Initv+0x5c>)
 800a692:	2200      	movs	r2, #0
 800a694:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a696:	4b09      	ldr	r3, [pc, #36]	; (800a6bc <_ZL12MX_I2C1_Initv+0x5c>)
 800a698:	2200      	movs	r2, #0
 800a69a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a69c:	4807      	ldr	r0, [pc, #28]	; (800a6bc <_ZL12MX_I2C1_Initv+0x5c>)
 800a69e:	f7fe f965 	bl	800896c <HAL_I2C_Init>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	bf14      	ite	ne
 800a6a8:	2301      	movne	r3, #1
 800a6aa:	2300      	moveq	r3, #0
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800a6b2:	f000 fa9b 	bl	800abec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a6b6:	bf00      	nop
 800a6b8:	bd80      	pop	{r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	200006b8 	.word	0x200006b8
 800a6c0:	40005400 	.word	0x40005400
 800a6c4:	000186a0 	.word	0x000186a0

0800a6c8 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800a6cc:	4b1a      	ldr	r3, [pc, #104]	; (800a738 <_ZL12MX_SPI1_Initv+0x70>)
 800a6ce:	4a1b      	ldr	r2, [pc, #108]	; (800a73c <_ZL12MX_SPI1_Initv+0x74>)
 800a6d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a6d2:	4b19      	ldr	r3, [pc, #100]	; (800a738 <_ZL12MX_SPI1_Initv+0x70>)
 800a6d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a6d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a6da:	4b17      	ldr	r3, [pc, #92]	; (800a738 <_ZL12MX_SPI1_Initv+0x70>)
 800a6dc:	2200      	movs	r2, #0
 800a6de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a6e0:	4b15      	ldr	r3, [pc, #84]	; (800a738 <_ZL12MX_SPI1_Initv+0x70>)
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a6e6:	4b14      	ldr	r3, [pc, #80]	; (800a738 <_ZL12MX_SPI1_Initv+0x70>)
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a6ec:	4b12      	ldr	r3, [pc, #72]	; (800a738 <_ZL12MX_SPI1_Initv+0x70>)
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a6f2:	4b11      	ldr	r3, [pc, #68]	; (800a738 <_ZL12MX_SPI1_Initv+0x70>)
 800a6f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800a6fa:	4b0f      	ldr	r3, [pc, #60]	; (800a738 <_ZL12MX_SPI1_Initv+0x70>)
 800a6fc:	2220      	movs	r2, #32
 800a6fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a700:	4b0d      	ldr	r3, [pc, #52]	; (800a738 <_ZL12MX_SPI1_Initv+0x70>)
 800a702:	2200      	movs	r2, #0
 800a704:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a706:	4b0c      	ldr	r3, [pc, #48]	; (800a738 <_ZL12MX_SPI1_Initv+0x70>)
 800a708:	2200      	movs	r2, #0
 800a70a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a70c:	4b0a      	ldr	r3, [pc, #40]	; (800a738 <_ZL12MX_SPI1_Initv+0x70>)
 800a70e:	2200      	movs	r2, #0
 800a710:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800a712:	4b09      	ldr	r3, [pc, #36]	; (800a738 <_ZL12MX_SPI1_Initv+0x70>)
 800a714:	220a      	movs	r2, #10
 800a716:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a718:	4807      	ldr	r0, [pc, #28]	; (800a738 <_ZL12MX_SPI1_Initv+0x70>)
 800a71a:	f7fe fd2c 	bl	8009176 <HAL_SPI_Init>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	bf14      	ite	ne
 800a724:	2301      	movne	r3, #1
 800a726:	2300      	moveq	r3, #0
 800a728:	b2db      	uxtb	r3, r3
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d001      	beq.n	800a732 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800a72e:	f000 fa5d 	bl	800abec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a732:	bf00      	nop
 800a734:	bd80      	pop	{r7, pc}
 800a736:	bf00      	nop
 800a738:	2000070c 	.word	0x2000070c
 800a73c:	40013000 	.word	0x40013000

0800a740 <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800a744:	4b1a      	ldr	r3, [pc, #104]	; (800a7b0 <_ZL12MX_SPI2_Initv+0x70>)
 800a746:	4a1b      	ldr	r2, [pc, #108]	; (800a7b4 <_ZL12MX_SPI2_Initv+0x74>)
 800a748:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800a74a:	4b19      	ldr	r3, [pc, #100]	; (800a7b0 <_ZL12MX_SPI2_Initv+0x70>)
 800a74c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a750:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800a752:	4b17      	ldr	r3, [pc, #92]	; (800a7b0 <_ZL12MX_SPI2_Initv+0x70>)
 800a754:	2200      	movs	r2, #0
 800a756:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800a758:	4b15      	ldr	r3, [pc, #84]	; (800a7b0 <_ZL12MX_SPI2_Initv+0x70>)
 800a75a:	2200      	movs	r2, #0
 800a75c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a75e:	4b14      	ldr	r3, [pc, #80]	; (800a7b0 <_ZL12MX_SPI2_Initv+0x70>)
 800a760:	2200      	movs	r2, #0
 800a762:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a764:	4b12      	ldr	r3, [pc, #72]	; (800a7b0 <_ZL12MX_SPI2_Initv+0x70>)
 800a766:	2200      	movs	r2, #0
 800a768:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800a76a:	4b11      	ldr	r3, [pc, #68]	; (800a7b0 <_ZL12MX_SPI2_Initv+0x70>)
 800a76c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a770:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a772:	4b0f      	ldr	r3, [pc, #60]	; (800a7b0 <_ZL12MX_SPI2_Initv+0x70>)
 800a774:	2200      	movs	r2, #0
 800a776:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a778:	4b0d      	ldr	r3, [pc, #52]	; (800a7b0 <_ZL12MX_SPI2_Initv+0x70>)
 800a77a:	2200      	movs	r2, #0
 800a77c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800a77e:	4b0c      	ldr	r3, [pc, #48]	; (800a7b0 <_ZL12MX_SPI2_Initv+0x70>)
 800a780:	2200      	movs	r2, #0
 800a782:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a784:	4b0a      	ldr	r3, [pc, #40]	; (800a7b0 <_ZL12MX_SPI2_Initv+0x70>)
 800a786:	2200      	movs	r2, #0
 800a788:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800a78a:	4b09      	ldr	r3, [pc, #36]	; (800a7b0 <_ZL12MX_SPI2_Initv+0x70>)
 800a78c:	220a      	movs	r2, #10
 800a78e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800a790:	4807      	ldr	r0, [pc, #28]	; (800a7b0 <_ZL12MX_SPI2_Initv+0x70>)
 800a792:	f7fe fcf0 	bl	8009176 <HAL_SPI_Init>
 800a796:	4603      	mov	r3, r0
 800a798:	2b00      	cmp	r3, #0
 800a79a:	bf14      	ite	ne
 800a79c:	2301      	movne	r3, #1
 800a79e:	2300      	moveq	r3, #0
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d001      	beq.n	800a7aa <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 800a7a6:	f000 fa21 	bl	800abec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800a7aa:	bf00      	nop
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	20000764 	.word	0x20000764
 800a7b4:	40003800 	.word	0x40003800

0800a7b8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b092      	sub	sp, #72	; 0x48
 800a7bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a7be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	601a      	str	r2, [r3, #0]
 800a7c6:	605a      	str	r2, [r3, #4]
 800a7c8:	609a      	str	r2, [r3, #8]
 800a7ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a7cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800a7d6:	f107 0320 	add.w	r3, r7, #32
 800a7da:	2200      	movs	r2, #0
 800a7dc:	601a      	str	r2, [r3, #0]
 800a7de:	605a      	str	r2, [r3, #4]
 800a7e0:	609a      	str	r2, [r3, #8]
 800a7e2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a7e4:	1d3b      	adds	r3, r7, #4
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	601a      	str	r2, [r3, #0]
 800a7ea:	605a      	str	r2, [r3, #4]
 800a7ec:	609a      	str	r2, [r3, #8]
 800a7ee:	60da      	str	r2, [r3, #12]
 800a7f0:	611a      	str	r2, [r3, #16]
 800a7f2:	615a      	str	r2, [r3, #20]
 800a7f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a7f6:	4b4a      	ldr	r3, [pc, #296]	; (800a920 <_ZL12MX_TIM2_Initv+0x168>)
 800a7f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a7fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41;
 800a7fe:	4b48      	ldr	r3, [pc, #288]	; (800a920 <_ZL12MX_TIM2_Initv+0x168>)
 800a800:	2229      	movs	r2, #41	; 0x29
 800a802:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a804:	4b46      	ldr	r3, [pc, #280]	; (800a920 <_ZL12MX_TIM2_Initv+0x168>)
 800a806:	2200      	movs	r2, #0
 800a808:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000000000;
 800a80a:	4b45      	ldr	r3, [pc, #276]	; (800a920 <_ZL12MX_TIM2_Initv+0x168>)
 800a80c:	4a45      	ldr	r2, [pc, #276]	; (800a924 <_ZL12MX_TIM2_Initv+0x16c>)
 800a80e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a810:	4b43      	ldr	r3, [pc, #268]	; (800a920 <_ZL12MX_TIM2_Initv+0x168>)
 800a812:	2200      	movs	r2, #0
 800a814:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a816:	4842      	ldr	r0, [pc, #264]	; (800a920 <_ZL12MX_TIM2_Initv+0x168>)
 800a818:	f7ff f8ae 	bl	8009978 <HAL_TIM_Base_Init>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	bf14      	ite	ne
 800a822:	2301      	movne	r3, #1
 800a824:	2300      	moveq	r3, #0
 800a826:	b2db      	uxtb	r3, r3
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d001      	beq.n	800a830 <_ZL12MX_TIM2_Initv+0x78>
  {
    Error_Handler();
 800a82c:	f000 f9de 	bl	800abec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a834:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a836:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a83a:	4619      	mov	r1, r3
 800a83c:	4838      	ldr	r0, [pc, #224]	; (800a920 <_ZL12MX_TIM2_Initv+0x168>)
 800a83e:	f7fe feb9 	bl	80095b4 <HAL_TIM_ConfigClockSource>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	bf14      	ite	ne
 800a848:	2301      	movne	r3, #1
 800a84a:	2300      	moveq	r3, #0
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d001      	beq.n	800a856 <_ZL12MX_TIM2_Initv+0x9e>
  {
    Error_Handler();
 800a852:	f000 f9cb 	bl	800abec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800a856:	4832      	ldr	r0, [pc, #200]	; (800a920 <_ZL12MX_TIM2_Initv+0x168>)
 800a858:	f7ff f8c2 	bl	80099e0 <HAL_TIM_IC_Init>
 800a85c:	4603      	mov	r3, r0
 800a85e:	2b00      	cmp	r3, #0
 800a860:	bf14      	ite	ne
 800a862:	2301      	movne	r3, #1
 800a864:	2300      	moveq	r3, #0
 800a866:	b2db      	uxtb	r3, r3
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d001      	beq.n	800a870 <_ZL12MX_TIM2_Initv+0xb8>
  {
    Error_Handler();
 800a86c:	f000 f9be 	bl	800abec <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800a870:	482b      	ldr	r0, [pc, #172]	; (800a920 <_ZL12MX_TIM2_Initv+0x168>)
 800a872:	f7ff f89b 	bl	80099ac <HAL_TIM_OC_Init>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	bf14      	ite	ne
 800a87c:	2301      	movne	r3, #1
 800a87e:	2300      	moveq	r3, #0
 800a880:	b2db      	uxtb	r3, r3
 800a882:	2b00      	cmp	r3, #0
 800a884:	d001      	beq.n	800a88a <_ZL12MX_TIM2_Initv+0xd2>
  {
    Error_Handler();
 800a886:	f000 f9b1 	bl	800abec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a88a:	2300      	movs	r3, #0
 800a88c:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800a88e:	2380      	movs	r3, #128	; 0x80
 800a890:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a892:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a896:	4619      	mov	r1, r3
 800a898:	4821      	ldr	r0, [pc, #132]	; (800a920 <_ZL12MX_TIM2_Initv+0x168>)
 800a89a:	f7ff fa85 	bl	8009da8 <HAL_TIMEx_MasterConfigSynchronization>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	bf14      	ite	ne
 800a8a4:	2301      	movne	r3, #1
 800a8a6:	2300      	moveq	r3, #0
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d001      	beq.n	800a8b2 <_ZL12MX_TIM2_Initv+0xfa>
  {
    Error_Handler();
 800a8ae:	f000 f99d 	bl	800abec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 800a8be:	2300      	movs	r3, #0
 800a8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800a8c2:	f107 0320 	add.w	r3, r7, #32
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	4815      	ldr	r0, [pc, #84]	; (800a920 <_ZL12MX_TIM2_Initv+0x168>)
 800a8cc:	f7ff f8dc 	bl	8009a88 <HAL_TIM_IC_ConfigChannel>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	bf14      	ite	ne
 800a8d6:	2301      	movne	r3, #1
 800a8d8:	2300      	moveq	r3, #0
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d001      	beq.n	800a8e4 <_ZL12MX_TIM2_Initv+0x12c>
  {
    Error_Handler();
 800a8e0:	f000 f984 	bl	800abec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 800a8e8:	f242 7310 	movw	r3, #10000	; 0x2710
 800a8ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a8f6:	1d3b      	adds	r3, r7, #4
 800a8f8:	2204      	movs	r2, #4
 800a8fa:	4619      	mov	r1, r3
 800a8fc:	4808      	ldr	r0, [pc, #32]	; (800a920 <_ZL12MX_TIM2_Initv+0x168>)
 800a8fe:	f7ff f97b 	bl	8009bf8 <HAL_TIM_OC_ConfigChannel>
 800a902:	4603      	mov	r3, r0
 800a904:	2b00      	cmp	r3, #0
 800a906:	bf14      	ite	ne
 800a908:	2301      	movne	r3, #1
 800a90a:	2300      	moveq	r3, #0
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d001      	beq.n	800a916 <_ZL12MX_TIM2_Initv+0x15e>
  {
    Error_Handler();
 800a912:	f000 f96b 	bl	800abec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a916:	bf00      	nop
 800a918:	3748      	adds	r7, #72	; 0x48
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	200007bc 	.word	0x200007bc
 800a924:	ee6b2800 	.word	0xee6b2800

0800a928 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b092      	sub	sp, #72	; 0x48
 800a92c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a92e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a932:	2200      	movs	r2, #0
 800a934:	601a      	str	r2, [r3, #0]
 800a936:	605a      	str	r2, [r3, #4]
 800a938:	609a      	str	r2, [r3, #8]
 800a93a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800a93c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a940:	2200      	movs	r2, #0
 800a942:	601a      	str	r2, [r3, #0]
 800a944:	605a      	str	r2, [r3, #4]
 800a946:	609a      	str	r2, [r3, #8]
 800a948:	60da      	str	r2, [r3, #12]
 800a94a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a94c:	f107 031c 	add.w	r3, r7, #28
 800a950:	2200      	movs	r2, #0
 800a952:	601a      	str	r2, [r3, #0]
 800a954:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a956:	463b      	mov	r3, r7
 800a958:	2200      	movs	r2, #0
 800a95a:	601a      	str	r2, [r3, #0]
 800a95c:	605a      	str	r2, [r3, #4]
 800a95e:	609a      	str	r2, [r3, #8]
 800a960:	60da      	str	r2, [r3, #12]
 800a962:	611a      	str	r2, [r3, #16]
 800a964:	615a      	str	r2, [r3, #20]
 800a966:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800a968:	4b40      	ldr	r3, [pc, #256]	; (800aa6c <_ZL12MX_TIM5_Initv+0x144>)
 800a96a:	4a41      	ldr	r2, [pc, #260]	; (800aa70 <_ZL12MX_TIM5_Initv+0x148>)
 800a96c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 41;
 800a96e:	4b3f      	ldr	r3, [pc, #252]	; (800aa6c <_ZL12MX_TIM5_Initv+0x144>)
 800a970:	2229      	movs	r2, #41	; 0x29
 800a972:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a974:	4b3d      	ldr	r3, [pc, #244]	; (800aa6c <_ZL12MX_TIM5_Initv+0x144>)
 800a976:	2200      	movs	r2, #0
 800a978:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4000000000;
 800a97a:	4b3c      	ldr	r3, [pc, #240]	; (800aa6c <_ZL12MX_TIM5_Initv+0x144>)
 800a97c:	4a3d      	ldr	r2, [pc, #244]	; (800aa74 <_ZL12MX_TIM5_Initv+0x14c>)
 800a97e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a980:	4b3a      	ldr	r3, [pc, #232]	; (800aa6c <_ZL12MX_TIM5_Initv+0x144>)
 800a982:	2200      	movs	r2, #0
 800a984:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800a986:	4839      	ldr	r0, [pc, #228]	; (800aa6c <_ZL12MX_TIM5_Initv+0x144>)
 800a988:	f7fe fff6 	bl	8009978 <HAL_TIM_Base_Init>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	bf14      	ite	ne
 800a992:	2301      	movne	r3, #1
 800a994:	2300      	moveq	r3, #0
 800a996:	b2db      	uxtb	r3, r3
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d001      	beq.n	800a9a0 <_ZL12MX_TIM5_Initv+0x78>
  {
    Error_Handler();
 800a99c:	f000 f926 	bl	800abec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a9a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9a4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800a9a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a9aa:	4619      	mov	r1, r3
 800a9ac:	482f      	ldr	r0, [pc, #188]	; (800aa6c <_ZL12MX_TIM5_Initv+0x144>)
 800a9ae:	f7fe fe01 	bl	80095b4 <HAL_TIM_ConfigClockSource>
 800a9b2:	4603      	mov	r3, r0
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	bf14      	ite	ne
 800a9b8:	2301      	movne	r3, #1
 800a9ba:	2300      	moveq	r3, #0
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d001      	beq.n	800a9c6 <_ZL12MX_TIM5_Initv+0x9e>
  {
    Error_Handler();
 800a9c2:	f000 f913 	bl	800abec <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 800a9c6:	4829      	ldr	r0, [pc, #164]	; (800aa6c <_ZL12MX_TIM5_Initv+0x144>)
 800a9c8:	f7fe fff0 	bl	80099ac <HAL_TIM_OC_Init>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	bf14      	ite	ne
 800a9d2:	2301      	movne	r3, #1
 800a9d4:	2300      	moveq	r3, #0
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d001      	beq.n	800a9e0 <_ZL12MX_TIM5_Initv+0xb8>
  {
    Error_Handler();
 800a9dc:	f000 f906 	bl	800abec <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800a9e0:	2304      	movs	r3, #4
 800a9e2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchronization(&htim5, &sSlaveConfig) != HAL_OK)
 800a9e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	481f      	ldr	r0, [pc, #124]	; (800aa6c <_ZL12MX_TIM5_Initv+0x144>)
 800a9f0:	f7fe fe99 	bl	8009726 <HAL_TIM_SlaveConfigSynchronization>
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	bf14      	ite	ne
 800a9fa:	2301      	movne	r3, #1
 800a9fc:	2300      	moveq	r3, #0
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d001      	beq.n	800aa08 <_ZL12MX_TIM5_Initv+0xe0>
  {
    Error_Handler();
 800aa04:	f000 f8f2 	bl	800abec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800aa10:	f107 031c 	add.w	r3, r7, #28
 800aa14:	4619      	mov	r1, r3
 800aa16:	4815      	ldr	r0, [pc, #84]	; (800aa6c <_ZL12MX_TIM5_Initv+0x144>)
 800aa18:	f7ff f9c6 	bl	8009da8 <HAL_TIMEx_MasterConfigSynchronization>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	bf14      	ite	ne
 800aa22:	2301      	movne	r3, #1
 800aa24:	2300      	moveq	r3, #0
 800aa26:	b2db      	uxtb	r3, r3
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d001      	beq.n	800aa30 <_ZL12MX_TIM5_Initv+0x108>
  {
    Error_Handler();
 800aa2c:	f000 f8de 	bl	800abec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800aa30:	2300      	movs	r3, #0
 800aa32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000;
 800aa34:	f242 7310 	movw	r3, #10000	; 0x2710
 800aa38:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800aa42:	463b      	mov	r3, r7
 800aa44:	2204      	movs	r2, #4
 800aa46:	4619      	mov	r1, r3
 800aa48:	4808      	ldr	r0, [pc, #32]	; (800aa6c <_ZL12MX_TIM5_Initv+0x144>)
 800aa4a:	f7ff f8d5 	bl	8009bf8 <HAL_TIM_OC_ConfigChannel>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	bf14      	ite	ne
 800aa54:	2301      	movne	r3, #1
 800aa56:	2300      	moveq	r3, #0
 800aa58:	b2db      	uxtb	r3, r3
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d001      	beq.n	800aa62 <_ZL12MX_TIM5_Initv+0x13a>
  {
    Error_Handler();
 800aa5e:	f000 f8c5 	bl	800abec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800aa62:	bf00      	nop
 800aa64:	3748      	adds	r7, #72	; 0x48
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
 800aa6a:	bf00      	nop
 800aa6c:	200007f8 	.word	0x200007f8
 800aa70:	40000c00 	.word	0x40000c00
 800aa74:	ee6b2800 	.word	0xee6b2800

0800aa78 <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800aa7c:	4b0f      	ldr	r3, [pc, #60]	; (800aabc <_ZL13MX_TIM10_Initv+0x44>)
 800aa7e:	4a10      	ldr	r2, [pc, #64]	; (800aac0 <_ZL13MX_TIM10_Initv+0x48>)
 800aa80:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 41;
 800aa82:	4b0e      	ldr	r3, [pc, #56]	; (800aabc <_ZL13MX_TIM10_Initv+0x44>)
 800aa84:	2229      	movs	r2, #41	; 0x29
 800aa86:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aa88:	4b0c      	ldr	r3, [pc, #48]	; (800aabc <_ZL13MX_TIM10_Initv+0x44>)
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 800;
 800aa8e:	4b0b      	ldr	r3, [pc, #44]	; (800aabc <_ZL13MX_TIM10_Initv+0x44>)
 800aa90:	f44f 7248 	mov.w	r2, #800	; 0x320
 800aa94:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aa96:	4b09      	ldr	r3, [pc, #36]	; (800aabc <_ZL13MX_TIM10_Initv+0x44>)
 800aa98:	2200      	movs	r2, #0
 800aa9a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800aa9c:	4807      	ldr	r0, [pc, #28]	; (800aabc <_ZL13MX_TIM10_Initv+0x44>)
 800aa9e:	f7fe ff6b 	bl	8009978 <HAL_TIM_Base_Init>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	bf14      	ite	ne
 800aaa8:	2301      	movne	r3, #1
 800aaaa:	2300      	moveq	r3, #0
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d001      	beq.n	800aab6 <_ZL13MX_TIM10_Initv+0x3e>
  {
    Error_Handler();
 800aab2:	f000 f89b 	bl	800abec <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800aab6:	bf00      	nop
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	20000834 	.word	0x20000834
 800aac0:	40014400 	.word	0x40014400

0800aac4 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800aac8:	4b13      	ldr	r3, [pc, #76]	; (800ab18 <_ZL19MX_USART2_UART_Initv+0x54>)
 800aaca:	4a14      	ldr	r2, [pc, #80]	; (800ab1c <_ZL19MX_USART2_UART_Initv+0x58>)
 800aacc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800aace:	4b12      	ldr	r3, [pc, #72]	; (800ab18 <_ZL19MX_USART2_UART_Initv+0x54>)
 800aad0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800aad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800aad6:	4b10      	ldr	r3, [pc, #64]	; (800ab18 <_ZL19MX_USART2_UART_Initv+0x54>)
 800aad8:	2200      	movs	r2, #0
 800aada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800aadc:	4b0e      	ldr	r3, [pc, #56]	; (800ab18 <_ZL19MX_USART2_UART_Initv+0x54>)
 800aade:	2200      	movs	r2, #0
 800aae0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800aae2:	4b0d      	ldr	r3, [pc, #52]	; (800ab18 <_ZL19MX_USART2_UART_Initv+0x54>)
 800aae4:	2200      	movs	r2, #0
 800aae6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800aae8:	4b0b      	ldr	r3, [pc, #44]	; (800ab18 <_ZL19MX_USART2_UART_Initv+0x54>)
 800aaea:	220c      	movs	r2, #12
 800aaec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aaee:	4b0a      	ldr	r3, [pc, #40]	; (800ab18 <_ZL19MX_USART2_UART_Initv+0x54>)
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800aaf4:	4b08      	ldr	r3, [pc, #32]	; (800ab18 <_ZL19MX_USART2_UART_Initv+0x54>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800aafa:	4807      	ldr	r0, [pc, #28]	; (800ab18 <_ZL19MX_USART2_UART_Initv+0x54>)
 800aafc:	f7ff faba 	bl	800a074 <HAL_UART_Init>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	bf14      	ite	ne
 800ab06:	2301      	movne	r3, #1
 800ab08:	2300      	moveq	r3, #0
 800ab0a:	b2db      	uxtb	r3, r3
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d001      	beq.n	800ab14 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800ab10:	f000 f86c 	bl	800abec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800ab14:	bf00      	nop
 800ab16:	bd80      	pop	{r7, pc}
 800ab18:	20000870 	.word	0x20000870
 800ab1c:	40004400 	.word	0x40004400

0800ab20 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b088      	sub	sp, #32
 800ab24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ab26:	f107 030c 	add.w	r3, r7, #12
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	601a      	str	r2, [r3, #0]
 800ab2e:	605a      	str	r2, [r3, #4]
 800ab30:	609a      	str	r2, [r3, #8]
 800ab32:	60da      	str	r2, [r3, #12]
 800ab34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800ab36:	2300      	movs	r3, #0
 800ab38:	60bb      	str	r3, [r7, #8]
 800ab3a:	4a29      	ldr	r2, [pc, #164]	; (800abe0 <_ZL12MX_GPIO_Initv+0xc0>)
 800ab3c:	4b28      	ldr	r3, [pc, #160]	; (800abe0 <_ZL12MX_GPIO_Initv+0xc0>)
 800ab3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab40:	f043 0304 	orr.w	r3, r3, #4
 800ab44:	6313      	str	r3, [r2, #48]	; 0x30
 800ab46:	4b26      	ldr	r3, [pc, #152]	; (800abe0 <_ZL12MX_GPIO_Initv+0xc0>)
 800ab48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4a:	f003 0304 	and.w	r3, r3, #4
 800ab4e:	60bb      	str	r3, [r7, #8]
 800ab50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab52:	2300      	movs	r3, #0
 800ab54:	607b      	str	r3, [r7, #4]
 800ab56:	4a22      	ldr	r2, [pc, #136]	; (800abe0 <_ZL12MX_GPIO_Initv+0xc0>)
 800ab58:	4b21      	ldr	r3, [pc, #132]	; (800abe0 <_ZL12MX_GPIO_Initv+0xc0>)
 800ab5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab5c:	f043 0301 	orr.w	r3, r3, #1
 800ab60:	6313      	str	r3, [r2, #48]	; 0x30
 800ab62:	4b1f      	ldr	r3, [pc, #124]	; (800abe0 <_ZL12MX_GPIO_Initv+0xc0>)
 800ab64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab66:	f003 0301 	and.w	r3, r3, #1
 800ab6a:	607b      	str	r3, [r7, #4]
 800ab6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab6e:	2300      	movs	r3, #0
 800ab70:	603b      	str	r3, [r7, #0]
 800ab72:	4a1b      	ldr	r2, [pc, #108]	; (800abe0 <_ZL12MX_GPIO_Initv+0xc0>)
 800ab74:	4b1a      	ldr	r3, [pc, #104]	; (800abe0 <_ZL12MX_GPIO_Initv+0xc0>)
 800ab76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab78:	f043 0302 	orr.w	r3, r3, #2
 800ab7c:	6313      	str	r3, [r2, #48]	; 0x30
 800ab7e:	4b18      	ldr	r3, [pc, #96]	; (800abe0 <_ZL12MX_GPIO_Initv+0xc0>)
 800ab80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab82:	f003 0302 	and.w	r3, r3, #2
 800ab86:	603b      	str	r3, [r7, #0]
 800ab88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD_Pin|RCLK_Pin|SRCLR_Pin, GPIO_PIN_RESET);
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	2131      	movs	r1, #49	; 0x31
 800ab8e:	4815      	ldr	r0, [pc, #84]	; (800abe4 <_ZL12MX_GPIO_Initv+0xc4>)
 800ab90:	f7fd fe18 	bl	80087c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT1_Pin|OUT2_Pin|OUT3_Pin|OLED_DC_Pin 
                          |OLED_RST_Pin, GPIO_PIN_RESET);
 800ab94:	2200      	movs	r2, #0
 800ab96:	2137      	movs	r1, #55	; 0x37
 800ab98:	4813      	ldr	r0, [pc, #76]	; (800abe8 <_ZL12MX_GPIO_Initv+0xc8>)
 800ab9a:	f7fd fe13 	bl	80087c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD_Pin RCLK_Pin SRCLR_Pin */
  GPIO_InitStruct.Pin = LD_Pin|RCLK_Pin|SRCLR_Pin;
 800ab9e:	2331      	movs	r3, #49	; 0x31
 800aba0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aba2:	2301      	movs	r3, #1
 800aba4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aba6:	2300      	movs	r3, #0
 800aba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abaa:	2300      	movs	r3, #0
 800abac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800abae:	f107 030c 	add.w	r3, r7, #12
 800abb2:	4619      	mov	r1, r3
 800abb4:	480b      	ldr	r0, [pc, #44]	; (800abe4 <_ZL12MX_GPIO_Initv+0xc4>)
 800abb6:	f7fd fd25 	bl	8008604 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT1_Pin OUT2_Pin OUT3_Pin OLED_DC_Pin 
                           OLED_RST_Pin */
  GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OLED_DC_Pin 
 800abba:	2337      	movs	r3, #55	; 0x37
 800abbc:	60fb      	str	r3, [r7, #12]
                          |OLED_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800abbe:	2301      	movs	r3, #1
 800abc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abc2:	2300      	movs	r3, #0
 800abc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800abc6:	2300      	movs	r3, #0
 800abc8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800abca:	f107 030c 	add.w	r3, r7, #12
 800abce:	4619      	mov	r1, r3
 800abd0:	4805      	ldr	r0, [pc, #20]	; (800abe8 <_ZL12MX_GPIO_Initv+0xc8>)
 800abd2:	f7fd fd17 	bl	8008604 <HAL_GPIO_Init>

}
 800abd6:	bf00      	nop
 800abd8:	3720      	adds	r7, #32
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	40023800 	.word	0x40023800
 800abe4:	40020800 	.word	0x40020800
 800abe8:	40020400 	.word	0x40020400

0800abec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800abec:	b480      	push	{r7}
 800abee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800abf0:	bf00      	nop
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
	...

0800abfc <_Z41__static_initialization_and_destruction_0ii>:
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af02      	add	r7, sp, #8
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d11b      	bne.n	800ac44 <_Z41__static_initialization_and_destruction_0ii+0x48>
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d116      	bne.n	800ac44 <_Z41__static_initialization_and_destruction_0ii+0x48>
Clock clock;
 800ac16:	480d      	ldr	r0, [pc, #52]	; (800ac4c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800ac18:	f000 fd74 	bl	800b704 <_ZN5ClockC1Ev>
 800ac1c:	4a0c      	ldr	r2, [pc, #48]	; (800ac50 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800ac1e:	490d      	ldr	r1, [pc, #52]	; (800ac54 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800ac20:	480a      	ldr	r0, [pc, #40]	; (800ac4c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800ac22:	f004 f8b3 	bl	800ed8c <__aeabi_atexit>
Sequencer sequencer(1,2,2,0,&hspi1);
 800ac26:	4b0c      	ldr	r3, [pc, #48]	; (800ac58 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800ac28:	9301      	str	r3, [sp, #4]
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	9300      	str	r3, [sp, #0]
 800ac2e:	2302      	movs	r3, #2
 800ac30:	2202      	movs	r2, #2
 800ac32:	2101      	movs	r1, #1
 800ac34:	4809      	ldr	r0, [pc, #36]	; (800ac5c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800ac36:	f000 ff62 	bl	800bafe <_ZN9SequencerC1EhhhhP19__SPI_HandleTypeDef>
 800ac3a:	4a05      	ldr	r2, [pc, #20]	; (800ac50 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800ac3c:	4908      	ldr	r1, [pc, #32]	; (800ac60 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800ac3e:	4807      	ldr	r0, [pc, #28]	; (800ac5c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800ac40:	f004 f8a4 	bl	800ed8c <__aeabi_atexit>
}
 800ac44:	bf00      	nop
 800ac46:	3708      	adds	r7, #8
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	200008b0 	.word	0x200008b0
 800ac50:	20000000 	.word	0x20000000
 800ac54:	0800b72d 	.word	0x0800b72d
 800ac58:	2000070c 	.word	0x2000070c
 800ac5c:	20000928 	.word	0x20000928
 800ac60:	0800c4a1 	.word	0x0800c4a1

0800ac64 <_GLOBAL__sub_I_hi2c1>:
 800ac64:	b580      	push	{r7, lr}
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ac6c:	2001      	movs	r0, #1
 800ac6e:	f7ff ffc5 	bl	800abfc <_Z41__static_initialization_and_destruction_0ii>
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ac74:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac76:	4b0e      	ldr	r3, [pc, #56]	; (800acb0 <HAL_MspInit+0x3c>)
 800ac78:	2100      	movs	r1, #0
 800ac7a:	9100      	str	r1, [sp, #0]
 800ac7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac82:	645a      	str	r2, [r3, #68]	; 0x44
 800ac84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac86:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800ac8a:	9200      	str	r2, [sp, #0]
 800ac8c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800ac8e:	9101      	str	r1, [sp, #4]
 800ac90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac92:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ac96:	641a      	str	r2, [r3, #64]	; 0x40
 800ac98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac9e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800aca0:	2005      	movs	r0, #5
  __HAL_RCC_PWR_CLK_ENABLE();
 800aca2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800aca4:	f7fd fc46 	bl	8008534 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800aca8:	b003      	add	sp, #12
 800acaa:	f85d fb04 	ldr.w	pc, [sp], #4
 800acae:	bf00      	nop
 800acb0:	40023800 	.word	0x40023800

0800acb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800acb4:	b530      	push	{r4, r5, lr}
 800acb6:	4604      	mov	r4, r0
 800acb8:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800acba:	2214      	movs	r2, #20
 800acbc:	2100      	movs	r1, #0
 800acbe:	a803      	add	r0, sp, #12
 800acc0:	f006 f9ec 	bl	801109c <memset>
  if(hi2c->Instance==I2C1)
 800acc4:	6822      	ldr	r2, [r4, #0]
 800acc6:	4b14      	ldr	r3, [pc, #80]	; (800ad18 <HAL_I2C_MspInit+0x64>)
 800acc8:	429a      	cmp	r2, r3
 800acca:	d123      	bne.n	800ad14 <HAL_I2C_MspInit+0x60>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800accc:	4c13      	ldr	r4, [pc, #76]	; (800ad1c <HAL_I2C_MspInit+0x68>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800acce:	4814      	ldr	r0, [pc, #80]	; (800ad20 <HAL_I2C_MspInit+0x6c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800acd0:	2500      	movs	r5, #0
 800acd2:	9501      	str	r5, [sp, #4]
 800acd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800acd6:	f043 0302 	orr.w	r3, r3, #2
 800acda:	6323      	str	r3, [r4, #48]	; 0x30
 800acdc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800acde:	f003 0302 	and.w	r3, r3, #2
 800ace2:	9301      	str	r3, [sp, #4]
 800ace4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ace6:	23c0      	movs	r3, #192	; 0xc0
 800ace8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800acea:	2312      	movs	r3, #18
 800acec:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800acee:	2301      	movs	r3, #1
 800acf0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acf2:	2303      	movs	r3, #3
 800acf4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800acf6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800acf8:	2304      	movs	r3, #4
 800acfa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800acfc:	f7fd fc82 	bl	8008604 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800ad00:	9502      	str	r5, [sp, #8]
 800ad02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ad08:	6423      	str	r3, [r4, #64]	; 0x40
 800ad0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad10:	9302      	str	r3, [sp, #8]
 800ad12:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800ad14:	b009      	add	sp, #36	; 0x24
 800ad16:	bd30      	pop	{r4, r5, pc}
 800ad18:	40005400 	.word	0x40005400
 800ad1c:	40023800 	.word	0x40023800
 800ad20:	40020400 	.word	0x40020400

0800ad24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800ad24:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad26:	2214      	movs	r2, #20
{
 800ad28:	b08a      	sub	sp, #40	; 0x28
 800ad2a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ad2c:	2100      	movs	r1, #0
 800ad2e:	eb0d 0002 	add.w	r0, sp, r2
 800ad32:	f006 f9b3 	bl	801109c <memset>
  if(hspi->Instance==SPI1)
 800ad36:	6823      	ldr	r3, [r4, #0]
 800ad38:	4a25      	ldr	r2, [pc, #148]	; (800add0 <HAL_SPI_MspInit+0xac>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d123      	bne.n	800ad86 <HAL_SPI_MspInit+0x62>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ad3e:	4b25      	ldr	r3, [pc, #148]	; (800add4 <HAL_SPI_MspInit+0xb0>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad40:	4825      	ldr	r0, [pc, #148]	; (800add8 <HAL_SPI_MspInit+0xb4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800ad42:	2100      	movs	r1, #0
 800ad44:	9101      	str	r1, [sp, #4]
 800ad46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ad4c:	645a      	str	r2, [r3, #68]	; 0x44
 800ad4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ad50:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800ad54:	9201      	str	r2, [sp, #4]
 800ad56:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ad58:	9102      	str	r1, [sp, #8]
 800ad5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad5c:	f042 0201 	orr.w	r2, r2, #1
 800ad60:	631a      	str	r2, [r3, #48]	; 0x30
 800ad62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad64:	f003 0301 	and.w	r3, r3, #1
 800ad68:	9302      	str	r3, [sp, #8]
 800ad6a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800ad6c:	23e0      	movs	r3, #224	; 0xe0
 800ad6e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad70:	2302      	movs	r3, #2
 800ad72:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad74:	2303      	movs	r3, #3
 800ad76:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800ad78:	2305      	movs	r3, #5
 800ad7a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad7c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ad7e:	f7fd fc41 	bl	8008604 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800ad82:	b00a      	add	sp, #40	; 0x28
 800ad84:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 800ad86:	4a15      	ldr	r2, [pc, #84]	; (800addc <HAL_SPI_MspInit+0xb8>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d1fa      	bne.n	800ad82 <HAL_SPI_MspInit+0x5e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800ad8c:	4b11      	ldr	r3, [pc, #68]	; (800add4 <HAL_SPI_MspInit+0xb0>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ad8e:	4814      	ldr	r0, [pc, #80]	; (800ade0 <HAL_SPI_MspInit+0xbc>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800ad90:	2100      	movs	r1, #0
 800ad92:	9103      	str	r1, [sp, #12]
 800ad94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad9a:	641a      	str	r2, [r3, #64]	; 0x40
 800ad9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad9e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800ada2:	9203      	str	r2, [sp, #12]
 800ada4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ada6:	9104      	str	r1, [sp, #16]
 800ada8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adaa:	f042 0202 	orr.w	r2, r2, #2
 800adae:	631a      	str	r2, [r3, #48]	; 0x30
 800adb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adb2:	f003 0302 	and.w	r3, r3, #2
 800adb6:	9304      	str	r3, [sp, #16]
 800adb8:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800adba:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800adbe:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800adc0:	2302      	movs	r3, #2
 800adc2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800adc4:	2303      	movs	r3, #3
 800adc6:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800adc8:	2305      	movs	r3, #5
 800adca:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800adcc:	a905      	add	r1, sp, #20
 800adce:	e7d6      	b.n	800ad7e <HAL_SPI_MspInit+0x5a>
 800add0:	40013000 	.word	0x40013000
 800add4:	40023800 	.word	0x40023800
 800add8:	40020000 	.word	0x40020000
 800addc:	40003800 	.word	0x40003800
 800ade0:	40020400 	.word	0x40020400

0800ade4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ade4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ade6:	2214      	movs	r2, #20
{
 800ade8:	b08a      	sub	sp, #40	; 0x28
 800adea:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800adec:	2100      	movs	r1, #0
 800adee:	eb0d 0002 	add.w	r0, sp, r2
 800adf2:	f006 f953 	bl	801109c <memset>
  if(htim_base->Instance==TIM2)
 800adf6:	6823      	ldr	r3, [r4, #0]
 800adf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800adfc:	d129      	bne.n	800ae52 <HAL_TIM_Base_MspInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800adfe:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 800ae02:	2400      	movs	r4, #0
 800ae04:	9401      	str	r4, [sp, #4]
 800ae06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae08:	4827      	ldr	r0, [pc, #156]	; (800aea8 <HAL_TIM_Base_MspInit+0xc4>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ae0a:	f042 0201 	orr.w	r2, r2, #1
 800ae0e:	641a      	str	r2, [r3, #64]	; 0x40
 800ae10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae12:	f002 0201 	and.w	r2, r2, #1
 800ae16:	9201      	str	r2, [sp, #4]
 800ae18:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae1a:	9402      	str	r4, [sp, #8]
 800ae1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae1e:	f042 0201 	orr.w	r2, r2, #1
 800ae22:	631a      	str	r2, [r3, #48]	; 0x30
 800ae24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae26:	f003 0301 	and.w	r3, r3, #1
 800ae2a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae2c:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ae2e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae30:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800ae32:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae34:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800ae36:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800ae38:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ae3a:	f7fd fbe3 	bl	8008604 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800ae3e:	201c      	movs	r0, #28
 800ae40:	4622      	mov	r2, r4
 800ae42:	4621      	mov	r1, r4
 800ae44:	f7fd fb88 	bl	8008558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800ae48:	201c      	movs	r0, #28
  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 1);
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800ae4a:	f7fd fbb9 	bl	80085c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800ae4e:	b00a      	add	sp, #40	; 0x28
 800ae50:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM5)
 800ae52:	4a16      	ldr	r2, [pc, #88]	; (800aeac <HAL_TIM_Base_MspInit+0xc8>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d111      	bne.n	800ae7c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800ae58:	4b15      	ldr	r3, [pc, #84]	; (800aeb0 <HAL_TIM_Base_MspInit+0xcc>)
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	9203      	str	r2, [sp, #12]
 800ae5e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800ae60:	f041 0108 	orr.w	r1, r1, #8
 800ae64:	6419      	str	r1, [r3, #64]	; 0x40
 800ae66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae68:	f003 0308 	and.w	r3, r3, #8
 800ae6c:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 800ae6e:	2032      	movs	r0, #50	; 0x32
 800ae70:	2101      	movs	r1, #1
    __HAL_RCC_TIM5_CLK_ENABLE();
 800ae72:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 800ae74:	f7fd fb70 	bl	8008558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800ae78:	2032      	movs	r0, #50	; 0x32
 800ae7a:	e7e6      	b.n	800ae4a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 800ae7c:	4a0d      	ldr	r2, [pc, #52]	; (800aeb4 <HAL_TIM_Base_MspInit+0xd0>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d1e5      	bne.n	800ae4e <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800ae82:	4b0b      	ldr	r3, [pc, #44]	; (800aeb0 <HAL_TIM_Base_MspInit+0xcc>)
 800ae84:	2100      	movs	r1, #0
 800ae86:	9104      	str	r1, [sp, #16]
 800ae88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae8a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800ae8e:	645a      	str	r2, [r3, #68]	; 0x44
 800ae90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae96:	9304      	str	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 1);
 800ae98:	2019      	movs	r0, #25
 800ae9a:	2201      	movs	r2, #1
    __HAL_RCC_TIM10_CLK_ENABLE();
 800ae9c:	9b04      	ldr	r3, [sp, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 1);
 800ae9e:	f7fd fb5b 	bl	8008558 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800aea2:	2019      	movs	r0, #25
 800aea4:	e7d1      	b.n	800ae4a <HAL_TIM_Base_MspInit+0x66>
 800aea6:	bf00      	nop
 800aea8:	40020000 	.word	0x40020000
 800aeac:	40000c00 	.word	0x40000c00
 800aeb0:	40023800 	.word	0x40023800
 800aeb4:	40014400 	.word	0x40014400

0800aeb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800aeb8:	b510      	push	{r4, lr}
 800aeba:	4604      	mov	r4, r0
 800aebc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aebe:	2214      	movs	r2, #20
 800aec0:	2100      	movs	r1, #0
 800aec2:	a803      	add	r0, sp, #12
 800aec4:	f006 f8ea 	bl	801109c <memset>
  if(huart->Instance==USART2)
 800aec8:	6822      	ldr	r2, [r4, #0]
 800aeca:	4b15      	ldr	r3, [pc, #84]	; (800af20 <HAL_UART_MspInit+0x68>)
 800aecc:	429a      	cmp	r2, r3
 800aece:	d124      	bne.n	800af1a <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800aed0:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800aed4:	2100      	movs	r1, #0
 800aed6:	9101      	str	r1, [sp, #4]
 800aed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aeda:	4812      	ldr	r0, [pc, #72]	; (800af24 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800aedc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800aee0:	641a      	str	r2, [r3, #64]	; 0x40
 800aee2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aee4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800aee8:	9201      	str	r2, [sp, #4]
 800aeea:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aeec:	9102      	str	r1, [sp, #8]
 800aeee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aef0:	f042 0201 	orr.w	r2, r2, #1
 800aef4:	631a      	str	r2, [r3, #48]	; 0x30
 800aef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aef8:	f003 0301 	and.w	r3, r3, #1
 800aefc:	9302      	str	r3, [sp, #8]
 800aefe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800af00:	230c      	movs	r3, #12
 800af02:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af04:	2302      	movs	r3, #2
 800af06:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800af08:	2301      	movs	r3, #1
 800af0a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800af0c:	2303      	movs	r3, #3
 800af0e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af10:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800af12:	2307      	movs	r3, #7
 800af14:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af16:	f7fd fb75 	bl	8008604 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800af1a:	b008      	add	sp, #32
 800af1c:	bd10      	pop	{r4, pc}
 800af1e:	bf00      	nop
 800af20:	40004400 	.word	0x40004400
 800af24:	40020000 	.word	0x40020000

0800af28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800af28:	b480      	push	{r7}
 800af2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800af2c:	bf00      	nop
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr

0800af36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800af36:	b480      	push	{r7}
 800af38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800af3a:	e7fe      	b.n	800af3a <HardFault_Handler+0x4>

0800af3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800af3c:	b480      	push	{r7}
 800af3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800af40:	e7fe      	b.n	800af40 <MemManage_Handler+0x4>

0800af42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800af42:	b480      	push	{r7}
 800af44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800af46:	e7fe      	b.n	800af46 <BusFault_Handler+0x4>

0800af48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800af48:	b480      	push	{r7}
 800af4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800af4c:	e7fe      	b.n	800af4c <UsageFault_Handler+0x4>

0800af4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800af4e:	b480      	push	{r7}
 800af50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800af52:	bf00      	nop
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800af5c:	b480      	push	{r7}
 800af5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800af60:	bf00      	nop
 800af62:	46bd      	mov	sp, r7
 800af64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af68:	4770      	bx	lr

0800af6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800af6a:	b480      	push	{r7}
 800af6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800af6e:	bf00      	nop
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	af00      	add	r7, sp, #0




  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800af7c:	f7fd fab4 	bl	80084e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800af80:	bf00      	nop
 800af82:	bd80      	pop	{r7, pc}

0800af84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800af88:	4802      	ldr	r0, [pc, #8]	; (800af94 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800af8a:	f7fe fbee 	bl	800976a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800af8e:	bf00      	nop
 800af90:	bd80      	pop	{r7, pc}
 800af92:	bf00      	nop
 800af94:	20000834 	.word	0x20000834

0800af98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800af9c:	4802      	ldr	r0, [pc, #8]	; (800afa8 <TIM2_IRQHandler+0x10>)
 800af9e:	f7fe fbe4 	bl	800976a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // htim5.Instance->CCR2=htim2.Instance->CCR1/2;

  /* USER CODE END TIM2_IRQn 1 */
}
 800afa2:	bf00      	nop
 800afa4:	bd80      	pop	{r7, pc}
 800afa6:	bf00      	nop
 800afa8:	200007bc 	.word	0x200007bc

0800afac <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  // HAL_GPIO_TogglePin(OUT3_GPIO_Port,OUT3_Pin);
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800afb0:	4802      	ldr	r0, [pc, #8]	; (800afbc <TIM5_IRQHandler+0x10>)
 800afb2:	f7fe fbda 	bl	800976a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800afb6:	bf00      	nop
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	200007f8 	.word	0x200007f8

0800afc0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800afc0:	490f      	ldr	r1, [pc, #60]	; (800b000 <SystemInit+0x40>)
 800afc2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800afc6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800afca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800afce:	4b0d      	ldr	r3, [pc, #52]	; (800b004 <SystemInit+0x44>)
 800afd0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800afd2:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 800afd4:	f042 0201 	orr.w	r2, r2, #1
 800afd8:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800afda:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800afe2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800afe6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800afe8:	4a07      	ldr	r2, [pc, #28]	; (800b008 <SystemInit+0x48>)
 800afea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800afec:	681a      	ldr	r2, [r3, #0]
 800afee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aff2:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800aff4:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800aff6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800affa:	608b      	str	r3, [r1, #8]
 800affc:	4770      	bx	lr
 800affe:	bf00      	nop
 800b000:	e000ed00 	.word	0xe000ed00
 800b004:	40023800 	.word	0x40023800
 800b008:	24003010 	.word	0x24003010

0800b00c <System_Init>:
function:	System Init
note:
	Initialize the communication method
********************************************************************************/
uint8_t System_Init(void)
{
 800b00c:	b508      	push	{r3, lr}
#if USE_SPI_4W
    printf("USE 4wire spi\r\n");
#elif USE_IIC
    printf("USE i2c\r\n");
 800b00e:	4805      	ldr	r0, [pc, #20]	; (800b024 <System_Init+0x18>)
 800b010:	f006 f900 	bl	8011214 <puts>
	// DC = 1 => addrdess = 0X3D
	// DC = 0 => addrdess = 0X3C
	OLED_DC_1;
 800b014:	2201      	movs	r2, #1
 800b016:	2110      	movs	r1, #16
 800b018:	4803      	ldr	r0, [pc, #12]	; (800b028 <System_Init+0x1c>)
 800b01a:	f7fd fbd3 	bl	80087c4 <HAL_GPIO_WritePin>
#endif
    return 0;
}
 800b01e:	2000      	movs	r0, #0
 800b020:	bd08      	pop	{r3, pc}
 800b022:	bf00      	nop
 800b024:	0801818c 	.word	0x0801818c
 800b028:	40020400 	.word	0x40020400

0800b02c <I2C_Write_Byte>:
    return *((__IO uint8_t *)(&SPI1->DR));
#endif
}

void I2C_Write_Byte(uint8_t value, uint8_t Cmd)
{
 800b02c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int Err;
    uint8_t W_Buf[2] ;
    W_Buf[0] = Cmd;
    W_Buf[1] = value;
    if(HAL_I2C_Master_Transmit(&hi2c1, (0X3D << 1) | 0X00, W_Buf, 2, 0x10) != HAL_OK) {
 800b02e:	2310      	movs	r3, #16
    W_Buf[0] = Cmd;
 800b030:	f88d 100c 	strb.w	r1, [sp, #12]
    W_Buf[1] = value;
 800b034:	f88d 000d 	strb.w	r0, [sp, #13]
    if(HAL_I2C_Master_Transmit(&hi2c1, (0X3D << 1) | 0X00, W_Buf, 2, 0x10) != HAL_OK) {
 800b038:	9300      	str	r3, [sp, #0]
 800b03a:	aa03      	add	r2, sp, #12
 800b03c:	2302      	movs	r3, #2
 800b03e:	217a      	movs	r1, #122	; 0x7a
 800b040:	4802      	ldr	r0, [pc, #8]	; (800b04c <I2C_Write_Byte+0x20>)
 800b042:	f7fd fd01 	bl	8008a48 <HAL_I2C_Master_Transmit>
        if(Err == 1000) {
            printf("send error\r\n");
            return ;
        }
    }
}
 800b046:	b005      	add	sp, #20
 800b048:	f85d fb04 	ldr.w	pc, [sp], #4
 800b04c:	200006b8 	.word	0x200006b8

0800b050 <Driver_Delay_ms>:
	Driver_Delay_ms(xms) : Delay x ms
	Driver_Delay_us(xus) : Delay x us
********************************************************************************/
void Driver_Delay_ms(uint32_t xms)
{
    HAL_Delay(xms);
 800b050:	f7fd ba5c 	b.w	800850c <HAL_Delay>

0800b054 <OLED_WriteReg>:
    OLED_DC_0;
    OLED_CS_0;
    SPI4W_Write_Byte(Reg);
    OLED_CS_1;
#elif USE_IIC
    I2C_Write_Byte(Reg,IIC_CMD);
 800b054:	2100      	movs	r1, #0
 800b056:	f7ff bfe9 	b.w	800b02c <I2C_Write_Byte>

0800b05a <OLED_WriteData>:
    OLED_DC_1;
    OLED_CS_0;
    SPI4W_Write_Byte(Data);
    OLED_CS_1;
#elif USE_IIC
    I2C_Write_Byte(Data,IIC_RAM);
 800b05a:	2140      	movs	r1, #64	; 0x40
 800b05c:	f7ff bfe6 	b.w	800b02c <I2C_Write_Byte>

0800b060 <OLED_SetGramScanWay>:
		Colorchose :   RGB or GBR color format
********************************************************************************/
void OLED_SetGramScanWay(OLED_SCAN_DIR Scan_dir)
{
    //Get the screen scan direction
    sOLED_DIS.OLED_Scan_Dir = Scan_dir;
 800b060:	4b04      	ldr	r3, [pc, #16]	; (800b074 <OLED_SetGramScanWay+0x14>)

    //Get GRAM and OLED width and height
    if(Scan_dir == L2R_U2D || Scan_dir == L2R_D2U || Scan_dir == R2L_U2D || Scan_dir == R2L_D2U) {
        sOLED_DIS.OLED_Dis_Column	= OLED_WIDTH;
 800b062:	2280      	movs	r2, #128	; 0x80
 800b064:	801a      	strh	r2, [r3, #0]
        sOLED_DIS.OLED_Dis_Page = OLED_HEIGHT;
 800b066:	805a      	strh	r2, [r3, #2]
        sOLED_DIS.OLED_X_Adjust = OLED_X;
 800b068:	2200      	movs	r2, #0
    sOLED_DIS.OLED_Scan_Dir = Scan_dir;
 800b06a:	7118      	strb	r0, [r3, #4]
        sOLED_DIS.OLED_X_Adjust = OLED_X;
 800b06c:	80da      	strh	r2, [r3, #6]
        sOLED_DIS.OLED_Y_Adjust = OLED_Y;
 800b06e:	811a      	strh	r2, [r3, #8]
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	20008e78 	.word	0x20008e78

0800b078 <OLED_Init>:
/********************************************************************************
function:
			initialization
********************************************************************************/
void OLED_Init(OLED_SCAN_DIR OLED_ScanDir)
{
 800b078:	b538      	push	{r3, r4, r5, lr}
    OLED_RST_1;
 800b07a:	4c45      	ldr	r4, [pc, #276]	; (800b190 <OLED_Init+0x118>)
{
 800b07c:	4605      	mov	r5, r0
    OLED_RST_1;
 800b07e:	2201      	movs	r2, #1
 800b080:	2120      	movs	r1, #32
 800b082:	4620      	mov	r0, r4
 800b084:	f7fd fb9e 	bl	80087c4 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 800b088:	2064      	movs	r0, #100	; 0x64
 800b08a:	f7ff ffe1 	bl	800b050 <Driver_Delay_ms>
    OLED_RST_0;
 800b08e:	2200      	movs	r2, #0
 800b090:	2120      	movs	r1, #32
 800b092:	4620      	mov	r0, r4
 800b094:	f7fd fb96 	bl	80087c4 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 800b098:	2064      	movs	r0, #100	; 0x64
 800b09a:	f7ff ffd9 	bl	800b050 <Driver_Delay_ms>
    OLED_RST_1;
 800b09e:	2201      	movs	r2, #1
 800b0a0:	2120      	movs	r1, #32
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f7fd fb8e 	bl	80087c4 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 800b0a8:	2064      	movs	r0, #100	; 0x64
 800b0aa:	f7ff ffd1 	bl	800b050 <Driver_Delay_ms>
    OLED_WriteReg(0xae);//--turn off oled panel
 800b0ae:	20ae      	movs	r0, #174	; 0xae
 800b0b0:	f7ff ffd0 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0x15);    //   set column address
 800b0b4:	2015      	movs	r0, #21
 800b0b6:	f7ff ffcd 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0x00);    //  start column   0
 800b0ba:	2000      	movs	r0, #0
 800b0bc:	f7ff ffca 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0x7f);    //  end column   127
 800b0c0:	207f      	movs	r0, #127	; 0x7f
 800b0c2:	f7ff ffc7 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0x75);    //   set row address
 800b0c6:	2075      	movs	r0, #117	; 0x75
 800b0c8:	f7ff ffc4 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0x00);    //  start row   0
 800b0cc:	2000      	movs	r0, #0
 800b0ce:	f7ff ffc1 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0x7f);    //  end row   127
 800b0d2:	207f      	movs	r0, #127	; 0x7f
 800b0d4:	f7ff ffbe 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0x81);  // set contrast control
 800b0d8:	2081      	movs	r0, #129	; 0x81
 800b0da:	f7ff ffbb 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0x80);
 800b0de:	2080      	movs	r0, #128	; 0x80
 800b0e0:	f7ff ffb8 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0xa0);    // gment remap
 800b0e4:	20a0      	movs	r0, #160	; 0xa0
 800b0e6:	f7ff ffb5 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0x51);   //51
 800b0ea:	2051      	movs	r0, #81	; 0x51
 800b0ec:	f7ff ffb2 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0xa1);  // start line
 800b0f0:	20a1      	movs	r0, #161	; 0xa1
 800b0f2:	f7ff ffaf 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0x00);
 800b0f6:	2000      	movs	r0, #0
 800b0f8:	f7ff ffac 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0xa2);  // display offset
 800b0fc:	20a2      	movs	r0, #162	; 0xa2
 800b0fe:	f7ff ffa9 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0x00);
 800b102:	2000      	movs	r0, #0
 800b104:	f7ff ffa6 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0xa4);    // rmal display
 800b108:	20a4      	movs	r0, #164	; 0xa4
 800b10a:	f7ff ffa3 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0xa8);    // set multiplex ratio
 800b10e:	20a8      	movs	r0, #168	; 0xa8
 800b110:	f7ff ffa0 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0x7f);
 800b114:	207f      	movs	r0, #127	; 0x7f
 800b116:	f7ff ff9d 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0xb1);  // set phase leghth
 800b11a:	20b1      	movs	r0, #177	; 0xb1
 800b11c:	f7ff ff9a 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0xf1);
 800b120:	20f1      	movs	r0, #241	; 0xf1
 800b122:	f7ff ff97 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0xb3);  // set dclk
 800b126:	20b3      	movs	r0, #179	; 0xb3
 800b128:	f7ff ff94 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0x00);  //80Hz:0xc1 90Hz:0xe1   100Hz:0x00   110Hz:0x30 120Hz:0x50   130Hz:0x70     01
 800b12c:	2000      	movs	r0, #0
 800b12e:	f7ff ff91 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0xab);  //
 800b132:	20ab      	movs	r0, #171	; 0xab
 800b134:	f7ff ff8e 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0x01);  //
 800b138:	2001      	movs	r0, #1
 800b13a:	f7ff ff8b 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0xb6);  // set phase leghth
 800b13e:	20b6      	movs	r0, #182	; 0xb6
 800b140:	f7ff ff88 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0x0f);
 800b144:	200f      	movs	r0, #15
 800b146:	f7ff ff85 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0xbe);
 800b14a:	20be      	movs	r0, #190	; 0xbe
 800b14c:	f7ff ff82 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0x0f);
 800b150:	200f      	movs	r0, #15
 800b152:	f7ff ff7f 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0xbc);
 800b156:	20bc      	movs	r0, #188	; 0xbc
 800b158:	f7ff ff7c 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0x08);
 800b15c:	2008      	movs	r0, #8
 800b15e:	f7ff ff79 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0xd5);
 800b162:	20d5      	movs	r0, #213	; 0xd5
 800b164:	f7ff ff76 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0x62);
 800b168:	2062      	movs	r0, #98	; 0x62
 800b16a:	f7ff ff73 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0xfd);
 800b16e:	20fd      	movs	r0, #253	; 0xfd
 800b170:	f7ff ff70 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(0x12);
 800b174:	2012      	movs	r0, #18
 800b176:	f7ff ff6d 	bl	800b054 <OLED_WriteReg>

    //Set the initialization register
    OLED_InitReg();

    //Set the display scan and color transfer modes
    OLED_SetGramScanWay(OLED_ScanDir );
 800b17a:	4628      	mov	r0, r5
 800b17c:	f7ff ff70 	bl	800b060 <OLED_SetGramScanWay>
    Driver_Delay_ms(200);
 800b180:	20c8      	movs	r0, #200	; 0xc8
 800b182:	f7ff ff65 	bl	800b050 <Driver_Delay_ms>

    //Turn on the OLED display
    OLED_WriteReg(0xAF);
 800b186:	20af      	movs	r0, #175	; 0xaf
}
 800b188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    OLED_WriteReg(0xAF);
 800b18c:	f7ff bf62 	b.w	800b054 <OLED_WriteReg>
 800b190:	40020400 	.word	0x40020400

0800b194 <OLED_SetWindow>:
		Ystart :   Y direction Start coordinates
		Xend   :   X direction end coordinates
		Yend   :   Y direction end coordinates
********************************************************************************/
void OLED_SetWindow(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend)
{
 800b194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b196:	461c      	mov	r4, r3
    if((Xstart > sOLED_DIS.OLED_Dis_Column) || (Ystart > sOLED_DIS.OLED_Dis_Page) ||
 800b198:	4b12      	ldr	r3, [pc, #72]	; (800b1e4 <OLED_SetWindow+0x50>)
{
 800b19a:	4615      	mov	r5, r2
    if((Xstart > sOLED_DIS.OLED_Dis_Column) || (Ystart > sOLED_DIS.OLED_Dis_Page) ||
 800b19c:	881a      	ldrh	r2, [r3, #0]
 800b19e:	4282      	cmp	r2, r0
{
 800b1a0:	4607      	mov	r7, r0
 800b1a2:	460e      	mov	r6, r1
    if((Xstart > sOLED_DIS.OLED_Dis_Column) || (Ystart > sOLED_DIS.OLED_Dis_Page) ||
 800b1a4:	d31c      	bcc.n	800b1e0 <OLED_SetWindow+0x4c>
 800b1a6:	885b      	ldrh	r3, [r3, #2]
 800b1a8:	428b      	cmp	r3, r1
 800b1aa:	d319      	bcc.n	800b1e0 <OLED_SetWindow+0x4c>
 800b1ac:	42aa      	cmp	r2, r5
 800b1ae:	d317      	bcc.n	800b1e0 <OLED_SetWindow+0x4c>
       (Xend > sOLED_DIS.OLED_Dis_Column) || (Yend > sOLED_DIS.OLED_Dis_Page))
 800b1b0:	42a3      	cmp	r3, r4
 800b1b2:	d315      	bcc.n	800b1e0 <OLED_SetWindow+0x4c>
        return;

    OLED_WriteReg(0x15);
 800b1b4:	2015      	movs	r0, #21
 800b1b6:	f7ff ff4d 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(Xstart);
 800b1ba:	b2f8      	uxtb	r0, r7
 800b1bc:	f7ff ff4a 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(Xend - 1);
 800b1c0:	1e68      	subs	r0, r5, #1
 800b1c2:	b2c0      	uxtb	r0, r0
 800b1c4:	f7ff ff46 	bl	800b054 <OLED_WriteReg>

    OLED_WriteReg(0x75);
 800b1c8:	2075      	movs	r0, #117	; 0x75
 800b1ca:	f7ff ff43 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(Ystart);
 800b1ce:	b2f0      	uxtb	r0, r6
 800b1d0:	f7ff ff40 	bl	800b054 <OLED_WriteReg>
    OLED_WriteReg(Yend - 1);
 800b1d4:	1e60      	subs	r0, r4, #1
 800b1d6:	b2c0      	uxtb	r0, r0
}
 800b1d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    OLED_WriteReg(Yend - 1);
 800b1dc:	f7ff bf3a 	b.w	800b054 <OLED_WriteReg>
 800b1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1e2:	bf00      	nop
 800b1e4:	20008e78 	.word	0x20008e78

0800b1e8 <OLED_SetColor>:
		Color  :   Set show color,16-bit depth
********************************************************************************/
//static void OLED_SetColor(LENGTH Dis_Width, LENGTH Dis_Height, COLOR Color ){
void OLED_SetColor(POINT Xpoint, POINT Ypoint, COLOR Color)
{
    if(Xpoint > sOLED_DIS.OLED_Dis_Column || Ypoint > sOLED_DIS.OLED_Dis_Page) {
 800b1e8:	4b0e      	ldr	r3, [pc, #56]	; (800b224 <OLED_SetColor+0x3c>)
{
 800b1ea:	b510      	push	{r4, lr}
    if(Xpoint > sOLED_DIS.OLED_Dis_Column || Ypoint > sOLED_DIS.OLED_Dis_Page) {
 800b1ec:	881c      	ldrh	r4, [r3, #0]
 800b1ee:	4284      	cmp	r4, r0
 800b1f0:	d317      	bcc.n	800b222 <OLED_SetColor+0x3a>
 800b1f2:	885b      	ldrh	r3, [r3, #2]
 800b1f4:	428b      	cmp	r3, r1
 800b1f6:	d314      	bcc.n	800b222 <OLED_SetColor+0x3a>
        return;
    }
    //1 byte control two points
    if(Xpoint % 2 == 0) {
 800b1f8:	f010 0f01 	tst.w	r0, #1
 800b1fc:	ea4f 1181 	mov.w	r1, r1, lsl #6
 800b200:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b204:	4b08      	ldr	r3, [pc, #32]	; (800b228 <OLED_SetColor+0x40>)
        Buffer[Xpoint / 2 + Ypoint * 64] = (Color << 4) | Buffer[Xpoint / 2 + Ypoint * 64];
 800b206:	4408      	add	r0, r1
    } else {
        Buffer[Xpoint / 2 + Ypoint * 64] = (Color & 0x0f) | Buffer[Xpoint / 2 + Ypoint * 64];
 800b208:	bf15      	itete	ne
 800b20a:	f002 020f 	andne.w	r2, r2, #15
        Buffer[Xpoint / 2 + Ypoint * 64] = (Color << 4) | Buffer[Xpoint / 2 + Ypoint * 64];
 800b20e:	f833 1010 	ldrheq.w	r1, [r3, r0, lsl #1]
        Buffer[Xpoint / 2 + Ypoint * 64] = (Color & 0x0f) | Buffer[Xpoint / 2 + Ypoint * 64];
 800b212:	f833 1010 	ldrhne.w	r1, [r3, r0, lsl #1]
        Buffer[Xpoint / 2 + Ypoint * 64] = (Color << 4) | Buffer[Xpoint / 2 + Ypoint * 64];
 800b216:	ea41 1202 	orreq.w	r2, r1, r2, lsl #4
        Buffer[Xpoint / 2 + Ypoint * 64] = (Color & 0x0f) | Buffer[Xpoint / 2 + Ypoint * 64];
 800b21a:	bf18      	it	ne
 800b21c:	430a      	orrne	r2, r1
 800b21e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
 800b222:	bd10      	pop	{r4, pc}
 800b224:	20008e78 	.word	0x20008e78
 800b228:	20008e82 	.word	0x20008e82

0800b22c <OLED_Display>:

/********************************************************************************
function:	Update all memory to LCD
********************************************************************************/
void OLED_Display(void)
{
 800b22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint16_t page, Column;
    COLOR *pBuf = (COLOR *)Buffer;

    OLED_SetWindow(0, 0, sOLED_DIS.OLED_Dis_Column, sOLED_DIS.OLED_Dis_Page);
 800b22e:	4c0f      	ldr	r4, [pc, #60]	; (800b26c <OLED_Display+0x40>)
    COLOR *pBuf = (COLOR *)Buffer;
 800b230:	4f0f      	ldr	r7, [pc, #60]	; (800b270 <OLED_Display+0x44>)
    OLED_SetWindow(0, 0, sOLED_DIS.OLED_Dis_Column, sOLED_DIS.OLED_Dis_Page);
 800b232:	8863      	ldrh	r3, [r4, #2]
 800b234:	8822      	ldrh	r2, [r4, #0]
 800b236:	2100      	movs	r1, #0
 800b238:	4608      	mov	r0, r1
 800b23a:	f7ff ffab 	bl	800b194 <OLED_SetWindow>
    //write data
    for (page = 0; page < sOLED_DIS.OLED_Dis_Page; page++) {
 800b23e:	2600      	movs	r6, #0
 800b240:	8862      	ldrh	r2, [r4, #2]
 800b242:	b2b3      	uxth	r3, r6
 800b244:	429a      	cmp	r2, r3
 800b246:	d90f      	bls.n	800b268 <OLED_Display+0x3c>
 800b248:	2500      	movs	r5, #0
 800b24a:	e004      	b.n	800b256 <OLED_Display+0x2a>
        for(Column = 0; Column < sOLED_DIS.OLED_Dis_Column / 2; Column++ ) {
            OLED_WriteData(*pBuf);
 800b24c:	f837 0b02 	ldrh.w	r0, [r7], #2
 800b250:	b2c0      	uxtb	r0, r0
 800b252:	f7ff ff02 	bl	800b05a <OLED_WriteData>
        for(Column = 0; Column < sOLED_DIS.OLED_Dis_Column / 2; Column++ ) {
 800b256:	8822      	ldrh	r2, [r4, #0]
 800b258:	b2ab      	uxth	r3, r5
 800b25a:	ebb3 0f52 	cmp.w	r3, r2, lsr #1
 800b25e:	f105 0501 	add.w	r5, r5, #1
 800b262:	d3f3      	bcc.n	800b24c <OLED_Display+0x20>
 800b264:	3601      	adds	r6, #1
 800b266:	e7eb      	b.n	800b240 <OLED_Display+0x14>
 800b268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b26a:	bf00      	nop
 800b26c:	20008e78 	.word	0x20008e78
 800b270:	20008e82 	.word	0x20008e82

0800b274 <OLED_ClearWindow>:
/********************************************************************************
function:
			Clear Window
********************************************************************************/
void OLED_ClearWindow(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend, COLOR Color)
{
 800b274:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint16_t i,m, Xpoint, Ypoint;
	Xpoint = (Xend - Xstart) / 2;
 800b276:	1a12      	subs	r2, r2, r0
 800b278:	2402      	movs	r4, #2
 800b27a:	fb92 f2f4 	sdiv	r2, r2, r4
	Ypoint = Yend - Ystart;
	
    uint16_t Num = Xstart + Ystart * (sOLED_DIS.OLED_Dis_Column / 2);
 800b27e:	4c13      	ldr	r4, [pc, #76]	; (800b2cc <OLED_ClearWindow+0x58>)
    for(i = 0; i < Ypoint; i++) {
        for(m = 0; m < Xpoint; m++) {
            Buffer[Num + m] = 0x00;
 800b280:	4f13      	ldr	r7, [pc, #76]	; (800b2d0 <OLED_ClearWindow+0x5c>)
    uint16_t Num = Xstart + Ystart * (sOLED_DIS.OLED_Dis_Column / 2);
 800b282:	8826      	ldrh	r6, [r4, #0]
 800b284:	0876      	lsrs	r6, r6, #1
	Ypoint = Yend - Ystart;
 800b286:	1a5b      	subs	r3, r3, r1
    uint16_t Num = Xstart + Ystart * (sOLED_DIS.OLED_Dis_Column / 2);
 800b288:	fb11 f406 	smulbb	r4, r1, r6
 800b28c:	3101      	adds	r1, #1
 800b28e:	fb11 f106 	smulbb	r1, r1, r6
 800b292:	4404      	add	r4, r0
    for(i = 0; i < Ypoint; i++) {
 800b294:	2500      	movs	r5, #0
 800b296:	4408      	add	r0, r1
	Xpoint = (Xend - Xstart) / 2;
 800b298:	b292      	uxth	r2, r2
	Ypoint = Yend - Ystart;
 800b29a:	b29b      	uxth	r3, r3
    uint16_t Num = Xstart + Ystart * (sOLED_DIS.OLED_Dis_Column / 2);
 800b29c:	b2a4      	uxth	r4, r4
 800b29e:	b280      	uxth	r0, r0
            Buffer[Num + m] = 0x00;
 800b2a0:	46ae      	mov	lr, r5
    for(i = 0; i < Ypoint; i++) {
 800b2a2:	b2a9      	uxth	r1, r5
 800b2a4:	428b      	cmp	r3, r1
 800b2a6:	d90f      	bls.n	800b2c8 <OLED_ClearWindow+0x54>
 800b2a8:	2100      	movs	r1, #0
 800b2aa:	e004      	b.n	800b2b6 <OLED_ClearWindow+0x42>
            Buffer[Num + m] = 0x00;
 800b2ac:	eb04 0c01 	add.w	ip, r4, r1
 800b2b0:	3101      	adds	r1, #1
 800b2b2:	f827 e01c 	strh.w	lr, [r7, ip, lsl #1]
        for(m = 0; m < Xpoint; m++) {
 800b2b6:	fa1f fc81 	uxth.w	ip, r1
 800b2ba:	4562      	cmp	r2, ip
 800b2bc:	d8f6      	bhi.n	800b2ac <OLED_ClearWindow+0x38>
 800b2be:	1831      	adds	r1, r6, r0
        }
		Num = Xstart + (Ystart + i + 1) * (sOLED_DIS.OLED_Dis_Column / 2);
 800b2c0:	4604      	mov	r4, r0
 800b2c2:	3501      	adds	r5, #1
 800b2c4:	b288      	uxth	r0, r1
 800b2c6:	e7ec      	b.n	800b2a2 <OLED_ClearWindow+0x2e>
 800b2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2ca:	bf00      	nop
 800b2cc:	20008e78 	.word	0x20008e78
 800b2d0:	20008e82 	.word	0x20008e82

0800b2d4 <OLED_DisWindow>:

/********************************************************************************
function:	Update Window memory to LCD
********************************************************************************/
void OLED_DisWindow(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend)
{
 800b2d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2d8:	460f      	mov	r7, r1
	uint16_t page, Column, Xpoint, Ypoint;
	Xpoint = (Xend - Xstart) / 2;
 800b2da:	1a15      	subs	r5, r2, r0
	Ypoint = Yend - Ystart;
 800b2dc:	eba3 0801 	sub.w	r8, r3, r1
{
 800b2e0:	4606      	mov	r6, r0
    OLED_SetWindow(Xstart, Ystart, Xend, Yend);
 800b2e2:	f7ff ff57 	bl	800b194 <OLED_SetWindow>
	
	//write data
    COLOR *pBuf = (COLOR *)Buffer + Xstart + Ystart * (sOLED_DIS.OLED_Dis_Column / 2);
 800b2e6:	4a16      	ldr	r2, [pc, #88]	; (800b340 <OLED_DisWindow+0x6c>)
 800b2e8:	4b16      	ldr	r3, [pc, #88]	; (800b344 <OLED_DisWindow+0x70>)
	Xpoint = (Xend - Xstart) / 2;
 800b2ea:	2402      	movs	r4, #2
 800b2ec:	fb95 f5f4 	sdiv	r5, r5, r4
    COLOR *pBuf = (COLOR *)Buffer + Xstart + Ystart * (sOLED_DIS.OLED_Dis_Column / 2);
 800b2f0:	8814      	ldrh	r4, [r2, #0]
 800b2f2:	0864      	lsrs	r4, r4, #1
 800b2f4:	fb07 6404 	mla	r4, r7, r4, r6
	Ypoint = Yend - Ystart;
 800b2f8:	fa1f f888 	uxth.w	r8, r8
 800b2fc:	3701      	adds	r7, #1
	Xpoint = (Xend - Xstart) / 2;
 800b2fe:	b2ad      	uxth	r5, r5
    COLOR *pBuf = (COLOR *)Buffer + Xstart + Ystart * (sOLED_DIS.OLED_Dis_Column / 2);
 800b300:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800b304:	44b8      	add	r8, r7
 800b306:	4692      	mov	sl, r2
 800b308:	469b      	mov	fp, r3
    for (page = 0; page < Ypoint; page++) {
 800b30a:	45b8      	cmp	r8, r7
 800b30c:	d015      	beq.n	800b33a <OLED_DisWindow+0x66>
 800b30e:	f04f 0900 	mov.w	r9, #0
 800b312:	e005      	b.n	800b320 <OLED_DisWindow+0x4c>
        for(Column = 0; Column < Xpoint; Column++ ) {
            OLED_WriteData(*pBuf);
 800b314:	f814 0019 	ldrb.w	r0, [r4, r9, lsl #1]
 800b318:	f7ff fe9f 	bl	800b05a <OLED_WriteData>
 800b31c:	f109 0901 	add.w	r9, r9, #1
        for(Column = 0; Column < Xpoint; Column++ ) {
 800b320:	fa1f f389 	uxth.w	r3, r9
 800b324:	429d      	cmp	r5, r3
 800b326:	d8f5      	bhi.n	800b314 <OLED_DisWindow+0x40>
            pBuf++;
        }
		pBuf = (COLOR *)Buffer + Xstart + (Ystart + page + 1) * (sOLED_DIS.OLED_Dis_Column / 2);
 800b328:	f8ba 4000 	ldrh.w	r4, [sl]
 800b32c:	0864      	lsrs	r4, r4, #1
 800b32e:	fb07 6404 	mla	r4, r7, r4, r6
 800b332:	eb0b 0444 	add.w	r4, fp, r4, lsl #1
 800b336:	3701      	adds	r7, #1
 800b338:	e7e7      	b.n	800b30a <OLED_DisWindow+0x36>
 800b33a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b33e:	bf00      	nop
 800b340:	20008e78 	.word	0x20008e78
 800b344:	20008e82 	.word	0x20008e82

0800b348 <GUI_DrawPoint>:
	Color		:   Set color
	Dot_Pixel	:	point size
******************************************************************************/
void GUI_DrawPoint(POINT Xpoint, POINT Ypoint, COLOR Color,
                   DOT_PIXEL Dot_Pixel, DOT_STYLE DOT_STYLE)
{
 800b348:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b34c:	4690      	mov	r8, r2
    if(Xpoint > sOLED_DIS.OLED_Dis_Column || Ypoint > sOLED_DIS.OLED_Dis_Page) {
 800b34e:	4a26      	ldr	r2, [pc, #152]	; (800b3e8 <GUI_DrawPoint+0xa0>)
{
 800b350:	4683      	mov	fp, r0
    if(Xpoint > sOLED_DIS.OLED_Dis_Column || Ypoint > sOLED_DIS.OLED_Dis_Page) {
 800b352:	8810      	ldrh	r0, [r2, #0]
 800b354:	4558      	cmp	r0, fp
{
 800b356:	460f      	mov	r7, r1
 800b358:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
    if(Xpoint > sOLED_DIS.OLED_Dis_Column || Ypoint > sOLED_DIS.OLED_Dis_Page) {
 800b35c:	d302      	bcc.n	800b364 <GUI_DrawPoint+0x1c>
 800b35e:	8852      	ldrh	r2, [r2, #2]
 800b360:	42ba      	cmp	r2, r7
 800b362:	d204      	bcs.n	800b36e <GUI_DrawPoint+0x26>
		printf("GUI_DrawPoint Input exceeds the normal display range\r\n");
 800b364:	4821      	ldr	r0, [pc, #132]	; (800b3ec <GUI_DrawPoint+0xa4>)
            for(YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
                OLED_SetColor(Xpoint + XDir_Num, Ypoint + YDir_Num, Color);
            }
        }
    }
}
 800b366:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("GUI_DrawPoint Input exceeds the normal display range\r\n");
 800b36a:	f005 bf53 	b.w	8011214 <puts>
    if(DOT_STYLE == DOT_STYLE_DFT) {
 800b36e:	2901      	cmp	r1, #1
 800b370:	d008      	beq.n	800b384 <GUI_DrawPoint+0x3c>
 800b372:	f04f 0a00 	mov.w	sl, #0
        for(XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800b376:	b29c      	uxth	r4, r3
 800b378:	fa1f f08a 	uxth.w	r0, sl
 800b37c:	4284      	cmp	r4, r0
 800b37e:	d81e      	bhi.n	800b3be <GUI_DrawPoint+0x76>
 800b380:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800b384:	ea4f 0943 	mov.w	r9, r3, lsl #1
                OLED_SetColor(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800b388:	b29c      	uxth	r4, r3
        for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800b38a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800b38e:	2500      	movs	r5, #0
                OLED_SetColor(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800b390:	ebab 0b04 	sub.w	fp, fp, r4
        for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800b394:	45a9      	cmp	r9, r5
 800b396:	ddf3      	ble.n	800b380 <GUI_DrawPoint+0x38>
 800b398:	2600      	movs	r6, #0
                OLED_SetColor(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800b39a:	eb05 0a0b 	add.w	sl, r5, fp
 800b39e:	e009      	b.n	800b3b4 <GUI_DrawPoint+0x6c>
 800b3a0:	1b39      	subs	r1, r7, r4
 800b3a2:	4431      	add	r1, r6
 800b3a4:	4642      	mov	r2, r8
 800b3a6:	b289      	uxth	r1, r1
 800b3a8:	fa1f f08a 	uxth.w	r0, sl
 800b3ac:	f7ff ff1c 	bl	800b1e8 <OLED_SetColor>
            for(YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800b3b0:	3601      	adds	r6, #1
 800b3b2:	b2b6      	uxth	r6, r6
 800b3b4:	454e      	cmp	r6, r9
 800b3b6:	dbf3      	blt.n	800b3a0 <GUI_DrawPoint+0x58>
        for(XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800b3b8:	3501      	adds	r5, #1
 800b3ba:	b2ad      	uxth	r5, r5
 800b3bc:	e7ea      	b.n	800b394 <GUI_DrawPoint+0x4c>
                OLED_SetColor(Xpoint + XDir_Num, Ypoint + YDir_Num, Color);
 800b3be:	4458      	add	r0, fp
 800b3c0:	f04f 0900 	mov.w	r9, #0
 800b3c4:	b285      	uxth	r5, r0
 800b3c6:	eb07 0109 	add.w	r1, r7, r9
 800b3ca:	4642      	mov	r2, r8
 800b3cc:	b289      	uxth	r1, r1
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	f109 0901 	add.w	r9, r9, #1
 800b3d4:	f7ff ff08 	bl	800b1e8 <OLED_SetColor>
            for(YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800b3d8:	fa1f f389 	uxth.w	r3, r9
 800b3dc:	42a3      	cmp	r3, r4
 800b3de:	d3f2      	bcc.n	800b3c6 <GUI_DrawPoint+0x7e>
 800b3e0:	f10a 0a01 	add.w	sl, sl, #1
 800b3e4:	e7c8      	b.n	800b378 <GUI_DrawPoint+0x30>
 800b3e6:	bf00      	nop
 800b3e8:	20008e78 	.word	0x20008e78
 800b3ec:	08018237 	.word	0x08018237

0800b3f0 <GUI_DrawLine>:
	Yend   ：End point y coordinate
	Color  ：The color of the line segment
******************************************************************************/
void GUI_DrawLine(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                  COLOR Color, LINE_STYLE Line_Style, DOT_PIXEL Dot_Pixel)
{
 800b3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3f4:	b08b      	sub	sp, #44	; 0x2c
 800b3f6:	469b      	mov	fp, r3
 800b3f8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 800b3fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b3fe:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800b402:	9304      	str	r3, [sp, #16]
 800b404:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 800b408:	9305      	str	r3, [sp, #20]
    if(Xstart > sOLED_DIS.OLED_Dis_Column || Ystart > sOLED_DIS.OLED_Dis_Page ||
 800b40a:	4b36      	ldr	r3, [pc, #216]	; (800b4e4 <GUI_DrawLine+0xf4>)
{
 800b40c:	4692      	mov	sl, r2
    if(Xstart > sOLED_DIS.OLED_Dis_Column || Ystart > sOLED_DIS.OLED_Dis_Page ||
 800b40e:	881a      	ldrh	r2, [r3, #0]
 800b410:	4282      	cmp	r2, r0
{
 800b412:	4605      	mov	r5, r0
 800b414:	460c      	mov	r4, r1
    if(Xstart > sOLED_DIS.OLED_Dis_Column || Ystart > sOLED_DIS.OLED_Dis_Page ||
 800b416:	d306      	bcc.n	800b426 <GUI_DrawLine+0x36>
 800b418:	885b      	ldrh	r3, [r3, #2]
 800b41a:	428b      	cmp	r3, r1
 800b41c:	d303      	bcc.n	800b426 <GUI_DrawLine+0x36>
 800b41e:	4552      	cmp	r2, sl
 800b420:	d301      	bcc.n	800b426 <GUI_DrawLine+0x36>
       Xend > sOLED_DIS.OLED_Dis_Column || Yend > sOLED_DIS.OLED_Dis_Page) {
 800b422:	455b      	cmp	r3, fp
 800b424:	d205      	bcs.n	800b432 <GUI_DrawLine+0x42>
		   printf("GUI_DrawLine Input exceeds the normal display range\r\n");
 800b426:	4830      	ldr	r0, [pc, #192]	; (800b4e8 <GUI_DrawLine+0xf8>)
            if(Ypoint == Yend) break;
            Esp += dx;
            Ypoint += YAddway;
        }
    }
}
 800b428:	b00b      	add	sp, #44	; 0x2c
 800b42a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		   printf("GUI_DrawLine Input exceeds the normal display range\r\n");
 800b42e:	f005 bef1 	b.w	8011214 <puts>
    int32_t dx =(int32_t)Xend -(int32_t)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800b432:	ebaa 0300 	sub.w	r3, sl, r0
    int32_t dy =(int32_t)Yend -(int32_t)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800b436:	ebab 0901 	sub.w	r9, fp, r1
    int32_t dx =(int32_t)Xend -(int32_t)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	bfb8      	it	lt
 800b43e:	425b      	neglt	r3, r3
    int32_t dy =(int32_t)Yend -(int32_t)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800b440:	f1b9 0f00 	cmp.w	r9, #0
 800b444:	bfb8      	it	lt
 800b446:	f1c9 0900 	rsblt	r9, r9, #0
    int32_t dx =(int32_t)Xend -(int32_t)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800b44a:	9303      	str	r3, [sp, #12]
    int32_t dy =(int32_t)Yend -(int32_t)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800b44c:	f1c9 0300 	rsb	r3, r9, #0
 800b450:	9306      	str	r3, [sp, #24]
    int32_t XAddway = Xstart < Xend ? 1 : -1;
 800b452:	4550      	cmp	r0, sl
 800b454:	bf34      	ite	cc
 800b456:	2301      	movcc	r3, #1
 800b458:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
 800b45c:	9307      	str	r3, [sp, #28]
    int32_t YAddway = Ystart < Yend ? 1 : -1;
 800b45e:	4559      	cmp	r1, fp
 800b460:	bf34      	ite	cc
 800b462:	2301      	movcc	r3, #1
 800b464:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
 800b468:	9308      	str	r3, [sp, #32]
    int32_t Esp = dx + dy;
 800b46a:	9b03      	ldr	r3, [sp, #12]
    int8_t Line_Style_Temp = 0;
 800b46c:	2700      	movs	r7, #0
    int32_t Esp = dx + dy;
 800b46e:	eba3 0809 	sub.w	r8, r3, r9
        if(Line_Style == LINE_DOTTED && Line_Style_Temp %3 == 0) {
 800b472:	9b04      	ldr	r3, [sp, #16]
        Line_Style_Temp++;
 800b474:	3701      	adds	r7, #1
        if(Line_Style == LINE_DOTTED && Line_Style_Temp %3 == 0) {
 800b476:	2b01      	cmp	r3, #1
        Line_Style_Temp++;
 800b478:	b27f      	sxtb	r7, r7
        if(Line_Style == LINE_DOTTED && Line_Style_Temp %3 == 0) {
 800b47a:	d126      	bne.n	800b4ca <GUI_DrawLine+0xda>
 800b47c:	2303      	movs	r3, #3
 800b47e:	fb97 f6f3 	sdiv	r6, r7, r3
 800b482:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800b486:	1bbe      	subs	r6, r7, r6
 800b488:	b276      	sxtb	r6, r6
 800b48a:	b9f6      	cbnz	r6, 800b4ca <GUI_DrawLine+0xda>
            GUI_DrawPoint(Xpoint, Ypoint, OLED_BACKGROUND, Dot_Pixel, DOT_STYLE_DFT);
 800b48c:	9b04      	ldr	r3, [sp, #16]
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	4632      	mov	r2, r6
 800b492:	9b05      	ldr	r3, [sp, #20]
 800b494:	4621      	mov	r1, r4
 800b496:	4628      	mov	r0, r5
 800b498:	f7ff ff56 	bl	800b348 <GUI_DrawPoint>
            Line_Style_Temp = 0;
 800b49c:	4637      	mov	r7, r6
        if(2 * Esp >= dy) {
 800b49e:	9b06      	ldr	r3, [sp, #24]
 800b4a0:	ebb3 0f48 	cmp.w	r3, r8, lsl #1
 800b4a4:	dc06      	bgt.n	800b4b4 <GUI_DrawLine+0xc4>
            if(Xpoint == Xend) break;
 800b4a6:	45aa      	cmp	sl, r5
 800b4a8:	d018      	beq.n	800b4dc <GUI_DrawLine+0xec>
            Xpoint += XAddway;
 800b4aa:	9b07      	ldr	r3, [sp, #28]
 800b4ac:	441d      	add	r5, r3
            Esp += dy;
 800b4ae:	eba8 0809 	sub.w	r8, r8, r9
            Xpoint += XAddway;
 800b4b2:	b2ad      	uxth	r5, r5
        if(2 * Esp <= dx) {
 800b4b4:	9b03      	ldr	r3, [sp, #12]
 800b4b6:	ebb3 0f48 	cmp.w	r3, r8, lsl #1
 800b4ba:	dbda      	blt.n	800b472 <GUI_DrawLine+0x82>
            if(Ypoint == Yend) break;
 800b4bc:	45a3      	cmp	fp, r4
 800b4be:	d00d      	beq.n	800b4dc <GUI_DrawLine+0xec>
            Esp += dx;
 800b4c0:	4498      	add	r8, r3
            Ypoint += YAddway;
 800b4c2:	9b08      	ldr	r3, [sp, #32]
 800b4c4:	441c      	add	r4, r3
 800b4c6:	b2a4      	uxth	r4, r4
 800b4c8:	e7d3      	b.n	800b472 <GUI_DrawLine+0x82>
            GUI_DrawPoint(Xpoint, Ypoint, Color, Dot_Pixel, DOT_STYLE_DFT);
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	9300      	str	r3, [sp, #0]
 800b4ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4d0:	9b05      	ldr	r3, [sp, #20]
 800b4d2:	4621      	mov	r1, r4
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	f7ff ff37 	bl	800b348 <GUI_DrawPoint>
 800b4da:	e7e0      	b.n	800b49e <GUI_DrawLine+0xae>
}
 800b4dc:	b00b      	add	sp, #44	; 0x2c
 800b4de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4e2:	bf00      	nop
 800b4e4:	20008e78 	.word	0x20008e78
 800b4e8:	08018202 	.word	0x08018202

0800b4ec <GUI_DrawRectangle>:
	Color  ：The color of the Rectangular segment
	Filled : Whether it is filled--- 1 solid 0：empty
******************************************************************************/
void GUI_DrawRectangle(POINT Xstart, POINT Ystart, POINT Xend, POINT Yend,
                       COLOR Color, DRAW_FILL Filled, DOT_PIXEL Dot_Pixel )
{
 800b4ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b4f0:	461f      	mov	r7, r3
    if(Xstart > sOLED_DIS.OLED_Dis_Column || Ystart > sOLED_DIS.OLED_Dis_Page ||
 800b4f2:	4b2a      	ldr	r3, [pc, #168]	; (800b59c <GUI_DrawRectangle+0xb0>)
{
 800b4f4:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
    if(Xstart > sOLED_DIS.OLED_Dis_Column || Ystart > sOLED_DIS.OLED_Dis_Page ||
 800b4f8:	f8b3 e000 	ldrh.w	lr, [r3]
{
 800b4fc:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 800b500:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
    if(Xstart > sOLED_DIS.OLED_Dis_Column || Ystart > sOLED_DIS.OLED_Dis_Page ||
 800b504:	4586      	cmp	lr, r0
{
 800b506:	4606      	mov	r6, r0
 800b508:	460c      	mov	r4, r1
 800b50a:	4615      	mov	r5, r2
    if(Xstart > sOLED_DIS.OLED_Dis_Column || Ystart > sOLED_DIS.OLED_Dis_Page ||
 800b50c:	d306      	bcc.n	800b51c <GUI_DrawRectangle+0x30>
 800b50e:	885b      	ldrh	r3, [r3, #2]
 800b510:	428b      	cmp	r3, r1
 800b512:	d303      	bcc.n	800b51c <GUI_DrawRectangle+0x30>
 800b514:	4596      	cmp	lr, r2
 800b516:	d301      	bcc.n	800b51c <GUI_DrawRectangle+0x30>
       Xend > sOLED_DIS.OLED_Dis_Column || Yend > sOLED_DIS.OLED_Dis_Page) {
 800b518:	42bb      	cmp	r3, r7
 800b51a:	d205      	bcs.n	800b528 <GUI_DrawRectangle+0x3c>
		   printf("Input exceeds the normal display range\r\n");
 800b51c:	4820      	ldr	r0, [pc, #128]	; (800b5a0 <GUI_DrawRectangle+0xb4>)
        GUI_DrawLine(Xstart, Ystart, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
        GUI_DrawLine(Xstart, Ystart, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
        GUI_DrawLine(Xend, Yend, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
        GUI_DrawLine(Xend, Yend, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
    }
}
 800b51e:	b004      	add	sp, #16
 800b520:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		   printf("Input exceeds the normal display range\r\n");
 800b524:	f005 be76 	b.w	8011214 <puts>
    if(Filled ) {
 800b528:	f1b9 0f00 	cmp.w	r9, #0
 800b52c:	d011      	beq.n	800b552 <GUI_DrawRectangle+0x66>
            GUI_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , LINE_SOLID, Dot_Pixel);
 800b52e:	f04f 0900 	mov.w	r9, #0
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800b532:	42bc      	cmp	r4, r7
 800b534:	d302      	bcc.n	800b53c <GUI_DrawRectangle+0x50>
}
 800b536:	b004      	add	sp, #16
 800b538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            GUI_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , LINE_SOLID, Dot_Pixel);
 800b53c:	4623      	mov	r3, r4
 800b53e:	4621      	mov	r1, r4
 800b540:	e88d 0700 	stmia.w	sp, {r8, r9, sl}
 800b544:	462a      	mov	r2, r5
 800b546:	4630      	mov	r0, r6
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800b548:	3401      	adds	r4, #1
            GUI_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , LINE_SOLID, Dot_Pixel);
 800b54a:	f7ff ff51 	bl	800b3f0 <GUI_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800b54e:	b2a4      	uxth	r4, r4
 800b550:	e7ef      	b.n	800b532 <GUI_DrawRectangle+0x46>
        GUI_DrawLine(Xstart, Ystart, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 800b552:	460b      	mov	r3, r1
 800b554:	e88d 0700 	stmia.w	sp, {r8, r9, sl}
 800b558:	f7ff ff4a 	bl	800b3f0 <GUI_DrawLine>
        GUI_DrawLine(Xstart, Ystart, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 800b55c:	463b      	mov	r3, r7
 800b55e:	4632      	mov	r2, r6
 800b560:	4621      	mov	r1, r4
 800b562:	4630      	mov	r0, r6
 800b564:	e88d 0700 	stmia.w	sp, {r8, r9, sl}
 800b568:	f7ff ff42 	bl	800b3f0 <GUI_DrawLine>
        GUI_DrawLine(Xend, Yend, Xend, Ystart, Color , LINE_SOLID, Dot_Pixel);
 800b56c:	4623      	mov	r3, r4
 800b56e:	462a      	mov	r2, r5
 800b570:	4639      	mov	r1, r7
 800b572:	4628      	mov	r0, r5
 800b574:	e88d 0700 	stmia.w	sp, {r8, r9, sl}
 800b578:	f7ff ff3a 	bl	800b3f0 <GUI_DrawLine>
        GUI_DrawLine(Xend, Yend, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 800b57c:	463b      	mov	r3, r7
 800b57e:	4632      	mov	r2, r6
 800b580:	4639      	mov	r1, r7
 800b582:	4628      	mov	r0, r5
 800b584:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b588:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 800b58c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
}
 800b590:	b004      	add	sp, #16
 800b592:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        GUI_DrawLine(Xend, Yend, Xstart, Yend, Color , LINE_SOLID, Dot_Pixel);
 800b596:	f7ff bf2b 	b.w	800b3f0 <GUI_DrawLine>
 800b59a:	bf00      	nop
 800b59c:	20008e78 	.word	0x20008e78
 800b5a0:	080181da 	.word	0x080181da

0800b5a4 <GUI_DisChar>:
	Color_Background : Select the background color of the English character
	Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void GUI_DisChar(POINT Xpoint, POINT Ypoint, const char Acsii_Char,
                 sFONT* Font, COLOR Color_Background, COLOR Color_Foreground)
{
 800b5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5a8:	b085      	sub	sp, #20
 800b5aa:	461e      	mov	r6, r3
 800b5ac:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800b5b0:	9302      	str	r3, [sp, #8]
 800b5b2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 800b5b6:	9303      	str	r3, [sp, #12]
    POINT Page, Column;

    if(Xpoint > sOLED_DIS.OLED_Dis_Column || Ypoint > sOLED_DIS.OLED_Dis_Page) {
 800b5b8:	4b2c      	ldr	r3, [pc, #176]	; (800b66c <GUI_DisChar+0xc8>)
{
 800b5ba:	4689      	mov	r9, r1
    if(Xpoint > sOLED_DIS.OLED_Dis_Column || Ypoint > sOLED_DIS.OLED_Dis_Page) {
 800b5bc:	8819      	ldrh	r1, [r3, #0]
 800b5be:	4281      	cmp	r1, r0
{
 800b5c0:	4680      	mov	r8, r0
    if(Xpoint > sOLED_DIS.OLED_Dis_Column || Ypoint > sOLED_DIS.OLED_Dis_Page) {
 800b5c2:	d302      	bcc.n	800b5ca <GUI_DisChar+0x26>
 800b5c4:	885b      	ldrh	r3, [r3, #2]
 800b5c6:	454b      	cmp	r3, r9
 800b5c8:	d205      	bcs.n	800b5d6 <GUI_DisChar+0x32>
		printf("GUI_DisChar Input exceeds the normal display range\r\n");
 800b5ca:	4829      	ldr	r0, [pc, #164]	; (800b670 <GUI_DisChar+0xcc>)
                ptr++;
        }/* Write a line */
        if(Font->Width % 8 != 0)
            ptr++;
    }/* Write all */
}
 800b5cc:	b005      	add	sp, #20
 800b5ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("GUI_DisChar Input exceeds the normal display range\r\n");
 800b5d2:	f005 be1f 	b.w	8011214 <puts>
    uint32_t Char_Offset =(Acsii_Char - ' ') * Font->Height *(Font->Width / 8 +(Font->Width % 8 ? 1 : 0));
 800b5d6:	88b3      	ldrh	r3, [r6, #4]
 800b5d8:	f013 0407 	ands.w	r4, r3, #7
 800b5dc:	bf18      	it	ne
 800b5de:	2401      	movne	r4, #1
 800b5e0:	eb04 04d3 	add.w	r4, r4, r3, lsr #3
 800b5e4:	f1a2 0320 	sub.w	r3, r2, #32
 800b5e8:	88f2      	ldrh	r2, [r6, #6]
 800b5ea:	435a      	muls	r2, r3
    const unsigned char *ptr = &Font->table[Char_Offset];
 800b5ec:	6833      	ldr	r3, [r6, #0]
 800b5ee:	464d      	mov	r5, r9
 800b5f0:	fb02 3404 	mla	r4, r2, r4, r3
 800b5f4:	f04f 0a01 	mov.w	sl, #1
    for(Page = 0; Page < Font->Height; Page ++ ) {
 800b5f8:	eba5 0309 	sub.w	r3, r5, r9
 800b5fc:	88f2      	ldrh	r2, [r6, #6]
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	429a      	cmp	r2, r3
 800b602:	d930      	bls.n	800b666 <GUI_DisChar+0xc2>
 800b604:	2700      	movs	r7, #0
 800b606:	e017      	b.n	800b638 <GUI_DisChar+0x94>
            if(FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 800b608:	9a02      	ldr	r2, [sp, #8]
 800b60a:	7823      	ldrb	r3, [r4, #0]
 800b60c:	f000 0b07 	and.w	fp, r0, #7
 800b610:	b9ea      	cbnz	r2, 800b64e <GUI_DisChar+0xaa>
                if(*ptr &(0x80 >>(Column % 8)))
 800b612:	2280      	movs	r2, #128	; 0x80
 800b614:	fa42 f20b 	asr.w	r2, r2, fp
 800b618:	421a      	tst	r2, r3
 800b61a:	d008      	beq.n	800b62e <GUI_DisChar+0x8a>
                    GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800b61c:	4440      	add	r0, r8
 800b61e:	f8cd a000 	str.w	sl, [sp]
 800b622:	2301      	movs	r3, #1
                    GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800b624:	9a03      	ldr	r2, [sp, #12]
                    GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800b626:	4629      	mov	r1, r5
 800b628:	b280      	uxth	r0, r0
 800b62a:	f7ff fe8d 	bl	800b348 <GUI_DrawPoint>
            if(Column % 8 == 7)
 800b62e:	f1bb 0f07 	cmp.w	fp, #7
                ptr++;
 800b632:	bf08      	it	eq
 800b634:	3401      	addeq	r4, #1
 800b636:	3701      	adds	r7, #1
        for(Column = 0; Column < Font->Width; Column ++ ) {
 800b638:	88b3      	ldrh	r3, [r6, #4]
 800b63a:	b2b8      	uxth	r0, r7
 800b63c:	4298      	cmp	r0, r3
 800b63e:	d3e3      	bcc.n	800b608 <GUI_DisChar+0x64>
        if(Font->Width % 8 != 0)
 800b640:	075b      	lsls	r3, r3, #29
 800b642:	f105 0501 	add.w	r5, r5, #1
            ptr++;
 800b646:	bf18      	it	ne
 800b648:	3401      	addne	r4, #1
 800b64a:	b2ad      	uxth	r5, r5
 800b64c:	e7d4      	b.n	800b5f8 <GUI_DisChar+0x54>
                if(*ptr &(0x80 >>(Column % 8))) {
 800b64e:	2280      	movs	r2, #128	; 0x80
 800b650:	fa42 f20b 	asr.w	r2, r2, fp
 800b654:	421a      	tst	r2, r3
                    GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800b656:	f8cd a000 	str.w	sl, [sp]
 800b65a:	4440      	add	r0, r8
 800b65c:	f04f 0301 	mov.w	r3, #1
                if(*ptr &(0x80 >>(Column % 8))) {
 800b660:	d1e0      	bne.n	800b624 <GUI_DisChar+0x80>
                    GUI_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800b662:	9a02      	ldr	r2, [sp, #8]
 800b664:	e7df      	b.n	800b626 <GUI_DisChar+0x82>
}
 800b666:	b005      	add	sp, #20
 800b668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b66c:	20008e78 	.word	0x20008e78
 800b670:	08018195 	.word	0x08018195

0800b674 <GUI_DisString_EN>:
	Color_Background : Select the background color of the English character
	Color_Foreground : Select the foreground color of the English character
******************************************************************************/
void GUI_DisString_EN(POINT Xstart, POINT Ystart, const char * pString,
                      sFONT* Font,COLOR Color_Background, COLOR Color_Foreground )
{
 800b674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b678:	b085      	sub	sp, #20
    POINT Xpoint = Xstart;
    POINT Ypoint = Ystart;

    if(Xstart > sOLED_DIS.OLED_Dis_Column || Ystart > sOLED_DIS.OLED_Dis_Page) {
 800b67a:	4e20      	ldr	r6, [pc, #128]	; (800b6fc <GUI_DisString_EN+0x88>)
{
 800b67c:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 800b680:	461f      	mov	r7, r3
 800b682:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 800b686:	9303      	str	r3, [sp, #12]
    if(Xstart > sOLED_DIS.OLED_Dis_Column || Ystart > sOLED_DIS.OLED_Dis_Page) {
 800b688:	8833      	ldrh	r3, [r6, #0]
 800b68a:	4283      	cmp	r3, r0
{
 800b68c:	4681      	mov	r9, r0
 800b68e:	468a      	mov	sl, r1
    if(Xstart > sOLED_DIS.OLED_Dis_Column || Ystart > sOLED_DIS.OLED_Dis_Page) {
 800b690:	d32d      	bcc.n	800b6ee <GUI_DisString_EN+0x7a>
 800b692:	8873      	ldrh	r3, [r6, #2]
 800b694:	428b      	cmp	r3, r1
 800b696:	d32a      	bcc.n	800b6ee <GUI_DisString_EN+0x7a>
 800b698:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 800b69c:	460d      	mov	r5, r1
 800b69e:	4604      	mov	r4, r0
		printf("GUI_DisString_EN Input exceeds the normal display range\r\n");
        return;
    }

    while(* pString != '\0') {
 800b6a0:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 800b6a4:	b912      	cbnz	r2, 800b6ac <GUI_DisString_EN+0x38>
        pString ++;

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
    }
}
 800b6a6:	b005      	add	sp, #20
 800b6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if((Xpoint + Font->Width ) > sOLED_DIS.OLED_Dis_Column ) {
 800b6ac:	88bb      	ldrh	r3, [r7, #4]
 800b6ae:	8831      	ldrh	r1, [r6, #0]
 800b6b0:	4423      	add	r3, r4
 800b6b2:	428b      	cmp	r3, r1
            Ypoint += Font->Height;
 800b6b4:	bfc8      	it	gt
 800b6b6:	88fb      	ldrhgt	r3, [r7, #6]
        if((Ypoint  + Font->Height ) > sOLED_DIS.OLED_Dis_Page ) {
 800b6b8:	8871      	ldrh	r1, [r6, #2]
            Ypoint += Font->Height;
 800b6ba:	bfc8      	it	gt
 800b6bc:	18ed      	addgt	r5, r5, r3
        if((Ypoint  + Font->Height ) > sOLED_DIS.OLED_Dis_Page ) {
 800b6be:	88fb      	ldrh	r3, [r7, #6]
        GUI_DisChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800b6c0:	f8cd b004 	str.w	fp, [sp, #4]
            Ypoint += Font->Height;
 800b6c4:	bfc8      	it	gt
 800b6c6:	b2ad      	uxthgt	r5, r5
        if((Ypoint  + Font->Height ) > sOLED_DIS.OLED_Dis_Page ) {
 800b6c8:	442b      	add	r3, r5
            Ypoint += Font->Height;
 800b6ca:	bfc8      	it	gt
 800b6cc:	464c      	movgt	r4, r9
        if((Ypoint  + Font->Height ) > sOLED_DIS.OLED_Dis_Page ) {
 800b6ce:	428b      	cmp	r3, r1
 800b6d0:	bfc8      	it	gt
 800b6d2:	464c      	movgt	r4, r9
        GUI_DisChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800b6d4:	9b03      	ldr	r3, [sp, #12]
 800b6d6:	9300      	str	r3, [sp, #0]
        if((Ypoint  + Font->Height ) > sOLED_DIS.OLED_Dis_Page ) {
 800b6d8:	bfc8      	it	gt
 800b6da:	4655      	movgt	r5, sl
        GUI_DisChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800b6dc:	463b      	mov	r3, r7
 800b6de:	4620      	mov	r0, r4
 800b6e0:	4629      	mov	r1, r5
 800b6e2:	f7ff ff5f 	bl	800b5a4 <GUI_DisChar>
        Xpoint += Font->Width;
 800b6e6:	88bb      	ldrh	r3, [r7, #4]
 800b6e8:	441c      	add	r4, r3
 800b6ea:	b2a4      	uxth	r4, r4
 800b6ec:	e7d8      	b.n	800b6a0 <GUI_DisString_EN+0x2c>
		printf("GUI_DisString_EN Input exceeds the normal display range\r\n");
 800b6ee:	4804      	ldr	r0, [pc, #16]	; (800b700 <GUI_DisString_EN+0x8c>)
}
 800b6f0:	b005      	add	sp, #20
 800b6f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("GUI_DisString_EN Input exceeds the normal display range\r\n");
 800b6f6:	f005 bd8d 	b.w	8011214 <puts>
 800b6fa:	bf00      	nop
 800b6fc:	20008e78 	.word	0x20008e78
 800b700:	080181c9 	.word	0x080181c9

0800b704 <_ZN5ClockC1Ev>:
 */
#include "clock.hpp"
#include "stm32f4xx.h"

// Constructor
Clock::Clock(){
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
	averagingWindow = 8;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2208      	movs	r2, #8
 800b710:	625a      	str	r2, [r3, #36]	; 0x24
	acceptableOutlierPercentage = 0.2;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a04      	ldr	r2, [pc, #16]	; (800b728 <_ZN5ClockC1Ev+0x24>)
 800b716:	62da      	str	r2, [r3, #44]	; 0x2c
	;
}
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4618      	mov	r0, r3
 800b71c:	370c      	adds	r7, #12
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop
 800b728:	3e4ccccd 	.word	0x3e4ccccd

0800b72c <_ZN5ClockD1Ev>:
// Destructor
Clock::~Clock(void){
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
	;
}
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	4618      	mov	r0, r3
 800b738:	370c      	adds	r7, #12
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr

0800b742 <_ZN5Clock15addPeriodSampleEj>:
//
unsigned int Clock::addPeriodSample(unsigned int periodSample){
 800b742:	b480      	push	{r7}
 800b744:	b089      	sub	sp, #36	; 0x24
 800b746:	af00      	add	r7, sp, #0
 800b748:	6078      	str	r0, [r7, #4]
 800b74a:	6039      	str	r1, [r7, #0]

	// If the sample buffer has not overflown and this is one of the first samples always add it
	if((sampleIndex  == 0) && (sampleBufferFull == false)){
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b750:	2b00      	cmp	r3, #0
 800b752:	d124      	bne.n	800b79e <_ZN5Clock15addPeriodSampleEj+0x5c>
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d11f      	bne.n	800b79e <_ZN5Clock15addPeriodSampleEj+0x5c>
		sampleBuffer[sampleIndex] = periodSample;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	320e      	adds	r2, #14
 800b766:	6839      	ldr	r1, [r7, #0]
 800b768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		acceptableDeviation = periodSample*acceptableOutlierPercentage;
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	ee07 3a90 	vmov	s15, r3
 800b772:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800b77c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b780:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b784:	ee17 2a90 	vmov	r2, s15
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	631a      	str	r2, [r3, #48]	; 0x30
		averagedPeriod = periodSample;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	61da      	str	r2, [r3, #28]
		sampleIndex++;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b796:	1c5a      	adds	r2, r3, #1
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	629a      	str	r2, [r3, #40]	; 0x28
 800b79c:	e057      	b.n	800b84e <_ZN5Clock15addPeriodSampleEj+0x10c>
	}
	else if(sampleIndex < averagingWindow){
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	da3e      	bge.n	800b828 <_ZN5Clock15addPeriodSampleEj+0xe6>
		// Check if the sample falls within the acceptable deviation bounds
		if(((periodSample+acceptableDeviation)>averagedPeriod)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7ae:	461a      	mov	r2, r3
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	441a      	add	r2, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	69db      	ldr	r3, [r3, #28]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d915      	bls.n	800b7e8 <_ZN5Clock15addPeriodSampleEj+0xa6>
			&& ((periodSample-acceptableDeviation)<averagedPeriod)){
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	1a9a      	subs	r2, r3, r2
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	69db      	ldr	r3, [r3, #28]
 800b7ca:	429a      	cmp	r2, r3
 800b7cc:	d20c      	bcs.n	800b7e8 <_ZN5Clock15addPeriodSampleEj+0xa6>

			// Add the sampled clock period to the cyclic buffer
			sampleBuffer[sampleIndex] = periodSample;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	320e      	adds	r2, #14
 800b7d6:	6839      	ldr	r1, [r7, #0]
 800b7d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			sampleIndex++;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7e0:	1c5a      	adds	r2, r3, #1
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	629a      	str	r2, [r3, #40]	; 0x28
 800b7e6:	e032      	b.n	800b84e <_ZN5Clock15addPeriodSampleEj+0x10c>
		}
		else{
			// Reset the buffer, store the sample anyway.
			sampleIndex = 0; sampleBufferFull = false;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	629a      	str	r2, [r3, #40]	; 0x28
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			for(int i = 0; i < averagingWindow; i++){
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	61fb      	str	r3, [r7, #28]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7fe:	69fb      	ldr	r3, [r7, #28]
 800b800:	429a      	cmp	r2, r3
 800b802:	dd09      	ble.n	800b818 <_ZN5Clock15addPeriodSampleEj+0xd6>
				sampleBuffer[i] = 0;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	69fa      	ldr	r2, [r7, #28]
 800b808:	320e      	adds	r2, #14
 800b80a:	2100      	movs	r1, #0
 800b80c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			for(int i = 0; i < averagingWindow; i++){
 800b810:	69fb      	ldr	r3, [r7, #28]
 800b812:	3301      	adds	r3, #1
 800b814:	61fb      	str	r3, [r7, #28]
 800b816:	e7f0      	b.n	800b7fa <_ZN5Clock15addPeriodSampleEj+0xb8>
			}
			sampleBuffer[sampleIndex] = periodSample;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	320e      	adds	r2, #14
 800b820:	6839      	ldr	r1, [r7, #0]
 800b822:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800b826:	e012      	b.n	800b84e <_ZN5Clock15addPeriodSampleEj+0x10c>
			// sampleIndex++;
		}
	}
	else{sampleIndex = 0; sampleBufferFull = true;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2200      	movs	r2, #0
 800b82c:	629a      	str	r2, [r3, #40]	; 0x28
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2201      	movs	r2, #1
 800b832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			sampleBuffer[sampleIndex] = periodSample;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	320e      	adds	r2, #14
 800b83e:	6839      	ldr	r1, [r7, #0]
 800b840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			sampleIndex++;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b848:	1c5a      	adds	r2, r3, #1
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	629a      	str	r2, [r3, #40]	; 0x28
	}

	// Check if there is more than 1 sample, then average and calculate bounds. If there is only 1 sample return false.
	// We need 2 edges to capture a period length...
	if(sampleBufferFull){
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b854:	2b00      	cmp	r3, #0
 800b856:	d030      	beq.n	800b8ba <_ZN5Clock15addPeriodSampleEj+0x178>
		unsigned int temp = 0;
 800b858:	2300      	movs	r3, #0
 800b85a:	61bb      	str	r3, [r7, #24]
		for(int i = 0; i < averagingWindow ; i++){
 800b85c:	2300      	movs	r3, #0
 800b85e:	617b      	str	r3, [r7, #20]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	429a      	cmp	r2, r3
 800b868:	dd0b      	ble.n	800b882 <_ZN5Clock15addPeriodSampleEj+0x140>
			temp+=sampleBuffer[i];
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	697a      	ldr	r2, [r7, #20]
 800b86e:	320e      	adds	r2, #14
 800b870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b874:	69ba      	ldr	r2, [r7, #24]
 800b876:	4413      	add	r3, r2
 800b878:	61bb      	str	r3, [r7, #24]
		for(int i = 0; i < averagingWindow ; i++){
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	3301      	adds	r3, #1
 800b87e:	617b      	str	r3, [r7, #20]
 800b880:	e7ee      	b.n	800b860 <_ZN5Clock15addPeriodSampleEj+0x11e>
		}
		averagedPeriod = temp/(averagingWindow);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b886:	461a      	mov	r2, r3
 800b888:	69bb      	ldr	r3, [r7, #24]
 800b88a:	fbb3 f2f2 	udiv	r2, r3, r2
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	61da      	str	r2, [r3, #28]

		// Calculate the bounds for the next sample<
		acceptableDeviation = averagedPeriod*acceptableOutlierPercentage;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	69db      	ldr	r3, [r3, #28]
 800b896:	ee07 3a90 	vmov	s15, r3
 800b89a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800b8a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b8ac:	ee17 2a90 	vmov	r2, s15
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	631a      	str	r2, [r3, #48]	; 0x30
		return averagedPeriod;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	69db      	ldr	r3, [r3, #28]
 800b8b8:	e035      	b.n	800b926 <_ZN5Clock15addPeriodSampleEj+0x1e4>
	}
	else if(sampleIndex > 0){
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	dd30      	ble.n	800b924 <_ZN5Clock15addPeriodSampleEj+0x1e2>
		unsigned int temp = 0;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	613b      	str	r3, [r7, #16]
		for(int i = 0; i < sampleIndex; i++){
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	60fb      	str	r3, [r7, #12]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	dd0b      	ble.n	800b8ec <_ZN5Clock15addPeriodSampleEj+0x1aa>
			temp+=sampleBuffer[i];
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	68fa      	ldr	r2, [r7, #12]
 800b8d8:	320e      	adds	r2, #14
 800b8da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8de:	693a      	ldr	r2, [r7, #16]
 800b8e0:	4413      	add	r3, r2
 800b8e2:	613b      	str	r3, [r7, #16]
		for(int i = 0; i < sampleIndex; i++){
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	3301      	adds	r3, #1
 800b8e8:	60fb      	str	r3, [r7, #12]
 800b8ea:	e7ee      	b.n	800b8ca <_ZN5Clock15addPeriodSampleEj+0x188>
		}
		averagedPeriod = temp/(sampleIndex);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	fbb3 f2f2 	udiv	r2, r3, r2
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	61da      	str	r2, [r3, #28]

		acceptableDeviation = averagedPeriod*acceptableOutlierPercentage;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	69db      	ldr	r3, [r3, #28]
 800b900:	ee07 3a90 	vmov	s15, r3
 800b904:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800b90e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b912:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b916:	ee17 2a90 	vmov	r2, s15
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	631a      	str	r2, [r3, #48]	; 0x30
		return averagedPeriod;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	69db      	ldr	r3, [r3, #28]
 800b922:	e000      	b.n	800b926 <_ZN5Clock15addPeriodSampleEj+0x1e4>
	}
	else{
		// If only 1 sample has been captured:

		return 0;
 800b924:	2300      	movs	r3, #0
	}
}
 800b926:	4618      	mov	r0, r3
 800b928:	3724      	adds	r7, #36	; 0x24
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr

0800b932 <_ZN5Clock10masterTickEv>:
void Clock::masterTick(void){
 800b932:	b480      	push	{r7}
 800b934:	b083      	sub	sp, #12
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
	master++;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	695b      	ldr	r3, [r3, #20]
 800b93e:	1c5a      	adds	r2, r3, #1
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	615a      	str	r2, [r3, #20]
	sub = 0;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2200      	movs	r2, #0
 800b948:	619a      	str	r2, [r3, #24]
}
 800b94a:	bf00      	nop
 800b94c:	370c      	adds	r7, #12
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr

0800b956 <_ZN5Clock7subTickEv>:
void Clock::subTick(void){
 800b956:	b480      	push	{r7}
 800b958:	b083      	sub	sp, #12
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
	if(++sub < subDiv){
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	699b      	ldr	r3, [r3, #24]
 800b962:	3301      	adds	r3, #1
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	6193      	str	r3, [r2, #24]
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	6912      	ldr	r2, [r2, #16]
 800b96c:	4293      	cmp	r3, r2
 800b96e:	bf34      	ite	cc
 800b970:	2301      	movcc	r3, #1
 800b972:	2300      	movcs	r3, #0
 800b974:	b2db      	uxtb	r3, r3
 800b976:	2b00      	cmp	r3, #0
 800b978:	d102      	bne.n	800b980 <_ZN5Clock7subTickEv+0x2a>
		;
	}
	else{
	   sub = 0;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	619a      	str	r2, [r3, #24]
	}
}
 800b980:	bf00      	nop
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <_ZN5Clock8setTimerEP17TIM_HandleTypeDefS1_>:
// This should happen in the constructor!
void Clock::setTimer(TIM_HandleTypeDef* master, TIM_HandleTypeDef* slave){
 800b98c:	b480      	push	{r7}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]
	masterTimer = master;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	601a      	str	r2, [r3, #0]
	slaveTimer = slave;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	605a      	str	r2, [r3, #4]
}
 800b9a4:	bf00      	nop
 800b9a6:	3714      	adds	r7, #20
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ae:	4770      	bx	lr

0800b9b0 <_ZN5Clock4lockEv>:

// Implement averaging routine! and Reset on master pulse.
// Maybe inline these functions!
void Clock::lock(){
 800b9b0:	b480      	push	{r7}
 800b9b2:	b083      	sub	sp, #12
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
	if(!lockState){
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	7a5b      	ldrb	r3, [r3, #9]
 800b9bc:	f083 0301 	eor.w	r3, r3, #1
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d005      	beq.n	800b9d2 <_ZN5Clock4lockEv+0x22>
		lockState = true;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2201      	movs	r2, #1
 800b9ca:	725a      	strb	r2, [r3, #9]
		sub = 0;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2200      	movs	r2, #0
 800b9d0:	619a      	str	r2, [r3, #24]
	}
}
 800b9d2:	bf00      	nop
 800b9d4:	370c      	adds	r7, #12
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <_ZN5Clock6unlockEv>:
void Clock::unlock(){
 800b9de:	b480      	push	{r7}
 800b9e0:	b083      	sub	sp, #12
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
	lockState = false;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	725a      	strb	r2, [r3, #9]
}
 800b9ec:	bf00      	nop
 800b9ee:	370c      	adds	r7, #12
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <_ZN5Clock8isLockedEv>:
bool Clock::isLocked(void){
 800b9f8:	b480      	push	{r7}
 800b9fa:	b083      	sub	sp, #12
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
	return lockState;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	7a5b      	ldrb	r3, [r3, #9]
}
 800ba04:	4618      	mov	r0, r3
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <_ZN5Clock9setPeriodEj>:
	else if(clockSource == EXTERNAL){
	     period = masterTimer->Instance->CCR1;
	     masterTimer->Instance->CCR2 = period;
	}
}
void Clock::setPeriod(unsigned int value){
 800ba10:	b480      	push	{r7}
 800ba12:	b083      	sub	sp, #12
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
	if(clockSource == INTERNAL){
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	7a1b      	ldrb	r3, [r3, #8]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d109      	bne.n	800ba36 <_ZN5Clock9setPeriodEj+0x26>
		period = value;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	683a      	ldr	r2, [r7, #0]
 800ba26:	60da      	str	r2, [r3, #12]
		masterTimer->Instance->CCR2 = period;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	687a      	ldr	r2, [r7, #4]
 800ba30:	68d2      	ldr	r2, [r2, #12]
 800ba32:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else if(clockSource == EXTERNAL){
		period = value;
		masterTimer->Instance->CCR2 = period;
	}
}
 800ba34:	e00c      	b.n	800ba50 <_ZN5Clock9setPeriodEj+0x40>
	else if(clockSource == EXTERNAL){
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	7a1b      	ldrb	r3, [r3, #8]
 800ba3a:	2b01      	cmp	r3, #1
 800ba3c:	d108      	bne.n	800ba50 <_ZN5Clock9setPeriodEj+0x40>
		period = value;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	683a      	ldr	r2, [r7, #0]
 800ba42:	60da      	str	r2, [r3, #12]
		masterTimer->Instance->CCR2 = period;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	68d2      	ldr	r2, [r2, #12]
 800ba4e:	639a      	str	r2, [r3, #56]	; 0x38
}
 800ba50:	bf00      	nop
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <_ZN5Clock9setSourceE11ClockSource>:

void Clock::setSource(enum ClockSource source){
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	460b      	mov	r3, r1
 800ba66:	70fb      	strb	r3, [r7, #3]
	clockSource = source;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	78fa      	ldrb	r2, [r7, #3]
 800ba6c:	721a      	strb	r2, [r3, #8]
	if(source == INTERNAL){
 800ba6e:	78fb      	ldrb	r3, [r7, #3]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d10c      	bne.n	800ba8e <_ZN5Clock9setSourceE11ClockSource+0x32>
		// Do not use the external trigger
		HAL_TIM_IC_Stop_IT(masterTimer, TIM_CHANNEL_1);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	2100      	movs	r1, #0
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7fe f95e 	bl	8009d3c <HAL_TIM_IC_Stop_IT>
		HAL_TIM_OC_Start_IT(masterTimer, TIM_CHANNEL_2);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2104      	movs	r1, #4
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7fe f92a 	bl	8009ce0 <HAL_TIM_OC_Start_IT>
	else if(source == EXTERNAL){
		HAL_TIM_IC_Start_IT(masterTimer, TIM_CHANNEL_2);
		HAL_TIM_IC_Start_IT(masterTimer, TIM_CHANNEL_1);

	}
}
 800ba8c:	e00e      	b.n	800baac <_ZN5Clock9setSourceE11ClockSource+0x50>
	else if(source == EXTERNAL){
 800ba8e:	78fb      	ldrb	r3, [r7, #3]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d10b      	bne.n	800baac <_ZN5Clock9setSourceE11ClockSource+0x50>
		HAL_TIM_IC_Start_IT(masterTimer, TIM_CHANNEL_2);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	2104      	movs	r1, #4
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7fe f922 	bl	8009ce4 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start_IT(masterTimer, TIM_CHANNEL_1);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	2100      	movs	r1, #0
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7fe f91c 	bl	8009ce4 <HAL_TIM_IC_Start_IT>
}
 800baac:	bf00      	nop
 800baae:	3708      	adds	r7, #8
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <_ZN5Clock16setSlaveDivisionEj>:
volatile unsigned int Clock::getPeriod(void){
	return period;
}

void Clock::setSlaveDivision(unsigned int division){
 800bab4:	b480      	push	{r7}
 800bab6:	b083      	sub	sp, #12
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
	subDiv = division;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	683a      	ldr	r2, [r7, #0]
 800bac2:	611a      	str	r2, [r3, #16]
	// Bit hacky, to make sure there are only 'division' amounts of pulses in a period.
	// This may be necessary if a shoddy clock input is used
	slaveTimer->Instance->CNT = 0;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	2200      	movs	r2, #0
 800bacc:	625a      	str	r2, [r3, #36]	; 0x24
	slaveTimer->Instance->ARR = (period+50)/subDiv;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	687a      	ldr	r2, [r7, #4]
 800bad6:	68d2      	ldr	r2, [r2, #12]
 800bad8:	f102 0132 	add.w	r1, r2, #50	; 0x32
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	6912      	ldr	r2, [r2, #16]
 800bae0:	fbb1 f2f2 	udiv	r2, r1, r2
 800bae4:	62da      	str	r2, [r3, #44]	; 0x2c
	slaveTimer->Instance->CCR2 = 1000;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800baf0:	639a      	str	r2, [r3, #56]	; 0x38

	// slaveTimer->Instance->ARR = ((period)/division);//+(period%division);
}
 800baf2:	bf00      	nop
 800baf4:	370c      	adds	r7, #12
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr

0800bafe <_ZN9SequencerC1EhhhhP19__SPI_HandleTypeDef>:
 *      Author: delta
 */
#include <vector>
#include "sequencer.hpp"

Sequencer::Sequencer(uint8_t menuRegisters, uint8_t menuOffset, uint8_t stepRegisters, uint8_t stepOffset, SPI_HandleTypeDef* spi)
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b086      	sub	sp, #24
 800bb02:	af02      	add	r7, sp, #8
 800bb04:	6078      	str	r0, [r7, #4]
 800bb06:	4608      	mov	r0, r1
 800bb08:	4611      	mov	r1, r2
 800bb0a:	461a      	mov	r2, r3
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	70fb      	strb	r3, [r7, #3]
 800bb10:	460b      	mov	r3, r1
 800bb12:	70bb      	strb	r3, [r7, #2]
 800bb14:	4613      	mov	r3, r2
 800bb16:	707b      	strb	r3, [r7, #1]
: stepSwitches(stepRegisters,4,stepOffset, spi), menuSwitches(menuRegisters,4,menuOffset, spi)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f503 4002 	add.w	r0, r3, #33280	; 0x8200
 800bb1e:	3058      	adds	r0, #88	; 0x58
 800bb20:	7e3a      	ldrb	r2, [r7, #24]
 800bb22:	7879      	ldrb	r1, [r7, #1]
 800bb24:	69fb      	ldr	r3, [r7, #28]
 800bb26:	9300      	str	r3, [sp, #0]
 800bb28:	4613      	mov	r3, r2
 800bb2a:	2204      	movs	r2, #4
 800bb2c:	f000 fd16 	bl	800c55c <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	f503 4002 	add.w	r0, r3, #33280	; 0x8200
 800bb36:	30c0      	adds	r0, #192	; 0xc0
 800bb38:	78ba      	ldrb	r2, [r7, #2]
 800bb3a:	78f9      	ldrb	r1, [r7, #3]
 800bb3c:	69fb      	ldr	r3, [r7, #28]
 800bb3e:	9300      	str	r3, [sp, #0]
 800bb40:	4613      	mov	r3, r2
 800bb42:	2204      	movs	r2, #4
 800bb44:	f000 fd0a 	bl	800c55c <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef>
{
	// DEFAULT: all lanes play;
	playingLanes = 0xFFFF;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bb4e:	80da      	strh	r2, [r3, #6]

	for(int i = 0; i < 16; i++){
 800bb50:	2300      	movs	r3, #0
 800bb52:	60fb      	str	r3, [r7, #12]
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2b0f      	cmp	r3, #15
 800bb58:	dc15      	bgt.n	800bb86 <_ZN9SequencerC1EhhhhP19__SPI_HandleTypeDef+0x88>
		for(int j = 0; j < 16; j++){
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	60bb      	str	r3, [r7, #8]
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	2b0f      	cmp	r3, #15
 800bb62:	dc0c      	bgt.n	800bb7e <_ZN9SequencerC1EhhhhP19__SPI_HandleTypeDef+0x80>
			song[0].lastStep[i][j] = 16;
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	011b      	lsls	r3, r3, #4
 800bb6a:	441a      	add	r2, r3
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	4413      	add	r3, r2
 800bb70:	3333      	adds	r3, #51	; 0x33
 800bb72:	2210      	movs	r2, #16
 800bb74:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < 16; j++){
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	60bb      	str	r3, [r7, #8]
 800bb7c:	e7ef      	b.n	800bb5e <_ZN9SequencerC1EhhhhP19__SPI_HandleTypeDef+0x60>
	for(int i = 0; i < 16; i++){
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	3301      	adds	r3, #1
 800bb82:	60fb      	str	r3, [r7, #12]
 800bb84:	e7e6      	b.n	800bb54 <_ZN9SequencerC1EhhhhP19__SPI_HandleTypeDef+0x56>

	}



}
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	e008      	b.n	800bb9c <_ZN9SequencerC1EhhhhP19__SPI_HandleTypeDef+0x9e>
: stepSwitches(stepRegisters,4,stepOffset, spi), menuSwitches(menuRegisters,4,menuOffset, spi)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800bb90:	3358      	adds	r3, #88	; 0x58
 800bb92:	4618      	mov	r0, r3
 800bb94:	f000 fdd2 	bl	800c73c <_ZN8SwitchesD1Ev>
 800bb98:	f003 fb42 	bl	800f220 <__cxa_end_cleanup>
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3710      	adds	r7, #16
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <_ZN9Sequencer9readWriteEv>:
void Sequencer::readWrite(void){
 800bba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bba6:	b089      	sub	sp, #36	; 0x24
 800bba8:	af02      	add	r7, sp, #8
 800bbaa:	6078      	str	r0, [r7, #4]
	// Check whether a function or step switch has been pressed

	uint16_t step = 0;
 800bbac:	2300      	movs	r3, #0
 800bbae:	81fb      	strh	r3, [r7, #14]
	if(menuSwitches.pressed()){
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800bbb6:	33c0      	adds	r3, #192	; 0xc0
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f001 f8ce 	bl	800cd5a <_ZN8Switches7pressedEv>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	f000 80f4 	beq.w	800bdae <_ZN9Sequencer9readWriteEv+0x20a>
			switch(menuSwitches.returnPressed(0)){
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800bbcc:	33c0      	adds	r3, #192	; 0xc0
 800bbce:	2100      	movs	r1, #0
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f001 f8a4 	bl	800cd1e <_ZN8Switches13returnPressedEh>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b08      	cmp	r3, #8
 800bbda:	f000 80e3 	beq.w	800bda4 <_ZN9Sequencer9readWriteEv+0x200>
 800bbde:	2b08      	cmp	r3, #8
 800bbe0:	dc08      	bgt.n	800bbf4 <_ZN9Sequencer9readWriteEv+0x50>
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	f000 80e0 	beq.w	800bda8 <_ZN9Sequencer9readWriteEv+0x204>
 800bbe8:	2b04      	cmp	r3, #4
 800bbea:	f000 80df 	beq.w	800bdac <_ZN9Sequencer9readWriteEv+0x208>
 800bbee:	2b01      	cmp	r3, #1
 800bbf0:	d00e      	beq.n	800bc10 <_ZN9Sequencer9readWriteEv+0x6c>
							stepSwitchMode = STEPSWITCH_SELECT_SONG;
							stepSwitches.setLedAll(OFF,PULSE_MODE_OFF);
							stepSwitches.setLed(selectedSong, HALF, PULSE_MODE_2ND);
							break;
						default:
							break;
 800bbf2:	e0dc      	b.n	800bdae <_ZN9Sequencer9readWriteEv+0x20a>
			switch(menuSwitches.returnPressed(0)){
 800bbf4:	2b20      	cmp	r3, #32
 800bbf6:	d061      	beq.n	800bcbc <_ZN9Sequencer9readWriteEv+0x118>
 800bbf8:	2b20      	cmp	r3, #32
 800bbfa:	dc02      	bgt.n	800bc02 <_ZN9Sequencer9readWriteEv+0x5e>
 800bbfc:	2b10      	cmp	r3, #16
 800bbfe:	d02f      	beq.n	800bc60 <_ZN9Sequencer9readWriteEv+0xbc>
							break;
 800bc00:	e0d5      	b.n	800bdae <_ZN9Sequencer9readWriteEv+0x20a>
			switch(menuSwitches.returnPressed(0)){
 800bc02:	2b40      	cmp	r3, #64	; 0x40
 800bc04:	f000 8088 	beq.w	800bd18 <_ZN9Sequencer9readWriteEv+0x174>
 800bc08:	2b80      	cmp	r3, #128	; 0x80
 800bc0a:	f000 80b3 	beq.w	800bd74 <_ZN9Sequencer9readWriteEv+0x1d0>
							break;
 800bc0e:	e0ce      	b.n	800bdae <_ZN9Sequencer9readWriteEv+0x20a>
							if(transportState == TRANSPORT_STATE_STOP){
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	7a9b      	ldrb	r3, [r3, #10]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d111      	bne.n	800bc3c <_ZN9Sequencer9readWriteEv+0x98>
								transportState = TRANSPORT_STATE_RESET;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2205      	movs	r2, #5
 800bc1c:	729a      	strb	r2, [r3, #10]
								menuSwitches.leds[0] |= PLAY;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f503 4303 	add.w	r3, r3, #33536	; 0x8300
 800bc24:	3304      	adds	r3, #4
 800bc26:	2100      	movs	r1, #0
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f000 fc5a 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	781a      	ldrb	r2, [r3, #0]
 800bc32:	f042 0201 	orr.w	r2, r2, #1
 800bc36:	b2d2      	uxtb	r2, r2
 800bc38:	701a      	strb	r2, [r3, #0]
							break;
 800bc3a:	e0b8      	b.n	800bdae <_ZN9Sequencer9readWriteEv+0x20a>
								transportState = TRANSPORT_STATE_STOP;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	729a      	strb	r2, [r3, #10]
								menuSwitches.leds[0] &= ~PLAY;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f503 4303 	add.w	r3, r3, #33536	; 0x8300
 800bc48:	3304      	adds	r3, #4
 800bc4a:	2100      	movs	r1, #0
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f000 fc48 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800bc52:	4603      	mov	r3, r0
 800bc54:	781a      	ldrb	r2, [r3, #0]
 800bc56:	f022 0201 	bic.w	r2, r2, #1
 800bc5a:	b2d2      	uxtb	r2, r2
 800bc5c:	701a      	strb	r2, [r3, #0]
							break;
 800bc5e:	e0a6      	b.n	800bdae <_ZN9Sequencer9readWriteEv+0x20a>
							menuSwitches.setLedByte(0,SELECT_BLOCK|SELECT_LANE|SELECT_NOTE|SELECT_SONG,OFF, PULSE_MODE_OFF);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f503 4002 	add.w	r0, r3, #33280	; 0x8200
 800bc66:	30c0      	adds	r0, #192	; 0xc0
 800bc68:	2300      	movs	r3, #0
 800bc6a:	9300      	str	r3, [sp, #0]
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	22f0      	movs	r2, #240	; 0xf0
 800bc70:	2100      	movs	r1, #0
 800bc72:	f001 f915 	bl	800cea0 <_ZN8Switches10setLedByteEih8PWM_MODE10PULSE_MODE>
							menuSwitches.setLedByte(0,SELECT_BLOCK,HALF,PULSE_MODE_4TH);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f503 4002 	add.w	r0, r3, #33280	; 0x8200
 800bc7c:	30c0      	adds	r0, #192	; 0xc0
 800bc7e:	2308      	movs	r3, #8
 800bc80:	9300      	str	r3, [sp, #0]
 800bc82:	2320      	movs	r3, #32
 800bc84:	2210      	movs	r2, #16
 800bc86:	2100      	movs	r1, #0
 800bc88:	f001 f90a 	bl	800cea0 <_ZN8Switches10setLedByteEih8PWM_MODE10PULSE_MODE>
							stepSwitches.setLedAll(OFF,PULSE_MODE_OFF);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800bc92:	3358      	adds	r3, #88	; 0x58
 800bc94:	2200      	movs	r2, #0
 800bc96:	2100      	movs	r1, #0
 800bc98:	4618      	mov	r0, r3
 800bc9a:	f001 f93b 	bl	800cf14 <_ZN8Switches9setLedAllE8PWM_MODE10PULSE_MODE>
							stepSwitches.setLed(playingBlock, HALF, PULSE_MODE_4TH);
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	f503 4002 	add.w	r0, r3, #33280	; 0x8200
 800bca4:	3058      	adds	r0, #88	; 0x58
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	795b      	ldrb	r3, [r3, #5]
 800bcaa:	4619      	mov	r1, r3
 800bcac:	2308      	movs	r3, #8
 800bcae:	2220      	movs	r2, #32
 800bcb0:	f001 f8d3 	bl	800ce5a <_ZN8Switches6setLedEi8PWM_MODE10PULSE_MODE>
							stepSwitchMode = STEPSWITCH_SELECT_BLOCK;
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2202      	movs	r2, #2
 800bcb8:	731a      	strb	r2, [r3, #12]
							break;
 800bcba:	e078      	b.n	800bdae <_ZN9Sequencer9readWriteEv+0x20a>
							menuSwitches.setLedByte(0,SELECT_BLOCK|SELECT_LANE|SELECT_NOTE|SELECT_SONG,OFF,PULSE_MODE_OFF);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f503 4002 	add.w	r0, r3, #33280	; 0x8200
 800bcc2:	30c0      	adds	r0, #192	; 0xc0
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	9300      	str	r3, [sp, #0]
 800bcc8:	2300      	movs	r3, #0
 800bcca:	22f0      	movs	r2, #240	; 0xf0
 800bccc:	2100      	movs	r1, #0
 800bcce:	f001 f8e7 	bl	800cea0 <_ZN8Switches10setLedByteEih8PWM_MODE10PULSE_MODE>
							menuSwitches.setLedByte(0,SELECT_LANE,HALF,PULSE_MODE_8TH);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f503 4002 	add.w	r0, r3, #33280	; 0x8200
 800bcd8:	30c0      	adds	r0, #192	; 0xc0
 800bcda:	2304      	movs	r3, #4
 800bcdc:	9300      	str	r3, [sp, #0]
 800bcde:	2320      	movs	r3, #32
 800bce0:	2220      	movs	r2, #32
 800bce2:	2100      	movs	r1, #0
 800bce4:	f001 f8dc 	bl	800cea0 <_ZN8Switches10setLedByteEih8PWM_MODE10PULSE_MODE>
							stepSwitchMode = STEPSWITCH_SELECT_LANE;
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	731a      	strb	r2, [r3, #12]
							stepSwitches.setLedAll(OFF,PULSE_MODE_OFF);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800bcf4:	3358      	adds	r3, #88	; 0x58
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	2100      	movs	r1, #0
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f001 f90a 	bl	800cf14 <_ZN8Switches9setLedAllE8PWM_MODE10PULSE_MODE>
							stepSwitches.setLed(selectedLane, HALF, PULSE_MODE_8TH);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	f503 4002 	add.w	r0, r3, #33280	; 0x8200
 800bd06:	3058      	adds	r0, #88	; 0x58
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	785b      	ldrb	r3, [r3, #1]
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	2304      	movs	r3, #4
 800bd10:	2220      	movs	r2, #32
 800bd12:	f001 f8a2 	bl	800ce5a <_ZN8Switches6setLedEi8PWM_MODE10PULSE_MODE>
							break;
 800bd16:	e04a      	b.n	800bdae <_ZN9Sequencer9readWriteEv+0x20a>
							menuSwitches.setLedByte(0,SELECT_BLOCK|SELECT_LANE|SELECT_NOTE|SELECT_SONG,OFF,PULSE_MODE_OFF);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f503 4002 	add.w	r0, r3, #33280	; 0x8200
 800bd1e:	30c0      	adds	r0, #192	; 0xc0
 800bd20:	2300      	movs	r3, #0
 800bd22:	9300      	str	r3, [sp, #0]
 800bd24:	2300      	movs	r3, #0
 800bd26:	22f0      	movs	r2, #240	; 0xf0
 800bd28:	2100      	movs	r1, #0
 800bd2a:	f001 f8b9 	bl	800cea0 <_ZN8Switches10setLedByteEih8PWM_MODE10PULSE_MODE>
							menuSwitches.setLedByte(0,SELECT_NOTE,HALF,PULSE_MODE_16TH);
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f503 4002 	add.w	r0, r3, #33280	; 0x8200
 800bd34:	30c0      	adds	r0, #192	; 0xc0
 800bd36:	2302      	movs	r3, #2
 800bd38:	9300      	str	r3, [sp, #0]
 800bd3a:	2320      	movs	r3, #32
 800bd3c:	2240      	movs	r2, #64	; 0x40
 800bd3e:	2100      	movs	r1, #0
 800bd40:	f001 f8ae 	bl	800cea0 <_ZN8Switches10setLedByteEih8PWM_MODE10PULSE_MODE>
							stepSwitchMode = STEPSWITCH_SELECT_NOTE;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2200      	movs	r2, #0
 800bd48:	731a      	strb	r2, [r3, #12]
							stepSwitches.setLedAll(OFF,PULSE_MODE_OFF);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800bd50:	3358      	adds	r3, #88	; 0x58
 800bd52:	2200      	movs	r2, #0
 800bd54:	2100      	movs	r1, #0
 800bd56:	4618      	mov	r0, r3
 800bd58:	f001 f8dc 	bl	800cf14 <_ZN8Switches9setLedAllE8PWM_MODE10PULSE_MODE>
							stepSwitches.setLed(selectedStep, HALF, PULSE_MODE_16TH);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	f503 4002 	add.w	r0, r3, #33280	; 0x8200
 800bd62:	3058      	adds	r0, #88	; 0x58
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	78db      	ldrb	r3, [r3, #3]
 800bd68:	4619      	mov	r1, r3
 800bd6a:	2302      	movs	r3, #2
 800bd6c:	2220      	movs	r2, #32
 800bd6e:	f001 f874 	bl	800ce5a <_ZN8Switches6setLedEi8PWM_MODE10PULSE_MODE>
							break;
 800bd72:	e01c      	b.n	800bdae <_ZN9Sequencer9readWriteEv+0x20a>
							stepSwitchMode = STEPSWITCH_SELECT_SONG;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2203      	movs	r2, #3
 800bd78:	731a      	strb	r2, [r3, #12]
							stepSwitches.setLedAll(OFF,PULSE_MODE_OFF);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800bd80:	3358      	adds	r3, #88	; 0x58
 800bd82:	2200      	movs	r2, #0
 800bd84:	2100      	movs	r1, #0
 800bd86:	4618      	mov	r0, r3
 800bd88:	f001 f8c4 	bl	800cf14 <_ZN8Switches9setLedAllE8PWM_MODE10PULSE_MODE>
							stepSwitches.setLed(selectedSong, HALF, PULSE_MODE_2ND);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f503 4002 	add.w	r0, r3, #33280	; 0x8200
 800bd92:	3058      	adds	r0, #88	; 0x58
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	4619      	mov	r1, r3
 800bd9a:	2310      	movs	r3, #16
 800bd9c:	2220      	movs	r2, #32
 800bd9e:	f001 f85c 	bl	800ce5a <_ZN8Switches6setLedEi8PWM_MODE10PULSE_MODE>
							break;
 800bda2:	e004      	b.n	800bdae <_ZN9Sequencer9readWriteEv+0x20a>
							break;
 800bda4:	bf00      	nop
 800bda6:	e002      	b.n	800bdae <_ZN9Sequencer9readWriteEv+0x20a>
							break;
 800bda8:	bf00      	nop
 800bdaa:	e000      	b.n	800bdae <_ZN9Sequencer9readWriteEv+0x20a>
							break;
 800bdac:	bf00      	nop
			}
	}
	switch (stepSwitchMode){
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	7b1b      	ldrb	r3, [r3, #12]
 800bdb2:	2b04      	cmp	r3, #4
 800bdb4:	f200 81a5 	bhi.w	800c102 <_ZN9Sequencer9readWriteEv+0x55e>
 800bdb8:	a201      	add	r2, pc, #4	; (adr r2, 800bdc0 <_ZN9Sequencer9readWriteEv+0x21c>)
 800bdba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdbe:	bf00      	nop
 800bdc0:	0800be61 	.word	0x0800be61
 800bdc4:	0800be1b 	.word	0x0800be1b
 800bdc8:	0800bdd5 	.word	0x0800bdd5
 800bdcc:	0800becf 	.word	0x0800becf
 800bdd0:	0800bef9 	.word	0x0800bef9
	case STEPSWITCH_SELECT_BLOCK:
		// stepSwitches.setLedAll(OFF);
		// stepSwitches.setLed(selectedBlock, FULL, PULSE_MODE_4TH);
		if(stepSwitches.pressed()){
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800bdda:	3358      	adds	r3, #88	; 0x58
 800bddc:	4618      	mov	r0, r3
 800bdde:	f000 ffbc 	bl	800cd5a <_ZN8Switches7pressedEv>
 800bde2:	4603      	mov	r3, r0
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f000 818e 	beq.w	800c106 <_ZN9Sequencer9readWriteEv+0x562>
			selectedBlock = stepSwitches.firstChanged();
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800bdf0:	3358      	adds	r3, #88	; 0x58
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	f000 ff58 	bl	800cca8 <_ZN8Switches12firstChangedEv>
 800bdf8:	4603      	mov	r3, r0
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	709a      	strb	r2, [r3, #2]
			stepSwitches.setLedAll(OFF,PULSE_MODE_OFF);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800be06:	3358      	adds	r3, #88	; 0x58
 800be08:	2200      	movs	r2, #0
 800be0a:	2100      	movs	r1, #0
 800be0c:	4618      	mov	r0, r3
 800be0e:	f001 f881 	bl	800cf14 <_ZN8Switches9setLedAllE8PWM_MODE10PULSE_MODE>
			stepSwitchMode = STEPSWITCH_EDIT_BLOCK;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2204      	movs	r2, #4
 800be16:	731a      	strb	r2, [r3, #12]
		}
		break;
 800be18:	e175      	b.n	800c106 <_ZN9Sequencer9readWriteEv+0x562>
	case STEPSWITCH_SELECT_LANE:
		// stepSwitches.setLedAll(OFF);
		// stepSwitches.setLed(selectedBlock, FULL, PULSE_MODE_8TH);
		if(stepSwitches.pressed()){
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800be20:	3358      	adds	r3, #88	; 0x58
 800be22:	4618      	mov	r0, r3
 800be24:	f000 ff99 	bl	800cd5a <_ZN8Switches7pressedEv>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	f000 816d 	beq.w	800c10a <_ZN9Sequencer9readWriteEv+0x566>
			selectedLane = stepSwitches.firstChanged();
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800be36:	3358      	adds	r3, #88	; 0x58
 800be38:	4618      	mov	r0, r3
 800be3a:	f000 ff35 	bl	800cca8 <_ZN8Switches12firstChangedEv>
 800be3e:	4603      	mov	r3, r0
 800be40:	461a      	mov	r2, r3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	705a      	strb	r2, [r3, #1]
			stepSwitches.setLedAll(OFF,PULSE_MODE_OFF);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800be4c:	3358      	adds	r3, #88	; 0x58
 800be4e:	2200      	movs	r2, #0
 800be50:	2100      	movs	r1, #0
 800be52:	4618      	mov	r0, r3
 800be54:	f001 f85e 	bl	800cf14 <_ZN8Switches9setLedAllE8PWM_MODE10PULSE_MODE>
			stepSwitchMode = STEPSWITCH_EDIT_BLOCK;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2204      	movs	r2, #4
 800be5c:	731a      	strb	r2, [r3, #12]
		}

		break;
 800be5e:	e154      	b.n	800c10a <_ZN9Sequencer9readWriteEv+0x566>
	case STEPSWITCH_SELECT_NOTE:
		stepSwitches.setLedAll(OFF,PULSE_MODE_OFF);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800be66:	3358      	adds	r3, #88	; 0x58
 800be68:	2200      	movs	r2, #0
 800be6a:	2100      	movs	r1, #0
 800be6c:	4618      	mov	r0, r3
 800be6e:	f001 f851 	bl	800cf14 <_ZN8Switches9setLedAllE8PWM_MODE10PULSE_MODE>
		stepSwitches.setLed(selectedStep, FULL, PULSE_MODE_16TH);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	f503 4002 	add.w	r0, r3, #33280	; 0x8200
 800be78:	3058      	adds	r0, #88	; 0x58
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	78db      	ldrb	r3, [r3, #3]
 800be7e:	4619      	mov	r1, r3
 800be80:	2302      	movs	r3, #2
 800be82:	2240      	movs	r2, #64	; 0x40
 800be84:	f000 ffe9 	bl	800ce5a <_ZN8Switches6setLedEi8PWM_MODE10PULSE_MODE>
		if(stepSwitches.released()){
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800be8e:	3358      	adds	r3, #88	; 0x58
 800be90:	4618      	mov	r0, r3
 800be92:	f000 ff97 	bl	800cdc4 <_ZN8Switches8releasedEv>
 800be96:	4603      	mov	r3, r0
 800be98:	2b00      	cmp	r3, #0
 800be9a:	f000 8138 	beq.w	800c10e <_ZN9Sequencer9readWriteEv+0x56a>
					selectedStep = stepSwitches.firstChanged();
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800bea4:	3358      	adds	r3, #88	; 0x58
 800bea6:	4618      	mov	r0, r3
 800bea8:	f000 fefe 	bl	800cca8 <_ZN8Switches12firstChangedEv>
 800beac:	4603      	mov	r3, r0
 800beae:	461a      	mov	r2, r3
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	70da      	strb	r2, [r3, #3]
					stepSwitches.setLedAll(OFF,PULSE_MODE_OFF);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800beba:	3358      	adds	r3, #88	; 0x58
 800bebc:	2200      	movs	r2, #0
 800bebe:	2100      	movs	r1, #0
 800bec0:	4618      	mov	r0, r3
 800bec2:	f001 f827 	bl	800cf14 <_ZN8Switches9setLedAllE8PWM_MODE10PULSE_MODE>
					stepSwitchMode = STEPSWITCH_EDIT_BLOCK;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2204      	movs	r2, #4
 800beca:	731a      	strb	r2, [r3, #12]
					break;
 800becc:	e122      	b.n	800c114 <_ZN9Sequencer9readWriteEv+0x570>
		}
		break;

	case STEPSWITCH_SELECT_SONG:
		stepSwitches.setLedAll(OFF,PULSE_MODE_OFF);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800bed4:	3358      	adds	r3, #88	; 0x58
 800bed6:	2200      	movs	r2, #0
 800bed8:	2100      	movs	r1, #0
 800beda:	4618      	mov	r0, r3
 800bedc:	f001 f81a 	bl	800cf14 <_ZN8Switches9setLedAllE8PWM_MODE10PULSE_MODE>
		stepSwitches.setLed(selectedSong, FULL);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800bee6:	3358      	adds	r3, #88	; 0x58
 800bee8:	687a      	ldr	r2, [r7, #4]
 800beea:	7812      	ldrb	r2, [r2, #0]
 800beec:	4611      	mov	r1, r2
 800beee:	2240      	movs	r2, #64	; 0x40
 800bef0:	4618      	mov	r0, r3
 800bef2:	f000 ff9d 	bl	800ce30 <_ZN8Switches6setLedEi8PWM_MODE>
		break;
 800bef6:	e10d      	b.n	800c114 <_ZN9Sequencer9readWriteEv+0x570>
	case STEPSWITCH_EDIT_BLOCK:
		for(int i=0;i < stepSwitches.numOfRegisters;i++){
 800bef8:	2300      	movs	r3, #0
 800befa:	617b      	str	r3, [r7, #20]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800bf02:	3359      	adds	r3, #89	; 0x59
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	461a      	mov	r2, r3
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	f340 8101 	ble.w	800c112 <_ZN9Sequencer9readWriteEv+0x56e>
			for(int j=0;j<8;j++){
 800bf10:	2300      	movs	r3, #0
 800bf12:	613b      	str	r3, [r7, #16]
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	2b07      	cmp	r3, #7
 800bf18:	f300 80ef 	bgt.w	800c0fa <_ZN9Sequencer9readWriteEv+0x556>
				step = (i*8)+j;
 800bf1c:	697b      	ldr	r3, [r7, #20]
 800bf1e:	b29b      	uxth	r3, r3
 800bf20:	00db      	lsls	r3, r3, #3
 800bf22:	b29a      	uxth	r2, r3
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	4413      	add	r3, r2
 800bf2a:	81fb      	strh	r3, [r7, #14]
				// Set note
				if(stepSwitches.returnPressed(i) & (1 << j)){
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800bf32:	3358      	adds	r3, #88	; 0x58
 800bf34:	697a      	ldr	r2, [r7, #20]
 800bf36:	b2d2      	uxtb	r2, r2
 800bf38:	4611      	mov	r1, r2
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f000 feef 	bl	800cd1e <_ZN8Switches13returnPressedEh>
 800bf40:	4603      	mov	r3, r0
 800bf42:	461a      	mov	r2, r3
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	fa42 f303 	asr.w	r3, r2, r3
 800bf4a:	f003 0301 	and.w	r3, r3, #1
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	bf14      	ite	ne
 800bf52:	2301      	movne	r3, #1
 800bf54:	2300      	moveq	r3, #0
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d032      	beq.n	800bfc2 <_ZN9Sequencer9readWriteEv+0x41e>
						song[selectedSong].subSteps[selectedLane][selectedBlock][step] ^= (1 << 0);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	781b      	ldrb	r3, [r3, #0]
 800bf60:	461d      	mov	r5, r3
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	785b      	ldrb	r3, [r3, #1]
 800bf66:	469e      	mov	lr, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	789b      	ldrb	r3, [r3, #2]
 800bf6c:	461e      	mov	r6, r3
 800bf6e:	89f8      	ldrh	r0, [r7, #14]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	781b      	ldrb	r3, [r3, #0]
 800bf74:	469c      	mov	ip, r3
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	785b      	ldrb	r3, [r3, #1]
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	789b      	ldrb	r3, [r3, #2]
 800bf80:	461c      	mov	r4, r3
 800bf82:	89fb      	ldrh	r3, [r7, #14]
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	0109      	lsls	r1, r1, #4
 800bf88:	4421      	add	r1, r4
 800bf8a:	010c      	lsls	r4, r1, #4
 800bf8c:	f241 0149 	movw	r1, #4169	; 0x1049
 800bf90:	fb01 f10c 	mul.w	r1, r1, ip
 800bf94:	4421      	add	r1, r4
 800bf96:	440b      	add	r3, r1
 800bf98:	334c      	adds	r3, #76	; 0x4c
 800bf9a:	009b      	lsls	r3, r3, #2
 800bf9c:	4413      	add	r3, r2
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	f083 0201 	eor.w	r2, r3, #1
 800bfa4:	6879      	ldr	r1, [r7, #4]
 800bfa6:	ea4f 130e 	mov.w	r3, lr, lsl #4
 800bfaa:	4433      	add	r3, r6
 800bfac:	011c      	lsls	r4, r3, #4
 800bfae:	f241 0349 	movw	r3, #4169	; 0x1049
 800bfb2:	fb03 f305 	mul.w	r3, r3, r5
 800bfb6:	4423      	add	r3, r4
 800bfb8:	4403      	add	r3, r0
 800bfba:	334c      	adds	r3, #76	; 0x4c
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	440b      	add	r3, r1
 800bfc0:	605a      	str	r2, [r3, #4]
				}
				// Set leds
				if(step == song[selectedSong].activeStep[selectedLane]){
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	785b      	ldrb	r3, [r3, #1]
 800bfcc:	4619      	mov	r1, r3
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	f244 1324 	movw	r3, #16676	; 0x4124
 800bfd4:	fb03 f300 	mul.w	r3, r3, r0
 800bfd8:	4413      	add	r3, r2
 800bfda:	440b      	add	r3, r1
 800bfdc:	3322      	adds	r3, #34	; 0x22
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	b29b      	uxth	r3, r3
 800bfe2:	89fa      	ldrh	r2, [r7, #14]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d133      	bne.n	800c050 <_ZN9Sequencer9readWriteEv+0x4ac>
					if(song[selectedSong].subSteps[selectedLane][selectedBlock][step]){
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	461c      	mov	r4, r3
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	785b      	ldrb	r3, [r3, #1]
 800bff2:	4619      	mov	r1, r3
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	789b      	ldrb	r3, [r3, #2]
 800bff8:	4618      	mov	r0, r3
 800bffa:	89fb      	ldrh	r3, [r7, #14]
 800bffc:	687a      	ldr	r2, [r7, #4]
 800bffe:	0109      	lsls	r1, r1, #4
 800c000:	4401      	add	r1, r0
 800c002:	0108      	lsls	r0, r1, #4
 800c004:	f241 0149 	movw	r1, #4169	; 0x1049
 800c008:	fb01 f104 	mul.w	r1, r1, r4
 800c00c:	4401      	add	r1, r0
 800c00e:	440b      	add	r3, r1
 800c010:	334c      	adds	r3, #76	; 0x4c
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	4413      	add	r3, r2
 800c016:	685b      	ldr	r3, [r3, #4]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d00c      	beq.n	800c036 <_ZN9Sequencer9readWriteEv+0x492>
							stepSwitches.ledPWM[step] = DIM;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800c022:	33a8      	adds	r3, #168	; 0xa8
 800c024:	89fa      	ldrh	r2, [r7, #14]
 800c026:	4611      	mov	r1, r2
 800c028:	4618      	mov	r0, r3
 800c02a:	f000 fa5a 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800c02e:	4603      	mov	r3, r0
 800c030:	2205      	movs	r2, #5
 800c032:	701a      	strb	r2, [r3, #0]
 800c034:	e05d      	b.n	800c0f2 <_ZN9Sequencer9readWriteEv+0x54e>
					}
					else{
							stepSwitches.ledPWM[step] = HALF;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800c03c:	33a8      	adds	r3, #168	; 0xa8
 800c03e:	89fa      	ldrh	r2, [r7, #14]
 800c040:	4611      	mov	r1, r2
 800c042:	4618      	mov	r0, r3
 800c044:	f000 fa4d 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800c048:	4603      	mov	r3, r0
 800c04a:	2220      	movs	r2, #32
 800c04c:	701a      	strb	r2, [r3, #0]
 800c04e:	e050      	b.n	800c0f2 <_ZN9Sequencer9readWriteEv+0x54e>
					}
				}
				else if(song[selectedSong].subSteps[selectedLane][selectedBlock][step]){
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	461c      	mov	r4, r3
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	785b      	ldrb	r3, [r3, #1]
 800c05a:	4619      	mov	r1, r3
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	789b      	ldrb	r3, [r3, #2]
 800c060:	4618      	mov	r0, r3
 800c062:	89fb      	ldrh	r3, [r7, #14]
 800c064:	687a      	ldr	r2, [r7, #4]
 800c066:	0109      	lsls	r1, r1, #4
 800c068:	4401      	add	r1, r0
 800c06a:	0108      	lsls	r0, r1, #4
 800c06c:	f241 0149 	movw	r1, #4169	; 0x1049
 800c070:	fb01 f104 	mul.w	r1, r1, r4
 800c074:	4401      	add	r1, r0
 800c076:	440b      	add	r3, r1
 800c078:	334c      	adds	r3, #76	; 0x4c
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	4413      	add	r3, r2
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d01b      	beq.n	800c0bc <_ZN9Sequencer9readWriteEv+0x518>
					if(step == selectedStep){
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	78db      	ldrb	r3, [r3, #3]
 800c088:	b29b      	uxth	r3, r3
 800c08a:	89fa      	ldrh	r2, [r7, #14]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d10b      	bne.n	800c0a8 <_ZN9Sequencer9readWriteEv+0x504>
						stepSwitches.setLed(selectedStep,HALF,PULSE_MODE_8TH);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f503 4002 	add.w	r0, r3, #33280	; 0x8200
 800c096:	3058      	adds	r0, #88	; 0x58
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	78db      	ldrb	r3, [r3, #3]
 800c09c:	4619      	mov	r1, r3
 800c09e:	2304      	movs	r3, #4
 800c0a0:	2220      	movs	r2, #32
 800c0a2:	f000 feda 	bl	800ce5a <_ZN8Switches6setLedEi8PWM_MODE10PULSE_MODE>
 800c0a6:	e024      	b.n	800c0f2 <_ZN9Sequencer9readWriteEv+0x54e>
					}
					else{
						stepSwitches.setLed(step,HALF);
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800c0ae:	3358      	adds	r3, #88	; 0x58
 800c0b0:	89f9      	ldrh	r1, [r7, #14]
 800c0b2:	2220      	movs	r2, #32
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f000 febb 	bl	800ce30 <_ZN8Switches6setLedEi8PWM_MODE>
 800c0ba:	e01a      	b.n	800c0f2 <_ZN9Sequencer9readWriteEv+0x54e>
					}
				}
				else{
					if(step == selectedStep){
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	78db      	ldrb	r3, [r3, #3]
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	89fa      	ldrh	r2, [r7, #14]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d10b      	bne.n	800c0e0 <_ZN9Sequencer9readWriteEv+0x53c>
						stepSwitches.setLed(selectedStep,DIM,PULSE_MODE_OFF);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	f503 4002 	add.w	r0, r3, #33280	; 0x8200
 800c0ce:	3058      	adds	r0, #88	; 0x58
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	78db      	ldrb	r3, [r3, #3]
 800c0d4:	4619      	mov	r1, r3
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	2205      	movs	r2, #5
 800c0da:	f000 febe 	bl	800ce5a <_ZN8Switches6setLedEi8PWM_MODE10PULSE_MODE>
 800c0de:	e008      	b.n	800c0f2 <_ZN9Sequencer9readWriteEv+0x54e>
					}
					else{
						stepSwitches.setLed(step,OFF);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800c0e6:	3358      	adds	r3, #88	; 0x58
 800c0e8:	89f9      	ldrh	r1, [r7, #14]
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f000 fe9f 	bl	800ce30 <_ZN8Switches6setLedEi8PWM_MODE>
			for(int j=0;j<8;j++){
 800c0f2:	693b      	ldr	r3, [r7, #16]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	613b      	str	r3, [r7, #16]
 800c0f8:	e70c      	b.n	800bf14 <_ZN9Sequencer9readWriteEv+0x370>
		for(int i=0;i < stepSwitches.numOfRegisters;i++){
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	617b      	str	r3, [r7, #20]
 800c100:	e6fc      	b.n	800befc <_ZN9Sequencer9readWriteEv+0x358>
				}
			}
		}
		break;
	default:
		break;
 800c102:	bf00      	nop
 800c104:	e006      	b.n	800c114 <_ZN9Sequencer9readWriteEv+0x570>
		break;
 800c106:	bf00      	nop
 800c108:	e004      	b.n	800c114 <_ZN9Sequencer9readWriteEv+0x570>
		break;
 800c10a:	bf00      	nop
 800c10c:	e002      	b.n	800c114 <_ZN9Sequencer9readWriteEv+0x570>
		break;
 800c10e:	bf00      	nop
 800c110:	e000      	b.n	800c114 <_ZN9Sequencer9readWriteEv+0x570>
		break;
 800c112:	bf00      	nop
	}
}
 800c114:	bf00      	nop
 800c116:	371c      	adds	r7, #28
 800c118:	46bd      	mov	sp, r7
 800c11a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c11c <_ZN9Sequencer14subStepAdvanceEP5Clock>:
// Advance to next step depending on playState
void Sequencer::subStepAdvance(Clock* clock){
 800c11c:	b5b0      	push	{r4, r5, r7, lr}
 800c11e:	b088      	sub	sp, #32
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
 800c124:	6039      	str	r1, [r7, #0]
	char uartBuffer[16];
	switch(transportState){
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	7a9b      	ldrb	r3, [r3, #10]
 800c12a:	2b05      	cmp	r3, #5
 800c12c:	f200 80d4 	bhi.w	800c2d8 <_ZN9Sequencer14subStepAdvanceEP5Clock+0x1bc>
 800c130:	a201      	add	r2, pc, #4	; (adr r2, 800c138 <_ZN9Sequencer14subStepAdvanceEP5Clock+0x1c>)
 800c132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c136:	bf00      	nop
 800c138:	0800c2d1 	.word	0x0800c2d1
 800c13c:	0800c2d9 	.word	0x0800c2d9
 800c140:	0800c151 	.word	0x0800c151
 800c144:	0800c2d9 	.word	0x0800c2d9
 800c148:	0800c2d9 	.word	0x0800c2d9
 800c14c:	0800c25f 	.word	0x0800c25f
	case TRANSPORT_STATE_PLAY:
		song[playingSong].activeSubStep=clock->sub%12;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	791b      	ldrb	r3, [r3, #4]
 800c154:	4618      	mov	r0, r3
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	6999      	ldr	r1, [r3, #24]
 800c15a:	4b64      	ldr	r3, [pc, #400]	; (800c2ec <_ZN9Sequencer14subStepAdvanceEP5Clock+0x1d0>)
 800c15c:	fba3 2301 	umull	r2, r3, r3, r1
 800c160:	08da      	lsrs	r2, r3, #3
 800c162:	4613      	mov	r3, r2
 800c164:	005b      	lsls	r3, r3, #1
 800c166:	4413      	add	r3, r2
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	1aca      	subs	r2, r1, r3
 800c16c:	b2d1      	uxtb	r1, r2
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	f244 1324 	movw	r3, #16676	; 0x4124
 800c174:	fb03 f300 	mul.w	r3, r3, r0
 800c178:	4413      	add	r3, r2
 800c17a:	3332      	adds	r3, #50	; 0x32
 800c17c:	460a      	mov	r2, r1
 800c17e:	701a      	strb	r2, [r3, #0]
		if(clock->sub == 0){
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	699b      	ldr	r3, [r3, #24]
 800c184:	2b00      	cmp	r3, #0
 800c186:	bf0c      	ite	eq
 800c188:	2301      	moveq	r3, #1
 800c18a:	2300      	movne	r3, #0
 800c18c:	b2db      	uxtb	r3, r3
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d003      	beq.n	800c19a <_ZN9Sequencer14subStepAdvanceEP5Clock+0x7e>
			playingBlock = selectedBlock;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	789a      	ldrb	r2, [r3, #2]
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	715a      	strb	r2, [r3, #5]
		}

		if(song[playingSong].activeSubStep == 0){
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	791b      	ldrb	r3, [r3, #4]
 800c19e:	4619      	mov	r1, r3
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	f244 1324 	movw	r3, #16676	; 0x4124
 800c1a6:	fb03 f301 	mul.w	r3, r3, r1
 800c1aa:	4413      	add	r3, r2
 800c1ac:	3332      	adds	r3, #50	; 0x32
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	f040 8093 	bne.w	800c2dc <_ZN9Sequencer14subStepAdvanceEP5Clock+0x1c0>
			for(int i = 0; i < 16; i++){
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	61fb      	str	r3, [r7, #28]
 800c1ba:	69fb      	ldr	r3, [r7, #28]
 800c1bc:	2b0f      	cmp	r3, #15
 800c1be:	f300 808d 	bgt.w	800c2dc <_ZN9Sequencer14subStepAdvanceEP5Clock+0x1c0>
				if (++song[playingSong].activeStep[i] == song[playingSong].lastStep[i][playingBlock]){
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	791b      	ldrb	r3, [r3, #4]
 800c1c6:	6879      	ldr	r1, [r7, #4]
 800c1c8:	f244 1224 	movw	r2, #16676	; 0x4124
 800c1cc:	fb02 f203 	mul.w	r2, r2, r3
 800c1d0:	4411      	add	r1, r2
 800c1d2:	69fa      	ldr	r2, [r7, #28]
 800c1d4:	440a      	add	r2, r1
 800c1d6:	3222      	adds	r2, #34	; 0x22
 800c1d8:	7812      	ldrb	r2, [r2, #0]
 800c1da:	3201      	adds	r2, #1
 800c1dc:	b2d0      	uxtb	r0, r2
 800c1de:	6879      	ldr	r1, [r7, #4]
 800c1e0:	f244 1224 	movw	r2, #16676	; 0x4124
 800c1e4:	fb02 f203 	mul.w	r2, r2, r3
 800c1e8:	4411      	add	r1, r2
 800c1ea:	69fa      	ldr	r2, [r7, #28]
 800c1ec:	440a      	add	r2, r1
 800c1ee:	3222      	adds	r2, #34	; 0x22
 800c1f0:	4601      	mov	r1, r0
 800c1f2:	7011      	strb	r1, [r2, #0]
 800c1f4:	687a      	ldr	r2, [r7, #4]
 800c1f6:	f244 1124 	movw	r1, #16676	; 0x4124
 800c1fa:	fb01 f303 	mul.w	r3, r1, r3
 800c1fe:	441a      	add	r2, r3
 800c200:	69fb      	ldr	r3, [r7, #28]
 800c202:	4413      	add	r3, r2
 800c204:	3322      	adds	r3, #34	; 0x22
 800c206:	781a      	ldrb	r2, [r3, #0]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	791b      	ldrb	r3, [r3, #4]
 800c20c:	461d      	mov	r5, r3
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	795b      	ldrb	r3, [r3, #5]
 800c212:	461c      	mov	r4, r3
 800c214:	6879      	ldr	r1, [r7, #4]
 800c216:	69fb      	ldr	r3, [r7, #28]
 800c218:	0118      	lsls	r0, r3, #4
 800c21a:	f244 1324 	movw	r3, #16676	; 0x4124
 800c21e:	fb03 f305 	mul.w	r3, r3, r5
 800c222:	4403      	add	r3, r0
 800c224:	440b      	add	r3, r1
 800c226:	4423      	add	r3, r4
 800c228:	3333      	adds	r3, #51	; 0x33
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	429a      	cmp	r2, r3
 800c22e:	bf0c      	ite	eq
 800c230:	2301      	moveq	r3, #1
 800c232:	2300      	movne	r3, #0
 800c234:	b2db      	uxtb	r3, r3
 800c236:	2b00      	cmp	r3, #0
 800c238:	d00d      	beq.n	800c256 <_ZN9Sequencer14subStepAdvanceEP5Clock+0x13a>
					song[playingSong].activeStep[i] = 0;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	791b      	ldrb	r3, [r3, #4]
 800c23e:	4619      	mov	r1, r3
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	f244 1324 	movw	r3, #16676	; 0x4124
 800c246:	fb03 f301 	mul.w	r3, r3, r1
 800c24a:	441a      	add	r2, r3
 800c24c:	69fb      	ldr	r3, [r7, #28]
 800c24e:	4413      	add	r3, r2
 800c250:	3322      	adds	r3, #34	; 0x22
 800c252:	2200      	movs	r2, #0
 800c254:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 16; i++){
 800c256:	69fb      	ldr	r3, [r7, #28]
 800c258:	3301      	adds	r3, #1
 800c25a:	61fb      	str	r3, [r7, #28]
 800c25c:	e7ad      	b.n	800c1ba <_ZN9Sequencer14subStepAdvanceEP5Clock+0x9e>
		sprintf(uartBuffer,"%c%c",'M',clock->master);
		HAL_UART_Transmit(&huart2,(uint8_t*)uartBuffer,2,10);
		*/
		break;
	case TRANSPORT_STATE_RESET:
		if(clock->isLocked()){
 800c25e:	6838      	ldr	r0, [r7, #0]
 800c260:	f7ff fbca 	bl	800b9f8 <_ZN5Clock8isLockedEv>
 800c264:	4603      	mov	r3, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	d03a      	beq.n	800c2e0 <_ZN9Sequencer14subStepAdvanceEP5Clock+0x1c4>
			for(int i = 0; i < 16; i++){
 800c26a:	2300      	movs	r3, #0
 800c26c:	61bb      	str	r3, [r7, #24]
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	2b0f      	cmp	r3, #15
 800c272:	dc11      	bgt.n	800c298 <_ZN9Sequencer14subStepAdvanceEP5Clock+0x17c>
				song[playingSong].activeStep[i] = 0;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	791b      	ldrb	r3, [r3, #4]
 800c278:	4619      	mov	r1, r3
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	f244 1324 	movw	r3, #16676	; 0x4124
 800c280:	fb03 f301 	mul.w	r3, r3, r1
 800c284:	441a      	add	r2, r3
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	4413      	add	r3, r2
 800c28a:	3322      	adds	r3, #34	; 0x22
 800c28c:	2200      	movs	r2, #0
 800c28e:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 16; i++){
 800c290:	69bb      	ldr	r3, [r7, #24]
 800c292:	3301      	adds	r3, #1
 800c294:	61bb      	str	r3, [r7, #24]
 800c296:	e7ea      	b.n	800c26e <_ZN9Sequencer14subStepAdvanceEP5Clock+0x152>
			}
			song[playingSong].activeSubStep = clock->sub%24;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	791b      	ldrb	r3, [r3, #4]
 800c29c:	4618      	mov	r0, r3
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	6999      	ldr	r1, [r3, #24]
 800c2a2:	4b12      	ldr	r3, [pc, #72]	; (800c2ec <_ZN9Sequencer14subStepAdvanceEP5Clock+0x1d0>)
 800c2a4:	fba3 2301 	umull	r2, r3, r3, r1
 800c2a8:	091a      	lsrs	r2, r3, #4
 800c2aa:	4613      	mov	r3, r2
 800c2ac:	005b      	lsls	r3, r3, #1
 800c2ae:	4413      	add	r3, r2
 800c2b0:	00db      	lsls	r3, r3, #3
 800c2b2:	1aca      	subs	r2, r1, r3
 800c2b4:	b2d1      	uxtb	r1, r2
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	f244 1324 	movw	r3, #16676	; 0x4124
 800c2bc:	fb03 f300 	mul.w	r3, r3, r0
 800c2c0:	4413      	add	r3, r2
 800c2c2:	3332      	adds	r3, #50	; 0x32
 800c2c4:	460a      	mov	r2, r1
 800c2c6:	701a      	strb	r2, [r3, #0]
			transportState = TRANSPORT_STATE_PLAY;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2202      	movs	r2, #2
 800c2cc:	729a      	strb	r2, [r3, #10]
		}

		break;
 800c2ce:	e007      	b.n	800c2e0 <_ZN9Sequencer14subStepAdvanceEP5Clock+0x1c4>
		break;
	case TRANSPORT_STATE_HOLD:
		break;
	case TRANSPORT_STATE_STOP:

		clock->unlock();
 800c2d0:	6838      	ldr	r0, [r7, #0]
 800c2d2:	f7ff fb84 	bl	800b9de <_ZN5Clock6unlockEv>
		break;
 800c2d6:	e004      	b.n	800c2e2 <_ZN9Sequencer14subStepAdvanceEP5Clock+0x1c6>
	default:
		break;
 800c2d8:	bf00      	nop
 800c2da:	e002      	b.n	800c2e2 <_ZN9Sequencer14subStepAdvanceEP5Clock+0x1c6>
		break;
 800c2dc:	bf00      	nop
 800c2de:	e000      	b.n	800c2e2 <_ZN9Sequencer14subStepAdvanceEP5Clock+0x1c6>
		break;
 800c2e0:	bf00      	nop
	}
}
 800c2e2:	bf00      	nop
 800c2e4:	3720      	adds	r7, #32
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bdb0      	pop	{r4, r5, r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	aaaaaaab 	.word	0xaaaaaaab

0800c2f0 <_ZN9Sequencer16writeTrigPatternEv>:
void Sequencer::writeTrigPattern(void){
 800c2f0:	b590      	push	{r4, r7, lr}
 800c2f2:	b089      	sub	sp, #36	; 0x24
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
	uint8_t step;

	static uint8_t previousUartTrigger;
	char uartBuffer[3];

	if(transportState == TRANSPORT_STATE_PLAY){
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	7a9b      	ldrb	r3, [r3, #10]
 800c2fc:	2b02      	cmp	r3, #2
 800c2fe:	f040 80c2 	bne.w	800c486 <_ZN9Sequencer16writeTrigPatternEv+0x196>
		uint8_t trigger = 0;
 800c302:	2300      	movs	r3, #0
 800c304:	77fb      	strb	r3, [r7, #31]
		for(int i = 0; i < 2; i++){
 800c306:	2300      	movs	r3, #0
 800c308:	61bb      	str	r3, [r7, #24]
 800c30a:	69bb      	ldr	r3, [r7, #24]
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	dc57      	bgt.n	800c3c0 <_ZN9Sequencer16writeTrigPatternEv+0xd0>
			step = song[playingSong].activeStep[i];
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	791b      	ldrb	r3, [r3, #4]
 800c314:	4619      	mov	r1, r3
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	f244 1324 	movw	r3, #16676	; 0x4124
 800c31c:	fb03 f301 	mul.w	r3, r3, r1
 800c320:	441a      	add	r2, r3
 800c322:	69bb      	ldr	r3, [r7, #24]
 800c324:	4413      	add	r3, r2
 800c326:	3322      	adds	r3, #34	; 0x22
 800c328:	781b      	ldrb	r3, [r3, #0]
 800c32a:	73fb      	strb	r3, [r7, #15]

			if((song[playingSong].subSteps[i][playingBlock][step]) & (1 <<  song[playingSong].activeSubStep)){
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	791b      	ldrb	r3, [r3, #4]
 800c330:	461c      	mov	r4, r3
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	795b      	ldrb	r3, [r3, #5]
 800c336:	4618      	mov	r0, r3
 800c338:	7bfb      	ldrb	r3, [r7, #15]
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	69b9      	ldr	r1, [r7, #24]
 800c33e:	0109      	lsls	r1, r1, #4
 800c340:	4401      	add	r1, r0
 800c342:	0108      	lsls	r0, r1, #4
 800c344:	f241 0149 	movw	r1, #4169	; 0x1049
 800c348:	fb01 f104 	mul.w	r1, r1, r4
 800c34c:	4401      	add	r1, r0
 800c34e:	440b      	add	r3, r1
 800c350:	334c      	adds	r3, #76	; 0x4c
 800c352:	009b      	lsls	r3, r3, #2
 800c354:	4413      	add	r3, r2
 800c356:	685b      	ldr	r3, [r3, #4]
 800c358:	687a      	ldr	r2, [r7, #4]
 800c35a:	7912      	ldrb	r2, [r2, #4]
 800c35c:	4610      	mov	r0, r2
 800c35e:	6879      	ldr	r1, [r7, #4]
 800c360:	f244 1224 	movw	r2, #16676	; 0x4124
 800c364:	fb02 f200 	mul.w	r2, r2, r0
 800c368:	440a      	add	r2, r1
 800c36a:	3232      	adds	r2, #50	; 0x32
 800c36c:	7812      	ldrb	r2, [r2, #0]
 800c36e:	4611      	mov	r1, r2
 800c370:	2201      	movs	r2, #1
 800c372:	408a      	lsls	r2, r1
 800c374:	4013      	ands	r3, r2
 800c376:	2b00      	cmp	r3, #0
 800c378:	d014      	beq.n	800c3a4 <_ZN9Sequencer16writeTrigPatternEv+0xb4>
				HAL_GPIO_WritePin(GPIOB, (1 << i), GPIO_PIN_SET);
 800c37a:	2201      	movs	r2, #1
 800c37c:	69bb      	ldr	r3, [r7, #24]
 800c37e:	fa02 f303 	lsl.w	r3, r2, r3
 800c382:	b29b      	uxth	r3, r3
 800c384:	2201      	movs	r2, #1
 800c386:	4619      	mov	r1, r3
 800c388:	4841      	ldr	r0, [pc, #260]	; (800c490 <_ZN9Sequencer16writeTrigPatternEv+0x1a0>)
 800c38a:	f7fc fa1b 	bl	80087c4 <HAL_GPIO_WritePin>
				trigger |= (1 << i);
 800c38e:	2201      	movs	r2, #1
 800c390:	69bb      	ldr	r3, [r7, #24]
 800c392:	fa02 f303 	lsl.w	r3, r2, r3
 800c396:	b25a      	sxtb	r2, r3
 800c398:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c39c:	4313      	orrs	r3, r2
 800c39e:	b25b      	sxtb	r3, r3
 800c3a0:	77fb      	strb	r3, [r7, #31]
 800c3a2:	e009      	b.n	800c3b8 <_ZN9Sequencer16writeTrigPatternEv+0xc8>
			}
			else{
				HAL_GPIO_WritePin(GPIOB, (1 << i), GPIO_PIN_RESET);
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	69bb      	ldr	r3, [r7, #24]
 800c3a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ac:	b29b      	uxth	r3, r3
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	4837      	ldr	r0, [pc, #220]	; (800c490 <_ZN9Sequencer16writeTrigPatternEv+0x1a0>)
 800c3b4:	f7fc fa06 	bl	80087c4 <HAL_GPIO_WritePin>
		for(int i = 0; i < 2; i++){
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	61bb      	str	r3, [r7, #24]
 800c3be:	e7a4      	b.n	800c30a <_ZN9Sequencer16writeTrigPatternEv+0x1a>
			}
		}
		char uartTrigger = 0;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	75fb      	strb	r3, [r7, #23]
		for(int i = 0; i < 8; i++){
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	613b      	str	r3, [r7, #16]
 800c3c8:	693b      	ldr	r3, [r7, #16]
 800c3ca:	2b07      	cmp	r3, #7
 800c3cc:	dc45      	bgt.n	800c45a <_ZN9Sequencer16writeTrigPatternEv+0x16a>
			step = song[playingSong].activeStep[i+8];
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	791b      	ldrb	r3, [r3, #4]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	3308      	adds	r3, #8
 800c3d8:	6879      	ldr	r1, [r7, #4]
 800c3da:	f244 1224 	movw	r2, #16676	; 0x4124
 800c3de:	fb02 f200 	mul.w	r2, r2, r0
 800c3e2:	440a      	add	r2, r1
 800c3e4:	4413      	add	r3, r2
 800c3e6:	3322      	adds	r3, #34	; 0x22
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	73fb      	strb	r3, [r7, #15]
			if((song[playingSong].subSteps[i+8][playingBlock][step]) & (1 <<  song[playingSong].activeSubStep)){
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	791b      	ldrb	r3, [r3, #4]
 800c3f0:	461c      	mov	r4, r3
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	f103 0108 	add.w	r1, r3, #8
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	795b      	ldrb	r3, [r3, #5]
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	7bfb      	ldrb	r3, [r7, #15]
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	0109      	lsls	r1, r1, #4
 800c404:	4401      	add	r1, r0
 800c406:	0108      	lsls	r0, r1, #4
 800c408:	f241 0149 	movw	r1, #4169	; 0x1049
 800c40c:	fb01 f104 	mul.w	r1, r1, r4
 800c410:	4401      	add	r1, r0
 800c412:	440b      	add	r3, r1
 800c414:	334c      	adds	r3, #76	; 0x4c
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	4413      	add	r3, r2
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	687a      	ldr	r2, [r7, #4]
 800c41e:	7912      	ldrb	r2, [r2, #4]
 800c420:	4610      	mov	r0, r2
 800c422:	6879      	ldr	r1, [r7, #4]
 800c424:	f244 1224 	movw	r2, #16676	; 0x4124
 800c428:	fb02 f200 	mul.w	r2, r2, r0
 800c42c:	440a      	add	r2, r1
 800c42e:	3232      	adds	r2, #50	; 0x32
 800c430:	7812      	ldrb	r2, [r2, #0]
 800c432:	4611      	mov	r1, r2
 800c434:	2201      	movs	r2, #1
 800c436:	408a      	lsls	r2, r1
 800c438:	4013      	ands	r3, r2
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d009      	beq.n	800c452 <_ZN9Sequencer16writeTrigPatternEv+0x162>
				uartTrigger |= (1 << i);
 800c43e:	2201      	movs	r2, #1
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	fa02 f303 	lsl.w	r3, r2, r3
 800c446:	b25a      	sxtb	r2, r3
 800c448:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c44c:	4313      	orrs	r3, r2
 800c44e:	b25b      	sxtb	r3, r3
 800c450:	75fb      	strb	r3, [r7, #23]
		for(int i = 0; i < 8; i++){
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	3301      	adds	r3, #1
 800c456:	613b      	str	r3, [r7, #16]
 800c458:	e7b6      	b.n	800c3c8 <_ZN9Sequencer16writeTrigPatternEv+0xd8>

			}
		}
		if(uartTrigger != previousUartTrigger){
 800c45a:	4b0e      	ldr	r3, [pc, #56]	; (800c494 <_ZN9Sequencer16writeTrigPatternEv+0x1a4>)
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	7dfa      	ldrb	r2, [r7, #23]
 800c460:	429a      	cmp	r2, r3
 800c462:	d010      	beq.n	800c486 <_ZN9Sequencer16writeTrigPatternEv+0x196>
			previousUartTrigger = uartTrigger;
 800c464:	4a0b      	ldr	r2, [pc, #44]	; (800c494 <_ZN9Sequencer16writeTrigPatternEv+0x1a4>)
 800c466:	7dfb      	ldrb	r3, [r7, #23]
 800c468:	7013      	strb	r3, [r2, #0]
			sprintf(uartBuffer,"%c%c",'T',uartTrigger);
 800c46a:	7dfb      	ldrb	r3, [r7, #23]
 800c46c:	f107 000c 	add.w	r0, r7, #12
 800c470:	2254      	movs	r2, #84	; 0x54
 800c472:	4909      	ldr	r1, [pc, #36]	; (800c498 <_ZN9Sequencer16writeTrigPatternEv+0x1a8>)
 800c474:	f005 f8b2 	bl	80115dc <sprintf>
			HAL_UART_Transmit(&huart2,(uint8_t*)uartBuffer,2,10);
 800c478:	f107 010c 	add.w	r1, r7, #12
 800c47c:	230a      	movs	r3, #10
 800c47e:	2202      	movs	r2, #2
 800c480:	4806      	ldr	r0, [pc, #24]	; (800c49c <_ZN9Sequencer16writeTrigPatternEv+0x1ac>)
 800c482:	f7fd fe25 	bl	800a0d0 <HAL_UART_Transmit>
		}
	}
}
 800c486:	bf00      	nop
 800c488:	3724      	adds	r7, #36	; 0x24
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd90      	pop	{r4, r7, pc}
 800c48e:	bf00      	nop
 800c490:	40020400 	.word	0x40020400
 800c494:	20008c54 	.word	0x20008c54
 800c498:	080176c4 	.word	0x080176c4
 800c49c:	20000870 	.word	0x20000870

0800c4a0 <_ZN9SequencerD1Ev>:



Sequencer::~Sequencer(void){
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800c4ae:	33c0      	adds	r3, #192	; 0xc0
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f000 f943 	bl	800c73c <_ZN8SwitchesD1Ev>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800c4bc:	3358      	adds	r3, #88	; 0x58
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f000 f93c 	bl	800c73c <_ZN8SwitchesD1Ev>
}
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	e008      	b.n	800c4da <_ZN9SequencerD1Ev+0x3a>
Sequencer::~Sequencer(void){
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f503 4302 	add.w	r3, r3, #33280	; 0x8200
 800c4ce:	3358      	adds	r3, #88	; 0x58
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f000 f933 	bl	800c73c <_ZN8SwitchesD1Ev>
 800c4d6:	f002 fea3 	bl	800f220 <__cxa_end_cleanup>
}
 800c4da:	4618      	mov	r0, r3
 800c4dc:	3708      	adds	r7, #8
 800c4de:	46bd      	mov	sp, r7
 800c4e0:	bd80      	pop	{r7, pc}

0800c4e2 <_ZNSt6vectorIhSaIhEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800c4e2:	b480      	push	{r7}
 800c4e4:	b083      	sub	sp, #12
 800c4e6:	af00      	add	r7, sp, #0
 800c4e8:	6078      	str	r0, [r7, #4]
 800c4ea:	6039      	str	r1, [r7, #0]
      { return *(this->_M_impl._M_start + __n); }
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	370c      	adds	r7, #12
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fe:	4770      	bx	lr

0800c500 <_ZnwjPv>:
  __attribute__((__externally_visible__));
#endif

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800c500:	b480      	push	{r7}
 800c502:	b083      	sub	sp, #12
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	6039      	str	r1, [r7, #0]
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	4618      	mov	r0, r3
 800c50e:	370c      	adds	r7, #12
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr

0800c518 <_ZdlPvS_>:
inline void* operator new[](std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }

// Default placement versions of operator delete.
inline void operator delete  (void*, void*) _GLIBCXX_USE_NOEXCEPT { }
 800c518:	b480      	push	{r7}
 800c51a:	b083      	sub	sp, #12
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
 800c522:	bf00      	nop
 800c524:	370c      	adds	r7, #12
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr
	...

0800c530 <_Z12shiftRegInitv>:
#include "stm32f4xx_hal.h"

uint8_t ui_spi_in[NUM_OF_REGISTERS];
uint8_t ui_spi_out[NUM_OF_REGISTERS];

void shiftRegInit(void){
 800c530:	b580      	push	{r7, lr}
 800c532:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SRCLR_GPIO_Port,SRCLR_Pin,GPIO_PIN_SET);
 800c534:	2201      	movs	r2, #1
 800c536:	2120      	movs	r1, #32
 800c538:	4807      	ldr	r0, [pc, #28]	; (800c558 <_Z12shiftRegInitv+0x28>)
 800c53a:	f7fc f943 	bl	80087c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD_GPIO_Port,LD_Pin,GPIO_PIN_SET);
 800c53e:	2201      	movs	r2, #1
 800c540:	2101      	movs	r1, #1
 800c542:	4805      	ldr	r0, [pc, #20]	; (800c558 <_Z12shiftRegInitv+0x28>)
 800c544:	f7fc f93e 	bl	80087c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RCLK_GPIO_Port, RCLK_Pin,GPIO_PIN_SET);
 800c548:	2201      	movs	r2, #1
 800c54a:	2110      	movs	r1, #16
 800c54c:	4802      	ldr	r0, [pc, #8]	; (800c558 <_Z12shiftRegInitv+0x28>)
 800c54e:	f7fc f939 	bl	80087c4 <HAL_GPIO_WritePin>
}
 800c552:	bf00      	nop
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	40020800 	.word	0x40020800

0800c55c <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef>:
// Switch debouncer
Switches::Switches(uint8_t nRegisters, uint8_t nStates, uint8_t srOffset, SPI_HandleTypeDef* spi){
 800c55c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c55e:	b089      	sub	sp, #36	; 0x24
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	4608      	mov	r0, r1
 800c566:	4611      	mov	r1, r2
 800c568:	461a      	mov	r2, r3
 800c56a:	4603      	mov	r3, r0
 800c56c:	70fb      	strb	r3, [r7, #3]
 800c56e:	460b      	mov	r3, r1
 800c570:	70bb      	strb	r3, [r7, #2]
 800c572:	4613      	mov	r3, r2
 800c574:	707b      	strb	r3, [r7, #1]
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	3308      	adds	r3, #8
 800c57a:	4618      	mov	r0, r3
 800c57c:	f000 fcf6 	bl	800cf6c <_ZNSt6vectorIhSaIhEEC1Ev>
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	3314      	adds	r3, #20
 800c584:	4618      	mov	r0, r3
 800c586:	f000 fd20 	bl	800cfca <_ZNSt6vectorIS_IhSaIhEESaIS1_EEC1Ev>
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	3320      	adds	r3, #32
 800c58e:	4618      	mov	r0, r3
 800c590:	f000 fcec 	bl	800cf6c <_ZNSt6vectorIhSaIhEEC1Ev>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	332c      	adds	r3, #44	; 0x2c
 800c598:	4618      	mov	r0, r3
 800c59a:	f000 fce7 	bl	800cf6c <_ZNSt6vectorIhSaIhEEC1Ev>
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	3338      	adds	r3, #56	; 0x38
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f000 fce2 	bl	800cf6c <_ZNSt6vectorIhSaIhEEC1Ev>
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	3344      	adds	r3, #68	; 0x44
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f000 fcdd 	bl	800cf6c <_ZNSt6vectorIhSaIhEEC1Ev>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	3350      	adds	r3, #80	; 0x50
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f000 fcd8 	bl	800cf6c <_ZNSt6vectorIhSaIhEEC1Ev>
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	335c      	adds	r3, #92	; 0x5c
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f000 fcd3 	bl	800cf6c <_ZNSt6vectorIhSaIhEEC1Ev>
	numOfRegisters = nRegisters;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	78fa      	ldrb	r2, [r7, #3]
 800c5ca:	705a      	strb	r2, [r3, #1]
	numOfStates = nStates;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	78ba      	ldrb	r2, [r7, #2]
 800c5d0:	709a      	strb	r2, [r3, #2]
	offset = srOffset;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	787a      	ldrb	r2, [r7, #1]
 800c5d6:	701a      	strb	r2, [r3, #0]

	spi_interface = spi;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5dc:	605a      	str	r2, [r3, #4]

	state.resize(numOfRegisters, std::vector<uint8_t>(numOfStates));
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f103 0414 	add.w	r4, r3, #20
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	785b      	ldrb	r3, [r3, #1]
 800c5e8:	461d      	mov	r5, r3
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	789b      	ldrb	r3, [r3, #2]
 800c5ee:	461e      	mov	r6, r3
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	76fb      	strb	r3, [r7, #27]
 800c5f4:	f107 031c 	add.w	r3, r7, #28
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f000 fd15 	bl	800d028 <_ZNSaIhEC1Ev>
 800c5fe:	f107 031c 	add.w	r3, r7, #28
 800c602:	f107 021b 	add.w	r2, r7, #27
 800c606:	f107 000c 	add.w	r0, r7, #12
 800c60a:	4631      	mov	r1, r6
 800c60c:	f000 fd24 	bl	800d058 <_ZNSt6vectorIhSaIhEEC1EjRKhRKS0_>
 800c610:	f107 030c 	add.w	r3, r7, #12
 800c614:	461a      	mov	r2, r3
 800c616:	4629      	mov	r1, r5
 800c618:	4620      	mov	r0, r4
 800c61a:	f000 fd76 	bl	800d10a <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEjS1_>
 800c61e:	f107 030c 	add.w	r3, r7, #12
 800c622:	4618      	mov	r0, r3
 800c624:	f000 fcaf 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800c628:	f107 031c 	add.w	r3, r7, #28
 800c62c:	4618      	mov	r0, r3
 800c62e:	f000 fd07 	bl	800d040 <_ZNSaIhED1Ev>
	debouncedState.resize(numOfRegisters);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	f103 0020 	add.w	r0, r3, #32
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	785b      	ldrb	r3, [r3, #1]
 800c63c:	2200      	movs	r2, #0
 800c63e:	4619      	mov	r1, r3
 800c640:	f000 fda1 	bl	800d186 <_ZNSt6vectorIhSaIhEE6resizeEjh>
	changed.resize(numOfRegisters);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	785b      	ldrb	r3, [r3, #1]
 800c64e:	2200      	movs	r2, #0
 800c650:	4619      	mov	r1, r3
 800c652:	f000 fd98 	bl	800d186 <_ZNSt6vectorIhSaIhEE6resizeEjh>
	index.resize(numOfRegisters);
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f103 0008 	add.w	r0, r3, #8
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	785b      	ldrb	r3, [r3, #1]
 800c660:	2200      	movs	r2, #0
 800c662:	4619      	mov	r1, r3
 800c664:	f000 fd8f 	bl	800d186 <_ZNSt6vectorIhSaIhEE6resizeEjh>

	holdTimer.resize(numOfRegisters*8);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	785b      	ldrb	r3, [r3, #1]
 800c672:	00db      	lsls	r3, r3, #3
 800c674:	2200      	movs	r2, #0
 800c676:	4619      	mov	r1, r3
 800c678:	f000 fd85 	bl	800d186 <_ZNSt6vectorIhSaIhEE6resizeEjh>

	leds.resize(numOfRegisters);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f103 0044 	add.w	r0, r3, #68	; 0x44
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	785b      	ldrb	r3, [r3, #1]
 800c686:	2200      	movs	r2, #0
 800c688:	4619      	mov	r1, r3
 800c68a:	f000 fd7c 	bl	800d186 <_ZNSt6vectorIhSaIhEE6resizeEjh>
	ledPWM.resize(numOfRegisters*8, 0);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f103 0050 	add.w	r0, r3, #80	; 0x50
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	785b      	ldrb	r3, [r3, #1]
 800c698:	00db      	lsls	r3, r3, #3
 800c69a:	2200      	movs	r2, #0
 800c69c:	4619      	mov	r1, r3
 800c69e:	f000 fd72 	bl	800d186 <_ZNSt6vectorIhSaIhEE6resizeEjh>
	ledPulse.resize(numOfRegisters*8, 0);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	785b      	ldrb	r3, [r3, #1]
 800c6ac:	00db      	lsls	r3, r3, #3
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	f000 fd68 	bl	800d186 <_ZNSt6vectorIhSaIhEE6resizeEjh>

}
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	e03c      	b.n	800c734 <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x1d8>
	state.resize(numOfRegisters, std::vector<uint8_t>(numOfStates));
 800c6ba:	f107 030c 	add.w	r3, r7, #12
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f000 fc61 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800c6c4:	e7ff      	b.n	800c6c6 <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x16a>
 800c6c6:	f107 031c 	add.w	r3, r7, #28
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f000 fcb8 	bl	800d040 <_ZNSaIhED1Ev>
 800c6d0:	e7ff      	b.n	800c6d2 <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x176>
Switches::Switches(uint8_t nRegisters, uint8_t nStates, uint8_t srOffset, SPI_HandleTypeDef* spi){
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	335c      	adds	r3, #92	; 0x5c
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f000 fc55 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800c6dc:	e7ff      	b.n	800c6de <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x182>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	3350      	adds	r3, #80	; 0x50
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	f000 fc4f 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800c6e8:	e7ff      	b.n	800c6ea <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x18e>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	3344      	adds	r3, #68	; 0x44
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	f000 fc49 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800c6f4:	e7ff      	b.n	800c6f6 <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x19a>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	3338      	adds	r3, #56	; 0x38
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f000 fc43 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800c700:	e7ff      	b.n	800c702 <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x1a6>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	332c      	adds	r3, #44	; 0x2c
 800c706:	4618      	mov	r0, r3
 800c708:	f000 fc3d 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800c70c:	e7ff      	b.n	800c70e <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x1b2>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	3320      	adds	r3, #32
 800c712:	4618      	mov	r0, r3
 800c714:	f000 fc37 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800c718:	e7ff      	b.n	800c71a <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x1be>
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	3314      	adds	r3, #20
 800c71e:	4618      	mov	r0, r3
 800c720:	f000 fc60 	bl	800cfe4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
 800c724:	e7ff      	b.n	800c726 <_ZN8SwitchesC1EhhhP19__SPI_HandleTypeDef+0x1ca>
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	3308      	adds	r3, #8
 800c72a:	4618      	mov	r0, r3
 800c72c:	f000 fc2b 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800c730:	f002 fd76 	bl	800f220 <__cxa_end_cleanup>
}
 800c734:	4618      	mov	r0, r3
 800c736:	3724      	adds	r7, #36	; 0x24
 800c738:	46bd      	mov	sp, r7
 800c73a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c73c <_ZN8SwitchesD1Ev>:

Switches::~Switches(void){
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	335c      	adds	r3, #92	; 0x5c
 800c748:	4618      	mov	r0, r3
 800c74a:	f000 fc1c 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	3350      	adds	r3, #80	; 0x50
 800c752:	4618      	mov	r0, r3
 800c754:	f000 fc17 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	3344      	adds	r3, #68	; 0x44
 800c75c:	4618      	mov	r0, r3
 800c75e:	f000 fc12 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	3338      	adds	r3, #56	; 0x38
 800c766:	4618      	mov	r0, r3
 800c768:	f000 fc0d 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	332c      	adds	r3, #44	; 0x2c
 800c770:	4618      	mov	r0, r3
 800c772:	f000 fc08 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	3320      	adds	r3, #32
 800c77a:	4618      	mov	r0, r3
 800c77c:	f000 fc03 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	3314      	adds	r3, #20
 800c784:	4618      	mov	r0, r3
 800c786:	f000 fc2d 	bl	800cfe4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	3308      	adds	r3, #8
 800c78e:	4618      	mov	r0, r3
 800c790:	f000 fbf9 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
	;
}
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	e02a      	b.n	800c7ee <_ZN8SwitchesD1Ev+0xb2>
Switches::~Switches(void){
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	3350      	adds	r3, #80	; 0x50
 800c79c:	4618      	mov	r0, r3
 800c79e:	f000 fbf2 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800c7a2:	e7ff      	b.n	800c7a4 <_ZN8SwitchesD1Ev+0x68>
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	3344      	adds	r3, #68	; 0x44
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f000 fbec 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800c7ae:	e7ff      	b.n	800c7b0 <_ZN8SwitchesD1Ev+0x74>
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	3338      	adds	r3, #56	; 0x38
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f000 fbe6 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800c7ba:	e7ff      	b.n	800c7bc <_ZN8SwitchesD1Ev+0x80>
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	332c      	adds	r3, #44	; 0x2c
 800c7c0:	4618      	mov	r0, r3
 800c7c2:	f000 fbe0 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800c7c6:	e7ff      	b.n	800c7c8 <_ZN8SwitchesD1Ev+0x8c>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	3320      	adds	r3, #32
 800c7cc:	4618      	mov	r0, r3
 800c7ce:	f000 fbda 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800c7d2:	e7ff      	b.n	800c7d4 <_ZN8SwitchesD1Ev+0x98>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	3314      	adds	r3, #20
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f000 fc03 	bl	800cfe4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>
 800c7de:	e7ff      	b.n	800c7e0 <_ZN8SwitchesD1Ev+0xa4>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	3308      	adds	r3, #8
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f000 fbce 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800c7ea:	f002 fd19 	bl	800f220 <__cxa_end_cleanup>
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3708      	adds	r7, #8
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
	...

0800c7f8 <_ZN8Switches3spiEv>:

void Switches::spi(void){
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af02      	add	r7, sp, #8
 800c7fe:	6078      	str	r0, [r7, #4]

		// Latch inputs



		HAL_SPI_TransmitReceive(spi_interface, ui_spi_out, ui_spi_in, NUM_OF_REGISTERS, 10);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	6858      	ldr	r0, [r3, #4]
 800c804:	230a      	movs	r3, #10
 800c806:	9300      	str	r3, [sp, #0]
 800c808:	2303      	movs	r3, #3
 800c80a:	4a0e      	ldr	r2, [pc, #56]	; (800c844 <_ZN8Switches3spiEv+0x4c>)
 800c80c:	490e      	ldr	r1, [pc, #56]	; (800c848 <_ZN8Switches3spiEv+0x50>)
 800c80e:	f7fc fcef 	bl	80091f0 <HAL_SPI_TransmitReceive>

		// Transfer shift register contents to storage register

		HAL_GPIO_WritePin(RCLK_GPIO_Port, RCLK_Pin,GPIO_PIN_SET);
 800c812:	2201      	movs	r2, #1
 800c814:	2110      	movs	r1, #16
 800c816:	480d      	ldr	r0, [pc, #52]	; (800c84c <_ZN8Switches3spiEv+0x54>)
 800c818:	f7fb ffd4 	bl	80087c4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(RCLK_GPIO_Port, RCLK_Pin,GPIO_PIN_RESET);
 800c81c:	2200      	movs	r2, #0
 800c81e:	2110      	movs	r1, #16
 800c820:	480a      	ldr	r0, [pc, #40]	; (800c84c <_ZN8Switches3spiEv+0x54>)
 800c822:	f7fb ffcf 	bl	80087c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD_GPIO_Port,LD_Pin,GPIO_PIN_RESET);
 800c826:	2200      	movs	r2, #0
 800c828:	2101      	movs	r1, #1
 800c82a:	4808      	ldr	r0, [pc, #32]	; (800c84c <_ZN8Switches3spiEv+0x54>)
 800c82c:	f7fb ffca 	bl	80087c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD_GPIO_Port,LD_Pin,GPIO_PIN_SET);
 800c830:	2201      	movs	r2, #1
 800c832:	2101      	movs	r1, #1
 800c834:	4805      	ldr	r0, [pc, #20]	; (800c84c <_ZN8Switches3spiEv+0x54>)
 800c836:	f7fb ffc5 	bl	80087c4 <HAL_GPIO_WritePin>


}
 800c83a:	bf00      	nop
 800c83c:	3708      	adds	r7, #8
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	20008c58 	.word	0x20008c58
 800c848:	20008c5c 	.word	0x20008c5c
 800c84c:	40020800 	.word	0x40020800

0800c850 <_ZN8Switches6updateEi>:
void Switches::update(int subTick){
 800c850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c854:	b08d      	sub	sp, #52	; 0x34
 800c856:	af00      	add	r7, sp, #0
 800c858:	60f8      	str	r0, [r7, #12]
 800c85a:	60b9      	str	r1, [r7, #8]
			index[x] = 0;
		}

		changed[x] = debouncedState[x] ^ lastDebouncedState[x];

	}
 800c85c:	466a      	mov	r2, sp
 800c85e:	607a      	str	r2, [r7, #4]
	uint8_t lastDebouncedState[numOfRegisters];
 800c860:	68fa      	ldr	r2, [r7, #12]
 800c862:	7852      	ldrb	r2, [r2, #1]
 800c864:	1e50      	subs	r0, r2, #1
 800c866:	62b8      	str	r0, [r7, #40]	; 0x28
 800c868:	4602      	mov	r2, r0
 800c86a:	3201      	adds	r2, #1
 800c86c:	4611      	mov	r1, r2
 800c86e:	f04f 0200 	mov.w	r2, #0
 800c872:	ea4f 0bc2 	mov.w	fp, r2, lsl #3
 800c876:	ea4b 7b51 	orr.w	fp, fp, r1, lsr #29
 800c87a:	ea4f 0ac1 	mov.w	sl, r1, lsl #3
 800c87e:	4602      	mov	r2, r0
 800c880:	3201      	adds	r2, #1
 800c882:	4611      	mov	r1, r2
 800c884:	f04f 0200 	mov.w	r2, #0
 800c888:	ea4f 09c2 	mov.w	r9, r2, lsl #3
 800c88c:	ea49 7951 	orr.w	r9, r9, r1, lsr #29
 800c890:	ea4f 08c1 	mov.w	r8, r1, lsl #3
 800c894:	4602      	mov	r2, r0
 800c896:	3201      	adds	r2, #1
 800c898:	3207      	adds	r2, #7
 800c89a:	08d2      	lsrs	r2, r2, #3
 800c89c:	00d2      	lsls	r2, r2, #3
 800c89e:	ebad 0d02 	sub.w	sp, sp, r2
 800c8a2:	466a      	mov	r2, sp
 800c8a4:	3200      	adds	r2, #0
 800c8a6:	627a      	str	r2, [r7, #36]	; 0x24
	uint8_t ledMask[numOfRegisters];
 800c8a8:	68fa      	ldr	r2, [r7, #12]
 800c8aa:	7852      	ldrb	r2, [r2, #1]
 800c8ac:	1e50      	subs	r0, r2, #1
 800c8ae:	6238      	str	r0, [r7, #32]
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	3201      	adds	r2, #1
 800c8b4:	4611      	mov	r1, r2
 800c8b6:	f04f 0200 	mov.w	r2, #0
 800c8ba:	00d6      	lsls	r6, r2, #3
 800c8bc:	ea46 7651 	orr.w	r6, r6, r1, lsr #29
 800c8c0:	00cd      	lsls	r5, r1, #3
 800c8c2:	4602      	mov	r2, r0
 800c8c4:	3201      	adds	r2, #1
 800c8c6:	4611      	mov	r1, r2
 800c8c8:	f04f 0200 	mov.w	r2, #0
 800c8cc:	00d4      	lsls	r4, r2, #3
 800c8ce:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800c8d2:	00cb      	lsls	r3, r1, #3
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	3307      	adds	r3, #7
 800c8da:	08db      	lsrs	r3, r3, #3
 800c8dc:	00db      	lsls	r3, r3, #3
 800c8de:	ebad 0d03 	sub.w	sp, sp, r3
 800c8e2:	466b      	mov	r3, sp
 800c8e4:	3300      	adds	r3, #0
 800c8e6:	61fb      	str	r3, [r7, #28]
	uint8_t step = subTick/12;
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	4a87      	ldr	r2, [pc, #540]	; (800cb08 <_ZN8Switches6updateEi+0x2b8>)
 800c8ec:	fb82 1203 	smull	r1, r2, r2, r3
 800c8f0:	1052      	asrs	r2, r2, #1
 800c8f2:	17db      	asrs	r3, r3, #31
 800c8f4:	1ad3      	subs	r3, r2, r3
 800c8f6:	76fb      	strb	r3, [r7, #27]
	if(++PWMcounter >= 64){
 800c8f8:	4b84      	ldr	r3, [pc, #528]	; (800cb0c <_ZN8Switches6updateEi+0x2bc>)
 800c8fa:	781b      	ldrb	r3, [r3, #0]
 800c8fc:	3301      	adds	r3, #1
 800c8fe:	b2da      	uxtb	r2, r3
 800c900:	4b82      	ldr	r3, [pc, #520]	; (800cb0c <_ZN8Switches6updateEi+0x2bc>)
 800c902:	701a      	strb	r2, [r3, #0]
 800c904:	4b81      	ldr	r3, [pc, #516]	; (800cb0c <_ZN8Switches6updateEi+0x2bc>)
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	2b3f      	cmp	r3, #63	; 0x3f
 800c90a:	bfcc      	ite	gt
 800c90c:	2301      	movgt	r3, #1
 800c90e:	2300      	movle	r3, #0
 800c910:	b2db      	uxtb	r3, r3
 800c912:	2b00      	cmp	r3, #0
 800c914:	d002      	beq.n	800c91c <_ZN8Switches6updateEi+0xcc>
		PWMcounter = 1;
 800c916:	4b7d      	ldr	r3, [pc, #500]	; (800cb0c <_ZN8Switches6updateEi+0x2bc>)
 800c918:	2201      	movs	r2, #1
 800c91a:	701a      	strb	r2, [r3, #0]
	for(x = 0; x < numOfRegisters; x++){
 800c91c:	2300      	movs	r3, #0
 800c91e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800c922:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c926:	68fa      	ldr	r2, [r7, #12]
 800c928:	7852      	ldrb	r2, [r2, #1]
 800c92a:	4293      	cmp	r3, r2
 800c92c:	f280 81b0 	bge.w	800cc90 <_ZN8Switches6updateEi+0x440>
		for(j = 0; j<8; j++){
 800c930:	2300      	movs	r3, #0
 800c932:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800c936:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c93a:	2b07      	cmp	r3, #7
 800c93c:	f300 80e8 	bgt.w	800cb10 <_ZN8Switches6updateEi+0x2c0>
			shift = (x*8)+j;
 800c940:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c944:	00da      	lsls	r2, r3, #3
 800c946:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c94a:	4413      	add	r3, r2
 800c94c:	617b      	str	r3, [r7, #20]
			if(ledPulse[shift]){
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	335c      	adds	r3, #92	; 0x5c
 800c952:	697a      	ldr	r2, [r7, #20]
 800c954:	4611      	mov	r1, r2
 800c956:	4618      	mov	r0, r3
 800c958:	f7ff fdc3 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800c95c:	4603      	mov	r3, r0
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	bf14      	ite	ne
 800c964:	2301      	movne	r3, #1
 800c966:	2300      	moveq	r3, #0
 800c968:	b2db      	uxtb	r3, r3
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d066      	beq.n	800ca3c <_ZN8Switches6updateEi+0x1ec>
				if(!(step%ledPulse[shift])){
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	335c      	adds	r3, #92	; 0x5c
 800c972:	697a      	ldr	r2, [r7, #20]
 800c974:	4611      	mov	r1, r2
 800c976:	4618      	mov	r0, r3
 800c978:	f7ff fdb3 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800c97c:	4603      	mov	r3, r0
 800c97e:	781a      	ldrb	r2, [r3, #0]
 800c980:	7efb      	ldrb	r3, [r7, #27]
 800c982:	fbb3 f1f2 	udiv	r1, r3, r2
 800c986:	fb02 f201 	mul.w	r2, r2, r1
 800c98a:	1a9b      	subs	r3, r3, r2
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	2b00      	cmp	r3, #0
 800c990:	bf0c      	ite	eq
 800c992:	2301      	moveq	r3, #1
 800c994:	2300      	movne	r3, #0
 800c996:	b2db      	uxtb	r3, r3
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d03a      	beq.n	800ca12 <_ZN8Switches6updateEi+0x1c2>
					if(PWMcounter<ledPWM[shift]){
 800c99c:	4b5b      	ldr	r3, [pc, #364]	; (800cb0c <_ZN8Switches6updateEi+0x2bc>)
 800c99e:	781b      	ldrb	r3, [r3, #0]
 800c9a0:	461c      	mov	r4, r3
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	3350      	adds	r3, #80	; 0x50
 800c9a6:	697a      	ldr	r2, [r7, #20]
 800c9a8:	4611      	mov	r1, r2
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f7ff fd99 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	429c      	cmp	r4, r3
 800c9b6:	bfb4      	ite	lt
 800c9b8:	2301      	movlt	r3, #1
 800c9ba:	2300      	movge	r3, #0
 800c9bc:	b2db      	uxtb	r3, r3
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d012      	beq.n	800c9e8 <_ZN8Switches6updateEi+0x198>
						ledMask[x] |= (1 << j);
 800c9c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c9c6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c9ca:	69f9      	ldr	r1, [r7, #28]
 800c9cc:	5c8a      	ldrb	r2, [r1, r2]
 800c9ce:	b251      	sxtb	r1, r2
 800c9d0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800c9d4:	2001      	movs	r0, #1
 800c9d6:	fa00 f202 	lsl.w	r2, r0, r2
 800c9da:	b252      	sxtb	r2, r2
 800c9dc:	430a      	orrs	r2, r1
 800c9de:	b252      	sxtb	r2, r2
 800c9e0:	b2d1      	uxtb	r1, r2
 800c9e2:	69fa      	ldr	r2, [r7, #28]
 800c9e4:	54d1      	strb	r1, [r2, r3]
 800c9e6:	e088      	b.n	800cafa <_ZN8Switches6updateEi+0x2aa>
						ledMask[x] &= ~(1 << j);
 800c9e8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c9ec:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800c9f0:	69f9      	ldr	r1, [r7, #28]
 800c9f2:	5c8a      	ldrb	r2, [r1, r2]
 800c9f4:	b251      	sxtb	r1, r2
 800c9f6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800c9fa:	2001      	movs	r0, #1
 800c9fc:	fa00 f202 	lsl.w	r2, r0, r2
 800ca00:	b252      	sxtb	r2, r2
 800ca02:	43d2      	mvns	r2, r2
 800ca04:	b252      	sxtb	r2, r2
 800ca06:	400a      	ands	r2, r1
 800ca08:	b252      	sxtb	r2, r2
 800ca0a:	b2d1      	uxtb	r1, r2
 800ca0c:	69fa      	ldr	r2, [r7, #28]
 800ca0e:	54d1      	strb	r1, [r2, r3]
 800ca10:	e073      	b.n	800cafa <_ZN8Switches6updateEi+0x2aa>
					ledMask[x] &= ~(1 << j);
 800ca12:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ca16:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ca1a:	69f9      	ldr	r1, [r7, #28]
 800ca1c:	5c8a      	ldrb	r2, [r1, r2]
 800ca1e:	b251      	sxtb	r1, r2
 800ca20:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800ca24:	2001      	movs	r0, #1
 800ca26:	fa00 f202 	lsl.w	r2, r0, r2
 800ca2a:	b252      	sxtb	r2, r2
 800ca2c:	43d2      	mvns	r2, r2
 800ca2e:	b252      	sxtb	r2, r2
 800ca30:	400a      	ands	r2, r1
 800ca32:	b252      	sxtb	r2, r2
 800ca34:	b2d1      	uxtb	r1, r2
 800ca36:	69fa      	ldr	r2, [r7, #28]
 800ca38:	54d1      	strb	r1, [r2, r3]
 800ca3a:	e05e      	b.n	800cafa <_ZN8Switches6updateEi+0x2aa>
			else if(ledPWM[shift]){
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	3350      	adds	r3, #80	; 0x50
 800ca40:	697a      	ldr	r2, [r7, #20]
 800ca42:	4611      	mov	r1, r2
 800ca44:	4618      	mov	r0, r3
 800ca46:	f7ff fd4c 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	bf14      	ite	ne
 800ca52:	2301      	movne	r3, #1
 800ca54:	2300      	moveq	r3, #0
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d03a      	beq.n	800cad2 <_ZN8Switches6updateEi+0x282>
				if(PWMcounter<ledPWM[shift]){
 800ca5c:	4b2b      	ldr	r3, [pc, #172]	; (800cb0c <_ZN8Switches6updateEi+0x2bc>)
 800ca5e:	781b      	ldrb	r3, [r3, #0]
 800ca60:	461c      	mov	r4, r3
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	3350      	adds	r3, #80	; 0x50
 800ca66:	697a      	ldr	r2, [r7, #20]
 800ca68:	4611      	mov	r1, r2
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f7ff fd39 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800ca70:	4603      	mov	r3, r0
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	429c      	cmp	r4, r3
 800ca76:	bfb4      	ite	lt
 800ca78:	2301      	movlt	r3, #1
 800ca7a:	2300      	movge	r3, #0
 800ca7c:	b2db      	uxtb	r3, r3
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d012      	beq.n	800caa8 <_ZN8Switches6updateEi+0x258>
					ledMask[x] |= (1 << j);
 800ca82:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ca86:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ca8a:	69f9      	ldr	r1, [r7, #28]
 800ca8c:	5c8a      	ldrb	r2, [r1, r2]
 800ca8e:	b251      	sxtb	r1, r2
 800ca90:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800ca94:	2001      	movs	r0, #1
 800ca96:	fa00 f202 	lsl.w	r2, r0, r2
 800ca9a:	b252      	sxtb	r2, r2
 800ca9c:	430a      	orrs	r2, r1
 800ca9e:	b252      	sxtb	r2, r2
 800caa0:	b2d1      	uxtb	r1, r2
 800caa2:	69fa      	ldr	r2, [r7, #28]
 800caa4:	54d1      	strb	r1, [r2, r3]
 800caa6:	e028      	b.n	800cafa <_ZN8Switches6updateEi+0x2aa>
					ledMask[x] &= ~(1 << j);
 800caa8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800caac:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cab0:	69f9      	ldr	r1, [r7, #28]
 800cab2:	5c8a      	ldrb	r2, [r1, r2]
 800cab4:	b251      	sxtb	r1, r2
 800cab6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800caba:	2001      	movs	r0, #1
 800cabc:	fa00 f202 	lsl.w	r2, r0, r2
 800cac0:	b252      	sxtb	r2, r2
 800cac2:	43d2      	mvns	r2, r2
 800cac4:	b252      	sxtb	r2, r2
 800cac6:	400a      	ands	r2, r1
 800cac8:	b252      	sxtb	r2, r2
 800caca:	b2d1      	uxtb	r1, r2
 800cacc:	69fa      	ldr	r2, [r7, #28]
 800cace:	54d1      	strb	r1, [r2, r3]
 800cad0:	e013      	b.n	800cafa <_ZN8Switches6updateEi+0x2aa>
					ledMask[x] &= ~(1 << j);
 800cad2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cad6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cada:	69f9      	ldr	r1, [r7, #28]
 800cadc:	5c8a      	ldrb	r2, [r1, r2]
 800cade:	b251      	sxtb	r1, r2
 800cae0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800cae4:	2001      	movs	r0, #1
 800cae6:	fa00 f202 	lsl.w	r2, r0, r2
 800caea:	b252      	sxtb	r2, r2
 800caec:	43d2      	mvns	r2, r2
 800caee:	b252      	sxtb	r2, r2
 800caf0:	400a      	ands	r2, r1
 800caf2:	b252      	sxtb	r2, r2
 800caf4:	b2d1      	uxtb	r1, r2
 800caf6:	69fa      	ldr	r2, [r7, #28]
 800caf8:	54d1      	strb	r1, [r2, r3]
		for(j = 0; j<8; j++){
 800cafa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800cafe:	3301      	adds	r3, #1
 800cb00:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 800cb04:	e717      	b.n	800c936 <_ZN8Switches6updateEi+0xe6>
 800cb06:	bf00      	nop
 800cb08:	2aaaaaab 	.word	0x2aaaaaab
 800cb0c:	20008c5f 	.word	0x20008c5f
		ui_spi_out[NUM_OF_REGISTERS-(1+offset+x)] = ledMask[x];
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	1c5a      	adds	r2, r3, #1
 800cb16:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cb1a:	4413      	add	r3, r2
 800cb1c:	f1c3 0303 	rsb	r3, r3, #3
 800cb20:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cb24:	69f9      	ldr	r1, [r7, #28]
 800cb26:	5c89      	ldrb	r1, [r1, r2]
 800cb28:	4a5d      	ldr	r2, [pc, #372]	; (800cca0 <_ZN8Switches6updateEi+0x450>)
 800cb2a:	54d1      	strb	r1, [r2, r3]
		lastDebouncedState[x] = debouncedState[x];
 800cb2c:	f897 402e 	ldrb.w	r4, [r7, #46]	; 0x2e
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	3320      	adds	r3, #32
 800cb34:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cb38:	4611      	mov	r1, r2
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7ff fcd1 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800cb40:	4603      	mov	r3, r0
 800cb42:	781a      	ldrb	r2, [r3, #0]
 800cb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb46:	551a      	strb	r2, [r3, r4]
		debouncedState[x] = 0xFF;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	3320      	adds	r3, #32
 800cb4c:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cb50:	4611      	mov	r1, r2
 800cb52:	4618      	mov	r0, r3
 800cb54:	f7ff fcc5 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	22ff      	movs	r2, #255	; 0xff
 800cb5c:	701a      	strb	r2, [r3, #0]
		state[x][index[x]] = ui_spi_in[x+offset];
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	3314      	adds	r3, #20
 800cb62:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cb66:	4611      	mov	r1, r2
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f000 fb47 	bl	800d1fc <_ZNSt6vectorIS_IhSaIhEESaIS1_EEixEj>
 800cb6e:	4604      	mov	r4, r0
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	3308      	adds	r3, #8
 800cb74:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cb78:	4611      	mov	r1, r2
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	f7ff fcb1 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800cb80:	4603      	mov	r3, r0
 800cb82:	781b      	ldrb	r3, [r3, #0]
 800cb84:	4619      	mov	r1, r3
 800cb86:	4620      	mov	r0, r4
 800cb88:	f7ff fcab 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800cb8c:	4601      	mov	r1, r0
 800cb8e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cb92:	68fa      	ldr	r2, [r7, #12]
 800cb94:	7812      	ldrb	r2, [r2, #0]
 800cb96:	4413      	add	r3, r2
 800cb98:	4a42      	ldr	r2, [pc, #264]	; (800cca4 <_ZN8Switches6updateEi+0x454>)
 800cb9a:	5cd3      	ldrb	r3, [r2, r3]
 800cb9c:	700b      	strb	r3, [r1, #0]
		for(i = 0; i < numOfStates; i++){
 800cb9e:	2300      	movs	r3, #0
 800cba0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cba4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cba8:	68fa      	ldr	r2, [r7, #12]
 800cbaa:	7892      	ldrb	r2, [r2, #2]
 800cbac:	4293      	cmp	r3, r2
 800cbae:	da23      	bge.n	800cbf8 <_ZN8Switches6updateEi+0x3a8>
			debouncedState[x] &= state[x][i];
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	3314      	adds	r3, #20
 800cbb4:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cbb8:	4611      	mov	r1, r2
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f000 fb1e 	bl	800d1fc <_ZNSt6vectorIS_IhSaIhEESaIS1_EEixEj>
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	4610      	mov	r0, r2
 800cbca:	f7ff fc8a 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	781c      	ldrb	r4, [r3, #0]
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	3320      	adds	r3, #32
 800cbd6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cbda:	4611      	mov	r1, r2
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f7ff fc80 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	781a      	ldrb	r2, [r3, #0]
 800cbe6:	4022      	ands	r2, r4
 800cbe8:	b2d2      	uxtb	r2, r2
 800cbea:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < numOfStates; i++){
 800cbec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cbf0:	3301      	adds	r3, #1
 800cbf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cbf6:	e7d5      	b.n	800cba4 <_ZN8Switches6updateEi+0x354>
		index[x]++;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	3308      	adds	r3, #8
 800cbfc:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cc00:	4611      	mov	r1, r2
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7ff fc6d 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	781a      	ldrb	r2, [r3, #0]
 800cc0c:	3201      	adds	r2, #1
 800cc0e:	b2d2      	uxtb	r2, r2
 800cc10:	701a      	strb	r2, [r3, #0]
		if(index[x] >= numOfStates){
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	3308      	adds	r3, #8
 800cc16:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f7ff fc60 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800cc22:	4603      	mov	r3, r0
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	461a      	mov	r2, r3
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	789b      	ldrb	r3, [r3, #2]
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	bfac      	ite	ge
 800cc30:	2301      	movge	r3, #1
 800cc32:	2300      	movlt	r3, #0
 800cc34:	b2db      	uxtb	r3, r3
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d00a      	beq.n	800cc50 <_ZN8Switches6updateEi+0x400>
			index[x] = 0;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	3308      	adds	r3, #8
 800cc3e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cc42:	4611      	mov	r1, r2
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7ff fc4c 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	701a      	strb	r2, [r3, #0]
		changed[x] = debouncedState[x] ^ lastDebouncedState[x];
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	332c      	adds	r3, #44	; 0x2c
 800cc54:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cc58:	4611      	mov	r1, r2
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f7ff fc41 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800cc60:	4604      	mov	r4, r0
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	3320      	adds	r3, #32
 800cc66:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800cc6a:	4611      	mov	r1, r2
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	f7ff fc38 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800cc72:	4603      	mov	r3, r0
 800cc74:	781a      	ldrb	r2, [r3, #0]
 800cc76:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cc7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc7c:	5ccb      	ldrb	r3, [r1, r3]
 800cc7e:	4053      	eors	r3, r2
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	7023      	strb	r3, [r4, #0]
	for(x = 0; x < numOfRegisters; x++){
 800cc84:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800cc88:	3301      	adds	r3, #1
 800cc8a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800cc8e:	e648      	b.n	800c922 <_ZN8Switches6updateEi+0xd2>
 800cc90:	f8d7 d004 	ldr.w	sp, [r7, #4]
}
 800cc94:	bf00      	nop
 800cc96:	3734      	adds	r7, #52	; 0x34
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc9e:	bf00      	nop
 800cca0:	20008c5c 	.word	0x20008c5c
 800cca4:	20008c58 	.word	0x20008c58

0800cca8 <_ZN8Switches12firstChangedEv>:
	if(change)
		return true;
	else
		return false;
}
uint8_t Switches::firstChanged(void){
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < numOfRegisters; i++){
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	73fb      	strb	r3, [r7, #15]
 800ccb4:	7bfb      	ldrb	r3, [r7, #15]
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	7852      	ldrb	r2, [r2, #1]
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	da2a      	bge.n	800cd14 <_ZN8Switches12firstChangedEv+0x6c>
		for(int j = 0; j < 8; j++){
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	60bb      	str	r3, [r7, #8]
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	2b07      	cmp	r3, #7
 800ccc6:	dc21      	bgt.n	800cd0c <_ZN8Switches12firstChangedEv+0x64>
			if((changed[i] & (1 << j))){
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	332c      	adds	r3, #44	; 0x2c
 800cccc:	7bfa      	ldrb	r2, [r7, #15]
 800ccce:	4611      	mov	r1, r2
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f7ff fc06 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	461a      	mov	r2, r3
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	fa42 f303 	asr.w	r3, r2, r3
 800cce2:	f003 0301 	and.w	r3, r3, #1
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	bf14      	ite	ne
 800ccea:	2301      	movne	r3, #1
 800ccec:	2300      	moveq	r3, #0
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d007      	beq.n	800cd04 <_ZN8Switches12firstChangedEv+0x5c>
				return (i*8)+j;
 800ccf4:	7bfb      	ldrb	r3, [r7, #15]
 800ccf6:	00db      	lsls	r3, r3, #3
 800ccf8:	b2da      	uxtb	r2, r3
 800ccfa:	68bb      	ldr	r3, [r7, #8]
 800ccfc:	b2db      	uxtb	r3, r3
 800ccfe:	4413      	add	r3, r2
 800cd00:	b2db      	uxtb	r3, r3
 800cd02:	e008      	b.n	800cd16 <_ZN8Switches12firstChangedEv+0x6e>
		for(int j = 0; j < 8; j++){
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	3301      	adds	r3, #1
 800cd08:	60bb      	str	r3, [r7, #8]
 800cd0a:	e7da      	b.n	800ccc2 <_ZN8Switches12firstChangedEv+0x1a>
	for(uint8_t i = 0; i < numOfRegisters; i++){
 800cd0c:	7bfb      	ldrb	r3, [r7, #15]
 800cd0e:	3301      	adds	r3, #1
 800cd10:	73fb      	strb	r3, [r7, #15]
 800cd12:	e7cf      	b.n	800ccb4 <_ZN8Switches12firstChangedEv+0xc>
			}
		}
	}
	return -1;
 800cd14:	23ff      	movs	r3, #255	; 0xff
}
 800cd16:	4618      	mov	r0, r3
 800cd18:	3710      	adds	r7, #16
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}

0800cd1e <_ZN8Switches13returnPressedEh>:

uint8_t Switches::returnPressed(uint8_t index){
 800cd1e:	b590      	push	{r4, r7, lr}
 800cd20:	b083      	sub	sp, #12
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]
 800cd26:	460b      	mov	r3, r1
 800cd28:	70fb      	strb	r3, [r7, #3]
	return changed[index] & debouncedState[index];
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	332c      	adds	r3, #44	; 0x2c
 800cd2e:	78fa      	ldrb	r2, [r7, #3]
 800cd30:	4611      	mov	r1, r2
 800cd32:	4618      	mov	r0, r3
 800cd34:	f7ff fbd5 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	781c      	ldrb	r4, [r3, #0]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	3320      	adds	r3, #32
 800cd40:	78fa      	ldrb	r2, [r7, #3]
 800cd42:	4611      	mov	r1, r2
 800cd44:	4618      	mov	r0, r3
 800cd46:	f7ff fbcc 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	4023      	ands	r3, r4
 800cd50:	b2db      	uxtb	r3, r3
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	370c      	adds	r7, #12
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd90      	pop	{r4, r7, pc}

0800cd5a <_ZN8Switches7pressedEv>:

bool Switches::pressed(void){
 800cd5a:	b590      	push	{r4, r7, lr}
 800cd5c:	b085      	sub	sp, #20
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	6078      	str	r0, [r7, #4]
	uint8_t pressed = 0;
 800cd62:	2300      	movs	r3, #0
 800cd64:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < numOfRegisters; i++){
 800cd66:	2300      	movs	r3, #0
 800cd68:	73bb      	strb	r3, [r7, #14]
 800cd6a:	7bbb      	ldrb	r3, [r7, #14]
 800cd6c:	687a      	ldr	r2, [r7, #4]
 800cd6e:	7852      	ldrb	r2, [r2, #1]
 800cd70:	4293      	cmp	r3, r2
 800cd72:	da1d      	bge.n	800cdb0 <_ZN8Switches7pressedEv+0x56>
		pressed |= changed[i] & debouncedState[i];
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	332c      	adds	r3, #44	; 0x2c
 800cd78:	7bba      	ldrb	r2, [r7, #14]
 800cd7a:	4611      	mov	r1, r2
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	f7ff fbb0 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800cd82:	4603      	mov	r3, r0
 800cd84:	781c      	ldrb	r4, [r3, #0]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	3320      	adds	r3, #32
 800cd8a:	7bba      	ldrb	r2, [r7, #14]
 800cd8c:	4611      	mov	r1, r2
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7ff fba7 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800cd94:	4603      	mov	r3, r0
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	4023      	ands	r3, r4
 800cd9a:	b2db      	uxtb	r3, r3
 800cd9c:	b25a      	sxtb	r2, r3
 800cd9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cda2:	4313      	orrs	r3, r2
 800cda4:	b25b      	sxtb	r3, r3
 800cda6:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < numOfRegisters; i++){
 800cda8:	7bbb      	ldrb	r3, [r7, #14]
 800cdaa:	3301      	adds	r3, #1
 800cdac:	73bb      	strb	r3, [r7, #14]
 800cdae:	e7dc      	b.n	800cd6a <_ZN8Switches7pressedEv+0x10>
	}
	if(pressed != 0)
 800cdb0:	7bfb      	ldrb	r3, [r7, #15]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d001      	beq.n	800cdba <_ZN8Switches7pressedEv+0x60>
		return true;
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e000      	b.n	800cdbc <_ZN8Switches7pressedEv+0x62>
	else
		return false;
 800cdba:	2300      	movs	r3, #0
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3714      	adds	r7, #20
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd90      	pop	{r4, r7, pc}

0800cdc4 <_ZN8Switches8releasedEv>:

bool Switches::released(void){
 800cdc4:	b590      	push	{r4, r7, lr}
 800cdc6:	b085      	sub	sp, #20
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
	uint8_t released = 0;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < numOfRegisters; i++){
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	73bb      	strb	r3, [r7, #14]
 800cdd4:	7bbb      	ldrb	r3, [r7, #14]
 800cdd6:	687a      	ldr	r2, [r7, #4]
 800cdd8:	7852      	ldrb	r2, [r2, #1]
 800cdda:	4293      	cmp	r3, r2
 800cddc:	da1e      	bge.n	800ce1c <_ZN8Switches8releasedEv+0x58>
		released |= changed[i] & ~(debouncedState[i]);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	332c      	adds	r3, #44	; 0x2c
 800cde2:	7bba      	ldrb	r2, [r7, #14]
 800cde4:	4611      	mov	r1, r2
 800cde6:	4618      	mov	r0, r3
 800cde8:	f7ff fb7b 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800cdec:	4603      	mov	r3, r0
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	461c      	mov	r4, r3
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	3320      	adds	r3, #32
 800cdf6:	7bba      	ldrb	r2, [r7, #14]
 800cdf8:	4611      	mov	r1, r2
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7ff fb71 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800ce00:	4603      	mov	r3, r0
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	43db      	mvns	r3, r3
 800ce06:	4023      	ands	r3, r4
 800ce08:	b25a      	sxtb	r2, r3
 800ce0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce0e:	4313      	orrs	r3, r2
 800ce10:	b25b      	sxtb	r3, r3
 800ce12:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < numOfRegisters; i++){
 800ce14:	7bbb      	ldrb	r3, [r7, #14]
 800ce16:	3301      	adds	r3, #1
 800ce18:	73bb      	strb	r3, [r7, #14]
 800ce1a:	e7db      	b.n	800cdd4 <_ZN8Switches8releasedEv+0x10>
	}
	if(released)
 800ce1c:	7bfb      	ldrb	r3, [r7, #15]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d001      	beq.n	800ce26 <_ZN8Switches8releasedEv+0x62>
		return true;
 800ce22:	2301      	movs	r3, #1
 800ce24:	e000      	b.n	800ce28 <_ZN8Switches8releasedEv+0x64>
	else
		return false;
 800ce26:	2300      	movs	r3, #0
}
 800ce28:	4618      	mov	r0, r3
 800ce2a:	3714      	adds	r7, #20
 800ce2c:	46bd      	mov	sp, r7
 800ce2e:	bd90      	pop	{r4, r7, pc}

0800ce30 <_ZN8Switches6setLedEi8PWM_MODE>:
void Switches::currentState(uint8_t* state){
	for(uint8_t i = 0; i < numOfRegisters; i++){
		*(state+i) = debouncedState[i];
	}
}
void Switches::setLed(int n, PWM_MODE pwm){
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b084      	sub	sp, #16
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	60b9      	str	r1, [r7, #8]
 800ce3a:	4613      	mov	r3, r2
 800ce3c:	71fb      	strb	r3, [r7, #7]
	ledPWM[n] = pwm;
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	3350      	adds	r3, #80	; 0x50
 800ce42:	68ba      	ldr	r2, [r7, #8]
 800ce44:	4611      	mov	r1, r2
 800ce46:	4618      	mov	r0, r3
 800ce48:	f7ff fb4b 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	79fb      	ldrb	r3, [r7, #7]
 800ce50:	7013      	strb	r3, [r2, #0]
}
 800ce52:	bf00      	nop
 800ce54:	3710      	adds	r7, #16
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}

0800ce5a <_ZN8Switches6setLedEi8PWM_MODE10PULSE_MODE>:
void Switches::setLed(int n, PWM_MODE pwm, PULSE_MODE pulse){
 800ce5a:	b580      	push	{r7, lr}
 800ce5c:	b084      	sub	sp, #16
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	60f8      	str	r0, [r7, #12]
 800ce62:	60b9      	str	r1, [r7, #8]
 800ce64:	4611      	mov	r1, r2
 800ce66:	461a      	mov	r2, r3
 800ce68:	460b      	mov	r3, r1
 800ce6a:	71fb      	strb	r3, [r7, #7]
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	71bb      	strb	r3, [r7, #6]
	ledPWM[n] = pwm;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	3350      	adds	r3, #80	; 0x50
 800ce74:	68ba      	ldr	r2, [r7, #8]
 800ce76:	4611      	mov	r1, r2
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7ff fb32 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800ce7e:	4602      	mov	r2, r0
 800ce80:	79fb      	ldrb	r3, [r7, #7]
 800ce82:	7013      	strb	r3, [r2, #0]
	ledPulse[n] = pulse;
 800ce84:	68fb      	ldr	r3, [r7, #12]
 800ce86:	335c      	adds	r3, #92	; 0x5c
 800ce88:	68ba      	ldr	r2, [r7, #8]
 800ce8a:	4611      	mov	r1, r2
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7ff fb28 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800ce92:	4602      	mov	r2, r0
 800ce94:	79bb      	ldrb	r3, [r7, #6]
 800ce96:	7013      	strb	r3, [r2, #0]
}
 800ce98:	bf00      	nop
 800ce9a:	3710      	adds	r7, #16
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <_ZN8Switches10setLedByteEih8PWM_MODE10PULSE_MODE>:
				ledPWM[step] = pwm;
			}
		}
	}
}
void Switches::setLedByte(int offset,uint8_t mask, PWM_MODE pwm, PULSE_MODE pulse){
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b086      	sub	sp, #24
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	4611      	mov	r1, r2
 800ceac:	461a      	mov	r2, r3
 800ceae:	460b      	mov	r3, r1
 800ceb0:	71fb      	strb	r3, [r7, #7]
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	71bb      	strb	r3, [r7, #6]
		for(int j = 0; j < 8; j++){
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	617b      	str	r3, [r7, #20]
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	2b07      	cmp	r3, #7
 800cebe:	dc25      	bgt.n	800cf0c <_ZN8Switches10setLedByteEih8PWM_MODE10PULSE_MODE+0x6c>
			if(mask & (1 << j)){
 800cec0:	79fa      	ldrb	r2, [r7, #7]
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	fa42 f303 	asr.w	r3, r2, r3
 800cec8:	f003 0301 	and.w	r3, r3, #1
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d019      	beq.n	800cf04 <_ZN8Switches10setLedByteEih8PWM_MODE10PULSE_MODE+0x64>
				int step = (offset)*8+j;
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	00da      	lsls	r2, r3, #3
 800ced4:	697b      	ldr	r3, [r7, #20]
 800ced6:	4413      	add	r3, r2
 800ced8:	613b      	str	r3, [r7, #16]
				ledPulse[step] = pulse;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	335c      	adds	r3, #92	; 0x5c
 800cede:	693a      	ldr	r2, [r7, #16]
 800cee0:	4611      	mov	r1, r2
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7ff fafd 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800cee8:	4602      	mov	r2, r0
 800ceea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ceee:	7013      	strb	r3, [r2, #0]
				ledPWM[step] = pwm;
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	3350      	adds	r3, #80	; 0x50
 800cef4:	693a      	ldr	r2, [r7, #16]
 800cef6:	4611      	mov	r1, r2
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7ff faf2 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800cefe:	4602      	mov	r2, r0
 800cf00:	79bb      	ldrb	r3, [r7, #6]
 800cf02:	7013      	strb	r3, [r2, #0]
		for(int j = 0; j < 8; j++){
 800cf04:	697b      	ldr	r3, [r7, #20]
 800cf06:	3301      	adds	r3, #1
 800cf08:	617b      	str	r3, [r7, #20]
 800cf0a:	e7d6      	b.n	800ceba <_ZN8Switches10setLedByteEih8PWM_MODE10PULSE_MODE+0x1a>
			}
		}
}
 800cf0c:	bf00      	nop
 800cf0e:	3718      	adds	r7, #24
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}

0800cf14 <_ZN8Switches9setLedAllE8PWM_MODE10PULSE_MODE>:
	for(int i = 0; i < numOfRegisters*8; i++){
		ledPulse[i] = pulse;
		ledPWM[i] = FULL;
	}
}
void Switches::setLedAll(PWM_MODE pwm, PULSE_MODE pulse){
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	70fb      	strb	r3, [r7, #3]
 800cf20:	4613      	mov	r3, r2
 800cf22:	70bb      	strb	r3, [r7, #2]
	for(int i = 0; i < numOfRegisters*8; i++){
 800cf24:	2300      	movs	r3, #0
 800cf26:	60fb      	str	r3, [r7, #12]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	785b      	ldrb	r3, [r3, #1]
 800cf2c:	00da      	lsls	r2, r3, #3
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	dd17      	ble.n	800cf64 <_ZN8Switches9setLedAllE8PWM_MODE10PULSE_MODE+0x50>
		ledPWM[i] = pwm;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	3350      	adds	r3, #80	; 0x50
 800cf38:	68fa      	ldr	r2, [r7, #12]
 800cf3a:	4611      	mov	r1, r2
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	f7ff fad0 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800cf42:	4602      	mov	r2, r0
 800cf44:	78fb      	ldrb	r3, [r7, #3]
 800cf46:	7013      	strb	r3, [r2, #0]
		ledPulse[i] = pulse;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	335c      	adds	r3, #92	; 0x5c
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	4611      	mov	r1, r2
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7ff fac6 	bl	800c4e2 <_ZNSt6vectorIhSaIhEEixEj>
 800cf56:	4602      	mov	r2, r0
 800cf58:	78bb      	ldrb	r3, [r7, #2]
 800cf5a:	7013      	strb	r3, [r2, #0]
	for(int i = 0; i < numOfRegisters*8; i++){
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	3301      	adds	r3, #1
 800cf60:	60fb      	str	r3, [r7, #12]
 800cf62:	e7e1      	b.n	800cf28 <_ZN8Switches9setLedAllE8PWM_MODE10PULSE_MODE+0x14>
	}
}
 800cf64:	bf00      	nop
 800cf66:	3710      	adds	r7, #16
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <_ZNSt6vectorIhSaIhEEC1Ev>:
      vector()
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	4618      	mov	r0, r3
 800cf78:	f000 f95f 	bl	800d23a <_ZNSt12_Vector_baseIhSaIhEEC1Ev>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3708      	adds	r7, #8
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}

0800cf86 <_ZNSt6vectorIhSaIhEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800cf86:	b5b0      	push	{r4, r5, r7, lr}
 800cf88:	b082      	sub	sp, #8
 800cf8a:	af00      	add	r7, sp, #0
 800cf8c:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681c      	ldr	r4, [r3, #0]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	4618      	mov	r0, r3
 800cf9a:	f000 f97b 	bl	800d294 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800cf9e:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800cfa0:	461a      	mov	r2, r3
 800cfa2:	4629      	mov	r1, r5
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	f000 f980 	bl	800d2aa <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	4618      	mov	r0, r3
 800cfae:	f000 f951 	bl	800d254 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	e005      	b.n	800cfc2 <_ZNSt6vectorIhSaIhEED1Ev+0x3c>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f000 f94b 	bl	800d254 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800cfbe:	f002 f92f 	bl	800f220 <__cxa_end_cleanup>
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3708      	adds	r7, #8
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bdb0      	pop	{r4, r5, r7, pc}

0800cfca <_ZNSt6vectorIS_IhSaIhEESaIS1_EEC1Ev>:
      vector()
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b082      	sub	sp, #8
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
      : _Base() { }
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f000 f982 	bl	800d2de <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EEC1Ev>
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3708      	adds	r7, #8
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800cfe4:	b5b0      	push	{r4, r5, r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	681c      	ldr	r4, [r3, #0]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	4618      	mov	r0, r3
 800cff8:	f000 f9a4 	bl	800d344 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 800cffc:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800cffe:	461a      	mov	r2, r3
 800d000:	4629      	mov	r1, r5
 800d002:	4620      	mov	r0, r4
 800d004:	f000 f9a9 	bl	800d35a <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	4618      	mov	r0, r3
 800d00c:	f000 f974 	bl	800d2f8 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EED1Ev>
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	e005      	b.n	800d020 <_ZNSt6vectorIS_IhSaIhEESaIS1_EED1Ev+0x3c>
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	4618      	mov	r0, r3
 800d018:	f000 f96e 	bl	800d2f8 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EED1Ev>
 800d01c:	f002 f900 	bl	800f220 <__cxa_end_cleanup>
 800d020:	4618      	mov	r0, r3
 800d022:	3708      	adds	r7, #8
 800d024:	46bd      	mov	sp, r7
 800d026:	bdb0      	pop	{r4, r5, r7, pc}

0800d028 <_ZNSaIhEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 800d028:	b580      	push	{r7, lr}
 800d02a:	b082      	sub	sp, #8
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 f9a0 	bl	800d376 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	4618      	mov	r0, r3
 800d03a:	3708      	adds	r7, #8
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}

0800d040 <_ZNSaIhED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 800d040:	b580      	push	{r7, lr}
 800d042:	b082      	sub	sp, #8
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 f99f 	bl	800d38c <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	4618      	mov	r0, r3
 800d052:	3708      	adds	r7, #8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <_ZNSt6vectorIhSaIhEEC1EjRKhRKS0_>:
      vector(size_type __n, const value_type& __value = value_type(),
 800d058:	b580      	push	{r7, lr}
 800d05a:	b084      	sub	sp, #16
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	60f8      	str	r0, [r7, #12]
 800d060:	60b9      	str	r1, [r7, #8]
 800d062:	607a      	str	r2, [r7, #4]
 800d064:	603b      	str	r3, [r7, #0]
      : _Base(__n, __a)
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	683a      	ldr	r2, [r7, #0]
 800d06a:	68b9      	ldr	r1, [r7, #8]
 800d06c:	4618      	mov	r0, r3
 800d06e:	f000 f998 	bl	800d3a2 <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>
      { _M_fill_initialize(__n, __value); }
 800d072:	687a      	ldr	r2, [r7, #4]
 800d074:	68b9      	ldr	r1, [r7, #8]
 800d076:	68f8      	ldr	r0, [r7, #12]
 800d078:	f000 f9ae 	bl	800d3d8 <_ZNSt6vectorIhSaIhEE18_M_fill_initializeEjRKh>
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	e005      	b.n	800d08c <_ZNSt6vectorIhSaIhEEC1EjRKhRKS0_+0x34>
      : _Base(__n, __a)
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	4618      	mov	r0, r3
 800d084:	f000 f8e6 	bl	800d254 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800d088:	f002 f8ca 	bl	800f220 <__cxa_end_cleanup>
      { _M_fill_initialize(__n, __value); }
 800d08c:	4618      	mov	r0, r3
 800d08e:	3710      	adds	r7, #16
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <_ZNSt6vectorIhSaIhEEC1ERKS1_>:
      vector(const vector& __x)
 800d094:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d096:	b083      	sub	sp, #12
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800d09e:	687c      	ldr	r4, [r7, #4]
 800d0a0:	6838      	ldr	r0, [r7, #0]
 800d0a2:	f000 f9b2 	bl	800d40a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800d0a6:	4605      	mov	r5, r0
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	f000 f9c8 	bl	800d440 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800d0b0:	4603      	mov	r3, r0
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f000 f9b9 	bl	800d42a <_ZN9__gnu_cxx14__alloc_traitsISaIhEE17_S_select_on_copyERKS1_>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	4629      	mov	r1, r5
 800d0be:	4620      	mov	r0, r4
 800d0c0:	f000 f96f 	bl	800d3a2 <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800d0c4:	6838      	ldr	r0, [r7, #0]
 800d0c6:	f000 f9c6 	bl	800d456 <_ZNKSt6vectorIhSaIhEE5beginEv>
 800d0ca:	4605      	mov	r5, r0
 800d0cc:	6838      	ldr	r0, [r7, #0]
 800d0ce:	f000 f9d6 	bl	800d47e <_ZNKSt6vectorIhSaIhEE3endEv>
 800d0d2:	4606      	mov	r6, r0
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f000 f8da 	bl	800d294 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800d0e0:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 800d0e2:	4622      	mov	r2, r4
 800d0e4:	4631      	mov	r1, r6
 800d0e6:	4628      	mov	r0, r5
 800d0e8:	f000 f9dd 	bl	800d4a6 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
 800d0ec:	4602      	mov	r2, r0
      { this->_M_impl._M_finish =
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	605a      	str	r2, [r3, #4]
      }
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	e005      	b.n	800d102 <_ZNSt6vectorIhSaIhEEC1ERKS1_+0x6e>
        _Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f000 f8ab 	bl	800d254 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 800d0fe:	f002 f88f 	bl	800f220 <__cxa_end_cleanup>
      }
 800d102:	4618      	mov	r0, r3
 800d104:	370c      	adds	r7, #12
 800d106:	46bd      	mov	sp, r7
 800d108:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d10a <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEjS1_>:
      resize(size_type __new_size, value_type __x = value_type())
 800d10a:	b590      	push	{r4, r7, lr}
 800d10c:	b085      	sub	sp, #20
 800d10e:	af00      	add	r7, sp, #0
 800d110:	60f8      	str	r0, [r7, #12]
 800d112:	60b9      	str	r1, [r7, #8]
 800d114:	607a      	str	r2, [r7, #4]
	if (__new_size > size())
 800d116:	68f8      	ldr	r0, [r7, #12]
 800d118:	f000 f9d6 	bl	800d4c8 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 800d11c:	4602      	mov	r2, r0
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	429a      	cmp	r2, r3
 800d122:	bf34      	ite	cc
 800d124:	2301      	movcc	r3, #1
 800d126:	2300      	movcs	r3, #0
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00f      	beq.n	800d14e <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEjS1_+0x44>
	  insert(end(), __new_size - size(), __x);
 800d12e:	68f8      	ldr	r0, [r7, #12]
 800d130:	f000 f9e0 	bl	800d4f4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE3endEv>
 800d134:	4604      	mov	r4, r0
 800d136:	68f8      	ldr	r0, [r7, #12]
 800d138:	f000 f9c6 	bl	800d4c8 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 800d13c:	4602      	mov	r2, r0
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	1a9a      	subs	r2, r3, r2
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	4621      	mov	r1, r4
 800d146:	68f8      	ldr	r0, [r7, #12]
 800d148:	f000 f9e5 	bl	800d516 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_>
      }
 800d14c:	e017      	b.n	800d17e <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEjS1_+0x74>
	else if (__new_size < size())
 800d14e:	68f8      	ldr	r0, [r7, #12]
 800d150:	f000 f9ba 	bl	800d4c8 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 800d154:	4602      	mov	r2, r0
 800d156:	68bb      	ldr	r3, [r7, #8]
 800d158:	429a      	cmp	r2, r3
 800d15a:	bf8c      	ite	hi
 800d15c:	2301      	movhi	r3, #1
 800d15e:	2300      	movls	r3, #0
 800d160:	b2db      	uxtb	r3, r3
 800d162:	2b00      	cmp	r3, #0
 800d164:	d00b      	beq.n	800d17e <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6resizeEjS1_+0x74>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	6819      	ldr	r1, [r3, #0]
 800d16a:	68ba      	ldr	r2, [r7, #8]
 800d16c:	4613      	mov	r3, r2
 800d16e:	005b      	lsls	r3, r3, #1
 800d170:	4413      	add	r3, r2
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	440b      	add	r3, r1
 800d176:	4619      	mov	r1, r3
 800d178:	68f8      	ldr	r0, [r7, #12]
 800d17a:	f000 f9dd 	bl	800d538 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE15_M_erase_at_endEPS1_>
      }
 800d17e:	bf00      	nop
 800d180:	3714      	adds	r7, #20
 800d182:	46bd      	mov	sp, r7
 800d184:	bd90      	pop	{r4, r7, pc}

0800d186 <_ZNSt6vectorIhSaIhEE6resizeEjh>:
      resize(size_type __new_size, value_type __x = value_type())
 800d186:	b590      	push	{r4, r7, lr}
 800d188:	b085      	sub	sp, #20
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	60f8      	str	r0, [r7, #12]
 800d18e:	60b9      	str	r1, [r7, #8]
 800d190:	4613      	mov	r3, r2
 800d192:	71fb      	strb	r3, [r7, #7]
	if (__new_size > size())
 800d194:	68f8      	ldr	r0, [r7, #12]
 800d196:	f000 f938 	bl	800d40a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800d19a:	4602      	mov	r2, r0
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	429a      	cmp	r2, r3
 800d1a0:	bf34      	ite	cc
 800d1a2:	2301      	movcc	r3, #1
 800d1a4:	2300      	movcs	r3, #0
 800d1a6:	b2db      	uxtb	r3, r3
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00f      	beq.n	800d1cc <_ZNSt6vectorIhSaIhEE6resizeEjh+0x46>
	  insert(end(), __new_size - size(), __x);
 800d1ac:	68f8      	ldr	r0, [r7, #12]
 800d1ae:	f000 f9db 	bl	800d568 <_ZNSt6vectorIhSaIhEE3endEv>
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	68f8      	ldr	r0, [r7, #12]
 800d1b6:	f000 f928 	bl	800d40a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800d1ba:	4602      	mov	r2, r0
 800d1bc:	68bb      	ldr	r3, [r7, #8]
 800d1be:	1a9a      	subs	r2, r3, r2
 800d1c0:	1dfb      	adds	r3, r7, #7
 800d1c2:	4621      	mov	r1, r4
 800d1c4:	68f8      	ldr	r0, [r7, #12]
 800d1c6:	f000 f9e0 	bl	800d58a <_ZNSt6vectorIhSaIhEE6insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh>
      }
 800d1ca:	e013      	b.n	800d1f4 <_ZNSt6vectorIhSaIhEE6resizeEjh+0x6e>
	else if (__new_size < size())
 800d1cc:	68f8      	ldr	r0, [r7, #12]
 800d1ce:	f000 f91c 	bl	800d40a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800d1d2:	4602      	mov	r2, r0
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	429a      	cmp	r2, r3
 800d1d8:	bf8c      	ite	hi
 800d1da:	2301      	movhi	r3, #1
 800d1dc:	2300      	movls	r3, #0
 800d1de:	b2db      	uxtb	r3, r3
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d007      	beq.n	800d1f4 <_ZNSt6vectorIhSaIhEE6resizeEjh+0x6e>
	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681a      	ldr	r2, [r3, #0]
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	4413      	add	r3, r2
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	68f8      	ldr	r0, [r7, #12]
 800d1f0:	f000 f9dc 	bl	800d5ac <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>
      }
 800d1f4:	bf00      	nop
 800d1f6:	3714      	adds	r7, #20
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	bd90      	pop	{r4, r7, pc}

0800d1fc <_ZNSt6vectorIS_IhSaIhEESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800d1fc:	b480      	push	{r7}
 800d1fe:	b083      	sub	sp, #12
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
      { return *(this->_M_impl._M_start + __n); }
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	6819      	ldr	r1, [r3, #0]
 800d20a:	683a      	ldr	r2, [r7, #0]
 800d20c:	4613      	mov	r3, r2
 800d20e:	005b      	lsls	r3, r3, #1
 800d210:	4413      	add	r3, r2
 800d212:	009b      	lsls	r3, r3, #2
 800d214:	440b      	add	r3, r1
 800d216:	4618      	mov	r0, r3
 800d218:	370c      	adds	r7, #12
 800d21a:	46bd      	mov	sp, r7
 800d21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d220:	4770      	bx	lr

0800d222 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
      struct _Vector_impl 
 800d222:	b580      	push	{r7, lr}
 800d224:	b082      	sub	sp, #8
 800d226:	af00      	add	r7, sp, #0
 800d228:	6078      	str	r0, [r7, #4]
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f7ff ff08 	bl	800d040 <_ZNSaIhED1Ev>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	4618      	mov	r0, r3
 800d234:	3708      	adds	r7, #8
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}

0800d23a <_ZNSt12_Vector_baseIhSaIhEEC1Ev>:
      _Vector_base()
 800d23a:	b580      	push	{r7, lr}
 800d23c:	b082      	sub	sp, #8
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	4618      	mov	r0, r3
 800d246:	f000 f9c9 	bl	800d5dc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	4618      	mov	r0, r3
 800d24e:	3708      	adds	r7, #8
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800d254:	b580      	push	{r7, lr}
 800d256:	b082      	sub	sp, #8
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6819      	ldr	r1, [r3, #0]
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 800d264:	461a      	mov	r2, r3
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	1ad3      	subs	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800d26c:	461a      	mov	r2, r3
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f000 f9c9 	bl	800d606 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		      - this->_M_impl._M_start); }
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	4618      	mov	r0, r3
 800d278:	f7ff ffd3 	bl	800d222 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	e005      	b.n	800d28c <_ZNSt12_Vector_baseIhSaIhEED1Ev+0x38>
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	4618      	mov	r0, r3
 800d284:	f7ff ffcd 	bl	800d222 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 800d288:	f001 ffca 	bl	800f220 <__cxa_end_cleanup>
 800d28c:	4618      	mov	r0, r3
 800d28e:	3708      	adds	r7, #8
 800d290:	46bd      	mov	sp, r7
 800d292:	bd80      	pop	{r7, pc}

0800d294 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800d294:	b480      	push	{r7}
 800d296:	b083      	sub	sp, #12
 800d298:	af00      	add	r7, sp, #0
 800d29a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	370c      	adds	r7, #12
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr

0800d2aa <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b084      	sub	sp, #16
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	60f8      	str	r0, [r7, #12]
 800d2b2:	60b9      	str	r1, [r7, #8]
 800d2b4:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 800d2b6:	68b9      	ldr	r1, [r7, #8]
 800d2b8:	68f8      	ldr	r0, [r7, #12]
 800d2ba:	f000 f9b7 	bl	800d62c <_ZSt8_DestroyIPhEvT_S1_>
    }
 800d2be:	bf00      	nop
 800d2c0:	3710      	adds	r7, #16
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}

0800d2c6 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl 
 800d2c6:	b580      	push	{r7, lr}
 800d2c8:	b082      	sub	sp, #8
 800d2ca:	af00      	add	r7, sp, #0
 800d2cc:	6078      	str	r0, [r7, #4]
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 f9ce 	bl	800d670 <_ZNSaISt6vectorIhSaIhEEED1Ev>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3708      	adds	r7, #8
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}

0800d2de <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EEC1Ev>:
      _Vector_base()
 800d2de:	b580      	push	{r7, lr}
 800d2e0:	b082      	sub	sp, #8
 800d2e2:	af00      	add	r7, sp, #0
 800d2e4:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f000 f9ac 	bl	800d646 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implC1Ev>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3708      	adds	r7, #8
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b082      	sub	sp, #8
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	6819      	ldr	r1, [r3, #0]
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 800d308:	461a      	mov	r2, r3
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	1ad3      	subs	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800d310:	109b      	asrs	r3, r3, #2
 800d312:	4a0b      	ldr	r2, [pc, #44]	; (800d340 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EED1Ev+0x48>)
 800d314:	fb02 f303 	mul.w	r3, r2, r3
 800d318:	461a      	mov	r2, r3
 800d31a:	6878      	ldr	r0, [r7, #4]
 800d31c:	f000 f9b4 	bl	800d688 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j>
		      - this->_M_impl._M_start); }
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	4618      	mov	r0, r3
 800d324:	f7ff ffcf 	bl	800d2c6 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implD1Ev>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	e005      	b.n	800d338 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EED1Ev+0x40>
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	4618      	mov	r0, r3
 800d330:	f7ff ffc9 	bl	800d2c6 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implD1Ev>
 800d334:	f001 ff74 	bl	800f220 <__cxa_end_cleanup>
 800d338:	4618      	mov	r0, r3
 800d33a:	3708      	adds	r7, #8
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	aaaaaaab 	.word	0xaaaaaaab

0800d344 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800d344:	b480      	push	{r7}
 800d346:	b083      	sub	sp, #12
 800d348:	af00      	add	r7, sp, #0
 800d34a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	4618      	mov	r0, r3
 800d350:	370c      	adds	r7, #12
 800d352:	46bd      	mov	sp, r7
 800d354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d358:	4770      	bx	lr

0800d35a <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800d35a:	b580      	push	{r7, lr}
 800d35c:	b084      	sub	sp, #16
 800d35e:	af00      	add	r7, sp, #0
 800d360:	60f8      	str	r0, [r7, #12]
 800d362:	60b9      	str	r1, [r7, #8]
 800d364:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800d366:	68b9      	ldr	r1, [r7, #8]
 800d368:	68f8      	ldr	r0, [r7, #12]
 800d36a:	f000 f9a0 	bl	800d6ae <_ZSt8_DestroyIPSt6vectorIhSaIhEEEvT_S4_>
    }
 800d36e:	bf00      	nop
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d376:	b480      	push	{r7}
 800d378:	b083      	sub	sp, #12
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	4618      	mov	r0, r3
 800d382:	370c      	adds	r7, #12
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr

0800d38c <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800d38c:	b480      	push	{r7}
 800d38e:	b083      	sub	sp, #12
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	4618      	mov	r0, r3
 800d398:	370c      	adds	r7, #12
 800d39a:	46bd      	mov	sp, r7
 800d39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a0:	4770      	bx	lr

0800d3a2 <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 800d3a2:	b580      	push	{r7, lr}
 800d3a4:	b084      	sub	sp, #16
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	60f8      	str	r0, [r7, #12]
 800d3aa:	60b9      	str	r1, [r7, #8]
 800d3ac:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	6879      	ldr	r1, [r7, #4]
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	f000 f988 	bl	800d6c8 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 800d3b8:	68b9      	ldr	r1, [r7, #8]
 800d3ba:	68f8      	ldr	r0, [r7, #12]
 800d3bc:	f000 f99b 	bl	800d6f6 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	e005      	b.n	800d3d0 <_ZNSt12_Vector_baseIhSaIhEEC1EjRKS0_+0x2e>
      : _M_impl(__a)
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7ff ff2b 	bl	800d222 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 800d3cc:	f001 ff28 	bl	800f220 <__cxa_end_cleanup>
      { _M_create_storage(__n); }
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	3710      	adds	r7, #16
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	bd80      	pop	{r7, pc}

0800d3d8 <_ZNSt6vectorIhSaIhEE18_M_fill_initializeEjRKh>:
	}

      // Called by the first initialize_dispatch above and by the
      // vector(n,value,a) constructor.
      void
      _M_fill_initialize(size_type __n, const value_type& __value)
 800d3d8:	b590      	push	{r4, r7, lr}
 800d3da:	b085      	sub	sp, #20
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	60f8      	str	r0, [r7, #12]
 800d3e0:	60b9      	str	r1, [r7, #8]
 800d3e2:	607a      	str	r2, [r7, #4]
      {
	this->_M_impl._M_finish =
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7ff ff52 	bl	800d294 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800d3f0:	4603      	mov	r3, r0
	  std::__uninitialized_fill_n_a(this->_M_impl._M_start, __n, __value,
 800d3f2:	687a      	ldr	r2, [r7, #4]
 800d3f4:	68b9      	ldr	r1, [r7, #8]
 800d3f6:	4620      	mov	r0, r4
 800d3f8:	f000 f997 	bl	800d72a <_ZSt24__uninitialized_fill_n_aIPhjhhET_S1_T0_RKT1_RSaIT2_E>
 800d3fc:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	605a      	str	r2, [r3, #4]
      }
 800d402:	bf00      	nop
 800d404:	3714      	adds	r7, #20
 800d406:	46bd      	mov	sp, r7
 800d408:	bd90      	pop	{r4, r7, pc}

0800d40a <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800d40a:	b480      	push	{r7}
 800d40c:	b083      	sub	sp, #12
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	461a      	mov	r2, r3
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	1ad3      	subs	r3, r2, r3
 800d41e:	4618      	mov	r0, r3
 800d420:	370c      	adds	r7, #12
 800d422:	46bd      	mov	sp, r7
 800d424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d428:	4770      	bx	lr

0800d42a <_ZN9__gnu_cxx14__alloc_traitsISaIhEE17_S_select_on_copyERKS1_>:
    { __a.destroy(__p); }

    static size_type max_size(const _Alloc& __a)
    { return __a.max_size(); }

    static const _Alloc& _S_select_on_copy(const _Alloc& __a) { return __a; }
 800d42a:	b480      	push	{r7}
 800d42c:	b083      	sub	sp, #12
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	4618      	mov	r0, r3
 800d436:	370c      	adds	r7, #12
 800d438:	46bd      	mov	sp, r7
 800d43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43e:	4770      	bx	lr

0800d440 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800d440:	b480      	push	{r7}
 800d442:	b083      	sub	sp, #12
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	4618      	mov	r0, r3
 800d44c:	370c      	adds	r7, #12
 800d44e:	46bd      	mov	sp, r7
 800d450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d454:	4770      	bx	lr

0800d456 <_ZNKSt6vectorIhSaIhEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800d456:	b580      	push	{r7, lr}
 800d458:	b084      	sub	sp, #16
 800d45a:	af00      	add	r7, sp, #0
 800d45c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	60fb      	str	r3, [r7, #12]
 800d464:	f107 020c 	add.w	r2, r7, #12
 800d468:	f107 0308 	add.w	r3, r7, #8
 800d46c:	4611      	mov	r1, r2
 800d46e:	4618      	mov	r0, r3
 800d470:	f000 f96c 	bl	800d74c <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	4618      	mov	r0, r3
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}

0800d47e <_ZNKSt6vectorIhSaIhEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 800d47e:	b580      	push	{r7, lr}
 800d480:	b084      	sub	sp, #16
 800d482:	af00      	add	r7, sp, #0
 800d484:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	685b      	ldr	r3, [r3, #4]
 800d48a:	60fb      	str	r3, [r7, #12]
 800d48c:	f107 020c 	add.w	r2, r7, #12
 800d490:	f107 0308 	add.w	r3, r7, #8
 800d494:	4611      	mov	r1, r2
 800d496:	4618      	mov	r0, r3
 800d498:	f000 f958 	bl	800d74c <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>
 800d49c:	68bb      	ldr	r3, [r7, #8]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}

0800d4a6 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800d4a6:	b580      	push	{r7, lr}
 800d4a8:	b084      	sub	sp, #16
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	60f8      	str	r0, [r7, #12]
 800d4ae:	60b9      	str	r1, [r7, #8]
 800d4b0:	607a      	str	r2, [r7, #4]
 800d4b2:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 800d4b4:	687a      	ldr	r2, [r7, #4]
 800d4b6:	68b9      	ldr	r1, [r7, #8]
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f000 f957 	bl	800d76c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3710      	adds	r7, #16
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	1ad3      	subs	r3, r2, r3
 800d4dc:	109b      	asrs	r3, r3, #2
 800d4de:	4a04      	ldr	r2, [pc, #16]	; (800d4f0 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv+0x28>)
 800d4e0:	fb02 f303 	mul.w	r3, r2, r3
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	370c      	adds	r7, #12
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr
 800d4f0:	aaaaaaab 	.word	0xaaaaaaab

0800d4f4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	1d1a      	adds	r2, r3, #4
 800d500:	f107 030c 	add.w	r3, r7, #12
 800d504:	4611      	mov	r1, r2
 800d506:	4618      	mov	r0, r3
 800d508:	f000 f942 	bl	800d790 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEC1ERKS4_>
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	4618      	mov	r0, r3
 800d510:	3710      	adds	r7, #16
 800d512:	46bd      	mov	sp, r7
 800d514:	bd80      	pop	{r7, pc}

0800d516 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE6insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_>:
      insert(iterator __position, size_type __n, const value_type& __x)
 800d516:	b580      	push	{r7, lr}
 800d518:	b084      	sub	sp, #16
 800d51a:	af00      	add	r7, sp, #0
 800d51c:	60f8      	str	r0, [r7, #12]
 800d51e:	60b9      	str	r1, [r7, #8]
 800d520:	607a      	str	r2, [r7, #4]
 800d522:	603b      	str	r3, [r7, #0]
      { _M_fill_insert(__position, __n, __x); }
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	68b9      	ldr	r1, [r7, #8]
 800d52a:	68f8      	ldr	r0, [r7, #12]
 800d52c:	f000 f940 	bl	800d7b0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_>
 800d530:	bf00      	nop
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800d538:	b590      	push	{r4, r7, lr}
 800d53a:	b083      	sub	sp, #12
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
 800d540:	6039      	str	r1, [r7, #0]
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	685c      	ldr	r4, [r3, #4]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	4618      	mov	r0, r3
 800d54a:	f7ff fefb 	bl	800d344 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 800d54e:	4603      	mov	r3, r0
 800d550:	461a      	mov	r2, r3
 800d552:	4621      	mov	r1, r4
 800d554:	6838      	ldr	r0, [r7, #0]
 800d556:	f7ff ff00 	bl	800d35a <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	683a      	ldr	r2, [r7, #0]
 800d55e:	605a      	str	r2, [r3, #4]
      }
 800d560:	bf00      	nop
 800d562:	370c      	adds	r7, #12
 800d564:	46bd      	mov	sp, r7
 800d566:	bd90      	pop	{r4, r7, pc}

0800d568 <_ZNSt6vectorIhSaIhEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800d568:	b580      	push	{r7, lr}
 800d56a:	b084      	sub	sp, #16
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	1d1a      	adds	r2, r3, #4
 800d574:	f107 030c 	add.w	r3, r7, #12
 800d578:	4611      	mov	r1, r2
 800d57a:	4618      	mov	r0, r3
 800d57c:	f000 fabe 	bl	800dafc <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	4618      	mov	r0, r3
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}

0800d58a <_ZNSt6vectorIhSaIhEE6insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh>:
      insert(iterator __position, size_type __n, const value_type& __x)
 800d58a:	b580      	push	{r7, lr}
 800d58c:	b084      	sub	sp, #16
 800d58e:	af00      	add	r7, sp, #0
 800d590:	60f8      	str	r0, [r7, #12]
 800d592:	60b9      	str	r1, [r7, #8]
 800d594:	607a      	str	r2, [r7, #4]
 800d596:	603b      	str	r3, [r7, #0]
      { _M_fill_insert(__position, __n, __x); }
 800d598:	683b      	ldr	r3, [r7, #0]
 800d59a:	687a      	ldr	r2, [r7, #4]
 800d59c:	68b9      	ldr	r1, [r7, #8]
 800d59e:	68f8      	ldr	r0, [r7, #12]
 800d5a0:	f000 fabc 	bl	800db1c <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh>
 800d5a4:	bf00      	nop
 800d5a6:	3710      	adds	r7, #16
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <_ZNSt6vectorIhSaIhEE15_M_erase_at_endEPh>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 800d5ac:	b590      	push	{r4, r7, lr}
 800d5ae:	b083      	sub	sp, #12
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	6039      	str	r1, [r7, #0]
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	685c      	ldr	r4, [r3, #4]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7ff fe69 	bl	800d294 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	4621      	mov	r1, r4
 800d5c8:	6838      	ldr	r0, [r7, #0]
 800d5ca:	f7ff fe6e 	bl	800d2aa <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	this->_M_impl._M_finish = __pos;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	683a      	ldr	r2, [r7, #0]
 800d5d2:	605a      	str	r2, [r3, #4]
      }
 800d5d4:	bf00      	nop
 800d5d6:	370c      	adds	r7, #12
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd90      	pop	{r4, r7, pc}

0800d5dc <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1Ev>:
	_Vector_impl()
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f7ff fd1f 	bl	800d028 <_ZNSaIhEC1Ev>
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	601a      	str	r2, [r3, #0]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	605a      	str	r2, [r3, #4]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	609a      	str	r2, [r3, #8]
	{ }
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	4618      	mov	r0, r3
 800d600:	3708      	adds	r7, #8
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}

0800d606 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 800d606:	b580      	push	{r7, lr}
 800d608:	b084      	sub	sp, #16
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	60f8      	str	r0, [r7, #12]
 800d60e:	60b9      	str	r1, [r7, #8]
 800d610:	607a      	str	r2, [r7, #4]
	if (__p)
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d005      	beq.n	800d624 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	687a      	ldr	r2, [r7, #4]
 800d61c:	68b9      	ldr	r1, [r7, #8]
 800d61e:	4618      	mov	r0, r3
 800d620:	f000 fbdc 	bl	800dddc <_ZN9__gnu_cxx14__alloc_traitsISaIhEE10deallocateERS1_Phj>
      }
 800d624:	bf00      	nop
 800d626:	3710      	adds	r7, #16
 800d628:	46bd      	mov	sp, r7
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <_ZSt8_DestroyIPhEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d62c:	b580      	push	{r7, lr}
 800d62e:	b082      	sub	sp, #8
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 800d636:	6839      	ldr	r1, [r7, #0]
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 fbde 	bl	800ddfa <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 800d63e:	bf00      	nop
 800d640:	3708      	adds	r7, #8
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}

0800d646 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl()
 800d646:	b580      	push	{r7, lr}
 800d648:	b082      	sub	sp, #8
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 fbde 	bl	800de10 <_ZNSaISt6vectorIhSaIhEEEC1Ev>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2200      	movs	r2, #0
 800d658:	601a      	str	r2, [r3, #0]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2200      	movs	r2, #0
 800d65e:	605a      	str	r2, [r3, #4]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	2200      	movs	r2, #0
 800d664:	609a      	str	r2, [r3, #8]
	{ }
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	4618      	mov	r0, r3
 800d66a:	3708      	adds	r7, #8
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <_ZNSaISt6vectorIhSaIhEEED1Ev>:
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f000 fbd5 	bl	800de28 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEED1Ev>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	4618      	mov	r0, r3
 800d682:	3708      	adds	r7, #8
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}

0800d688 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	60f8      	str	r0, [r7, #12]
 800d690:	60b9      	str	r1, [r7, #8]
 800d692:	607a      	str	r2, [r7, #4]
	if (__p)
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d005      	beq.n	800d6a6 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	687a      	ldr	r2, [r7, #4]
 800d69e:	68b9      	ldr	r1, [r7, #8]
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f000 fbcc 	bl	800de3e <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIhSaIhEEEE10deallocateERS4_PS3_j>
      }
 800d6a6:	bf00      	nop
 800d6a8:	3710      	adds	r7, #16
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <_ZSt8_DestroyIPSt6vectorIhSaIhEEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b082      	sub	sp, #8
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
 800d6b6:	6039      	str	r1, [r7, #0]
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 800d6b8:	6839      	ldr	r1, [r7, #0]
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f000 fbce 	bl	800de5c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_>
    }
 800d6c0:	bf00      	nop
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
 800d6d0:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 800d6d2:	6839      	ldr	r1, [r7, #0]
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f000 fbd9 	bl	800de8c <_ZNSaIhEC1ERKS_>
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	601a      	str	r2, [r3, #0]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	605a      	str	r2, [r3, #4]
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	609a      	str	r2, [r3, #8]
	{ }
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3708      	adds	r7, #8
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}

0800d6f6 <_ZNSt12_Vector_baseIhSaIhEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800d6f6:	b580      	push	{r7, lr}
 800d6f8:	b082      	sub	sp, #8
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	6078      	str	r0, [r7, #4]
 800d6fe:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 800d700:	6839      	ldr	r1, [r7, #0]
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f000 fbd0 	bl	800dea8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 800d708:	4602      	mov	r2, r0
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681a      	ldr	r2, [r3, #0]
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	441a      	add	r2, r3
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	609a      	str	r2, [r3, #8]
      }
 800d722:	bf00      	nop
 800d724:	3708      	adds	r7, #8
 800d726:	46bd      	mov	sp, r7
 800d728:	bd80      	pop	{r7, pc}

0800d72a <_ZSt24__uninitialized_fill_n_aIPhjhhET_S1_T0_RKT1_RSaIT2_E>:
    }

  template<typename _ForwardIterator, typename _Size, typename _Tp,
	   typename _Tp2>
    inline _ForwardIterator
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b084      	sub	sp, #16
 800d72e:	af00      	add	r7, sp, #0
 800d730:	60f8      	str	r0, [r7, #12]
 800d732:	60b9      	str	r1, [r7, #8]
 800d734:	607a      	str	r2, [r7, #4]
 800d736:	603b      	str	r3, [r7, #0]
			     const _Tp& __x, allocator<_Tp2>&)
    { return std::uninitialized_fill_n(__first, __n, __x); }
 800d738:	687a      	ldr	r2, [r7, #4]
 800d73a:	68b9      	ldr	r1, [r7, #8]
 800d73c:	68f8      	ldr	r0, [r7, #12]
 800d73e:	f000 fbc7 	bl	800ded0 <_ZSt20uninitialized_fill_nIPhjhET_S1_T0_RKT1_>
 800d742:	4603      	mov	r3, r0
 800d744:	4618      	mov	r0, r3
 800d746:	3710      	adds	r7, #16
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <_ZN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEC1ERKS2_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800d74c:	b480      	push	{r7}
 800d74e:	b083      	sub	sp, #12
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	601a      	str	r2, [r3, #0]
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	4618      	mov	r0, r3
 800d762:	370c      	adds	r7, #12
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr

0800d76c <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800d76c:	b580      	push	{r7, lr}
 800d76e:	b086      	sub	sp, #24
 800d770:	af00      	add	r7, sp, #0
 800d772:	60f8      	str	r0, [r7, #12]
 800d774:	60b9      	str	r1, [r7, #8]
 800d776:	607a      	str	r2, [r7, #4]
      const bool __assignable = true;
 800d778:	2301      	movs	r3, #1
 800d77a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	68b9      	ldr	r1, [r7, #8]
 800d780:	68f8      	ldr	r0, [r7, #12]
 800d782:	f000 fbb7 	bl	800def4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>
 800d786:	4603      	mov	r3, r0
    }
 800d788:	4618      	mov	r0, r3
 800d78a:	3718      	adds	r7, #24
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}

0800d790 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800d790:	b480      	push	{r7}
 800d792:	b083      	sub	sp, #12
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
 800d798:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	601a      	str	r2, [r3, #0]
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	4618      	mov	r0, r3
 800d7a6:	370c      	adds	r7, #12
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_>:
      }
#endif

  template<typename _Tp, typename _Alloc>
    void
    vector<_Tp, _Alloc>::
 800d7b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7b2:	b091      	sub	sp, #68	; 0x44
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	607a      	str	r2, [r7, #4]
 800d7bc:	603b      	str	r3, [r7, #0]
    _M_fill_insert(iterator __position, size_type __n, const value_type& __x)
    {
      if (__n != 0)
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	f000 8197 	beq.w	800daf4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x344>
	{
	  if (size_type(this->_M_impl._M_end_of_storage
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	689b      	ldr	r3, [r3, #8]
			- this->_M_impl._M_finish) >= __n)
 800d7ca:	461a      	mov	r2, r3
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	685b      	ldr	r3, [r3, #4]
 800d7d0:	1ad3      	subs	r3, r2, r3
 800d7d2:	109b      	asrs	r3, r3, #2
 800d7d4:	4aba      	ldr	r2, [pc, #744]	; (800dac0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x310>)
 800d7d6:	fb02 f303 	mul.w	r3, r2, r3
 800d7da:	461a      	mov	r2, r3
	  if (size_type(this->_M_impl._M_end_of_storage
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	429a      	cmp	r2, r3
 800d7e0:	f0c0 80ae 	bcc.w	800d940 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x190>
	    {
	      value_type __x_copy = __x;
 800d7e4:	f107 0314 	add.w	r3, r7, #20
 800d7e8:	6839      	ldr	r1, [r7, #0]
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f7ff fc52 	bl	800d094 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
	      const size_type __elems_after = end() - __position;
 800d7f0:	68f8      	ldr	r0, [r7, #12]
 800d7f2:	f7ff fe7f 	bl	800d4f4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE3endEv>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	623b      	str	r3, [r7, #32]
 800d7fa:	f107 0208 	add.w	r2, r7, #8
 800d7fe:	f107 0320 	add.w	r3, r7, #32
 800d802:	4611      	mov	r1, r2
 800d804:	4618      	mov	r0, r3
 800d806:	f000 fb85 	bl	800df14 <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800d80a:	4603      	mov	r3, r0
 800d80c:	63bb      	str	r3, [r7, #56]	; 0x38
	      pointer __old_finish(this->_M_impl._M_finish);
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	637b      	str	r3, [r7, #52]	; 0x34
	      if (__elems_after > __n)
 800d814:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	429a      	cmp	r2, r3
 800d81a:	d94e      	bls.n	800d8ba <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x10a>
		{
		  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	6859      	ldr	r1, [r3, #4]
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	4613      	mov	r3, r2
 800d824:	005b      	lsls	r3, r3, #1
 800d826:	4413      	add	r3, r2
 800d828:	009b      	lsls	r3, r3, #2
 800d82a:	425b      	negs	r3, r3
 800d82c:	18cc      	adds	r4, r1, r3
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	685d      	ldr	r5, [r3, #4]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	685e      	ldr	r6, [r3, #4]
					      this->_M_impl._M_finish,
					      this->_M_impl._M_finish,
					      _M_get_Tp_allocator());
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	4618      	mov	r0, r3
 800d83a:	f7ff fd83 	bl	800d344 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 800d83e:	4603      	mov	r3, r0
		  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 800d840:	4632      	mov	r2, r6
 800d842:	4629      	mov	r1, r5
 800d844:	4620      	mov	r0, r4
 800d846:	f000 fb81 	bl	800df4c <_ZSt22__uninitialized_move_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>
		  this->_M_impl._M_finish += __n;
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	6859      	ldr	r1, [r3, #4]
 800d84e:	687a      	ldr	r2, [r7, #4]
 800d850:	4613      	mov	r3, r2
 800d852:	005b      	lsls	r3, r3, #1
 800d854:	4413      	add	r3, r2
 800d856:	009b      	lsls	r3, r3, #2
 800d858:	18ca      	adds	r2, r1, r3
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	605a      	str	r2, [r3, #4]
		  _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 800d85e:	f107 0308 	add.w	r3, r7, #8
 800d862:	4618      	mov	r0, r3
 800d864:	f000 fb84 	bl	800df70 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 800d868:	4603      	mov	r3, r0
 800d86a:	6818      	ldr	r0, [r3, #0]
 800d86c:	687a      	ldr	r2, [r7, #4]
 800d86e:	4613      	mov	r3, r2
 800d870:	005b      	lsls	r3, r3, #1
 800d872:	4413      	add	r3, r2
 800d874:	009b      	lsls	r3, r3, #2
 800d876:	425b      	negs	r3, r3
 800d878:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d87a:	4413      	add	r3, r2
 800d87c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d87e:	4619      	mov	r1, r3
 800d880:	f000 fb81 	bl	800df86 <_ZSt13copy_backwardIPSt6vectorIhSaIhEES3_ET0_T_S5_S4_>
					  __old_finish - __n, __old_finish);
		  std::fill(__position.base(), __position.base() + __n,
 800d884:	f107 0308 	add.w	r3, r7, #8
 800d888:	4618      	mov	r0, r3
 800d88a:	f000 fb71 	bl	800df70 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 800d88e:	4603      	mov	r3, r0
 800d890:	681c      	ldr	r4, [r3, #0]
 800d892:	f107 0308 	add.w	r3, r7, #8
 800d896:	4618      	mov	r0, r3
 800d898:	f000 fb6a 	bl	800df70 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 800d89c:	4603      	mov	r3, r0
 800d89e:	6819      	ldr	r1, [r3, #0]
 800d8a0:	687a      	ldr	r2, [r7, #4]
 800d8a2:	4613      	mov	r3, r2
 800d8a4:	005b      	lsls	r3, r3, #1
 800d8a6:	4413      	add	r3, r2
 800d8a8:	009b      	lsls	r3, r3, #2
 800d8aa:	440b      	add	r3, r1
 800d8ac:	f107 0214 	add.w	r2, r7, #20
 800d8b0:	4619      	mov	r1, r3
 800d8b2:	4620      	mov	r0, r4
 800d8b4:	f000 fb7f 	bl	800dfb6 <_ZSt4fillIPSt6vectorIhSaIhEES2_EvT_S4_RKT0_>
 800d8b8:	e03c      	b.n	800d934 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x184>
			    __x_copy);
		}
	      else
		{
		  this->_M_impl._M_finish =
		    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	685c      	ldr	r4, [r3, #4]
 800d8be:	687a      	ldr	r2, [r7, #4]
 800d8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8c2:	1ad5      	subs	r5, r2, r3
						  __n - __elems_after,
						  __x_copy,
						  _M_get_Tp_allocator());
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7ff fd3c 	bl	800d344 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 800d8cc:	4603      	mov	r3, r0
		    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 800d8ce:	f107 0214 	add.w	r2, r7, #20
 800d8d2:	4629      	mov	r1, r5
 800d8d4:	4620      	mov	r0, r4
 800d8d6:	f000 fb85 	bl	800dfe4 <_ZSt24__uninitialized_fill_n_aIPSt6vectorIhSaIhEEjS2_S2_ET_S4_T0_RKT1_RSaIT2_E>
 800d8da:	4602      	mov	r2, r0
		  this->_M_impl._M_finish =
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	605a      	str	r2, [r3, #4]
		  std::__uninitialized_move_a(__position.base(), __old_finish,
 800d8e0:	f107 0308 	add.w	r3, r7, #8
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f000 fb43 	bl	800df70 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	681c      	ldr	r4, [r3, #0]
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	685d      	ldr	r5, [r3, #4]
					      this->_M_impl._M_finish,
					      _M_get_Tp_allocator());
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f7ff fd25 	bl	800d344 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 800d8fa:	4603      	mov	r3, r0
		  std::__uninitialized_move_a(__position.base(), __old_finish,
 800d8fc:	462a      	mov	r2, r5
 800d8fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d900:	4620      	mov	r0, r4
 800d902:	f000 fb23 	bl	800df4c <_ZSt22__uninitialized_move_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>
		  this->_M_impl._M_finish += __elems_after;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	6859      	ldr	r1, [r3, #4]
 800d90a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d90c:	4613      	mov	r3, r2
 800d90e:	005b      	lsls	r3, r3, #1
 800d910:	4413      	add	r3, r2
 800d912:	009b      	lsls	r3, r3, #2
 800d914:	18ca      	adds	r2, r1, r3
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	605a      	str	r2, [r3, #4]
		  std::fill(__position.base(), __old_finish, __x_copy);
 800d91a:	f107 0308 	add.w	r3, r7, #8
 800d91e:	4618      	mov	r0, r3
 800d920:	f000 fb26 	bl	800df70 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 800d924:	4603      	mov	r3, r0
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	f107 0214 	add.w	r2, r7, #20
 800d92c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d92e:	4618      	mov	r0, r3
 800d930:	f000 fb41 	bl	800dfb6 <_ZSt4fillIPSt6vectorIhSaIhEES2_EvT_S4_RKT0_>
	      value_type __x_copy = __x;
 800d934:	f107 0314 	add.w	r3, r7, #20
 800d938:	4618      	mov	r0, r3
 800d93a:	f7ff fb24 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
	      this->_M_impl._M_start = __new_start;
	      this->_M_impl._M_finish = __new_finish;
	      this->_M_impl._M_end_of_storage = __new_start + __len;
	    }
	}
    }
 800d93e:	e0d9      	b.n	800daf4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x344>
		_M_check_len(__n, "vector::_M_fill_insert");
 800d940:	4a60      	ldr	r2, [pc, #384]	; (800dac4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x314>)
 800d942:	6879      	ldr	r1, [r7, #4]
 800d944:	68f8      	ldr	r0, [r7, #12]
 800d946:	f000 fb5e 	bl	800e006 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc>
 800d94a:	4603      	mov	r3, r0
 800d94c:	633b      	str	r3, [r7, #48]	; 0x30
	      const size_type __elems_before = __position - begin();
 800d94e:	68f8      	ldr	r0, [r7, #12]
 800d950:	f000 fba0 	bl	800e094 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE5beginEv>
 800d954:	4603      	mov	r3, r0
 800d956:	627b      	str	r3, [r7, #36]	; 0x24
 800d958:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800d95c:	f107 0308 	add.w	r3, r7, #8
 800d960:	4611      	mov	r1, r2
 800d962:	4618      	mov	r0, r3
 800d964:	f000 fad6 	bl	800df14 <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800d968:	4603      	mov	r3, r0
 800d96a:	62fb      	str	r3, [r7, #44]	; 0x2c
	      pointer __new_start(this->_M_allocate(__len));
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d970:	4618      	mov	r0, r3
 800d972:	f000 fb9f 	bl	800e0b4 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE11_M_allocateEj>
 800d976:	4603      	mov	r3, r0
 800d978:	62bb      	str	r3, [r7, #40]	; 0x28
	      pointer __new_finish(__new_start);
 800d97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d97c:	63fb      	str	r3, [r7, #60]	; 0x3c
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 800d97e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d980:	4613      	mov	r3, r2
 800d982:	005b      	lsls	r3, r3, #1
 800d984:	4413      	add	r3, r2
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	461a      	mov	r2, r3
 800d98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d98c:	189c      	adds	r4, r3, r2
						_M_get_Tp_allocator());
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	4618      	mov	r0, r3
 800d992:	f7ff fcd7 	bl	800d344 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 800d996:	4603      	mov	r3, r0
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 800d998:	683a      	ldr	r2, [r7, #0]
 800d99a:	6879      	ldr	r1, [r7, #4]
 800d99c:	4620      	mov	r0, r4
 800d99e:	f000 fb21 	bl	800dfe4 <_ZSt24__uninitialized_fill_n_aIPSt6vectorIhSaIhEEjS2_S2_ET_S4_T0_RKT1_RSaIT2_E>
		  __new_finish = pointer();
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		    (this->_M_impl._M_start, __position.base(),
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681c      	ldr	r4, [r3, #0]
 800d9aa:	f107 0308 	add.w	r3, r7, #8
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f000 fade 	bl	800df70 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	681d      	ldr	r5, [r3, #0]
		     __new_start, _M_get_Tp_allocator());
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7ff fcc2 	bl	800d344 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 800d9c0:	4603      	mov	r3, r0
		  __new_finish
 800d9c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9c4:	4629      	mov	r1, r5
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	f000 fb88 	bl	800e0dc <_ZSt34__uninitialized_move_if_noexcept_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
		  __new_finish += __n;
 800d9d0:	687a      	ldr	r2, [r7, #4]
 800d9d2:	4613      	mov	r3, r2
 800d9d4:	005b      	lsls	r3, r3, #1
 800d9d6:	4413      	add	r3, r2
 800d9d8:	009b      	lsls	r3, r3, #2
 800d9da:	461a      	mov	r2, r3
 800d9dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9de:	4413      	add	r3, r2
 800d9e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		    (__position.base(), this->_M_impl._M_finish,
 800d9e2:	f107 0308 	add.w	r3, r7, #8
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f000 fac2 	bl	800df70 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	681c      	ldr	r4, [r3, #0]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	685d      	ldr	r5, [r3, #4]
		     __new_finish, _M_get_Tp_allocator());
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7ff fca4 	bl	800d344 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 800d9fc:	4603      	mov	r3, r0
		  __new_finish
 800d9fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da00:	4629      	mov	r1, r5
 800da02:	4620      	mov	r0, r4
 800da04:	f000 fb6a 	bl	800e0dc <_ZSt34__uninitialized_move_if_noexcept_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>
 800da08:	4603      	mov	r3, r0
 800da0a:	63fb      	str	r3, [r7, #60]	; 0x3c
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	681c      	ldr	r4, [r3, #0]
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	4618      	mov	r0, r3
 800da18:	f7ff fc94 	bl	800d344 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 800da1c:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800da1e:	461a      	mov	r2, r3
 800da20:	4629      	mov	r1, r5
 800da22:	4620      	mov	r0, r4
 800da24:	f7ff fc99 	bl	800d35a <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800da28:	68f8      	ldr	r0, [r7, #12]
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 800da32:	461a      	mov	r2, r3
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 800da3a:	109b      	asrs	r3, r3, #2
 800da3c:	4a20      	ldr	r2, [pc, #128]	; (800dac0 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x310>)
 800da3e:	fb02 f303 	mul.w	r3, r2, r3
 800da42:	461a      	mov	r2, r3
 800da44:	f7ff fe20 	bl	800d688 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j>
	      this->_M_impl._M_start = __new_start;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800da4c:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_finish;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da52:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 800da54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da56:	4613      	mov	r3, r2
 800da58:	005b      	lsls	r3, r3, #1
 800da5a:	4413      	add	r3, r2
 800da5c:	009b      	lsls	r3, r3, #2
 800da5e:	461a      	mov	r2, r3
 800da60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da62:	441a      	add	r2, r3
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	609a      	str	r2, [r3, #8]
    }
 800da68:	e044      	b.n	800daf4 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x344>
	      value_type __x_copy = __x;
 800da6a:	f107 0314 	add.w	r3, r7, #20
 800da6e:	4618      	mov	r0, r3
 800da70:	f7ff fa89 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800da74:	f001 fbd4 	bl	800f220 <__cxa_end_cleanup>
 800da78:	4603      	mov	r3, r0
	      __catch(...)
 800da7a:	4618      	mov	r0, r3
 800da7c:	f001 f98c 	bl	800ed98 <__cxa_begin_catch>
		  if (!__new_finish)
 800da80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da82:	2b00      	cmp	r3, #0
 800da84:	d120      	bne.n	800dac8 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x318>
		    std::_Destroy(__new_start + __elems_before,
 800da86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da88:	4613      	mov	r3, r2
 800da8a:	005b      	lsls	r3, r3, #1
 800da8c:	4413      	add	r3, r2
 800da8e:	009b      	lsls	r3, r3, #2
 800da90:	461a      	mov	r2, r3
 800da92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da94:	189c      	adds	r4, r3, r2
				  __new_start + __elems_before + __n,
 800da96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	441a      	add	r2, r3
 800da9c:	4613      	mov	r3, r2
 800da9e:	005b      	lsls	r3, r3, #1
 800daa0:	4413      	add	r3, r2
 800daa2:	009b      	lsls	r3, r3, #2
 800daa4:	461a      	mov	r2, r3
		    std::_Destroy(__new_start + __elems_before,
 800daa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa8:	189d      	adds	r5, r3, r2
				  _M_get_Tp_allocator());
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	4618      	mov	r0, r3
 800daae:	f7ff fc49 	bl	800d344 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 800dab2:	4603      	mov	r3, r0
		    std::_Destroy(__new_start + __elems_before,
 800dab4:	461a      	mov	r2, r3
 800dab6:	4629      	mov	r1, r5
 800dab8:	4620      	mov	r0, r4
 800daba:	f7ff fc4e 	bl	800d35a <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
 800dabe:	e00d      	b.n	800dadc <_ZNSt6vectorIS_IhSaIhEESaIS1_EE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPS1_S3_EEjRKS1_+0x32c>
 800dac0:	aaaaaaab 	.word	0xaaaaaaab
 800dac4:	080176cc 	.word	0x080176cc
				  _M_get_Tp_allocator());
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	4618      	mov	r0, r3
 800dacc:	f7ff fc3a 	bl	800d344 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 800dad0:	4603      	mov	r3, r0
		    std::_Destroy(__new_start, __new_finish,
 800dad2:	461a      	mov	r2, r3
 800dad4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dad8:	f7ff fc3f 	bl	800d35a <_ZSt8_DestroyIPSt6vectorIhSaIhEES2_EvT_S4_RSaIT0_E>
		  _M_deallocate(__new_start, __len);
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7ff fdd0 	bl	800d688 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE13_M_deallocateEPS2_j>
		  __throw_exception_again;
 800dae8:	f001 fb3e 	bl	800f168 <__cxa_rethrow>
	      __catch(...)
 800daec:	f001 f992 	bl	800ee14 <__cxa_end_catch>
 800daf0:	f001 fb96 	bl	800f220 <__cxa_end_cleanup>
    }
 800daf4:	bf00      	nop
 800daf6:	3744      	adds	r7, #68	; 0x44
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800dafc <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	601a      	str	r2, [r3, #0]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	4618      	mov	r0, r3
 800db12:	370c      	adds	r7, #12
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr

0800db1c <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh>:
    vector<_Tp, _Alloc>::
 800db1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db1e:	b08f      	sub	sp, #60	; 0x3c
 800db20:	af00      	add	r7, sp, #0
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	607a      	str	r2, [r7, #4]
 800db28:	603b      	str	r3, [r7, #0]
      if (__n != 0)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	f000 814f 	beq.w	800ddd0 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x2b4>
	  if (size_type(this->_M_impl._M_end_of_storage
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	689b      	ldr	r3, [r3, #8]
			- this->_M_impl._M_finish) >= __n)
 800db36:	461a      	mov	r2, r3
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	1ad3      	subs	r3, r2, r3
 800db3e:	461a      	mov	r2, r3
	  if (size_type(this->_M_impl._M_end_of_storage
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	429a      	cmp	r2, r3
 800db44:	f0c0 8092 	bcc.w	800dc6c <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x150>
	      value_type __x_copy = __x;
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	75fb      	strb	r3, [r7, #23]
	      const size_type __elems_after = end() - __position;
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f7ff fd0a 	bl	800d568 <_ZNSt6vectorIhSaIhEE3endEv>
 800db54:	4603      	mov	r3, r0
 800db56:	61bb      	str	r3, [r7, #24]
 800db58:	f107 0208 	add.w	r2, r7, #8
 800db5c:	f107 0318 	add.w	r3, r7, #24
 800db60:	4611      	mov	r1, r2
 800db62:	4618      	mov	r0, r3
 800db64:	f000 facc 	bl	800e100 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800db68:	4603      	mov	r3, r0
 800db6a:	633b      	str	r3, [r7, #48]	; 0x30
	      pointer __old_finish(this->_M_impl._M_finish);
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	62fb      	str	r3, [r7, #44]	; 0x2c
	      if (__elems_after > __n)
 800db72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	429a      	cmp	r2, r3
 800db78:	d93e      	bls.n	800dbf8 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0xdc>
		  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	685a      	ldr	r2, [r3, #4]
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	425b      	negs	r3, r3
 800db82:	18d4      	adds	r4, r2, r3
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	685d      	ldr	r5, [r3, #4]
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	685e      	ldr	r6, [r3, #4]
					      _M_get_Tp_allocator());
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	4618      	mov	r0, r3
 800db90:	f7ff fb80 	bl	800d294 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800db94:	4603      	mov	r3, r0
		  std::__uninitialized_move_a(this->_M_impl._M_finish - __n,
 800db96:	4632      	mov	r2, r6
 800db98:	4629      	mov	r1, r5
 800db9a:	4620      	mov	r0, r4
 800db9c:	f000 fac5 	bl	800e12a <_ZSt22__uninitialized_move_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
		  this->_M_impl._M_finish += __n;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	685a      	ldr	r2, [r3, #4]
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	441a      	add	r2, r3
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	605a      	str	r2, [r3, #4]
		  _GLIBCXX_MOVE_BACKWARD3(__position.base(),
 800dbac:	f107 0308 	add.w	r3, r7, #8
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f000 facc 	bl	800e14e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	6818      	ldr	r0, [r3, #0]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	425b      	negs	r3, r3
 800dbbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbc0:	4413      	add	r3, r2
 800dbc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	f000 facd 	bl	800e164 <_ZSt13copy_backwardIPhS0_ET0_T_S2_S1_>
		  std::fill(__position.base(), __position.base() + __n,
 800dbca:	f107 0308 	add.w	r3, r7, #8
 800dbce:	4618      	mov	r0, r3
 800dbd0:	f000 fabd 	bl	800e14e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	681c      	ldr	r4, [r3, #0]
 800dbd8:	f107 0308 	add.w	r3, r7, #8
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f000 fab6 	bl	800e14e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	681a      	ldr	r2, [r3, #0]
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	4413      	add	r3, r2
 800dbea:	f107 0217 	add.w	r2, r7, #23
 800dbee:	4619      	mov	r1, r3
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	f000 facf 	bl	800e194 <_ZSt4fillIPhhEvT_S1_RKT0_>
    }
 800dbf6:	e0eb      	b.n	800ddd0 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x2b4>
		    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	685c      	ldr	r4, [r3, #4]
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc00:	1ad5      	subs	r5, r2, r3
						  _M_get_Tp_allocator());
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	4618      	mov	r0, r3
 800dc06:	f7ff fb45 	bl	800d294 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800dc0a:	4603      	mov	r3, r0
		    std::__uninitialized_fill_n_a(this->_M_impl._M_finish,
 800dc0c:	f107 0217 	add.w	r2, r7, #23
 800dc10:	4629      	mov	r1, r5
 800dc12:	4620      	mov	r0, r4
 800dc14:	f7ff fd89 	bl	800d72a <_ZSt24__uninitialized_fill_n_aIPhjhhET_S1_T0_RKT1_RSaIT2_E>
 800dc18:	4602      	mov	r2, r0
		  this->_M_impl._M_finish =
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	605a      	str	r2, [r3, #4]
		  std::__uninitialized_move_a(__position.base(), __old_finish,
 800dc1e:	f107 0308 	add.w	r3, r7, #8
 800dc22:	4618      	mov	r0, r3
 800dc24:	f000 fa93 	bl	800e14e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	681c      	ldr	r4, [r3, #0]
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	685d      	ldr	r5, [r3, #4]
					      _M_get_Tp_allocator());
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7ff fb2e 	bl	800d294 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800dc38:	4603      	mov	r3, r0
		  std::__uninitialized_move_a(__position.base(), __old_finish,
 800dc3a:	462a      	mov	r2, r5
 800dc3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc3e:	4620      	mov	r0, r4
 800dc40:	f000 fa73 	bl	800e12a <_ZSt22__uninitialized_move_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
		  this->_M_impl._M_finish += __elems_after;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	685a      	ldr	r2, [r3, #4]
 800dc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4a:	441a      	add	r2, r3
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	605a      	str	r2, [r3, #4]
		  std::fill(__position.base(), __old_finish, __x_copy);
 800dc50:	f107 0308 	add.w	r3, r7, #8
 800dc54:	4618      	mov	r0, r3
 800dc56:	f000 fa7a 	bl	800e14e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	f107 0217 	add.w	r2, r7, #23
 800dc62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dc64:	4618      	mov	r0, r3
 800dc66:	f000 fa95 	bl	800e194 <_ZSt4fillIPhhEvT_S1_RKT0_>
    }
 800dc6a:	e0b1      	b.n	800ddd0 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x2b4>
		_M_check_len(__n, "vector::_M_fill_insert");
 800dc6c:	4a5a      	ldr	r2, [pc, #360]	; (800ddd8 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x2bc>)
 800dc6e:	6879      	ldr	r1, [r7, #4]
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f000 faa6 	bl	800e1c2 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>
 800dc76:	4603      	mov	r3, r0
 800dc78:	62bb      	str	r3, [r7, #40]	; 0x28
	      const size_type __elems_before = __position - begin();
 800dc7a:	68f8      	ldr	r0, [r7, #12]
 800dc7c:	f000 fae8 	bl	800e250 <_ZNSt6vectorIhSaIhEE5beginEv>
 800dc80:	4603      	mov	r3, r0
 800dc82:	61fb      	str	r3, [r7, #28]
 800dc84:	f107 021c 	add.w	r2, r7, #28
 800dc88:	f107 0308 	add.w	r3, r7, #8
 800dc8c:	4611      	mov	r1, r2
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f000 fa36 	bl	800e100 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 800dc94:	4603      	mov	r3, r0
 800dc96:	627b      	str	r3, [r7, #36]	; 0x24
	      pointer __new_start(this->_M_allocate(__len));
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f000 f903 	bl	800dea8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 800dca2:	4603      	mov	r3, r0
 800dca4:	623b      	str	r3, [r7, #32]
	      pointer __new_finish(__new_start);
 800dca6:	6a3b      	ldr	r3, [r7, #32]
 800dca8:	637b      	str	r3, [r7, #52]	; 0x34
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 800dcaa:	6a3a      	ldr	r2, [r7, #32]
 800dcac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcae:	18d4      	adds	r4, r2, r3
						_M_get_Tp_allocator());
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7ff faee 	bl	800d294 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800dcb8:	4603      	mov	r3, r0
		  std::__uninitialized_fill_n_a(__new_start + __elems_before,
 800dcba:	683a      	ldr	r2, [r7, #0]
 800dcbc:	6879      	ldr	r1, [r7, #4]
 800dcbe:	4620      	mov	r0, r4
 800dcc0:	f7ff fd33 	bl	800d72a <_ZSt24__uninitialized_fill_n_aIPhjhhET_S1_T0_RKT1_RSaIT2_E>
		  __new_finish = pointer();
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	637b      	str	r3, [r7, #52]	; 0x34
		    (this->_M_impl._M_start, __position.base(),
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681c      	ldr	r4, [r3, #0]
 800dccc:	f107 0308 	add.w	r3, r7, #8
 800dcd0:	4618      	mov	r0, r3
 800dcd2:	f000 fa3c 	bl	800e14e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	681d      	ldr	r5, [r3, #0]
		     __new_start, _M_get_Tp_allocator());
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f7ff fad9 	bl	800d294 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800dce2:	4603      	mov	r3, r0
		  __new_finish
 800dce4:	6a3a      	ldr	r2, [r7, #32]
 800dce6:	4629      	mov	r1, r5
 800dce8:	4620      	mov	r0, r4
 800dcea:	f000 fac1 	bl	800e270 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	637b      	str	r3, [r7, #52]	; 0x34
		  __new_finish += __n;
 800dcf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	4413      	add	r3, r2
 800dcf8:	637b      	str	r3, [r7, #52]	; 0x34
		    (__position.base(), this->_M_impl._M_finish,
 800dcfa:	f107 0308 	add.w	r3, r7, #8
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f000 fa25 	bl	800e14e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800dd04:	4603      	mov	r3, r0
 800dd06:	681c      	ldr	r4, [r3, #0]
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	685d      	ldr	r5, [r3, #4]
		     __new_finish, _M_get_Tp_allocator());
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f7ff fac0 	bl	800d294 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800dd14:	4603      	mov	r3, r0
		  __new_finish
 800dd16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd18:	4629      	mov	r1, r5
 800dd1a:	4620      	mov	r0, r4
 800dd1c:	f000 faa8 	bl	800e270 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>
 800dd20:	4603      	mov	r3, r0
 800dd22:	637b      	str	r3, [r7, #52]	; 0x34
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681c      	ldr	r4, [r3, #0]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f7ff fab0 	bl	800d294 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800dd34:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800dd36:	461a      	mov	r2, r3
 800dd38:	4629      	mov	r1, r5
 800dd3a:	4620      	mov	r0, r4
 800dd3c:	f7ff fab5 	bl	800d2aa <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800dd40:	68f8      	ldr	r0, [r7, #12]
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 800dd4a:	461a      	mov	r2, r3
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 800dd52:	461a      	mov	r2, r3
 800dd54:	f7ff fc57 	bl	800d606 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __new_start;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	6a3a      	ldr	r2, [r7, #32]
 800dd5c:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_finish = __new_finish;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd62:	605a      	str	r2, [r3, #4]
	      this->_M_impl._M_end_of_storage = __new_start + __len;
 800dd64:	6a3a      	ldr	r2, [r7, #32]
 800dd66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd68:	441a      	add	r2, r3
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	609a      	str	r2, [r3, #8]
    }
 800dd6e:	e02f      	b.n	800ddd0 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x2b4>
 800dd70:	4603      	mov	r3, r0
	      __catch(...)
 800dd72:	4618      	mov	r0, r3
 800dd74:	f001 f810 	bl	800ed98 <__cxa_begin_catch>
		  if (!__new_finish)
 800dd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d112      	bne.n	800dda4 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x288>
		    std::_Destroy(__new_start + __elems_before,
 800dd7e:	6a3a      	ldr	r2, [r7, #32]
 800dd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd82:	18d4      	adds	r4, r2, r3
				  __new_start + __elems_before + __n,
 800dd84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	4413      	add	r3, r2
		    std::_Destroy(__new_start + __elems_before,
 800dd8a:	6a3a      	ldr	r2, [r7, #32]
 800dd8c:	18d5      	adds	r5, r2, r3
				  _M_get_Tp_allocator());
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	4618      	mov	r0, r3
 800dd92:	f7ff fa7f 	bl	800d294 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800dd96:	4603      	mov	r3, r0
		    std::_Destroy(__new_start + __elems_before,
 800dd98:	461a      	mov	r2, r3
 800dd9a:	4629      	mov	r1, r5
 800dd9c:	4620      	mov	r0, r4
 800dd9e:	f7ff fa84 	bl	800d2aa <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
 800dda2:	e009      	b.n	800ddb8 <_ZNSt6vectorIhSaIhEE14_M_fill_insertEN9__gnu_cxx17__normal_iteratorIPhS1_EEjRKh+0x29c>
				  _M_get_Tp_allocator());
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7ff fa74 	bl	800d294 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800ddac:	4603      	mov	r3, r0
		    std::_Destroy(__new_start, __new_finish,
 800ddae:	461a      	mov	r2, r3
 800ddb0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ddb2:	6a38      	ldr	r0, [r7, #32]
 800ddb4:	f7ff fa79 	bl	800d2aa <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
		  _M_deallocate(__new_start, __len);
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddbc:	6a39      	ldr	r1, [r7, #32]
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f7ff fc21 	bl	800d606 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		  __throw_exception_again;
 800ddc4:	f001 f9d0 	bl	800f168 <__cxa_rethrow>
	      __catch(...)
 800ddc8:	f001 f824 	bl	800ee14 <__cxa_end_catch>
 800ddcc:	f001 fa28 	bl	800f220 <__cxa_end_cleanup>
    }
 800ddd0:	bf00      	nop
 800ddd2:	373c      	adds	r7, #60	; 0x3c
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ddd8:	080176cc 	.word	0x080176cc

0800dddc <_ZN9__gnu_cxx14__alloc_traitsISaIhEE10deallocateERS1_Phj>:
    static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	60f8      	str	r0, [r7, #12]
 800dde4:	60b9      	str	r1, [r7, #8]
 800dde6:	607a      	str	r2, [r7, #4]
    { __a.deallocate(__p, __n); }
 800dde8:	687a      	ldr	r2, [r7, #4]
 800ddea:	68b9      	ldr	r1, [r7, #8]
 800ddec:	68f8      	ldr	r0, [r7, #12]
 800ddee:	f000 fa51 	bl	800e294 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 800ddf2:	bf00      	nop
 800ddf4:	3710      	adds	r7, #16
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}

0800ddfa <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800ddfa:	b480      	push	{r7}
 800ddfc:	b083      	sub	sp, #12
 800ddfe:	af00      	add	r7, sp, #0
 800de00:	6078      	str	r0, [r7, #4]
 800de02:	6039      	str	r1, [r7, #0]
 800de04:	bf00      	nop
 800de06:	370c      	adds	r7, #12
 800de08:	46bd      	mov	sp, r7
 800de0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0e:	4770      	bx	lr

0800de10 <_ZNSaISt6vectorIhSaIhEEEC1Ev>:
      allocator() throw() { }
 800de10:	b580      	push	{r7, lr}
 800de12:	b082      	sub	sp, #8
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f000 fa48 	bl	800e2ae <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEEC1Ev>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	4618      	mov	r0, r3
 800de22:	3708      	adds	r7, #8
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEED1Ev>:
 800de28:	b480      	push	{r7}
 800de2a:	b083      	sub	sp, #12
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	4618      	mov	r0, r3
 800de34:	370c      	adds	r7, #12
 800de36:	46bd      	mov	sp, r7
 800de38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de3c:	4770      	bx	lr

0800de3e <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIhSaIhEEEE10deallocateERS4_PS3_j>:
    static void deallocate(_Alloc& __a, pointer __p, size_type __n)
 800de3e:	b580      	push	{r7, lr}
 800de40:	b084      	sub	sp, #16
 800de42:	af00      	add	r7, sp, #0
 800de44:	60f8      	str	r0, [r7, #12]
 800de46:	60b9      	str	r1, [r7, #8]
 800de48:	607a      	str	r2, [r7, #4]
    { __a.deallocate(__p, __n); }
 800de4a:	687a      	ldr	r2, [r7, #4]
 800de4c:	68b9      	ldr	r1, [r7, #8]
 800de4e:	68f8      	ldr	r0, [r7, #12]
 800de50:	f000 fa38 	bl	800e2c4 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE10deallocateEPS3_j>
 800de54:	bf00      	nop
 800de56:	3710      	adds	r7, #16
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_>:
        __destroy(_ForwardIterator __first, _ForwardIterator __last)
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800de66:	687a      	ldr	r2, [r7, #4]
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d00a      	beq.n	800de84 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f000 fa35 	bl	800e2de <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>
 800de74:	4603      	mov	r3, r0
 800de76:	4618      	mov	r0, r3
 800de78:	f000 fa3c 	bl	800e2f4 <_ZSt8_DestroyISt6vectorIhSaIhEEEvPT_>
	  for (; __first != __last; ++__first)
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	330c      	adds	r3, #12
 800de80:	607b      	str	r3, [r7, #4]
 800de82:	e7f0      	b.n	800de66 <_ZNSt12_Destroy_auxILb0EE9__destroyIPSt6vectorIhSaIhEEEEvT_S6_+0xa>
	}
 800de84:	bf00      	nop
 800de86:	3708      	adds	r7, #8
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}

0800de8c <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) throw()
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b082      	sub	sp, #8
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800de96:	6839      	ldr	r1, [r7, #0]
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f000 fa36 	bl	800e30a <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	4618      	mov	r0, r3
 800dea2:	3708      	adds	r7, #8
 800dea4:	46bd      	mov	sp, r7
 800dea6:	bd80      	pop	{r7, pc}

0800dea8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b082      	sub	sp, #8
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
 800deb0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d006      	beq.n	800dec6 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6839      	ldr	r1, [r7, #0]
 800debc:	4618      	mov	r0, r3
 800debe:	f000 fa30 	bl	800e322 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE8allocateERS1_j>
 800dec2:	4603      	mov	r3, r0
 800dec4:	e000      	b.n	800dec8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 800dec6:	2300      	movs	r3, #0
      }
 800dec8:	4618      	mov	r0, r3
 800deca:	3708      	adds	r7, #8
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}

0800ded0 <_ZSt20uninitialized_fill_nIPhjhET_S1_T0_RKT1_>:
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b086      	sub	sp, #24
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	60f8      	str	r0, [r7, #12]
 800ded8:	60b9      	str	r1, [r7, #8]
 800deda:	607a      	str	r2, [r7, #4]
      const bool __assignable = true;
 800dedc:	2301      	movs	r3, #1
 800dede:	75fb      	strb	r3, [r7, #23]
	__uninit_fill_n(__first, __n, __x);
 800dee0:	687a      	ldr	r2, [r7, #4]
 800dee2:	68b9      	ldr	r1, [r7, #8]
 800dee4:	68f8      	ldr	r0, [r7, #12]
 800dee6:	f000 fa2b 	bl	800e340 <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPhjhEET_S3_T0_RKT1_>
 800deea:	4603      	mov	r3, r0
    }
 800deec:	4618      	mov	r0, r3
 800deee:	3718      	adds	r7, #24
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}

0800def4 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800def4:	b580      	push	{r7, lr}
 800def6:	b084      	sub	sp, #16
 800def8:	af00      	add	r7, sp, #0
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	68b9      	ldr	r1, [r7, #8]
 800df04:	68f8      	ldr	r0, [r7, #12]
 800df06:	f000 fa2b 	bl	800e360 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>
 800df0a:	4603      	mov	r3, r0
 800df0c:	4618      	mov	r0, r3
 800df0e:	3710      	adds	r7, #16
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}

0800df14 <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800df14:	b590      	push	{r4, r7, lr}
 800df16:	b083      	sub	sp, #12
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
 800df1c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f000 f826 	bl	800df70 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 800df24:	4603      	mov	r3, r0
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	461c      	mov	r4, r3
 800df2a:	6838      	ldr	r0, [r7, #0]
 800df2c:	f000 f820 	bl	800df70 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>
 800df30:	4603      	mov	r3, r0
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	1ae3      	subs	r3, r4, r3
 800df36:	109b      	asrs	r3, r3, #2
 800df38:	4a03      	ldr	r2, [pc, #12]	; (800df48 <_ZN9__gnu_cxxmiIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_+0x34>)
 800df3a:	fb02 f303 	mul.w	r3, r2, r3
 800df3e:	4618      	mov	r0, r3
 800df40:	370c      	adds	r7, #12
 800df42:	46bd      	mov	sp, r7
 800df44:	bd90      	pop	{r4, r7, pc}
 800df46:	bf00      	nop
 800df48:	aaaaaaab 	.word	0xaaaaaaab

0800df4c <_ZSt22__uninitialized_move_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 800df4c:	b580      	push	{r7, lr}
 800df4e:	b084      	sub	sp, #16
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	607a      	str	r2, [r7, #4]
 800df58:	603b      	str	r3, [r7, #0]
					 __result, __alloc);
 800df5a:	683b      	ldr	r3, [r7, #0]
 800df5c:	687a      	ldr	r2, [r7, #4]
 800df5e:	68b9      	ldr	r1, [r7, #8]
 800df60:	68f8      	ldr	r0, [r7, #12]
 800df62:	f000 fa15 	bl	800e390 <_ZSt22__uninitialized_copy_aIPSt6vectorIhSaIhEES3_S2_ET0_T_S5_S4_RSaIT1_E>
 800df66:	4603      	mov	r3, r0
    }
 800df68:	4618      	mov	r0, r3
 800df6a:	3710      	adds	r7, #16
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}

0800df70 <_ZNK9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800df70:	b480      	push	{r7}
 800df72:	b083      	sub	sp, #12
 800df74:	af00      	add	r7, sp, #0
 800df76:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	4618      	mov	r0, r3
 800df7c:	370c      	adds	r7, #12
 800df7e:	46bd      	mov	sp, r7
 800df80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df84:	4770      	bx	lr

0800df86 <_ZSt13copy_backwardIPSt6vectorIhSaIhEES3_ET0_T_S5_S4_>:
   *  Result may not be in the range (first,last].  Use copy instead.  Note
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800df86:	b590      	push	{r4, r7, lr}
 800df88:	b085      	sub	sp, #20
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	60f8      	str	r0, [r7, #12]
 800df8e:	60b9      	str	r1, [r7, #8]
 800df90:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_backward_a2<__is_move_iterator<_BI1>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 800df92:	68f8      	ldr	r0, [r7, #12]
 800df94:	f000 fa0d 	bl	800e3b2 <_ZSt12__miter_baseIPSt6vectorIhSaIhEEET_S4_>
 800df98:	4604      	mov	r4, r0
 800df9a:	68b8      	ldr	r0, [r7, #8]
 800df9c:	f000 fa09 	bl	800e3b2 <_ZSt12__miter_baseIPSt6vectorIhSaIhEEET_S4_>
 800dfa0:	4603      	mov	r3, r0
	       __result));
 800dfa2:	687a      	ldr	r2, [r7, #4]
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	4620      	mov	r0, r4
 800dfa8:	f000 fa0e 	bl	800e3c8 <_ZSt23__copy_move_backward_a2ILb0EPSt6vectorIhSaIhEES3_ET1_T0_S5_S4_>
 800dfac:	4603      	mov	r3, r0
    }
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3714      	adds	r7, #20
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd90      	pop	{r4, r7, pc}

0800dfb6 <_ZSt4fillIPSt6vectorIhSaIhEES2_EvT_S4_RKT0_>:
   *  types filling contiguous areas of memory, this becomes an inline call
   *  to @c memset or @c wmemset.
  */
  template<typename _ForwardIterator, typename _Tp>
    inline void
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 800dfb6:	b590      	push	{r4, r7, lr}
 800dfb8:	b085      	sub	sp, #20
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	60f8      	str	r0, [r7, #12]
 800dfbe:	60b9      	str	r1, [r7, #8]
 800dfc0:	607a      	str	r2, [r7, #4]
      // concept requirements
      __glibcxx_function_requires(_Mutable_ForwardIteratorConcept<
				  _ForwardIterator>)
      __glibcxx_requires_valid_range(__first, __last);

      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
 800dfc2:	68f8      	ldr	r0, [r7, #12]
 800dfc4:	f000 fa1c 	bl	800e400 <_ZSt12__niter_baseIPSt6vectorIhSaIhEEET_S4_>
 800dfc8:	4604      	mov	r4, r0
 800dfca:	68b8      	ldr	r0, [r7, #8]
 800dfcc:	f000 fa18 	bl	800e400 <_ZSt12__niter_baseIPSt6vectorIhSaIhEEET_S4_>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	4619      	mov	r1, r3
 800dfd6:	4620      	mov	r0, r4
 800dfd8:	f000 fa1d 	bl	800e416 <_ZSt8__fill_aIPSt6vectorIhSaIhEES2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SB_RKS7_>
		    __value);
    }
 800dfdc:	bf00      	nop
 800dfde:	3714      	adds	r7, #20
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd90      	pop	{r4, r7, pc}

0800dfe4 <_ZSt24__uninitialized_fill_n_aIPSt6vectorIhSaIhEEjS2_S2_ET_S4_T0_RKT1_RSaIT2_E>:
    __uninitialized_fill_n_a(_ForwardIterator __first, _Size __n, 
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b084      	sub	sp, #16
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	607a      	str	r2, [r7, #4]
 800dff0:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_fill_n(__first, __n, __x); }
 800dff2:	687a      	ldr	r2, [r7, #4]
 800dff4:	68b9      	ldr	r1, [r7, #8]
 800dff6:	68f8      	ldr	r0, [r7, #12]
 800dff8:	f000 fa23 	bl	800e442 <_ZSt20uninitialized_fill_nIPSt6vectorIhSaIhEEjS2_ET_S4_T0_RKT1_>
 800dffc:	4603      	mov	r3, r0
 800dffe:	4618      	mov	r0, r3
 800e000:	3710      	adds	r7, #16
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}

0800e006 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800e006:	b590      	push	{r4, r7, lr}
 800e008:	b087      	sub	sp, #28
 800e00a:	af00      	add	r7, sp, #0
 800e00c:	60f8      	str	r0, [r7, #12]
 800e00e:	60b9      	str	r1, [r7, #8]
 800e010:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800e012:	68f8      	ldr	r0, [r7, #12]
 800e014:	f000 fa27 	bl	800e466 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE8max_sizeEv>
 800e018:	4604      	mov	r4, r0
 800e01a:	68f8      	ldr	r0, [r7, #12]
 800e01c:	f7ff fa54 	bl	800d4c8 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 800e020:	4603      	mov	r3, r0
 800e022:	1ae2      	subs	r2, r4, r3
 800e024:	68bb      	ldr	r3, [r7, #8]
 800e026:	429a      	cmp	r2, r3
 800e028:	bf34      	ite	cc
 800e02a:	2301      	movcc	r3, #1
 800e02c:	2300      	movcs	r3, #0
 800e02e:	b2db      	uxtb	r3, r3
 800e030:	2b00      	cmp	r3, #0
 800e032:	d002      	beq.n	800e03a <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f001 fd19 	bl	800fa6c <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 800e03a:	68f8      	ldr	r0, [r7, #12]
 800e03c:	f7ff fa44 	bl	800d4c8 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 800e040:	4604      	mov	r4, r0
 800e042:	68f8      	ldr	r0, [r7, #12]
 800e044:	f7ff fa40 	bl	800d4c8 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 800e048:	4603      	mov	r3, r0
 800e04a:	613b      	str	r3, [r7, #16]
 800e04c:	f107 0208 	add.w	r2, r7, #8
 800e050:	f107 0310 	add.w	r3, r7, #16
 800e054:	4611      	mov	r1, r2
 800e056:	4618      	mov	r0, r3
 800e058:	f000 fa16 	bl	800e488 <_ZSt3maxIjERKT_S2_S2_>
 800e05c:	4603      	mov	r3, r0
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	4423      	add	r3, r4
 800e062:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800e064:	68f8      	ldr	r0, [r7, #12]
 800e066:	f7ff fa2f 	bl	800d4c8 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE4sizeEv>
 800e06a:	4602      	mov	r2, r0
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d806      	bhi.n	800e080 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc+0x7a>
 800e072:	68f8      	ldr	r0, [r7, #12]
 800e074:	f000 f9f7 	bl	800e466 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE8max_sizeEv>
 800e078:	4602      	mov	r2, r0
 800e07a:	697b      	ldr	r3, [r7, #20]
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d204      	bcs.n	800e08a <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc+0x84>
 800e080:	68f8      	ldr	r0, [r7, #12]
 800e082:	f000 f9f0 	bl	800e466 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE8max_sizeEv>
 800e086:	4603      	mov	r3, r0
 800e088:	e000      	b.n	800e08c <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE12_M_check_lenEjPKc+0x86>
 800e08a:	697b      	ldr	r3, [r7, #20]
      }
 800e08c:	4618      	mov	r0, r3
 800e08e:	371c      	adds	r7, #28
 800e090:	46bd      	mov	sp, r7
 800e092:	bd90      	pop	{r4, r7, pc}

0800e094 <_ZNSt6vectorIS_IhSaIhEESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800e094:	b580      	push	{r7, lr}
 800e096:	b084      	sub	sp, #16
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	f107 030c 	add.w	r3, r7, #12
 800e0a2:	4611      	mov	r1, r2
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7ff fb73 	bl	800d790 <_ZN9__gnu_cxx17__normal_iteratorIPSt6vectorIhSaIhEES1_IS3_SaIS3_EEEC1ERKS4_>
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3710      	adds	r7, #16
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b082      	sub	sp, #8
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d006      	beq.n	800e0d2 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE11_M_allocateEj+0x1e>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	6839      	ldr	r1, [r7, #0]
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f000 f9f1 	bl	800e4b0 <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIhSaIhEEEE8allocateERS4_j>
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	e000      	b.n	800e0d4 <_ZNSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE11_M_allocateEj+0x20>
 800e0d2:	2300      	movs	r3, #0
      }
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3708      	adds	r7, #8
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <_ZSt34__uninitialized_move_if_noexcept_aIPSt6vectorIhSaIhEES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	60f8      	str	r0, [r7, #12]
 800e0e4:	60b9      	str	r1, [r7, #8]
 800e0e6:	607a      	str	r2, [r7, #4]
 800e0e8:	603b      	str	r3, [r7, #0]
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800e0ea:	683b      	ldr	r3, [r7, #0]
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	68b9      	ldr	r1, [r7, #8]
 800e0f0:	68f8      	ldr	r0, [r7, #12]
 800e0f2:	f000 f94d 	bl	800e390 <_ZSt22__uninitialized_copy_aIPSt6vectorIhSaIhEES3_S2_ET0_T_S5_S4_RSaIT1_E>
 800e0f6:	4603      	mov	r3, r0
    }
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3710      	adds	r7, #16
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <_ZN9__gnu_cxxmiIPhSt6vectorIhSaIhEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800e100:	b590      	push	{r4, r7, lr}
 800e102:	b083      	sub	sp, #12
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
 800e108:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 f81f 	bl	800e14e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800e110:	4603      	mov	r3, r0
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	461c      	mov	r4, r3
 800e116:	6838      	ldr	r0, [r7, #0]
 800e118:	f000 f819 	bl	800e14e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800e11c:	4603      	mov	r3, r0
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	1ae3      	subs	r3, r4, r3
 800e122:	4618      	mov	r0, r3
 800e124:	370c      	adds	r7, #12
 800e126:	46bd      	mov	sp, r7
 800e128:	bd90      	pop	{r4, r7, pc}

0800e12a <_ZSt22__uninitialized_move_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    __uninitialized_move_a(_InputIterator __first, _InputIterator __last,
 800e12a:	b580      	push	{r7, lr}
 800e12c:	b084      	sub	sp, #16
 800e12e:	af00      	add	r7, sp, #0
 800e130:	60f8      	str	r0, [r7, #12]
 800e132:	60b9      	str	r1, [r7, #8]
 800e134:	607a      	str	r2, [r7, #4]
 800e136:	603b      	str	r3, [r7, #0]
					 __result, __alloc);
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	68b9      	ldr	r1, [r7, #8]
 800e13e:	68f8      	ldr	r0, [r7, #12]
 800e140:	f000 f9c5 	bl	800e4ce <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
 800e144:	4603      	mov	r3, r0
    }
 800e146:	4618      	mov	r0, r3
 800e148:	3710      	adds	r7, #16
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}

0800e14e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800e14e:	b480      	push	{r7}
 800e150:	b083      	sub	sp, #12
 800e152:	af00      	add	r7, sp, #0
 800e154:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	4618      	mov	r0, r3
 800e15a:	370c      	adds	r7, #12
 800e15c:	46bd      	mov	sp, r7
 800e15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e162:	4770      	bx	lr

0800e164 <_ZSt13copy_backwardIPhS0_ET0_T_S2_S1_>:
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 800e164:	b590      	push	{r4, r7, lr}
 800e166:	b085      	sub	sp, #20
 800e168:	af00      	add	r7, sp, #0
 800e16a:	60f8      	str	r0, [r7, #12]
 800e16c:	60b9      	str	r1, [r7, #8]
 800e16e:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800e170:	68f8      	ldr	r0, [r7, #12]
 800e172:	f000 f9bd 	bl	800e4f0 <_ZSt12__miter_baseIPhET_S1_>
 800e176:	4604      	mov	r4, r0
 800e178:	68b8      	ldr	r0, [r7, #8]
 800e17a:	f000 f9b9 	bl	800e4f0 <_ZSt12__miter_baseIPhET_S1_>
 800e17e:	4603      	mov	r3, r0
	       __result));
 800e180:	687a      	ldr	r2, [r7, #4]
 800e182:	4619      	mov	r1, r3
 800e184:	4620      	mov	r0, r4
 800e186:	f000 f9be 	bl	800e506 <_ZSt23__copy_move_backward_a2ILb0EPhS0_ET1_T0_S2_S1_>
 800e18a:	4603      	mov	r3, r0
    }
 800e18c:	4618      	mov	r0, r3
 800e18e:	3714      	adds	r7, #20
 800e190:	46bd      	mov	sp, r7
 800e192:	bd90      	pop	{r4, r7, pc}

0800e194 <_ZSt4fillIPhhEvT_S1_RKT0_>:
    fill(_ForwardIterator __first, _ForwardIterator __last, const _Tp& __value)
 800e194:	b590      	push	{r4, r7, lr}
 800e196:	b085      	sub	sp, #20
 800e198:	af00      	add	r7, sp, #0
 800e19a:	60f8      	str	r0, [r7, #12]
 800e19c:	60b9      	str	r1, [r7, #8]
 800e19e:	607a      	str	r2, [r7, #4]
      std::__fill_a(std::__niter_base(__first), std::__niter_base(__last),
 800e1a0:	68f8      	ldr	r0, [r7, #12]
 800e1a2:	f000 f9cc 	bl	800e53e <_ZSt12__niter_baseIPhET_S1_>
 800e1a6:	4604      	mov	r4, r0
 800e1a8:	68b8      	ldr	r0, [r7, #8]
 800e1aa:	f000 f9c8 	bl	800e53e <_ZSt12__niter_baseIPhET_S1_>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	687a      	ldr	r2, [r7, #4]
 800e1b2:	4619      	mov	r1, r3
 800e1b4:	4620      	mov	r0, r4
 800e1b6:	f000 f9cd 	bl	800e554 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
    }
 800e1ba:	bf00      	nop
 800e1bc:	3714      	adds	r7, #20
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd90      	pop	{r4, r7, pc}

0800e1c2 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800e1c2:	b590      	push	{r4, r7, lr}
 800e1c4:	b087      	sub	sp, #28
 800e1c6:	af00      	add	r7, sp, #0
 800e1c8:	60f8      	str	r0, [r7, #12]
 800e1ca:	60b9      	str	r1, [r7, #8]
 800e1cc:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800e1ce:	68f8      	ldr	r0, [r7, #12]
 800e1d0:	f000 f9da 	bl	800e588 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 800e1d4:	4604      	mov	r4, r0
 800e1d6:	68f8      	ldr	r0, [r7, #12]
 800e1d8:	f7ff f917 	bl	800d40a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	1ae2      	subs	r2, r4, r3
 800e1e0:	68bb      	ldr	r3, [r7, #8]
 800e1e2:	429a      	cmp	r2, r3
 800e1e4:	bf34      	ite	cc
 800e1e6:	2301      	movcc	r3, #1
 800e1e8:	2300      	movcs	r3, #0
 800e1ea:	b2db      	uxtb	r3, r3
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d002      	beq.n	800e1f6 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f001 fc3b 	bl	800fa6c <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + std::max(size(), __n);
 800e1f6:	68f8      	ldr	r0, [r7, #12]
 800e1f8:	f7ff f907 	bl	800d40a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800e1fc:	4604      	mov	r4, r0
 800e1fe:	68f8      	ldr	r0, [r7, #12]
 800e200:	f7ff f903 	bl	800d40a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800e204:	4603      	mov	r3, r0
 800e206:	613b      	str	r3, [r7, #16]
 800e208:	f107 0208 	add.w	r2, r7, #8
 800e20c:	f107 0310 	add.w	r3, r7, #16
 800e210:	4611      	mov	r1, r2
 800e212:	4618      	mov	r0, r3
 800e214:	f000 f938 	bl	800e488 <_ZSt3maxIjERKT_S2_S2_>
 800e218:	4603      	mov	r3, r0
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	4423      	add	r3, r4
 800e21e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800e220:	68f8      	ldr	r0, [r7, #12]
 800e222:	f7ff f8f2 	bl	800d40a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800e226:	4602      	mov	r2, r0
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d806      	bhi.n	800e23c <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x7a>
 800e22e:	68f8      	ldr	r0, [r7, #12]
 800e230:	f000 f9aa 	bl	800e588 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 800e234:	4602      	mov	r2, r0
 800e236:	697b      	ldr	r3, [r7, #20]
 800e238:	429a      	cmp	r2, r3
 800e23a:	d204      	bcs.n	800e246 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x84>
 800e23c:	68f8      	ldr	r0, [r7, #12]
 800e23e:	f000 f9a3 	bl	800e588 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>
 800e242:	4603      	mov	r3, r0
 800e244:	e000      	b.n	800e248 <_ZNKSt6vectorIhSaIhEE12_M_check_lenEjPKc+0x86>
 800e246:	697b      	ldr	r3, [r7, #20]
      }
 800e248:	4618      	mov	r0, r3
 800e24a:	371c      	adds	r7, #28
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd90      	pop	{r4, r7, pc}

0800e250 <_ZNSt6vectorIhSaIhEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800e250:	b580      	push	{r7, lr}
 800e252:	b084      	sub	sp, #16
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800e258:	687a      	ldr	r2, [r7, #4]
 800e25a:	f107 030c 	add.w	r3, r7, #12
 800e25e:	4611      	mov	r1, r2
 800e260:	4618      	mov	r0, r3
 800e262:	f7ff fc4b 	bl	800dafc <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	4618      	mov	r0, r3
 800e26a:	3710      	adds	r7, #16
 800e26c:	46bd      	mov	sp, r7
 800e26e:	bd80      	pop	{r7, pc}

0800e270 <_ZSt34__uninitialized_move_if_noexcept_aIPhS0_SaIhEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800e270:	b580      	push	{r7, lr}
 800e272:	b084      	sub	sp, #16
 800e274:	af00      	add	r7, sp, #0
 800e276:	60f8      	str	r0, [r7, #12]
 800e278:	60b9      	str	r1, [r7, #8]
 800e27a:	607a      	str	r2, [r7, #4]
 800e27c:	603b      	str	r3, [r7, #0]
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	687a      	ldr	r2, [r7, #4]
 800e282:	68b9      	ldr	r1, [r7, #8]
 800e284:	68f8      	ldr	r0, [r7, #12]
 800e286:	f000 f922 	bl	800e4ce <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
 800e28a:	4603      	mov	r3, r0
    }
 800e28c:	4618      	mov	r0, r3
 800e28e:	3710      	adds	r7, #16
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}

0800e294 <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 800e294:	b580      	push	{r7, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	af00      	add	r7, sp, #0
 800e29a:	60f8      	str	r0, [r7, #12]
 800e29c:	60b9      	str	r1, [r7, #8]
 800e29e:	607a      	str	r2, [r7, #4]
      { ::operator delete(__p); }
 800e2a0:	68b8      	ldr	r0, [r7, #8]
 800e2a2:	f000 fd71 	bl	800ed88 <_ZdlPv>
 800e2a6:	bf00      	nop
 800e2a8:	3710      	adds	r7, #16
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}

0800e2ae <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800e2ae:	b480      	push	{r7}
 800e2b0:	b083      	sub	sp, #12
 800e2b2:	af00      	add	r7, sp, #0
 800e2b4:	6078      	str	r0, [r7, #4]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	370c      	adds	r7, #12
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr

0800e2c4 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE10deallocateEPS3_j>:
      deallocate(pointer __p, size_type)
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	60f8      	str	r0, [r7, #12]
 800e2cc:	60b9      	str	r1, [r7, #8]
 800e2ce:	607a      	str	r2, [r7, #4]
      { ::operator delete(__p); }
 800e2d0:	68b8      	ldr	r0, [r7, #8]
 800e2d2:	f000 fd59 	bl	800ed88 <_ZdlPv>
 800e2d6:	bf00      	nop
 800e2d8:	3710      	adds	r7, #16
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}

0800e2de <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>:
   *  @brief Same as C++11 std::addressof
   *  @ingroup utilities
   */
  template<typename _Tp>
    inline _Tp*
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800e2de:	b480      	push	{r7}
 800e2e0:	b083      	sub	sp, #12
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	6078      	str	r0, [r7, #4]
    {
      return reinterpret_cast<_Tp*>
	(&const_cast<char&>(reinterpret_cast<const volatile char&>(__r)));
 800e2e6:	687b      	ldr	r3, [r7, #4]
    }
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	370c      	adds	r7, #12
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr

0800e2f4 <_ZSt8_DestroyISt6vectorIhSaIhEEEvPT_>:
    _Destroy(_Tp* __pointer)
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
    { __pointer->~_Tp(); }
 800e2fc:	6878      	ldr	r0, [r7, #4]
 800e2fe:	f7fe fe42 	bl	800cf86 <_ZNSt6vectorIhSaIhEED1Ev>
 800e302:	bf00      	nop
 800e304:	3708      	adds	r7, #8
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}

0800e30a <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800e30a:	b480      	push	{r7}
 800e30c:	b083      	sub	sp, #12
 800e30e:	af00      	add	r7, sp, #0
 800e310:	6078      	str	r0, [r7, #4]
 800e312:	6039      	str	r1, [r7, #0]
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	4618      	mov	r0, r3
 800e318:	370c      	adds	r7, #12
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr

0800e322 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE8allocateERS1_j>:
    allocate(_Alloc& __a, size_type __n)
 800e322:	b580      	push	{r7, lr}
 800e324:	b082      	sub	sp, #8
 800e326:	af00      	add	r7, sp, #0
 800e328:	6078      	str	r0, [r7, #4]
 800e32a:	6039      	str	r1, [r7, #0]
    { return __a.allocate(__n); }
 800e32c:	2200      	movs	r2, #0
 800e32e:	6839      	ldr	r1, [r7, #0]
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f000 f93a 	bl	800e5aa <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 800e336:	4603      	mov	r3, r0
 800e338:	4618      	mov	r0, r3
 800e33a:	3708      	adds	r7, #8
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <_ZNSt22__uninitialized_fill_nILb1EE15__uninit_fill_nIPhjhEET_S3_T0_RKT1_>:
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	607a      	str	r2, [r7, #4]
        { return std::fill_n(__first, __n, __x); }
 800e34c:	687a      	ldr	r2, [r7, #4]
 800e34e:	68b9      	ldr	r1, [r7, #8]
 800e350:	68f8      	ldr	r0, [r7, #12]
 800e352:	f000 f946 	bl	800e5e2 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>
 800e356:	4603      	mov	r3, r0
 800e358:	4618      	mov	r0, r3
 800e35a:	3710      	adds	r7, #16
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}

0800e360 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 800e360:	b590      	push	{r4, r7, lr}
 800e362:	b085      	sub	sp, #20
 800e364:	af00      	add	r7, sp, #0
 800e366:	60f8      	str	r0, [r7, #12]
 800e368:	60b9      	str	r1, [r7, #8]
 800e36a:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800e36c:	68f8      	ldr	r0, [r7, #12]
 800e36e:	f000 f94c 	bl	800e60a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 800e372:	4604      	mov	r4, r0
 800e374:	68b8      	ldr	r0, [r7, #8]
 800e376:	f000 f948 	bl	800e60a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 800e37a:	4603      	mov	r3, r0
	       __result));
 800e37c:	687a      	ldr	r2, [r7, #4]
 800e37e:	4619      	mov	r1, r3
 800e380:	4620      	mov	r0, r4
 800e382:	f000 f94d 	bl	800e620 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>
 800e386:	4603      	mov	r3, r0
    }
 800e388:	4618      	mov	r0, r3
 800e38a:	3714      	adds	r7, #20
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd90      	pop	{r4, r7, pc}

0800e390 <_ZSt22__uninitialized_copy_aIPSt6vectorIhSaIhEES3_S2_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800e390:	b580      	push	{r7, lr}
 800e392:	b084      	sub	sp, #16
 800e394:	af00      	add	r7, sp, #0
 800e396:	60f8      	str	r0, [r7, #12]
 800e398:	60b9      	str	r1, [r7, #8]
 800e39a:	607a      	str	r2, [r7, #4]
 800e39c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800e39e:	687a      	ldr	r2, [r7, #4]
 800e3a0:	68b9      	ldr	r1, [r7, #8]
 800e3a2:	68f8      	ldr	r0, [r7, #12]
 800e3a4:	f000 f958 	bl	800e658 <_ZSt18uninitialized_copyIPSt6vectorIhSaIhEES3_ET0_T_S5_S4_>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	3710      	adds	r7, #16
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}

0800e3b2 <_ZSt12__miter_baseIPSt6vectorIhSaIhEEET_S4_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800e3b2:	b480      	push	{r7}
 800e3b4:	b083      	sub	sp, #12
 800e3b6:	af00      	add	r7, sp, #0
 800e3b8:	6078      	str	r0, [r7, #4]
    { return __it; }
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	4618      	mov	r0, r3
 800e3be:	370c      	adds	r7, #12
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c6:	4770      	bx	lr

0800e3c8 <_ZSt23__copy_move_backward_a2ILb0EPSt6vectorIhSaIhEES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800e3c8:	b5b0      	push	{r4, r5, r7, lr}
 800e3ca:	b084      	sub	sp, #16
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	60b9      	str	r1, [r7, #8]
 800e3d2:	607a      	str	r2, [r7, #4]
		  (std::__niter_base(__first), std::__niter_base(__last),
 800e3d4:	68f8      	ldr	r0, [r7, #12]
 800e3d6:	f000 f813 	bl	800e400 <_ZSt12__niter_baseIPSt6vectorIhSaIhEEET_S4_>
 800e3da:	4604      	mov	r4, r0
 800e3dc:	68b8      	ldr	r0, [r7, #8]
 800e3de:	f000 f80f 	bl	800e400 <_ZSt12__niter_baseIPSt6vectorIhSaIhEEET_S4_>
 800e3e2:	4605      	mov	r5, r0
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f000 f80b 	bl	800e400 <_ZSt12__niter_baseIPSt6vectorIhSaIhEEET_S4_>
 800e3ea:	4603      	mov	r3, r0
		   std::__niter_base(__result)));
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	4629      	mov	r1, r5
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	f000 f943 	bl	800e67c <_ZSt22__copy_move_backward_aILb0EPSt6vectorIhSaIhEES3_ET1_T0_S5_S4_>
 800e3f6:	4603      	mov	r3, r0
    }
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3710      	adds	r7, #16
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bdb0      	pop	{r4, r5, r7, pc}

0800e400 <_ZSt12__niter_baseIPSt6vectorIhSaIhEEET_S4_>:
    __niter_base(_Iterator __it)
 800e400:	b480      	push	{r7}
 800e402:	b083      	sub	sp, #12
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
    { return __it; }
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	4618      	mov	r0, r3
 800e40c:	370c      	adds	r7, #12
 800e40e:	46bd      	mov	sp, r7
 800e410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e414:	4770      	bx	lr

0800e416 <_ZSt8__fill_aIPSt6vectorIhSaIhEES2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SB_RKS7_>:
    __fill_a(_ForwardIterator __first, _ForwardIterator __last,
 800e416:	b580      	push	{r7, lr}
 800e418:	b084      	sub	sp, #16
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	60f8      	str	r0, [r7, #12]
 800e41e:	60b9      	str	r1, [r7, #8]
 800e420:	607a      	str	r2, [r7, #4]
      for (; __first != __last; ++__first)
 800e422:	68fa      	ldr	r2, [r7, #12]
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	429a      	cmp	r2, r3
 800e428:	d007      	beq.n	800e43a <_ZSt8__fill_aIPSt6vectorIhSaIhEES2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SB_RKS7_+0x24>
	*__first = __value;
 800e42a:	6879      	ldr	r1, [r7, #4]
 800e42c:	68f8      	ldr	r0, [r7, #12]
 800e42e:	f000 f937 	bl	800e6a0 <_ZNSt6vectorIhSaIhEEaSERKS1_>
      for (; __first != __last; ++__first)
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	330c      	adds	r3, #12
 800e436:	60fb      	str	r3, [r7, #12]
 800e438:	e7f3      	b.n	800e422 <_ZSt8__fill_aIPSt6vectorIhSaIhEES2_EN9__gnu_cxx11__enable_ifIXntsrSt11__is_scalarIT0_E7__valueEvE6__typeET_SB_RKS7_+0xc>
    }
 800e43a:	bf00      	nop
 800e43c:	3710      	adds	r7, #16
 800e43e:	46bd      	mov	sp, r7
 800e440:	bd80      	pop	{r7, pc}

0800e442 <_ZSt20uninitialized_fill_nIPSt6vectorIhSaIhEEjS2_ET_S4_T0_RKT1_>:
    uninitialized_fill_n(_ForwardIterator __first, _Size __n, const _Tp& __x)
 800e442:	b580      	push	{r7, lr}
 800e444:	b086      	sub	sp, #24
 800e446:	af00      	add	r7, sp, #0
 800e448:	60f8      	str	r0, [r7, #12]
 800e44a:	60b9      	str	r1, [r7, #8]
 800e44c:	607a      	str	r2, [r7, #4]
      const bool __assignable = true;
 800e44e:	2301      	movs	r3, #1
 800e450:	75fb      	strb	r3, [r7, #23]
	__uninit_fill_n(__first, __n, __x);
 800e452:	687a      	ldr	r2, [r7, #4]
 800e454:	68b9      	ldr	r1, [r7, #8]
 800e456:	68f8      	ldr	r0, [r7, #12]
 800e458:	f000 f9cb 	bl	800e7f2 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIhSaIhEEjS4_EET_S6_T0_RKT1_>
 800e45c:	4603      	mov	r3, r0
    }
 800e45e:	4618      	mov	r0, r3
 800e460:	3718      	adds	r7, #24
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}

0800e466 <_ZNKSt6vectorIS_IhSaIhEESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800e466:	b580      	push	{r7, lr}
 800e468:	b082      	sub	sp, #8
 800e46a:	af00      	add	r7, sp, #0
 800e46c:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	4618      	mov	r0, r3
 800e472:	f000 f9f8 	bl	800e866 <_ZNKSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>
 800e476:	4603      	mov	r3, r0
 800e478:	4618      	mov	r0, r3
 800e47a:	f000 f9e8 	bl	800e84e <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIhSaIhEEEE8max_sizeERKS4_>
 800e47e:	4603      	mov	r3, r0
 800e480:	4618      	mov	r0, r3
 800e482:	3708      	adds	r7, #8
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}

0800e488 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800e488:	b480      	push	{r7}
 800e48a:	b083      	sub	sp, #12
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
 800e490:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681a      	ldr	r2, [r3, #0]
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d201      	bcs.n	800e4a2 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	e000      	b.n	800e4a4 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800e4a2:	687b      	ldr	r3, [r7, #4]
    }
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	370c      	adds	r7, #12
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ae:	4770      	bx	lr

0800e4b0 <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIhSaIhEEEE8allocateERS4_j>:
    allocate(_Alloc& __a, size_type __n)
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
 800e4b8:	6039      	str	r1, [r7, #0]
    { return __a.allocate(__n); }
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	6839      	ldr	r1, [r7, #0]
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f000 f9dc 	bl	800e87c <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8allocateEjPKv>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	3708      	adds	r7, #8
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	bd80      	pop	{r7, pc}

0800e4ce <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800e4ce:	b580      	push	{r7, lr}
 800e4d0:	b084      	sub	sp, #16
 800e4d2:	af00      	add	r7, sp, #0
 800e4d4:	60f8      	str	r0, [r7, #12]
 800e4d6:	60b9      	str	r1, [r7, #8]
 800e4d8:	607a      	str	r2, [r7, #4]
 800e4da:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800e4dc:	687a      	ldr	r2, [r7, #4]
 800e4de:	68b9      	ldr	r1, [r7, #8]
 800e4e0:	68f8      	ldr	r0, [r7, #12]
 800e4e2:	f000 f9ec 	bl	800e8be <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>
 800e4e6:	4603      	mov	r3, r0
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	3710      	adds	r7, #16
 800e4ec:	46bd      	mov	sp, r7
 800e4ee:	bd80      	pop	{r7, pc}

0800e4f0 <_ZSt12__miter_baseIPhET_S1_>:
    __miter_base(_Iterator __it)
 800e4f0:	b480      	push	{r7}
 800e4f2:	b083      	sub	sp, #12
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
    { return __it; }
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	370c      	adds	r7, #12
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr

0800e506 <_ZSt23__copy_move_backward_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800e506:	b5b0      	push	{r4, r5, r7, lr}
 800e508:	b084      	sub	sp, #16
 800e50a:	af00      	add	r7, sp, #0
 800e50c:	60f8      	str	r0, [r7, #12]
 800e50e:	60b9      	str	r1, [r7, #8]
 800e510:	607a      	str	r2, [r7, #4]
		  (std::__niter_base(__first), std::__niter_base(__last),
 800e512:	68f8      	ldr	r0, [r7, #12]
 800e514:	f000 f813 	bl	800e53e <_ZSt12__niter_baseIPhET_S1_>
 800e518:	4604      	mov	r4, r0
 800e51a:	68b8      	ldr	r0, [r7, #8]
 800e51c:	f000 f80f 	bl	800e53e <_ZSt12__niter_baseIPhET_S1_>
 800e520:	4605      	mov	r5, r0
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	f000 f80b 	bl	800e53e <_ZSt12__niter_baseIPhET_S1_>
 800e528:	4603      	mov	r3, r0
		   std::__niter_base(__result)));
 800e52a:	461a      	mov	r2, r3
 800e52c:	4629      	mov	r1, r5
 800e52e:	4620      	mov	r0, r4
 800e530:	f000 f9d7 	bl	800e8e2 <_ZSt22__copy_move_backward_aILb0EPhS0_ET1_T0_S2_S1_>
 800e534:	4603      	mov	r3, r0
    }
 800e536:	4618      	mov	r0, r3
 800e538:	3710      	adds	r7, #16
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bdb0      	pop	{r4, r5, r7, pc}

0800e53e <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 800e53e:	b480      	push	{r7}
 800e540:	b083      	sub	sp, #12
 800e542:	af00      	add	r7, sp, #0
 800e544:	6078      	str	r0, [r7, #4]
    { return __it; }
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	4618      	mov	r0, r3
 800e54a:	370c      	adds	r7, #12
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr

0800e554 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>:
    __fill_a(_Tp* __first, _Tp* __last, const _Tp& __c)
 800e554:	b580      	push	{r7, lr}
 800e556:	b086      	sub	sp, #24
 800e558:	af00      	add	r7, sp, #0
 800e55a:	60f8      	str	r0, [r7, #12]
 800e55c:	60b9      	str	r1, [r7, #8]
 800e55e:	607a      	str	r2, [r7, #4]
      const _Tp __tmp = __c;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	75fb      	strb	r3, [r7, #23]
      if (const size_t __len = __last - __first)
 800e566:	68ba      	ldr	r2, [r7, #8]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	1ad3      	subs	r3, r2, r3
 800e56c:	613b      	str	r3, [r7, #16]
 800e56e:	693b      	ldr	r3, [r7, #16]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d005      	beq.n	800e580 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_+0x2c>
	__builtin_memset(__first, static_cast<unsigned char>(__tmp), __len);
 800e574:	7dfb      	ldrb	r3, [r7, #23]
 800e576:	693a      	ldr	r2, [r7, #16]
 800e578:	4619      	mov	r1, r3
 800e57a:	68f8      	ldr	r0, [r7, #12]
 800e57c:	f002 fd8e 	bl	801109c <memset>
    }
 800e580:	bf00      	nop
 800e582:	3718      	adds	r7, #24
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <_ZNKSt6vectorIhSaIhEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800e588:	b580      	push	{r7, lr}
 800e58a:	b082      	sub	sp, #8
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::max_size(_M_get_Tp_allocator()); }
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	4618      	mov	r0, r3
 800e594:	f7fe ff54 	bl	800d440 <_ZNKSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800e598:	4603      	mov	r3, r0
 800e59a:	4618      	mov	r0, r3
 800e59c:	f000 f9b3 	bl	800e906 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE8max_sizeERKS1_>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3708      	adds	r7, #8
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}

0800e5aa <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = 0)
 800e5aa:	b580      	push	{r7, lr}
 800e5ac:	b084      	sub	sp, #16
 800e5ae:	af00      	add	r7, sp, #0
 800e5b0:	60f8      	str	r0, [r7, #12]
 800e5b2:	60b9      	str	r1, [r7, #8]
 800e5b4:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800e5b6:	68f8      	ldr	r0, [r7, #12]
 800e5b8:	f000 f9b1 	bl	800e91e <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 800e5bc:	4602      	mov	r2, r0
 800e5be:	68bb      	ldr	r3, [r7, #8]
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	bf34      	ite	cc
 800e5c4:	2301      	movcc	r3, #1
 800e5c6:	2300      	movcs	r3, #0
 800e5c8:	b2db      	uxtb	r3, r3
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d001      	beq.n	800e5d2 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800e5ce:	f001 fa25 	bl	800fa1c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e5d2:	68b8      	ldr	r0, [r7, #8]
 800e5d4:	f000 fca0 	bl	800ef18 <_Znwj>
 800e5d8:	4603      	mov	r3, r0
      }
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3710      	adds	r7, #16
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}

0800e5e2 <_ZSt6fill_nIPhjhET_S1_T0_RKT1_>:
   *  _GLIBCXX_RESOLVE_LIB_DEFECTS
   *  DR 865. More algorithms that throw away information
  */
  template<typename _OI, typename _Size, typename _Tp>
    inline _OI
    fill_n(_OI __first, _Size __n, const _Tp& __value)
 800e5e2:	b580      	push	{r7, lr}
 800e5e4:	b084      	sub	sp, #16
 800e5e6:	af00      	add	r7, sp, #0
 800e5e8:	60f8      	str	r0, [r7, #12]
 800e5ea:	60b9      	str	r1, [r7, #8]
 800e5ec:	607a      	str	r2, [r7, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_OutputIteratorConcept<_OI, _Tp>)

      return _OI(std::__fill_n_a(std::__niter_base(__first), __n, __value));
 800e5ee:	68f8      	ldr	r0, [r7, #12]
 800e5f0:	f7ff ffa5 	bl	800e53e <_ZSt12__niter_baseIPhET_S1_>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	687a      	ldr	r2, [r7, #4]
 800e5f8:	68b9      	ldr	r1, [r7, #8]
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f000 f99b 	bl	800e936 <_ZSt10__fill_n_aIjhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_>
 800e600:	4603      	mov	r3, r0
    }
 800e602:	4618      	mov	r0, r3
 800e604:	3710      	adds	r7, #16
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}

0800e60a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>:
    __miter_base(_Iterator __it)
 800e60a:	b480      	push	{r7}
 800e60c:	b083      	sub	sp, #12
 800e60e:	af00      	add	r7, sp, #0
 800e610:	6078      	str	r0, [r7, #4]
    { return __it; }
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	4618      	mov	r0, r3
 800e616:	370c      	adds	r7, #12
 800e618:	46bd      	mov	sp, r7
 800e61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61e:	4770      	bx	lr

0800e620 <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhET1_T0_SA_S9_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800e620:	b5b0      	push	{r4, r5, r7, lr}
 800e622:	b084      	sub	sp, #16
 800e624:	af00      	add	r7, sp, #0
 800e626:	60f8      	str	r0, [r7, #12]
 800e628:	60b9      	str	r1, [r7, #8]
 800e62a:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800e62c:	68f8      	ldr	r0, [r7, #12]
 800e62e:	f000 f997 	bl	800e960 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800e632:	4604      	mov	r4, r0
 800e634:	68b8      	ldr	r0, [r7, #8]
 800e636:	f000 f993 	bl	800e960 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800e63a:	4605      	mov	r5, r0
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f7ff ff7e 	bl	800e53e <_ZSt12__niter_baseIPhET_S1_>
 800e642:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800e644:	461a      	mov	r2, r3
 800e646:	4629      	mov	r1, r5
 800e648:	4620      	mov	r0, r4
 800e64a:	f000 f997 	bl	800e97c <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>
 800e64e:	4603      	mov	r3, r0
    }
 800e650:	4618      	mov	r0, r3
 800e652:	3710      	adds	r7, #16
 800e654:	46bd      	mov	sp, r7
 800e656:	bdb0      	pop	{r4, r5, r7, pc}

0800e658 <_ZSt18uninitialized_copyIPSt6vectorIhSaIhEES3_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800e658:	b580      	push	{r7, lr}
 800e65a:	b086      	sub	sp, #24
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	607a      	str	r2, [r7, #4]
      const bool __assignable = true;
 800e664:	2301      	movs	r3, #1
 800e666:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	68b9      	ldr	r1, [r7, #8]
 800e66c:	68f8      	ldr	r0, [r7, #12]
 800e66e:	f000 f997 	bl	800e9a0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIhSaIhEES5_EET0_T_S7_S6_>
 800e672:	4603      	mov	r3, r0
    }
 800e674:	4618      	mov	r0, r3
 800e676:	3718      	adds	r7, #24
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <_ZSt22__copy_move_backward_aILb0EPSt6vectorIhSaIhEES3_ET1_T0_S5_S4_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 800e67c:	b580      	push	{r7, lr}
 800e67e:	b086      	sub	sp, #24
 800e680:	af00      	add	r7, sp, #0
 800e682:	60f8      	str	r0, [r7, #12]
 800e684:	60b9      	str	r1, [r7, #8]
 800e686:	607a      	str	r2, [r7, #4]
			     && __are_same<_ValueType1, _ValueType2>::__value);
 800e688:	2300      	movs	r3, #0
 800e68a:	75fb      	strb	r3, [r7, #23]
								 __result);
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	68b9      	ldr	r1, [r7, #8]
 800e690:	68f8      	ldr	r0, [r7, #12]
 800e692:	f000 f9b5 	bl	800ea00 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt6vectorIhSaIhEES6_EET0_T_S8_S7_>
 800e696:	4603      	mov	r3, r0
    }
 800e698:	4618      	mov	r0, r3
 800e69a:	3718      	adds	r7, #24
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <_ZNSt6vectorIhSaIhEEaSERKS1_>:
    vector<_Tp, _Alloc>::
 800e6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6a2:	b085      	sub	sp, #20
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	6039      	str	r1, [r7, #0]
      if (&__x != this)
 800e6aa:	683a      	ldr	r2, [r7, #0]
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	f000 809a 	beq.w	800e7e8 <_ZNSt6vectorIhSaIhEEaSERKS1_+0x148>
	  const size_type __xlen = __x.size();
 800e6b4:	6838      	ldr	r0, [r7, #0]
 800e6b6:	f7fe fea8 	bl	800d40a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800e6ba:	60f8      	str	r0, [r7, #12]
	  if (__xlen > capacity())
 800e6bc:	6878      	ldr	r0, [r7, #4]
 800e6be:	f000 f9c5 	bl	800ea4c <_ZNKSt6vectorIhSaIhEE8capacityEv>
 800e6c2:	4602      	mov	r2, r0
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	429a      	cmp	r2, r3
 800e6c8:	bf34      	ite	cc
 800e6ca:	2301      	movcc	r3, #1
 800e6cc:	2300      	movcs	r3, #0
 800e6ce:	b2db      	uxtb	r3, r3
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d032      	beq.n	800e73a <_ZNSt6vectorIhSaIhEEaSERKS1_+0x9a>
						   __x.end());
 800e6d4:	6838      	ldr	r0, [r7, #0]
 800e6d6:	f7fe febe 	bl	800d456 <_ZNKSt6vectorIhSaIhEE5beginEv>
 800e6da:	4604      	mov	r4, r0
 800e6dc:	6838      	ldr	r0, [r7, #0]
 800e6de:	f7fe fece 	bl	800d47e <_ZNKSt6vectorIhSaIhEE3endEv>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	4622      	mov	r2, r4
 800e6e6:	68f9      	ldr	r1, [r7, #12]
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f000 f9bf 	bl	800ea6c <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>
 800e6ee:	4603      	mov	r3, r0
 800e6f0:	60bb      	str	r3, [r7, #8]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	681c      	ldr	r4, [r3, #0]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7fe fdc9 	bl	800d294 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800e702:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800e704:	461a      	mov	r2, r3
 800e706:	4629      	mov	r1, r5
 800e708:	4620      	mov	r0, r4
 800e70a:	f7fe fdce 	bl	800d2aa <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
	      _M_deallocate(this->_M_impl._M_start,
 800e70e:	6878      	ldr	r0, [r7, #4]
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6819      	ldr	r1, [r3, #0]
			    this->_M_impl._M_end_of_storage
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	689b      	ldr	r3, [r3, #8]
			    - this->_M_impl._M_start);
 800e718:	461a      	mov	r2, r3
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	1ad3      	subs	r3, r2, r3
	      _M_deallocate(this->_M_impl._M_start,
 800e720:	461a      	mov	r2, r3
 800e722:	f7fe ff70 	bl	800d606 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      this->_M_impl._M_start = __tmp;
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	68ba      	ldr	r2, [r7, #8]
 800e72a:	601a      	str	r2, [r3, #0]
	      this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __xlen;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681a      	ldr	r2, [r3, #0]
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	441a      	add	r2, r3
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	609a      	str	r2, [r3, #8]
 800e738:	e050      	b.n	800e7dc <_ZNSt6vectorIhSaIhEEaSERKS1_+0x13c>
	  else if (size() >= __xlen)
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f7fe fe65 	bl	800d40a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800e740:	4602      	mov	r2, r0
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	429a      	cmp	r2, r3
 800e746:	bf2c      	ite	cs
 800e748:	2301      	movcs	r3, #1
 800e74a:	2300      	movcc	r3, #0
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d020      	beq.n	800e794 <_ZNSt6vectorIhSaIhEEaSERKS1_+0xf4>
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800e752:	6838      	ldr	r0, [r7, #0]
 800e754:	f7fe fe7f 	bl	800d456 <_ZNKSt6vectorIhSaIhEE5beginEv>
 800e758:	4604      	mov	r4, r0
 800e75a:	6838      	ldr	r0, [r7, #0]
 800e75c:	f7fe fe8f 	bl	800d47e <_ZNKSt6vectorIhSaIhEE3endEv>
 800e760:	4605      	mov	r5, r0
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f7ff fd74 	bl	800e250 <_ZNSt6vectorIhSaIhEE5beginEv>
 800e768:	4603      	mov	r3, r0
 800e76a:	461a      	mov	r2, r3
 800e76c:	4629      	mov	r1, r5
 800e76e:	4620      	mov	r0, r4
 800e770:	f000 f9aa 	bl	800eac8 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>
 800e774:	4604      	mov	r4, r0
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	f7fe fef6 	bl	800d568 <_ZNSt6vectorIhSaIhEE3endEv>
 800e77c:	4605      	mov	r5, r0
			    end(), _M_get_Tp_allocator());
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	4618      	mov	r0, r3
 800e782:	f7fe fd87 	bl	800d294 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800e786:	4603      	mov	r3, r0
	      std::_Destroy(std::copy(__x.begin(), __x.end(), begin()),
 800e788:	461a      	mov	r2, r3
 800e78a:	4629      	mov	r1, r5
 800e78c:	4620      	mov	r0, r4
 800e78e:	f000 f9b3 	bl	800eaf8 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>
 800e792:	e023      	b.n	800e7dc <_ZNSt6vectorIhSaIhEEaSERKS1_+0x13c>
	      std::copy(__x._M_impl._M_start, __x._M_impl._M_start + size(),
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	681d      	ldr	r5, [r3, #0]
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	681c      	ldr	r4, [r3, #0]
 800e79c:	6878      	ldr	r0, [r7, #4]
 800e79e:	f7fe fe34 	bl	800d40a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800e7a2:	4603      	mov	r3, r0
 800e7a4:	18e1      	adds	r1, r4, r3
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	4628      	mov	r0, r5
 800e7ae:	f000 f9b1 	bl	800eb14 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	681c      	ldr	r4, [r3, #0]
 800e7b6:	6878      	ldr	r0, [r7, #4]
 800e7b8:	f7fe fe27 	bl	800d40a <_ZNKSt6vectorIhSaIhEE4sizeEv>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	441c      	add	r4, r3
					  __x._M_impl._M_finish,
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	685d      	ldr	r5, [r3, #4]
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	685e      	ldr	r6, [r3, #4]
					  _M_get_Tp_allocator());
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7fe fd62 	bl	800d294 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800e7d0:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__x._M_impl._M_start + size(),
 800e7d2:	4632      	mov	r2, r6
 800e7d4:	4629      	mov	r1, r5
 800e7d6:	4620      	mov	r0, r4
 800e7d8:	f7ff fe79 	bl	800e4ce <_ZSt22__uninitialized_copy_aIPhS0_hET0_T_S2_S1_RSaIT1_E>
	  this->_M_impl._M_finish = this->_M_impl._M_start + __xlen;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681a      	ldr	r2, [r3, #0]
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	441a      	add	r2, r3
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	605a      	str	r2, [r3, #4]
      return *this;
 800e7e8:	687b      	ldr	r3, [r7, #4]
    }
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3714      	adds	r7, #20
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e7f2 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIhSaIhEEjS4_EET_S6_T0_RKT1_>:
        __uninit_fill_n(_ForwardIterator __first, _Size __n,
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b086      	sub	sp, #24
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	60f8      	str	r0, [r7, #12]
 800e7fa:	60b9      	str	r1, [r7, #8]
 800e7fc:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __first;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	617b      	str	r3, [r7, #20]
	      for (; __n > 0; --__n, ++__cur)
 800e802:	68bb      	ldr	r3, [r7, #8]
 800e804:	2b00      	cmp	r3, #0
 800e806:	d00e      	beq.n	800e826 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIhSaIhEEjS4_EET_S6_T0_RKT1_+0x34>
		std::_Construct(std::__addressof(*__cur), __x);
 800e808:	6978      	ldr	r0, [r7, #20]
 800e80a:	f7ff fd68 	bl	800e2de <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>
 800e80e:	4603      	mov	r3, r0
 800e810:	6879      	ldr	r1, [r7, #4]
 800e812:	4618      	mov	r0, r3
 800e814:	f000 f996 	bl	800eb44 <_ZSt10_ConstructISt6vectorIhSaIhEES2_EvPT_RKT0_>
	      for (; __n > 0; --__n, ++__cur)
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	3b01      	subs	r3, #1
 800e81c:	60bb      	str	r3, [r7, #8]
 800e81e:	697b      	ldr	r3, [r7, #20]
 800e820:	330c      	adds	r3, #12
 800e822:	617b      	str	r3, [r7, #20]
 800e824:	e7ed      	b.n	800e802 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIhSaIhEEjS4_EET_S6_T0_RKT1_+0x10>
	      return __cur;
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	e00d      	b.n	800e846 <_ZNSt22__uninitialized_fill_nILb0EE15__uninit_fill_nIPSt6vectorIhSaIhEEjS4_EET_S6_T0_RKT1_+0x54>
 800e82a:	4603      	mov	r3, r0
	  __catch(...)
 800e82c:	4618      	mov	r0, r3
 800e82e:	f000 fab3 	bl	800ed98 <__cxa_begin_catch>
	      std::_Destroy(__first, __cur);
 800e832:	6979      	ldr	r1, [r7, #20]
 800e834:	68f8      	ldr	r0, [r7, #12]
 800e836:	f7fe ff3a 	bl	800d6ae <_ZSt8_DestroyIPSt6vectorIhSaIhEEEvT_S4_>
	      __throw_exception_again;
 800e83a:	f000 fc95 	bl	800f168 <__cxa_rethrow>
	  __catch(...)
 800e83e:	f000 fae9 	bl	800ee14 <__cxa_end_catch>
 800e842:	f000 fced 	bl	800f220 <__cxa_end_cleanup>
	}
 800e846:	4618      	mov	r0, r3
 800e848:	3718      	adds	r7, #24
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}

0800e84e <_ZN9__gnu_cxx14__alloc_traitsISaISt6vectorIhSaIhEEEE8max_sizeERKS4_>:
    static size_type max_size(const _Alloc& __a)
 800e84e:	b580      	push	{r7, lr}
 800e850:	b082      	sub	sp, #8
 800e852:	af00      	add	r7, sp, #0
 800e854:	6078      	str	r0, [r7, #4]
    { return __a.max_size(); }
 800e856:	6878      	ldr	r0, [r7, #4]
 800e858:	f000 f990 	bl	800eb7c <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv>
 800e85c:	4603      	mov	r3, r0
 800e85e:	4618      	mov	r0, r3
 800e860:	3708      	adds	r7, #8
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}

0800e866 <_ZNKSt12_Vector_baseISt6vectorIhSaIhEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800e866:	b480      	push	{r7}
 800e868:	b083      	sub	sp, #12
 800e86a:	af00      	add	r7, sp, #0
 800e86c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	4618      	mov	r0, r3
 800e872:	370c      	adds	r7, #12
 800e874:	46bd      	mov	sp, r7
 800e876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87a:	4770      	bx	lr

0800e87c <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = 0)
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b084      	sub	sp, #16
 800e880:	af00      	add	r7, sp, #0
 800e882:	60f8      	str	r0, [r7, #12]
 800e884:	60b9      	str	r1, [r7, #8]
 800e886:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800e888:	68f8      	ldr	r0, [r7, #12]
 800e88a:	f000 f977 	bl	800eb7c <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv>
 800e88e:	4602      	mov	r2, r0
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	429a      	cmp	r2, r3
 800e894:	bf34      	ite	cc
 800e896:	2301      	movcc	r3, #1
 800e898:	2300      	movcs	r3, #0
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d001      	beq.n	800e8a4 <_ZN9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800e8a0:	f001 f8bc 	bl	800fa1c <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800e8a4:	68ba      	ldr	r2, [r7, #8]
 800e8a6:	4613      	mov	r3, r2
 800e8a8:	005b      	lsls	r3, r3, #1
 800e8aa:	4413      	add	r3, r2
 800e8ac:	009b      	lsls	r3, r3, #2
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f000 fb32 	bl	800ef18 <_Znwj>
 800e8b4:	4603      	mov	r3, r0
      }
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3710      	adds	r7, #16
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}

0800e8be <_ZSt18uninitialized_copyIPhS0_ET0_T_S2_S1_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800e8be:	b580      	push	{r7, lr}
 800e8c0:	b086      	sub	sp, #24
 800e8c2:	af00      	add	r7, sp, #0
 800e8c4:	60f8      	str	r0, [r7, #12]
 800e8c6:	60b9      	str	r1, [r7, #8]
 800e8c8:	607a      	str	r2, [r7, #4]
      const bool __assignable = true;
 800e8ca:	2301      	movs	r3, #1
 800e8cc:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800e8ce:	687a      	ldr	r2, [r7, #4]
 800e8d0:	68b9      	ldr	r1, [r7, #8]
 800e8d2:	68f8      	ldr	r0, [r7, #12]
 800e8d4:	f000 f960 	bl	800eb98 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>
 800e8d8:	4603      	mov	r3, r0
    }
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3718      	adds	r7, #24
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}

0800e8e2 <_ZSt22__copy_move_backward_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_backward_a(_BI1 __first, _BI1 __last, _BI2 __result)
 800e8e2:	b580      	push	{r7, lr}
 800e8e4:	b086      	sub	sp, #24
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	60f8      	str	r0, [r7, #12]
 800e8ea:	60b9      	str	r1, [r7, #8]
 800e8ec:	607a      	str	r2, [r7, #4]
			     && __are_same<_ValueType1, _ValueType2>::__value);
 800e8ee:	2301      	movs	r3, #1
 800e8f0:	75fb      	strb	r3, [r7, #23]
								 __result);
 800e8f2:	687a      	ldr	r2, [r7, #4]
 800e8f4:	68b9      	ldr	r1, [r7, #8]
 800e8f6:	68f8      	ldr	r0, [r7, #12]
 800e8f8:	f000 f95e 	bl	800ebb8 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIhEEPT_PKS3_S6_S4_>
 800e8fc:	4603      	mov	r3, r0
    }
 800e8fe:	4618      	mov	r0, r3
 800e900:	3718      	adds	r7, #24
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}

0800e906 <_ZN9__gnu_cxx14__alloc_traitsISaIhEE8max_sizeERKS1_>:
    static size_type max_size(const _Alloc& __a)
 800e906:	b580      	push	{r7, lr}
 800e908:	b082      	sub	sp, #8
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	6078      	str	r0, [r7, #4]
    { return __a.max_size(); }
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f000 f805 	bl	800e91e <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 800e914:	4603      	mov	r3, r0
 800e916:	4618      	mov	r0, r3
 800e918:	3708      	adds	r7, #8
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}

0800e91e <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800e91e:	b480      	push	{r7}
 800e920:	b083      	sub	sp, #12
 800e922:	af00      	add	r7, sp, #0
 800e924:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800e926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e92a:	4618      	mov	r0, r3
 800e92c:	370c      	adds	r7, #12
 800e92e:	46bd      	mov	sp, r7
 800e930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e934:	4770      	bx	lr

0800e936 <_ZSt10__fill_n_aIjhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT0_E7__valueEPS3_E6__typeES5_T_RKS3_>:
    __fill_n_a(_Tp* __first, _Size __n, const _Tp& __c)
 800e936:	b580      	push	{r7, lr}
 800e938:	b084      	sub	sp, #16
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	60f8      	str	r0, [r7, #12]
 800e93e:	60b9      	str	r1, [r7, #8]
 800e940:	607a      	str	r2, [r7, #4]
      std::__fill_a(__first, __first + __n, __c);
 800e942:	68fa      	ldr	r2, [r7, #12]
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	4413      	add	r3, r2
 800e948:	687a      	ldr	r2, [r7, #4]
 800e94a:	4619      	mov	r1, r3
 800e94c:	68f8      	ldr	r0, [r7, #12]
 800e94e:	f7ff fe01 	bl	800e554 <_ZSt8__fill_aIhEN9__gnu_cxx11__enable_ifIXsrSt9__is_byteIT_E7__valueEvE6__typeEPS3_S7_RKS3_>
      return __first + __n;
 800e952:	68fa      	ldr	r2, [r7, #12]
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	4413      	add	r3, r2
    }
 800e958:	4618      	mov	r0, r3
 800e95a:	3710      	adds	r7, #16
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}

0800e960 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
{
_GLIBCXX_BEGIN_NAMESPACE_VERSION

  template<typename _Iterator, typename _Container>
    _Iterator
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800e968:	1d3b      	adds	r3, r7, #4
 800e96a:	4618      	mov	r0, r3
 800e96c:	f000 f942 	bl	800ebf4 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>
 800e970:	4603      	mov	r3, r0
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	4618      	mov	r0, r3
 800e976:	3708      	adds	r7, #8
 800e978:	46bd      	mov	sp, r7
 800e97a:	bd80      	pop	{r7, pc}

0800e97c <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b086      	sub	sp, #24
 800e980:	af00      	add	r7, sp, #0
 800e982:	60f8      	str	r0, [r7, #12]
 800e984:	60b9      	str	r1, [r7, #8]
 800e986:	607a      	str	r2, [r7, #4]
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 800e988:	2301      	movs	r3, #1
 800e98a:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800e98c:	687a      	ldr	r2, [r7, #4]
 800e98e:	68b9      	ldr	r1, [r7, #8]
 800e990:	68f8      	ldr	r0, [r7, #12]
 800e992:	f000 f93a 	bl	800ec0a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 800e996:	4603      	mov	r3, r0
    }
 800e998:	4618      	mov	r0, r3
 800e99a:	3718      	adds	r7, #24
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIhSaIhEES5_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b086      	sub	sp, #24
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	60f8      	str	r0, [r7, #12]
 800e9a8:	60b9      	str	r1, [r7, #8]
 800e9aa:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 800e9b0:	68fa      	ldr	r2, [r7, #12]
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d00e      	beq.n	800e9d6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIhSaIhEES5_EET0_T_S7_S6_+0x36>
		std::_Construct(std::__addressof(*__cur), *__first);
 800e9b8:	6978      	ldr	r0, [r7, #20]
 800e9ba:	f7ff fc90 	bl	800e2de <_ZSt11__addressofISt6vectorIhSaIhEEEPT_RS3_>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	68f9      	ldr	r1, [r7, #12]
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f000 f8be 	bl	800eb44 <_ZSt10_ConstructISt6vectorIhSaIhEES2_EvPT_RKT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	330c      	adds	r3, #12
 800e9cc:	60fb      	str	r3, [r7, #12]
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	330c      	adds	r3, #12
 800e9d2:	617b      	str	r3, [r7, #20]
 800e9d4:	e7ec      	b.n	800e9b0 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIhSaIhEES5_EET0_T_S7_S6_+0x10>
	      return __cur;
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	e00d      	b.n	800e9f6 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyIPSt6vectorIhSaIhEES5_EET0_T_S7_S6_+0x56>
 800e9da:	4603      	mov	r3, r0
	  __catch(...)
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f000 f9db 	bl	800ed98 <__cxa_begin_catch>
	      std::_Destroy(__result, __cur);
 800e9e2:	6979      	ldr	r1, [r7, #20]
 800e9e4:	6878      	ldr	r0, [r7, #4]
 800e9e6:	f7fe fe62 	bl	800d6ae <_ZSt8_DestroyIPSt6vectorIhSaIhEEEvT_S4_>
	      __throw_exception_again;
 800e9ea:	f000 fbbd 	bl	800f168 <__cxa_rethrow>
	  __catch(...)
 800e9ee:	f000 fa11 	bl	800ee14 <__cxa_end_catch>
 800e9f2:	f000 fc15 	bl	800f220 <__cxa_end_cleanup>
	}
 800e9f6:	4618      	mov	r0, r3
 800e9f8:	3718      	adds	r7, #24
 800e9fa:	46bd      	mov	sp, r7
 800e9fc:	bd80      	pop	{r7, pc}
	...

0800ea00 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt6vectorIhSaIhEES6_EET0_T_S8_S7_>:
        __copy_move_b(_BI1 __first, _BI1 __last, _BI2 __result)
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b086      	sub	sp, #24
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	60f8      	str	r0, [r7, #12]
 800ea08:	60b9      	str	r1, [r7, #8]
 800ea0a:	607a      	str	r2, [r7, #4]
	  for (__n = __last - __first; __n > 0; --__n)
 800ea0c:	68ba      	ldr	r2, [r7, #8]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	1ad3      	subs	r3, r2, r3
 800ea12:	109b      	asrs	r3, r3, #2
 800ea14:	4a0c      	ldr	r2, [pc, #48]	; (800ea48 <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt6vectorIhSaIhEES6_EET0_T_S8_S7_+0x48>)
 800ea16:	fb02 f303 	mul.w	r3, r2, r3
 800ea1a:	617b      	str	r3, [r7, #20]
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	dd0d      	ble.n	800ea3e <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt6vectorIhSaIhEES6_EET0_T_S8_S7_+0x3e>
	    *--__result = *--__last;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	3b0c      	subs	r3, #12
 800ea26:	607b      	str	r3, [r7, #4]
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	3b0c      	subs	r3, #12
 800ea2c:	60bb      	str	r3, [r7, #8]
 800ea2e:	68b9      	ldr	r1, [r7, #8]
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f7ff fe35 	bl	800e6a0 <_ZNSt6vectorIhSaIhEEaSERKS1_>
	  for (__n = __last - __first; __n > 0; --__n)
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	3b01      	subs	r3, #1
 800ea3a:	617b      	str	r3, [r7, #20]
 800ea3c:	e7ee      	b.n	800ea1c <_ZNSt20__copy_move_backwardILb0ELb0ESt26random_access_iterator_tagE13__copy_move_bIPSt6vectorIhSaIhEES6_EET0_T_S8_S7_+0x1c>
	  return __result;
 800ea3e:	687b      	ldr	r3, [r7, #4]
	}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3718      	adds	r7, #24
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}
 800ea48:	aaaaaaab 	.word	0xaaaaaaab

0800ea4c <_ZNKSt6vectorIhSaIhEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 800ea4c:	b480      	push	{r7}
 800ea4e:	b083      	sub	sp, #12
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	689b      	ldr	r3, [r3, #8]
			 - this->_M_impl._M_start); }
 800ea58:	461a      	mov	r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	1ad3      	subs	r3, r2, r3
 800ea60:	4618      	mov	r0, r3
 800ea62:	370c      	adds	r7, #12
 800ea64:	46bd      	mov	sp, r7
 800ea66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea6a:	4770      	bx	lr

0800ea6c <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_>:
        _M_allocate_and_copy(size_type __n,
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b086      	sub	sp, #24
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	60f8      	str	r0, [r7, #12]
 800ea74:	60b9      	str	r1, [r7, #8]
 800ea76:	607a      	str	r2, [r7, #4]
 800ea78:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 800ea7a:	68fb      	ldr	r3, [r7, #12]
 800ea7c:	68b9      	ldr	r1, [r7, #8]
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7ff fa12 	bl	800dea8 <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 800ea84:	4603      	mov	r3, r0
 800ea86:	617b      	str	r3, [r7, #20]
					  _M_get_Tp_allocator());
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	f7fe fc02 	bl	800d294 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 800ea90:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 800ea92:	697a      	ldr	r2, [r7, #20]
 800ea94:	6839      	ldr	r1, [r7, #0]
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f7fe fd05 	bl	800d4a6 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEPhhET0_T_SA_S9_RSaIT1_E>
	      return __result;
 800ea9c:	697b      	ldr	r3, [r7, #20]
 800ea9e:	e00f      	b.n	800eac0 <_ZNSt6vectorIhSaIhEE20_M_allocate_and_copyIN9__gnu_cxx17__normal_iteratorIPKhS1_EEEEPhjT_S9_+0x54>
 800eaa0:	4603      	mov	r3, r0
	  __catch(...)
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	f000 f978 	bl	800ed98 <__cxa_begin_catch>
	      _M_deallocate(__result, __n);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	68ba      	ldr	r2, [r7, #8]
 800eaac:	6979      	ldr	r1, [r7, #20]
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7fe fda9 	bl	800d606 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
	      __throw_exception_again;
 800eab4:	f000 fb58 	bl	800f168 <__cxa_rethrow>
	  __catch(...)
 800eab8:	f000 f9ac 	bl	800ee14 <__cxa_end_catch>
 800eabc:	f000 fbb0 	bl	800f220 <__cxa_end_cleanup>
	}
 800eac0:	4618      	mov	r0, r3
 800eac2:	3718      	adds	r7, #24
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET0_T_SB_SA_>:
    copy(_II __first, _II __last, _OI __result)
 800eac8:	b590      	push	{r4, r7, lr}
 800eaca:	b085      	sub	sp, #20
 800eacc:	af00      	add	r7, sp, #0
 800eace:	60f8      	str	r0, [r7, #12]
 800ead0:	60b9      	str	r1, [r7, #8]
 800ead2:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800ead4:	68f8      	ldr	r0, [r7, #12]
 800ead6:	f7ff fd98 	bl	800e60a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 800eada:	4604      	mov	r4, r0
 800eadc:	68b8      	ldr	r0, [r7, #8]
 800eade:	f7ff fd94 	bl	800e60a <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEEET_S8_>
 800eae2:	4603      	mov	r3, r0
	       __result));
 800eae4:	687a      	ldr	r2, [r7, #4]
 800eae6:	4619      	mov	r1, r3
 800eae8:	4620      	mov	r0, r4
 800eaea:	f000 f8a8 	bl	800ec3e <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>
 800eaee:	4603      	mov	r3, r0
    }
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3714      	adds	r7, #20
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd90      	pop	{r4, r7, pc}

0800eaf8 <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEhEvT_S7_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b084      	sub	sp, #16
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	60f8      	str	r0, [r7, #12]
 800eb00:	60b9      	str	r1, [r7, #8]
 800eb02:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800eb04:	68b9      	ldr	r1, [r7, #8]
 800eb06:	68f8      	ldr	r0, [r7, #12]
 800eb08:	f000 f8bf 	bl	800ec8a <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>
    }
 800eb0c:	bf00      	nop
 800eb0e:	3710      	adds	r7, #16
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}

0800eb14 <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
    copy(_II __first, _II __last, _OI __result)
 800eb14:	b590      	push	{r4, r7, lr}
 800eb16:	b085      	sub	sp, #20
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	60b9      	str	r1, [r7, #8]
 800eb1e:	607a      	str	r2, [r7, #4]
	      (std::__miter_base(__first), std::__miter_base(__last),
 800eb20:	68f8      	ldr	r0, [r7, #12]
 800eb22:	f7ff fce5 	bl	800e4f0 <_ZSt12__miter_baseIPhET_S1_>
 800eb26:	4604      	mov	r4, r0
 800eb28:	68b8      	ldr	r0, [r7, #8]
 800eb2a:	f7ff fce1 	bl	800e4f0 <_ZSt12__miter_baseIPhET_S1_>
 800eb2e:	4603      	mov	r3, r0
	       __result));
 800eb30:	687a      	ldr	r2, [r7, #4]
 800eb32:	4619      	mov	r1, r3
 800eb34:	4620      	mov	r0, r4
 800eb36:	f000 f8b5 	bl	800eca4 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 800eb3a:	4603      	mov	r3, r0
    }
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3714      	adds	r7, #20
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd90      	pop	{r4, r7, pc}

0800eb44 <_ZSt10_ConstructISt6vectorIhSaIhEES2_EvPT_RKT0_>:
    _Construct(_T1* __p, const _T2& __value)
 800eb44:	b5b0      	push	{r4, r5, r7, lr}
 800eb46:	b082      	sub	sp, #8
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
 800eb4c:	6039      	str	r1, [r7, #0]
      ::new(static_cast<void*>(__p)) _T1(__value);
 800eb4e:	687d      	ldr	r5, [r7, #4]
 800eb50:	4629      	mov	r1, r5
 800eb52:	200c      	movs	r0, #12
 800eb54:	f7fd fcd4 	bl	800c500 <_ZnwjPv>
 800eb58:	4604      	mov	r4, r0
 800eb5a:	2c00      	cmp	r4, #0
 800eb5c:	d00a      	beq.n	800eb74 <_ZSt10_ConstructISt6vectorIhSaIhEES2_EvPT_RKT0_+0x30>
 800eb5e:	6839      	ldr	r1, [r7, #0]
 800eb60:	4620      	mov	r0, r4
 800eb62:	f7fe fa97 	bl	800d094 <_ZNSt6vectorIhSaIhEEC1ERKS1_>
    }
 800eb66:	e005      	b.n	800eb74 <_ZSt10_ConstructISt6vectorIhSaIhEES2_EvPT_RKT0_+0x30>
      ::new(static_cast<void*>(__p)) _T1(__value);
 800eb68:	4629      	mov	r1, r5
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	f7fd fcd4 	bl	800c518 <_ZdlPvS_>
 800eb70:	f000 fb56 	bl	800f220 <__cxa_end_cleanup>
    }
 800eb74:	bf00      	nop
 800eb76:	3708      	adds	r7, #8
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bdb0      	pop	{r4, r5, r7, pc}

0800eb7c <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800eb7c:	b480      	push	{r7}
 800eb7e:	b083      	sub	sp, #12
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 800eb84:	4b03      	ldr	r3, [pc, #12]	; (800eb94 <_ZNK9__gnu_cxx13new_allocatorISt6vectorIhSaIhEEE8max_sizeEv+0x18>)
 800eb86:	4618      	mov	r0, r3
 800eb88:	370c      	adds	r7, #12
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb90:	4770      	bx	lr
 800eb92:	bf00      	nop
 800eb94:	15555555 	.word	0x15555555

0800eb98 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPhS2_EET0_T_S4_S3_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b084      	sub	sp, #16
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	60f8      	str	r0, [r7, #12]
 800eba0:	60b9      	str	r1, [r7, #8]
 800eba2:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800eba4:	687a      	ldr	r2, [r7, #4]
 800eba6:	68b9      	ldr	r1, [r7, #8]
 800eba8:	68f8      	ldr	r0, [r7, #12]
 800ebaa:	f7ff ffb3 	bl	800eb14 <_ZSt4copyIPhS0_ET0_T_S2_S1_>
 800ebae:	4603      	mov	r3, r0
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3710      	adds	r7, #16
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	bd80      	pop	{r7, pc}

0800ebb8 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIhEEPT_PKS3_S6_S4_>:
        __copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b086      	sub	sp, #24
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	60f8      	str	r0, [r7, #12]
 800ebc0:	60b9      	str	r1, [r7, #8]
 800ebc2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800ebc4:	68ba      	ldr	r2, [r7, #8]
 800ebc6:	68fb      	ldr	r3, [r7, #12]
 800ebc8:	1ad3      	subs	r3, r2, r3
 800ebca:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d008      	beq.n	800ebe4 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIhEEPT_PKS3_S6_S4_+0x2c>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	425b      	negs	r3, r3
 800ebd6:	687a      	ldr	r2, [r7, #4]
 800ebd8:	4413      	add	r3, r2
 800ebda:	697a      	ldr	r2, [r7, #20]
 800ebdc:	68f9      	ldr	r1, [r7, #12]
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f002 fa42 	bl	8011068 <memmove>
	  return __result - _Num;
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	425b      	negs	r3, r3
 800ebe8:	687a      	ldr	r2, [r7, #4]
 800ebea:	4413      	add	r3, r2
	}
 800ebec:	4618      	mov	r0, r3
 800ebee:	3718      	adds	r7, #24
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	bd80      	pop	{r7, pc}

0800ebf4 <_ZNK9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800ebf4:	b480      	push	{r7}
 800ebf6:	b083      	sub	sp, #12
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	4618      	mov	r0, r3
 800ec00:	370c      	adds	r7, #12
 800ec02:	46bd      	mov	sp, r7
 800ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec08:	4770      	bx	lr

0800ec0a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800ec0a:	b580      	push	{r7, lr}
 800ec0c:	b086      	sub	sp, #24
 800ec0e:	af00      	add	r7, sp, #0
 800ec10:	60f8      	str	r0, [r7, #12]
 800ec12:	60b9      	str	r1, [r7, #8]
 800ec14:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800ec16:	68ba      	ldr	r2, [r7, #8]
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	1ad3      	subs	r3, r2, r3
 800ec1c:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800ec1e:	697b      	ldr	r3, [r7, #20]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d005      	beq.n	800ec30 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800ec24:	697b      	ldr	r3, [r7, #20]
 800ec26:	461a      	mov	r2, r3
 800ec28:	68f9      	ldr	r1, [r7, #12]
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f002 fa1c 	bl	8011068 <memmove>
	  return __result + _Num;
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	687a      	ldr	r2, [r7, #4]
 800ec34:	4413      	add	r3, r2
	}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3718      	adds	r7, #24
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}

0800ec3e <_ZSt14__copy_move_a2ILb0EN9__gnu_cxx17__normal_iteratorIPKhSt6vectorIhSaIhEEEENS1_IPhS6_EEET1_T0_SB_SA_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800ec3e:	b5b0      	push	{r4, r5, r7, lr}
 800ec40:	b086      	sub	sp, #24
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	60f8      	str	r0, [r7, #12]
 800ec46:	60b9      	str	r1, [r7, #8]
 800ec48:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800ec4a:	68f8      	ldr	r0, [r7, #12]
 800ec4c:	f7ff fe88 	bl	800e960 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800ec50:	4604      	mov	r4, r0
 800ec52:	68b8      	ldr	r0, [r7, #8]
 800ec54:	f7ff fe84 	bl	800e960 <_ZSt12__niter_baseIPKhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800ec58:	4605      	mov	r5, r0
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f000 f83e 	bl	800ecdc <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>
 800ec60:	4603      	mov	r3, r0
 800ec62:	461a      	mov	r2, r3
 800ec64:	4629      	mov	r1, r5
 800ec66:	4620      	mov	r0, r4
 800ec68:	f7ff fe88 	bl	800e97c <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	617b      	str	r3, [r7, #20]
					     std::__niter_base(__result)));
 800ec70:	f107 0214 	add.w	r2, r7, #20
 800ec74:	f107 0310 	add.w	r3, r7, #16
 800ec78:	4611      	mov	r1, r2
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7fe ff3e 	bl	800dafc <_ZN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEC1ERKS1_>
 800ec80:	693b      	ldr	r3, [r7, #16]
    }
 800ec82:	4618      	mov	r0, r3
 800ec84:	3718      	adds	r7, #24
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bdb0      	pop	{r4, r5, r7, pc}

0800ec8a <_ZSt8_DestroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEvT_S7_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ec8a:	b580      	push	{r7, lr}
 800ec8c:	b082      	sub	sp, #8
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
 800ec92:	6039      	str	r1, [r7, #0]
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 800ec94:	6839      	ldr	r1, [r7, #0]
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f000 f82e 	bl	800ecf8 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>
    }
 800ec9c:	bf00      	nop
 800ec9e:	3708      	adds	r7, #8
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}

0800eca4 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800eca4:	b5b0      	push	{r4, r5, r7, lr}
 800eca6:	b084      	sub	sp, #16
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	60f8      	str	r0, [r7, #12]
 800ecac:	60b9      	str	r1, [r7, #8]
 800ecae:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800ecb0:	68f8      	ldr	r0, [r7, #12]
 800ecb2:	f7ff fc44 	bl	800e53e <_ZSt12__niter_baseIPhET_S1_>
 800ecb6:	4604      	mov	r4, r0
 800ecb8:	68b8      	ldr	r0, [r7, #8]
 800ecba:	f7ff fc40 	bl	800e53e <_ZSt12__niter_baseIPhET_S1_>
 800ecbe:	4605      	mov	r5, r0
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f7ff fc3c 	bl	800e53e <_ZSt12__niter_baseIPhET_S1_>
 800ecc6:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 800ecc8:	461a      	mov	r2, r3
 800ecca:	4629      	mov	r1, r5
 800eccc:	4620      	mov	r0, r4
 800ecce:	f000 f81e 	bl	800ed0e <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 800ecd2:	4603      	mov	r3, r0
    }
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	3710      	adds	r7, #16
 800ecd8:	46bd      	mov	sp, r7
 800ecda:	bdb0      	pop	{r4, r5, r7, pc}

0800ecdc <_ZSt12__niter_baseIPhSt6vectorIhSaIhEEET_N9__gnu_cxx17__normal_iteratorIS4_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b082      	sub	sp, #8
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 800ece4:	1d3b      	adds	r3, r7, #4
 800ece6:	4618      	mov	r0, r3
 800ece8:	f7ff fa31 	bl	800e14e <_ZNK9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEE4baseEv>
 800ecec:	4603      	mov	r3, r0
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	3708      	adds	r7, #8
 800ecf4:	46bd      	mov	sp, r7
 800ecf6:	bd80      	pop	{r7, pc}

0800ecf8 <_ZNSt12_Destroy_auxILb1EE9__destroyIN9__gnu_cxx17__normal_iteratorIPhSt6vectorIhSaIhEEEEEEvT_S9_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800ecf8:	b480      	push	{r7}
 800ecfa:	b083      	sub	sp, #12
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
 800ed02:	bf00      	nop
 800ed04:	370c      	adds	r7, #12
 800ed06:	46bd      	mov	sp, r7
 800ed08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed0c:	4770      	bx	lr

0800ed0e <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800ed0e:	b580      	push	{r7, lr}
 800ed10:	b086      	sub	sp, #24
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	60f8      	str	r0, [r7, #12]
 800ed16:	60b9      	str	r1, [r7, #8]
 800ed18:	607a      	str	r2, [r7, #4]
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 800ed1a:	2301      	movs	r3, #1
 800ed1c:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 800ed1e:	687a      	ldr	r2, [r7, #4]
 800ed20:	68b9      	ldr	r1, [r7, #8]
 800ed22:	68f8      	ldr	r0, [r7, #12]
 800ed24:	f7ff ff71 	bl	800ec0a <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 800ed28:	4603      	mov	r3, r0
    }
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3718      	adds	r7, #24
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}
	...

0800ed34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800ed34:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ed6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ed38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ed3a:	e003      	b.n	800ed44 <LoopCopyDataInit>

0800ed3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ed3c:	4b0c      	ldr	r3, [pc, #48]	; (800ed70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ed3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ed40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ed42:	3104      	adds	r1, #4

0800ed44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ed44:	480b      	ldr	r0, [pc, #44]	; (800ed74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ed46:	4b0c      	ldr	r3, [pc, #48]	; (800ed78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ed48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ed4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ed4c:	d3f6      	bcc.n	800ed3c <CopyDataInit>
  ldr  r2, =_sbss
 800ed4e:	4a0b      	ldr	r2, [pc, #44]	; (800ed7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ed50:	e002      	b.n	800ed58 <LoopFillZerobss>

0800ed52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ed52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ed54:	f842 3b04 	str.w	r3, [r2], #4

0800ed58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ed58:	4b09      	ldr	r3, [pc, #36]	; (800ed80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ed5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ed5c:	d3f9      	bcc.n	800ed52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ed5e:	f7fc f92f 	bl	800afc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ed62:	f001 fea3 	bl	8010aac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ed66:	f7fb fafd 	bl	800a364 <main>
  bx  lr    
 800ed6a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800ed6c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800ed70:	0801a5e0 	.word	0x0801a5e0
  ldr  r0, =_sdata
 800ed74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ed78:	2000069c 	.word	0x2000069c
  ldr  r2, =_sbss
 800ed7c:	2000069c 	.word	0x2000069c
  ldr  r3, = _ebss
 800ed80:	2000ce90 	.word	0x2000ce90

0800ed84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ed84:	e7fe      	b.n	800ed84 <ADC_IRQHandler>
	...

0800ed88 <_ZdlPv>:
 800ed88:	f001 bf2c 	b.w	8010be4 <free>

0800ed8c <__aeabi_atexit>:
 800ed8c:	460b      	mov	r3, r1
 800ed8e:	4601      	mov	r1, r0
 800ed90:	4618      	mov	r0, r3
 800ed92:	f001 bc22 	b.w	80105da <__cxa_atexit>
 800ed96:	bf00      	nop

0800ed98 <__cxa_begin_catch>:
 800ed98:	b538      	push	{r3, r4, r5, lr}
 800ed9a:	4604      	mov	r4, r0
 800ed9c:	f000 fa3c 	bl	800f218 <__cxa_get_globals>
 800eda0:	7822      	ldrb	r2, [r4, #0]
 800eda2:	6803      	ldr	r3, [r0, #0]
 800eda4:	2a47      	cmp	r2, #71	; 0x47
 800eda6:	f1a4 0120 	sub.w	r1, r4, #32
 800edaa:	d004      	beq.n	800edb6 <__cxa_begin_catch+0x1e>
 800edac:	bb83      	cbnz	r3, 800ee10 <__cxa_begin_catch+0x78>
 800edae:	461c      	mov	r4, r3
 800edb0:	6001      	str	r1, [r0, #0]
 800edb2:	4620      	mov	r0, r4
 800edb4:	bd38      	pop	{r3, r4, r5, pc}
 800edb6:	7862      	ldrb	r2, [r4, #1]
 800edb8:	2a4e      	cmp	r2, #78	; 0x4e
 800edba:	d1f7      	bne.n	800edac <__cxa_begin_catch+0x14>
 800edbc:	78a2      	ldrb	r2, [r4, #2]
 800edbe:	2a55      	cmp	r2, #85	; 0x55
 800edc0:	d1f4      	bne.n	800edac <__cxa_begin_catch+0x14>
 800edc2:	78e2      	ldrb	r2, [r4, #3]
 800edc4:	2a43      	cmp	r2, #67	; 0x43
 800edc6:	d1f1      	bne.n	800edac <__cxa_begin_catch+0x14>
 800edc8:	7922      	ldrb	r2, [r4, #4]
 800edca:	2a43      	cmp	r2, #67	; 0x43
 800edcc:	d1ee      	bne.n	800edac <__cxa_begin_catch+0x14>
 800edce:	7962      	ldrb	r2, [r4, #5]
 800edd0:	2a2b      	cmp	r2, #43	; 0x2b
 800edd2:	d1eb      	bne.n	800edac <__cxa_begin_catch+0x14>
 800edd4:	79a2      	ldrb	r2, [r4, #6]
 800edd6:	2a2b      	cmp	r2, #43	; 0x2b
 800edd8:	d1e8      	bne.n	800edac <__cxa_begin_catch+0x14>
 800edda:	79e2      	ldrb	r2, [r4, #7]
 800eddc:	2a01      	cmp	r2, #1
 800edde:	d8e5      	bhi.n	800edac <__cxa_begin_catch+0x14>
 800ede0:	f854 2c0c 	ldr.w	r2, [r4, #-12]
 800ede4:	2a00      	cmp	r2, #0
 800ede6:	db10      	blt.n	800ee0a <__cxa_begin_catch+0x72>
 800ede8:	3201      	adds	r2, #1
 800edea:	6845      	ldr	r5, [r0, #4]
 800edec:	f844 2c0c 	str.w	r2, [r4, #-12]
 800edf0:	3d01      	subs	r5, #1
 800edf2:	6045      	str	r5, [r0, #4]
 800edf4:	428b      	cmp	r3, r1
 800edf6:	bf1c      	itt	ne
 800edf8:	f844 3c10 	strne.w	r3, [r4, #-16]
 800edfc:	6001      	strne	r1, [r0, #0]
 800edfe:	4620      	mov	r0, r4
 800ee00:	6a64      	ldr	r4, [r4, #36]	; 0x24
 800ee02:	f7f8 fd7b 	bl	80078fc <_Unwind_Complete>
 800ee06:	4620      	mov	r0, r4
 800ee08:	bd38      	pop	{r3, r4, r5, pc}
 800ee0a:	f1c2 0201 	rsb	r2, r2, #1
 800ee0e:	e7ec      	b.n	800edea <__cxa_begin_catch+0x52>
 800ee10:	f000 f85a 	bl	800eec8 <_ZSt9terminatev>

0800ee14 <__cxa_end_catch>:
 800ee14:	b508      	push	{r3, lr}
 800ee16:	f000 f9fb 	bl	800f210 <__cxa_get_globals_fast>
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	6800      	ldr	r0, [r0, #0]
 800ee1e:	2800      	cmp	r0, #0
 800ee20:	d03d      	beq.n	800ee9e <__cxa_end_catch+0x8a>
 800ee22:	f890 3020 	ldrb.w	r3, [r0, #32]
 800ee26:	2b47      	cmp	r3, #71	; 0x47
 800ee28:	d006      	beq.n	800ee38 <__cxa_end_catch+0x24>
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	6013      	str	r3, [r2, #0]
 800ee2e:	3020      	adds	r0, #32
 800ee30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ee34:	f7f8 bd64 	b.w	8007900 <_Unwind_DeleteException>
 800ee38:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800ee3c:	2b4e      	cmp	r3, #78	; 0x4e
 800ee3e:	d1f4      	bne.n	800ee2a <__cxa_end_catch+0x16>
 800ee40:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 800ee44:	2b55      	cmp	r3, #85	; 0x55
 800ee46:	d1f0      	bne.n	800ee2a <__cxa_end_catch+0x16>
 800ee48:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
 800ee4c:	2b43      	cmp	r3, #67	; 0x43
 800ee4e:	d1ec      	bne.n	800ee2a <__cxa_end_catch+0x16>
 800ee50:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800ee54:	2b43      	cmp	r3, #67	; 0x43
 800ee56:	d1e8      	bne.n	800ee2a <__cxa_end_catch+0x16>
 800ee58:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 800ee5c:	2b2b      	cmp	r3, #43	; 0x2b
 800ee5e:	d1e4      	bne.n	800ee2a <__cxa_end_catch+0x16>
 800ee60:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 800ee64:	2b2b      	cmp	r3, #43	; 0x2b
 800ee66:	d1e0      	bne.n	800ee2a <__cxa_end_catch+0x16>
 800ee68:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d8dc      	bhi.n	800ee2a <__cxa_end_catch+0x16>
 800ee70:	6943      	ldr	r3, [r0, #20]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	db05      	blt.n	800ee82 <__cxa_end_catch+0x6e>
 800ee76:	3b01      	subs	r3, #1
 800ee78:	d008      	beq.n	800ee8c <__cxa_end_catch+0x78>
 800ee7a:	1c5a      	adds	r2, r3, #1
 800ee7c:	d00d      	beq.n	800ee9a <__cxa_end_catch+0x86>
 800ee7e:	6143      	str	r3, [r0, #20]
 800ee80:	bd08      	pop	{r3, pc}
 800ee82:	3301      	adds	r3, #1
 800ee84:	d1fb      	bne.n	800ee7e <__cxa_end_catch+0x6a>
 800ee86:	6901      	ldr	r1, [r0, #16]
 800ee88:	6011      	str	r1, [r2, #0]
 800ee8a:	e7f8      	b.n	800ee7e <__cxa_end_catch+0x6a>
 800ee8c:	6903      	ldr	r3, [r0, #16]
 800ee8e:	6013      	str	r3, [r2, #0]
 800ee90:	3020      	adds	r0, #32
 800ee92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ee96:	f7f8 bd33 	b.w	8007900 <_Unwind_DeleteException>
 800ee9a:	f000 f815 	bl	800eec8 <_ZSt9terminatev>
 800ee9e:	bd08      	pop	{r3, pc}

0800eea0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800eea0:	b508      	push	{r3, lr}
 800eea2:	4780      	blx	r0
 800eea4:	f001 fb92 	bl	80105cc <abort>
 800eea8:	f7ff ff76 	bl	800ed98 <__cxa_begin_catch>
 800eeac:	f001 fb8e 	bl	80105cc <abort>
 800eeb0:	460d      	mov	r5, r1
 800eeb2:	4604      	mov	r4, r0
 800eeb4:	f7ff ffae 	bl	800ee14 <__cxa_end_catch>
 800eeb8:	3501      	adds	r5, #1
 800eeba:	d001      	beq.n	800eec0 <_ZN10__cxxabiv111__terminateEPFvvE+0x20>
 800eebc:	f000 f9b0 	bl	800f220 <__cxa_end_cleanup>
 800eec0:	4620      	mov	r0, r4
 800eec2:	f000 ff45 	bl	800fd50 <__cxa_call_unexpected>
 800eec6:	bf00      	nop

0800eec8 <_ZSt9terminatev>:
 800eec8:	b508      	push	{r3, lr}
 800eeca:	4b03      	ldr	r3, [pc, #12]	; (800eed8 <_ZSt9terminatev+0x10>)
 800eecc:	6818      	ldr	r0, [r3, #0]
 800eece:	f3bf 8f5b 	dmb	ish
 800eed2:	f7ff ffe5 	bl	800eea0 <_ZN10__cxxabiv111__terminateEPFvvE>
 800eed6:	bf00      	nop
 800eed8:	20000018 	.word	0x20000018

0800eedc <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 800eedc:	b508      	push	{r3, lr}
 800eede:	4780      	blx	r0
 800eee0:	f7ff fff2 	bl	800eec8 <_ZSt9terminatev>

0800eee4 <_ZSt10unexpectedv>:
 800eee4:	b508      	push	{r3, lr}
 800eee6:	4b03      	ldr	r3, [pc, #12]	; (800eef4 <_ZSt10unexpectedv+0x10>)
 800eee8:	6818      	ldr	r0, [r3, #0]
 800eeea:	f3bf 8f5b 	dmb	ish
 800eeee:	f7ff fff5 	bl	800eedc <_ZN10__cxxabiv112__unexpectedEPFvvE>
 800eef2:	bf00      	nop
 800eef4:	2000001c 	.word	0x2000001c

0800eef8 <_ZSt13get_terminatev>:
 800eef8:	4b02      	ldr	r3, [pc, #8]	; (800ef04 <_ZSt13get_terminatev+0xc>)
 800eefa:	6818      	ldr	r0, [r3, #0]
 800eefc:	f3bf 8f5b 	dmb	ish
 800ef00:	4770      	bx	lr
 800ef02:	bf00      	nop
 800ef04:	20000018 	.word	0x20000018

0800ef08 <_ZSt14get_unexpectedv>:
 800ef08:	4b02      	ldr	r3, [pc, #8]	; (800ef14 <_ZSt14get_unexpectedv+0xc>)
 800ef0a:	6818      	ldr	r0, [r3, #0]
 800ef0c:	f3bf 8f5b 	dmb	ish
 800ef10:	4770      	bx	lr
 800ef12:	bf00      	nop
 800ef14:	2000001c 	.word	0x2000001c

0800ef18 <_Znwj>:
 800ef18:	b510      	push	{r4, lr}
 800ef1a:	2800      	cmp	r0, #0
 800ef1c:	bf14      	ite	ne
 800ef1e:	4604      	movne	r4, r0
 800ef20:	2401      	moveq	r4, #1
 800ef22:	4620      	mov	r0, r4
 800ef24:	f001 fe56 	bl	8010bd4 <malloc>
 800ef28:	b100      	cbz	r0, 800ef2c <_Znwj+0x14>
 800ef2a:	bd10      	pop	{r4, pc}
 800ef2c:	f000 fd6e 	bl	800fa0c <_ZSt15get_new_handlerv>
 800ef30:	b108      	cbz	r0, 800ef36 <_Znwj+0x1e>
 800ef32:	4780      	blx	r0
 800ef34:	e7f5      	b.n	800ef22 <_Znwj+0xa>
 800ef36:	2004      	movs	r0, #4
 800ef38:	f000 f87a 	bl	800f030 <__cxa_allocate_exception>
 800ef3c:	4b02      	ldr	r3, [pc, #8]	; (800ef48 <_Znwj+0x30>)
 800ef3e:	6003      	str	r3, [r0, #0]
 800ef40:	4a02      	ldr	r2, [pc, #8]	; (800ef4c <_Znwj+0x34>)
 800ef42:	4903      	ldr	r1, [pc, #12]	; (800ef50 <_Znwj+0x38>)
 800ef44:	f000 f8d2 	bl	800f0ec <__cxa_throw>
 800ef48:	080182a4 	.word	0x080182a4
 800ef4c:	0800f1e1 	.word	0x0800f1e1
 800ef50:	08018280 	.word	0x08018280

0800ef54 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 800ef54:	b4f0      	push	{r4, r5, r6, r7}
 800ef56:	4c1b      	ldr	r4, [pc, #108]	; (800efc4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>)
 800ef58:	f850 7c08 	ldr.w	r7, [r0, #-8]
 800ef5c:	6861      	ldr	r1, [r4, #4]
 800ef5e:	f1a0 0608 	sub.w	r6, r0, #8
 800ef62:	b1c9      	cbz	r1, 800ef98 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
 800ef64:	19f5      	adds	r5, r6, r7
 800ef66:	42a9      	cmp	r1, r5
 800ef68:	d01b      	beq.n	800efa2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x4e>
 800ef6a:	684a      	ldr	r2, [r1, #4]
 800ef6c:	b32a      	cbz	r2, 800efba <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
 800ef6e:	4295      	cmp	r5, r2
 800ef70:	d303      	bcc.n	800ef7a <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x26>
 800ef72:	e022      	b.n	800efba <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x66>
 800ef74:	429d      	cmp	r5, r3
 800ef76:	d205      	bcs.n	800ef84 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
 800ef78:	461a      	mov	r2, r3
 800ef7a:	6853      	ldr	r3, [r2, #4]
 800ef7c:	1d0c      	adds	r4, r1, #4
 800ef7e:	4611      	mov	r1, r2
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d1f7      	bne.n	800ef74 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x20>
 800ef84:	6811      	ldr	r1, [r2, #0]
 800ef86:	1855      	adds	r5, r2, r1
 800ef88:	42ae      	cmp	r6, r5
 800ef8a:	d013      	beq.n	800efb4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x60>
 800ef8c:	f840 3c04 	str.w	r3, [r0, #-4]
 800ef90:	6823      	ldr	r3, [r4, #0]
 800ef92:	605e      	str	r6, [r3, #4]
 800ef94:	bcf0      	pop	{r4, r5, r6, r7}
 800ef96:	4770      	bx	lr
 800ef98:	f840 1c04 	str.w	r1, [r0, #-4]
 800ef9c:	6066      	str	r6, [r4, #4]
 800ef9e:	bcf0      	pop	{r4, r5, r6, r7}
 800efa0:	4770      	bx	lr
 800efa2:	680b      	ldr	r3, [r1, #0]
 800efa4:	684a      	ldr	r2, [r1, #4]
 800efa6:	f840 2c04 	str.w	r2, [r0, #-4]
 800efaa:	441f      	add	r7, r3
 800efac:	f840 7c08 	str.w	r7, [r0, #-8]
 800efb0:	6066      	str	r6, [r4, #4]
 800efb2:	e7ef      	b.n	800ef94 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
 800efb4:	440f      	add	r7, r1
 800efb6:	6017      	str	r7, [r2, #0]
 800efb8:	e7ec      	b.n	800ef94 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x40>
 800efba:	4613      	mov	r3, r2
 800efbc:	3404      	adds	r4, #4
 800efbe:	460a      	mov	r2, r1
 800efc0:	e7e0      	b.n	800ef84 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x30>
 800efc2:	bf00      	nop
 800efc4:	20008c60 	.word	0x20008c60

0800efc8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 800efc8:	b430      	push	{r4, r5}
 800efca:	4c18      	ldr	r4, [pc, #96]	; (800f02c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>)
 800efcc:	f100 0108 	add.w	r1, r0, #8
 800efd0:	6863      	ldr	r3, [r4, #4]
 800efd2:	2908      	cmp	r1, #8
 800efd4:	bf38      	it	cc
 800efd6:	2108      	movcc	r1, #8
 800efd8:	b313      	cbz	r3, 800f020 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x58>
 800efda:	3107      	adds	r1, #7
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	f021 0107 	bic.w	r1, r1, #7
 800efe2:	4291      	cmp	r1, r2
 800efe4:	d804      	bhi.n	800eff0 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x28>
 800efe6:	e01d      	b.n	800f024 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
 800efe8:	6802      	ldr	r2, [r0, #0]
 800efea:	4291      	cmp	r1, r2
 800efec:	d905      	bls.n	800effa <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x32>
 800efee:	4603      	mov	r3, r0
 800eff0:	6858      	ldr	r0, [r3, #4]
 800eff2:	2800      	cmp	r0, #0
 800eff4:	d1f8      	bne.n	800efe8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x20>
 800eff6:	bc30      	pop	{r4, r5}
 800eff8:	4770      	bx	lr
 800effa:	3304      	adds	r3, #4
 800effc:	1a52      	subs	r2, r2, r1
 800effe:	2a07      	cmp	r2, #7
 800f000:	d90a      	bls.n	800f018 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x50>
 800f002:	1845      	adds	r5, r0, r1
 800f004:	6844      	ldr	r4, [r0, #4]
 800f006:	606c      	str	r4, [r5, #4]
 800f008:	681c      	ldr	r4, [r3, #0]
 800f00a:	5042      	str	r2, [r0, r1]
 800f00c:	6021      	str	r1, [r4, #0]
 800f00e:	601d      	str	r5, [r3, #0]
 800f010:	f104 0008 	add.w	r0, r4, #8
 800f014:	bc30      	pop	{r4, r5}
 800f016:	4770      	bx	lr
 800f018:	6842      	ldr	r2, [r0, #4]
 800f01a:	601a      	str	r2, [r3, #0]
 800f01c:	4604      	mov	r4, r0
 800f01e:	e7f7      	b.n	800f010 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x48>
 800f020:	4618      	mov	r0, r3
 800f022:	e7e8      	b.n	800eff6 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x2e>
 800f024:	4618      	mov	r0, r3
 800f026:	1d23      	adds	r3, r4, #4
 800f028:	e7e8      	b.n	800effc <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x34>
 800f02a:	bf00      	nop
 800f02c:	20008c60 	.word	0x20008c60

0800f030 <__cxa_allocate_exception>:
 800f030:	b538      	push	{r3, r4, r5, lr}
 800f032:	f100 0580 	add.w	r5, r0, #128	; 0x80
 800f036:	4628      	mov	r0, r5
 800f038:	f001 fdcc 	bl	8010bd4 <malloc>
 800f03c:	4604      	mov	r4, r0
 800f03e:	b138      	cbz	r0, 800f050 <__cxa_allocate_exception+0x20>
 800f040:	2280      	movs	r2, #128	; 0x80
 800f042:	2100      	movs	r1, #0
 800f044:	4620      	mov	r0, r4
 800f046:	f002 f829 	bl	801109c <memset>
 800f04a:	f104 0080 	add.w	r0, r4, #128	; 0x80
 800f04e:	bd38      	pop	{r3, r4, r5, pc}
 800f050:	4628      	mov	r0, r5
 800f052:	f7ff ffb9 	bl	800efc8 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 800f056:	4604      	mov	r4, r0
 800f058:	2800      	cmp	r0, #0
 800f05a:	d1f1      	bne.n	800f040 <__cxa_allocate_exception+0x10>
 800f05c:	f7ff ff34 	bl	800eec8 <_ZSt9terminatev>

0800f060 <__cxa_free_exception>:
 800f060:	4a06      	ldr	r2, [pc, #24]	; (800f07c <__cxa_free_exception+0x1c>)
 800f062:	6893      	ldr	r3, [r2, #8]
 800f064:	3880      	subs	r0, #128	; 0x80
 800f066:	4298      	cmp	r0, r3
 800f068:	d905      	bls.n	800f076 <__cxa_free_exception+0x16>
 800f06a:	68d2      	ldr	r2, [r2, #12]
 800f06c:	4413      	add	r3, r2
 800f06e:	4298      	cmp	r0, r3
 800f070:	d201      	bcs.n	800f076 <__cxa_free_exception+0x16>
 800f072:	f7ff bf6f 	b.w	800ef54 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 800f076:	f001 bdb5 	b.w	8010be4 <free>
 800f07a:	bf00      	nop
 800f07c:	20008c60 	.word	0x20008c60

0800f080 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 800f080:	b538      	push	{r3, r4, r5, lr}
 800f082:	4c08      	ldr	r4, [pc, #32]	; (800f0a4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 800f084:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 800f088:	4628      	mov	r0, r5
 800f08a:	60e5      	str	r5, [r4, #12]
 800f08c:	f001 fda2 	bl	8010bd4 <malloc>
 800f090:	60a0      	str	r0, [r4, #8]
 800f092:	b120      	cbz	r0, 800f09e <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1e>
 800f094:	2300      	movs	r3, #0
 800f096:	6060      	str	r0, [r4, #4]
 800f098:	6005      	str	r5, [r0, #0]
 800f09a:	6043      	str	r3, [r0, #4]
 800f09c:	bd38      	pop	{r3, r4, r5, pc}
 800f09e:	60e0      	str	r0, [r4, #12]
 800f0a0:	6060      	str	r0, [r4, #4]
 800f0a2:	bd38      	pop	{r3, r4, r5, pc}
 800f0a4:	20008c60 	.word	0x20008c60

0800f0a8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 800f0a8:	2801      	cmp	r0, #1
 800f0aa:	b510      	push	{r4, lr}
 800f0ac:	d81a      	bhi.n	800f0e4 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3c>
 800f0ae:	f3bf 8f5b 	dmb	ish
 800f0b2:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 800f0b6:	e853 2f00 	ldrex	r2, [r3]
 800f0ba:	3a01      	subs	r2, #1
 800f0bc:	e843 2000 	strex	r0, r2, [r3]
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	d1f8      	bne.n	800f0b6 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 800f0c4:	f3bf 8f5b 	dmb	ish
 800f0c8:	b95a      	cbnz	r2, 800f0e2 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x3a>
 800f0ca:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 800f0ce:	f101 0458 	add.w	r4, r1, #88	; 0x58
 800f0d2:	b10b      	cbz	r3, 800f0d8 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x30>
 800f0d4:	4620      	mov	r0, r4
 800f0d6:	4798      	blx	r3
 800f0d8:	4620      	mov	r0, r4
 800f0da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0de:	f7ff bfbf 	b.w	800f060 <__cxa_free_exception>
 800f0e2:	bd10      	pop	{r4, pc}
 800f0e4:	f851 0c14 	ldr.w	r0, [r1, #-20]
 800f0e8:	f7ff feda 	bl	800eea0 <_ZN10__cxxabiv111__terminateEPFvvE>

0800f0ec <__cxa_throw>:
 800f0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0ee:	4604      	mov	r4, r0
 800f0f0:	460f      	mov	r7, r1
 800f0f2:	4616      	mov	r6, r2
 800f0f4:	f000 f890 	bl	800f218 <__cxa_get_globals>
 800f0f8:	6843      	ldr	r3, [r0, #4]
 800f0fa:	2501      	movs	r5, #1
 800f0fc:	442b      	add	r3, r5
 800f0fe:	6043      	str	r3, [r0, #4]
 800f100:	f844 7c78 	str.w	r7, [r4, #-120]
 800f104:	f844 6c74 	str.w	r6, [r4, #-116]
 800f108:	f844 5c80 	str.w	r5, [r4, #-128]
 800f10c:	f7ff fefc 	bl	800ef08 <_ZSt14get_unexpectedv>
 800f110:	f844 0c70 	str.w	r0, [r4, #-112]
 800f114:	f7ff fef0 	bl	800eef8 <_ZSt13get_terminatev>
 800f118:	2347      	movs	r3, #71	; 0x47
 800f11a:	2243      	movs	r2, #67	; 0x43
 800f11c:	f04f 0e4e 	mov.w	lr, #78	; 0x4e
 800f120:	4910      	ldr	r1, [pc, #64]	; (800f164 <__cxa_throw+0x78>)
 800f122:	f804 3c58 	strb.w	r3, [r4, #-88]
 800f126:	f1a4 0558 	sub.w	r5, r4, #88	; 0x58
 800f12a:	232b      	movs	r3, #43	; 0x2b
 800f12c:	2755      	movs	r7, #85	; 0x55
 800f12e:	2600      	movs	r6, #0
 800f130:	f844 0c6c 	str.w	r0, [r4, #-108]
 800f134:	f804 ec57 	strb.w	lr, [r4, #-87]
 800f138:	f844 1c50 	str.w	r1, [r4, #-80]
 800f13c:	f804 2c55 	strb.w	r2, [r4, #-85]
 800f140:	f804 2c54 	strb.w	r2, [r4, #-84]
 800f144:	f804 3c53 	strb.w	r3, [r4, #-83]
 800f148:	f804 3c52 	strb.w	r3, [r4, #-82]
 800f14c:	f804 7c56 	strb.w	r7, [r4, #-86]
 800f150:	f804 6c51 	strb.w	r6, [r4, #-81]
 800f154:	4628      	mov	r0, r5
 800f156:	f7f8 ff6d 	bl	8008034 <_Unwind_RaiseException>
 800f15a:	4628      	mov	r0, r5
 800f15c:	f7ff fe1c 	bl	800ed98 <__cxa_begin_catch>
 800f160:	f7ff feb2 	bl	800eec8 <_ZSt9terminatev>
 800f164:	0800f0a9 	.word	0x0800f0a9

0800f168 <__cxa_rethrow>:
 800f168:	b510      	push	{r4, lr}
 800f16a:	f000 f855 	bl	800f218 <__cxa_get_globals>
 800f16e:	6842      	ldr	r2, [r0, #4]
 800f170:	6804      	ldr	r4, [r0, #0]
 800f172:	3201      	adds	r2, #1
 800f174:	6042      	str	r2, [r0, #4]
 800f176:	b164      	cbz	r4, 800f192 <__cxa_rethrow+0x2a>
 800f178:	f894 2020 	ldrb.w	r2, [r4, #32]
 800f17c:	2a47      	cmp	r2, #71	; 0x47
 800f17e:	d00a      	beq.n	800f196 <__cxa_rethrow+0x2e>
 800f180:	2200      	movs	r2, #0
 800f182:	6002      	str	r2, [r0, #0]
 800f184:	3420      	adds	r4, #32
 800f186:	4620      	mov	r0, r4
 800f188:	f7f8 ff78 	bl	800807c <_Unwind_Resume_or_Rethrow>
 800f18c:	4620      	mov	r0, r4
 800f18e:	f7ff fe03 	bl	800ed98 <__cxa_begin_catch>
 800f192:	f7ff fe99 	bl	800eec8 <_ZSt9terminatev>
 800f196:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 800f19a:	2a4e      	cmp	r2, #78	; 0x4e
 800f19c:	d1f0      	bne.n	800f180 <__cxa_rethrow+0x18>
 800f19e:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 800f1a2:	2a55      	cmp	r2, #85	; 0x55
 800f1a4:	d1ec      	bne.n	800f180 <__cxa_rethrow+0x18>
 800f1a6:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800f1aa:	2a43      	cmp	r2, #67	; 0x43
 800f1ac:	d1e8      	bne.n	800f180 <__cxa_rethrow+0x18>
 800f1ae:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 800f1b2:	2a43      	cmp	r2, #67	; 0x43
 800f1b4:	d1e4      	bne.n	800f180 <__cxa_rethrow+0x18>
 800f1b6:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800f1ba:	2a2b      	cmp	r2, #43	; 0x2b
 800f1bc:	d1e0      	bne.n	800f180 <__cxa_rethrow+0x18>
 800f1be:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 800f1c2:	2a2b      	cmp	r2, #43	; 0x2b
 800f1c4:	d1dc      	bne.n	800f180 <__cxa_rethrow+0x18>
 800f1c6:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 800f1ca:	2a01      	cmp	r2, #1
 800f1cc:	d8d8      	bhi.n	800f180 <__cxa_rethrow+0x18>
 800f1ce:	6962      	ldr	r2, [r4, #20]
 800f1d0:	4252      	negs	r2, r2
 800f1d2:	6162      	str	r2, [r4, #20]
 800f1d4:	e7d6      	b.n	800f184 <__cxa_rethrow+0x1c>
 800f1d6:	bf00      	nop

0800f1d8 <_ZNKSt9bad_alloc4whatEv>:
 800f1d8:	4800      	ldr	r0, [pc, #0]	; (800f1dc <_ZNKSt9bad_alloc4whatEv+0x4>)
 800f1da:	4770      	bx	lr
 800f1dc:	08018270 	.word	0x08018270

0800f1e0 <_ZNSt9bad_allocD1Ev>:
 800f1e0:	b510      	push	{r4, lr}
 800f1e2:	4b03      	ldr	r3, [pc, #12]	; (800f1f0 <_ZNSt9bad_allocD1Ev+0x10>)
 800f1e4:	6003      	str	r3, [r0, #0]
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	f000 fc58 	bl	800fa9c <_ZNSt9exceptionD1Ev>
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	bd10      	pop	{r4, pc}
 800f1f0:	080182a4 	.word	0x080182a4

0800f1f4 <_ZNSt9bad_allocD0Ev>:
 800f1f4:	b510      	push	{r4, lr}
 800f1f6:	4b05      	ldr	r3, [pc, #20]	; (800f20c <_ZNSt9bad_allocD0Ev+0x18>)
 800f1f8:	6003      	str	r3, [r0, #0]
 800f1fa:	4604      	mov	r4, r0
 800f1fc:	f000 fc4e 	bl	800fa9c <_ZNSt9exceptionD1Ev>
 800f200:	4620      	mov	r0, r4
 800f202:	2104      	movs	r1, #4
 800f204:	f000 fc00 	bl	800fa08 <_ZdlPvj>
 800f208:	4620      	mov	r0, r4
 800f20a:	bd10      	pop	{r4, pc}
 800f20c:	080182a4 	.word	0x080182a4

0800f210 <__cxa_get_globals_fast>:
 800f210:	4800      	ldr	r0, [pc, #0]	; (800f214 <__cxa_get_globals_fast+0x4>)
 800f212:	4770      	bx	lr
 800f214:	20008c70 	.word	0x20008c70

0800f218 <__cxa_get_globals>:
 800f218:	4800      	ldr	r0, [pc, #0]	; (800f21c <__cxa_get_globals+0x4>)
 800f21a:	4770      	bx	lr
 800f21c:	20008c70 	.word	0x20008c70

0800f220 <__cxa_end_cleanup>:
 800f220:	b41e      	push	{r1, r2, r3, r4}
 800f222:	f000 f891 	bl	800f348 <__gnu_end_cleanup>
 800f226:	bc1e      	pop	{r1, r2, r3, r4}
 800f228:	f7f8 ff16 	bl	8008058 <_Unwind_Resume>

0800f22c <__cxa_type_match>:
 800f22c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f22e:	7802      	ldrb	r2, [r0, #0]
 800f230:	2a47      	cmp	r2, #71	; 0x47
 800f232:	b083      	sub	sp, #12
 800f234:	460d      	mov	r5, r1
 800f236:	461f      	mov	r7, r3
 800f238:	d01e      	beq.n	800f278 <__cxa_type_match+0x4c>
 800f23a:	2300      	movs	r3, #0
 800f23c:	4c27      	ldr	r4, [pc, #156]	; (800f2dc <__cxa_type_match+0xb0>)
 800f23e:	9301      	str	r3, [sp, #4]
 800f240:	6823      	ldr	r3, [r4, #0]
 800f242:	4620      	mov	r0, r4
 800f244:	689b      	ldr	r3, [r3, #8]
 800f246:	4798      	blx	r3
 800f248:	b180      	cbz	r0, 800f26c <__cxa_type_match+0x40>
 800f24a:	9b01      	ldr	r3, [sp, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	9301      	str	r3, [sp, #4]
 800f250:	2602      	movs	r6, #2
 800f252:	682b      	ldr	r3, [r5, #0]
 800f254:	4621      	mov	r1, r4
 800f256:	4628      	mov	r0, r5
 800f258:	691c      	ldr	r4, [r3, #16]
 800f25a:	aa01      	add	r2, sp, #4
 800f25c:	2301      	movs	r3, #1
 800f25e:	47a0      	blx	r4
 800f260:	b130      	cbz	r0, 800f270 <__cxa_type_match+0x44>
 800f262:	9b01      	ldr	r3, [sp, #4]
 800f264:	603b      	str	r3, [r7, #0]
 800f266:	4630      	mov	r0, r6
 800f268:	b003      	add	sp, #12
 800f26a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f26c:	2601      	movs	r6, #1
 800f26e:	e7f0      	b.n	800f252 <__cxa_type_match+0x26>
 800f270:	4606      	mov	r6, r0
 800f272:	4630      	mov	r0, r6
 800f274:	b003      	add	sp, #12
 800f276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f278:	7843      	ldrb	r3, [r0, #1]
 800f27a:	2b4e      	cmp	r3, #78	; 0x4e
 800f27c:	d1dd      	bne.n	800f23a <__cxa_type_match+0xe>
 800f27e:	7883      	ldrb	r3, [r0, #2]
 800f280:	2b55      	cmp	r3, #85	; 0x55
 800f282:	d1da      	bne.n	800f23a <__cxa_type_match+0xe>
 800f284:	78c3      	ldrb	r3, [r0, #3]
 800f286:	2b43      	cmp	r3, #67	; 0x43
 800f288:	d019      	beq.n	800f2be <__cxa_type_match+0x92>
 800f28a:	78c3      	ldrb	r3, [r0, #3]
 800f28c:	2b43      	cmp	r3, #67	; 0x43
 800f28e:	d1d4      	bne.n	800f23a <__cxa_type_match+0xe>
 800f290:	7903      	ldrb	r3, [r0, #4]
 800f292:	2b43      	cmp	r3, #67	; 0x43
 800f294:	d1d1      	bne.n	800f23a <__cxa_type_match+0xe>
 800f296:	7943      	ldrb	r3, [r0, #5]
 800f298:	2b2b      	cmp	r3, #43	; 0x2b
 800f29a:	d1ce      	bne.n	800f23a <__cxa_type_match+0xe>
 800f29c:	7983      	ldrb	r3, [r0, #6]
 800f29e:	2b2b      	cmp	r3, #43	; 0x2b
 800f2a0:	d1cb      	bne.n	800f23a <__cxa_type_match+0xe>
 800f2a2:	79c3      	ldrb	r3, [r0, #7]
 800f2a4:	2b01      	cmp	r3, #1
 800f2a6:	d8c8      	bhi.n	800f23a <__cxa_type_match+0xe>
 800f2a8:	d004      	beq.n	800f2b4 <__cxa_type_match+0x88>
 800f2aa:	f850 4c20 	ldr.w	r4, [r0, #-32]
 800f2ae:	3058      	adds	r0, #88	; 0x58
 800f2b0:	9001      	str	r0, [sp, #4]
 800f2b2:	e7c5      	b.n	800f240 <__cxa_type_match+0x14>
 800f2b4:	f850 0c20 	ldr.w	r0, [r0, #-32]
 800f2b8:	f850 4c78 	ldr.w	r4, [r0, #-120]
 800f2bc:	e7f8      	b.n	800f2b0 <__cxa_type_match+0x84>
 800f2be:	7903      	ldrb	r3, [r0, #4]
 800f2c0:	2b46      	cmp	r3, #70	; 0x46
 800f2c2:	d1e2      	bne.n	800f28a <__cxa_type_match+0x5e>
 800f2c4:	7943      	ldrb	r3, [r0, #5]
 800f2c6:	2b4f      	cmp	r3, #79	; 0x4f
 800f2c8:	d1df      	bne.n	800f28a <__cxa_type_match+0x5e>
 800f2ca:	7983      	ldrb	r3, [r0, #6]
 800f2cc:	2b52      	cmp	r3, #82	; 0x52
 800f2ce:	d1dc      	bne.n	800f28a <__cxa_type_match+0x5e>
 800f2d0:	79c3      	ldrb	r3, [r0, #7]
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d1d9      	bne.n	800f28a <__cxa_type_match+0x5e>
 800f2d6:	9301      	str	r3, [sp, #4]
 800f2d8:	4c01      	ldr	r4, [pc, #4]	; (800f2e0 <__cxa_type_match+0xb4>)
 800f2da:	e7b1      	b.n	800f240 <__cxa_type_match+0x14>
 800f2dc:	080182cc 	.word	0x080182cc
 800f2e0:	080182c4 	.word	0x080182c4

0800f2e4 <__cxa_begin_cleanup>:
 800f2e4:	b510      	push	{r4, lr}
 800f2e6:	4604      	mov	r4, r0
 800f2e8:	f7ff ff96 	bl	800f218 <__cxa_get_globals>
 800f2ec:	7823      	ldrb	r3, [r4, #0]
 800f2ee:	2b47      	cmp	r3, #71	; 0x47
 800f2f0:	f1a4 0220 	sub.w	r2, r4, #32
 800f2f4:	d004      	beq.n	800f300 <__cxa_begin_cleanup+0x1c>
 800f2f6:	6883      	ldr	r3, [r0, #8]
 800f2f8:	bb23      	cbnz	r3, 800f344 <__cxa_begin_cleanup+0x60>
 800f2fa:	6082      	str	r2, [r0, #8]
 800f2fc:	2001      	movs	r0, #1
 800f2fe:	bd10      	pop	{r4, pc}
 800f300:	7863      	ldrb	r3, [r4, #1]
 800f302:	2b4e      	cmp	r3, #78	; 0x4e
 800f304:	d1f7      	bne.n	800f2f6 <__cxa_begin_cleanup+0x12>
 800f306:	78a3      	ldrb	r3, [r4, #2]
 800f308:	2b55      	cmp	r3, #85	; 0x55
 800f30a:	d1f4      	bne.n	800f2f6 <__cxa_begin_cleanup+0x12>
 800f30c:	78e3      	ldrb	r3, [r4, #3]
 800f30e:	2b43      	cmp	r3, #67	; 0x43
 800f310:	d1f1      	bne.n	800f2f6 <__cxa_begin_cleanup+0x12>
 800f312:	7923      	ldrb	r3, [r4, #4]
 800f314:	2b43      	cmp	r3, #67	; 0x43
 800f316:	d1ee      	bne.n	800f2f6 <__cxa_begin_cleanup+0x12>
 800f318:	7963      	ldrb	r3, [r4, #5]
 800f31a:	2b2b      	cmp	r3, #43	; 0x2b
 800f31c:	d1eb      	bne.n	800f2f6 <__cxa_begin_cleanup+0x12>
 800f31e:	79a3      	ldrb	r3, [r4, #6]
 800f320:	2b2b      	cmp	r3, #43	; 0x2b
 800f322:	d1e8      	bne.n	800f2f6 <__cxa_begin_cleanup+0x12>
 800f324:	79e3      	ldrb	r3, [r4, #7]
 800f326:	2b01      	cmp	r3, #1
 800f328:	d8e5      	bhi.n	800f2f6 <__cxa_begin_cleanup+0x12>
 800f32a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800f32e:	3301      	adds	r3, #1
 800f330:	2b01      	cmp	r3, #1
 800f332:	f844 3c04 	str.w	r3, [r4, #-4]
 800f336:	d1e1      	bne.n	800f2fc <__cxa_begin_cleanup+0x18>
 800f338:	6883      	ldr	r3, [r0, #8]
 800f33a:	f844 3c08 	str.w	r3, [r4, #-8]
 800f33e:	6082      	str	r2, [r0, #8]
 800f340:	2001      	movs	r0, #1
 800f342:	bd10      	pop	{r4, pc}
 800f344:	f7ff fdc0 	bl	800eec8 <_ZSt9terminatev>

0800f348 <__gnu_end_cleanup>:
 800f348:	b508      	push	{r3, lr}
 800f34a:	f7ff ff65 	bl	800f218 <__cxa_get_globals>
 800f34e:	6883      	ldr	r3, [r0, #8]
 800f350:	b383      	cbz	r3, 800f3b4 <__gnu_end_cleanup+0x6c>
 800f352:	f893 2020 	ldrb.w	r2, [r3, #32]
 800f356:	2a47      	cmp	r2, #71	; 0x47
 800f358:	d004      	beq.n	800f364 <__gnu_end_cleanup+0x1c>
 800f35a:	2200      	movs	r2, #0
 800f35c:	6082      	str	r2, [r0, #8]
 800f35e:	f103 0020 	add.w	r0, r3, #32
 800f362:	bd08      	pop	{r3, pc}
 800f364:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800f368:	2a4e      	cmp	r2, #78	; 0x4e
 800f36a:	d1f6      	bne.n	800f35a <__gnu_end_cleanup+0x12>
 800f36c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800f370:	2a55      	cmp	r2, #85	; 0x55
 800f372:	d1f2      	bne.n	800f35a <__gnu_end_cleanup+0x12>
 800f374:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800f378:	2a43      	cmp	r2, #67	; 0x43
 800f37a:	d1ee      	bne.n	800f35a <__gnu_end_cleanup+0x12>
 800f37c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800f380:	2a43      	cmp	r2, #67	; 0x43
 800f382:	d1ea      	bne.n	800f35a <__gnu_end_cleanup+0x12>
 800f384:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800f388:	2a2b      	cmp	r2, #43	; 0x2b
 800f38a:	d1e6      	bne.n	800f35a <__gnu_end_cleanup+0x12>
 800f38c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 800f390:	2a2b      	cmp	r2, #43	; 0x2b
 800f392:	d1e2      	bne.n	800f35a <__gnu_end_cleanup+0x12>
 800f394:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800f398:	2a01      	cmp	r2, #1
 800f39a:	d8de      	bhi.n	800f35a <__gnu_end_cleanup+0x12>
 800f39c:	69da      	ldr	r2, [r3, #28]
 800f39e:	3a01      	subs	r2, #1
 800f3a0:	61da      	str	r2, [r3, #28]
 800f3a2:	2a00      	cmp	r2, #0
 800f3a4:	d1db      	bne.n	800f35e <__gnu_end_cleanup+0x16>
 800f3a6:	699a      	ldr	r2, [r3, #24]
 800f3a8:	6082      	str	r2, [r0, #8]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	619a      	str	r2, [r3, #24]
 800f3ae:	f103 0020 	add.w	r0, r3, #32
 800f3b2:	bd08      	pop	{r3, pc}
 800f3b4:	f7ff fd88 	bl	800eec8 <_ZSt9terminatev>

0800f3b8 <_ZL28read_encoded_value_with_basehjPKhPj>:
 800f3b8:	2850      	cmp	r0, #80	; 0x50
 800f3ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3bc:	d054      	beq.n	800f468 <_ZL28read_encoded_value_with_basehjPKhPj+0xb0>
 800f3be:	f000 040f 	and.w	r4, r0, #15
 800f3c2:	2c0c      	cmp	r4, #12
 800f3c4:	d84e      	bhi.n	800f464 <_ZL28read_encoded_value_with_basehjPKhPj+0xac>
 800f3c6:	e8df f004 	tbb	[pc, r4]
 800f3ca:	3907      	.short	0x3907
 800f3cc:	4d170749 	.word	0x4d170749
 800f3d0:	1f4d4d4d 	.word	0x1f4d4d4d
 800f3d4:	071b      	.short	0x071b
 800f3d6:	17          	.byte	0x17
 800f3d7:	00          	.byte	0x00
 800f3d8:	4615      	mov	r5, r2
 800f3da:	f855 4b04 	ldr.w	r4, [r5], #4
 800f3de:	b144      	cbz	r4, 800f3f2 <_ZL28read_encoded_value_with_basehjPKhPj+0x3a>
 800f3e0:	f000 0670 	and.w	r6, r0, #112	; 0x70
 800f3e4:	2e10      	cmp	r6, #16
 800f3e6:	bf08      	it	eq
 800f3e8:	4611      	moveq	r1, r2
 800f3ea:	440c      	add	r4, r1
 800f3ec:	0602      	lsls	r2, r0, #24
 800f3ee:	bf48      	it	mi
 800f3f0:	6824      	ldrmi	r4, [r4, #0]
 800f3f2:	601c      	str	r4, [r3, #0]
 800f3f4:	4628      	mov	r0, r5
 800f3f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3f8:	4615      	mov	r5, r2
 800f3fa:	f855 4b08 	ldr.w	r4, [r5], #8
 800f3fe:	e7ee      	b.n	800f3de <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f400:	4615      	mov	r5, r2
 800f402:	f935 4b02 	ldrsh.w	r4, [r5], #2
 800f406:	e7ea      	b.n	800f3de <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f408:	2400      	movs	r4, #0
 800f40a:	4627      	mov	r7, r4
 800f40c:	4615      	mov	r5, r2
 800f40e:	f815 eb01 	ldrb.w	lr, [r5], #1
 800f412:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
 800f416:	40be      	lsls	r6, r7
 800f418:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800f41c:	ea44 0406 	orr.w	r4, r4, r6
 800f420:	f107 0707 	add.w	r7, r7, #7
 800f424:	d1f3      	bne.n	800f40e <_ZL28read_encoded_value_with_basehjPKhPj+0x56>
 800f426:	2f1f      	cmp	r7, #31
 800f428:	d8d9      	bhi.n	800f3de <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f42a:	f01e 0f40 	tst.w	lr, #64	; 0x40
 800f42e:	d0d6      	beq.n	800f3de <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f430:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800f434:	fa06 f707 	lsl.w	r7, r6, r7
 800f438:	433c      	orrs	r4, r7
 800f43a:	e7d1      	b.n	800f3e0 <_ZL28read_encoded_value_with_basehjPKhPj+0x28>
 800f43c:	2400      	movs	r4, #0
 800f43e:	4627      	mov	r7, r4
 800f440:	4615      	mov	r5, r2
 800f442:	f815 eb01 	ldrb.w	lr, [r5], #1
 800f446:	f00e 067f 	and.w	r6, lr, #127	; 0x7f
 800f44a:	40be      	lsls	r6, r7
 800f44c:	f01e 0f80 	tst.w	lr, #128	; 0x80
 800f450:	ea44 0406 	orr.w	r4, r4, r6
 800f454:	f107 0707 	add.w	r7, r7, #7
 800f458:	d1f3      	bne.n	800f442 <_ZL28read_encoded_value_with_basehjPKhPj+0x8a>
 800f45a:	e7c0      	b.n	800f3de <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f45c:	4615      	mov	r5, r2
 800f45e:	f835 4b02 	ldrh.w	r4, [r5], #2
 800f462:	e7bc      	b.n	800f3de <_ZL28read_encoded_value_with_basehjPKhPj+0x26>
 800f464:	f001 f8b2 	bl	80105cc <abort>
 800f468:	3203      	adds	r2, #3
 800f46a:	f022 0503 	bic.w	r5, r2, #3
 800f46e:	f855 4b04 	ldr.w	r4, [r5], #4
 800f472:	601c      	str	r4, [r3, #0]
 800f474:	4628      	mov	r0, r5
 800f476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f478 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 800f478:	28ff      	cmp	r0, #255	; 0xff
 800f47a:	d00d      	beq.n	800f498 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 800f47c:	f000 0070 	and.w	r0, r0, #112	; 0x70
 800f480:	2820      	cmp	r0, #32
 800f482:	d015      	beq.n	800f4b0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 800f484:	d90a      	bls.n	800f49c <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 800f486:	2840      	cmp	r0, #64	; 0x40
 800f488:	d00f      	beq.n	800f4aa <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x32>
 800f48a:	2850      	cmp	r0, #80	; 0x50
 800f48c:	d004      	beq.n	800f498 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 800f48e:	2830      	cmp	r0, #48	; 0x30
 800f490:	d108      	bne.n	800f4a4 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 800f492:	4608      	mov	r0, r1
 800f494:	f7f8 bfe4 	b.w	8008460 <_Unwind_GetDataRelBase>
 800f498:	2000      	movs	r0, #0
 800f49a:	4770      	bx	lr
 800f49c:	2800      	cmp	r0, #0
 800f49e:	d0fb      	beq.n	800f498 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 800f4a0:	2810      	cmp	r0, #16
 800f4a2:	d0f9      	beq.n	800f498 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 800f4a4:	b508      	push	{r3, lr}
 800f4a6:	f001 f891 	bl	80105cc <abort>
 800f4aa:	4608      	mov	r0, r1
 800f4ac:	f7f8 bfc4 	b.w	8008438 <_Unwind_GetRegionStart>
 800f4b0:	4608      	mov	r0, r1
 800f4b2:	f7f8 bfd1 	b.w	8008458 <_Unwind_GetTextRelBase>
 800f4b6:	bf00      	nop

0800f4b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 800f4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ba:	460c      	mov	r4, r1
 800f4bc:	4615      	mov	r5, r2
 800f4be:	4607      	mov	r7, r0
 800f4c0:	2800      	cmp	r0, #0
 800f4c2:	d044      	beq.n	800f54e <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x96>
 800f4c4:	f7f8 ffb8 	bl	8008438 <_Unwind_GetRegionStart>
 800f4c8:	6028      	str	r0, [r5, #0]
 800f4ca:	7826      	ldrb	r6, [r4, #0]
 800f4cc:	2eff      	cmp	r6, #255	; 0xff
 800f4ce:	f104 0401 	add.w	r4, r4, #1
 800f4d2:	d032      	beq.n	800f53a <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x82>
 800f4d4:	4639      	mov	r1, r7
 800f4d6:	4630      	mov	r0, r6
 800f4d8:	f7ff ffce 	bl	800f478 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800f4dc:	4622      	mov	r2, r4
 800f4de:	4601      	mov	r1, r0
 800f4e0:	1d2b      	adds	r3, r5, #4
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	f7ff ff68 	bl	800f3b8 <_ZL28read_encoded_value_with_basehjPKhPj>
 800f4e8:	4604      	mov	r4, r0
 800f4ea:	1c60      	adds	r0, r4, #1
 800f4ec:	7823      	ldrb	r3, [r4, #0]
 800f4ee:	752b      	strb	r3, [r5, #20]
 800f4f0:	2bff      	cmp	r3, #255	; 0xff
 800f4f2:	d029      	beq.n	800f548 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x90>
 800f4f4:	2310      	movs	r3, #16
 800f4f6:	2400      	movs	r4, #0
 800f4f8:	752b      	strb	r3, [r5, #20]
 800f4fa:	4622      	mov	r2, r4
 800f4fc:	f810 1b01 	ldrb.w	r1, [r0], #1
 800f500:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800f504:	4093      	lsls	r3, r2
 800f506:	0609      	lsls	r1, r1, #24
 800f508:	ea44 0403 	orr.w	r4, r4, r3
 800f50c:	f102 0207 	add.w	r2, r2, #7
 800f510:	d4f4      	bmi.n	800f4fc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x44>
 800f512:	4404      	add	r4, r0
 800f514:	60ec      	str	r4, [r5, #12]
 800f516:	7803      	ldrb	r3, [r0, #0]
 800f518:	756b      	strb	r3, [r5, #21]
 800f51a:	2400      	movs	r4, #0
 800f51c:	3001      	adds	r0, #1
 800f51e:	4622      	mov	r2, r4
 800f520:	f810 1b01 	ldrb.w	r1, [r0], #1
 800f524:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800f528:	4093      	lsls	r3, r2
 800f52a:	431c      	orrs	r4, r3
 800f52c:	060b      	lsls	r3, r1, #24
 800f52e:	f102 0207 	add.w	r2, r2, #7
 800f532:	d4f5      	bmi.n	800f520 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x68>
 800f534:	4404      	add	r4, r0
 800f536:	612c      	str	r4, [r5, #16]
 800f538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f53a:	6068      	str	r0, [r5, #4]
 800f53c:	7823      	ldrb	r3, [r4, #0]
 800f53e:	752b      	strb	r3, [r5, #20]
 800f540:	2bff      	cmp	r3, #255	; 0xff
 800f542:	f104 0001 	add.w	r0, r4, #1
 800f546:	d1d5      	bne.n	800f4f4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3c>
 800f548:	2300      	movs	r3, #0
 800f54a:	60eb      	str	r3, [r5, #12]
 800f54c:	e7e3      	b.n	800f516 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 800f54e:	e7bb      	b.n	800f4c8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>

0800f550 <__gxx_personality_v0>:
 800f550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f554:	f000 0403 	and.w	r4, r0, #3
 800f558:	b097      	sub	sp, #92	; 0x5c
 800f55a:	2300      	movs	r3, #0
 800f55c:	2c01      	cmp	r4, #1
 800f55e:	4689      	mov	r9, r1
 800f560:	4617      	mov	r7, r2
 800f562:	930a      	str	r3, [sp, #40]	; 0x28
 800f564:	d01e      	beq.n	800f5a4 <__gxx_personality_v0+0x54>
 800f566:	d30e      	bcc.n	800f586 <__gxx_personality_v0+0x36>
 800f568:	2c02      	cmp	r4, #2
 800f56a:	d10a      	bne.n	800f582 <__gxx_personality_v0+0x32>
 800f56c:	4639      	mov	r1, r7
 800f56e:	4648      	mov	r0, r9
 800f570:	f7f8 ff4e 	bl	8008410 <__gnu_unwind_frame>
 800f574:	2800      	cmp	r0, #0
 800f576:	f000 80a5 	beq.w	800f6c4 <__gxx_personality_v0+0x174>
 800f57a:	2009      	movs	r0, #9
 800f57c:	b017      	add	sp, #92	; 0x5c
 800f57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f582:	f001 f823 	bl	80105cc <abort>
 800f586:	0700      	lsls	r0, r0, #28
 800f588:	d4f0      	bmi.n	800f56c <__gxx_personality_v0+0x1c>
 800f58a:	2301      	movs	r3, #1
 800f58c:	9303      	str	r3, [sp, #12]
 800f58e:	aa16      	add	r2, sp, #88	; 0x58
 800f590:	2300      	movs	r3, #0
 800f592:	f842 9d2c 	str.w	r9, [r2, #-44]!
 800f596:	4619      	mov	r1, r3
 800f598:	9200      	str	r2, [sp, #0]
 800f59a:	4638      	mov	r0, r7
 800f59c:	220c      	movs	r2, #12
 800f59e:	f7f8 f9db 	bl	8007958 <_Unwind_VRS_Set>
 800f5a2:	e00f      	b.n	800f5c4 <__gxx_personality_v0+0x74>
 800f5a4:	f010 0408 	ands.w	r4, r0, #8
 800f5a8:	f000 8090 	beq.w	800f6cc <__gxx_personality_v0+0x17c>
 800f5ac:	aa16      	add	r2, sp, #88	; 0x58
 800f5ae:	f044 0402 	orr.w	r4, r4, #2
 800f5b2:	f842 1d2c 	str.w	r1, [r2, #-44]!
 800f5b6:	4638      	mov	r0, r7
 800f5b8:	9200      	str	r2, [sp, #0]
 800f5ba:	4619      	mov	r1, r3
 800f5bc:	220c      	movs	r2, #12
 800f5be:	9403      	str	r4, [sp, #12]
 800f5c0:	f7f8 f9ca 	bl	8007958 <_Unwind_VRS_Set>
 800f5c4:	4638      	mov	r0, r7
 800f5c6:	f7f8 ff3d 	bl	8008444 <_Unwind_GetLanguageSpecificData>
 800f5ca:	9005      	str	r0, [sp, #20]
 800f5cc:	2800      	cmp	r0, #0
 800f5ce:	d0cd      	beq.n	800f56c <__gxx_personality_v0+0x1c>
 800f5d0:	ab10      	add	r3, sp, #64	; 0x40
 800f5d2:	461a      	mov	r2, r3
 800f5d4:	9905      	ldr	r1, [sp, #20]
 800f5d6:	9306      	str	r3, [sp, #24]
 800f5d8:	4638      	mov	r0, r7
 800f5da:	f7ff ff6d 	bl	800f4b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800f5de:	4639      	mov	r1, r7
 800f5e0:	4604      	mov	r4, r0
 800f5e2:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 800f5e6:	f7ff ff47 	bl	800f478 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800f5ea:	f10d 0b3c 	add.w	fp, sp, #60	; 0x3c
 800f5ee:	2300      	movs	r3, #0
 800f5f0:	9012      	str	r0, [sp, #72]	; 0x48
 800f5f2:	4619      	mov	r1, r3
 800f5f4:	220f      	movs	r2, #15
 800f5f6:	f8cd b000 	str.w	fp, [sp]
 800f5fa:	4638      	mov	r0, r7
 800f5fc:	f7f8 f986 	bl	800790c <_Unwind_VRS_Get>
 800f600:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f602:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f604:	f023 0301 	bic.w	r3, r3, #1
 800f608:	42a2      	cmp	r2, r4
 800f60a:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
 800f60e:	d975      	bls.n	800f6fc <__gxx_personality_v0+0x1ac>
 800f610:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 800f614:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800f618:	f89d 5055 	ldrb.w	r5, [sp, #85]	; 0x55
 800f61c:	2100      	movs	r1, #0
 800f61e:	4628      	mov	r0, r5
 800f620:	f7ff ff2a 	bl	800f478 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800f624:	4622      	mov	r2, r4
 800f626:	4653      	mov	r3, sl
 800f628:	4601      	mov	r1, r0
 800f62a:	4628      	mov	r0, r5
 800f62c:	f7ff fec4 	bl	800f3b8 <_ZL28read_encoded_value_with_basehjPKhPj>
 800f630:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
 800f634:	4605      	mov	r5, r0
 800f636:	2100      	movs	r1, #0
 800f638:	4620      	mov	r0, r4
 800f63a:	f7ff ff1d 	bl	800f478 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800f63e:	462a      	mov	r2, r5
 800f640:	4643      	mov	r3, r8
 800f642:	4601      	mov	r1, r0
 800f644:	4620      	mov	r0, r4
 800f646:	f7ff feb7 	bl	800f3b8 <_ZL28read_encoded_value_with_basehjPKhPj>
 800f64a:	f89d 4055 	ldrb.w	r4, [sp, #85]	; 0x55
 800f64e:	4605      	mov	r5, r0
 800f650:	2100      	movs	r1, #0
 800f652:	4620      	mov	r0, r4
 800f654:	f7ff ff10 	bl	800f478 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800f658:	462a      	mov	r2, r5
 800f65a:	4601      	mov	r1, r0
 800f65c:	465b      	mov	r3, fp
 800f65e:	4620      	mov	r0, r4
 800f660:	f7ff feaa 	bl	800f3b8 <_ZL28read_encoded_value_with_basehjPKhPj>
 800f664:	4604      	mov	r4, r0
 800f666:	2000      	movs	r0, #0
 800f668:	4602      	mov	r2, r0
 800f66a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f66e:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 800f672:	4093      	lsls	r3, r2
 800f674:	0609      	lsls	r1, r1, #24
 800f676:	ea40 0003 	orr.w	r0, r0, r3
 800f67a:	f102 0207 	add.w	r2, r2, #7
 800f67e:	d4f4      	bmi.n	800f66a <__gxx_personality_v0+0x11a>
 800f680:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f682:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f684:	4413      	add	r3, r2
 800f686:	429e      	cmp	r6, r3
 800f688:	d231      	bcs.n	800f6ee <__gxx_personality_v0+0x19e>
 800f68a:	9b03      	ldr	r3, [sp, #12]
 800f68c:	07db      	lsls	r3, r3, #31
 800f68e:	d539      	bpl.n	800f704 <__gxx_personality_v0+0x1b4>
 800f690:	2500      	movs	r5, #0
 800f692:	9504      	str	r5, [sp, #16]
 800f694:	2300      	movs	r3, #0
 800f696:	4619      	mov	r1, r3
 800f698:	220d      	movs	r2, #13
 800f69a:	f8cd 8000 	str.w	r8, [sp]
 800f69e:	4638      	mov	r0, r7
 800f6a0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800f6a2:	f7f8 f933 	bl	800790c <_Unwind_VRS_Get>
 800f6a6:	9a05      	ldr	r2, [sp, #20]
 800f6a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f6aa:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
 800f6ae:	9a04      	ldr	r2, [sp, #16]
 800f6b0:	f8c9 4024 	str.w	r4, [r9, #36]	; 0x24
 800f6b4:	f8c9 5028 	str.w	r5, [r9, #40]	; 0x28
 800f6b8:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 800f6bc:	f8c9 3020 	str.w	r3, [r9, #32]
 800f6c0:	2006      	movs	r0, #6
 800f6c2:	e75b      	b.n	800f57c <__gxx_personality_v0+0x2c>
 800f6c4:	2008      	movs	r0, #8
 800f6c6:	b017      	add	sp, #92	; 0x5c
 800f6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6cc:	ab10      	add	r3, sp, #64	; 0x40
 800f6ce:	9300      	str	r3, [sp, #0]
 800f6d0:	9306      	str	r3, [sp, #24]
 800f6d2:	220d      	movs	r2, #13
 800f6d4:	4623      	mov	r3, r4
 800f6d6:	4621      	mov	r1, r4
 800f6d8:	4638      	mov	r0, r7
 800f6da:	f8d9 5020 	ldr.w	r5, [r9, #32]
 800f6de:	f7f8 f915 	bl	800790c <_Unwind_VRS_Get>
 800f6e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f6e4:	429d      	cmp	r5, r3
 800f6e6:	d012      	beq.n	800f70e <__gxx_personality_v0+0x1be>
 800f6e8:	2302      	movs	r3, #2
 800f6ea:	9303      	str	r3, [sp, #12]
 800f6ec:	e74f      	b.n	800f58e <__gxx_personality_v0+0x3e>
 800f6ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f6f0:	4413      	add	r3, r2
 800f6f2:	429e      	cmp	r6, r3
 800f6f4:	d359      	bcc.n	800f7aa <__gxx_personality_v0+0x25a>
 800f6f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f6f8:	42a3      	cmp	r3, r4
 800f6fa:	d88d      	bhi.n	800f618 <__gxx_personality_v0+0xc8>
 800f6fc:	2500      	movs	r5, #0
 800f6fe:	9504      	str	r5, [sp, #16]
 800f700:	2401      	movs	r4, #1
 800f702:	e105      	b.n	800f910 <__gxx_personality_v0+0x3c0>
 800f704:	9b03      	ldr	r3, [sp, #12]
 800f706:	071b      	lsls	r3, r3, #28
 800f708:	d54c      	bpl.n	800f7a4 <__gxx_personality_v0+0x254>
 800f70a:	f7ff fbdd 	bl	800eec8 <_ZSt9terminatev>
 800f70e:	aa16      	add	r2, sp, #88	; 0x58
 800f710:	4623      	mov	r3, r4
 800f712:	f842 9d2c 	str.w	r9, [r2, #-44]!
 800f716:	4621      	mov	r1, r4
 800f718:	9200      	str	r2, [sp, #0]
 800f71a:	4638      	mov	r0, r7
 800f71c:	220c      	movs	r2, #12
 800f71e:	f7f8 f91b 	bl	8007958 <_Unwind_VRS_Set>
 800f722:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 800f726:	9304      	str	r3, [sp, #16]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d03b      	beq.n	800f7a4 <__gxx_personality_v0+0x254>
 800f72c:	f8d9 5028 	ldr.w	r5, [r9, #40]	; 0x28
 800f730:	f8d9 102c 	ldr.w	r1, [r9, #44]	; 0x2c
 800f734:	2403      	movs	r4, #3
 800f736:	2d00      	cmp	r5, #0
 800f738:	f2c0 8106 	blt.w	800f948 <__gxx_personality_v0+0x3f8>
 800f73c:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 800f740:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800f744:	a916      	add	r1, sp, #88	; 0x58
 800f746:	2300      	movs	r3, #0
 800f748:	f841 9d28 	str.w	r9, [r1, #-40]!
 800f74c:	461a      	mov	r2, r3
 800f74e:	9100      	str	r1, [sp, #0]
 800f750:	4638      	mov	r0, r7
 800f752:	4619      	mov	r1, r3
 800f754:	f7f8 f900 	bl	8007958 <_Unwind_VRS_Set>
 800f758:	2300      	movs	r3, #0
 800f75a:	4619      	mov	r1, r3
 800f75c:	2201      	movs	r2, #1
 800f75e:	f8cd a000 	str.w	sl, [sp]
 800f762:	4638      	mov	r0, r7
 800f764:	950d      	str	r5, [sp, #52]	; 0x34
 800f766:	f7f8 f8f7 	bl	8007958 <_Unwind_VRS_Set>
 800f76a:	2300      	movs	r3, #0
 800f76c:	4619      	mov	r1, r3
 800f76e:	220f      	movs	r2, #15
 800f770:	f8cd 8000 	str.w	r8, [sp]
 800f774:	4638      	mov	r0, r7
 800f776:	f7f8 f8c9 	bl	800790c <_Unwind_VRS_Get>
 800f77a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f77c:	9a04      	ldr	r2, [sp, #16]
 800f77e:	f8cd 8000 	str.w	r8, [sp]
 800f782:	f003 0501 	and.w	r5, r3, #1
 800f786:	2300      	movs	r3, #0
 800f788:	4315      	orrs	r5, r2
 800f78a:	4638      	mov	r0, r7
 800f78c:	4619      	mov	r1, r3
 800f78e:	220f      	movs	r2, #15
 800f790:	950e      	str	r5, [sp, #56]	; 0x38
 800f792:	f7f8 f8e1 	bl	8007958 <_Unwind_VRS_Set>
 800f796:	2c02      	cmp	r4, #2
 800f798:	f000 8080 	beq.w	800f89c <__gxx_personality_v0+0x34c>
 800f79c:	2007      	movs	r0, #7
 800f79e:	b017      	add	sp, #92	; 0x5c
 800f7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7a4:	4648      	mov	r0, r9
 800f7a6:	f000 fac3 	bl	800fd30 <__cxa_call_terminate>
 800f7aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7ac:	9304      	str	r3, [sp, #16]
 800f7ae:	461a      	mov	r2, r3
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d178      	bne.n	800f8a6 <__gxx_personality_v0+0x356>
 800f7b4:	2800      	cmp	r0, #0
 800f7b6:	f43f aed9 	beq.w	800f56c <__gxx_personality_v0+0x1c>
 800f7ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f7bc:	9a04      	ldr	r2, [sp, #16]
 800f7be:	3801      	subs	r0, #1
 800f7c0:	4403      	add	r3, r0
 800f7c2:	2a00      	cmp	r2, #0
 800f7c4:	f43f aed2 	beq.w	800f56c <__gxx_personality_v0+0x1c>
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d075      	beq.n	800f8b8 <__gxx_personality_v0+0x368>
 800f7cc:	9a03      	ldr	r2, [sp, #12]
 800f7ce:	f012 0208 	ands.w	r2, r2, #8
 800f7d2:	9209      	str	r2, [sp, #36]	; 0x24
 800f7d4:	f000 80f6 	beq.w	800f9c4 <__gxx_personality_v0+0x474>
 800f7d8:	2147      	movs	r1, #71	; 0x47
 800f7da:	224e      	movs	r2, #78	; 0x4e
 800f7dc:	f889 1000 	strb.w	r1, [r9]
 800f7e0:	f889 2001 	strb.w	r2, [r9, #1]
 800f7e4:	2155      	movs	r1, #85	; 0x55
 800f7e6:	2243      	movs	r2, #67	; 0x43
 800f7e8:	f889 1002 	strb.w	r1, [r9, #2]
 800f7ec:	f889 2003 	strb.w	r2, [r9, #3]
 800f7f0:	2146      	movs	r1, #70	; 0x46
 800f7f2:	224f      	movs	r2, #79	; 0x4f
 800f7f4:	f889 1004 	strb.w	r1, [r9, #4]
 800f7f8:	f889 2005 	strb.w	r2, [r9, #5]
 800f7fc:	2152      	movs	r1, #82	; 0x52
 800f7fe:	2200      	movs	r2, #0
 800f800:	f889 1006 	strb.w	r1, [r9, #6]
 800f804:	f889 2007 	strb.w	r2, [r9, #7]
 800f808:	2200      	movs	r2, #0
 800f80a:	9208      	str	r2, [sp, #32]
 800f80c:	9707      	str	r7, [sp, #28]
 800f80e:	2500      	movs	r5, #0
 800f810:	4629      	mov	r1, r5
 800f812:	e000      	b.n	800f816 <__gxx_personality_v0+0x2c6>
 800f814:	4623      	mov	r3, r4
 800f816:	461c      	mov	r4, r3
 800f818:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f81c:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800f820:	408a      	lsls	r2, r1
 800f822:	0606      	lsls	r6, r0, #24
 800f824:	ea45 0502 	orr.w	r5, r5, r2
 800f828:	f101 0107 	add.w	r1, r1, #7
 800f82c:	d4f2      	bmi.n	800f814 <__gxx_personality_v0+0x2c4>
 800f82e:	291f      	cmp	r1, #31
 800f830:	d805      	bhi.n	800f83e <__gxx_personality_v0+0x2ee>
 800f832:	0642      	lsls	r2, r0, #25
 800f834:	d503      	bpl.n	800f83e <__gxx_personality_v0+0x2ee>
 800f836:	2201      	movs	r2, #1
 800f838:	408a      	lsls	r2, r1
 800f83a:	4252      	negs	r2, r2
 800f83c:	4315      	orrs	r5, r2
 800f83e:	2600      	movs	r6, #0
 800f840:	4631      	mov	r1, r6
 800f842:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800f846:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800f84a:	408a      	lsls	r2, r1
 800f84c:	0607      	lsls	r7, r0, #24
 800f84e:	ea46 0602 	orr.w	r6, r6, r2
 800f852:	f101 0107 	add.w	r1, r1, #7
 800f856:	d4f4      	bmi.n	800f842 <__gxx_personality_v0+0x2f2>
 800f858:	291f      	cmp	r1, #31
 800f85a:	d805      	bhi.n	800f868 <__gxx_personality_v0+0x318>
 800f85c:	0640      	lsls	r0, r0, #25
 800f85e:	d503      	bpl.n	800f868 <__gxx_personality_v0+0x318>
 800f860:	2301      	movs	r3, #1
 800f862:	408b      	lsls	r3, r1
 800f864:	425b      	negs	r3, r3
 800f866:	431e      	orrs	r6, r3
 800f868:	2d00      	cmp	r5, #0
 800f86a:	d05c      	beq.n	800f926 <__gxx_personality_v0+0x3d6>
 800f86c:	dd5e      	ble.n	800f92c <__gxx_personality_v0+0x3dc>
 800f86e:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 800f872:	28ff      	cmp	r0, #255	; 0xff
 800f874:	f000 80a4 	beq.w	800f9c0 <__gxx_personality_v0+0x470>
 800f878:	f000 0307 	and.w	r3, r0, #7
 800f87c:	2b04      	cmp	r3, #4
 800f87e:	f63f ae80 	bhi.w	800f582 <__gxx_personality_v0+0x32>
 800f882:	a201      	add	r2, pc, #4	; (adr r2, 800f888 <__gxx_personality_v0+0x338>)
 800f884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f888:	0800f8f3 	.word	0x0800f8f3
 800f88c:	0800f583 	.word	0x0800f583
 800f890:	0800f8f9 	.word	0x0800f8f9
 800f894:	0800f8f3 	.word	0x0800f8f3
 800f898:	0800f8d1 	.word	0x0800f8d1
 800f89c:	4648      	mov	r0, r9
 800f89e:	f7ff fd21 	bl	800f2e4 <__cxa_begin_cleanup>
 800f8a2:	2007      	movs	r0, #7
 800f8a4:	e66a      	b.n	800f57c <__gxx_personality_v0+0x2c>
 800f8a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f8a8:	441a      	add	r2, r3
 800f8aa:	9204      	str	r2, [sp, #16]
 800f8ac:	2800      	cmp	r0, #0
 800f8ae:	d184      	bne.n	800f7ba <__gxx_personality_v0+0x26a>
 800f8b0:	9b04      	ldr	r3, [sp, #16]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	f43f ae5a 	beq.w	800f56c <__gxx_personality_v0+0x1c>
 800f8b8:	9b03      	ldr	r3, [sp, #12]
 800f8ba:	f013 0301 	ands.w	r3, r3, #1
 800f8be:	f47f ae55 	bne.w	800f56c <__gxx_personality_v0+0x1c>
 800f8c2:	9a03      	ldr	r2, [sp, #12]
 800f8c4:	f012 0508 	ands.w	r5, r2, #8
 800f8c8:	f040 8097 	bne.w	800f9fa <__gxx_personality_v0+0x4aa>
 800f8cc:	2402      	movs	r4, #2
 800f8ce:	e739      	b.n	800f744 <__gxx_personality_v0+0x1f4>
 800f8d0:	00eb      	lsls	r3, r5, #3
 800f8d2:	425b      	negs	r3, r3
 800f8d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f8d6:	9912      	ldr	r1, [sp, #72]	; 0x48
 800f8d8:	441a      	add	r2, r3
 800f8da:	4643      	mov	r3, r8
 800f8dc:	f7ff fd6c 	bl	800f3b8 <_ZL28read_encoded_value_with_basehjPKhPj>
 800f8e0:	990e      	ldr	r1, [sp, #56]	; 0x38
 800f8e2:	b199      	cbz	r1, 800f90c <__gxx_personality_v0+0x3bc>
 800f8e4:	f1b9 0f00 	cmp.w	r9, #0
 800f8e8:	d109      	bne.n	800f8fe <__gxx_personality_v0+0x3ae>
 800f8ea:	2e00      	cmp	r6, #0
 800f8ec:	d077      	beq.n	800f9de <__gxx_personality_v0+0x48e>
 800f8ee:	19a3      	adds	r3, r4, r6
 800f8f0:	e78d      	b.n	800f80e <__gxx_personality_v0+0x2be>
 800f8f2:	00ab      	lsls	r3, r5, #2
 800f8f4:	425b      	negs	r3, r3
 800f8f6:	e7ed      	b.n	800f8d4 <__gxx_personality_v0+0x384>
 800f8f8:	006b      	lsls	r3, r5, #1
 800f8fa:	425b      	negs	r3, r3
 800f8fc:	e7ea      	b.n	800f8d4 <__gxx_personality_v0+0x384>
 800f8fe:	ab0a      	add	r3, sp, #40	; 0x28
 800f900:	2200      	movs	r2, #0
 800f902:	4648      	mov	r0, r9
 800f904:	f7ff fc92 	bl	800f22c <__cxa_type_match>
 800f908:	2800      	cmp	r0, #0
 800f90a:	d0ee      	beq.n	800f8ea <__gxx_personality_v0+0x39a>
 800f90c:	9f07      	ldr	r7, [sp, #28]
 800f90e:	2403      	movs	r4, #3
 800f910:	9b03      	ldr	r3, [sp, #12]
 800f912:	07da      	lsls	r2, r3, #31
 800f914:	d460      	bmi.n	800f9d8 <__gxx_personality_v0+0x488>
 800f916:	9b03      	ldr	r3, [sp, #12]
 800f918:	0719      	lsls	r1, r3, #28
 800f91a:	d466      	bmi.n	800f9ea <__gxx_personality_v0+0x49a>
 800f91c:	2c01      	cmp	r4, #1
 800f91e:	f43f af41 	beq.w	800f7a4 <__gxx_personality_v0+0x254>
 800f922:	9905      	ldr	r1, [sp, #20]
 800f924:	e707      	b.n	800f736 <__gxx_personality_v0+0x1e6>
 800f926:	2301      	movs	r3, #1
 800f928:	9308      	str	r3, [sp, #32]
 800f92a:	e7de      	b.n	800f8ea <__gxx_personality_v0+0x39a>
 800f92c:	f1b9 0f00 	cmp.w	r9, #0
 800f930:	d001      	beq.n	800f936 <__gxx_personality_v0+0x3e6>
 800f932:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f934:	b35b      	cbz	r3, 800f98e <__gxx_personality_v0+0x43e>
 800f936:	1c6b      	adds	r3, r5, #1
 800f938:	ebc3 7383 	rsb	r3, r3, r3, lsl #30
 800f93c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f93e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d1d1      	bne.n	800f8ea <__gxx_personality_v0+0x39a>
 800f946:	e7e1      	b.n	800f90c <__gxx_personality_v0+0x3bc>
 800f948:	9a06      	ldr	r2, [sp, #24]
 800f94a:	4638      	mov	r0, r7
 800f94c:	f7ff fdb4 	bl	800f4b8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 800f950:	4639      	mov	r1, r7
 800f952:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
 800f956:	f7ff fd8f 	bl	800f478 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 800f95a:	00aa      	lsls	r2, r5, #2
 800f95c:	f082 0203 	eor.w	r2, r2, #3
 800f960:	43d2      	mvns	r2, r2
 800f962:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800f964:	9012      	str	r0, [sp, #72]	; 0x48
 800f966:	58b3      	ldr	r3, [r6, r2]
 800f968:	4416      	add	r6, r2
 800f96a:	b133      	cbz	r3, 800f97a <__gxx_personality_v0+0x42a>
 800f96c:	4632      	mov	r2, r6
 800f96e:	2300      	movs	r3, #0
 800f970:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800f974:	3301      	adds	r3, #1
 800f976:	2900      	cmp	r1, #0
 800f978:	d1fa      	bne.n	800f970 <__gxx_personality_v0+0x420>
 800f97a:	2204      	movs	r2, #4
 800f97c:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
 800f980:	f8c9 002c 	str.w	r0, [r9, #44]	; 0x2c
 800f984:	f8c9 6034 	str.w	r6, [r9, #52]	; 0x34
 800f988:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 800f98c:	e6d6      	b.n	800f73c <__gxx_personality_v0+0x1ec>
 800f98e:	1c6f      	adds	r7, r5, #1
 800f990:	ebc7 7387 	rsb	r3, r7, r7, lsl #30
 800f994:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800f996:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f998:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
 800f99c:	920f      	str	r2, [sp, #60]	; 0x3c
 800f99e:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 800f9a2:	b921      	cbnz	r1, 800f9ae <__gxx_personality_v0+0x45e>
 800f9a4:	e7b2      	b.n	800f90c <__gxx_personality_v0+0x3bc>
 800f9a6:	f857 1f04 	ldr.w	r1, [r7, #4]!
 800f9aa:	2900      	cmp	r1, #0
 800f9ac:	d0ae      	beq.n	800f90c <__gxx_personality_v0+0x3bc>
 800f9ae:	4439      	add	r1, r7
 800f9b0:	465b      	mov	r3, fp
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	4648      	mov	r0, r9
 800f9b6:	f7ff fc39 	bl	800f22c <__cxa_type_match>
 800f9ba:	2800      	cmp	r0, #0
 800f9bc:	d0f3      	beq.n	800f9a6 <__gxx_personality_v0+0x456>
 800f9be:	e794      	b.n	800f8ea <__gxx_personality_v0+0x39a>
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	e787      	b.n	800f8d4 <__gxx_personality_v0+0x384>
 800f9c4:	f899 2007 	ldrb.w	r2, [r9, #7]
 800f9c8:	2a01      	cmp	r2, #1
 800f9ca:	bf0c      	ite	eq
 800f9cc:	f859 2c20 	ldreq.w	r2, [r9, #-32]
 800f9d0:	f109 0258 	addne.w	r2, r9, #88	; 0x58
 800f9d4:	920a      	str	r2, [sp, #40]	; 0x28
 800f9d6:	e717      	b.n	800f808 <__gxx_personality_v0+0x2b8>
 800f9d8:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800f9dc:	e65a      	b.n	800f694 <__gxx_personality_v0+0x144>
 800f9de:	9b08      	ldr	r3, [sp, #32]
 800f9e0:	9f07      	ldr	r7, [sp, #28]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	f47f af68 	bne.w	800f8b8 <__gxx_personality_v0+0x368>
 800f9e8:	e5c0      	b.n	800f56c <__gxx_personality_v0+0x1c>
 800f9ea:	2c01      	cmp	r4, #1
 800f9ec:	f43f ae8d 	beq.w	800f70a <__gxx_personality_v0+0x1ba>
 800f9f0:	2d00      	cmp	r5, #0
 800f9f2:	f6bf aea3 	bge.w	800f73c <__gxx_personality_v0+0x1ec>
 800f9f6:	f7ff fa75 	bl	800eee4 <_ZSt10unexpectedv>
 800f9fa:	461d      	mov	r5, r3
 800f9fc:	2402      	movs	r4, #2
 800f9fe:	e6a1      	b.n	800f744 <__gxx_personality_v0+0x1f4>
 800fa00:	f7ff f9ca 	bl	800ed98 <__cxa_begin_catch>
 800fa04:	e681      	b.n	800f70a <__gxx_personality_v0+0x1ba>
 800fa06:	bf00      	nop

0800fa08 <_ZdlPvj>:
 800fa08:	f7ff b9be 	b.w	800ed88 <_ZdlPv>

0800fa0c <_ZSt15get_new_handlerv>:
 800fa0c:	4b02      	ldr	r3, [pc, #8]	; (800fa18 <_ZSt15get_new_handlerv+0xc>)
 800fa0e:	6818      	ldr	r0, [r3, #0]
 800fa10:	f3bf 8f5b 	dmb	ish
 800fa14:	4770      	bx	lr
 800fa16:	bf00      	nop
 800fa18:	20008c7c 	.word	0x20008c7c

0800fa1c <_ZSt17__throw_bad_allocv>:
 800fa1c:	b508      	push	{r3, lr}
 800fa1e:	2004      	movs	r0, #4
 800fa20:	f7ff fb06 	bl	800f030 <__cxa_allocate_exception>
 800fa24:	4b02      	ldr	r3, [pc, #8]	; (800fa30 <_ZSt17__throw_bad_allocv+0x14>)
 800fa26:	6003      	str	r3, [r0, #0]
 800fa28:	4a02      	ldr	r2, [pc, #8]	; (800fa34 <_ZSt17__throw_bad_allocv+0x18>)
 800fa2a:	4903      	ldr	r1, [pc, #12]	; (800fa38 <_ZSt17__throw_bad_allocv+0x1c>)
 800fa2c:	f7ff fb5e 	bl	800f0ec <__cxa_throw>
 800fa30:	080182a4 	.word	0x080182a4
 800fa34:	0800f1e1 	.word	0x0800f1e1
 800fa38:	08018280 	.word	0x08018280

0800fa3c <_ZSt19__throw_logic_errorPKc>:
 800fa3c:	b538      	push	{r3, r4, r5, lr}
 800fa3e:	4605      	mov	r5, r0
 800fa40:	2008      	movs	r0, #8
 800fa42:	f7ff faf5 	bl	800f030 <__cxa_allocate_exception>
 800fa46:	4629      	mov	r1, r5
 800fa48:	4604      	mov	r4, r0
 800fa4a:	f000 fcb1 	bl	80103b0 <_ZNSt11logic_errorC1EPKc>
 800fa4e:	4620      	mov	r0, r4
 800fa50:	4a04      	ldr	r2, [pc, #16]	; (800fa64 <_ZSt19__throw_logic_errorPKc+0x28>)
 800fa52:	4905      	ldr	r1, [pc, #20]	; (800fa68 <_ZSt19__throw_logic_errorPKc+0x2c>)
 800fa54:	f7ff fb4a 	bl	800f0ec <__cxa_throw>
 800fa58:	4620      	mov	r0, r4
 800fa5a:	f7ff fb01 	bl	800f060 <__cxa_free_exception>
 800fa5e:	f7ff fbdf 	bl	800f220 <__cxa_end_cleanup>
 800fa62:	bf00      	nop
 800fa64:	0800ff7d 	.word	0x0800ff7d
 800fa68:	08018d1c 	.word	0x08018d1c

0800fa6c <_ZSt20__throw_length_errorPKc>:
 800fa6c:	b538      	push	{r3, r4, r5, lr}
 800fa6e:	4605      	mov	r5, r0
 800fa70:	2008      	movs	r0, #8
 800fa72:	f7ff fadd 	bl	800f030 <__cxa_allocate_exception>
 800fa76:	4629      	mov	r1, r5
 800fa78:	4604      	mov	r4, r0
 800fa7a:	f000 fcad 	bl	80103d8 <_ZNSt12length_errorC1EPKc>
 800fa7e:	4620      	mov	r0, r4
 800fa80:	4a04      	ldr	r2, [pc, #16]	; (800fa94 <_ZSt20__throw_length_errorPKc+0x28>)
 800fa82:	4905      	ldr	r1, [pc, #20]	; (800fa98 <_ZSt20__throw_length_errorPKc+0x2c>)
 800fa84:	f7ff fb32 	bl	800f0ec <__cxa_throw>
 800fa88:	4620      	mov	r0, r4
 800fa8a:	f7ff fae9 	bl	800f060 <__cxa_free_exception>
 800fa8e:	f7ff fbc7 	bl	800f220 <__cxa_end_cleanup>
 800fa92:	bf00      	nop
 800fa94:	0800ffd1 	.word	0x0800ffd1
 800fa98:	08018d28 	.word	0x08018d28

0800fa9c <_ZNSt9exceptionD1Ev>:
 800fa9c:	4770      	bx	lr
 800fa9e:	bf00      	nop

0800faa0 <_ZNSt13bad_exceptionD1Ev>:
 800faa0:	4770      	bx	lr
 800faa2:	bf00      	nop

0800faa4 <_ZGTtNKSt13bad_exception4whatEv>:
 800faa4:	4800      	ldr	r0, [pc, #0]	; (800faa8 <_ZGTtNKSt13bad_exception4whatEv+0x4>)
 800faa6:	4770      	bx	lr
 800faa8:	080182b0 	.word	0x080182b0

0800faac <_ZNSt13bad_exceptionD0Ev>:
 800faac:	b510      	push	{r4, lr}
 800faae:	2104      	movs	r1, #4
 800fab0:	4604      	mov	r4, r0
 800fab2:	f7ff ffa9 	bl	800fa08 <_ZdlPvj>
 800fab6:	4620      	mov	r0, r4
 800fab8:	bd10      	pop	{r4, pc}
 800faba:	bf00      	nop

0800fabc <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 800fabc:	b510      	push	{r4, lr}
 800fabe:	4b03      	ldr	r3, [pc, #12]	; (800facc <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 800fac0:	6003      	str	r3, [r0, #0]
 800fac2:	4604      	mov	r4, r0
 800fac4:	f000 f9e4 	bl	800fe90 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800fac8:	4620      	mov	r0, r4
 800faca:	bd10      	pop	{r4, pc}
 800facc:	080183a0 	.word	0x080183a0

0800fad0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 800fad0:	b510      	push	{r4, lr}
 800fad2:	4b05      	ldr	r3, [pc, #20]	; (800fae8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev+0x18>)
 800fad4:	6003      	str	r3, [r0, #0]
 800fad6:	4604      	mov	r4, r0
 800fad8:	f000 f9da 	bl	800fe90 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800fadc:	4620      	mov	r0, r4
 800fade:	210c      	movs	r1, #12
 800fae0:	f7ff ff92 	bl	800fa08 <_ZdlPvj>
 800fae4:	4620      	mov	r0, r4
 800fae6:	bd10      	pop	{r4, pc}
 800fae8:	080183a0 	.word	0x080183a0

0800faec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 800faec:	b570      	push	{r4, r5, r6, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	460d      	mov	r5, r1
 800faf2:	9c06      	ldr	r4, [sp, #24]
 800faf4:	4294      	cmp	r4, r2
 800faf6:	4606      	mov	r6, r0
 800faf8:	d009      	beq.n	800fb0e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x22>
 800fafa:	68b0      	ldr	r0, [r6, #8]
 800fafc:	6806      	ldr	r6, [r0, #0]
 800fafe:	9406      	str	r4, [sp, #24]
 800fb00:	6a34      	ldr	r4, [r6, #32]
 800fb02:	4629      	mov	r1, r5
 800fb04:	46a4      	mov	ip, r4
 800fb06:	b002      	add	sp, #8
 800fb08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fb0c:	4760      	bx	ip
 800fb0e:	4619      	mov	r1, r3
 800fb10:	9201      	str	r2, [sp, #4]
 800fb12:	9300      	str	r3, [sp, #0]
 800fb14:	f000 fa1a 	bl	800ff4c <_ZNKSt9type_infoeqERKS_>
 800fb18:	9b00      	ldr	r3, [sp, #0]
 800fb1a:	9a01      	ldr	r2, [sp, #4]
 800fb1c:	2800      	cmp	r0, #0
 800fb1e:	d0ec      	beq.n	800fafa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
 800fb20:	2006      	movs	r0, #6
 800fb22:	b002      	add	sp, #8
 800fb24:	bd70      	pop	{r4, r5, r6, pc}
 800fb26:	bf00      	nop

0800fb28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800fb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb2c:	b081      	sub	sp, #4
 800fb2e:	460e      	mov	r6, r1
 800fb30:	4619      	mov	r1, r3
 800fb32:	461f      	mov	r7, r3
 800fb34:	4691      	mov	r9, r2
 800fb36:	4683      	mov	fp, r0
 800fb38:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800fb3a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800fb3e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800fb42:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800fb44:	f000 fa02 	bl	800ff4c <_ZNKSt9type_infoeqERKS_>
 800fb48:	b170      	cbz	r0, 800fb68 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x40>
 800fb4a:	2e00      	cmp	r6, #0
 800fb4c:	602c      	str	r4, [r5, #0]
 800fb4e:	f885 9004 	strb.w	r9, [r5, #4]
 800fb52:	db1f      	blt.n	800fb94 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x6c>
 800fb54:	4434      	add	r4, r6
 800fb56:	45a0      	cmp	r8, r4
 800fb58:	bf0c      	ite	eq
 800fb5a:	2406      	moveq	r4, #6
 800fb5c:	2401      	movne	r4, #1
 800fb5e:	71ac      	strb	r4, [r5, #6]
 800fb60:	2000      	movs	r0, #0
 800fb62:	b001      	add	sp, #4
 800fb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb68:	4544      	cmp	r4, r8
 800fb6a:	d018      	beq.n	800fb9e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x76>
 800fb6c:	f8db 0008 	ldr.w	r0, [fp, #8]
 800fb70:	f8d0 e000 	ldr.w	lr, [r0]
 800fb74:	950d      	str	r5, [sp, #52]	; 0x34
 800fb76:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800fb7a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 800fb7e:	940a      	str	r4, [sp, #40]	; 0x28
 800fb80:	f8de 401c 	ldr.w	r4, [lr, #28]
 800fb84:	463b      	mov	r3, r7
 800fb86:	464a      	mov	r2, r9
 800fb88:	4631      	mov	r1, r6
 800fb8a:	46a4      	mov	ip, r4
 800fb8c:	b001      	add	sp, #4
 800fb8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb92:	4760      	bx	ip
 800fb94:	3602      	adds	r6, #2
 800fb96:	d1e3      	bne.n	800fb60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800fb98:	2301      	movs	r3, #1
 800fb9a:	71ab      	strb	r3, [r5, #6]
 800fb9c:	e7e0      	b.n	800fb60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 800fb9e:	4651      	mov	r1, sl
 800fba0:	4658      	mov	r0, fp
 800fba2:	f000 f9d3 	bl	800ff4c <_ZNKSt9type_infoeqERKS_>
 800fba6:	2800      	cmp	r0, #0
 800fba8:	d0e0      	beq.n	800fb6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x44>
 800fbaa:	2000      	movs	r0, #0
 800fbac:	f885 9005 	strb.w	r9, [r5, #5]
 800fbb0:	b001      	add	sp, #4
 800fbb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbb6:	bf00      	nop

0800fbb8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 800fbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbbc:	4607      	mov	r7, r0
 800fbbe:	460c      	mov	r4, r1
 800fbc0:	4615      	mov	r5, r2
 800fbc2:	461e      	mov	r6, r3
 800fbc4:	f000 f97c 	bl	800fec0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 800fbc8:	b108      	cbz	r0, 800fbce <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x16>
 800fbca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbce:	68b8      	ldr	r0, [r7, #8]
 800fbd0:	6807      	ldr	r7, [r0, #0]
 800fbd2:	4621      	mov	r1, r4
 800fbd4:	69bc      	ldr	r4, [r7, #24]
 800fbd6:	4633      	mov	r3, r6
 800fbd8:	462a      	mov	r2, r5
 800fbda:	46a4      	mov	ip, r4
 800fbdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbe0:	4760      	bx	ip
 800fbe2:	bf00      	nop

0800fbe4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv>:
 800fbe4:	b570      	push	{r4, r5, r6, lr}
 800fbe6:	4b3c      	ldr	r3, [pc, #240]	; (800fcd8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf4>)
 800fbe8:	781a      	ldrb	r2, [r3, #0]
 800fbea:	b082      	sub	sp, #8
 800fbec:	2a00      	cmp	r2, #0
 800fbee:	d135      	bne.n	800fc5c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x78>
 800fbf0:	2401      	movs	r4, #1
 800fbf2:	701c      	strb	r4, [r3, #0]
 800fbf4:	f000 f91c 	bl	800fe30 <__cxa_current_exception_type>
 800fbf8:	2800      	cmp	r0, #0
 800fbfa:	d05b      	beq.n	800fcb4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xd0>
 800fbfc:	6844      	ldr	r4, [r0, #4]
 800fbfe:	4d37      	ldr	r5, [pc, #220]	; (800fcdc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 800fc00:	7823      	ldrb	r3, [r4, #0]
 800fc02:	2b2a      	cmp	r3, #42	; 0x2a
 800fc04:	ab02      	add	r3, sp, #8
 800fc06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc0a:	bf08      	it	eq
 800fc0c:	3401      	addeq	r4, #1
 800fc0e:	f843 2d04 	str.w	r2, [r3, #-4]!
 800fc12:	2200      	movs	r2, #0
 800fc14:	4611      	mov	r1, r2
 800fc16:	4620      	mov	r0, r4
 800fc18:	f7f6 fdc0 	bl	800679c <__cxa_demangle>
 800fc1c:	682b      	ldr	r3, [r5, #0]
 800fc1e:	4606      	mov	r6, r0
 800fc20:	68db      	ldr	r3, [r3, #12]
 800fc22:	482f      	ldr	r0, [pc, #188]	; (800fce0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xfc>)
 800fc24:	2230      	movs	r2, #48	; 0x30
 800fc26:	2101      	movs	r1, #1
 800fc28:	f000 ff32 	bl	8010a90 <fwrite>
 800fc2c:	9b01      	ldr	r3, [sp, #4]
 800fc2e:	b17b      	cbz	r3, 800fc50 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x6c>
 800fc30:	682b      	ldr	r3, [r5, #0]
 800fc32:	4620      	mov	r0, r4
 800fc34:	68d9      	ldr	r1, [r3, #12]
 800fc36:	f000 fd65 	bl	8010704 <fputs>
 800fc3a:	682b      	ldr	r3, [r5, #0]
 800fc3c:	4829      	ldr	r0, [pc, #164]	; (800fce4 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x100>)
 800fc3e:	68db      	ldr	r3, [r3, #12]
 800fc40:	2202      	movs	r2, #2
 800fc42:	2101      	movs	r1, #1
 800fc44:	f000 ff24 	bl	8010a90 <fwrite>
 800fc48:	9b01      	ldr	r3, [sp, #4]
 800fc4a:	b18b      	cbz	r3, 800fc70 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x8c>
 800fc4c:	f7ff fa8c 	bl	800f168 <__cxa_rethrow>
 800fc50:	682b      	ldr	r3, [r5, #0]
 800fc52:	4630      	mov	r0, r6
 800fc54:	68d9      	ldr	r1, [r3, #12]
 800fc56:	f000 fd55 	bl	8010704 <fputs>
 800fc5a:	e7ee      	b.n	800fc3a <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x56>
 800fc5c:	4b1f      	ldr	r3, [pc, #124]	; (800fcdc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 800fc5e:	4822      	ldr	r0, [pc, #136]	; (800fce8 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x104>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	221d      	movs	r2, #29
 800fc64:	68db      	ldr	r3, [r3, #12]
 800fc66:	2101      	movs	r1, #1
 800fc68:	f000 ff12 	bl	8010a90 <fwrite>
 800fc6c:	f000 fcae 	bl	80105cc <abort>
 800fc70:	4630      	mov	r0, r6
 800fc72:	f000 ffb7 	bl	8010be4 <free>
 800fc76:	e7e9      	b.n	800fc4c <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x68>
 800fc78:	2901      	cmp	r1, #1
 800fc7a:	460c      	mov	r4, r1
 800fc7c:	d127      	bne.n	800fcce <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xea>
 800fc7e:	f7ff f88b 	bl	800ed98 <__cxa_begin_catch>
 800fc82:	6803      	ldr	r3, [r0, #0]
 800fc84:	689b      	ldr	r3, [r3, #8]
 800fc86:	4798      	blx	r3
 800fc88:	682b      	ldr	r3, [r5, #0]
 800fc8a:	4606      	mov	r6, r0
 800fc8c:	68db      	ldr	r3, [r3, #12]
 800fc8e:	4817      	ldr	r0, [pc, #92]	; (800fcec <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x108>)
 800fc90:	4621      	mov	r1, r4
 800fc92:	220b      	movs	r2, #11
 800fc94:	f000 fefc 	bl	8010a90 <fwrite>
 800fc98:	682b      	ldr	r3, [r5, #0]
 800fc9a:	4630      	mov	r0, r6
 800fc9c:	68d9      	ldr	r1, [r3, #12]
 800fc9e:	f000 fd31 	bl	8010704 <fputs>
 800fca2:	682b      	ldr	r3, [r5, #0]
 800fca4:	200a      	movs	r0, #10
 800fca6:	68d9      	ldr	r1, [r3, #12]
 800fca8:	f000 fcd6 	bl	8010658 <fputc>
 800fcac:	f7ff f8b2 	bl	800ee14 <__cxa_end_catch>
 800fcb0:	f000 fc8c 	bl	80105cc <abort>
 800fcb4:	4b09      	ldr	r3, [pc, #36]	; (800fcdc <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xf8>)
 800fcb6:	480e      	ldr	r0, [pc, #56]	; (800fcf0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0x10c>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	4621      	mov	r1, r4
 800fcbc:	68db      	ldr	r3, [r3, #12]
 800fcbe:	222d      	movs	r2, #45	; 0x2d
 800fcc0:	f000 fee6 	bl	8010a90 <fwrite>
 800fcc4:	e7f4      	b.n	800fcb0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
 800fcc6:	f7ff f8a5 	bl	800ee14 <__cxa_end_catch>
 800fcca:	f7ff faa9 	bl	800f220 <__cxa_end_cleanup>
 800fcce:	f7ff f863 	bl	800ed98 <__cxa_begin_catch>
 800fcd2:	f7ff f89f 	bl	800ee14 <__cxa_end_catch>
 800fcd6:	e7eb      	b.n	800fcb0 <_ZN9__gnu_cxx27__verbose_terminate_handlerEv+0xcc>
 800fcd8:	20008c80 	.word	0x20008c80
 800fcdc:	20000028 	.word	0x20000028
 800fce0:	080183e4 	.word	0x080183e4
 800fce4:	08018418 	.word	0x08018418
 800fce8:	080183c4 	.word	0x080183c4
 800fcec:	0801844c 	.word	0x0801844c
 800fcf0:	0801841c 	.word	0x0801841c

0800fcf4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 800fcf4:	7803      	ldrb	r3, [r0, #0]
 800fcf6:	2b47      	cmp	r3, #71	; 0x47
 800fcf8:	d001      	beq.n	800fcfe <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0xa>
 800fcfa:	2000      	movs	r0, #0
 800fcfc:	4770      	bx	lr
 800fcfe:	7843      	ldrb	r3, [r0, #1]
 800fd00:	2b4e      	cmp	r3, #78	; 0x4e
 800fd02:	d1fa      	bne.n	800fcfa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800fd04:	7883      	ldrb	r3, [r0, #2]
 800fd06:	2b55      	cmp	r3, #85	; 0x55
 800fd08:	d1f7      	bne.n	800fcfa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800fd0a:	78c3      	ldrb	r3, [r0, #3]
 800fd0c:	2b43      	cmp	r3, #67	; 0x43
 800fd0e:	d1f4      	bne.n	800fcfa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800fd10:	7903      	ldrb	r3, [r0, #4]
 800fd12:	2b43      	cmp	r3, #67	; 0x43
 800fd14:	d1f1      	bne.n	800fcfa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800fd16:	7943      	ldrb	r3, [r0, #5]
 800fd18:	2b2b      	cmp	r3, #43	; 0x2b
 800fd1a:	d1ee      	bne.n	800fcfa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800fd1c:	7983      	ldrb	r3, [r0, #6]
 800fd1e:	2b2b      	cmp	r3, #43	; 0x2b
 800fd20:	d1eb      	bne.n	800fcfa <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x6>
 800fd22:	79c0      	ldrb	r0, [r0, #7]
 800fd24:	2801      	cmp	r0, #1
 800fd26:	bf8c      	ite	hi
 800fd28:	2000      	movhi	r0, #0
 800fd2a:	2001      	movls	r0, #1
 800fd2c:	4770      	bx	lr
 800fd2e:	bf00      	nop

0800fd30 <__cxa_call_terminate>:
 800fd30:	b510      	push	{r4, lr}
 800fd32:	b130      	cbz	r0, 800fd42 <__cxa_call_terminate+0x12>
 800fd34:	4604      	mov	r4, r0
 800fd36:	f7ff f82f 	bl	800ed98 <__cxa_begin_catch>
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	f7ff ffda 	bl	800fcf4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800fd40:	b908      	cbnz	r0, 800fd46 <__cxa_call_terminate+0x16>
 800fd42:	f7ff f8c1 	bl	800eec8 <_ZSt9terminatev>
 800fd46:	f854 0c14 	ldr.w	r0, [r4, #-20]
 800fd4a:	f7ff f8a9 	bl	800eea0 <_ZN10__cxxabiv111__terminateEPFvvE>
 800fd4e:	bf00      	nop

0800fd50 <__cxa_call_unexpected>:
 800fd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd54:	b085      	sub	sp, #20
 800fd56:	4602      	mov	r2, r0
 800fd58:	f7ff ffcc 	bl	800fcf4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800fd5c:	b160      	cbz	r0, 800fd78 <__cxa_call_unexpected+0x28>
 800fd5e:	f852 8c18 	ldr.w	r8, [r2, #-24]
 800fd62:	f852 5c14 	ldr.w	r5, [r2, #-20]
 800fd66:	6a96      	ldr	r6, [r2, #40]	; 0x28
 800fd68:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800fd6a:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800fd6c:	4610      	mov	r0, r2
 800fd6e:	f7ff f813 	bl	800ed98 <__cxa_begin_catch>
 800fd72:	4640      	mov	r0, r8
 800fd74:	f7ff f8b2 	bl	800eedc <_ZN10__cxxabiv112__unexpectedEPFvvE>
 800fd78:	4610      	mov	r0, r2
 800fd7a:	f7ff f80d 	bl	800ed98 <__cxa_begin_catch>
 800fd7e:	f7ff f8b1 	bl	800eee4 <_ZSt10unexpectedv>
 800fd82:	f7ff f809 	bl	800ed98 <__cxa_begin_catch>
 800fd86:	f7ff f89f 	bl	800eec8 <_ZSt9terminatev>
 800fd8a:	f7ff f805 	bl	800ed98 <__cxa_begin_catch>
 800fd8e:	f7ff fa3f 	bl	800f210 <__cxa_get_globals_fast>
 800fd92:	6803      	ldr	r3, [r0, #0]
 800fd94:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 800fd98:	2a01      	cmp	r2, #1
 800fd9a:	d036      	beq.n	800fe0a <__cxa_call_unexpected+0xba>
 800fd9c:	f103 0278 	add.w	r2, r3, #120	; 0x78
 800fda0:	f10d 0a10 	add.w	sl, sp, #16
 800fda4:	f04f 0800 	mov.w	r8, #0
 800fda8:	3320      	adds	r3, #32
 800fdaa:	f84a 2d08 	str.w	r2, [sl, #-8]!
 800fdae:	f027 0b03 	bic.w	fp, r7, #3
 800fdb2:	9301      	str	r3, [sp, #4]
 800fdb4:	46c1      	mov	r9, r8
 800fdb6:	45b1      	cmp	r9, r6
 800fdb8:	da1b      	bge.n	800fdf2 <__cxa_call_unexpected+0xa2>
 800fdba:	6827      	ldr	r7, [r4, #0]
 800fdbc:	b107      	cbz	r7, 800fdc0 <__cxa_call_unexpected+0x70>
 800fdbe:	4427      	add	r7, r4
 800fdc0:	4653      	mov	r3, sl
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	4639      	mov	r1, r7
 800fdc6:	9801      	ldr	r0, [sp, #4]
 800fdc8:	f7ff fa30 	bl	800f22c <__cxa_type_match>
 800fdcc:	bb10      	cbnz	r0, 800fe14 <__cxa_call_unexpected+0xc4>
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	4914      	ldr	r1, [pc, #80]	; (800fe24 <__cxa_call_unexpected+0xd4>)
 800fdd2:	691b      	ldr	r3, [r3, #16]
 800fdd4:	9300      	str	r3, [sp, #0]
 800fdd6:	aa04      	add	r2, sp, #16
 800fdd8:	2301      	movs	r3, #1
 800fdda:	f842 0d04 	str.w	r0, [r2, #-4]!
 800fdde:	4638      	mov	r0, r7
 800fde0:	9f00      	ldr	r7, [sp, #0]
 800fde2:	47b8      	blx	r7
 800fde4:	2800      	cmp	r0, #0
 800fde6:	bf18      	it	ne
 800fde8:	4680      	movne	r8, r0
 800fdea:	f109 0901 	add.w	r9, r9, #1
 800fdee:	445c      	add	r4, fp
 800fdf0:	e7e1      	b.n	800fdb6 <__cxa_call_unexpected+0x66>
 800fdf2:	f1b8 0f00 	cmp.w	r8, #0
 800fdf6:	d00a      	beq.n	800fe0e <__cxa_call_unexpected+0xbe>
 800fdf8:	2004      	movs	r0, #4
 800fdfa:	f7ff f919 	bl	800f030 <__cxa_allocate_exception>
 800fdfe:	4b0a      	ldr	r3, [pc, #40]	; (800fe28 <__cxa_call_unexpected+0xd8>)
 800fe00:	6003      	str	r3, [r0, #0]
 800fe02:	4a0a      	ldr	r2, [pc, #40]	; (800fe2c <__cxa_call_unexpected+0xdc>)
 800fe04:	4907      	ldr	r1, [pc, #28]	; (800fe24 <__cxa_call_unexpected+0xd4>)
 800fe06:	f7ff f971 	bl	800f0ec <__cxa_throw>
 800fe0a:	681a      	ldr	r2, [r3, #0]
 800fe0c:	e7c8      	b.n	800fda0 <__cxa_call_unexpected+0x50>
 800fe0e:	4628      	mov	r0, r5
 800fe10:	f7ff f846 	bl	800eea0 <_ZN10__cxxabiv111__terminateEPFvvE>
 800fe14:	f7ff f9a8 	bl	800f168 <__cxa_rethrow>
 800fe18:	f7fe fffc 	bl	800ee14 <__cxa_end_catch>
 800fe1c:	f7fe fffa 	bl	800ee14 <__cxa_end_catch>
 800fe20:	f7ff f9fe 	bl	800f220 <__cxa_end_cleanup>
 800fe24:	080182d4 	.word	0x080182d4
 800fe28:	08018358 	.word	0x08018358
 800fe2c:	0800faa1 	.word	0x0800faa1

0800fe30 <__cxa_current_exception_type>:
 800fe30:	b508      	push	{r3, lr}
 800fe32:	f7ff f9f1 	bl	800f218 <__cxa_get_globals>
 800fe36:	6800      	ldr	r0, [r0, #0]
 800fe38:	b130      	cbz	r0, 800fe48 <__cxa_current_exception_type+0x18>
 800fe3a:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
 800fe3e:	2b01      	cmp	r3, #1
 800fe40:	bf04      	itt	eq
 800fe42:	6800      	ldreq	r0, [r0, #0]
 800fe44:	3878      	subeq	r0, #120	; 0x78
 800fe46:	6800      	ldr	r0, [r0, #0]
 800fe48:	bd08      	pop	{r3, pc}
 800fe4a:	bf00      	nop

0800fe4c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 800fe4c:	b570      	push	{r4, r5, r6, lr}
 800fe4e:	6803      	ldr	r3, [r0, #0]
 800fe50:	b084      	sub	sp, #16
 800fe52:	2400      	movs	r4, #0
 800fe54:	699e      	ldr	r6, [r3, #24]
 800fe56:	9400      	str	r4, [sp, #0]
 800fe58:	2310      	movs	r3, #16
 800fe5a:	4615      	mov	r5, r2
 800fe5c:	9302      	str	r3, [sp, #8]
 800fe5e:	6812      	ldr	r2, [r2, #0]
 800fe60:	f88d 4004 	strb.w	r4, [sp, #4]
 800fe64:	466b      	mov	r3, sp
 800fe66:	9403      	str	r4, [sp, #12]
 800fe68:	47b0      	blx	r6
 800fe6a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fe6e:	f003 0306 	and.w	r3, r3, #6
 800fe72:	2b06      	cmp	r3, #6
 800fe74:	bf03      	ittte	eq
 800fe76:	9b00      	ldreq	r3, [sp, #0]
 800fe78:	602b      	streq	r3, [r5, #0]
 800fe7a:	2001      	moveq	r0, #1
 800fe7c:	4620      	movne	r0, r4
 800fe7e:	b004      	add	sp, #16
 800fe80:	bd70      	pop	{r4, r5, r6, pc}
 800fe82:	bf00      	nop

0800fe84 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 800fe84:	9800      	ldr	r0, [sp, #0]
 800fe86:	4290      	cmp	r0, r2
 800fe88:	bf0c      	ite	eq
 800fe8a:	2006      	moveq	r0, #6
 800fe8c:	2001      	movne	r0, #1
 800fe8e:	4770      	bx	lr

0800fe90 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 800fe90:	b510      	push	{r4, lr}
 800fe92:	4b03      	ldr	r3, [pc, #12]	; (800fea0 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 800fe94:	6003      	str	r3, [r0, #0]
 800fe96:	4604      	mov	r4, r0
 800fe98:	f000 f854 	bl	800ff44 <_ZNSt9type_infoD1Ev>
 800fe9c:	4620      	mov	r0, r4
 800fe9e:	bd10      	pop	{r4, pc}
 800fea0:	08018490 	.word	0x08018490

0800fea4 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 800fea4:	b510      	push	{r4, lr}
 800fea6:	4b05      	ldr	r3, [pc, #20]	; (800febc <_ZN10__cxxabiv117__class_type_infoD0Ev+0x18>)
 800fea8:	6003      	str	r3, [r0, #0]
 800feaa:	4604      	mov	r4, r0
 800feac:	f000 f84a 	bl	800ff44 <_ZNSt9type_infoD1Ev>
 800feb0:	4620      	mov	r0, r4
 800feb2:	2108      	movs	r1, #8
 800feb4:	f7ff fda8 	bl	800fa08 <_ZdlPvj>
 800feb8:	4620      	mov	r0, r4
 800feba:	bd10      	pop	{r4, pc}
 800febc:	08018490 	.word	0x08018490

0800fec0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 800fec0:	b538      	push	{r3, r4, r5, lr}
 800fec2:	4615      	mov	r5, r2
 800fec4:	461c      	mov	r4, r3
 800fec6:	f000 f841 	bl	800ff4c <_ZNKSt9type_infoeqERKS_>
 800feca:	b120      	cbz	r0, 800fed6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 800fecc:	2208      	movs	r2, #8
 800fece:	2306      	movs	r3, #6
 800fed0:	6025      	str	r5, [r4, #0]
 800fed2:	60e2      	str	r2, [r4, #12]
 800fed4:	7123      	strb	r3, [r4, #4]
 800fed6:	bd38      	pop	{r3, r4, r5, pc}

0800fed8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800fed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fedc:	4617      	mov	r7, r2
 800fede:	461c      	mov	r4, r3
 800fee0:	4606      	mov	r6, r0
 800fee2:	460d      	mov	r5, r1
 800fee4:	f000 f832 	bl	800ff4c <_ZNKSt9type_infoeqERKS_>
 800fee8:	b908      	cbnz	r0, 800feee <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x16>
 800feea:	2c03      	cmp	r4, #3
 800feec:	d901      	bls.n	800fef2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x1a>
 800feee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fef2:	682b      	ldr	r3, [r5, #0]
 800fef4:	463a      	mov	r2, r7
 800fef6:	4631      	mov	r1, r6
 800fef8:	4628      	mov	r0, r5
 800fefa:	695b      	ldr	r3, [r3, #20]
 800fefc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff00:	4718      	bx	r3
 800ff02:	bf00      	nop

0800ff04 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 800ff04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff06:	b083      	sub	sp, #12
 800ff08:	4617      	mov	r7, r2
 800ff0a:	9d08      	ldr	r5, [sp, #32]
 800ff0c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ff0e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ff10:	428d      	cmp	r5, r1
 800ff12:	4606      	mov	r6, r0
 800ff14:	d00b      	beq.n	800ff2e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x2a>
 800ff16:	4619      	mov	r1, r3
 800ff18:	4630      	mov	r0, r6
 800ff1a:	f000 f817 	bl	800ff4c <_ZNKSt9type_infoeqERKS_>
 800ff1e:	b118      	cbz	r0, 800ff28 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x24>
 800ff20:	2301      	movs	r3, #1
 800ff22:	6025      	str	r5, [r4, #0]
 800ff24:	7127      	strb	r7, [r4, #4]
 800ff26:	71a3      	strb	r3, [r4, #6]
 800ff28:	2000      	movs	r0, #0
 800ff2a:	b003      	add	sp, #12
 800ff2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ff30:	9301      	str	r3, [sp, #4]
 800ff32:	f000 f80b 	bl	800ff4c <_ZNKSt9type_infoeqERKS_>
 800ff36:	b118      	cbz	r0, 800ff40 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x3c>
 800ff38:	2000      	movs	r0, #0
 800ff3a:	7167      	strb	r7, [r4, #5]
 800ff3c:	b003      	add	sp, #12
 800ff3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ff40:	9b01      	ldr	r3, [sp, #4]
 800ff42:	e7e8      	b.n	800ff16 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x12>

0800ff44 <_ZNSt9type_infoD1Ev>:
 800ff44:	4770      	bx	lr
 800ff46:	bf00      	nop

0800ff48 <_ZNKSt9type_info14__is_pointer_pEv>:
 800ff48:	2000      	movs	r0, #0
 800ff4a:	4770      	bx	lr

0800ff4c <_ZNKSt9type_infoeqERKS_>:
 800ff4c:	4281      	cmp	r1, r0
 800ff4e:	d011      	beq.n	800ff74 <_ZNKSt9type_infoeqERKS_+0x28>
 800ff50:	b508      	push	{r3, lr}
 800ff52:	6840      	ldr	r0, [r0, #4]
 800ff54:	7803      	ldrb	r3, [r0, #0]
 800ff56:	2b2a      	cmp	r3, #42	; 0x2a
 800ff58:	d00a      	beq.n	800ff70 <_ZNKSt9type_infoeqERKS_+0x24>
 800ff5a:	6849      	ldr	r1, [r1, #4]
 800ff5c:	780b      	ldrb	r3, [r1, #0]
 800ff5e:	2b2a      	cmp	r3, #42	; 0x2a
 800ff60:	bf08      	it	eq
 800ff62:	3101      	addeq	r1, #1
 800ff64:	f7f6 fcdc 	bl	8006920 <strcmp>
 800ff68:	fab0 f080 	clz	r0, r0
 800ff6c:	0940      	lsrs	r0, r0, #5
 800ff6e:	bd08      	pop	{r3, pc}
 800ff70:	2000      	movs	r0, #0
 800ff72:	bd08      	pop	{r3, pc}
 800ff74:	2001      	movs	r0, #1
 800ff76:	4770      	bx	lr

0800ff78 <_ZNKSt11logic_error4whatEv>:
 800ff78:	6840      	ldr	r0, [r0, #4]
 800ff7a:	4770      	bx	lr

0800ff7c <_ZNSt11logic_errorD1Ev>:
 800ff7c:	b510      	push	{r4, lr}
 800ff7e:	6843      	ldr	r3, [r0, #4]
 800ff80:	4a0c      	ldr	r2, [pc, #48]	; (800ffb4 <_ZNSt11logic_errorD1Ev+0x38>)
 800ff82:	490d      	ldr	r1, [pc, #52]	; (800ffb8 <_ZNSt11logic_errorD1Ev+0x3c>)
 800ff84:	6001      	str	r1, [r0, #0]
 800ff86:	4604      	mov	r4, r0
 800ff88:	f1a3 000c 	sub.w	r0, r3, #12
 800ff8c:	4290      	cmp	r0, r2
 800ff8e:	b082      	sub	sp, #8
 800ff90:	d105      	bne.n	800ff9e <_ZNSt11logic_errorD1Ev+0x22>
 800ff92:	4620      	mov	r0, r4
 800ff94:	f7ff fd82 	bl	800fa9c <_ZNSt9exceptionD1Ev>
 800ff98:	4620      	mov	r0, r4
 800ff9a:	b002      	add	sp, #8
 800ff9c:	bd10      	pop	{r4, pc}
 800ff9e:	f853 2c04 	ldr.w	r2, [r3, #-4]
 800ffa2:	1e51      	subs	r1, r2, #1
 800ffa4:	2a00      	cmp	r2, #0
 800ffa6:	f843 1c04 	str.w	r1, [r3, #-4]
 800ffaa:	dcf2      	bgt.n	800ff92 <_ZNSt11logic_errorD1Ev+0x16>
 800ffac:	a901      	add	r1, sp, #4
 800ffae:	f000 f9c7 	bl	8010340 <_ZNSs4_Rep10_M_destroyERKSaIcE>
 800ffb2:	e7ee      	b.n	800ff92 <_ZNSt11logic_errorD1Ev+0x16>
 800ffb4:	20008cb4 	.word	0x20008cb4
 800ffb8:	08018d60 	.word	0x08018d60

0800ffbc <_ZNSt11logic_errorD0Ev>:
 800ffbc:	b510      	push	{r4, lr}
 800ffbe:	4604      	mov	r4, r0
 800ffc0:	f7ff ffdc 	bl	800ff7c <_ZNSt11logic_errorD1Ev>
 800ffc4:	4620      	mov	r0, r4
 800ffc6:	f7fe fedf 	bl	800ed88 <_ZdlPv>
 800ffca:	4620      	mov	r0, r4
 800ffcc:	bd10      	pop	{r4, pc}
 800ffce:	bf00      	nop

0800ffd0 <_ZNSt12length_errorD1Ev>:
 800ffd0:	b510      	push	{r4, lr}
 800ffd2:	4b03      	ldr	r3, [pc, #12]	; (800ffe0 <_ZNSt12length_errorD1Ev+0x10>)
 800ffd4:	6003      	str	r3, [r0, #0]
 800ffd6:	4604      	mov	r4, r0
 800ffd8:	f7ff ffd0 	bl	800ff7c <_ZNSt11logic_errorD1Ev>
 800ffdc:	4620      	mov	r0, r4
 800ffde:	bd10      	pop	{r4, pc}
 800ffe0:	08018d74 	.word	0x08018d74

0800ffe4 <_ZNSt12length_errorD0Ev>:
 800ffe4:	b510      	push	{r4, lr}
 800ffe6:	4b05      	ldr	r3, [pc, #20]	; (800fffc <_ZNSt12length_errorD0Ev+0x18>)
 800ffe8:	6003      	str	r3, [r0, #0]
 800ffea:	4604      	mov	r4, r0
 800ffec:	f7ff ffc6 	bl	800ff7c <_ZNSt11logic_errorD1Ev>
 800fff0:	4620      	mov	r0, r4
 800fff2:	f7fe fec9 	bl	800ed88 <_ZdlPv>
 800fff6:	4620      	mov	r0, r4
 800fff8:	bd10      	pop	{r4, pc}
 800fffa:	bf00      	nop
 800fffc:	08018d74 	.word	0x08018d74

08010000 <_ZNK12_GLOBAL__N_122generic_error_category4nameEv>:
 8010000:	4800      	ldr	r0, [pc, #0]	; (8010004 <_ZNK12_GLOBAL__N_122generic_error_category4nameEv+0x4>)
 8010002:	4770      	bx	lr
 8010004:	08018d88 	.word	0x08018d88

08010008 <_ZNK12_GLOBAL__N_121system_error_category4nameEv>:
 8010008:	4800      	ldr	r0, [pc, #0]	; (801000c <_ZNK12_GLOBAL__N_121system_error_category4nameEv+0x4>)
 801000a:	4770      	bx	lr
 801000c:	08018d80 	.word	0x08018d80

08010010 <_ZNKSt3_V214error_category23default_error_conditionEi>:
 8010010:	6002      	str	r2, [r0, #0]
 8010012:	6041      	str	r1, [r0, #4]
 8010014:	4770      	bx	lr
 8010016:	bf00      	nop

08010018 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei>:
 8010018:	684b      	ldr	r3, [r1, #4]
 801001a:	4283      	cmp	r3, r0
 801001c:	d001      	beq.n	8010022 <_ZNKSt3_V214error_category10equivalentERKSt10error_codei+0xa>
 801001e:	2000      	movs	r0, #0
 8010020:	4770      	bx	lr
 8010022:	6808      	ldr	r0, [r1, #0]
 8010024:	1a80      	subs	r0, r0, r2
 8010026:	fab0 f080 	clz	r0, r0
 801002a:	0940      	lsrs	r0, r0, #5
 801002c:	4770      	bx	lr
 801002e:	bf00      	nop

08010030 <_ZN12_GLOBAL__N_121system_error_categoryD1Ev>:
 8010030:	4770      	bx	lr
 8010032:	bf00      	nop

08010034 <_ZN12_GLOBAL__N_122generic_error_categoryD1Ev>:
 8010034:	4770      	bx	lr
 8010036:	bf00      	nop

08010038 <_ZN12_GLOBAL__N_121system_error_categoryD0Ev>:
 8010038:	b510      	push	{r4, lr}
 801003a:	4604      	mov	r4, r0
 801003c:	f7fe fea4 	bl	800ed88 <_ZdlPv>
 8010040:	4620      	mov	r0, r4
 8010042:	bd10      	pop	{r4, pc}

08010044 <_ZN12_GLOBAL__N_122generic_error_categoryD0Ev>:
 8010044:	b510      	push	{r4, lr}
 8010046:	4604      	mov	r4, r0
 8010048:	f7fe fe9e 	bl	800ed88 <_ZdlPv>
 801004c:	4620      	mov	r0, r4
 801004e:	bd10      	pop	{r4, pc}

08010050 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei>:
 8010050:	b510      	push	{r4, lr}
 8010052:	680b      	ldr	r3, [r1, #0]
 8010054:	b086      	sub	sp, #24
 8010056:	4604      	mov	r4, r0
 8010058:	691b      	ldr	r3, [r3, #16]
 801005a:	4668      	mov	r0, sp
 801005c:	4798      	blx	r3
 801005e:	4620      	mov	r0, r4
 8010060:	e89d 0006 	ldmia.w	sp, {r1, r2}
 8010064:	f000 f9c2 	bl	80103ec <_ZNSt12__cow_stringC1EPKcj>
 8010068:	9800      	ldr	r0, [sp, #0]
 801006a:	ab02      	add	r3, sp, #8
 801006c:	4298      	cmp	r0, r3
 801006e:	d001      	beq.n	8010074 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei+0x24>
 8010070:	f7fe fe8a 	bl	800ed88 <_ZdlPv>
 8010074:	4620      	mov	r0, r4
 8010076:	b006      	add	sp, #24
 8010078:	bd10      	pop	{r4, pc}
 801007a:	9800      	ldr	r0, [sp, #0]
 801007c:	ab02      	add	r3, sp, #8
 801007e:	4298      	cmp	r0, r3
 8010080:	d001      	beq.n	8010086 <_ZNKSt3_V214error_category10_M_messageB5cxx11Ei+0x36>
 8010082:	f7fe fe81 	bl	800ed88 <_ZdlPv>
 8010086:	f7ff f8cb 	bl	800f220 <__cxa_end_cleanup>
 801008a:	bf00      	nop

0801008c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27>:
 801008c:	b570      	push	{r4, r5, r6, lr}
 801008e:	4605      	mov	r5, r0
 8010090:	b082      	sub	sp, #8
 8010092:	b301      	cbz	r1, 80100d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x4a>
 8010094:	1a54      	subs	r4, r2, r1
 8010096:	2c0f      	cmp	r4, #15
 8010098:	460e      	mov	r6, r1
 801009a:	9401      	str	r4, [sp, #4]
 801009c:	d80a      	bhi.n	80100b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x28>
 801009e:	682b      	ldr	r3, [r5, #0]
 80100a0:	2c01      	cmp	r4, #1
 80100a2:	4618      	mov	r0, r3
 80100a4:	d013      	beq.n	80100ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x42>
 80100a6:	b964      	cbnz	r4, 80100c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x36>
 80100a8:	9a01      	ldr	r2, [sp, #4]
 80100aa:	606a      	str	r2, [r5, #4]
 80100ac:	2100      	movs	r1, #0
 80100ae:	5499      	strb	r1, [r3, r2]
 80100b0:	b002      	add	sp, #8
 80100b2:	bd70      	pop	{r4, r5, r6, pc}
 80100b4:	2200      	movs	r2, #0
 80100b6:	a901      	add	r1, sp, #4
 80100b8:	f000 f868 	bl	801018c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80100bc:	9b01      	ldr	r3, [sp, #4]
 80100be:	6028      	str	r0, [r5, #0]
 80100c0:	60ab      	str	r3, [r5, #8]
 80100c2:	4622      	mov	r2, r4
 80100c4:	4631      	mov	r1, r6
 80100c6:	f000 ffc4 	bl	8011052 <memcpy>
 80100ca:	682b      	ldr	r3, [r5, #0]
 80100cc:	e7ec      	b.n	80100a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x1c>
 80100ce:	7832      	ldrb	r2, [r6, #0]
 80100d0:	701a      	strb	r2, [r3, #0]
 80100d2:	682b      	ldr	r3, [r5, #0]
 80100d4:	e7e8      	b.n	80100a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x1c>
 80100d6:	b112      	cbz	r2, 80100de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x52>
 80100d8:	4802      	ldr	r0, [pc, #8]	; (80100e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x58>)
 80100da:	f7ff fcaf 	bl	800fa3c <_ZSt19__throw_logic_errorPKc>
 80100de:	9201      	str	r2, [sp, #4]
 80100e0:	6803      	ldr	r3, [r0, #0]
 80100e2:	e7e1      	b.n	80100a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27+0x1c>
 80100e4:	08018d90 	.word	0x08018d90

080100e8 <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei>:
 80100e8:	b538      	push	{r3, r4, r5, lr}
 80100ea:	4604      	mov	r4, r0
 80100ec:	4610      	mov	r0, r2
 80100ee:	f001 fcc3 	bl	8011a78 <strerror>
 80100f2:	f104 0308 	add.w	r3, r4, #8
 80100f6:	6023      	str	r3, [r4, #0]
 80100f8:	4605      	mov	r5, r0
 80100fa:	b140      	cbz	r0, 801010e <_ZNK12_GLOBAL__N_121system_error_category7messageB5cxx11Ei+0x26>
 80100fc:	f7f6 fc1a 	bl	8006934 <strlen>
 8010100:	4629      	mov	r1, r5
 8010102:	182a      	adds	r2, r5, r0
 8010104:	4620      	mov	r0, r4
 8010106:	f7ff ffc1 	bl	801008c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27>
 801010a:	4620      	mov	r0, r4
 801010c:	bd38      	pop	{r3, r4, r5, pc}
 801010e:	4620      	mov	r0, r4
 8010110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010114:	4629      	mov	r1, r5
 8010116:	f7ff ffb9 	bl	801008c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag.isra.27>
 801011a:	4620      	mov	r0, r4
 801011c:	bd38      	pop	{r3, r4, r5, pc}
 801011e:	bf00      	nop

08010120 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition>:
 8010120:	b530      	push	{r4, r5, lr}
 8010122:	6803      	ldr	r3, [r0, #0]
 8010124:	4d0c      	ldr	r5, [pc, #48]	; (8010158 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x38>)
 8010126:	695b      	ldr	r3, [r3, #20]
 8010128:	42ab      	cmp	r3, r5
 801012a:	b083      	sub	sp, #12
 801012c:	4614      	mov	r4, r2
 801012e:	d10c      	bne.n	801014a <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x2a>
 8010130:	6863      	ldr	r3, [r4, #4]
 8010132:	4283      	cmp	r3, r0
 8010134:	d002      	beq.n	801013c <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x1c>
 8010136:	2000      	movs	r0, #0
 8010138:	b003      	add	sp, #12
 801013a:	bd30      	pop	{r4, r5, pc}
 801013c:	6820      	ldr	r0, [r4, #0]
 801013e:	1a40      	subs	r0, r0, r1
 8010140:	fab0 f080 	clz	r0, r0
 8010144:	0940      	lsrs	r0, r0, #5
 8010146:	b003      	add	sp, #12
 8010148:	bd30      	pop	{r4, r5, pc}
 801014a:	460a      	mov	r2, r1
 801014c:	4601      	mov	r1, r0
 801014e:	4668      	mov	r0, sp
 8010150:	4798      	blx	r3
 8010152:	9900      	ldr	r1, [sp, #0]
 8010154:	9801      	ldr	r0, [sp, #4]
 8010156:	e7eb      	b.n	8010130 <_ZNKSt3_V214error_category10equivalentEiRKSt15error_condition+0x10>
 8010158:	08010011 	.word	0x08010011

0801015c <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev>:
 801015c:	b510      	push	{r4, lr}
 801015e:	4c06      	ldr	r4, [pc, #24]	; (8010178 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x1c>)
 8010160:	4906      	ldr	r1, [pc, #24]	; (801017c <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x20>)
 8010162:	4807      	ldr	r0, [pc, #28]	; (8010180 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x24>)
 8010164:	4622      	mov	r2, r4
 8010166:	f7fe fe11 	bl	800ed8c <__aeabi_atexit>
 801016a:	4622      	mov	r2, r4
 801016c:	4905      	ldr	r1, [pc, #20]	; (8010184 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x28>)
 801016e:	4806      	ldr	r0, [pc, #24]	; (8010188 <_GLOBAL__sub_I__ZNSt3_V214error_categoryD2Ev+0x2c>)
 8010170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010174:	f7fe be0a 	b.w	800ed8c <__aeabi_atexit>
 8010178:	20000000 	.word	0x20000000
 801017c:	08010035 	.word	0x08010035
 8010180:	20000024 	.word	0x20000024
 8010184:	08010031 	.word	0x08010031
 8010188:	20000020 	.word	0x20000020

0801018c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 801018c:	6808      	ldr	r0, [r1, #0]
 801018e:	2800      	cmp	r0, #0
 8010190:	b508      	push	{r3, lr}
 8010192:	db1a      	blt.n	80101ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x3e>
 8010194:	4290      	cmp	r0, r2
 8010196:	d90a      	bls.n	80101ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 8010198:	0052      	lsls	r2, r2, #1
 801019a:	4290      	cmp	r0, r2
 801019c:	d207      	bcs.n	80101ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 801019e:	2a00      	cmp	r2, #0
 80101a0:	db0a      	blt.n	80101b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80101a2:	600a      	str	r2, [r1, #0]
 80101a4:	1c50      	adds	r0, r2, #1
 80101a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80101aa:	f7fe beb5 	b.w	800ef18 <_Znwj>
 80101ae:	3001      	adds	r0, #1
 80101b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80101b4:	f7fe beb0 	b.w	800ef18 <_Znwj>
 80101b8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80101bc:	600b      	str	r3, [r1, #0]
 80101be:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80101c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80101c6:	f7fe bea7 	b.w	800ef18 <_Znwj>
 80101ca:	4801      	ldr	r0, [pc, #4]	; (80101d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x44>)
 80101cc:	f7ff fc4e 	bl	800fa6c <_ZSt20__throw_length_errorPKc>
 80101d0:	08018ea0 	.word	0x08018ea0

080101d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80101d4:	4b24      	ldr	r3, [pc, #144]	; (8010268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80101d6:	681a      	ldr	r2, [r3, #0]
 80101d8:	07d0      	lsls	r0, r2, #31
 80101da:	bf5c      	itt	pl
 80101dc:	2201      	movpl	r2, #1
 80101de:	601a      	strpl	r2, [r3, #0]
 80101e0:	4b22      	ldr	r3, [pc, #136]	; (801026c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80101e2:	681a      	ldr	r2, [r3, #0]
 80101e4:	07d1      	lsls	r1, r2, #31
 80101e6:	bf5c      	itt	pl
 80101e8:	2201      	movpl	r2, #1
 80101ea:	601a      	strpl	r2, [r3, #0]
 80101ec:	4b20      	ldr	r3, [pc, #128]	; (8010270 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80101ee:	681a      	ldr	r2, [r3, #0]
 80101f0:	07d2      	lsls	r2, r2, #31
 80101f2:	bf5c      	itt	pl
 80101f4:	2201      	movpl	r2, #1
 80101f6:	601a      	strpl	r2, [r3, #0]
 80101f8:	4b1e      	ldr	r3, [pc, #120]	; (8010274 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80101fa:	681a      	ldr	r2, [r3, #0]
 80101fc:	07d0      	lsls	r0, r2, #31
 80101fe:	bf5c      	itt	pl
 8010200:	2201      	movpl	r2, #1
 8010202:	601a      	strpl	r2, [r3, #0]
 8010204:	4b1c      	ldr	r3, [pc, #112]	; (8010278 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8010206:	681a      	ldr	r2, [r3, #0]
 8010208:	07d1      	lsls	r1, r2, #31
 801020a:	bf5c      	itt	pl
 801020c:	2201      	movpl	r2, #1
 801020e:	601a      	strpl	r2, [r3, #0]
 8010210:	4b1a      	ldr	r3, [pc, #104]	; (801027c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8010212:	681a      	ldr	r2, [r3, #0]
 8010214:	07d2      	lsls	r2, r2, #31
 8010216:	bf5c      	itt	pl
 8010218:	2201      	movpl	r2, #1
 801021a:	601a      	strpl	r2, [r3, #0]
 801021c:	4b18      	ldr	r3, [pc, #96]	; (8010280 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 801021e:	681a      	ldr	r2, [r3, #0]
 8010220:	07d0      	lsls	r0, r2, #31
 8010222:	bf5c      	itt	pl
 8010224:	2201      	movpl	r2, #1
 8010226:	601a      	strpl	r2, [r3, #0]
 8010228:	4b16      	ldr	r3, [pc, #88]	; (8010284 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 801022a:	681a      	ldr	r2, [r3, #0]
 801022c:	07d1      	lsls	r1, r2, #31
 801022e:	bf5c      	itt	pl
 8010230:	2201      	movpl	r2, #1
 8010232:	601a      	strpl	r2, [r3, #0]
 8010234:	4b14      	ldr	r3, [pc, #80]	; (8010288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8010236:	681a      	ldr	r2, [r3, #0]
 8010238:	07d2      	lsls	r2, r2, #31
 801023a:	bf5c      	itt	pl
 801023c:	2201      	movpl	r2, #1
 801023e:	601a      	strpl	r2, [r3, #0]
 8010240:	4b12      	ldr	r3, [pc, #72]	; (801028c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8010242:	681a      	ldr	r2, [r3, #0]
 8010244:	07d0      	lsls	r0, r2, #31
 8010246:	bf5c      	itt	pl
 8010248:	2201      	movpl	r2, #1
 801024a:	601a      	strpl	r2, [r3, #0]
 801024c:	4b10      	ldr	r3, [pc, #64]	; (8010290 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 801024e:	681a      	ldr	r2, [r3, #0]
 8010250:	07d1      	lsls	r1, r2, #31
 8010252:	bf5c      	itt	pl
 8010254:	2201      	movpl	r2, #1
 8010256:	601a      	strpl	r2, [r3, #0]
 8010258:	4b0e      	ldr	r3, [pc, #56]	; (8010294 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 801025a:	681a      	ldr	r2, [r3, #0]
 801025c:	07d2      	lsls	r2, r2, #31
 801025e:	bf5c      	itt	pl
 8010260:	2201      	movpl	r2, #1
 8010262:	601a      	strpl	r2, [r3, #0]
 8010264:	4770      	bx	lr
 8010266:	bf00      	nop
 8010268:	20008cb0 	.word	0x20008cb0
 801026c:	20008cac 	.word	0x20008cac
 8010270:	20008ca8 	.word	0x20008ca8
 8010274:	20008ca4 	.word	0x20008ca4
 8010278:	20008ca0 	.word	0x20008ca0
 801027c:	20008c9c 	.word	0x20008c9c
 8010280:	20008c98 	.word	0x20008c98
 8010284:	20008c94 	.word	0x20008c94
 8010288:	20008c90 	.word	0x20008c90
 801028c:	20008c8c 	.word	0x20008c8c
 8010290:	20008c88 	.word	0x20008c88
 8010294:	20008c84 	.word	0x20008c84

08010298 <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 8010298:	4b13      	ldr	r3, [pc, #76]	; (80102e8 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x50>)
 801029a:	4298      	cmp	r0, r3
 801029c:	b510      	push	{r4, lr}
 801029e:	d81f      	bhi.n	80102e0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x48>
 80102a0:	4288      	cmp	r0, r1
 80102a2:	4604      	mov	r4, r0
 80102a4:	d914      	bls.n	80102d0 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x38>
 80102a6:	004a      	lsls	r2, r1, #1
 80102a8:	4290      	cmp	r0, r2
 80102aa:	bf38      	it	cc
 80102ac:	4614      	movcc	r4, r2
 80102ae:	f104 021d 	add.w	r2, r4, #29
 80102b2:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80102b6:	f104 000d 	add.w	r0, r4, #13
 80102ba:	d90b      	bls.n	80102d4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x3c>
 80102bc:	42a1      	cmp	r1, r4
 80102be:	d209      	bcs.n	80102d4 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x3c>
 80102c0:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 80102c4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80102c8:	1aa4      	subs	r4, r4, r2
 80102ca:	429c      	cmp	r4, r3
 80102cc:	bf28      	it	cs
 80102ce:	461c      	movcs	r4, r3
 80102d0:	f104 000d 	add.w	r0, r4, #13
 80102d4:	f7fe fe20 	bl	800ef18 <_Znwj>
 80102d8:	2200      	movs	r2, #0
 80102da:	6044      	str	r4, [r0, #4]
 80102dc:	6082      	str	r2, [r0, #8]
 80102de:	bd10      	pop	{r4, pc}
 80102e0:	4802      	ldr	r0, [pc, #8]	; (80102ec <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x54>)
 80102e2:	f7ff fbc3 	bl	800fa6c <_ZSt20__throw_length_errorPKc>
 80102e6:	bf00      	nop
 80102e8:	3ffffffc 	.word	0x3ffffffc
 80102ec:	08018ee4 	.word	0x08018ee4

080102f0 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27>:
 80102f0:	b570      	push	{r4, r5, r6, lr}
 80102f2:	1a0c      	subs	r4, r1, r0
 80102f4:	4606      	mov	r6, r0
 80102f6:	2100      	movs	r1, #0
 80102f8:	4620      	mov	r0, r4
 80102fa:	f7ff ffcd 	bl	8010298 <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 80102fe:	2c01      	cmp	r4, #1
 8010300:	4605      	mov	r5, r0
 8010302:	f100 030c 	add.w	r3, r0, #12
 8010306:	d005      	beq.n	8010314 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x24>
 8010308:	b984      	cbnz	r4, 801032c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x3c>
 801030a:	4a0c      	ldr	r2, [pc, #48]	; (801033c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x4c>)
 801030c:	4295      	cmp	r5, r2
 801030e:	d106      	bne.n	801031e <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x2e>
 8010310:	4618      	mov	r0, r3
 8010312:	bd70      	pop	{r4, r5, r6, pc}
 8010314:	7832      	ldrb	r2, [r6, #0]
 8010316:	7302      	strb	r2, [r0, #12]
 8010318:	4a08      	ldr	r2, [pc, #32]	; (801033c <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x4c>)
 801031a:	4295      	cmp	r5, r2
 801031c:	d0f8      	beq.n	8010310 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x20>
 801031e:	1929      	adds	r1, r5, r4
 8010320:	2200      	movs	r2, #0
 8010322:	602c      	str	r4, [r5, #0]
 8010324:	60aa      	str	r2, [r5, #8]
 8010326:	730a      	strb	r2, [r1, #12]
 8010328:	4618      	mov	r0, r3
 801032a:	bd70      	pop	{r4, r5, r6, pc}
 801032c:	4618      	mov	r0, r3
 801032e:	4631      	mov	r1, r6
 8010330:	4622      	mov	r2, r4
 8010332:	f000 fe8e 	bl	8011052 <memcpy>
 8010336:	4603      	mov	r3, r0
 8010338:	e7e7      	b.n	801030a <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27+0x1a>
 801033a:	bf00      	nop
 801033c:	20008cb4 	.word	0x20008cb4

08010340 <_ZNSs4_Rep10_M_destroyERKSaIcE>:
 8010340:	f7fe bd22 	b.w	800ed88 <_ZdlPv>

08010344 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>:
 8010344:	4288      	cmp	r0, r1
 8010346:	d002      	beq.n	801034e <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0xa>
 8010348:	b118      	cbz	r0, 8010352 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0xe>
 801034a:	f7ff bfd1 	b.w	80102f0 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag.part.27>
 801034e:	4804      	ldr	r0, [pc, #16]	; (8010360 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x1c>)
 8010350:	4770      	bx	lr
 8010352:	2900      	cmp	r1, #0
 8010354:	d0f9      	beq.n	801034a <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x6>
 8010356:	b508      	push	{r3, lr}
 8010358:	4802      	ldr	r0, [pc, #8]	; (8010364 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag+0x20>)
 801035a:	f7ff fb6f 	bl	800fa3c <_ZSt19__throw_logic_errorPKc>
 801035e:	bf00      	nop
 8010360:	20008cc0 	.word	0x20008cc0
 8010364:	08018eb8 	.word	0x08018eb8

08010368 <_ZNSsC1EPKcjRKSaIcE>:
 8010368:	b538      	push	{r3, r4, r5, lr}
 801036a:	460d      	mov	r5, r1
 801036c:	4604      	mov	r4, r0
 801036e:	4411      	add	r1, r2
 8010370:	4628      	mov	r0, r5
 8010372:	461a      	mov	r2, r3
 8010374:	f04f 0300 	mov.w	r3, #0
 8010378:	f7ff ffe4 	bl	8010344 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 801037c:	6020      	str	r0, [r4, #0]
 801037e:	4620      	mov	r0, r4
 8010380:	bd38      	pop	{r3, r4, r5, pc}
 8010382:	bf00      	nop

08010384 <_ZNSsC1EPKcRKSaIcE>:
 8010384:	b570      	push	{r4, r5, r6, lr}
 8010386:	4605      	mov	r5, r0
 8010388:	4616      	mov	r6, r2
 801038a:	460c      	mov	r4, r1
 801038c:	b161      	cbz	r1, 80103a8 <_ZNSsC1EPKcRKSaIcE+0x24>
 801038e:	4608      	mov	r0, r1
 8010390:	f7f6 fad0 	bl	8006934 <strlen>
 8010394:	1821      	adds	r1, r4, r0
 8010396:	4632      	mov	r2, r6
 8010398:	4620      	mov	r0, r4
 801039a:	f04f 0300 	mov.w	r3, #0
 801039e:	f7ff ffd1 	bl	8010344 <_ZNSs12_S_constructIPKcEEPcT_S3_RKSaIcESt20forward_iterator_tag>
 80103a2:	6028      	str	r0, [r5, #0]
 80103a4:	4628      	mov	r0, r5
 80103a6:	bd70      	pop	{r4, r5, r6, pc}
 80103a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80103ac:	e7f3      	b.n	8010396 <_ZNSsC1EPKcRKSaIcE+0x12>
 80103ae:	bf00      	nop

080103b0 <_ZNSt11logic_errorC1EPKc>:
 80103b0:	b510      	push	{r4, lr}
 80103b2:	4b08      	ldr	r3, [pc, #32]	; (80103d4 <_ZNSt11logic_errorC1EPKc+0x24>)
 80103b4:	b082      	sub	sp, #8
 80103b6:	4604      	mov	r4, r0
 80103b8:	aa01      	add	r2, sp, #4
 80103ba:	f840 3b04 	str.w	r3, [r0], #4
 80103be:	f7ff ffe1 	bl	8010384 <_ZNSsC1EPKcRKSaIcE>
 80103c2:	4620      	mov	r0, r4
 80103c4:	b002      	add	sp, #8
 80103c6:	bd10      	pop	{r4, pc}
 80103c8:	4620      	mov	r0, r4
 80103ca:	f7ff fb67 	bl	800fa9c <_ZNSt9exceptionD1Ev>
 80103ce:	f7fe ff27 	bl	800f220 <__cxa_end_cleanup>
 80103d2:	bf00      	nop
 80103d4:	08018d60 	.word	0x08018d60

080103d8 <_ZNSt12length_errorC1EPKc>:
 80103d8:	b510      	push	{r4, lr}
 80103da:	4604      	mov	r4, r0
 80103dc:	f7ff ffe8 	bl	80103b0 <_ZNSt11logic_errorC1EPKc>
 80103e0:	4b01      	ldr	r3, [pc, #4]	; (80103e8 <_ZNSt12length_errorC1EPKc+0x10>)
 80103e2:	6023      	str	r3, [r4, #0]
 80103e4:	4620      	mov	r0, r4
 80103e6:	bd10      	pop	{r4, pc}
 80103e8:	08018d74 	.word	0x08018d74

080103ec <_ZNSt12__cow_stringC1EPKcj>:
 80103ec:	b510      	push	{r4, lr}
 80103ee:	b082      	sub	sp, #8
 80103f0:	ab01      	add	r3, sp, #4
 80103f2:	4604      	mov	r4, r0
 80103f4:	f7ff ffb8 	bl	8010368 <_ZNSsC1EPKcjRKSaIcE>
 80103f8:	4620      	mov	r0, r4
 80103fa:	b002      	add	sp, #8
 80103fc:	bd10      	pop	{r4, pc}
 80103fe:	bf00      	nop

08010400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8010400:	4b18      	ldr	r3, [pc, #96]	; (8010464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8010402:	681a      	ldr	r2, [r3, #0]
 8010404:	07d1      	lsls	r1, r2, #31
 8010406:	bf5c      	itt	pl
 8010408:	2201      	movpl	r2, #1
 801040a:	601a      	strpl	r2, [r3, #0]
 801040c:	4b16      	ldr	r3, [pc, #88]	; (8010468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 801040e:	681a      	ldr	r2, [r3, #0]
 8010410:	07d2      	lsls	r2, r2, #31
 8010412:	bf5c      	itt	pl
 8010414:	2201      	movpl	r2, #1
 8010416:	601a      	strpl	r2, [r3, #0]
 8010418:	4b14      	ldr	r3, [pc, #80]	; (801046c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 801041a:	681a      	ldr	r2, [r3, #0]
 801041c:	07d0      	lsls	r0, r2, #31
 801041e:	bf5c      	itt	pl
 8010420:	2201      	movpl	r2, #1
 8010422:	601a      	strpl	r2, [r3, #0]
 8010424:	4b12      	ldr	r3, [pc, #72]	; (8010470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8010426:	681a      	ldr	r2, [r3, #0]
 8010428:	07d1      	lsls	r1, r2, #31
 801042a:	bf5c      	itt	pl
 801042c:	2201      	movpl	r2, #1
 801042e:	601a      	strpl	r2, [r3, #0]
 8010430:	4b10      	ldr	r3, [pc, #64]	; (8010474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8010432:	681a      	ldr	r2, [r3, #0]
 8010434:	07d2      	lsls	r2, r2, #31
 8010436:	bf5c      	itt	pl
 8010438:	2201      	movpl	r2, #1
 801043a:	601a      	strpl	r2, [r3, #0]
 801043c:	4b0e      	ldr	r3, [pc, #56]	; (8010478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 801043e:	681a      	ldr	r2, [r3, #0]
 8010440:	07d0      	lsls	r0, r2, #31
 8010442:	bf5c      	itt	pl
 8010444:	2201      	movpl	r2, #1
 8010446:	601a      	strpl	r2, [r3, #0]
 8010448:	4b0c      	ldr	r3, [pc, #48]	; (801047c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 801044a:	681a      	ldr	r2, [r3, #0]
 801044c:	07d1      	lsls	r1, r2, #31
 801044e:	bf5c      	itt	pl
 8010450:	2201      	movpl	r2, #1
 8010452:	601a      	strpl	r2, [r3, #0]
 8010454:	4b0a      	ldr	r3, [pc, #40]	; (8010480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8010456:	681a      	ldr	r2, [r3, #0]
 8010458:	07d2      	lsls	r2, r2, #31
 801045a:	bf5c      	itt	pl
 801045c:	2201      	movpl	r2, #1
 801045e:	601a      	strpl	r2, [r3, #0]
 8010460:	4770      	bx	lr
 8010462:	bf00      	nop
 8010464:	20008ce0 	.word	0x20008ce0
 8010468:	20008cdc 	.word	0x20008cdc
 801046c:	20008cd8 	.word	0x20008cd8
 8010470:	20008cd4 	.word	0x20008cd4
 8010474:	20008cd0 	.word	0x20008cd0
 8010478:	20008ccc 	.word	0x20008ccc
 801047c:	20008cc8 	.word	0x20008cc8
 8010480:	20008cc4 	.word	0x20008cc4

08010484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8010484:	4b24      	ldr	r3, [pc, #144]	; (8010518 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8010486:	681a      	ldr	r2, [r3, #0]
 8010488:	07d0      	lsls	r0, r2, #31
 801048a:	bf5c      	itt	pl
 801048c:	2201      	movpl	r2, #1
 801048e:	601a      	strpl	r2, [r3, #0]
 8010490:	4b22      	ldr	r3, [pc, #136]	; (801051c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8010492:	681a      	ldr	r2, [r3, #0]
 8010494:	07d1      	lsls	r1, r2, #31
 8010496:	bf5c      	itt	pl
 8010498:	2201      	movpl	r2, #1
 801049a:	601a      	strpl	r2, [r3, #0]
 801049c:	4b20      	ldr	r3, [pc, #128]	; (8010520 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 801049e:	681a      	ldr	r2, [r3, #0]
 80104a0:	07d2      	lsls	r2, r2, #31
 80104a2:	bf5c      	itt	pl
 80104a4:	2201      	movpl	r2, #1
 80104a6:	601a      	strpl	r2, [r3, #0]
 80104a8:	4b1e      	ldr	r3, [pc, #120]	; (8010524 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80104aa:	681a      	ldr	r2, [r3, #0]
 80104ac:	07d0      	lsls	r0, r2, #31
 80104ae:	bf5c      	itt	pl
 80104b0:	2201      	movpl	r2, #1
 80104b2:	601a      	strpl	r2, [r3, #0]
 80104b4:	4b1c      	ldr	r3, [pc, #112]	; (8010528 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80104b6:	681a      	ldr	r2, [r3, #0]
 80104b8:	07d1      	lsls	r1, r2, #31
 80104ba:	bf5c      	itt	pl
 80104bc:	2201      	movpl	r2, #1
 80104be:	601a      	strpl	r2, [r3, #0]
 80104c0:	4b1a      	ldr	r3, [pc, #104]	; (801052c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80104c2:	681a      	ldr	r2, [r3, #0]
 80104c4:	07d2      	lsls	r2, r2, #31
 80104c6:	bf5c      	itt	pl
 80104c8:	2201      	movpl	r2, #1
 80104ca:	601a      	strpl	r2, [r3, #0]
 80104cc:	4b18      	ldr	r3, [pc, #96]	; (8010530 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80104ce:	681a      	ldr	r2, [r3, #0]
 80104d0:	07d0      	lsls	r0, r2, #31
 80104d2:	bf5c      	itt	pl
 80104d4:	2201      	movpl	r2, #1
 80104d6:	601a      	strpl	r2, [r3, #0]
 80104d8:	4b16      	ldr	r3, [pc, #88]	; (8010534 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80104da:	681a      	ldr	r2, [r3, #0]
 80104dc:	07d1      	lsls	r1, r2, #31
 80104de:	bf5c      	itt	pl
 80104e0:	2201      	movpl	r2, #1
 80104e2:	601a      	strpl	r2, [r3, #0]
 80104e4:	4b14      	ldr	r3, [pc, #80]	; (8010538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80104e6:	681a      	ldr	r2, [r3, #0]
 80104e8:	07d2      	lsls	r2, r2, #31
 80104ea:	bf5c      	itt	pl
 80104ec:	2201      	movpl	r2, #1
 80104ee:	601a      	strpl	r2, [r3, #0]
 80104f0:	4b12      	ldr	r3, [pc, #72]	; (801053c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80104f2:	681a      	ldr	r2, [r3, #0]
 80104f4:	07d0      	lsls	r0, r2, #31
 80104f6:	bf5c      	itt	pl
 80104f8:	2201      	movpl	r2, #1
 80104fa:	601a      	strpl	r2, [r3, #0]
 80104fc:	4b10      	ldr	r3, [pc, #64]	; (8010540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80104fe:	681a      	ldr	r2, [r3, #0]
 8010500:	07d1      	lsls	r1, r2, #31
 8010502:	bf5c      	itt	pl
 8010504:	2201      	movpl	r2, #1
 8010506:	601a      	strpl	r2, [r3, #0]
 8010508:	4b0e      	ldr	r3, [pc, #56]	; (8010544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 801050a:	681a      	ldr	r2, [r3, #0]
 801050c:	07d2      	lsls	r2, r2, #31
 801050e:	bf5c      	itt	pl
 8010510:	2201      	movpl	r2, #1
 8010512:	601a      	strpl	r2, [r3, #0]
 8010514:	4770      	bx	lr
 8010516:	bf00      	nop
 8010518:	20008d10 	.word	0x20008d10
 801051c:	20008d0c 	.word	0x20008d0c
 8010520:	20008d08 	.word	0x20008d08
 8010524:	20008d04 	.word	0x20008d04
 8010528:	20008d00 	.word	0x20008d00
 801052c:	20008cfc 	.word	0x20008cfc
 8010530:	20008cf8 	.word	0x20008cf8
 8010534:	20008cf4 	.word	0x20008cf4
 8010538:	20008cf0 	.word	0x20008cf0
 801053c:	20008cec 	.word	0x20008cec
 8010540:	20008ce8 	.word	0x20008ce8
 8010544:	20008ce4 	.word	0x20008ce4

08010548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8010548:	4b18      	ldr	r3, [pc, #96]	; (80105ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 801054a:	681a      	ldr	r2, [r3, #0]
 801054c:	07d1      	lsls	r1, r2, #31
 801054e:	bf5c      	itt	pl
 8010550:	2201      	movpl	r2, #1
 8010552:	601a      	strpl	r2, [r3, #0]
 8010554:	4b16      	ldr	r3, [pc, #88]	; (80105b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8010556:	681a      	ldr	r2, [r3, #0]
 8010558:	07d2      	lsls	r2, r2, #31
 801055a:	bf5c      	itt	pl
 801055c:	2201      	movpl	r2, #1
 801055e:	601a      	strpl	r2, [r3, #0]
 8010560:	4b14      	ldr	r3, [pc, #80]	; (80105b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8010562:	681a      	ldr	r2, [r3, #0]
 8010564:	07d0      	lsls	r0, r2, #31
 8010566:	bf5c      	itt	pl
 8010568:	2201      	movpl	r2, #1
 801056a:	601a      	strpl	r2, [r3, #0]
 801056c:	4b12      	ldr	r3, [pc, #72]	; (80105b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 801056e:	681a      	ldr	r2, [r3, #0]
 8010570:	07d1      	lsls	r1, r2, #31
 8010572:	bf5c      	itt	pl
 8010574:	2201      	movpl	r2, #1
 8010576:	601a      	strpl	r2, [r3, #0]
 8010578:	4b10      	ldr	r3, [pc, #64]	; (80105bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 801057a:	681a      	ldr	r2, [r3, #0]
 801057c:	07d2      	lsls	r2, r2, #31
 801057e:	bf5c      	itt	pl
 8010580:	2201      	movpl	r2, #1
 8010582:	601a      	strpl	r2, [r3, #0]
 8010584:	4b0e      	ldr	r3, [pc, #56]	; (80105c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8010586:	681a      	ldr	r2, [r3, #0]
 8010588:	07d0      	lsls	r0, r2, #31
 801058a:	bf5c      	itt	pl
 801058c:	2201      	movpl	r2, #1
 801058e:	601a      	strpl	r2, [r3, #0]
 8010590:	4b0c      	ldr	r3, [pc, #48]	; (80105c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8010592:	681a      	ldr	r2, [r3, #0]
 8010594:	07d1      	lsls	r1, r2, #31
 8010596:	bf5c      	itt	pl
 8010598:	2201      	movpl	r2, #1
 801059a:	601a      	strpl	r2, [r3, #0]
 801059c:	4b0a      	ldr	r3, [pc, #40]	; (80105c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 801059e:	681a      	ldr	r2, [r3, #0]
 80105a0:	07d2      	lsls	r2, r2, #31
 80105a2:	bf5c      	itt	pl
 80105a4:	2201      	movpl	r2, #1
 80105a6:	601a      	strpl	r2, [r3, #0]
 80105a8:	4770      	bx	lr
 80105aa:	bf00      	nop
 80105ac:	20008d30 	.word	0x20008d30
 80105b0:	20008d2c 	.word	0x20008d2c
 80105b4:	20008d28 	.word	0x20008d28
 80105b8:	20008d24 	.word	0x20008d24
 80105bc:	20008d20 	.word	0x20008d20
 80105c0:	20008d1c 	.word	0x20008d1c
 80105c4:	20008d18 	.word	0x20008d18
 80105c8:	20008d14 	.word	0x20008d14

080105cc <abort>:
 80105cc:	b508      	push	{r3, lr}
 80105ce:	2006      	movs	r0, #6
 80105d0:	f000 ffe8 	bl	80115a4 <raise>
 80105d4:	2001      	movs	r0, #1
 80105d6:	f004 f957 	bl	8014888 <_exit>

080105da <__cxa_atexit>:
 80105da:	4613      	mov	r3, r2
 80105dc:	460a      	mov	r2, r1
 80105de:	4601      	mov	r1, r0
 80105e0:	2002      	movs	r0, #2
 80105e2:	f002 bb27 	b.w	8012c34 <__register_exitproc>
	...

080105e8 <_fputc_r>:
 80105e8:	b570      	push	{r4, r5, r6, lr}
 80105ea:	460e      	mov	r6, r1
 80105ec:	4614      	mov	r4, r2
 80105ee:	4605      	mov	r5, r0
 80105f0:	b118      	cbz	r0, 80105fa <_fputc_r+0x12>
 80105f2:	6983      	ldr	r3, [r0, #24]
 80105f4:	b90b      	cbnz	r3, 80105fa <_fputc_r+0x12>
 80105f6:	f003 fb23 	bl	8013c40 <__sinit>
 80105fa:	4b14      	ldr	r3, [pc, #80]	; (801064c <_fputc_r+0x64>)
 80105fc:	429c      	cmp	r4, r3
 80105fe:	d11a      	bne.n	8010636 <_fputc_r+0x4e>
 8010600:	686c      	ldr	r4, [r5, #4]
 8010602:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010604:	07d8      	lsls	r0, r3, #31
 8010606:	d405      	bmi.n	8010614 <_fputc_r+0x2c>
 8010608:	89a3      	ldrh	r3, [r4, #12]
 801060a:	0599      	lsls	r1, r3, #22
 801060c:	d402      	bmi.n	8010614 <_fputc_r+0x2c>
 801060e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010610:	f000 fa72 	bl	8010af8 <__retarget_lock_acquire_recursive>
 8010614:	4622      	mov	r2, r4
 8010616:	4628      	mov	r0, r5
 8010618:	4631      	mov	r1, r6
 801061a:	f000 fd53 	bl	80110c4 <_putc_r>
 801061e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010620:	07da      	lsls	r2, r3, #31
 8010622:	4605      	mov	r5, r0
 8010624:	d405      	bmi.n	8010632 <_fputc_r+0x4a>
 8010626:	89a3      	ldrh	r3, [r4, #12]
 8010628:	059b      	lsls	r3, r3, #22
 801062a:	d402      	bmi.n	8010632 <_fputc_r+0x4a>
 801062c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801062e:	f000 fa65 	bl	8010afc <__retarget_lock_release_recursive>
 8010632:	4628      	mov	r0, r5
 8010634:	bd70      	pop	{r4, r5, r6, pc}
 8010636:	4b06      	ldr	r3, [pc, #24]	; (8010650 <_fputc_r+0x68>)
 8010638:	429c      	cmp	r4, r3
 801063a:	d101      	bne.n	8010640 <_fputc_r+0x58>
 801063c:	68ac      	ldr	r4, [r5, #8]
 801063e:	e7e0      	b.n	8010602 <_fputc_r+0x1a>
 8010640:	4b04      	ldr	r3, [pc, #16]	; (8010654 <_fputc_r+0x6c>)
 8010642:	429c      	cmp	r4, r3
 8010644:	bf08      	it	eq
 8010646:	68ec      	ldreq	r4, [r5, #12]
 8010648:	e7db      	b.n	8010602 <_fputc_r+0x1a>
 801064a:	bf00      	nop
 801064c:	08019730 	.word	0x08019730
 8010650:	08019750 	.word	0x08019750
 8010654:	08019710 	.word	0x08019710

08010658 <fputc>:
 8010658:	4b02      	ldr	r3, [pc, #8]	; (8010664 <fputc+0xc>)
 801065a:	460a      	mov	r2, r1
 801065c:	4601      	mov	r1, r0
 801065e:	6818      	ldr	r0, [r3, #0]
 8010660:	f7ff bfc2 	b.w	80105e8 <_fputc_r>
 8010664:	20000028 	.word	0x20000028

08010668 <_fputs_r>:
 8010668:	b530      	push	{r4, r5, lr}
 801066a:	b087      	sub	sp, #28
 801066c:	4605      	mov	r5, r0
 801066e:	4608      	mov	r0, r1
 8010670:	4614      	mov	r4, r2
 8010672:	9101      	str	r1, [sp, #4]
 8010674:	f7f6 f95e 	bl	8006934 <strlen>
 8010678:	ab01      	add	r3, sp, #4
 801067a:	9303      	str	r3, [sp, #12]
 801067c:	2301      	movs	r3, #1
 801067e:	9005      	str	r0, [sp, #20]
 8010680:	9002      	str	r0, [sp, #8]
 8010682:	9304      	str	r3, [sp, #16]
 8010684:	b125      	cbz	r5, 8010690 <_fputs_r+0x28>
 8010686:	69ab      	ldr	r3, [r5, #24]
 8010688:	b913      	cbnz	r3, 8010690 <_fputs_r+0x28>
 801068a:	4628      	mov	r0, r5
 801068c:	f003 fad8 	bl	8013c40 <__sinit>
 8010690:	4b19      	ldr	r3, [pc, #100]	; (80106f8 <_fputs_r+0x90>)
 8010692:	429c      	cmp	r4, r3
 8010694:	d126      	bne.n	80106e4 <_fputs_r+0x7c>
 8010696:	686c      	ldr	r4, [r5, #4]
 8010698:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801069a:	07db      	lsls	r3, r3, #31
 801069c:	d405      	bmi.n	80106aa <_fputs_r+0x42>
 801069e:	89a3      	ldrh	r3, [r4, #12]
 80106a0:	0598      	lsls	r0, r3, #22
 80106a2:	d402      	bmi.n	80106aa <_fputs_r+0x42>
 80106a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106a6:	f000 fa27 	bl	8010af8 <__retarget_lock_acquire_recursive>
 80106aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106ae:	0499      	lsls	r1, r3, #18
 80106b0:	d406      	bmi.n	80106c0 <_fputs_r+0x58>
 80106b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80106b6:	81a3      	strh	r3, [r4, #12]
 80106b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80106ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80106be:	6663      	str	r3, [r4, #100]	; 0x64
 80106c0:	aa03      	add	r2, sp, #12
 80106c2:	4628      	mov	r0, r5
 80106c4:	4621      	mov	r1, r4
 80106c6:	f000 f837 	bl	8010738 <__sfvwrite_r>
 80106ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80106cc:	07da      	lsls	r2, r3, #31
 80106ce:	4605      	mov	r5, r0
 80106d0:	d405      	bmi.n	80106de <_fputs_r+0x76>
 80106d2:	89a3      	ldrh	r3, [r4, #12]
 80106d4:	059b      	lsls	r3, r3, #22
 80106d6:	d402      	bmi.n	80106de <_fputs_r+0x76>
 80106d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106da:	f000 fa0f 	bl	8010afc <__retarget_lock_release_recursive>
 80106de:	4628      	mov	r0, r5
 80106e0:	b007      	add	sp, #28
 80106e2:	bd30      	pop	{r4, r5, pc}
 80106e4:	4b05      	ldr	r3, [pc, #20]	; (80106fc <_fputs_r+0x94>)
 80106e6:	429c      	cmp	r4, r3
 80106e8:	d101      	bne.n	80106ee <_fputs_r+0x86>
 80106ea:	68ac      	ldr	r4, [r5, #8]
 80106ec:	e7d4      	b.n	8010698 <_fputs_r+0x30>
 80106ee:	4b04      	ldr	r3, [pc, #16]	; (8010700 <_fputs_r+0x98>)
 80106f0:	429c      	cmp	r4, r3
 80106f2:	bf08      	it	eq
 80106f4:	68ec      	ldreq	r4, [r5, #12]
 80106f6:	e7cf      	b.n	8010698 <_fputs_r+0x30>
 80106f8:	08019730 	.word	0x08019730
 80106fc:	08019750 	.word	0x08019750
 8010700:	08019710 	.word	0x08019710

08010704 <fputs>:
 8010704:	4b02      	ldr	r3, [pc, #8]	; (8010710 <fputs+0xc>)
 8010706:	460a      	mov	r2, r1
 8010708:	4601      	mov	r1, r0
 801070a:	6818      	ldr	r0, [r3, #0]
 801070c:	f7ff bfac 	b.w	8010668 <_fputs_r>
 8010710:	20000028 	.word	0x20000028

08010714 <_fstat_r>:
 8010714:	b538      	push	{r3, r4, r5, lr}
 8010716:	4c07      	ldr	r4, [pc, #28]	; (8010734 <_fstat_r+0x20>)
 8010718:	2300      	movs	r3, #0
 801071a:	4605      	mov	r5, r0
 801071c:	4608      	mov	r0, r1
 801071e:	4611      	mov	r1, r2
 8010720:	6023      	str	r3, [r4, #0]
 8010722:	f004 f86b 	bl	80147fc <_fstat>
 8010726:	1c43      	adds	r3, r0, #1
 8010728:	d102      	bne.n	8010730 <_fstat_r+0x1c>
 801072a:	6823      	ldr	r3, [r4, #0]
 801072c:	b103      	cbz	r3, 8010730 <_fstat_r+0x1c>
 801072e:	602b      	str	r3, [r5, #0]
 8010730:	bd38      	pop	{r3, r4, r5, pc}
 8010732:	bf00      	nop
 8010734:	2000ce8c 	.word	0x2000ce8c

08010738 <__sfvwrite_r>:
 8010738:	6893      	ldr	r3, [r2, #8]
 801073a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801073e:	4607      	mov	r7, r0
 8010740:	460c      	mov	r4, r1
 8010742:	4690      	mov	r8, r2
 8010744:	b91b      	cbnz	r3, 801074e <__sfvwrite_r+0x16>
 8010746:	2000      	movs	r0, #0
 8010748:	b003      	add	sp, #12
 801074a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801074e:	898b      	ldrh	r3, [r1, #12]
 8010750:	0718      	lsls	r0, r3, #28
 8010752:	d526      	bpl.n	80107a2 <__sfvwrite_r+0x6a>
 8010754:	690b      	ldr	r3, [r1, #16]
 8010756:	b323      	cbz	r3, 80107a2 <__sfvwrite_r+0x6a>
 8010758:	89a3      	ldrh	r3, [r4, #12]
 801075a:	f8d8 6000 	ldr.w	r6, [r8]
 801075e:	f013 0902 	ands.w	r9, r3, #2
 8010762:	d02d      	beq.n	80107c0 <__sfvwrite_r+0x88>
 8010764:	f04f 0a00 	mov.w	sl, #0
 8010768:	f8df b264 	ldr.w	fp, [pc, #612]	; 80109d0 <__sfvwrite_r+0x298>
 801076c:	46d1      	mov	r9, sl
 801076e:	f1b9 0f00 	cmp.w	r9, #0
 8010772:	d01f      	beq.n	80107b4 <__sfvwrite_r+0x7c>
 8010774:	45d9      	cmp	r9, fp
 8010776:	464b      	mov	r3, r9
 8010778:	4652      	mov	r2, sl
 801077a:	bf28      	it	cs
 801077c:	465b      	movcs	r3, fp
 801077e:	6a21      	ldr	r1, [r4, #32]
 8010780:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8010782:	4638      	mov	r0, r7
 8010784:	47a8      	blx	r5
 8010786:	2800      	cmp	r0, #0
 8010788:	f340 8089 	ble.w	801089e <__sfvwrite_r+0x166>
 801078c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010790:	4482      	add	sl, r0
 8010792:	eba9 0900 	sub.w	r9, r9, r0
 8010796:	1a18      	subs	r0, r3, r0
 8010798:	f8c8 0008 	str.w	r0, [r8, #8]
 801079c:	2800      	cmp	r0, #0
 801079e:	d1e6      	bne.n	801076e <__sfvwrite_r+0x36>
 80107a0:	e7d1      	b.n	8010746 <__sfvwrite_r+0xe>
 80107a2:	4621      	mov	r1, r4
 80107a4:	4638      	mov	r0, r7
 80107a6:	f002 f9d7 	bl	8012b58 <__swsetup_r>
 80107aa:	2800      	cmp	r0, #0
 80107ac:	d0d4      	beq.n	8010758 <__sfvwrite_r+0x20>
 80107ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80107b2:	e7c9      	b.n	8010748 <__sfvwrite_r+0x10>
 80107b4:	f8d6 a000 	ldr.w	sl, [r6]
 80107b8:	f8d6 9004 	ldr.w	r9, [r6, #4]
 80107bc:	3608      	adds	r6, #8
 80107be:	e7d6      	b.n	801076e <__sfvwrite_r+0x36>
 80107c0:	f013 0301 	ands.w	r3, r3, #1
 80107c4:	d043      	beq.n	801084e <__sfvwrite_r+0x116>
 80107c6:	4648      	mov	r0, r9
 80107c8:	46ca      	mov	sl, r9
 80107ca:	46cb      	mov	fp, r9
 80107cc:	f1bb 0f00 	cmp.w	fp, #0
 80107d0:	f000 80d9 	beq.w	8010986 <__sfvwrite_r+0x24e>
 80107d4:	b950      	cbnz	r0, 80107ec <__sfvwrite_r+0xb4>
 80107d6:	465a      	mov	r2, fp
 80107d8:	210a      	movs	r1, #10
 80107da:	4650      	mov	r0, sl
 80107dc:	f7f6 f850 	bl	8006880 <memchr>
 80107e0:	2800      	cmp	r0, #0
 80107e2:	f000 80d5 	beq.w	8010990 <__sfvwrite_r+0x258>
 80107e6:	3001      	adds	r0, #1
 80107e8:	eba0 090a 	sub.w	r9, r0, sl
 80107ec:	6820      	ldr	r0, [r4, #0]
 80107ee:	6921      	ldr	r1, [r4, #16]
 80107f0:	6962      	ldr	r2, [r4, #20]
 80107f2:	45d9      	cmp	r9, fp
 80107f4:	464b      	mov	r3, r9
 80107f6:	bf28      	it	cs
 80107f8:	465b      	movcs	r3, fp
 80107fa:	4288      	cmp	r0, r1
 80107fc:	f240 80cb 	bls.w	8010996 <__sfvwrite_r+0x25e>
 8010800:	68a5      	ldr	r5, [r4, #8]
 8010802:	4415      	add	r5, r2
 8010804:	42ab      	cmp	r3, r5
 8010806:	f340 80c6 	ble.w	8010996 <__sfvwrite_r+0x25e>
 801080a:	4651      	mov	r1, sl
 801080c:	462a      	mov	r2, r5
 801080e:	f000 fc2b 	bl	8011068 <memmove>
 8010812:	6823      	ldr	r3, [r4, #0]
 8010814:	442b      	add	r3, r5
 8010816:	6023      	str	r3, [r4, #0]
 8010818:	4621      	mov	r1, r4
 801081a:	4638      	mov	r0, r7
 801081c:	f003 f97c 	bl	8013b18 <_fflush_r>
 8010820:	2800      	cmp	r0, #0
 8010822:	d13c      	bne.n	801089e <__sfvwrite_r+0x166>
 8010824:	ebb9 0905 	subs.w	r9, r9, r5
 8010828:	f040 80cf 	bne.w	80109ca <__sfvwrite_r+0x292>
 801082c:	4621      	mov	r1, r4
 801082e:	4638      	mov	r0, r7
 8010830:	f003 f972 	bl	8013b18 <_fflush_r>
 8010834:	2800      	cmp	r0, #0
 8010836:	d132      	bne.n	801089e <__sfvwrite_r+0x166>
 8010838:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801083c:	44aa      	add	sl, r5
 801083e:	ebab 0b05 	sub.w	fp, fp, r5
 8010842:	1b5d      	subs	r5, r3, r5
 8010844:	f8c8 5008 	str.w	r5, [r8, #8]
 8010848:	2d00      	cmp	r5, #0
 801084a:	d1bf      	bne.n	80107cc <__sfvwrite_r+0x94>
 801084c:	e77b      	b.n	8010746 <__sfvwrite_r+0xe>
 801084e:	4699      	mov	r9, r3
 8010850:	469a      	mov	sl, r3
 8010852:	f1ba 0f00 	cmp.w	sl, #0
 8010856:	d027      	beq.n	80108a8 <__sfvwrite_r+0x170>
 8010858:	89a2      	ldrh	r2, [r4, #12]
 801085a:	68a5      	ldr	r5, [r4, #8]
 801085c:	0591      	lsls	r1, r2, #22
 801085e:	d565      	bpl.n	801092c <__sfvwrite_r+0x1f4>
 8010860:	45aa      	cmp	sl, r5
 8010862:	d33b      	bcc.n	80108dc <__sfvwrite_r+0x1a4>
 8010864:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010868:	d036      	beq.n	80108d8 <__sfvwrite_r+0x1a0>
 801086a:	6921      	ldr	r1, [r4, #16]
 801086c:	6823      	ldr	r3, [r4, #0]
 801086e:	1a5b      	subs	r3, r3, r1
 8010870:	9301      	str	r3, [sp, #4]
 8010872:	6963      	ldr	r3, [r4, #20]
 8010874:	2002      	movs	r0, #2
 8010876:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801087a:	fb93 fbf0 	sdiv	fp, r3, r0
 801087e:	9b01      	ldr	r3, [sp, #4]
 8010880:	1c58      	adds	r0, r3, #1
 8010882:	4450      	add	r0, sl
 8010884:	4583      	cmp	fp, r0
 8010886:	bf38      	it	cc
 8010888:	4683      	movcc	fp, r0
 801088a:	0553      	lsls	r3, r2, #21
 801088c:	d53e      	bpl.n	801090c <__sfvwrite_r+0x1d4>
 801088e:	4659      	mov	r1, fp
 8010890:	4638      	mov	r0, r7
 8010892:	f000 f9af 	bl	8010bf4 <_malloc_r>
 8010896:	4605      	mov	r5, r0
 8010898:	b950      	cbnz	r0, 80108b0 <__sfvwrite_r+0x178>
 801089a:	230c      	movs	r3, #12
 801089c:	603b      	str	r3, [r7, #0]
 801089e:	89a3      	ldrh	r3, [r4, #12]
 80108a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108a4:	81a3      	strh	r3, [r4, #12]
 80108a6:	e782      	b.n	80107ae <__sfvwrite_r+0x76>
 80108a8:	e896 0600 	ldmia.w	r6, {r9, sl}
 80108ac:	3608      	adds	r6, #8
 80108ae:	e7d0      	b.n	8010852 <__sfvwrite_r+0x11a>
 80108b0:	9a01      	ldr	r2, [sp, #4]
 80108b2:	6921      	ldr	r1, [r4, #16]
 80108b4:	f000 fbcd 	bl	8011052 <memcpy>
 80108b8:	89a2      	ldrh	r2, [r4, #12]
 80108ba:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80108be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80108c2:	81a2      	strh	r2, [r4, #12]
 80108c4:	9b01      	ldr	r3, [sp, #4]
 80108c6:	6125      	str	r5, [r4, #16]
 80108c8:	441d      	add	r5, r3
 80108ca:	ebab 0303 	sub.w	r3, fp, r3
 80108ce:	6025      	str	r5, [r4, #0]
 80108d0:	f8c4 b014 	str.w	fp, [r4, #20]
 80108d4:	4655      	mov	r5, sl
 80108d6:	60a3      	str	r3, [r4, #8]
 80108d8:	45aa      	cmp	sl, r5
 80108da:	d200      	bcs.n	80108de <__sfvwrite_r+0x1a6>
 80108dc:	4655      	mov	r5, sl
 80108de:	462a      	mov	r2, r5
 80108e0:	4649      	mov	r1, r9
 80108e2:	6820      	ldr	r0, [r4, #0]
 80108e4:	f000 fbc0 	bl	8011068 <memmove>
 80108e8:	68a3      	ldr	r3, [r4, #8]
 80108ea:	1b5b      	subs	r3, r3, r5
 80108ec:	60a3      	str	r3, [r4, #8]
 80108ee:	6823      	ldr	r3, [r4, #0]
 80108f0:	441d      	add	r5, r3
 80108f2:	6025      	str	r5, [r4, #0]
 80108f4:	4655      	mov	r5, sl
 80108f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80108fa:	44a9      	add	r9, r5
 80108fc:	ebaa 0a05 	sub.w	sl, sl, r5
 8010900:	1b5d      	subs	r5, r3, r5
 8010902:	f8c8 5008 	str.w	r5, [r8, #8]
 8010906:	2d00      	cmp	r5, #0
 8010908:	d1a3      	bne.n	8010852 <__sfvwrite_r+0x11a>
 801090a:	e71c      	b.n	8010746 <__sfvwrite_r+0xe>
 801090c:	465a      	mov	r2, fp
 801090e:	4638      	mov	r0, r7
 8010910:	f000 fc90 	bl	8011234 <_realloc_r>
 8010914:	4605      	mov	r5, r0
 8010916:	2800      	cmp	r0, #0
 8010918:	d1d4      	bne.n	80108c4 <__sfvwrite_r+0x18c>
 801091a:	6921      	ldr	r1, [r4, #16]
 801091c:	4638      	mov	r0, r7
 801091e:	f003 fa65 	bl	8013dec <_free_r>
 8010922:	89a3      	ldrh	r3, [r4, #12]
 8010924:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010928:	81a3      	strh	r3, [r4, #12]
 801092a:	e7b6      	b.n	801089a <__sfvwrite_r+0x162>
 801092c:	6820      	ldr	r0, [r4, #0]
 801092e:	6923      	ldr	r3, [r4, #16]
 8010930:	4298      	cmp	r0, r3
 8010932:	d802      	bhi.n	801093a <__sfvwrite_r+0x202>
 8010934:	6962      	ldr	r2, [r4, #20]
 8010936:	4592      	cmp	sl, r2
 8010938:	d215      	bcs.n	8010966 <__sfvwrite_r+0x22e>
 801093a:	4555      	cmp	r5, sl
 801093c:	bf28      	it	cs
 801093e:	4655      	movcs	r5, sl
 8010940:	462a      	mov	r2, r5
 8010942:	4649      	mov	r1, r9
 8010944:	f000 fb90 	bl	8011068 <memmove>
 8010948:	68a3      	ldr	r3, [r4, #8]
 801094a:	6822      	ldr	r2, [r4, #0]
 801094c:	1b5b      	subs	r3, r3, r5
 801094e:	442a      	add	r2, r5
 8010950:	60a3      	str	r3, [r4, #8]
 8010952:	6022      	str	r2, [r4, #0]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d1ce      	bne.n	80108f6 <__sfvwrite_r+0x1be>
 8010958:	4621      	mov	r1, r4
 801095a:	4638      	mov	r0, r7
 801095c:	f003 f8dc 	bl	8013b18 <_fflush_r>
 8010960:	2800      	cmp	r0, #0
 8010962:	d0c8      	beq.n	80108f6 <__sfvwrite_r+0x1be>
 8010964:	e79b      	b.n	801089e <__sfvwrite_r+0x166>
 8010966:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801096a:	4553      	cmp	r3, sl
 801096c:	bf28      	it	cs
 801096e:	4653      	movcs	r3, sl
 8010970:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8010972:	fb93 f3f2 	sdiv	r3, r3, r2
 8010976:	6a21      	ldr	r1, [r4, #32]
 8010978:	4353      	muls	r3, r2
 801097a:	4638      	mov	r0, r7
 801097c:	464a      	mov	r2, r9
 801097e:	47a8      	blx	r5
 8010980:	1e05      	subs	r5, r0, #0
 8010982:	dcb8      	bgt.n	80108f6 <__sfvwrite_r+0x1be>
 8010984:	e78b      	b.n	801089e <__sfvwrite_r+0x166>
 8010986:	e896 0c00 	ldmia.w	r6, {sl, fp}
 801098a:	2000      	movs	r0, #0
 801098c:	3608      	adds	r6, #8
 801098e:	e71d      	b.n	80107cc <__sfvwrite_r+0x94>
 8010990:	f10b 0901 	add.w	r9, fp, #1
 8010994:	e72a      	b.n	80107ec <__sfvwrite_r+0xb4>
 8010996:	4293      	cmp	r3, r2
 8010998:	db09      	blt.n	80109ae <__sfvwrite_r+0x276>
 801099a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 801099c:	6a21      	ldr	r1, [r4, #32]
 801099e:	4613      	mov	r3, r2
 80109a0:	4638      	mov	r0, r7
 80109a2:	4652      	mov	r2, sl
 80109a4:	47a8      	blx	r5
 80109a6:	1e05      	subs	r5, r0, #0
 80109a8:	f73f af3c 	bgt.w	8010824 <__sfvwrite_r+0xec>
 80109ac:	e777      	b.n	801089e <__sfvwrite_r+0x166>
 80109ae:	461a      	mov	r2, r3
 80109b0:	4651      	mov	r1, sl
 80109b2:	9301      	str	r3, [sp, #4]
 80109b4:	f000 fb58 	bl	8011068 <memmove>
 80109b8:	9b01      	ldr	r3, [sp, #4]
 80109ba:	68a2      	ldr	r2, [r4, #8]
 80109bc:	1ad2      	subs	r2, r2, r3
 80109be:	60a2      	str	r2, [r4, #8]
 80109c0:	6822      	ldr	r2, [r4, #0]
 80109c2:	441a      	add	r2, r3
 80109c4:	6022      	str	r2, [r4, #0]
 80109c6:	461d      	mov	r5, r3
 80109c8:	e72c      	b.n	8010824 <__sfvwrite_r+0xec>
 80109ca:	2001      	movs	r0, #1
 80109cc:	e734      	b.n	8010838 <__sfvwrite_r+0x100>
 80109ce:	bf00      	nop
 80109d0:	7ffffc00 	.word	0x7ffffc00

080109d4 <_fwrite_r>:
 80109d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109d8:	b086      	sub	sp, #24
 80109da:	fb02 f503 	mul.w	r5, r2, r3
 80109de:	461f      	mov	r7, r3
 80109e0:	ab01      	add	r3, sp, #4
 80109e2:	9303      	str	r3, [sp, #12]
 80109e4:	2301      	movs	r3, #1
 80109e6:	4690      	mov	r8, r2
 80109e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80109ea:	9101      	str	r1, [sp, #4]
 80109ec:	9502      	str	r5, [sp, #8]
 80109ee:	9505      	str	r5, [sp, #20]
 80109f0:	9304      	str	r3, [sp, #16]
 80109f2:	4606      	mov	r6, r0
 80109f4:	b118      	cbz	r0, 80109fe <_fwrite_r+0x2a>
 80109f6:	6983      	ldr	r3, [r0, #24]
 80109f8:	b90b      	cbnz	r3, 80109fe <_fwrite_r+0x2a>
 80109fa:	f003 f921 	bl	8013c40 <__sinit>
 80109fe:	4b21      	ldr	r3, [pc, #132]	; (8010a84 <_fwrite_r+0xb0>)
 8010a00:	429c      	cmp	r4, r3
 8010a02:	d127      	bne.n	8010a54 <_fwrite_r+0x80>
 8010a04:	6874      	ldr	r4, [r6, #4]
 8010a06:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a08:	07d8      	lsls	r0, r3, #31
 8010a0a:	d405      	bmi.n	8010a18 <_fwrite_r+0x44>
 8010a0c:	89a3      	ldrh	r3, [r4, #12]
 8010a0e:	0599      	lsls	r1, r3, #22
 8010a10:	d402      	bmi.n	8010a18 <_fwrite_r+0x44>
 8010a12:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a14:	f000 f870 	bl	8010af8 <__retarget_lock_acquire_recursive>
 8010a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a1c:	049a      	lsls	r2, r3, #18
 8010a1e:	d406      	bmi.n	8010a2e <_fwrite_r+0x5a>
 8010a20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010a24:	81a3      	strh	r3, [r4, #12]
 8010a26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010a2c:	6663      	str	r3, [r4, #100]	; 0x64
 8010a2e:	aa03      	add	r2, sp, #12
 8010a30:	4621      	mov	r1, r4
 8010a32:	4630      	mov	r0, r6
 8010a34:	f7ff fe80 	bl	8010738 <__sfvwrite_r>
 8010a38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a3a:	b9a8      	cbnz	r0, 8010a68 <_fwrite_r+0x94>
 8010a3c:	07d8      	lsls	r0, r3, #31
 8010a3e:	d405      	bmi.n	8010a4c <_fwrite_r+0x78>
 8010a40:	89a3      	ldrh	r3, [r4, #12]
 8010a42:	0599      	lsls	r1, r3, #22
 8010a44:	d402      	bmi.n	8010a4c <_fwrite_r+0x78>
 8010a46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a48:	f000 f858 	bl	8010afc <__retarget_lock_release_recursive>
 8010a4c:	4638      	mov	r0, r7
 8010a4e:	b006      	add	sp, #24
 8010a50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a54:	4b0c      	ldr	r3, [pc, #48]	; (8010a88 <_fwrite_r+0xb4>)
 8010a56:	429c      	cmp	r4, r3
 8010a58:	d101      	bne.n	8010a5e <_fwrite_r+0x8a>
 8010a5a:	68b4      	ldr	r4, [r6, #8]
 8010a5c:	e7d3      	b.n	8010a06 <_fwrite_r+0x32>
 8010a5e:	4b0b      	ldr	r3, [pc, #44]	; (8010a8c <_fwrite_r+0xb8>)
 8010a60:	429c      	cmp	r4, r3
 8010a62:	bf08      	it	eq
 8010a64:	68f4      	ldreq	r4, [r6, #12]
 8010a66:	e7ce      	b.n	8010a06 <_fwrite_r+0x32>
 8010a68:	07da      	lsls	r2, r3, #31
 8010a6a:	d405      	bmi.n	8010a78 <_fwrite_r+0xa4>
 8010a6c:	89a3      	ldrh	r3, [r4, #12]
 8010a6e:	059b      	lsls	r3, r3, #22
 8010a70:	d402      	bmi.n	8010a78 <_fwrite_r+0xa4>
 8010a72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a74:	f000 f842 	bl	8010afc <__retarget_lock_release_recursive>
 8010a78:	9b05      	ldr	r3, [sp, #20]
 8010a7a:	1aed      	subs	r5, r5, r3
 8010a7c:	fbb5 f7f8 	udiv	r7, r5, r8
 8010a80:	e7e4      	b.n	8010a4c <_fwrite_r+0x78>
 8010a82:	bf00      	nop
 8010a84:	08019730 	.word	0x08019730
 8010a88:	08019750 	.word	0x08019750
 8010a8c:	08019710 	.word	0x08019710

08010a90 <fwrite>:
 8010a90:	b507      	push	{r0, r1, r2, lr}
 8010a92:	9300      	str	r3, [sp, #0]
 8010a94:	4613      	mov	r3, r2
 8010a96:	460a      	mov	r2, r1
 8010a98:	4601      	mov	r1, r0
 8010a9a:	4803      	ldr	r0, [pc, #12]	; (8010aa8 <fwrite+0x18>)
 8010a9c:	6800      	ldr	r0, [r0, #0]
 8010a9e:	f7ff ff99 	bl	80109d4 <_fwrite_r>
 8010aa2:	b003      	add	sp, #12
 8010aa4:	f85d fb04 	ldr.w	pc, [sp], #4
 8010aa8:	20000028 	.word	0x20000028

08010aac <__libc_init_array>:
 8010aac:	b570      	push	{r4, r5, r6, lr}
 8010aae:	4e0d      	ldr	r6, [pc, #52]	; (8010ae4 <__libc_init_array+0x38>)
 8010ab0:	4c0d      	ldr	r4, [pc, #52]	; (8010ae8 <__libc_init_array+0x3c>)
 8010ab2:	1ba4      	subs	r4, r4, r6
 8010ab4:	10a4      	asrs	r4, r4, #2
 8010ab6:	2500      	movs	r5, #0
 8010ab8:	42a5      	cmp	r5, r4
 8010aba:	d109      	bne.n	8010ad0 <__libc_init_array+0x24>
 8010abc:	4e0b      	ldr	r6, [pc, #44]	; (8010aec <__libc_init_array+0x40>)
 8010abe:	4c0c      	ldr	r4, [pc, #48]	; (8010af0 <__libc_init_array+0x44>)
 8010ac0:	f003 fee4 	bl	801488c <_init>
 8010ac4:	1ba4      	subs	r4, r4, r6
 8010ac6:	10a4      	asrs	r4, r4, #2
 8010ac8:	2500      	movs	r5, #0
 8010aca:	42a5      	cmp	r5, r4
 8010acc:	d105      	bne.n	8010ada <__libc_init_array+0x2e>
 8010ace:	bd70      	pop	{r4, r5, r6, pc}
 8010ad0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010ad4:	4798      	blx	r3
 8010ad6:	3501      	adds	r5, #1
 8010ad8:	e7ee      	b.n	8010ab8 <__libc_init_array+0xc>
 8010ada:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010ade:	4798      	blx	r3
 8010ae0:	3501      	adds	r5, #1
 8010ae2:	e7f2      	b.n	8010aca <__libc_init_array+0x1e>
 8010ae4:	0801a5bc 	.word	0x0801a5bc
 8010ae8:	0801a5bc 	.word	0x0801a5bc
 8010aec:	0801a5bc 	.word	0x0801a5bc
 8010af0:	0801a5dc 	.word	0x0801a5dc

08010af4 <__retarget_lock_init_recursive>:
 8010af4:	4770      	bx	lr

08010af6 <__retarget_lock_close_recursive>:
 8010af6:	4770      	bx	lr

08010af8 <__retarget_lock_acquire_recursive>:
 8010af8:	4770      	bx	lr

08010afa <__retarget_lock_release>:
 8010afa:	4770      	bx	lr

08010afc <__retarget_lock_release_recursive>:
 8010afc:	4770      	bx	lr

08010afe <__swhatbuf_r>:
 8010afe:	b570      	push	{r4, r5, r6, lr}
 8010b00:	460e      	mov	r6, r1
 8010b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b06:	2900      	cmp	r1, #0
 8010b08:	b090      	sub	sp, #64	; 0x40
 8010b0a:	4614      	mov	r4, r2
 8010b0c:	461d      	mov	r5, r3
 8010b0e:	da09      	bge.n	8010b24 <__swhatbuf_r+0x26>
 8010b10:	89b3      	ldrh	r3, [r6, #12]
 8010b12:	2200      	movs	r2, #0
 8010b14:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8010b18:	602a      	str	r2, [r5, #0]
 8010b1a:	d116      	bne.n	8010b4a <__swhatbuf_r+0x4c>
 8010b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b20:	6023      	str	r3, [r4, #0]
 8010b22:	e015      	b.n	8010b50 <__swhatbuf_r+0x52>
 8010b24:	aa01      	add	r2, sp, #4
 8010b26:	f7ff fdf5 	bl	8010714 <_fstat_r>
 8010b2a:	2800      	cmp	r0, #0
 8010b2c:	dbf0      	blt.n	8010b10 <__swhatbuf_r+0x12>
 8010b2e:	9a02      	ldr	r2, [sp, #8]
 8010b30:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010b34:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010b38:	425a      	negs	r2, r3
 8010b3a:	415a      	adcs	r2, r3
 8010b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b40:	602a      	str	r2, [r5, #0]
 8010b42:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8010b46:	6023      	str	r3, [r4, #0]
 8010b48:	e002      	b.n	8010b50 <__swhatbuf_r+0x52>
 8010b4a:	2340      	movs	r3, #64	; 0x40
 8010b4c:	6023      	str	r3, [r4, #0]
 8010b4e:	4610      	mov	r0, r2
 8010b50:	b010      	add	sp, #64	; 0x40
 8010b52:	bd70      	pop	{r4, r5, r6, pc}

08010b54 <__smakebuf_r>:
 8010b54:	898b      	ldrh	r3, [r1, #12]
 8010b56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010b58:	079d      	lsls	r5, r3, #30
 8010b5a:	4606      	mov	r6, r0
 8010b5c:	460c      	mov	r4, r1
 8010b5e:	d507      	bpl.n	8010b70 <__smakebuf_r+0x1c>
 8010b60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010b64:	6023      	str	r3, [r4, #0]
 8010b66:	6123      	str	r3, [r4, #16]
 8010b68:	2301      	movs	r3, #1
 8010b6a:	6163      	str	r3, [r4, #20]
 8010b6c:	b002      	add	sp, #8
 8010b6e:	bd70      	pop	{r4, r5, r6, pc}
 8010b70:	ab01      	add	r3, sp, #4
 8010b72:	466a      	mov	r2, sp
 8010b74:	f7ff ffc3 	bl	8010afe <__swhatbuf_r>
 8010b78:	9900      	ldr	r1, [sp, #0]
 8010b7a:	4605      	mov	r5, r0
 8010b7c:	4630      	mov	r0, r6
 8010b7e:	f000 f839 	bl	8010bf4 <_malloc_r>
 8010b82:	b948      	cbnz	r0, 8010b98 <__smakebuf_r+0x44>
 8010b84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b88:	059a      	lsls	r2, r3, #22
 8010b8a:	d4ef      	bmi.n	8010b6c <__smakebuf_r+0x18>
 8010b8c:	f023 0303 	bic.w	r3, r3, #3
 8010b90:	f043 0302 	orr.w	r3, r3, #2
 8010b94:	81a3      	strh	r3, [r4, #12]
 8010b96:	e7e3      	b.n	8010b60 <__smakebuf_r+0xc>
 8010b98:	4b0d      	ldr	r3, [pc, #52]	; (8010bd0 <__smakebuf_r+0x7c>)
 8010b9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8010b9c:	89a3      	ldrh	r3, [r4, #12]
 8010b9e:	6020      	str	r0, [r4, #0]
 8010ba0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ba4:	81a3      	strh	r3, [r4, #12]
 8010ba6:	9b00      	ldr	r3, [sp, #0]
 8010ba8:	6163      	str	r3, [r4, #20]
 8010baa:	9b01      	ldr	r3, [sp, #4]
 8010bac:	6120      	str	r0, [r4, #16]
 8010bae:	b15b      	cbz	r3, 8010bc8 <__smakebuf_r+0x74>
 8010bb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bb4:	4630      	mov	r0, r6
 8010bb6:	f003 f9f3 	bl	8013fa0 <_isatty_r>
 8010bba:	b128      	cbz	r0, 8010bc8 <__smakebuf_r+0x74>
 8010bbc:	89a3      	ldrh	r3, [r4, #12]
 8010bbe:	f023 0303 	bic.w	r3, r3, #3
 8010bc2:	f043 0301 	orr.w	r3, r3, #1
 8010bc6:	81a3      	strh	r3, [r4, #12]
 8010bc8:	89a3      	ldrh	r3, [r4, #12]
 8010bca:	431d      	orrs	r5, r3
 8010bcc:	81a5      	strh	r5, [r4, #12]
 8010bce:	e7cd      	b.n	8010b6c <__smakebuf_r+0x18>
 8010bd0:	08013b91 	.word	0x08013b91

08010bd4 <malloc>:
 8010bd4:	4b02      	ldr	r3, [pc, #8]	; (8010be0 <malloc+0xc>)
 8010bd6:	4601      	mov	r1, r0
 8010bd8:	6818      	ldr	r0, [r3, #0]
 8010bda:	f000 b80b 	b.w	8010bf4 <_malloc_r>
 8010bde:	bf00      	nop
 8010be0:	20000028 	.word	0x20000028

08010be4 <free>:
 8010be4:	4b02      	ldr	r3, [pc, #8]	; (8010bf0 <free+0xc>)
 8010be6:	4601      	mov	r1, r0
 8010be8:	6818      	ldr	r0, [r3, #0]
 8010bea:	f003 b8ff 	b.w	8013dec <_free_r>
 8010bee:	bf00      	nop
 8010bf0:	20000028 	.word	0x20000028

08010bf4 <_malloc_r>:
 8010bf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bf8:	f101 040b 	add.w	r4, r1, #11
 8010bfc:	2c16      	cmp	r4, #22
 8010bfe:	4681      	mov	r9, r0
 8010c00:	d907      	bls.n	8010c12 <_malloc_r+0x1e>
 8010c02:	f034 0407 	bics.w	r4, r4, #7
 8010c06:	d505      	bpl.n	8010c14 <_malloc_r+0x20>
 8010c08:	230c      	movs	r3, #12
 8010c0a:	f8c9 3000 	str.w	r3, [r9]
 8010c0e:	2600      	movs	r6, #0
 8010c10:	e131      	b.n	8010e76 <_malloc_r+0x282>
 8010c12:	2410      	movs	r4, #16
 8010c14:	428c      	cmp	r4, r1
 8010c16:	d3f7      	bcc.n	8010c08 <_malloc_r+0x14>
 8010c18:	4648      	mov	r0, r9
 8010c1a:	f000 fa47 	bl	80110ac <__malloc_lock>
 8010c1e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8010c22:	4d9c      	ldr	r5, [pc, #624]	; (8010e94 <_malloc_r+0x2a0>)
 8010c24:	d236      	bcs.n	8010c94 <_malloc_r+0xa0>
 8010c26:	f104 0208 	add.w	r2, r4, #8
 8010c2a:	442a      	add	r2, r5
 8010c2c:	f1a2 0108 	sub.w	r1, r2, #8
 8010c30:	6856      	ldr	r6, [r2, #4]
 8010c32:	428e      	cmp	r6, r1
 8010c34:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8010c38:	d102      	bne.n	8010c40 <_malloc_r+0x4c>
 8010c3a:	68d6      	ldr	r6, [r2, #12]
 8010c3c:	42b2      	cmp	r2, r6
 8010c3e:	d010      	beq.n	8010c62 <_malloc_r+0x6e>
 8010c40:	6873      	ldr	r3, [r6, #4]
 8010c42:	68f2      	ldr	r2, [r6, #12]
 8010c44:	68b1      	ldr	r1, [r6, #8]
 8010c46:	f023 0303 	bic.w	r3, r3, #3
 8010c4a:	60ca      	str	r2, [r1, #12]
 8010c4c:	4433      	add	r3, r6
 8010c4e:	6091      	str	r1, [r2, #8]
 8010c50:	685a      	ldr	r2, [r3, #4]
 8010c52:	f042 0201 	orr.w	r2, r2, #1
 8010c56:	605a      	str	r2, [r3, #4]
 8010c58:	4648      	mov	r0, r9
 8010c5a:	f000 fa2d 	bl	80110b8 <__malloc_unlock>
 8010c5e:	3608      	adds	r6, #8
 8010c60:	e109      	b.n	8010e76 <_malloc_r+0x282>
 8010c62:	3302      	adds	r3, #2
 8010c64:	4a8c      	ldr	r2, [pc, #560]	; (8010e98 <_malloc_r+0x2a4>)
 8010c66:	692e      	ldr	r6, [r5, #16]
 8010c68:	4296      	cmp	r6, r2
 8010c6a:	4611      	mov	r1, r2
 8010c6c:	d06d      	beq.n	8010d4a <_malloc_r+0x156>
 8010c6e:	6870      	ldr	r0, [r6, #4]
 8010c70:	f020 0003 	bic.w	r0, r0, #3
 8010c74:	1b07      	subs	r7, r0, r4
 8010c76:	2f0f      	cmp	r7, #15
 8010c78:	dd47      	ble.n	8010d0a <_malloc_r+0x116>
 8010c7a:	1933      	adds	r3, r6, r4
 8010c7c:	f044 0401 	orr.w	r4, r4, #1
 8010c80:	6074      	str	r4, [r6, #4]
 8010c82:	616b      	str	r3, [r5, #20]
 8010c84:	612b      	str	r3, [r5, #16]
 8010c86:	60da      	str	r2, [r3, #12]
 8010c88:	609a      	str	r2, [r3, #8]
 8010c8a:	f047 0201 	orr.w	r2, r7, #1
 8010c8e:	605a      	str	r2, [r3, #4]
 8010c90:	5037      	str	r7, [r6, r0]
 8010c92:	e7e1      	b.n	8010c58 <_malloc_r+0x64>
 8010c94:	0a63      	lsrs	r3, r4, #9
 8010c96:	d02a      	beq.n	8010cee <_malloc_r+0xfa>
 8010c98:	2b04      	cmp	r3, #4
 8010c9a:	d812      	bhi.n	8010cc2 <_malloc_r+0xce>
 8010c9c:	09a3      	lsrs	r3, r4, #6
 8010c9e:	3338      	adds	r3, #56	; 0x38
 8010ca0:	1c5a      	adds	r2, r3, #1
 8010ca2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8010ca6:	f1a2 0008 	sub.w	r0, r2, #8
 8010caa:	6856      	ldr	r6, [r2, #4]
 8010cac:	4286      	cmp	r6, r0
 8010cae:	d006      	beq.n	8010cbe <_malloc_r+0xca>
 8010cb0:	6872      	ldr	r2, [r6, #4]
 8010cb2:	f022 0203 	bic.w	r2, r2, #3
 8010cb6:	1b11      	subs	r1, r2, r4
 8010cb8:	290f      	cmp	r1, #15
 8010cba:	dd1c      	ble.n	8010cf6 <_malloc_r+0x102>
 8010cbc:	3b01      	subs	r3, #1
 8010cbe:	3301      	adds	r3, #1
 8010cc0:	e7d0      	b.n	8010c64 <_malloc_r+0x70>
 8010cc2:	2b14      	cmp	r3, #20
 8010cc4:	d801      	bhi.n	8010cca <_malloc_r+0xd6>
 8010cc6:	335b      	adds	r3, #91	; 0x5b
 8010cc8:	e7ea      	b.n	8010ca0 <_malloc_r+0xac>
 8010cca:	2b54      	cmp	r3, #84	; 0x54
 8010ccc:	d802      	bhi.n	8010cd4 <_malloc_r+0xe0>
 8010cce:	0b23      	lsrs	r3, r4, #12
 8010cd0:	336e      	adds	r3, #110	; 0x6e
 8010cd2:	e7e5      	b.n	8010ca0 <_malloc_r+0xac>
 8010cd4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8010cd8:	d802      	bhi.n	8010ce0 <_malloc_r+0xec>
 8010cda:	0be3      	lsrs	r3, r4, #15
 8010cdc:	3377      	adds	r3, #119	; 0x77
 8010cde:	e7df      	b.n	8010ca0 <_malloc_r+0xac>
 8010ce0:	f240 5254 	movw	r2, #1364	; 0x554
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d804      	bhi.n	8010cf2 <_malloc_r+0xfe>
 8010ce8:	0ca3      	lsrs	r3, r4, #18
 8010cea:	337c      	adds	r3, #124	; 0x7c
 8010cec:	e7d8      	b.n	8010ca0 <_malloc_r+0xac>
 8010cee:	233f      	movs	r3, #63	; 0x3f
 8010cf0:	e7d6      	b.n	8010ca0 <_malloc_r+0xac>
 8010cf2:	237e      	movs	r3, #126	; 0x7e
 8010cf4:	e7d4      	b.n	8010ca0 <_malloc_r+0xac>
 8010cf6:	2900      	cmp	r1, #0
 8010cf8:	68f1      	ldr	r1, [r6, #12]
 8010cfa:	db04      	blt.n	8010d06 <_malloc_r+0x112>
 8010cfc:	68b3      	ldr	r3, [r6, #8]
 8010cfe:	60d9      	str	r1, [r3, #12]
 8010d00:	608b      	str	r3, [r1, #8]
 8010d02:	18b3      	adds	r3, r6, r2
 8010d04:	e7a4      	b.n	8010c50 <_malloc_r+0x5c>
 8010d06:	460e      	mov	r6, r1
 8010d08:	e7d0      	b.n	8010cac <_malloc_r+0xb8>
 8010d0a:	2f00      	cmp	r7, #0
 8010d0c:	616a      	str	r2, [r5, #20]
 8010d0e:	612a      	str	r2, [r5, #16]
 8010d10:	db05      	blt.n	8010d1e <_malloc_r+0x12a>
 8010d12:	4430      	add	r0, r6
 8010d14:	6843      	ldr	r3, [r0, #4]
 8010d16:	f043 0301 	orr.w	r3, r3, #1
 8010d1a:	6043      	str	r3, [r0, #4]
 8010d1c:	e79c      	b.n	8010c58 <_malloc_r+0x64>
 8010d1e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8010d22:	d244      	bcs.n	8010dae <_malloc_r+0x1ba>
 8010d24:	08c0      	lsrs	r0, r0, #3
 8010d26:	1087      	asrs	r7, r0, #2
 8010d28:	2201      	movs	r2, #1
 8010d2a:	fa02 f707 	lsl.w	r7, r2, r7
 8010d2e:	686a      	ldr	r2, [r5, #4]
 8010d30:	3001      	adds	r0, #1
 8010d32:	433a      	orrs	r2, r7
 8010d34:	606a      	str	r2, [r5, #4]
 8010d36:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8010d3a:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8010d3e:	60b7      	str	r7, [r6, #8]
 8010d40:	3a08      	subs	r2, #8
 8010d42:	60f2      	str	r2, [r6, #12]
 8010d44:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8010d48:	60fe      	str	r6, [r7, #12]
 8010d4a:	2001      	movs	r0, #1
 8010d4c:	109a      	asrs	r2, r3, #2
 8010d4e:	fa00 f202 	lsl.w	r2, r0, r2
 8010d52:	6868      	ldr	r0, [r5, #4]
 8010d54:	4282      	cmp	r2, r0
 8010d56:	f200 80a1 	bhi.w	8010e9c <_malloc_r+0x2a8>
 8010d5a:	4202      	tst	r2, r0
 8010d5c:	d106      	bne.n	8010d6c <_malloc_r+0x178>
 8010d5e:	f023 0303 	bic.w	r3, r3, #3
 8010d62:	0052      	lsls	r2, r2, #1
 8010d64:	4202      	tst	r2, r0
 8010d66:	f103 0304 	add.w	r3, r3, #4
 8010d6a:	d0fa      	beq.n	8010d62 <_malloc_r+0x16e>
 8010d6c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8010d70:	46e0      	mov	r8, ip
 8010d72:	469e      	mov	lr, r3
 8010d74:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8010d78:	4546      	cmp	r6, r8
 8010d7a:	d153      	bne.n	8010e24 <_malloc_r+0x230>
 8010d7c:	f10e 0e01 	add.w	lr, lr, #1
 8010d80:	f01e 0f03 	tst.w	lr, #3
 8010d84:	f108 0808 	add.w	r8, r8, #8
 8010d88:	d1f4      	bne.n	8010d74 <_malloc_r+0x180>
 8010d8a:	0798      	lsls	r0, r3, #30
 8010d8c:	d179      	bne.n	8010e82 <_malloc_r+0x28e>
 8010d8e:	686b      	ldr	r3, [r5, #4]
 8010d90:	ea23 0302 	bic.w	r3, r3, r2
 8010d94:	606b      	str	r3, [r5, #4]
 8010d96:	6868      	ldr	r0, [r5, #4]
 8010d98:	0052      	lsls	r2, r2, #1
 8010d9a:	4282      	cmp	r2, r0
 8010d9c:	d87e      	bhi.n	8010e9c <_malloc_r+0x2a8>
 8010d9e:	2a00      	cmp	r2, #0
 8010da0:	d07c      	beq.n	8010e9c <_malloc_r+0x2a8>
 8010da2:	4673      	mov	r3, lr
 8010da4:	4202      	tst	r2, r0
 8010da6:	d1e1      	bne.n	8010d6c <_malloc_r+0x178>
 8010da8:	3304      	adds	r3, #4
 8010daa:	0052      	lsls	r2, r2, #1
 8010dac:	e7fa      	b.n	8010da4 <_malloc_r+0x1b0>
 8010dae:	0a42      	lsrs	r2, r0, #9
 8010db0:	2a04      	cmp	r2, #4
 8010db2:	d815      	bhi.n	8010de0 <_malloc_r+0x1ec>
 8010db4:	0982      	lsrs	r2, r0, #6
 8010db6:	3238      	adds	r2, #56	; 0x38
 8010db8:	1c57      	adds	r7, r2, #1
 8010dba:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8010dbe:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8010dc2:	45be      	cmp	lr, r7
 8010dc4:	d126      	bne.n	8010e14 <_malloc_r+0x220>
 8010dc6:	2001      	movs	r0, #1
 8010dc8:	1092      	asrs	r2, r2, #2
 8010dca:	fa00 f202 	lsl.w	r2, r0, r2
 8010dce:	6868      	ldr	r0, [r5, #4]
 8010dd0:	4310      	orrs	r0, r2
 8010dd2:	6068      	str	r0, [r5, #4]
 8010dd4:	f8c6 e00c 	str.w	lr, [r6, #12]
 8010dd8:	60b7      	str	r7, [r6, #8]
 8010dda:	f8ce 6008 	str.w	r6, [lr, #8]
 8010dde:	e7b3      	b.n	8010d48 <_malloc_r+0x154>
 8010de0:	2a14      	cmp	r2, #20
 8010de2:	d801      	bhi.n	8010de8 <_malloc_r+0x1f4>
 8010de4:	325b      	adds	r2, #91	; 0x5b
 8010de6:	e7e7      	b.n	8010db8 <_malloc_r+0x1c4>
 8010de8:	2a54      	cmp	r2, #84	; 0x54
 8010dea:	d802      	bhi.n	8010df2 <_malloc_r+0x1fe>
 8010dec:	0b02      	lsrs	r2, r0, #12
 8010dee:	326e      	adds	r2, #110	; 0x6e
 8010df0:	e7e2      	b.n	8010db8 <_malloc_r+0x1c4>
 8010df2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8010df6:	d802      	bhi.n	8010dfe <_malloc_r+0x20a>
 8010df8:	0bc2      	lsrs	r2, r0, #15
 8010dfa:	3277      	adds	r2, #119	; 0x77
 8010dfc:	e7dc      	b.n	8010db8 <_malloc_r+0x1c4>
 8010dfe:	f240 5754 	movw	r7, #1364	; 0x554
 8010e02:	42ba      	cmp	r2, r7
 8010e04:	bf9a      	itte	ls
 8010e06:	0c82      	lsrls	r2, r0, #18
 8010e08:	327c      	addls	r2, #124	; 0x7c
 8010e0a:	227e      	movhi	r2, #126	; 0x7e
 8010e0c:	e7d4      	b.n	8010db8 <_malloc_r+0x1c4>
 8010e0e:	68bf      	ldr	r7, [r7, #8]
 8010e10:	45be      	cmp	lr, r7
 8010e12:	d004      	beq.n	8010e1e <_malloc_r+0x22a>
 8010e14:	687a      	ldr	r2, [r7, #4]
 8010e16:	f022 0203 	bic.w	r2, r2, #3
 8010e1a:	4290      	cmp	r0, r2
 8010e1c:	d3f7      	bcc.n	8010e0e <_malloc_r+0x21a>
 8010e1e:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8010e22:	e7d7      	b.n	8010dd4 <_malloc_r+0x1e0>
 8010e24:	6870      	ldr	r0, [r6, #4]
 8010e26:	68f7      	ldr	r7, [r6, #12]
 8010e28:	f020 0003 	bic.w	r0, r0, #3
 8010e2c:	eba0 0a04 	sub.w	sl, r0, r4
 8010e30:	f1ba 0f0f 	cmp.w	sl, #15
 8010e34:	dd10      	ble.n	8010e58 <_malloc_r+0x264>
 8010e36:	68b2      	ldr	r2, [r6, #8]
 8010e38:	1933      	adds	r3, r6, r4
 8010e3a:	f044 0401 	orr.w	r4, r4, #1
 8010e3e:	6074      	str	r4, [r6, #4]
 8010e40:	60d7      	str	r7, [r2, #12]
 8010e42:	60ba      	str	r2, [r7, #8]
 8010e44:	f04a 0201 	orr.w	r2, sl, #1
 8010e48:	616b      	str	r3, [r5, #20]
 8010e4a:	612b      	str	r3, [r5, #16]
 8010e4c:	60d9      	str	r1, [r3, #12]
 8010e4e:	6099      	str	r1, [r3, #8]
 8010e50:	605a      	str	r2, [r3, #4]
 8010e52:	f846 a000 	str.w	sl, [r6, r0]
 8010e56:	e6ff      	b.n	8010c58 <_malloc_r+0x64>
 8010e58:	f1ba 0f00 	cmp.w	sl, #0
 8010e5c:	db0f      	blt.n	8010e7e <_malloc_r+0x28a>
 8010e5e:	4430      	add	r0, r6
 8010e60:	6843      	ldr	r3, [r0, #4]
 8010e62:	f043 0301 	orr.w	r3, r3, #1
 8010e66:	6043      	str	r3, [r0, #4]
 8010e68:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8010e6c:	4648      	mov	r0, r9
 8010e6e:	60df      	str	r7, [r3, #12]
 8010e70:	60bb      	str	r3, [r7, #8]
 8010e72:	f000 f921 	bl	80110b8 <__malloc_unlock>
 8010e76:	4630      	mov	r0, r6
 8010e78:	b003      	add	sp, #12
 8010e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e7e:	463e      	mov	r6, r7
 8010e80:	e77a      	b.n	8010d78 <_malloc_r+0x184>
 8010e82:	f85c 0908 	ldr.w	r0, [ip], #-8
 8010e86:	4584      	cmp	ip, r0
 8010e88:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8010e8c:	f43f af7d 	beq.w	8010d8a <_malloc_r+0x196>
 8010e90:	e781      	b.n	8010d96 <_malloc_r+0x1a2>
 8010e92:	bf00      	nop
 8010e94:	20000288 	.word	0x20000288
 8010e98:	20000290 	.word	0x20000290
 8010e9c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8010ea0:	f8db 6004 	ldr.w	r6, [fp, #4]
 8010ea4:	f026 0603 	bic.w	r6, r6, #3
 8010ea8:	42b4      	cmp	r4, r6
 8010eaa:	d803      	bhi.n	8010eb4 <_malloc_r+0x2c0>
 8010eac:	1b33      	subs	r3, r6, r4
 8010eae:	2b0f      	cmp	r3, #15
 8010eb0:	f300 8096 	bgt.w	8010fe0 <_malloc_r+0x3ec>
 8010eb4:	4a4f      	ldr	r2, [pc, #316]	; (8010ff4 <_malloc_r+0x400>)
 8010eb6:	6817      	ldr	r7, [r2, #0]
 8010eb8:	4a4f      	ldr	r2, [pc, #316]	; (8010ff8 <_malloc_r+0x404>)
 8010eba:	6811      	ldr	r1, [r2, #0]
 8010ebc:	3710      	adds	r7, #16
 8010ebe:	3101      	adds	r1, #1
 8010ec0:	eb0b 0306 	add.w	r3, fp, r6
 8010ec4:	4427      	add	r7, r4
 8010ec6:	d005      	beq.n	8010ed4 <_malloc_r+0x2e0>
 8010ec8:	494c      	ldr	r1, [pc, #304]	; (8010ffc <_malloc_r+0x408>)
 8010eca:	3901      	subs	r1, #1
 8010ecc:	440f      	add	r7, r1
 8010ece:	3101      	adds	r1, #1
 8010ed0:	4249      	negs	r1, r1
 8010ed2:	400f      	ands	r7, r1
 8010ed4:	4639      	mov	r1, r7
 8010ed6:	4648      	mov	r0, r9
 8010ed8:	9201      	str	r2, [sp, #4]
 8010eda:	9300      	str	r3, [sp, #0]
 8010edc:	f000 fb2a 	bl	8011534 <_sbrk_r>
 8010ee0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8010ee4:	4680      	mov	r8, r0
 8010ee6:	d056      	beq.n	8010f96 <_malloc_r+0x3a2>
 8010ee8:	9b00      	ldr	r3, [sp, #0]
 8010eea:	9a01      	ldr	r2, [sp, #4]
 8010eec:	4283      	cmp	r3, r0
 8010eee:	d901      	bls.n	8010ef4 <_malloc_r+0x300>
 8010ef0:	45ab      	cmp	fp, r5
 8010ef2:	d150      	bne.n	8010f96 <_malloc_r+0x3a2>
 8010ef4:	4842      	ldr	r0, [pc, #264]	; (8011000 <_malloc_r+0x40c>)
 8010ef6:	6801      	ldr	r1, [r0, #0]
 8010ef8:	4543      	cmp	r3, r8
 8010efa:	eb07 0e01 	add.w	lr, r7, r1
 8010efe:	f8c0 e000 	str.w	lr, [r0]
 8010f02:	4940      	ldr	r1, [pc, #256]	; (8011004 <_malloc_r+0x410>)
 8010f04:	4682      	mov	sl, r0
 8010f06:	d113      	bne.n	8010f30 <_malloc_r+0x33c>
 8010f08:	420b      	tst	r3, r1
 8010f0a:	d111      	bne.n	8010f30 <_malloc_r+0x33c>
 8010f0c:	68ab      	ldr	r3, [r5, #8]
 8010f0e:	443e      	add	r6, r7
 8010f10:	f046 0601 	orr.w	r6, r6, #1
 8010f14:	605e      	str	r6, [r3, #4]
 8010f16:	4a3c      	ldr	r2, [pc, #240]	; (8011008 <_malloc_r+0x414>)
 8010f18:	f8da 3000 	ldr.w	r3, [sl]
 8010f1c:	6811      	ldr	r1, [r2, #0]
 8010f1e:	428b      	cmp	r3, r1
 8010f20:	bf88      	it	hi
 8010f22:	6013      	strhi	r3, [r2, #0]
 8010f24:	4a39      	ldr	r2, [pc, #228]	; (801100c <_malloc_r+0x418>)
 8010f26:	6811      	ldr	r1, [r2, #0]
 8010f28:	428b      	cmp	r3, r1
 8010f2a:	bf88      	it	hi
 8010f2c:	6013      	strhi	r3, [r2, #0]
 8010f2e:	e032      	b.n	8010f96 <_malloc_r+0x3a2>
 8010f30:	6810      	ldr	r0, [r2, #0]
 8010f32:	3001      	adds	r0, #1
 8010f34:	bf1b      	ittet	ne
 8010f36:	eba8 0303 	subne.w	r3, r8, r3
 8010f3a:	4473      	addne	r3, lr
 8010f3c:	f8c2 8000 	streq.w	r8, [r2]
 8010f40:	f8ca 3000 	strne.w	r3, [sl]
 8010f44:	f018 0007 	ands.w	r0, r8, #7
 8010f48:	bf1c      	itt	ne
 8010f4a:	f1c0 0008 	rsbne	r0, r0, #8
 8010f4e:	4480      	addne	r8, r0
 8010f50:	4b2a      	ldr	r3, [pc, #168]	; (8010ffc <_malloc_r+0x408>)
 8010f52:	4447      	add	r7, r8
 8010f54:	4418      	add	r0, r3
 8010f56:	400f      	ands	r7, r1
 8010f58:	1bc7      	subs	r7, r0, r7
 8010f5a:	4639      	mov	r1, r7
 8010f5c:	4648      	mov	r0, r9
 8010f5e:	f000 fae9 	bl	8011534 <_sbrk_r>
 8010f62:	1c43      	adds	r3, r0, #1
 8010f64:	bf08      	it	eq
 8010f66:	4640      	moveq	r0, r8
 8010f68:	f8da 3000 	ldr.w	r3, [sl]
 8010f6c:	f8c5 8008 	str.w	r8, [r5, #8]
 8010f70:	bf08      	it	eq
 8010f72:	2700      	moveq	r7, #0
 8010f74:	eba0 0008 	sub.w	r0, r0, r8
 8010f78:	443b      	add	r3, r7
 8010f7a:	4407      	add	r7, r0
 8010f7c:	f047 0701 	orr.w	r7, r7, #1
 8010f80:	45ab      	cmp	fp, r5
 8010f82:	f8ca 3000 	str.w	r3, [sl]
 8010f86:	f8c8 7004 	str.w	r7, [r8, #4]
 8010f8a:	d0c4      	beq.n	8010f16 <_malloc_r+0x322>
 8010f8c:	2e0f      	cmp	r6, #15
 8010f8e:	d810      	bhi.n	8010fb2 <_malloc_r+0x3be>
 8010f90:	2301      	movs	r3, #1
 8010f92:	f8c8 3004 	str.w	r3, [r8, #4]
 8010f96:	68ab      	ldr	r3, [r5, #8]
 8010f98:	685a      	ldr	r2, [r3, #4]
 8010f9a:	f022 0203 	bic.w	r2, r2, #3
 8010f9e:	4294      	cmp	r4, r2
 8010fa0:	eba2 0304 	sub.w	r3, r2, r4
 8010fa4:	d801      	bhi.n	8010faa <_malloc_r+0x3b6>
 8010fa6:	2b0f      	cmp	r3, #15
 8010fa8:	dc1a      	bgt.n	8010fe0 <_malloc_r+0x3ec>
 8010faa:	4648      	mov	r0, r9
 8010fac:	f000 f884 	bl	80110b8 <__malloc_unlock>
 8010fb0:	e62d      	b.n	8010c0e <_malloc_r+0x1a>
 8010fb2:	f8db 3004 	ldr.w	r3, [fp, #4]
 8010fb6:	3e0c      	subs	r6, #12
 8010fb8:	f026 0607 	bic.w	r6, r6, #7
 8010fbc:	f003 0301 	and.w	r3, r3, #1
 8010fc0:	4333      	orrs	r3, r6
 8010fc2:	f8cb 3004 	str.w	r3, [fp, #4]
 8010fc6:	eb0b 0306 	add.w	r3, fp, r6
 8010fca:	2205      	movs	r2, #5
 8010fcc:	2e0f      	cmp	r6, #15
 8010fce:	605a      	str	r2, [r3, #4]
 8010fd0:	609a      	str	r2, [r3, #8]
 8010fd2:	d9a0      	bls.n	8010f16 <_malloc_r+0x322>
 8010fd4:	f10b 0108 	add.w	r1, fp, #8
 8010fd8:	4648      	mov	r0, r9
 8010fda:	f002 ff07 	bl	8013dec <_free_r>
 8010fde:	e79a      	b.n	8010f16 <_malloc_r+0x322>
 8010fe0:	68ae      	ldr	r6, [r5, #8]
 8010fe2:	f044 0201 	orr.w	r2, r4, #1
 8010fe6:	4434      	add	r4, r6
 8010fe8:	f043 0301 	orr.w	r3, r3, #1
 8010fec:	6072      	str	r2, [r6, #4]
 8010fee:	60ac      	str	r4, [r5, #8]
 8010ff0:	6063      	str	r3, [r4, #4]
 8010ff2:	e631      	b.n	8010c58 <_malloc_r+0x64>
 8010ff4:	20008d64 	.word	0x20008d64
 8010ff8:	20000690 	.word	0x20000690
 8010ffc:	00001000 	.word	0x00001000
 8011000:	20008d34 	.word	0x20008d34
 8011004:	00000fff 	.word	0x00000fff
 8011008:	20008d5c 	.word	0x20008d5c
 801100c:	20008d60 	.word	0x20008d60

08011010 <__ascii_mbtowc>:
 8011010:	b082      	sub	sp, #8
 8011012:	b901      	cbnz	r1, 8011016 <__ascii_mbtowc+0x6>
 8011014:	a901      	add	r1, sp, #4
 8011016:	b142      	cbz	r2, 801102a <__ascii_mbtowc+0x1a>
 8011018:	b14b      	cbz	r3, 801102e <__ascii_mbtowc+0x1e>
 801101a:	7813      	ldrb	r3, [r2, #0]
 801101c:	600b      	str	r3, [r1, #0]
 801101e:	7812      	ldrb	r2, [r2, #0]
 8011020:	1c10      	adds	r0, r2, #0
 8011022:	bf18      	it	ne
 8011024:	2001      	movne	r0, #1
 8011026:	b002      	add	sp, #8
 8011028:	4770      	bx	lr
 801102a:	4610      	mov	r0, r2
 801102c:	e7fb      	b.n	8011026 <__ascii_mbtowc+0x16>
 801102e:	f06f 0001 	mvn.w	r0, #1
 8011032:	e7f8      	b.n	8011026 <__ascii_mbtowc+0x16>

08011034 <memcmp>:
 8011034:	b510      	push	{r4, lr}
 8011036:	3901      	subs	r1, #1
 8011038:	4402      	add	r2, r0
 801103a:	4290      	cmp	r0, r2
 801103c:	d101      	bne.n	8011042 <memcmp+0xe>
 801103e:	2000      	movs	r0, #0
 8011040:	bd10      	pop	{r4, pc}
 8011042:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011046:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801104a:	42a3      	cmp	r3, r4
 801104c:	d0f5      	beq.n	801103a <memcmp+0x6>
 801104e:	1b18      	subs	r0, r3, r4
 8011050:	bd10      	pop	{r4, pc}

08011052 <memcpy>:
 8011052:	b510      	push	{r4, lr}
 8011054:	1e43      	subs	r3, r0, #1
 8011056:	440a      	add	r2, r1
 8011058:	4291      	cmp	r1, r2
 801105a:	d100      	bne.n	801105e <memcpy+0xc>
 801105c:	bd10      	pop	{r4, pc}
 801105e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011062:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011066:	e7f7      	b.n	8011058 <memcpy+0x6>

08011068 <memmove>:
 8011068:	4288      	cmp	r0, r1
 801106a:	b510      	push	{r4, lr}
 801106c:	eb01 0302 	add.w	r3, r1, r2
 8011070:	d803      	bhi.n	801107a <memmove+0x12>
 8011072:	1e42      	subs	r2, r0, #1
 8011074:	4299      	cmp	r1, r3
 8011076:	d10c      	bne.n	8011092 <memmove+0x2a>
 8011078:	bd10      	pop	{r4, pc}
 801107a:	4298      	cmp	r0, r3
 801107c:	d2f9      	bcs.n	8011072 <memmove+0xa>
 801107e:	1881      	adds	r1, r0, r2
 8011080:	1ad2      	subs	r2, r2, r3
 8011082:	42d3      	cmn	r3, r2
 8011084:	d100      	bne.n	8011088 <memmove+0x20>
 8011086:	bd10      	pop	{r4, pc}
 8011088:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801108c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8011090:	e7f7      	b.n	8011082 <memmove+0x1a>
 8011092:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011096:	f802 4f01 	strb.w	r4, [r2, #1]!
 801109a:	e7eb      	b.n	8011074 <memmove+0xc>

0801109c <memset>:
 801109c:	4402      	add	r2, r0
 801109e:	4603      	mov	r3, r0
 80110a0:	4293      	cmp	r3, r2
 80110a2:	d100      	bne.n	80110a6 <memset+0xa>
 80110a4:	4770      	bx	lr
 80110a6:	f803 1b01 	strb.w	r1, [r3], #1
 80110aa:	e7f9      	b.n	80110a0 <memset+0x4>

080110ac <__malloc_lock>:
 80110ac:	4801      	ldr	r0, [pc, #4]	; (80110b4 <__malloc_lock+0x8>)
 80110ae:	f7ff bd23 	b.w	8010af8 <__retarget_lock_acquire_recursive>
 80110b2:	bf00      	nop
 80110b4:	2000ce82 	.word	0x2000ce82

080110b8 <__malloc_unlock>:
 80110b8:	4801      	ldr	r0, [pc, #4]	; (80110c0 <__malloc_unlock+0x8>)
 80110ba:	f7ff bd1f 	b.w	8010afc <__retarget_lock_release_recursive>
 80110be:	bf00      	nop
 80110c0:	2000ce82 	.word	0x2000ce82

080110c4 <_putc_r>:
 80110c4:	b570      	push	{r4, r5, r6, lr}
 80110c6:	460d      	mov	r5, r1
 80110c8:	4614      	mov	r4, r2
 80110ca:	4606      	mov	r6, r0
 80110cc:	b118      	cbz	r0, 80110d6 <_putc_r+0x12>
 80110ce:	6983      	ldr	r3, [r0, #24]
 80110d0:	b90b      	cbnz	r3, 80110d6 <_putc_r+0x12>
 80110d2:	f002 fdb5 	bl	8013c40 <__sinit>
 80110d6:	4b1c      	ldr	r3, [pc, #112]	; (8011148 <_putc_r+0x84>)
 80110d8:	429c      	cmp	r4, r3
 80110da:	d124      	bne.n	8011126 <_putc_r+0x62>
 80110dc:	6874      	ldr	r4, [r6, #4]
 80110de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80110e0:	07d8      	lsls	r0, r3, #31
 80110e2:	d405      	bmi.n	80110f0 <_putc_r+0x2c>
 80110e4:	89a3      	ldrh	r3, [r4, #12]
 80110e6:	0599      	lsls	r1, r3, #22
 80110e8:	d402      	bmi.n	80110f0 <_putc_r+0x2c>
 80110ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80110ec:	f7ff fd04 	bl	8010af8 <__retarget_lock_acquire_recursive>
 80110f0:	68a3      	ldr	r3, [r4, #8]
 80110f2:	3b01      	subs	r3, #1
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	60a3      	str	r3, [r4, #8]
 80110f8:	da05      	bge.n	8011106 <_putc_r+0x42>
 80110fa:	69a2      	ldr	r2, [r4, #24]
 80110fc:	4293      	cmp	r3, r2
 80110fe:	db1c      	blt.n	801113a <_putc_r+0x76>
 8011100:	b2eb      	uxtb	r3, r5
 8011102:	2b0a      	cmp	r3, #10
 8011104:	d019      	beq.n	801113a <_putc_r+0x76>
 8011106:	6823      	ldr	r3, [r4, #0]
 8011108:	1c5a      	adds	r2, r3, #1
 801110a:	6022      	str	r2, [r4, #0]
 801110c:	701d      	strb	r5, [r3, #0]
 801110e:	b2ed      	uxtb	r5, r5
 8011110:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011112:	07da      	lsls	r2, r3, #31
 8011114:	d405      	bmi.n	8011122 <_putc_r+0x5e>
 8011116:	89a3      	ldrh	r3, [r4, #12]
 8011118:	059b      	lsls	r3, r3, #22
 801111a:	d402      	bmi.n	8011122 <_putc_r+0x5e>
 801111c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801111e:	f7ff fced 	bl	8010afc <__retarget_lock_release_recursive>
 8011122:	4628      	mov	r0, r5
 8011124:	bd70      	pop	{r4, r5, r6, pc}
 8011126:	4b09      	ldr	r3, [pc, #36]	; (801114c <_putc_r+0x88>)
 8011128:	429c      	cmp	r4, r3
 801112a:	d101      	bne.n	8011130 <_putc_r+0x6c>
 801112c:	68b4      	ldr	r4, [r6, #8]
 801112e:	e7d6      	b.n	80110de <_putc_r+0x1a>
 8011130:	4b07      	ldr	r3, [pc, #28]	; (8011150 <_putc_r+0x8c>)
 8011132:	429c      	cmp	r4, r3
 8011134:	bf08      	it	eq
 8011136:	68f4      	ldreq	r4, [r6, #12]
 8011138:	e7d1      	b.n	80110de <_putc_r+0x1a>
 801113a:	4629      	mov	r1, r5
 801113c:	4622      	mov	r2, r4
 801113e:	4630      	mov	r0, r6
 8011140:	f001 fc8c 	bl	8012a5c <__swbuf_r>
 8011144:	4605      	mov	r5, r0
 8011146:	e7e3      	b.n	8011110 <_putc_r+0x4c>
 8011148:	08019730 	.word	0x08019730
 801114c:	08019750 	.word	0x08019750
 8011150:	08019710 	.word	0x08019710

08011154 <_puts_r>:
 8011154:	b530      	push	{r4, r5, lr}
 8011156:	4605      	mov	r5, r0
 8011158:	b089      	sub	sp, #36	; 0x24
 801115a:	4608      	mov	r0, r1
 801115c:	460c      	mov	r4, r1
 801115e:	f7f5 fbe9 	bl	8006934 <strlen>
 8011162:	4b28      	ldr	r3, [pc, #160]	; (8011204 <_puts_r+0xb0>)
 8011164:	9306      	str	r3, [sp, #24]
 8011166:	2301      	movs	r3, #1
 8011168:	9005      	str	r0, [sp, #20]
 801116a:	9307      	str	r3, [sp, #28]
 801116c:	4418      	add	r0, r3
 801116e:	ab04      	add	r3, sp, #16
 8011170:	9301      	str	r3, [sp, #4]
 8011172:	2302      	movs	r3, #2
 8011174:	9404      	str	r4, [sp, #16]
 8011176:	9003      	str	r0, [sp, #12]
 8011178:	9302      	str	r3, [sp, #8]
 801117a:	b125      	cbz	r5, 8011186 <_puts_r+0x32>
 801117c:	69ab      	ldr	r3, [r5, #24]
 801117e:	b913      	cbnz	r3, 8011186 <_puts_r+0x32>
 8011180:	4628      	mov	r0, r5
 8011182:	f002 fd5d 	bl	8013c40 <__sinit>
 8011186:	69ab      	ldr	r3, [r5, #24]
 8011188:	68ac      	ldr	r4, [r5, #8]
 801118a:	b913      	cbnz	r3, 8011192 <_puts_r+0x3e>
 801118c:	4628      	mov	r0, r5
 801118e:	f002 fd57 	bl	8013c40 <__sinit>
 8011192:	4b1d      	ldr	r3, [pc, #116]	; (8011208 <_puts_r+0xb4>)
 8011194:	429c      	cmp	r4, r3
 8011196:	d12a      	bne.n	80111ee <_puts_r+0x9a>
 8011198:	686c      	ldr	r4, [r5, #4]
 801119a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801119c:	07db      	lsls	r3, r3, #31
 801119e:	d405      	bmi.n	80111ac <_puts_r+0x58>
 80111a0:	89a3      	ldrh	r3, [r4, #12]
 80111a2:	0598      	lsls	r0, r3, #22
 80111a4:	d402      	bmi.n	80111ac <_puts_r+0x58>
 80111a6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111a8:	f7ff fca6 	bl	8010af8 <__retarget_lock_acquire_recursive>
 80111ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111b0:	0499      	lsls	r1, r3, #18
 80111b2:	d406      	bmi.n	80111c2 <_puts_r+0x6e>
 80111b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80111b8:	81a3      	strh	r3, [r4, #12]
 80111ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80111bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80111c0:	6663      	str	r3, [r4, #100]	; 0x64
 80111c2:	4628      	mov	r0, r5
 80111c4:	aa01      	add	r2, sp, #4
 80111c6:	4621      	mov	r1, r4
 80111c8:	f7ff fab6 	bl	8010738 <__sfvwrite_r>
 80111cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80111ce:	2800      	cmp	r0, #0
 80111d0:	bf14      	ite	ne
 80111d2:	f04f 35ff 	movne.w	r5, #4294967295	; 0xffffffff
 80111d6:	250a      	moveq	r5, #10
 80111d8:	07da      	lsls	r2, r3, #31
 80111da:	d405      	bmi.n	80111e8 <_puts_r+0x94>
 80111dc:	89a3      	ldrh	r3, [r4, #12]
 80111de:	059b      	lsls	r3, r3, #22
 80111e0:	d402      	bmi.n	80111e8 <_puts_r+0x94>
 80111e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80111e4:	f7ff fc8a 	bl	8010afc <__retarget_lock_release_recursive>
 80111e8:	4628      	mov	r0, r5
 80111ea:	b009      	add	sp, #36	; 0x24
 80111ec:	bd30      	pop	{r4, r5, pc}
 80111ee:	4b07      	ldr	r3, [pc, #28]	; (801120c <_puts_r+0xb8>)
 80111f0:	429c      	cmp	r4, r3
 80111f2:	d101      	bne.n	80111f8 <_puts_r+0xa4>
 80111f4:	68ac      	ldr	r4, [r5, #8]
 80111f6:	e7d0      	b.n	801119a <_puts_r+0x46>
 80111f8:	4b05      	ldr	r3, [pc, #20]	; (8011210 <_puts_r+0xbc>)
 80111fa:	429c      	cmp	r4, r3
 80111fc:	bf08      	it	eq
 80111fe:	68ec      	ldreq	r4, [r5, #12]
 8011200:	e7cb      	b.n	801119a <_puts_r+0x46>
 8011202:	bf00      	nop
 8011204:	08019014 	.word	0x08019014
 8011208:	08019730 	.word	0x08019730
 801120c:	08019750 	.word	0x08019750
 8011210:	08019710 	.word	0x08019710

08011214 <puts>:
 8011214:	4b02      	ldr	r3, [pc, #8]	; (8011220 <puts+0xc>)
 8011216:	4601      	mov	r1, r0
 8011218:	6818      	ldr	r0, [r3, #0]
 801121a:	f7ff bf9b 	b.w	8011154 <_puts_r>
 801121e:	bf00      	nop
 8011220:	20000028 	.word	0x20000028

08011224 <realloc>:
 8011224:	4b02      	ldr	r3, [pc, #8]	; (8011230 <realloc+0xc>)
 8011226:	460a      	mov	r2, r1
 8011228:	4601      	mov	r1, r0
 801122a:	6818      	ldr	r0, [r3, #0]
 801122c:	f000 b802 	b.w	8011234 <_realloc_r>
 8011230:	20000028 	.word	0x20000028

08011234 <_realloc_r>:
 8011234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011238:	4682      	mov	sl, r0
 801123a:	460c      	mov	r4, r1
 801123c:	b929      	cbnz	r1, 801124a <_realloc_r+0x16>
 801123e:	4611      	mov	r1, r2
 8011240:	b003      	add	sp, #12
 8011242:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011246:	f7ff bcd5 	b.w	8010bf4 <_malloc_r>
 801124a:	9201      	str	r2, [sp, #4]
 801124c:	f7ff ff2e 	bl	80110ac <__malloc_lock>
 8011250:	9a01      	ldr	r2, [sp, #4]
 8011252:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8011256:	f102 080b 	add.w	r8, r2, #11
 801125a:	f1b8 0f16 	cmp.w	r8, #22
 801125e:	f1a4 0908 	sub.w	r9, r4, #8
 8011262:	f025 0603 	bic.w	r6, r5, #3
 8011266:	d90a      	bls.n	801127e <_realloc_r+0x4a>
 8011268:	f038 0807 	bics.w	r8, r8, #7
 801126c:	d509      	bpl.n	8011282 <_realloc_r+0x4e>
 801126e:	230c      	movs	r3, #12
 8011270:	f8ca 3000 	str.w	r3, [sl]
 8011274:	2700      	movs	r7, #0
 8011276:	4638      	mov	r0, r7
 8011278:	b003      	add	sp, #12
 801127a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801127e:	f04f 0810 	mov.w	r8, #16
 8011282:	4590      	cmp	r8, r2
 8011284:	d3f3      	bcc.n	801126e <_realloc_r+0x3a>
 8011286:	45b0      	cmp	r8, r6
 8011288:	f340 8145 	ble.w	8011516 <_realloc_r+0x2e2>
 801128c:	4ba8      	ldr	r3, [pc, #672]	; (8011530 <_realloc_r+0x2fc>)
 801128e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8011292:	eb09 0106 	add.w	r1, r9, r6
 8011296:	4571      	cmp	r1, lr
 8011298:	469b      	mov	fp, r3
 801129a:	684b      	ldr	r3, [r1, #4]
 801129c:	d005      	beq.n	80112aa <_realloc_r+0x76>
 801129e:	f023 0001 	bic.w	r0, r3, #1
 80112a2:	4408      	add	r0, r1
 80112a4:	6840      	ldr	r0, [r0, #4]
 80112a6:	07c7      	lsls	r7, r0, #31
 80112a8:	d447      	bmi.n	801133a <_realloc_r+0x106>
 80112aa:	f023 0303 	bic.w	r3, r3, #3
 80112ae:	4571      	cmp	r1, lr
 80112b0:	eb06 0703 	add.w	r7, r6, r3
 80112b4:	d119      	bne.n	80112ea <_realloc_r+0xb6>
 80112b6:	f108 0010 	add.w	r0, r8, #16
 80112ba:	4287      	cmp	r7, r0
 80112bc:	db3f      	blt.n	801133e <_realloc_r+0x10a>
 80112be:	eb09 0308 	add.w	r3, r9, r8
 80112c2:	eba7 0708 	sub.w	r7, r7, r8
 80112c6:	f047 0701 	orr.w	r7, r7, #1
 80112ca:	f8cb 3008 	str.w	r3, [fp, #8]
 80112ce:	605f      	str	r7, [r3, #4]
 80112d0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80112d4:	f003 0301 	and.w	r3, r3, #1
 80112d8:	ea43 0308 	orr.w	r3, r3, r8
 80112dc:	f844 3c04 	str.w	r3, [r4, #-4]
 80112e0:	4650      	mov	r0, sl
 80112e2:	f7ff fee9 	bl	80110b8 <__malloc_unlock>
 80112e6:	4627      	mov	r7, r4
 80112e8:	e7c5      	b.n	8011276 <_realloc_r+0x42>
 80112ea:	45b8      	cmp	r8, r7
 80112ec:	dc27      	bgt.n	801133e <_realloc_r+0x10a>
 80112ee:	68cb      	ldr	r3, [r1, #12]
 80112f0:	688a      	ldr	r2, [r1, #8]
 80112f2:	60d3      	str	r3, [r2, #12]
 80112f4:	609a      	str	r2, [r3, #8]
 80112f6:	eba7 0008 	sub.w	r0, r7, r8
 80112fa:	280f      	cmp	r0, #15
 80112fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011300:	eb09 0207 	add.w	r2, r9, r7
 8011304:	f240 8109 	bls.w	801151a <_realloc_r+0x2e6>
 8011308:	eb09 0108 	add.w	r1, r9, r8
 801130c:	f003 0301 	and.w	r3, r3, #1
 8011310:	ea43 0308 	orr.w	r3, r3, r8
 8011314:	f040 0001 	orr.w	r0, r0, #1
 8011318:	f8c9 3004 	str.w	r3, [r9, #4]
 801131c:	6048      	str	r0, [r1, #4]
 801131e:	6853      	ldr	r3, [r2, #4]
 8011320:	f043 0301 	orr.w	r3, r3, #1
 8011324:	6053      	str	r3, [r2, #4]
 8011326:	3108      	adds	r1, #8
 8011328:	4650      	mov	r0, sl
 801132a:	f002 fd5f 	bl	8013dec <_free_r>
 801132e:	4650      	mov	r0, sl
 8011330:	f7ff fec2 	bl	80110b8 <__malloc_unlock>
 8011334:	f109 0708 	add.w	r7, r9, #8
 8011338:	e79d      	b.n	8011276 <_realloc_r+0x42>
 801133a:	2300      	movs	r3, #0
 801133c:	4619      	mov	r1, r3
 801133e:	07e8      	lsls	r0, r5, #31
 8011340:	f100 8084 	bmi.w	801144c <_realloc_r+0x218>
 8011344:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8011348:	eba9 0505 	sub.w	r5, r9, r5
 801134c:	6868      	ldr	r0, [r5, #4]
 801134e:	f020 0003 	bic.w	r0, r0, #3
 8011352:	4430      	add	r0, r6
 8011354:	2900      	cmp	r1, #0
 8011356:	d076      	beq.n	8011446 <_realloc_r+0x212>
 8011358:	4571      	cmp	r1, lr
 801135a:	d150      	bne.n	80113fe <_realloc_r+0x1ca>
 801135c:	4403      	add	r3, r0
 801135e:	f108 0110 	add.w	r1, r8, #16
 8011362:	428b      	cmp	r3, r1
 8011364:	db6f      	blt.n	8011446 <_realloc_r+0x212>
 8011366:	462f      	mov	r7, r5
 8011368:	68ea      	ldr	r2, [r5, #12]
 801136a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 801136e:	60ca      	str	r2, [r1, #12]
 8011370:	6091      	str	r1, [r2, #8]
 8011372:	1f32      	subs	r2, r6, #4
 8011374:	2a24      	cmp	r2, #36	; 0x24
 8011376:	d83b      	bhi.n	80113f0 <_realloc_r+0x1bc>
 8011378:	2a13      	cmp	r2, #19
 801137a:	d936      	bls.n	80113ea <_realloc_r+0x1b6>
 801137c:	6821      	ldr	r1, [r4, #0]
 801137e:	60a9      	str	r1, [r5, #8]
 8011380:	6861      	ldr	r1, [r4, #4]
 8011382:	60e9      	str	r1, [r5, #12]
 8011384:	2a1b      	cmp	r2, #27
 8011386:	d81c      	bhi.n	80113c2 <_realloc_r+0x18e>
 8011388:	f105 0210 	add.w	r2, r5, #16
 801138c:	f104 0108 	add.w	r1, r4, #8
 8011390:	6808      	ldr	r0, [r1, #0]
 8011392:	6010      	str	r0, [r2, #0]
 8011394:	6848      	ldr	r0, [r1, #4]
 8011396:	6050      	str	r0, [r2, #4]
 8011398:	6889      	ldr	r1, [r1, #8]
 801139a:	6091      	str	r1, [r2, #8]
 801139c:	eb05 0208 	add.w	r2, r5, r8
 80113a0:	eba3 0308 	sub.w	r3, r3, r8
 80113a4:	f043 0301 	orr.w	r3, r3, #1
 80113a8:	f8cb 2008 	str.w	r2, [fp, #8]
 80113ac:	6053      	str	r3, [r2, #4]
 80113ae:	686b      	ldr	r3, [r5, #4]
 80113b0:	f003 0301 	and.w	r3, r3, #1
 80113b4:	ea43 0308 	orr.w	r3, r3, r8
 80113b8:	606b      	str	r3, [r5, #4]
 80113ba:	4650      	mov	r0, sl
 80113bc:	f7ff fe7c 	bl	80110b8 <__malloc_unlock>
 80113c0:	e759      	b.n	8011276 <_realloc_r+0x42>
 80113c2:	68a1      	ldr	r1, [r4, #8]
 80113c4:	6129      	str	r1, [r5, #16]
 80113c6:	68e1      	ldr	r1, [r4, #12]
 80113c8:	6169      	str	r1, [r5, #20]
 80113ca:	2a24      	cmp	r2, #36	; 0x24
 80113cc:	bf01      	itttt	eq
 80113ce:	6922      	ldreq	r2, [r4, #16]
 80113d0:	61aa      	streq	r2, [r5, #24]
 80113d2:	6960      	ldreq	r0, [r4, #20]
 80113d4:	61e8      	streq	r0, [r5, #28]
 80113d6:	bf19      	ittee	ne
 80113d8:	f105 0218 	addne.w	r2, r5, #24
 80113dc:	f104 0110 	addne.w	r1, r4, #16
 80113e0:	f105 0220 	addeq.w	r2, r5, #32
 80113e4:	f104 0118 	addeq.w	r1, r4, #24
 80113e8:	e7d2      	b.n	8011390 <_realloc_r+0x15c>
 80113ea:	463a      	mov	r2, r7
 80113ec:	4621      	mov	r1, r4
 80113ee:	e7cf      	b.n	8011390 <_realloc_r+0x15c>
 80113f0:	4621      	mov	r1, r4
 80113f2:	4638      	mov	r0, r7
 80113f4:	9301      	str	r3, [sp, #4]
 80113f6:	f7ff fe37 	bl	8011068 <memmove>
 80113fa:	9b01      	ldr	r3, [sp, #4]
 80113fc:	e7ce      	b.n	801139c <_realloc_r+0x168>
 80113fe:	18c7      	adds	r7, r0, r3
 8011400:	45b8      	cmp	r8, r7
 8011402:	dc20      	bgt.n	8011446 <_realloc_r+0x212>
 8011404:	68cb      	ldr	r3, [r1, #12]
 8011406:	688a      	ldr	r2, [r1, #8]
 8011408:	60d3      	str	r3, [r2, #12]
 801140a:	609a      	str	r2, [r3, #8]
 801140c:	4628      	mov	r0, r5
 801140e:	68eb      	ldr	r3, [r5, #12]
 8011410:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8011414:	60d3      	str	r3, [r2, #12]
 8011416:	609a      	str	r2, [r3, #8]
 8011418:	1f32      	subs	r2, r6, #4
 801141a:	2a24      	cmp	r2, #36	; 0x24
 801141c:	d842      	bhi.n	80114a4 <_realloc_r+0x270>
 801141e:	2a13      	cmp	r2, #19
 8011420:	d93e      	bls.n	80114a0 <_realloc_r+0x26c>
 8011422:	6823      	ldr	r3, [r4, #0]
 8011424:	60ab      	str	r3, [r5, #8]
 8011426:	6863      	ldr	r3, [r4, #4]
 8011428:	60eb      	str	r3, [r5, #12]
 801142a:	2a1b      	cmp	r2, #27
 801142c:	d824      	bhi.n	8011478 <_realloc_r+0x244>
 801142e:	f105 0010 	add.w	r0, r5, #16
 8011432:	f104 0308 	add.w	r3, r4, #8
 8011436:	681a      	ldr	r2, [r3, #0]
 8011438:	6002      	str	r2, [r0, #0]
 801143a:	685a      	ldr	r2, [r3, #4]
 801143c:	6042      	str	r2, [r0, #4]
 801143e:	689b      	ldr	r3, [r3, #8]
 8011440:	6083      	str	r3, [r0, #8]
 8011442:	46a9      	mov	r9, r5
 8011444:	e757      	b.n	80112f6 <_realloc_r+0xc2>
 8011446:	4580      	cmp	r8, r0
 8011448:	4607      	mov	r7, r0
 801144a:	dddf      	ble.n	801140c <_realloc_r+0x1d8>
 801144c:	4611      	mov	r1, r2
 801144e:	4650      	mov	r0, sl
 8011450:	f7ff fbd0 	bl	8010bf4 <_malloc_r>
 8011454:	4607      	mov	r7, r0
 8011456:	2800      	cmp	r0, #0
 8011458:	d0af      	beq.n	80113ba <_realloc_r+0x186>
 801145a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801145e:	f023 0301 	bic.w	r3, r3, #1
 8011462:	f1a0 0208 	sub.w	r2, r0, #8
 8011466:	444b      	add	r3, r9
 8011468:	429a      	cmp	r2, r3
 801146a:	d11f      	bne.n	80114ac <_realloc_r+0x278>
 801146c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8011470:	f027 0703 	bic.w	r7, r7, #3
 8011474:	4437      	add	r7, r6
 8011476:	e73e      	b.n	80112f6 <_realloc_r+0xc2>
 8011478:	68a3      	ldr	r3, [r4, #8]
 801147a:	612b      	str	r3, [r5, #16]
 801147c:	68e3      	ldr	r3, [r4, #12]
 801147e:	616b      	str	r3, [r5, #20]
 8011480:	2a24      	cmp	r2, #36	; 0x24
 8011482:	bf01      	itttt	eq
 8011484:	6923      	ldreq	r3, [r4, #16]
 8011486:	61ab      	streq	r3, [r5, #24]
 8011488:	6962      	ldreq	r2, [r4, #20]
 801148a:	61ea      	streq	r2, [r5, #28]
 801148c:	bf19      	ittee	ne
 801148e:	f105 0018 	addne.w	r0, r5, #24
 8011492:	f104 0310 	addne.w	r3, r4, #16
 8011496:	f105 0020 	addeq.w	r0, r5, #32
 801149a:	f104 0318 	addeq.w	r3, r4, #24
 801149e:	e7ca      	b.n	8011436 <_realloc_r+0x202>
 80114a0:	4623      	mov	r3, r4
 80114a2:	e7c8      	b.n	8011436 <_realloc_r+0x202>
 80114a4:	4621      	mov	r1, r4
 80114a6:	f7ff fddf 	bl	8011068 <memmove>
 80114aa:	e7ca      	b.n	8011442 <_realloc_r+0x20e>
 80114ac:	1f32      	subs	r2, r6, #4
 80114ae:	2a24      	cmp	r2, #36	; 0x24
 80114b0:	d82d      	bhi.n	801150e <_realloc_r+0x2da>
 80114b2:	2a13      	cmp	r2, #19
 80114b4:	d928      	bls.n	8011508 <_realloc_r+0x2d4>
 80114b6:	6823      	ldr	r3, [r4, #0]
 80114b8:	6003      	str	r3, [r0, #0]
 80114ba:	6863      	ldr	r3, [r4, #4]
 80114bc:	6043      	str	r3, [r0, #4]
 80114be:	2a1b      	cmp	r2, #27
 80114c0:	d80e      	bhi.n	80114e0 <_realloc_r+0x2ac>
 80114c2:	f100 0308 	add.w	r3, r0, #8
 80114c6:	f104 0208 	add.w	r2, r4, #8
 80114ca:	6811      	ldr	r1, [r2, #0]
 80114cc:	6019      	str	r1, [r3, #0]
 80114ce:	6851      	ldr	r1, [r2, #4]
 80114d0:	6059      	str	r1, [r3, #4]
 80114d2:	6892      	ldr	r2, [r2, #8]
 80114d4:	609a      	str	r2, [r3, #8]
 80114d6:	4621      	mov	r1, r4
 80114d8:	4650      	mov	r0, sl
 80114da:	f002 fc87 	bl	8013dec <_free_r>
 80114de:	e76c      	b.n	80113ba <_realloc_r+0x186>
 80114e0:	68a3      	ldr	r3, [r4, #8]
 80114e2:	6083      	str	r3, [r0, #8]
 80114e4:	68e3      	ldr	r3, [r4, #12]
 80114e6:	60c3      	str	r3, [r0, #12]
 80114e8:	2a24      	cmp	r2, #36	; 0x24
 80114ea:	bf01      	itttt	eq
 80114ec:	6923      	ldreq	r3, [r4, #16]
 80114ee:	6103      	streq	r3, [r0, #16]
 80114f0:	6961      	ldreq	r1, [r4, #20]
 80114f2:	6141      	streq	r1, [r0, #20]
 80114f4:	bf19      	ittee	ne
 80114f6:	f100 0310 	addne.w	r3, r0, #16
 80114fa:	f104 0210 	addne.w	r2, r4, #16
 80114fe:	f100 0318 	addeq.w	r3, r0, #24
 8011502:	f104 0218 	addeq.w	r2, r4, #24
 8011506:	e7e0      	b.n	80114ca <_realloc_r+0x296>
 8011508:	4603      	mov	r3, r0
 801150a:	4622      	mov	r2, r4
 801150c:	e7dd      	b.n	80114ca <_realloc_r+0x296>
 801150e:	4621      	mov	r1, r4
 8011510:	f7ff fdaa 	bl	8011068 <memmove>
 8011514:	e7df      	b.n	80114d6 <_realloc_r+0x2a2>
 8011516:	4637      	mov	r7, r6
 8011518:	e6ed      	b.n	80112f6 <_realloc_r+0xc2>
 801151a:	f003 0301 	and.w	r3, r3, #1
 801151e:	431f      	orrs	r7, r3
 8011520:	f8c9 7004 	str.w	r7, [r9, #4]
 8011524:	6853      	ldr	r3, [r2, #4]
 8011526:	f043 0301 	orr.w	r3, r3, #1
 801152a:	6053      	str	r3, [r2, #4]
 801152c:	e6ff      	b.n	801132e <_realloc_r+0xfa>
 801152e:	bf00      	nop
 8011530:	20000288 	.word	0x20000288

08011534 <_sbrk_r>:
 8011534:	b538      	push	{r3, r4, r5, lr}
 8011536:	4c06      	ldr	r4, [pc, #24]	; (8011550 <_sbrk_r+0x1c>)
 8011538:	2300      	movs	r3, #0
 801153a:	4605      	mov	r5, r0
 801153c:	4608      	mov	r0, r1
 801153e:	6023      	str	r3, [r4, #0]
 8011540:	f003 f98c 	bl	801485c <_sbrk>
 8011544:	1c43      	adds	r3, r0, #1
 8011546:	d102      	bne.n	801154e <_sbrk_r+0x1a>
 8011548:	6823      	ldr	r3, [r4, #0]
 801154a:	b103      	cbz	r3, 801154e <_sbrk_r+0x1a>
 801154c:	602b      	str	r3, [r5, #0]
 801154e:	bd38      	pop	{r3, r4, r5, pc}
 8011550:	2000ce8c 	.word	0x2000ce8c

08011554 <_raise_r>:
 8011554:	291f      	cmp	r1, #31
 8011556:	b538      	push	{r3, r4, r5, lr}
 8011558:	4604      	mov	r4, r0
 801155a:	460d      	mov	r5, r1
 801155c:	d904      	bls.n	8011568 <_raise_r+0x14>
 801155e:	2316      	movs	r3, #22
 8011560:	6003      	str	r3, [r0, #0]
 8011562:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011566:	bd38      	pop	{r3, r4, r5, pc}
 8011568:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801156a:	b112      	cbz	r2, 8011572 <_raise_r+0x1e>
 801156c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011570:	b94b      	cbnz	r3, 8011586 <_raise_r+0x32>
 8011572:	4620      	mov	r0, r4
 8011574:	f000 f830 	bl	80115d8 <_getpid_r>
 8011578:	462a      	mov	r2, r5
 801157a:	4601      	mov	r1, r0
 801157c:	4620      	mov	r0, r4
 801157e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011582:	f000 b817 	b.w	80115b4 <_kill_r>
 8011586:	2b01      	cmp	r3, #1
 8011588:	d00a      	beq.n	80115a0 <_raise_r+0x4c>
 801158a:	1c59      	adds	r1, r3, #1
 801158c:	d103      	bne.n	8011596 <_raise_r+0x42>
 801158e:	2316      	movs	r3, #22
 8011590:	6003      	str	r3, [r0, #0]
 8011592:	2001      	movs	r0, #1
 8011594:	bd38      	pop	{r3, r4, r5, pc}
 8011596:	2400      	movs	r4, #0
 8011598:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801159c:	4628      	mov	r0, r5
 801159e:	4798      	blx	r3
 80115a0:	2000      	movs	r0, #0
 80115a2:	bd38      	pop	{r3, r4, r5, pc}

080115a4 <raise>:
 80115a4:	4b02      	ldr	r3, [pc, #8]	; (80115b0 <raise+0xc>)
 80115a6:	4601      	mov	r1, r0
 80115a8:	6818      	ldr	r0, [r3, #0]
 80115aa:	f7ff bfd3 	b.w	8011554 <_raise_r>
 80115ae:	bf00      	nop
 80115b0:	20000028 	.word	0x20000028

080115b4 <_kill_r>:
 80115b4:	b538      	push	{r3, r4, r5, lr}
 80115b6:	4c07      	ldr	r4, [pc, #28]	; (80115d4 <_kill_r+0x20>)
 80115b8:	2300      	movs	r3, #0
 80115ba:	4605      	mov	r5, r0
 80115bc:	4608      	mov	r0, r1
 80115be:	4611      	mov	r1, r2
 80115c0:	6023      	str	r3, [r4, #0]
 80115c2:	f003 f933 	bl	801482c <_kill>
 80115c6:	1c43      	adds	r3, r0, #1
 80115c8:	d102      	bne.n	80115d0 <_kill_r+0x1c>
 80115ca:	6823      	ldr	r3, [r4, #0]
 80115cc:	b103      	cbz	r3, 80115d0 <_kill_r+0x1c>
 80115ce:	602b      	str	r3, [r5, #0]
 80115d0:	bd38      	pop	{r3, r4, r5, pc}
 80115d2:	bf00      	nop
 80115d4:	2000ce8c 	.word	0x2000ce8c

080115d8 <_getpid_r>:
 80115d8:	f003 b918 	b.w	801480c <_getpid>

080115dc <sprintf>:
 80115dc:	b40e      	push	{r1, r2, r3}
 80115de:	b500      	push	{lr}
 80115e0:	b09c      	sub	sp, #112	; 0x70
 80115e2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80115e6:	ab1d      	add	r3, sp, #116	; 0x74
 80115e8:	f8ad 1014 	strh.w	r1, [sp, #20]
 80115ec:	9002      	str	r0, [sp, #8]
 80115ee:	9006      	str	r0, [sp, #24]
 80115f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80115f4:	480a      	ldr	r0, [pc, #40]	; (8011620 <sprintf+0x44>)
 80115f6:	9104      	str	r1, [sp, #16]
 80115f8:	9107      	str	r1, [sp, #28]
 80115fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80115fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8011602:	f8ad 1016 	strh.w	r1, [sp, #22]
 8011606:	6800      	ldr	r0, [r0, #0]
 8011608:	9301      	str	r3, [sp, #4]
 801160a:	a902      	add	r1, sp, #8
 801160c:	f000 fa50 	bl	8011ab0 <_svfprintf_r>
 8011610:	9b02      	ldr	r3, [sp, #8]
 8011612:	2200      	movs	r2, #0
 8011614:	701a      	strb	r2, [r3, #0]
 8011616:	b01c      	add	sp, #112	; 0x70
 8011618:	f85d eb04 	ldr.w	lr, [sp], #4
 801161c:	b003      	add	sp, #12
 801161e:	4770      	bx	lr
 8011620:	20000028 	.word	0x20000028

08011624 <__sread>:
 8011624:	b510      	push	{r4, lr}
 8011626:	460c      	mov	r4, r1
 8011628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801162c:	f002 ffb8 	bl	80145a0 <_read_r>
 8011630:	2800      	cmp	r0, #0
 8011632:	bfab      	itete	ge
 8011634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011636:	89a3      	ldrhlt	r3, [r4, #12]
 8011638:	181b      	addge	r3, r3, r0
 801163a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801163e:	bfac      	ite	ge
 8011640:	6563      	strge	r3, [r4, #84]	; 0x54
 8011642:	81a3      	strhlt	r3, [r4, #12]
 8011644:	bd10      	pop	{r4, pc}

08011646 <__swrite>:
 8011646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801164a:	461f      	mov	r7, r3
 801164c:	898b      	ldrh	r3, [r1, #12]
 801164e:	05db      	lsls	r3, r3, #23
 8011650:	4605      	mov	r5, r0
 8011652:	460c      	mov	r4, r1
 8011654:	4616      	mov	r6, r2
 8011656:	d505      	bpl.n	8011664 <__swrite+0x1e>
 8011658:	2302      	movs	r3, #2
 801165a:	2200      	movs	r2, #0
 801165c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011660:	f002 fcbc 	bl	8013fdc <_lseek_r>
 8011664:	89a3      	ldrh	r3, [r4, #12]
 8011666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801166a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801166e:	81a3      	strh	r3, [r4, #12]
 8011670:	4632      	mov	r2, r6
 8011672:	463b      	mov	r3, r7
 8011674:	4628      	mov	r0, r5
 8011676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801167a:	f001 ba5b 	b.w	8012b34 <_write_r>

0801167e <__sseek>:
 801167e:	b510      	push	{r4, lr}
 8011680:	460c      	mov	r4, r1
 8011682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011686:	f002 fca9 	bl	8013fdc <_lseek_r>
 801168a:	1c43      	adds	r3, r0, #1
 801168c:	89a3      	ldrh	r3, [r4, #12]
 801168e:	bf15      	itete	ne
 8011690:	6560      	strne	r0, [r4, #84]	; 0x54
 8011692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801169a:	81a3      	strheq	r3, [r4, #12]
 801169c:	bf18      	it	ne
 801169e:	81a3      	strhne	r3, [r4, #12]
 80116a0:	bd10      	pop	{r4, pc}

080116a2 <__sclose>:
 80116a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80116a6:	f001 bb3b 	b.w	8012d20 <_close_r>
	...

080116ac <_strerror_r>:
 80116ac:	b510      	push	{r4, lr}
 80116ae:	4604      	mov	r4, r0
 80116b0:	4608      	mov	r0, r1
 80116b2:	4611      	mov	r1, r2
 80116b4:	288e      	cmp	r0, #142	; 0x8e
 80116b6:	f200 812f 	bhi.w	8011918 <_strerror_r+0x26c>
 80116ba:	e8df f010 	tbh	[pc, r0, lsl #1]
 80116be:	0138      	.short	0x0138
 80116c0:	0091008f 	.word	0x0091008f
 80116c4:	00950093 	.word	0x00950093
 80116c8:	00990097 	.word	0x00990097
 80116cc:	009d009b 	.word	0x009d009b
 80116d0:	00a300a1 	.word	0x00a300a1
 80116d4:	00a900a7 	.word	0x00a900a7
 80116d8:	00ad00ab 	.word	0x00ad00ab
 80116dc:	00af012d 	.word	0x00af012d
 80116e0:	00b300b1 	.word	0x00b300b1
 80116e4:	00b700b5 	.word	0x00b700b5
 80116e8:	00bf00bd 	.word	0x00bf00bd
 80116ec:	00c700c5 	.word	0x00c700c5
 80116f0:	00cb00c9 	.word	0x00cb00c9
 80116f4:	00d100cd 	.word	0x00d100cd
 80116f8:	00d700d5 	.word	0x00d700d5
 80116fc:	00db00d9 	.word	0x00db00d9
 8011700:	00df00dd 	.word	0x00df00dd
 8011704:	00e300e1 	.word	0x00e300e1
 8011708:	012d012d 	.word	0x012d012d
 801170c:	012d012d 	.word	0x012d012d
 8011710:	012d012d 	.word	0x012d012d
 8011714:	012d012d 	.word	0x012d012d
 8011718:	00eb00e7 	.word	0x00eb00e7
 801171c:	012d012d 	.word	0x012d012d
 8011720:	012d012d 	.word	0x012d012d
 8011724:	012d012d 	.word	0x012d012d
 8011728:	012d012d 	.word	0x012d012d
 801172c:	012d012d 	.word	0x012d012d
 8011730:	012d012d 	.word	0x012d012d
 8011734:	00ed012d 	.word	0x00ed012d
 8011738:	00ef0107 	.word	0x00ef0107
 801173c:	012d00f1 	.word	0x012d00f1
 8011740:	012d012d 	.word	0x012d012d
 8011744:	012d00f3 	.word	0x012d00f3
 8011748:	012d012d 	.word	0x012d012d
 801174c:	012d00f5 	.word	0x012d00f5
 8011750:	00f9012d 	.word	0x00f9012d
 8011754:	012d012d 	.word	0x012d012d
 8011758:	012d00fb 	.word	0x012d00fb
 801175c:	012d012d 	.word	0x012d012d
 8011760:	012d012d 	.word	0x012d012d
 8011764:	012d012d 	.word	0x012d012d
 8011768:	012d012d 	.word	0x012d012d
 801176c:	00fd012d 	.word	0x00fd012d
 8011770:	00ff012d 	.word	0x00ff012d
 8011774:	01030101 	.word	0x01030101
 8011778:	012d012d 	.word	0x012d012d
 801177c:	012d0125 	.word	0x012d0125
 8011780:	012d012d 	.word	0x012d012d
 8011784:	012d012d 	.word	0x012d012d
 8011788:	012d012d 	.word	0x012d012d
 801178c:	0113012d 	.word	0x0113012d
 8011790:	01090105 	.word	0x01090105
 8011794:	010d010b 	.word	0x010d010b
 8011798:	012d010f 	.word	0x012d010f
 801179c:	01150111 	.word	0x01150111
 80117a0:	00e90119 	.word	0x00e90119
 80117a4:	012b00c1 	.word	0x012b00c1
 80117a8:	00cf00b9 	.word	0x00cf00b9
 80117ac:	009f00bb 	.word	0x009f00bb
 80117b0:	012900a5 	.word	0x012900a5
 80117b4:	012d00f7 	.word	0x012d00f7
 80117b8:	00c30117 	.word	0x00c30117
 80117bc:	011b011d 	.word	0x011b011d
 80117c0:	012d012d 	.word	0x012d012d
 80117c4:	012d012d 	.word	0x012d012d
 80117c8:	00d3012d 	.word	0x00d3012d
 80117cc:	012d012d 	.word	0x012d012d
 80117d0:	00e5012d 	.word	0x00e5012d
 80117d4:	011f0127 	.word	0x011f0127
 80117d8:	01230121 	.word	0x01230121
 80117dc:	4855      	ldr	r0, [pc, #340]	; (8011934 <_strerror_r+0x288>)
 80117de:	bd10      	pop	{r4, pc}
 80117e0:	4855      	ldr	r0, [pc, #340]	; (8011938 <_strerror_r+0x28c>)
 80117e2:	bd10      	pop	{r4, pc}
 80117e4:	4855      	ldr	r0, [pc, #340]	; (801193c <_strerror_r+0x290>)
 80117e6:	bd10      	pop	{r4, pc}
 80117e8:	4855      	ldr	r0, [pc, #340]	; (8011940 <_strerror_r+0x294>)
 80117ea:	bd10      	pop	{r4, pc}
 80117ec:	4855      	ldr	r0, [pc, #340]	; (8011944 <_strerror_r+0x298>)
 80117ee:	bd10      	pop	{r4, pc}
 80117f0:	4855      	ldr	r0, [pc, #340]	; (8011948 <_strerror_r+0x29c>)
 80117f2:	bd10      	pop	{r4, pc}
 80117f4:	4855      	ldr	r0, [pc, #340]	; (801194c <_strerror_r+0x2a0>)
 80117f6:	bd10      	pop	{r4, pc}
 80117f8:	4855      	ldr	r0, [pc, #340]	; (8011950 <_strerror_r+0x2a4>)
 80117fa:	bd10      	pop	{r4, pc}
 80117fc:	4855      	ldr	r0, [pc, #340]	; (8011954 <_strerror_r+0x2a8>)
 80117fe:	bd10      	pop	{r4, pc}
 8011800:	4855      	ldr	r0, [pc, #340]	; (8011958 <_strerror_r+0x2ac>)
 8011802:	bd10      	pop	{r4, pc}
 8011804:	4855      	ldr	r0, [pc, #340]	; (801195c <_strerror_r+0x2b0>)
 8011806:	bd10      	pop	{r4, pc}
 8011808:	4855      	ldr	r0, [pc, #340]	; (8011960 <_strerror_r+0x2b4>)
 801180a:	bd10      	pop	{r4, pc}
 801180c:	4855      	ldr	r0, [pc, #340]	; (8011964 <_strerror_r+0x2b8>)
 801180e:	bd10      	pop	{r4, pc}
 8011810:	4855      	ldr	r0, [pc, #340]	; (8011968 <_strerror_r+0x2bc>)
 8011812:	bd10      	pop	{r4, pc}
 8011814:	4855      	ldr	r0, [pc, #340]	; (801196c <_strerror_r+0x2c0>)
 8011816:	bd10      	pop	{r4, pc}
 8011818:	4855      	ldr	r0, [pc, #340]	; (8011970 <_strerror_r+0x2c4>)
 801181a:	bd10      	pop	{r4, pc}
 801181c:	4855      	ldr	r0, [pc, #340]	; (8011974 <_strerror_r+0x2c8>)
 801181e:	bd10      	pop	{r4, pc}
 8011820:	4855      	ldr	r0, [pc, #340]	; (8011978 <_strerror_r+0x2cc>)
 8011822:	bd10      	pop	{r4, pc}
 8011824:	4855      	ldr	r0, [pc, #340]	; (801197c <_strerror_r+0x2d0>)
 8011826:	bd10      	pop	{r4, pc}
 8011828:	4855      	ldr	r0, [pc, #340]	; (8011980 <_strerror_r+0x2d4>)
 801182a:	bd10      	pop	{r4, pc}
 801182c:	4855      	ldr	r0, [pc, #340]	; (8011984 <_strerror_r+0x2d8>)
 801182e:	bd10      	pop	{r4, pc}
 8011830:	4855      	ldr	r0, [pc, #340]	; (8011988 <_strerror_r+0x2dc>)
 8011832:	bd10      	pop	{r4, pc}
 8011834:	4855      	ldr	r0, [pc, #340]	; (801198c <_strerror_r+0x2e0>)
 8011836:	bd10      	pop	{r4, pc}
 8011838:	4855      	ldr	r0, [pc, #340]	; (8011990 <_strerror_r+0x2e4>)
 801183a:	bd10      	pop	{r4, pc}
 801183c:	4855      	ldr	r0, [pc, #340]	; (8011994 <_strerror_r+0x2e8>)
 801183e:	bd10      	pop	{r4, pc}
 8011840:	4855      	ldr	r0, [pc, #340]	; (8011998 <_strerror_r+0x2ec>)
 8011842:	bd10      	pop	{r4, pc}
 8011844:	4855      	ldr	r0, [pc, #340]	; (801199c <_strerror_r+0x2f0>)
 8011846:	bd10      	pop	{r4, pc}
 8011848:	4855      	ldr	r0, [pc, #340]	; (80119a0 <_strerror_r+0x2f4>)
 801184a:	bd10      	pop	{r4, pc}
 801184c:	4855      	ldr	r0, [pc, #340]	; (80119a4 <_strerror_r+0x2f8>)
 801184e:	bd10      	pop	{r4, pc}
 8011850:	4855      	ldr	r0, [pc, #340]	; (80119a8 <_strerror_r+0x2fc>)
 8011852:	bd10      	pop	{r4, pc}
 8011854:	4855      	ldr	r0, [pc, #340]	; (80119ac <_strerror_r+0x300>)
 8011856:	bd10      	pop	{r4, pc}
 8011858:	4855      	ldr	r0, [pc, #340]	; (80119b0 <_strerror_r+0x304>)
 801185a:	bd10      	pop	{r4, pc}
 801185c:	4855      	ldr	r0, [pc, #340]	; (80119b4 <_strerror_r+0x308>)
 801185e:	bd10      	pop	{r4, pc}
 8011860:	4855      	ldr	r0, [pc, #340]	; (80119b8 <_strerror_r+0x30c>)
 8011862:	bd10      	pop	{r4, pc}
 8011864:	4855      	ldr	r0, [pc, #340]	; (80119bc <_strerror_r+0x310>)
 8011866:	bd10      	pop	{r4, pc}
 8011868:	4855      	ldr	r0, [pc, #340]	; (80119c0 <_strerror_r+0x314>)
 801186a:	bd10      	pop	{r4, pc}
 801186c:	4855      	ldr	r0, [pc, #340]	; (80119c4 <_strerror_r+0x318>)
 801186e:	bd10      	pop	{r4, pc}
 8011870:	4855      	ldr	r0, [pc, #340]	; (80119c8 <_strerror_r+0x31c>)
 8011872:	bd10      	pop	{r4, pc}
 8011874:	4855      	ldr	r0, [pc, #340]	; (80119cc <_strerror_r+0x320>)
 8011876:	bd10      	pop	{r4, pc}
 8011878:	4855      	ldr	r0, [pc, #340]	; (80119d0 <_strerror_r+0x324>)
 801187a:	bd10      	pop	{r4, pc}
 801187c:	4855      	ldr	r0, [pc, #340]	; (80119d4 <_strerror_r+0x328>)
 801187e:	bd10      	pop	{r4, pc}
 8011880:	4855      	ldr	r0, [pc, #340]	; (80119d8 <_strerror_r+0x32c>)
 8011882:	bd10      	pop	{r4, pc}
 8011884:	4855      	ldr	r0, [pc, #340]	; (80119dc <_strerror_r+0x330>)
 8011886:	bd10      	pop	{r4, pc}
 8011888:	4855      	ldr	r0, [pc, #340]	; (80119e0 <_strerror_r+0x334>)
 801188a:	bd10      	pop	{r4, pc}
 801188c:	4855      	ldr	r0, [pc, #340]	; (80119e4 <_strerror_r+0x338>)
 801188e:	bd10      	pop	{r4, pc}
 8011890:	4855      	ldr	r0, [pc, #340]	; (80119e8 <_strerror_r+0x33c>)
 8011892:	bd10      	pop	{r4, pc}
 8011894:	4855      	ldr	r0, [pc, #340]	; (80119ec <_strerror_r+0x340>)
 8011896:	bd10      	pop	{r4, pc}
 8011898:	4855      	ldr	r0, [pc, #340]	; (80119f0 <_strerror_r+0x344>)
 801189a:	bd10      	pop	{r4, pc}
 801189c:	4855      	ldr	r0, [pc, #340]	; (80119f4 <_strerror_r+0x348>)
 801189e:	bd10      	pop	{r4, pc}
 80118a0:	4855      	ldr	r0, [pc, #340]	; (80119f8 <_strerror_r+0x34c>)
 80118a2:	bd10      	pop	{r4, pc}
 80118a4:	4855      	ldr	r0, [pc, #340]	; (80119fc <_strerror_r+0x350>)
 80118a6:	bd10      	pop	{r4, pc}
 80118a8:	4855      	ldr	r0, [pc, #340]	; (8011a00 <_strerror_r+0x354>)
 80118aa:	bd10      	pop	{r4, pc}
 80118ac:	4855      	ldr	r0, [pc, #340]	; (8011a04 <_strerror_r+0x358>)
 80118ae:	bd10      	pop	{r4, pc}
 80118b0:	4855      	ldr	r0, [pc, #340]	; (8011a08 <_strerror_r+0x35c>)
 80118b2:	bd10      	pop	{r4, pc}
 80118b4:	4855      	ldr	r0, [pc, #340]	; (8011a0c <_strerror_r+0x360>)
 80118b6:	bd10      	pop	{r4, pc}
 80118b8:	4855      	ldr	r0, [pc, #340]	; (8011a10 <_strerror_r+0x364>)
 80118ba:	bd10      	pop	{r4, pc}
 80118bc:	4855      	ldr	r0, [pc, #340]	; (8011a14 <_strerror_r+0x368>)
 80118be:	bd10      	pop	{r4, pc}
 80118c0:	4855      	ldr	r0, [pc, #340]	; (8011a18 <_strerror_r+0x36c>)
 80118c2:	bd10      	pop	{r4, pc}
 80118c4:	4855      	ldr	r0, [pc, #340]	; (8011a1c <_strerror_r+0x370>)
 80118c6:	bd10      	pop	{r4, pc}
 80118c8:	4855      	ldr	r0, [pc, #340]	; (8011a20 <_strerror_r+0x374>)
 80118ca:	bd10      	pop	{r4, pc}
 80118cc:	4855      	ldr	r0, [pc, #340]	; (8011a24 <_strerror_r+0x378>)
 80118ce:	bd10      	pop	{r4, pc}
 80118d0:	4855      	ldr	r0, [pc, #340]	; (8011a28 <_strerror_r+0x37c>)
 80118d2:	bd10      	pop	{r4, pc}
 80118d4:	4855      	ldr	r0, [pc, #340]	; (8011a2c <_strerror_r+0x380>)
 80118d6:	bd10      	pop	{r4, pc}
 80118d8:	4855      	ldr	r0, [pc, #340]	; (8011a30 <_strerror_r+0x384>)
 80118da:	bd10      	pop	{r4, pc}
 80118dc:	4855      	ldr	r0, [pc, #340]	; (8011a34 <_strerror_r+0x388>)
 80118de:	bd10      	pop	{r4, pc}
 80118e0:	4855      	ldr	r0, [pc, #340]	; (8011a38 <_strerror_r+0x38c>)
 80118e2:	bd10      	pop	{r4, pc}
 80118e4:	4855      	ldr	r0, [pc, #340]	; (8011a3c <_strerror_r+0x390>)
 80118e6:	bd10      	pop	{r4, pc}
 80118e8:	4855      	ldr	r0, [pc, #340]	; (8011a40 <_strerror_r+0x394>)
 80118ea:	bd10      	pop	{r4, pc}
 80118ec:	4855      	ldr	r0, [pc, #340]	; (8011a44 <_strerror_r+0x398>)
 80118ee:	bd10      	pop	{r4, pc}
 80118f0:	4855      	ldr	r0, [pc, #340]	; (8011a48 <_strerror_r+0x39c>)
 80118f2:	bd10      	pop	{r4, pc}
 80118f4:	4855      	ldr	r0, [pc, #340]	; (8011a4c <_strerror_r+0x3a0>)
 80118f6:	bd10      	pop	{r4, pc}
 80118f8:	4855      	ldr	r0, [pc, #340]	; (8011a50 <_strerror_r+0x3a4>)
 80118fa:	bd10      	pop	{r4, pc}
 80118fc:	4855      	ldr	r0, [pc, #340]	; (8011a54 <_strerror_r+0x3a8>)
 80118fe:	bd10      	pop	{r4, pc}
 8011900:	4855      	ldr	r0, [pc, #340]	; (8011a58 <_strerror_r+0x3ac>)
 8011902:	bd10      	pop	{r4, pc}
 8011904:	4855      	ldr	r0, [pc, #340]	; (8011a5c <_strerror_r+0x3b0>)
 8011906:	bd10      	pop	{r4, pc}
 8011908:	4855      	ldr	r0, [pc, #340]	; (8011a60 <_strerror_r+0x3b4>)
 801190a:	bd10      	pop	{r4, pc}
 801190c:	4855      	ldr	r0, [pc, #340]	; (8011a64 <_strerror_r+0x3b8>)
 801190e:	bd10      	pop	{r4, pc}
 8011910:	4855      	ldr	r0, [pc, #340]	; (8011a68 <_strerror_r+0x3bc>)
 8011912:	bd10      	pop	{r4, pc}
 8011914:	4855      	ldr	r0, [pc, #340]	; (8011a6c <_strerror_r+0x3c0>)
 8011916:	bd10      	pop	{r4, pc}
 8011918:	2b00      	cmp	r3, #0
 801191a:	bf14      	ite	ne
 801191c:	461a      	movne	r2, r3
 801191e:	4622      	moveq	r2, r4
 8011920:	f001 f89a 	bl	8012a58 <_user_strerror>
 8011924:	4b52      	ldr	r3, [pc, #328]	; (8011a70 <_strerror_r+0x3c4>)
 8011926:	2800      	cmp	r0, #0
 8011928:	bf08      	it	eq
 801192a:	4618      	moveq	r0, r3
 801192c:	bd10      	pop	{r4, pc}
 801192e:	4851      	ldr	r0, [pc, #324]	; (8011a74 <_strerror_r+0x3c8>)
 8011930:	bd10      	pop	{r4, pc}
 8011932:	bf00      	nop
 8011934:	0801901e 	.word	0x0801901e
 8011938:	08019028 	.word	0x08019028
 801193c:	08019042 	.word	0x08019042
 8011940:	08019052 	.word	0x08019052
 8011944:	0801906a 	.word	0x0801906a
 8011948:	08019074 	.word	0x08019074
 801194c:	0801908e 	.word	0x0801908e
 8011950:	080190a0 	.word	0x080190a0
 8011954:	080190b2 	.word	0x080190b2
 8011958:	080190cb 	.word	0x080190cb
 801195c:	080190db 	.word	0x080190db
 8011960:	080190e7 	.word	0x080190e7
 8011964:	08019104 	.word	0x08019104
 8011968:	08019116 	.word	0x08019116
 801196c:	08019127 	.word	0x08019127
 8011970:	08019139 	.word	0x08019139
 8011974:	08019145 	.word	0x08019145
 8011978:	0801915d 	.word	0x0801915d
 801197c:	08019169 	.word	0x08019169
 8011980:	0801917b 	.word	0x0801917b
 8011984:	0801918a 	.word	0x0801918a
 8011988:	0801919a 	.word	0x0801919a
 801198c:	080191a7 	.word	0x080191a7
 8011990:	080191c6 	.word	0x080191c6
 8011994:	080191d5 	.word	0x080191d5
 8011998:	080191e6 	.word	0x080191e6
 801199c:	0801920a 	.word	0x0801920a
 80119a0:	08019228 	.word	0x08019228
 80119a4:	08019246 	.word	0x08019246
 80119a8:	08019266 	.word	0x08019266
 80119ac:	0801927d 	.word	0x0801927d
 80119b0:	0801928c 	.word	0x0801928c
 80119b4:	0801929b 	.word	0x0801929b
 80119b8:	080192af 	.word	0x080192af
 80119bc:	080192c7 	.word	0x080192c7
 80119c0:	080192d5 	.word	0x080192d5
 80119c4:	080192e2 	.word	0x080192e2
 80119c8:	080192f8 	.word	0x080192f8
 80119cc:	08019307 	.word	0x08019307
 80119d0:	08019313 	.word	0x08019313
 80119d4:	08019342 	.word	0x08019342
 80119d8:	08019353 	.word	0x08019353
 80119dc:	0801936e 	.word	0x0801936e
 80119e0:	08019381 	.word	0x08019381
 80119e4:	08019397 	.word	0x08019397
 80119e8:	080193a0 	.word	0x080193a0
 80119ec:	080193b7 	.word	0x080193b7
 80119f0:	080193bf 	.word	0x080193bf
 80119f4:	080193cc 	.word	0x080193cc
 80119f8:	080193e1 	.word	0x080193e1
 80119fc:	080193f5 	.word	0x080193f5
 8011a00:	0801940d 	.word	0x0801940d
 8011a04:	0801941c 	.word	0x0801941c
 8011a08:	0801942d 	.word	0x0801942d
 8011a0c:	08019440 	.word	0x08019440
 8011a10:	0801944c 	.word	0x0801944c
 8011a14:	08019465 	.word	0x08019465
 8011a18:	08019479 	.word	0x08019479
 8011a1c:	08019494 	.word	0x08019494
 8011a20:	080194ac 	.word	0x080194ac
 8011a24:	080194c6 	.word	0x080194c6
 8011a28:	080194ce 	.word	0x080194ce
 8011a2c:	080194fe 	.word	0x080194fe
 8011a30:	0801951d 	.word	0x0801951d
 8011a34:	0801953c 	.word	0x0801953c
 8011a38:	08019553 	.word	0x08019553
 8011a3c:	08019566 	.word	0x08019566
 8011a40:	0801957f 	.word	0x0801957f
 8011a44:	08019596 	.word	0x08019596
 8011a48:	080195ac 	.word	0x080195ac
 8011a4c:	080195cd 	.word	0x080195cd
 8011a50:	080195e5 	.word	0x080195e5
 8011a54:	08019601 	.word	0x08019601
 8011a58:	08019614 	.word	0x08019614
 8011a5c:	0801962a 	.word	0x0801962a
 8011a60:	0801963e 	.word	0x0801963e
 8011a64:	08019660 	.word	0x08019660
 8011a68:	08019686 	.word	0x08019686
 8011a6c:	08019697 	.word	0x08019697
 8011a70:	08019015 	.word	0x08019015
 8011a74:	08019016 	.word	0x08019016

08011a78 <strerror>:
 8011a78:	4601      	mov	r1, r0
 8011a7a:	4803      	ldr	r0, [pc, #12]	; (8011a88 <strerror+0x10>)
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	461a      	mov	r2, r3
 8011a80:	6800      	ldr	r0, [r0, #0]
 8011a82:	f7ff be13 	b.w	80116ac <_strerror_r>
 8011a86:	bf00      	nop
 8011a88:	20000028 	.word	0x20000028

08011a8c <strncmp>:
 8011a8c:	b510      	push	{r4, lr}
 8011a8e:	b16a      	cbz	r2, 8011aac <strncmp+0x20>
 8011a90:	3901      	subs	r1, #1
 8011a92:	1884      	adds	r4, r0, r2
 8011a94:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011a98:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011a9c:	4293      	cmp	r3, r2
 8011a9e:	d103      	bne.n	8011aa8 <strncmp+0x1c>
 8011aa0:	42a0      	cmp	r0, r4
 8011aa2:	d001      	beq.n	8011aa8 <strncmp+0x1c>
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d1f5      	bne.n	8011a94 <strncmp+0x8>
 8011aa8:	1a98      	subs	r0, r3, r2
 8011aaa:	bd10      	pop	{r4, pc}
 8011aac:	4610      	mov	r0, r2
 8011aae:	bd10      	pop	{r4, pc}

08011ab0 <_svfprintf_r>:
 8011ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ab4:	b0bd      	sub	sp, #244	; 0xf4
 8011ab6:	468a      	mov	sl, r1
 8011ab8:	4615      	mov	r5, r2
 8011aba:	461f      	mov	r7, r3
 8011abc:	4683      	mov	fp, r0
 8011abe:	f002 fa7f 	bl	8013fc0 <_localeconv_r>
 8011ac2:	6803      	ldr	r3, [r0, #0]
 8011ac4:	930d      	str	r3, [sp, #52]	; 0x34
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7f4 ff34 	bl	8006934 <strlen>
 8011acc:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8011ad0:	9008      	str	r0, [sp, #32]
 8011ad2:	061b      	lsls	r3, r3, #24
 8011ad4:	d518      	bpl.n	8011b08 <_svfprintf_r+0x58>
 8011ad6:	f8da 3010 	ldr.w	r3, [sl, #16]
 8011ada:	b9ab      	cbnz	r3, 8011b08 <_svfprintf_r+0x58>
 8011adc:	2140      	movs	r1, #64	; 0x40
 8011ade:	4658      	mov	r0, fp
 8011ae0:	f7ff f888 	bl	8010bf4 <_malloc_r>
 8011ae4:	f8ca 0000 	str.w	r0, [sl]
 8011ae8:	f8ca 0010 	str.w	r0, [sl, #16]
 8011aec:	b948      	cbnz	r0, 8011b02 <_svfprintf_r+0x52>
 8011aee:	230c      	movs	r3, #12
 8011af0:	f8cb 3000 	str.w	r3, [fp]
 8011af4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011af8:	9309      	str	r3, [sp, #36]	; 0x24
 8011afa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011afc:	b03d      	add	sp, #244	; 0xf4
 8011afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b02:	2340      	movs	r3, #64	; 0x40
 8011b04:	f8ca 3014 	str.w	r3, [sl, #20]
 8011b08:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8011d70 <_svfprintf_r+0x2c0>
 8011b0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011b10:	2300      	movs	r3, #0
 8011b12:	ac2c      	add	r4, sp, #176	; 0xb0
 8011b14:	941f      	str	r4, [sp, #124]	; 0x7c
 8011b16:	9321      	str	r3, [sp, #132]	; 0x84
 8011b18:	9320      	str	r3, [sp, #128]	; 0x80
 8011b1a:	9505      	str	r5, [sp, #20]
 8011b1c:	9303      	str	r3, [sp, #12]
 8011b1e:	9311      	str	r3, [sp, #68]	; 0x44
 8011b20:	9310      	str	r3, [sp, #64]	; 0x40
 8011b22:	9309      	str	r3, [sp, #36]	; 0x24
 8011b24:	9d05      	ldr	r5, [sp, #20]
 8011b26:	462b      	mov	r3, r5
 8011b28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b2c:	b112      	cbz	r2, 8011b34 <_svfprintf_r+0x84>
 8011b2e:	2a25      	cmp	r2, #37	; 0x25
 8011b30:	f040 8083 	bne.w	8011c3a <_svfprintf_r+0x18a>
 8011b34:	9b05      	ldr	r3, [sp, #20]
 8011b36:	1aee      	subs	r6, r5, r3
 8011b38:	d00d      	beq.n	8011b56 <_svfprintf_r+0xa6>
 8011b3a:	e884 0048 	stmia.w	r4, {r3, r6}
 8011b3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011b40:	4433      	add	r3, r6
 8011b42:	9321      	str	r3, [sp, #132]	; 0x84
 8011b44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011b46:	3301      	adds	r3, #1
 8011b48:	2b07      	cmp	r3, #7
 8011b4a:	9320      	str	r3, [sp, #128]	; 0x80
 8011b4c:	dc77      	bgt.n	8011c3e <_svfprintf_r+0x18e>
 8011b4e:	3408      	adds	r4, #8
 8011b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b52:	4433      	add	r3, r6
 8011b54:	9309      	str	r3, [sp, #36]	; 0x24
 8011b56:	782b      	ldrb	r3, [r5, #0]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	f000 8729 	beq.w	80129b0 <_svfprintf_r+0xf00>
 8011b5e:	2300      	movs	r3, #0
 8011b60:	1c69      	adds	r1, r5, #1
 8011b62:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8011b66:	461a      	mov	r2, r3
 8011b68:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8011b6c:	930a      	str	r3, [sp, #40]	; 0x28
 8011b6e:	461d      	mov	r5, r3
 8011b70:	200a      	movs	r0, #10
 8011b72:	1c4e      	adds	r6, r1, #1
 8011b74:	7809      	ldrb	r1, [r1, #0]
 8011b76:	9605      	str	r6, [sp, #20]
 8011b78:	9102      	str	r1, [sp, #8]
 8011b7a:	9902      	ldr	r1, [sp, #8]
 8011b7c:	3920      	subs	r1, #32
 8011b7e:	2958      	cmp	r1, #88	; 0x58
 8011b80:	f200 8418 	bhi.w	80123b4 <_svfprintf_r+0x904>
 8011b84:	e8df f011 	tbh	[pc, r1, lsl #1]
 8011b88:	041600a6 	.word	0x041600a6
 8011b8c:	00ab0416 	.word	0x00ab0416
 8011b90:	04160416 	.word	0x04160416
 8011b94:	04160416 	.word	0x04160416
 8011b98:	04160416 	.word	0x04160416
 8011b9c:	006500ae 	.word	0x006500ae
 8011ba0:	00b70416 	.word	0x00b70416
 8011ba4:	041600ba 	.word	0x041600ba
 8011ba8:	00da00d7 	.word	0x00da00d7
 8011bac:	00da00da 	.word	0x00da00da
 8011bb0:	00da00da 	.word	0x00da00da
 8011bb4:	00da00da 	.word	0x00da00da
 8011bb8:	00da00da 	.word	0x00da00da
 8011bbc:	04160416 	.word	0x04160416
 8011bc0:	04160416 	.word	0x04160416
 8011bc4:	04160416 	.word	0x04160416
 8011bc8:	04160416 	.word	0x04160416
 8011bcc:	04160416 	.word	0x04160416
 8011bd0:	012b0115 	.word	0x012b0115
 8011bd4:	012b0416 	.word	0x012b0416
 8011bd8:	04160416 	.word	0x04160416
 8011bdc:	04160416 	.word	0x04160416
 8011be0:	041600ed 	.word	0x041600ed
 8011be4:	03400416 	.word	0x03400416
 8011be8:	04160416 	.word	0x04160416
 8011bec:	04160416 	.word	0x04160416
 8011bf0:	03a80416 	.word	0x03a80416
 8011bf4:	04160416 	.word	0x04160416
 8011bf8:	04160086 	.word	0x04160086
 8011bfc:	04160416 	.word	0x04160416
 8011c00:	04160416 	.word	0x04160416
 8011c04:	04160416 	.word	0x04160416
 8011c08:	04160416 	.word	0x04160416
 8011c0c:	01070416 	.word	0x01070416
 8011c10:	012b006b 	.word	0x012b006b
 8011c14:	012b012b 	.word	0x012b012b
 8011c18:	006b00f0 	.word	0x006b00f0
 8011c1c:	04160416 	.word	0x04160416
 8011c20:	041600fa 	.word	0x041600fa
 8011c24:	03420322 	.word	0x03420322
 8011c28:	01010376 	.word	0x01010376
 8011c2c:	03870416 	.word	0x03870416
 8011c30:	03aa0416 	.word	0x03aa0416
 8011c34:	04160416 	.word	0x04160416
 8011c38:	03c2      	.short	0x03c2
 8011c3a:	461d      	mov	r5, r3
 8011c3c:	e773      	b.n	8011b26 <_svfprintf_r+0x76>
 8011c3e:	aa1f      	add	r2, sp, #124	; 0x7c
 8011c40:	4651      	mov	r1, sl
 8011c42:	4658      	mov	r0, fp
 8011c44:	f002 fcbe 	bl	80145c4 <__ssprint_r>
 8011c48:	2800      	cmp	r0, #0
 8011c4a:	f040 8692 	bne.w	8012972 <_svfprintf_r+0xec2>
 8011c4e:	ac2c      	add	r4, sp, #176	; 0xb0
 8011c50:	e77e      	b.n	8011b50 <_svfprintf_r+0xa0>
 8011c52:	2301      	movs	r3, #1
 8011c54:	222b      	movs	r2, #43	; 0x2b
 8011c56:	9905      	ldr	r1, [sp, #20]
 8011c58:	e78b      	b.n	8011b72 <_svfprintf_r+0xc2>
 8011c5a:	460f      	mov	r7, r1
 8011c5c:	e7fb      	b.n	8011c56 <_svfprintf_r+0x1a6>
 8011c5e:	b10b      	cbz	r3, 8011c64 <_svfprintf_r+0x1b4>
 8011c60:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8011c64:	06ae      	lsls	r6, r5, #26
 8011c66:	f140 80aa 	bpl.w	8011dbe <_svfprintf_r+0x30e>
 8011c6a:	3707      	adds	r7, #7
 8011c6c:	f027 0707 	bic.w	r7, r7, #7
 8011c70:	f107 0308 	add.w	r3, r7, #8
 8011c74:	e9d7 6700 	ldrd	r6, r7, [r7]
 8011c78:	9304      	str	r3, [sp, #16]
 8011c7a:	2e00      	cmp	r6, #0
 8011c7c:	f177 0300 	sbcs.w	r3, r7, #0
 8011c80:	da06      	bge.n	8011c90 <_svfprintf_r+0x1e0>
 8011c82:	4276      	negs	r6, r6
 8011c84:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8011c88:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8011c8c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8011c90:	2301      	movs	r3, #1
 8011c92:	e2ca      	b.n	801222a <_svfprintf_r+0x77a>
 8011c94:	b10b      	cbz	r3, 8011c9a <_svfprintf_r+0x1ea>
 8011c96:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8011c9a:	4b37      	ldr	r3, [pc, #220]	; (8011d78 <_svfprintf_r+0x2c8>)
 8011c9c:	9311      	str	r3, [sp, #68]	; 0x44
 8011c9e:	06ab      	lsls	r3, r5, #26
 8011ca0:	f140 8339 	bpl.w	8012316 <_svfprintf_r+0x866>
 8011ca4:	3707      	adds	r7, #7
 8011ca6:	f027 0707 	bic.w	r7, r7, #7
 8011caa:	f107 0308 	add.w	r3, r7, #8
 8011cae:	e9d7 6700 	ldrd	r6, r7, [r7]
 8011cb2:	9304      	str	r3, [sp, #16]
 8011cb4:	07e8      	lsls	r0, r5, #31
 8011cb6:	d50b      	bpl.n	8011cd0 <_svfprintf_r+0x220>
 8011cb8:	ea56 0307 	orrs.w	r3, r6, r7
 8011cbc:	d008      	beq.n	8011cd0 <_svfprintf_r+0x220>
 8011cbe:	2330      	movs	r3, #48	; 0x30
 8011cc0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8011cc4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8011cc8:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8011ccc:	f045 0502 	orr.w	r5, r5, #2
 8011cd0:	2302      	movs	r3, #2
 8011cd2:	e2a7      	b.n	8012224 <_svfprintf_r+0x774>
 8011cd4:	2a00      	cmp	r2, #0
 8011cd6:	d1be      	bne.n	8011c56 <_svfprintf_r+0x1a6>
 8011cd8:	2301      	movs	r3, #1
 8011cda:	2220      	movs	r2, #32
 8011cdc:	e7bb      	b.n	8011c56 <_svfprintf_r+0x1a6>
 8011cde:	f045 0501 	orr.w	r5, r5, #1
 8011ce2:	e7b8      	b.n	8011c56 <_svfprintf_r+0x1a6>
 8011ce4:	683e      	ldr	r6, [r7, #0]
 8011ce6:	960a      	str	r6, [sp, #40]	; 0x28
 8011ce8:	2e00      	cmp	r6, #0
 8011cea:	f107 0104 	add.w	r1, r7, #4
 8011cee:	dab4      	bge.n	8011c5a <_svfprintf_r+0x1aa>
 8011cf0:	4276      	negs	r6, r6
 8011cf2:	960a      	str	r6, [sp, #40]	; 0x28
 8011cf4:	460f      	mov	r7, r1
 8011cf6:	f045 0504 	orr.w	r5, r5, #4
 8011cfa:	e7ac      	b.n	8011c56 <_svfprintf_r+0x1a6>
 8011cfc:	9905      	ldr	r1, [sp, #20]
 8011cfe:	1c4e      	adds	r6, r1, #1
 8011d00:	7809      	ldrb	r1, [r1, #0]
 8011d02:	9102      	str	r1, [sp, #8]
 8011d04:	292a      	cmp	r1, #42	; 0x2a
 8011d06:	d010      	beq.n	8011d2a <_svfprintf_r+0x27a>
 8011d08:	f04f 0900 	mov.w	r9, #0
 8011d0c:	9605      	str	r6, [sp, #20]
 8011d0e:	9902      	ldr	r1, [sp, #8]
 8011d10:	3930      	subs	r1, #48	; 0x30
 8011d12:	2909      	cmp	r1, #9
 8011d14:	f63f af31 	bhi.w	8011b7a <_svfprintf_r+0xca>
 8011d18:	fb00 1909 	mla	r9, r0, r9, r1
 8011d1c:	9905      	ldr	r1, [sp, #20]
 8011d1e:	460e      	mov	r6, r1
 8011d20:	f816 1b01 	ldrb.w	r1, [r6], #1
 8011d24:	9102      	str	r1, [sp, #8]
 8011d26:	9605      	str	r6, [sp, #20]
 8011d28:	e7f1      	b.n	8011d0e <_svfprintf_r+0x25e>
 8011d2a:	6839      	ldr	r1, [r7, #0]
 8011d2c:	9605      	str	r6, [sp, #20]
 8011d2e:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8011d32:	3704      	adds	r7, #4
 8011d34:	e78f      	b.n	8011c56 <_svfprintf_r+0x1a6>
 8011d36:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8011d3a:	e78c      	b.n	8011c56 <_svfprintf_r+0x1a6>
 8011d3c:	2100      	movs	r1, #0
 8011d3e:	910a      	str	r1, [sp, #40]	; 0x28
 8011d40:	9902      	ldr	r1, [sp, #8]
 8011d42:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011d44:	3930      	subs	r1, #48	; 0x30
 8011d46:	fb00 1106 	mla	r1, r0, r6, r1
 8011d4a:	910a      	str	r1, [sp, #40]	; 0x28
 8011d4c:	9905      	ldr	r1, [sp, #20]
 8011d4e:	460e      	mov	r6, r1
 8011d50:	f816 1b01 	ldrb.w	r1, [r6], #1
 8011d54:	9102      	str	r1, [sp, #8]
 8011d56:	9902      	ldr	r1, [sp, #8]
 8011d58:	9605      	str	r6, [sp, #20]
 8011d5a:	3930      	subs	r1, #48	; 0x30
 8011d5c:	2909      	cmp	r1, #9
 8011d5e:	d9ef      	bls.n	8011d40 <_svfprintf_r+0x290>
 8011d60:	e70b      	b.n	8011b7a <_svfprintf_r+0xca>
 8011d62:	f045 0508 	orr.w	r5, r5, #8
 8011d66:	e776      	b.n	8011c56 <_svfprintf_r+0x1a6>
 8011d68:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8011d6c:	e773      	b.n	8011c56 <_svfprintf_r+0x1a6>
 8011d6e:	bf00      	nop
	...
 8011d78:	080196bc 	.word	0x080196bc
 8011d7c:	9905      	ldr	r1, [sp, #20]
 8011d7e:	7809      	ldrb	r1, [r1, #0]
 8011d80:	296c      	cmp	r1, #108	; 0x6c
 8011d82:	d105      	bne.n	8011d90 <_svfprintf_r+0x2e0>
 8011d84:	9905      	ldr	r1, [sp, #20]
 8011d86:	3101      	adds	r1, #1
 8011d88:	9105      	str	r1, [sp, #20]
 8011d8a:	f045 0520 	orr.w	r5, r5, #32
 8011d8e:	e762      	b.n	8011c56 <_svfprintf_r+0x1a6>
 8011d90:	f045 0510 	orr.w	r5, r5, #16
 8011d94:	e75f      	b.n	8011c56 <_svfprintf_r+0x1a6>
 8011d96:	1d3b      	adds	r3, r7, #4
 8011d98:	9304      	str	r3, [sp, #16]
 8011d9a:	2600      	movs	r6, #0
 8011d9c:	683b      	ldr	r3, [r7, #0]
 8011d9e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8011da2:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8011da6:	f04f 0901 	mov.w	r9, #1
 8011daa:	4637      	mov	r7, r6
 8011dac:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8011db0:	e11b      	b.n	8011fea <_svfprintf_r+0x53a>
 8011db2:	b10b      	cbz	r3, 8011db8 <_svfprintf_r+0x308>
 8011db4:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8011db8:	f045 0510 	orr.w	r5, r5, #16
 8011dbc:	e752      	b.n	8011c64 <_svfprintf_r+0x1b4>
 8011dbe:	f015 0f10 	tst.w	r5, #16
 8011dc2:	f107 0304 	add.w	r3, r7, #4
 8011dc6:	d003      	beq.n	8011dd0 <_svfprintf_r+0x320>
 8011dc8:	683e      	ldr	r6, [r7, #0]
 8011dca:	9304      	str	r3, [sp, #16]
 8011dcc:	17f7      	asrs	r7, r6, #31
 8011dce:	e754      	b.n	8011c7a <_svfprintf_r+0x1ca>
 8011dd0:	683e      	ldr	r6, [r7, #0]
 8011dd2:	9304      	str	r3, [sp, #16]
 8011dd4:	f015 0f40 	tst.w	r5, #64	; 0x40
 8011dd8:	bf18      	it	ne
 8011dda:	b236      	sxthne	r6, r6
 8011ddc:	e7f6      	b.n	8011dcc <_svfprintf_r+0x31c>
 8011dde:	b10b      	cbz	r3, 8011de4 <_svfprintf_r+0x334>
 8011de0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8011de4:	3707      	adds	r7, #7
 8011de6:	f027 0707 	bic.w	r7, r7, #7
 8011dea:	f107 0308 	add.w	r3, r7, #8
 8011dee:	9304      	str	r3, [sp, #16]
 8011df0:	ed97 7b00 	vldr	d7, [r7]
 8011df4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011df8:	9b06      	ldr	r3, [sp, #24]
 8011dfa:	9312      	str	r3, [sp, #72]	; 0x48
 8011dfc:	9b07      	ldr	r3, [sp, #28]
 8011dfe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011e02:	9313      	str	r3, [sp, #76]	; 0x4c
 8011e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e08:	4b4a      	ldr	r3, [pc, #296]	; (8011f34 <_svfprintf_r+0x484>)
 8011e0a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8011e0e:	f7f5 f9eb 	bl	80071e8 <__aeabi_dcmpun>
 8011e12:	2800      	cmp	r0, #0
 8011e14:	f040 85d5 	bne.w	80129c2 <_svfprintf_r+0xf12>
 8011e18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011e1c:	4b45      	ldr	r3, [pc, #276]	; (8011f34 <_svfprintf_r+0x484>)
 8011e1e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8011e22:	f7f5 f9c3 	bl	80071ac <__aeabi_dcmple>
 8011e26:	2800      	cmp	r0, #0
 8011e28:	f040 85cb 	bne.w	80129c2 <_svfprintf_r+0xf12>
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	2300      	movs	r3, #0
 8011e30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011e34:	f7f5 f9b0 	bl	8007198 <__aeabi_dcmplt>
 8011e38:	b110      	cbz	r0, 8011e40 <_svfprintf_r+0x390>
 8011e3a:	232d      	movs	r3, #45	; 0x2d
 8011e3c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8011e40:	4b3d      	ldr	r3, [pc, #244]	; (8011f38 <_svfprintf_r+0x488>)
 8011e42:	4a3e      	ldr	r2, [pc, #248]	; (8011f3c <_svfprintf_r+0x48c>)
 8011e44:	9902      	ldr	r1, [sp, #8]
 8011e46:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 8011e4a:	2947      	cmp	r1, #71	; 0x47
 8011e4c:	bfcc      	ite	gt
 8011e4e:	4690      	movgt	r8, r2
 8011e50:	4698      	movle	r8, r3
 8011e52:	f04f 0903 	mov.w	r9, #3
 8011e56:	2600      	movs	r6, #0
 8011e58:	4637      	mov	r7, r6
 8011e5a:	e0c6      	b.n	8011fea <_svfprintf_r+0x53a>
 8011e5c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8011e60:	d022      	beq.n	8011ea8 <_svfprintf_r+0x3f8>
 8011e62:	9b02      	ldr	r3, [sp, #8]
 8011e64:	f023 0320 	bic.w	r3, r3, #32
 8011e68:	2b47      	cmp	r3, #71	; 0x47
 8011e6a:	d104      	bne.n	8011e76 <_svfprintf_r+0x3c6>
 8011e6c:	f1b9 0f00 	cmp.w	r9, #0
 8011e70:	bf08      	it	eq
 8011e72:	f04f 0901 	moveq.w	r9, #1
 8011e76:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8011e7a:	930c      	str	r3, [sp, #48]	; 0x30
 8011e7c:	9b07      	ldr	r3, [sp, #28]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	da15      	bge.n	8011eae <_svfprintf_r+0x3fe>
 8011e82:	9b06      	ldr	r3, [sp, #24]
 8011e84:	930e      	str	r3, [sp, #56]	; 0x38
 8011e86:	9b07      	ldr	r3, [sp, #28]
 8011e88:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011e8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8011e8e:	232d      	movs	r3, #45	; 0x2d
 8011e90:	930b      	str	r3, [sp, #44]	; 0x2c
 8011e92:	9b02      	ldr	r3, [sp, #8]
 8011e94:	f023 0720 	bic.w	r7, r3, #32
 8011e98:	2f46      	cmp	r7, #70	; 0x46
 8011e9a:	d00e      	beq.n	8011eba <_svfprintf_r+0x40a>
 8011e9c:	2f45      	cmp	r7, #69	; 0x45
 8011e9e:	d146      	bne.n	8011f2e <_svfprintf_r+0x47e>
 8011ea0:	f109 0601 	add.w	r6, r9, #1
 8011ea4:	2102      	movs	r1, #2
 8011ea6:	e00a      	b.n	8011ebe <_svfprintf_r+0x40e>
 8011ea8:	f04f 0906 	mov.w	r9, #6
 8011eac:	e7e3      	b.n	8011e76 <_svfprintf_r+0x3c6>
 8011eae:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8011eb8:	e7ea      	b.n	8011e90 <_svfprintf_r+0x3e0>
 8011eba:	464e      	mov	r6, r9
 8011ebc:	2103      	movs	r1, #3
 8011ebe:	ab1d      	add	r3, sp, #116	; 0x74
 8011ec0:	9301      	str	r3, [sp, #4]
 8011ec2:	ab1a      	add	r3, sp, #104	; 0x68
 8011ec4:	9300      	str	r3, [sp, #0]
 8011ec6:	4632      	mov	r2, r6
 8011ec8:	ab19      	add	r3, sp, #100	; 0x64
 8011eca:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8011ece:	4658      	mov	r0, fp
 8011ed0:	f000 ffc2 	bl	8012e58 <_dtoa_r>
 8011ed4:	2f47      	cmp	r7, #71	; 0x47
 8011ed6:	4680      	mov	r8, r0
 8011ed8:	d102      	bne.n	8011ee0 <_svfprintf_r+0x430>
 8011eda:	07e8      	lsls	r0, r5, #31
 8011edc:	f140 857e 	bpl.w	80129dc <_svfprintf_r+0xf2c>
 8011ee0:	eb08 0306 	add.w	r3, r8, r6
 8011ee4:	2f46      	cmp	r7, #70	; 0x46
 8011ee6:	9303      	str	r3, [sp, #12]
 8011ee8:	d111      	bne.n	8011f0e <_svfprintf_r+0x45e>
 8011eea:	f898 3000 	ldrb.w	r3, [r8]
 8011eee:	2b30      	cmp	r3, #48	; 0x30
 8011ef0:	d109      	bne.n	8011f06 <_svfprintf_r+0x456>
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011efa:	f7f5 f943 	bl	8007184 <__aeabi_dcmpeq>
 8011efe:	b910      	cbnz	r0, 8011f06 <_svfprintf_r+0x456>
 8011f00:	f1c6 0601 	rsb	r6, r6, #1
 8011f04:	9619      	str	r6, [sp, #100]	; 0x64
 8011f06:	9a03      	ldr	r2, [sp, #12]
 8011f08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011f0a:	441a      	add	r2, r3
 8011f0c:	9203      	str	r2, [sp, #12]
 8011f0e:	2200      	movs	r2, #0
 8011f10:	2300      	movs	r3, #0
 8011f12:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8011f16:	f7f5 f935 	bl	8007184 <__aeabi_dcmpeq>
 8011f1a:	b988      	cbnz	r0, 8011f40 <_svfprintf_r+0x490>
 8011f1c:	2230      	movs	r2, #48	; 0x30
 8011f1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011f20:	9903      	ldr	r1, [sp, #12]
 8011f22:	4299      	cmp	r1, r3
 8011f24:	d90e      	bls.n	8011f44 <_svfprintf_r+0x494>
 8011f26:	1c59      	adds	r1, r3, #1
 8011f28:	911d      	str	r1, [sp, #116]	; 0x74
 8011f2a:	701a      	strb	r2, [r3, #0]
 8011f2c:	e7f7      	b.n	8011f1e <_svfprintf_r+0x46e>
 8011f2e:	464e      	mov	r6, r9
 8011f30:	e7b8      	b.n	8011ea4 <_svfprintf_r+0x3f4>
 8011f32:	bf00      	nop
 8011f34:	7fefffff 	.word	0x7fefffff
 8011f38:	080196ac 	.word	0x080196ac
 8011f3c:	080196b0 	.word	0x080196b0
 8011f40:	9b03      	ldr	r3, [sp, #12]
 8011f42:	931d      	str	r3, [sp, #116]	; 0x74
 8011f44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011f46:	2f47      	cmp	r7, #71	; 0x47
 8011f48:	eba3 0308 	sub.w	r3, r3, r8
 8011f4c:	9303      	str	r3, [sp, #12]
 8011f4e:	f040 80fa 	bne.w	8012146 <_svfprintf_r+0x696>
 8011f52:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8011f54:	1cd9      	adds	r1, r3, #3
 8011f56:	db02      	blt.n	8011f5e <_svfprintf_r+0x4ae>
 8011f58:	4599      	cmp	r9, r3
 8011f5a:	f280 8120 	bge.w	801219e <_svfprintf_r+0x6ee>
 8011f5e:	9b02      	ldr	r3, [sp, #8]
 8011f60:	3b02      	subs	r3, #2
 8011f62:	9302      	str	r3, [sp, #8]
 8011f64:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8011f66:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8011f6a:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8011f6e:	1e53      	subs	r3, r2, #1
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	9319      	str	r3, [sp, #100]	; 0x64
 8011f74:	bfb6      	itet	lt
 8011f76:	f1c2 0301 	rsblt	r3, r2, #1
 8011f7a:	222b      	movge	r2, #43	; 0x2b
 8011f7c:	222d      	movlt	r2, #45	; 0x2d
 8011f7e:	2b09      	cmp	r3, #9
 8011f80:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8011f84:	f340 80fb 	ble.w	801217e <_svfprintf_r+0x6ce>
 8011f88:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8011f8c:	260a      	movs	r6, #10
 8011f8e:	fb93 f0f6 	sdiv	r0, r3, r6
 8011f92:	fb06 3310 	mls	r3, r6, r0, r3
 8011f96:	3330      	adds	r3, #48	; 0x30
 8011f98:	2809      	cmp	r0, #9
 8011f9a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8011f9e:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	f300 80e4 	bgt.w	8012170 <_svfprintf_r+0x6c0>
 8011fa8:	3330      	adds	r3, #48	; 0x30
 8011faa:	f801 3c01 	strb.w	r3, [r1, #-1]
 8011fae:	3a02      	subs	r2, #2
 8011fb0:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8011fb4:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8011fb8:	4282      	cmp	r2, r0
 8011fba:	4619      	mov	r1, r3
 8011fbc:	f0c0 80da 	bcc.w	8012174 <_svfprintf_r+0x6c4>
 8011fc0:	9a03      	ldr	r2, [sp, #12]
 8011fc2:	ab1b      	add	r3, sp, #108	; 0x6c
 8011fc4:	1acb      	subs	r3, r1, r3
 8011fc6:	2a01      	cmp	r2, #1
 8011fc8:	9310      	str	r3, [sp, #64]	; 0x40
 8011fca:	eb03 0902 	add.w	r9, r3, r2
 8011fce:	dc02      	bgt.n	8011fd6 <_svfprintf_r+0x526>
 8011fd0:	f015 0701 	ands.w	r7, r5, #1
 8011fd4:	d002      	beq.n	8011fdc <_svfprintf_r+0x52c>
 8011fd6:	9b08      	ldr	r3, [sp, #32]
 8011fd8:	2700      	movs	r7, #0
 8011fda:	4499      	add	r9, r3
 8011fdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011fde:	b113      	cbz	r3, 8011fe6 <_svfprintf_r+0x536>
 8011fe0:	232d      	movs	r3, #45	; 0x2d
 8011fe2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8011fe6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011fe8:	2600      	movs	r6, #0
 8011fea:	454e      	cmp	r6, r9
 8011fec:	4633      	mov	r3, r6
 8011fee:	bfb8      	it	lt
 8011ff0:	464b      	movlt	r3, r9
 8011ff2:	930b      	str	r3, [sp, #44]	; 0x2c
 8011ff4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8011ff8:	b113      	cbz	r3, 8012000 <_svfprintf_r+0x550>
 8011ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ffc:	3301      	adds	r3, #1
 8011ffe:	930b      	str	r3, [sp, #44]	; 0x2c
 8012000:	f015 0302 	ands.w	r3, r5, #2
 8012004:	9314      	str	r3, [sp, #80]	; 0x50
 8012006:	bf1e      	ittt	ne
 8012008:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 801200a:	3302      	addne	r3, #2
 801200c:	930b      	strne	r3, [sp, #44]	; 0x2c
 801200e:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8012012:	9315      	str	r3, [sp, #84]	; 0x54
 8012014:	d118      	bne.n	8012048 <_svfprintf_r+0x598>
 8012016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012018:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801201a:	1a9b      	subs	r3, r3, r2
 801201c:	2b00      	cmp	r3, #0
 801201e:	930c      	str	r3, [sp, #48]	; 0x30
 8012020:	dd12      	ble.n	8012048 <_svfprintf_r+0x598>
 8012022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012024:	2b10      	cmp	r3, #16
 8012026:	4ba9      	ldr	r3, [pc, #676]	; (80122cc <_svfprintf_r+0x81c>)
 8012028:	6023      	str	r3, [r4, #0]
 801202a:	f300 81d5 	bgt.w	80123d8 <_svfprintf_r+0x928>
 801202e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012030:	6063      	str	r3, [r4, #4]
 8012032:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012034:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012036:	4413      	add	r3, r2
 8012038:	9321      	str	r3, [sp, #132]	; 0x84
 801203a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801203c:	3301      	adds	r3, #1
 801203e:	2b07      	cmp	r3, #7
 8012040:	9320      	str	r3, [sp, #128]	; 0x80
 8012042:	f300 81e2 	bgt.w	801240a <_svfprintf_r+0x95a>
 8012046:	3408      	adds	r4, #8
 8012048:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 801204c:	b173      	cbz	r3, 801206c <_svfprintf_r+0x5bc>
 801204e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8012052:	6023      	str	r3, [r4, #0]
 8012054:	2301      	movs	r3, #1
 8012056:	6063      	str	r3, [r4, #4]
 8012058:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801205a:	3301      	adds	r3, #1
 801205c:	9321      	str	r3, [sp, #132]	; 0x84
 801205e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012060:	3301      	adds	r3, #1
 8012062:	2b07      	cmp	r3, #7
 8012064:	9320      	str	r3, [sp, #128]	; 0x80
 8012066:	f300 81da 	bgt.w	801241e <_svfprintf_r+0x96e>
 801206a:	3408      	adds	r4, #8
 801206c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801206e:	b16b      	cbz	r3, 801208c <_svfprintf_r+0x5dc>
 8012070:	ab18      	add	r3, sp, #96	; 0x60
 8012072:	6023      	str	r3, [r4, #0]
 8012074:	2302      	movs	r3, #2
 8012076:	6063      	str	r3, [r4, #4]
 8012078:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801207a:	3302      	adds	r3, #2
 801207c:	9321      	str	r3, [sp, #132]	; 0x84
 801207e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012080:	3301      	adds	r3, #1
 8012082:	2b07      	cmp	r3, #7
 8012084:	9320      	str	r3, [sp, #128]	; 0x80
 8012086:	f300 81d4 	bgt.w	8012432 <_svfprintf_r+0x982>
 801208a:	3408      	adds	r4, #8
 801208c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801208e:	2b80      	cmp	r3, #128	; 0x80
 8012090:	d114      	bne.n	80120bc <_svfprintf_r+0x60c>
 8012092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012094:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012096:	1a9b      	subs	r3, r3, r2
 8012098:	2b00      	cmp	r3, #0
 801209a:	dd0f      	ble.n	80120bc <_svfprintf_r+0x60c>
 801209c:	4a8c      	ldr	r2, [pc, #560]	; (80122d0 <_svfprintf_r+0x820>)
 801209e:	6022      	str	r2, [r4, #0]
 80120a0:	2b10      	cmp	r3, #16
 80120a2:	f300 81d0 	bgt.w	8012446 <_svfprintf_r+0x996>
 80120a6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80120a8:	6063      	str	r3, [r4, #4]
 80120aa:	4413      	add	r3, r2
 80120ac:	9321      	str	r3, [sp, #132]	; 0x84
 80120ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80120b0:	3301      	adds	r3, #1
 80120b2:	2b07      	cmp	r3, #7
 80120b4:	9320      	str	r3, [sp, #128]	; 0x80
 80120b6:	f300 81df 	bgt.w	8012478 <_svfprintf_r+0x9c8>
 80120ba:	3408      	adds	r4, #8
 80120bc:	eba6 0609 	sub.w	r6, r6, r9
 80120c0:	2e00      	cmp	r6, #0
 80120c2:	dd0f      	ble.n	80120e4 <_svfprintf_r+0x634>
 80120c4:	4b82      	ldr	r3, [pc, #520]	; (80122d0 <_svfprintf_r+0x820>)
 80120c6:	6023      	str	r3, [r4, #0]
 80120c8:	2e10      	cmp	r6, #16
 80120ca:	f300 81df 	bgt.w	801248c <_svfprintf_r+0x9dc>
 80120ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80120d0:	9821      	ldr	r0, [sp, #132]	; 0x84
 80120d2:	6066      	str	r6, [r4, #4]
 80120d4:	3301      	adds	r3, #1
 80120d6:	4406      	add	r6, r0
 80120d8:	2b07      	cmp	r3, #7
 80120da:	9621      	str	r6, [sp, #132]	; 0x84
 80120dc:	9320      	str	r3, [sp, #128]	; 0x80
 80120de:	f300 81ec 	bgt.w	80124ba <_svfprintf_r+0xa0a>
 80120e2:	3408      	adds	r4, #8
 80120e4:	05eb      	lsls	r3, r5, #23
 80120e6:	f100 81f2 	bmi.w	80124ce <_svfprintf_r+0xa1e>
 80120ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80120ec:	e884 0300 	stmia.w	r4, {r8, r9}
 80120f0:	444b      	add	r3, r9
 80120f2:	9321      	str	r3, [sp, #132]	; 0x84
 80120f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80120f6:	3301      	adds	r3, #1
 80120f8:	2b07      	cmp	r3, #7
 80120fa:	9320      	str	r3, [sp, #128]	; 0x80
 80120fc:	f340 8419 	ble.w	8012932 <_svfprintf_r+0xe82>
 8012100:	aa1f      	add	r2, sp, #124	; 0x7c
 8012102:	4651      	mov	r1, sl
 8012104:	4658      	mov	r0, fp
 8012106:	f002 fa5d 	bl	80145c4 <__ssprint_r>
 801210a:	2800      	cmp	r0, #0
 801210c:	f040 8431 	bne.w	8012972 <_svfprintf_r+0xec2>
 8012110:	ac2c      	add	r4, sp, #176	; 0xb0
 8012112:	076b      	lsls	r3, r5, #29
 8012114:	f100 8410 	bmi.w	8012938 <_svfprintf_r+0xe88>
 8012118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801211a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801211c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801211e:	428a      	cmp	r2, r1
 8012120:	bfac      	ite	ge
 8012122:	189b      	addge	r3, r3, r2
 8012124:	185b      	addlt	r3, r3, r1
 8012126:	9309      	str	r3, [sp, #36]	; 0x24
 8012128:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801212a:	b13b      	cbz	r3, 801213c <_svfprintf_r+0x68c>
 801212c:	aa1f      	add	r2, sp, #124	; 0x7c
 801212e:	4651      	mov	r1, sl
 8012130:	4658      	mov	r0, fp
 8012132:	f002 fa47 	bl	80145c4 <__ssprint_r>
 8012136:	2800      	cmp	r0, #0
 8012138:	f040 841b 	bne.w	8012972 <_svfprintf_r+0xec2>
 801213c:	2300      	movs	r3, #0
 801213e:	9320      	str	r3, [sp, #128]	; 0x80
 8012140:	9f04      	ldr	r7, [sp, #16]
 8012142:	ac2c      	add	r4, sp, #176	; 0xb0
 8012144:	e4ee      	b.n	8011b24 <_svfprintf_r+0x74>
 8012146:	9b02      	ldr	r3, [sp, #8]
 8012148:	2b65      	cmp	r3, #101	; 0x65
 801214a:	f77f af0b 	ble.w	8011f64 <_svfprintf_r+0x4b4>
 801214e:	9b02      	ldr	r3, [sp, #8]
 8012150:	2b66      	cmp	r3, #102	; 0x66
 8012152:	d124      	bne.n	801219e <_svfprintf_r+0x6ee>
 8012154:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012156:	2b00      	cmp	r3, #0
 8012158:	dd19      	ble.n	801218e <_svfprintf_r+0x6de>
 801215a:	f1b9 0f00 	cmp.w	r9, #0
 801215e:	d101      	bne.n	8012164 <_svfprintf_r+0x6b4>
 8012160:	07ea      	lsls	r2, r5, #31
 8012162:	d502      	bpl.n	801216a <_svfprintf_r+0x6ba>
 8012164:	9a08      	ldr	r2, [sp, #32]
 8012166:	4413      	add	r3, r2
 8012168:	444b      	add	r3, r9
 801216a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 801216c:	4699      	mov	r9, r3
 801216e:	e735      	b.n	8011fdc <_svfprintf_r+0x52c>
 8012170:	460a      	mov	r2, r1
 8012172:	e70c      	b.n	8011f8e <_svfprintf_r+0x4de>
 8012174:	f812 1b01 	ldrb.w	r1, [r2], #1
 8012178:	f803 1b01 	strb.w	r1, [r3], #1
 801217c:	e71c      	b.n	8011fb8 <_svfprintf_r+0x508>
 801217e:	2230      	movs	r2, #48	; 0x30
 8012180:	4413      	add	r3, r2
 8012182:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8012186:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 801218a:	a91c      	add	r1, sp, #112	; 0x70
 801218c:	e718      	b.n	8011fc0 <_svfprintf_r+0x510>
 801218e:	f1b9 0f00 	cmp.w	r9, #0
 8012192:	d101      	bne.n	8012198 <_svfprintf_r+0x6e8>
 8012194:	07eb      	lsls	r3, r5, #31
 8012196:	d515      	bpl.n	80121c4 <_svfprintf_r+0x714>
 8012198:	9b08      	ldr	r3, [sp, #32]
 801219a:	3301      	adds	r3, #1
 801219c:	e7e4      	b.n	8012168 <_svfprintf_r+0x6b8>
 801219e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80121a0:	9b03      	ldr	r3, [sp, #12]
 80121a2:	429a      	cmp	r2, r3
 80121a4:	db06      	blt.n	80121b4 <_svfprintf_r+0x704>
 80121a6:	07ef      	lsls	r7, r5, #31
 80121a8:	d50e      	bpl.n	80121c8 <_svfprintf_r+0x718>
 80121aa:	9b08      	ldr	r3, [sp, #32]
 80121ac:	4413      	add	r3, r2
 80121ae:	2267      	movs	r2, #103	; 0x67
 80121b0:	9202      	str	r2, [sp, #8]
 80121b2:	e7da      	b.n	801216a <_svfprintf_r+0x6ba>
 80121b4:	9b03      	ldr	r3, [sp, #12]
 80121b6:	9908      	ldr	r1, [sp, #32]
 80121b8:	2a00      	cmp	r2, #0
 80121ba:	440b      	add	r3, r1
 80121bc:	dcf7      	bgt.n	80121ae <_svfprintf_r+0x6fe>
 80121be:	f1c2 0201 	rsb	r2, r2, #1
 80121c2:	e7f3      	b.n	80121ac <_svfprintf_r+0x6fc>
 80121c4:	2301      	movs	r3, #1
 80121c6:	e7d0      	b.n	801216a <_svfprintf_r+0x6ba>
 80121c8:	4613      	mov	r3, r2
 80121ca:	e7f0      	b.n	80121ae <_svfprintf_r+0x6fe>
 80121cc:	b10b      	cbz	r3, 80121d2 <_svfprintf_r+0x722>
 80121ce:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80121d2:	f015 0f20 	tst.w	r5, #32
 80121d6:	f107 0304 	add.w	r3, r7, #4
 80121da:	d008      	beq.n	80121ee <_svfprintf_r+0x73e>
 80121dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80121de:	683a      	ldr	r2, [r7, #0]
 80121e0:	17ce      	asrs	r6, r1, #31
 80121e2:	4608      	mov	r0, r1
 80121e4:	4631      	mov	r1, r6
 80121e6:	e9c2 0100 	strd	r0, r1, [r2]
 80121ea:	461f      	mov	r7, r3
 80121ec:	e49a      	b.n	8011b24 <_svfprintf_r+0x74>
 80121ee:	06ee      	lsls	r6, r5, #27
 80121f0:	d503      	bpl.n	80121fa <_svfprintf_r+0x74a>
 80121f2:	683a      	ldr	r2, [r7, #0]
 80121f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80121f6:	6011      	str	r1, [r2, #0]
 80121f8:	e7f7      	b.n	80121ea <_svfprintf_r+0x73a>
 80121fa:	0668      	lsls	r0, r5, #25
 80121fc:	d5f9      	bpl.n	80121f2 <_svfprintf_r+0x742>
 80121fe:	683a      	ldr	r2, [r7, #0]
 8012200:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8012204:	8011      	strh	r1, [r2, #0]
 8012206:	e7f0      	b.n	80121ea <_svfprintf_r+0x73a>
 8012208:	f045 0510 	orr.w	r5, r5, #16
 801220c:	f015 0320 	ands.w	r3, r5, #32
 8012210:	d022      	beq.n	8012258 <_svfprintf_r+0x7a8>
 8012212:	3707      	adds	r7, #7
 8012214:	f027 0707 	bic.w	r7, r7, #7
 8012218:	f107 0308 	add.w	r3, r7, #8
 801221c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8012220:	9304      	str	r3, [sp, #16]
 8012222:	2300      	movs	r3, #0
 8012224:	2200      	movs	r2, #0
 8012226:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 801222a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 801222e:	f000 83db 	beq.w	80129e8 <_svfprintf_r+0xf38>
 8012232:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8012236:	920b      	str	r2, [sp, #44]	; 0x2c
 8012238:	ea56 0207 	orrs.w	r2, r6, r7
 801223c:	f040 83d9 	bne.w	80129f2 <_svfprintf_r+0xf42>
 8012240:	f1b9 0f00 	cmp.w	r9, #0
 8012244:	f000 80aa 	beq.w	801239c <_svfprintf_r+0x8ec>
 8012248:	2b01      	cmp	r3, #1
 801224a:	d076      	beq.n	801233a <_svfprintf_r+0x88a>
 801224c:	2b02      	cmp	r3, #2
 801224e:	f000 8091 	beq.w	8012374 <_svfprintf_r+0x8c4>
 8012252:	2600      	movs	r6, #0
 8012254:	2700      	movs	r7, #0
 8012256:	e3d2      	b.n	80129fe <_svfprintf_r+0xf4e>
 8012258:	1d3a      	adds	r2, r7, #4
 801225a:	f015 0110 	ands.w	r1, r5, #16
 801225e:	9204      	str	r2, [sp, #16]
 8012260:	d002      	beq.n	8012268 <_svfprintf_r+0x7b8>
 8012262:	683e      	ldr	r6, [r7, #0]
 8012264:	2700      	movs	r7, #0
 8012266:	e7dd      	b.n	8012224 <_svfprintf_r+0x774>
 8012268:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 801226c:	d0f9      	beq.n	8012262 <_svfprintf_r+0x7b2>
 801226e:	883e      	ldrh	r6, [r7, #0]
 8012270:	2700      	movs	r7, #0
 8012272:	e7d6      	b.n	8012222 <_svfprintf_r+0x772>
 8012274:	1d3b      	adds	r3, r7, #4
 8012276:	9304      	str	r3, [sp, #16]
 8012278:	2330      	movs	r3, #48	; 0x30
 801227a:	2278      	movs	r2, #120	; 0x78
 801227c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8012280:	4b14      	ldr	r3, [pc, #80]	; (80122d4 <_svfprintf_r+0x824>)
 8012282:	683e      	ldr	r6, [r7, #0]
 8012284:	9311      	str	r3, [sp, #68]	; 0x44
 8012286:	2700      	movs	r7, #0
 8012288:	f045 0502 	orr.w	r5, r5, #2
 801228c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8012290:	2302      	movs	r3, #2
 8012292:	9202      	str	r2, [sp, #8]
 8012294:	e7c6      	b.n	8012224 <_svfprintf_r+0x774>
 8012296:	1d3b      	adds	r3, r7, #4
 8012298:	2600      	movs	r6, #0
 801229a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 801229e:	9304      	str	r3, [sp, #16]
 80122a0:	f8d7 8000 	ldr.w	r8, [r7]
 80122a4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80122a8:	d00a      	beq.n	80122c0 <_svfprintf_r+0x810>
 80122aa:	464a      	mov	r2, r9
 80122ac:	4631      	mov	r1, r6
 80122ae:	4640      	mov	r0, r8
 80122b0:	f7f4 fae6 	bl	8006880 <memchr>
 80122b4:	2800      	cmp	r0, #0
 80122b6:	f000 808d 	beq.w	80123d4 <_svfprintf_r+0x924>
 80122ba:	eba0 0908 	sub.w	r9, r0, r8
 80122be:	e5cb      	b.n	8011e58 <_svfprintf_r+0x3a8>
 80122c0:	4640      	mov	r0, r8
 80122c2:	f7f4 fb37 	bl	8006934 <strlen>
 80122c6:	4681      	mov	r9, r0
 80122c8:	e5c6      	b.n	8011e58 <_svfprintf_r+0x3a8>
 80122ca:	bf00      	nop
 80122cc:	080196e0 	.word	0x080196e0
 80122d0:	080196f0 	.word	0x080196f0
 80122d4:	080196cd 	.word	0x080196cd
 80122d8:	f045 0510 	orr.w	r5, r5, #16
 80122dc:	06a9      	lsls	r1, r5, #26
 80122de:	d509      	bpl.n	80122f4 <_svfprintf_r+0x844>
 80122e0:	3707      	adds	r7, #7
 80122e2:	f027 0707 	bic.w	r7, r7, #7
 80122e6:	f107 0308 	add.w	r3, r7, #8
 80122ea:	e9d7 6700 	ldrd	r6, r7, [r7]
 80122ee:	9304      	str	r3, [sp, #16]
 80122f0:	2301      	movs	r3, #1
 80122f2:	e797      	b.n	8012224 <_svfprintf_r+0x774>
 80122f4:	1d3b      	adds	r3, r7, #4
 80122f6:	f015 0f10 	tst.w	r5, #16
 80122fa:	9304      	str	r3, [sp, #16]
 80122fc:	d001      	beq.n	8012302 <_svfprintf_r+0x852>
 80122fe:	683e      	ldr	r6, [r7, #0]
 8012300:	e002      	b.n	8012308 <_svfprintf_r+0x858>
 8012302:	066a      	lsls	r2, r5, #25
 8012304:	d5fb      	bpl.n	80122fe <_svfprintf_r+0x84e>
 8012306:	883e      	ldrh	r6, [r7, #0]
 8012308:	2700      	movs	r7, #0
 801230a:	e7f1      	b.n	80122f0 <_svfprintf_r+0x840>
 801230c:	b10b      	cbz	r3, 8012312 <_svfprintf_r+0x862>
 801230e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8012312:	4ba3      	ldr	r3, [pc, #652]	; (80125a0 <_svfprintf_r+0xaf0>)
 8012314:	e4c2      	b.n	8011c9c <_svfprintf_r+0x1ec>
 8012316:	1d3b      	adds	r3, r7, #4
 8012318:	f015 0f10 	tst.w	r5, #16
 801231c:	9304      	str	r3, [sp, #16]
 801231e:	d001      	beq.n	8012324 <_svfprintf_r+0x874>
 8012320:	683e      	ldr	r6, [r7, #0]
 8012322:	e002      	b.n	801232a <_svfprintf_r+0x87a>
 8012324:	066e      	lsls	r6, r5, #25
 8012326:	d5fb      	bpl.n	8012320 <_svfprintf_r+0x870>
 8012328:	883e      	ldrh	r6, [r7, #0]
 801232a:	2700      	movs	r7, #0
 801232c:	e4c2      	b.n	8011cb4 <_svfprintf_r+0x204>
 801232e:	4643      	mov	r3, r8
 8012330:	e366      	b.n	8012a00 <_svfprintf_r+0xf50>
 8012332:	2f00      	cmp	r7, #0
 8012334:	bf08      	it	eq
 8012336:	2e0a      	cmpeq	r6, #10
 8012338:	d205      	bcs.n	8012346 <_svfprintf_r+0x896>
 801233a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 801233e:	3630      	adds	r6, #48	; 0x30
 8012340:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8012344:	e377      	b.n	8012a36 <_svfprintf_r+0xf86>
 8012346:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 801234a:	4630      	mov	r0, r6
 801234c:	4639      	mov	r1, r7
 801234e:	220a      	movs	r2, #10
 8012350:	2300      	movs	r3, #0
 8012352:	f7f4 ff87 	bl	8007264 <__aeabi_uldivmod>
 8012356:	3230      	adds	r2, #48	; 0x30
 8012358:	f808 2d01 	strb.w	r2, [r8, #-1]!
 801235c:	2300      	movs	r3, #0
 801235e:	4630      	mov	r0, r6
 8012360:	4639      	mov	r1, r7
 8012362:	220a      	movs	r2, #10
 8012364:	f7f4 ff7e 	bl	8007264 <__aeabi_uldivmod>
 8012368:	4606      	mov	r6, r0
 801236a:	460f      	mov	r7, r1
 801236c:	ea56 0307 	orrs.w	r3, r6, r7
 8012370:	d1eb      	bne.n	801234a <_svfprintf_r+0x89a>
 8012372:	e360      	b.n	8012a36 <_svfprintf_r+0xf86>
 8012374:	2600      	movs	r6, #0
 8012376:	2700      	movs	r7, #0
 8012378:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 801237c:	f006 030f 	and.w	r3, r6, #15
 8012380:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8012382:	5cd3      	ldrb	r3, [r2, r3]
 8012384:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8012388:	0933      	lsrs	r3, r6, #4
 801238a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 801238e:	093a      	lsrs	r2, r7, #4
 8012390:	461e      	mov	r6, r3
 8012392:	4617      	mov	r7, r2
 8012394:	ea56 0307 	orrs.w	r3, r6, r7
 8012398:	d1f0      	bne.n	801237c <_svfprintf_r+0x8cc>
 801239a:	e34c      	b.n	8012a36 <_svfprintf_r+0xf86>
 801239c:	b93b      	cbnz	r3, 80123ae <_svfprintf_r+0x8fe>
 801239e:	07ea      	lsls	r2, r5, #31
 80123a0:	d505      	bpl.n	80123ae <_svfprintf_r+0x8fe>
 80123a2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80123a6:	2330      	movs	r3, #48	; 0x30
 80123a8:	f808 3d41 	strb.w	r3, [r8, #-65]!
 80123ac:	e343      	b.n	8012a36 <_svfprintf_r+0xf86>
 80123ae:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80123b2:	e340      	b.n	8012a36 <_svfprintf_r+0xf86>
 80123b4:	b10b      	cbz	r3, 80123ba <_svfprintf_r+0x90a>
 80123b6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80123ba:	9b02      	ldr	r3, [sp, #8]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	f000 82f7 	beq.w	80129b0 <_svfprintf_r+0xf00>
 80123c2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80123c6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80123ca:	2600      	movs	r6, #0
 80123cc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80123d0:	9704      	str	r7, [sp, #16]
 80123d2:	e4e8      	b.n	8011da6 <_svfprintf_r+0x2f6>
 80123d4:	4606      	mov	r6, r0
 80123d6:	e53f      	b.n	8011e58 <_svfprintf_r+0x3a8>
 80123d8:	2310      	movs	r3, #16
 80123da:	6063      	str	r3, [r4, #4]
 80123dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80123de:	3310      	adds	r3, #16
 80123e0:	9321      	str	r3, [sp, #132]	; 0x84
 80123e2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80123e4:	3301      	adds	r3, #1
 80123e6:	2b07      	cmp	r3, #7
 80123e8:	9320      	str	r3, [sp, #128]	; 0x80
 80123ea:	dc04      	bgt.n	80123f6 <_svfprintf_r+0x946>
 80123ec:	3408      	adds	r4, #8
 80123ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123f0:	3b10      	subs	r3, #16
 80123f2:	930c      	str	r3, [sp, #48]	; 0x30
 80123f4:	e615      	b.n	8012022 <_svfprintf_r+0x572>
 80123f6:	aa1f      	add	r2, sp, #124	; 0x7c
 80123f8:	4651      	mov	r1, sl
 80123fa:	4658      	mov	r0, fp
 80123fc:	f002 f8e2 	bl	80145c4 <__ssprint_r>
 8012400:	2800      	cmp	r0, #0
 8012402:	f040 82b6 	bne.w	8012972 <_svfprintf_r+0xec2>
 8012406:	ac2c      	add	r4, sp, #176	; 0xb0
 8012408:	e7f1      	b.n	80123ee <_svfprintf_r+0x93e>
 801240a:	aa1f      	add	r2, sp, #124	; 0x7c
 801240c:	4651      	mov	r1, sl
 801240e:	4658      	mov	r0, fp
 8012410:	f002 f8d8 	bl	80145c4 <__ssprint_r>
 8012414:	2800      	cmp	r0, #0
 8012416:	f040 82ac 	bne.w	8012972 <_svfprintf_r+0xec2>
 801241a:	ac2c      	add	r4, sp, #176	; 0xb0
 801241c:	e614      	b.n	8012048 <_svfprintf_r+0x598>
 801241e:	aa1f      	add	r2, sp, #124	; 0x7c
 8012420:	4651      	mov	r1, sl
 8012422:	4658      	mov	r0, fp
 8012424:	f002 f8ce 	bl	80145c4 <__ssprint_r>
 8012428:	2800      	cmp	r0, #0
 801242a:	f040 82a2 	bne.w	8012972 <_svfprintf_r+0xec2>
 801242e:	ac2c      	add	r4, sp, #176	; 0xb0
 8012430:	e61c      	b.n	801206c <_svfprintf_r+0x5bc>
 8012432:	aa1f      	add	r2, sp, #124	; 0x7c
 8012434:	4651      	mov	r1, sl
 8012436:	4658      	mov	r0, fp
 8012438:	f002 f8c4 	bl	80145c4 <__ssprint_r>
 801243c:	2800      	cmp	r0, #0
 801243e:	f040 8298 	bne.w	8012972 <_svfprintf_r+0xec2>
 8012442:	ac2c      	add	r4, sp, #176	; 0xb0
 8012444:	e622      	b.n	801208c <_svfprintf_r+0x5dc>
 8012446:	2210      	movs	r2, #16
 8012448:	6062      	str	r2, [r4, #4]
 801244a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801244c:	3210      	adds	r2, #16
 801244e:	9221      	str	r2, [sp, #132]	; 0x84
 8012450:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012452:	3201      	adds	r2, #1
 8012454:	2a07      	cmp	r2, #7
 8012456:	9220      	str	r2, [sp, #128]	; 0x80
 8012458:	dc02      	bgt.n	8012460 <_svfprintf_r+0x9b0>
 801245a:	3408      	adds	r4, #8
 801245c:	3b10      	subs	r3, #16
 801245e:	e61d      	b.n	801209c <_svfprintf_r+0x5ec>
 8012460:	aa1f      	add	r2, sp, #124	; 0x7c
 8012462:	4651      	mov	r1, sl
 8012464:	4658      	mov	r0, fp
 8012466:	930c      	str	r3, [sp, #48]	; 0x30
 8012468:	f002 f8ac 	bl	80145c4 <__ssprint_r>
 801246c:	2800      	cmp	r0, #0
 801246e:	f040 8280 	bne.w	8012972 <_svfprintf_r+0xec2>
 8012472:	ac2c      	add	r4, sp, #176	; 0xb0
 8012474:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012476:	e7f1      	b.n	801245c <_svfprintf_r+0x9ac>
 8012478:	aa1f      	add	r2, sp, #124	; 0x7c
 801247a:	4651      	mov	r1, sl
 801247c:	4658      	mov	r0, fp
 801247e:	f002 f8a1 	bl	80145c4 <__ssprint_r>
 8012482:	2800      	cmp	r0, #0
 8012484:	f040 8275 	bne.w	8012972 <_svfprintf_r+0xec2>
 8012488:	ac2c      	add	r4, sp, #176	; 0xb0
 801248a:	e617      	b.n	80120bc <_svfprintf_r+0x60c>
 801248c:	2310      	movs	r3, #16
 801248e:	6063      	str	r3, [r4, #4]
 8012490:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012492:	3310      	adds	r3, #16
 8012494:	9321      	str	r3, [sp, #132]	; 0x84
 8012496:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012498:	3301      	adds	r3, #1
 801249a:	2b07      	cmp	r3, #7
 801249c:	9320      	str	r3, [sp, #128]	; 0x80
 801249e:	dc02      	bgt.n	80124a6 <_svfprintf_r+0x9f6>
 80124a0:	3408      	adds	r4, #8
 80124a2:	3e10      	subs	r6, #16
 80124a4:	e60e      	b.n	80120c4 <_svfprintf_r+0x614>
 80124a6:	aa1f      	add	r2, sp, #124	; 0x7c
 80124a8:	4651      	mov	r1, sl
 80124aa:	4658      	mov	r0, fp
 80124ac:	f002 f88a 	bl	80145c4 <__ssprint_r>
 80124b0:	2800      	cmp	r0, #0
 80124b2:	f040 825e 	bne.w	8012972 <_svfprintf_r+0xec2>
 80124b6:	ac2c      	add	r4, sp, #176	; 0xb0
 80124b8:	e7f3      	b.n	80124a2 <_svfprintf_r+0x9f2>
 80124ba:	aa1f      	add	r2, sp, #124	; 0x7c
 80124bc:	4651      	mov	r1, sl
 80124be:	4658      	mov	r0, fp
 80124c0:	f002 f880 	bl	80145c4 <__ssprint_r>
 80124c4:	2800      	cmp	r0, #0
 80124c6:	f040 8254 	bne.w	8012972 <_svfprintf_r+0xec2>
 80124ca:	ac2c      	add	r4, sp, #176	; 0xb0
 80124cc:	e60a      	b.n	80120e4 <_svfprintf_r+0x634>
 80124ce:	9b02      	ldr	r3, [sp, #8]
 80124d0:	2b65      	cmp	r3, #101	; 0x65
 80124d2:	f340 81a9 	ble.w	8012828 <_svfprintf_r+0xd78>
 80124d6:	2200      	movs	r2, #0
 80124d8:	2300      	movs	r3, #0
 80124da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80124de:	f7f4 fe51 	bl	8007184 <__aeabi_dcmpeq>
 80124e2:	2800      	cmp	r0, #0
 80124e4:	d062      	beq.n	80125ac <_svfprintf_r+0xafc>
 80124e6:	4b2f      	ldr	r3, [pc, #188]	; (80125a4 <_svfprintf_r+0xaf4>)
 80124e8:	6023      	str	r3, [r4, #0]
 80124ea:	2301      	movs	r3, #1
 80124ec:	6063      	str	r3, [r4, #4]
 80124ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80124f0:	3301      	adds	r3, #1
 80124f2:	9321      	str	r3, [sp, #132]	; 0x84
 80124f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80124f6:	3301      	adds	r3, #1
 80124f8:	2b07      	cmp	r3, #7
 80124fa:	9320      	str	r3, [sp, #128]	; 0x80
 80124fc:	dc25      	bgt.n	801254a <_svfprintf_r+0xa9a>
 80124fe:	3408      	adds	r4, #8
 8012500:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012502:	9a03      	ldr	r2, [sp, #12]
 8012504:	4293      	cmp	r3, r2
 8012506:	db02      	blt.n	801250e <_svfprintf_r+0xa5e>
 8012508:	07ee      	lsls	r6, r5, #31
 801250a:	f57f ae02 	bpl.w	8012112 <_svfprintf_r+0x662>
 801250e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012510:	6023      	str	r3, [r4, #0]
 8012512:	9b08      	ldr	r3, [sp, #32]
 8012514:	6063      	str	r3, [r4, #4]
 8012516:	9a08      	ldr	r2, [sp, #32]
 8012518:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801251a:	4413      	add	r3, r2
 801251c:	9321      	str	r3, [sp, #132]	; 0x84
 801251e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012520:	3301      	adds	r3, #1
 8012522:	2b07      	cmp	r3, #7
 8012524:	9320      	str	r3, [sp, #128]	; 0x80
 8012526:	dc1a      	bgt.n	801255e <_svfprintf_r+0xaae>
 8012528:	3408      	adds	r4, #8
 801252a:	9b03      	ldr	r3, [sp, #12]
 801252c:	1e5e      	subs	r6, r3, #1
 801252e:	2e00      	cmp	r6, #0
 8012530:	f77f adef 	ble.w	8012112 <_svfprintf_r+0x662>
 8012534:	4f1c      	ldr	r7, [pc, #112]	; (80125a8 <_svfprintf_r+0xaf8>)
 8012536:	f04f 0810 	mov.w	r8, #16
 801253a:	2e10      	cmp	r6, #16
 801253c:	6027      	str	r7, [r4, #0]
 801253e:	dc18      	bgt.n	8012572 <_svfprintf_r+0xac2>
 8012540:	6066      	str	r6, [r4, #4]
 8012542:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012544:	441e      	add	r6, r3
 8012546:	9621      	str	r6, [sp, #132]	; 0x84
 8012548:	e5d4      	b.n	80120f4 <_svfprintf_r+0x644>
 801254a:	aa1f      	add	r2, sp, #124	; 0x7c
 801254c:	4651      	mov	r1, sl
 801254e:	4658      	mov	r0, fp
 8012550:	f002 f838 	bl	80145c4 <__ssprint_r>
 8012554:	2800      	cmp	r0, #0
 8012556:	f040 820c 	bne.w	8012972 <_svfprintf_r+0xec2>
 801255a:	ac2c      	add	r4, sp, #176	; 0xb0
 801255c:	e7d0      	b.n	8012500 <_svfprintf_r+0xa50>
 801255e:	aa1f      	add	r2, sp, #124	; 0x7c
 8012560:	4651      	mov	r1, sl
 8012562:	4658      	mov	r0, fp
 8012564:	f002 f82e 	bl	80145c4 <__ssprint_r>
 8012568:	2800      	cmp	r0, #0
 801256a:	f040 8202 	bne.w	8012972 <_svfprintf_r+0xec2>
 801256e:	ac2c      	add	r4, sp, #176	; 0xb0
 8012570:	e7db      	b.n	801252a <_svfprintf_r+0xa7a>
 8012572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012574:	f8c4 8004 	str.w	r8, [r4, #4]
 8012578:	3310      	adds	r3, #16
 801257a:	9321      	str	r3, [sp, #132]	; 0x84
 801257c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801257e:	3301      	adds	r3, #1
 8012580:	2b07      	cmp	r3, #7
 8012582:	9320      	str	r3, [sp, #128]	; 0x80
 8012584:	dc02      	bgt.n	801258c <_svfprintf_r+0xadc>
 8012586:	3408      	adds	r4, #8
 8012588:	3e10      	subs	r6, #16
 801258a:	e7d6      	b.n	801253a <_svfprintf_r+0xa8a>
 801258c:	aa1f      	add	r2, sp, #124	; 0x7c
 801258e:	4651      	mov	r1, sl
 8012590:	4658      	mov	r0, fp
 8012592:	f002 f817 	bl	80145c4 <__ssprint_r>
 8012596:	2800      	cmp	r0, #0
 8012598:	f040 81eb 	bne.w	8012972 <_svfprintf_r+0xec2>
 801259c:	ac2c      	add	r4, sp, #176	; 0xb0
 801259e:	e7f3      	b.n	8012588 <_svfprintf_r+0xad8>
 80125a0:	080196cd 	.word	0x080196cd
 80125a4:	080196de 	.word	0x080196de
 80125a8:	080196f0 	.word	0x080196f0
 80125ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	dc7a      	bgt.n	80126a8 <_svfprintf_r+0xbf8>
 80125b2:	4b9b      	ldr	r3, [pc, #620]	; (8012820 <_svfprintf_r+0xd70>)
 80125b4:	6023      	str	r3, [r4, #0]
 80125b6:	2301      	movs	r3, #1
 80125b8:	6063      	str	r3, [r4, #4]
 80125ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125bc:	3301      	adds	r3, #1
 80125be:	9321      	str	r3, [sp, #132]	; 0x84
 80125c0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80125c2:	3301      	adds	r3, #1
 80125c4:	2b07      	cmp	r3, #7
 80125c6:	9320      	str	r3, [sp, #128]	; 0x80
 80125c8:	dc44      	bgt.n	8012654 <_svfprintf_r+0xba4>
 80125ca:	3408      	adds	r4, #8
 80125cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80125ce:	b923      	cbnz	r3, 80125da <_svfprintf_r+0xb2a>
 80125d0:	9b03      	ldr	r3, [sp, #12]
 80125d2:	b913      	cbnz	r3, 80125da <_svfprintf_r+0xb2a>
 80125d4:	07e8      	lsls	r0, r5, #31
 80125d6:	f57f ad9c 	bpl.w	8012112 <_svfprintf_r+0x662>
 80125da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80125dc:	6023      	str	r3, [r4, #0]
 80125de:	9b08      	ldr	r3, [sp, #32]
 80125e0:	6063      	str	r3, [r4, #4]
 80125e2:	9a08      	ldr	r2, [sp, #32]
 80125e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80125e6:	4413      	add	r3, r2
 80125e8:	9321      	str	r3, [sp, #132]	; 0x84
 80125ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80125ec:	3301      	adds	r3, #1
 80125ee:	2b07      	cmp	r3, #7
 80125f0:	9320      	str	r3, [sp, #128]	; 0x80
 80125f2:	dc39      	bgt.n	8012668 <_svfprintf_r+0xbb8>
 80125f4:	f104 0308 	add.w	r3, r4, #8
 80125f8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80125fa:	2e00      	cmp	r6, #0
 80125fc:	da19      	bge.n	8012632 <_svfprintf_r+0xb82>
 80125fe:	4f89      	ldr	r7, [pc, #548]	; (8012824 <_svfprintf_r+0xd74>)
 8012600:	4276      	negs	r6, r6
 8012602:	2410      	movs	r4, #16
 8012604:	2e10      	cmp	r6, #16
 8012606:	601f      	str	r7, [r3, #0]
 8012608:	dc38      	bgt.n	801267c <_svfprintf_r+0xbcc>
 801260a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801260c:	605e      	str	r6, [r3, #4]
 801260e:	4416      	add	r6, r2
 8012610:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012612:	9621      	str	r6, [sp, #132]	; 0x84
 8012614:	3201      	adds	r2, #1
 8012616:	2a07      	cmp	r2, #7
 8012618:	f103 0308 	add.w	r3, r3, #8
 801261c:	9220      	str	r2, [sp, #128]	; 0x80
 801261e:	dd08      	ble.n	8012632 <_svfprintf_r+0xb82>
 8012620:	aa1f      	add	r2, sp, #124	; 0x7c
 8012622:	4651      	mov	r1, sl
 8012624:	4658      	mov	r0, fp
 8012626:	f001 ffcd 	bl	80145c4 <__ssprint_r>
 801262a:	2800      	cmp	r0, #0
 801262c:	f040 81a1 	bne.w	8012972 <_svfprintf_r+0xec2>
 8012630:	ab2c      	add	r3, sp, #176	; 0xb0
 8012632:	9a03      	ldr	r2, [sp, #12]
 8012634:	605a      	str	r2, [r3, #4]
 8012636:	9903      	ldr	r1, [sp, #12]
 8012638:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801263a:	f8c3 8000 	str.w	r8, [r3]
 801263e:	440a      	add	r2, r1
 8012640:	9221      	str	r2, [sp, #132]	; 0x84
 8012642:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012644:	3201      	adds	r2, #1
 8012646:	2a07      	cmp	r2, #7
 8012648:	9220      	str	r2, [sp, #128]	; 0x80
 801264a:	f73f ad59 	bgt.w	8012100 <_svfprintf_r+0x650>
 801264e:	f103 0408 	add.w	r4, r3, #8
 8012652:	e55e      	b.n	8012112 <_svfprintf_r+0x662>
 8012654:	aa1f      	add	r2, sp, #124	; 0x7c
 8012656:	4651      	mov	r1, sl
 8012658:	4658      	mov	r0, fp
 801265a:	f001 ffb3 	bl	80145c4 <__ssprint_r>
 801265e:	2800      	cmp	r0, #0
 8012660:	f040 8187 	bne.w	8012972 <_svfprintf_r+0xec2>
 8012664:	ac2c      	add	r4, sp, #176	; 0xb0
 8012666:	e7b1      	b.n	80125cc <_svfprintf_r+0xb1c>
 8012668:	aa1f      	add	r2, sp, #124	; 0x7c
 801266a:	4651      	mov	r1, sl
 801266c:	4658      	mov	r0, fp
 801266e:	f001 ffa9 	bl	80145c4 <__ssprint_r>
 8012672:	2800      	cmp	r0, #0
 8012674:	f040 817d 	bne.w	8012972 <_svfprintf_r+0xec2>
 8012678:	ab2c      	add	r3, sp, #176	; 0xb0
 801267a:	e7bd      	b.n	80125f8 <_svfprintf_r+0xb48>
 801267c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801267e:	605c      	str	r4, [r3, #4]
 8012680:	3210      	adds	r2, #16
 8012682:	9221      	str	r2, [sp, #132]	; 0x84
 8012684:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012686:	3201      	adds	r2, #1
 8012688:	2a07      	cmp	r2, #7
 801268a:	9220      	str	r2, [sp, #128]	; 0x80
 801268c:	dc02      	bgt.n	8012694 <_svfprintf_r+0xbe4>
 801268e:	3308      	adds	r3, #8
 8012690:	3e10      	subs	r6, #16
 8012692:	e7b7      	b.n	8012604 <_svfprintf_r+0xb54>
 8012694:	aa1f      	add	r2, sp, #124	; 0x7c
 8012696:	4651      	mov	r1, sl
 8012698:	4658      	mov	r0, fp
 801269a:	f001 ff93 	bl	80145c4 <__ssprint_r>
 801269e:	2800      	cmp	r0, #0
 80126a0:	f040 8167 	bne.w	8012972 <_svfprintf_r+0xec2>
 80126a4:	ab2c      	add	r3, sp, #176	; 0xb0
 80126a6:	e7f3      	b.n	8012690 <_svfprintf_r+0xbe0>
 80126a8:	9b03      	ldr	r3, [sp, #12]
 80126aa:	42bb      	cmp	r3, r7
 80126ac:	bfa8      	it	ge
 80126ae:	463b      	movge	r3, r7
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	461e      	mov	r6, r3
 80126b4:	dd0b      	ble.n	80126ce <_svfprintf_r+0xc1e>
 80126b6:	6063      	str	r3, [r4, #4]
 80126b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80126ba:	f8c4 8000 	str.w	r8, [r4]
 80126be:	4433      	add	r3, r6
 80126c0:	9321      	str	r3, [sp, #132]	; 0x84
 80126c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80126c4:	3301      	adds	r3, #1
 80126c6:	2b07      	cmp	r3, #7
 80126c8:	9320      	str	r3, [sp, #128]	; 0x80
 80126ca:	dc5f      	bgt.n	801278c <_svfprintf_r+0xcdc>
 80126cc:	3408      	adds	r4, #8
 80126ce:	2e00      	cmp	r6, #0
 80126d0:	bfac      	ite	ge
 80126d2:	1bbe      	subge	r6, r7, r6
 80126d4:	463e      	movlt	r6, r7
 80126d6:	2e00      	cmp	r6, #0
 80126d8:	dd0f      	ble.n	80126fa <_svfprintf_r+0xc4a>
 80126da:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8012824 <_svfprintf_r+0xd74>
 80126de:	f8c4 9000 	str.w	r9, [r4]
 80126e2:	2e10      	cmp	r6, #16
 80126e4:	dc5c      	bgt.n	80127a0 <_svfprintf_r+0xcf0>
 80126e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80126e8:	6066      	str	r6, [r4, #4]
 80126ea:	441e      	add	r6, r3
 80126ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80126ee:	9621      	str	r6, [sp, #132]	; 0x84
 80126f0:	3301      	adds	r3, #1
 80126f2:	2b07      	cmp	r3, #7
 80126f4:	9320      	str	r3, [sp, #128]	; 0x80
 80126f6:	dc6a      	bgt.n	80127ce <_svfprintf_r+0xd1e>
 80126f8:	3408      	adds	r4, #8
 80126fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80126fc:	9a03      	ldr	r2, [sp, #12]
 80126fe:	4293      	cmp	r3, r2
 8012700:	db01      	blt.n	8012706 <_svfprintf_r+0xc56>
 8012702:	07e9      	lsls	r1, r5, #31
 8012704:	d50d      	bpl.n	8012722 <_svfprintf_r+0xc72>
 8012706:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012708:	6023      	str	r3, [r4, #0]
 801270a:	9b08      	ldr	r3, [sp, #32]
 801270c:	6063      	str	r3, [r4, #4]
 801270e:	9a08      	ldr	r2, [sp, #32]
 8012710:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012712:	4413      	add	r3, r2
 8012714:	9321      	str	r3, [sp, #132]	; 0x84
 8012716:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012718:	3301      	adds	r3, #1
 801271a:	2b07      	cmp	r3, #7
 801271c:	9320      	str	r3, [sp, #128]	; 0x80
 801271e:	dc60      	bgt.n	80127e2 <_svfprintf_r+0xd32>
 8012720:	3408      	adds	r4, #8
 8012722:	9b03      	ldr	r3, [sp, #12]
 8012724:	9a03      	ldr	r2, [sp, #12]
 8012726:	1bde      	subs	r6, r3, r7
 8012728:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801272a:	1ad3      	subs	r3, r2, r3
 801272c:	429e      	cmp	r6, r3
 801272e:	bfa8      	it	ge
 8012730:	461e      	movge	r6, r3
 8012732:	2e00      	cmp	r6, #0
 8012734:	dd0b      	ble.n	801274e <_svfprintf_r+0xc9e>
 8012736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012738:	6066      	str	r6, [r4, #4]
 801273a:	4433      	add	r3, r6
 801273c:	9321      	str	r3, [sp, #132]	; 0x84
 801273e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012740:	3301      	adds	r3, #1
 8012742:	4447      	add	r7, r8
 8012744:	2b07      	cmp	r3, #7
 8012746:	6027      	str	r7, [r4, #0]
 8012748:	9320      	str	r3, [sp, #128]	; 0x80
 801274a:	dc54      	bgt.n	80127f6 <_svfprintf_r+0xd46>
 801274c:	3408      	adds	r4, #8
 801274e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012750:	9a03      	ldr	r2, [sp, #12]
 8012752:	2e00      	cmp	r6, #0
 8012754:	eba2 0303 	sub.w	r3, r2, r3
 8012758:	bfac      	ite	ge
 801275a:	1b9e      	subge	r6, r3, r6
 801275c:	461e      	movlt	r6, r3
 801275e:	2e00      	cmp	r6, #0
 8012760:	f77f acd7 	ble.w	8012112 <_svfprintf_r+0x662>
 8012764:	4f2f      	ldr	r7, [pc, #188]	; (8012824 <_svfprintf_r+0xd74>)
 8012766:	f04f 0810 	mov.w	r8, #16
 801276a:	2e10      	cmp	r6, #16
 801276c:	6027      	str	r7, [r4, #0]
 801276e:	f77f aee7 	ble.w	8012540 <_svfprintf_r+0xa90>
 8012772:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012774:	f8c4 8004 	str.w	r8, [r4, #4]
 8012778:	3310      	adds	r3, #16
 801277a:	9321      	str	r3, [sp, #132]	; 0x84
 801277c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801277e:	3301      	adds	r3, #1
 8012780:	2b07      	cmp	r3, #7
 8012782:	9320      	str	r3, [sp, #128]	; 0x80
 8012784:	dc41      	bgt.n	801280a <_svfprintf_r+0xd5a>
 8012786:	3408      	adds	r4, #8
 8012788:	3e10      	subs	r6, #16
 801278a:	e7ee      	b.n	801276a <_svfprintf_r+0xcba>
 801278c:	aa1f      	add	r2, sp, #124	; 0x7c
 801278e:	4651      	mov	r1, sl
 8012790:	4658      	mov	r0, fp
 8012792:	f001 ff17 	bl	80145c4 <__ssprint_r>
 8012796:	2800      	cmp	r0, #0
 8012798:	f040 80eb 	bne.w	8012972 <_svfprintf_r+0xec2>
 801279c:	ac2c      	add	r4, sp, #176	; 0xb0
 801279e:	e796      	b.n	80126ce <_svfprintf_r+0xc1e>
 80127a0:	2310      	movs	r3, #16
 80127a2:	6063      	str	r3, [r4, #4]
 80127a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80127a6:	3310      	adds	r3, #16
 80127a8:	9321      	str	r3, [sp, #132]	; 0x84
 80127aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80127ac:	3301      	adds	r3, #1
 80127ae:	2b07      	cmp	r3, #7
 80127b0:	9320      	str	r3, [sp, #128]	; 0x80
 80127b2:	dc02      	bgt.n	80127ba <_svfprintf_r+0xd0a>
 80127b4:	3408      	adds	r4, #8
 80127b6:	3e10      	subs	r6, #16
 80127b8:	e791      	b.n	80126de <_svfprintf_r+0xc2e>
 80127ba:	aa1f      	add	r2, sp, #124	; 0x7c
 80127bc:	4651      	mov	r1, sl
 80127be:	4658      	mov	r0, fp
 80127c0:	f001 ff00 	bl	80145c4 <__ssprint_r>
 80127c4:	2800      	cmp	r0, #0
 80127c6:	f040 80d4 	bne.w	8012972 <_svfprintf_r+0xec2>
 80127ca:	ac2c      	add	r4, sp, #176	; 0xb0
 80127cc:	e7f3      	b.n	80127b6 <_svfprintf_r+0xd06>
 80127ce:	aa1f      	add	r2, sp, #124	; 0x7c
 80127d0:	4651      	mov	r1, sl
 80127d2:	4658      	mov	r0, fp
 80127d4:	f001 fef6 	bl	80145c4 <__ssprint_r>
 80127d8:	2800      	cmp	r0, #0
 80127da:	f040 80ca 	bne.w	8012972 <_svfprintf_r+0xec2>
 80127de:	ac2c      	add	r4, sp, #176	; 0xb0
 80127e0:	e78b      	b.n	80126fa <_svfprintf_r+0xc4a>
 80127e2:	aa1f      	add	r2, sp, #124	; 0x7c
 80127e4:	4651      	mov	r1, sl
 80127e6:	4658      	mov	r0, fp
 80127e8:	f001 feec 	bl	80145c4 <__ssprint_r>
 80127ec:	2800      	cmp	r0, #0
 80127ee:	f040 80c0 	bne.w	8012972 <_svfprintf_r+0xec2>
 80127f2:	ac2c      	add	r4, sp, #176	; 0xb0
 80127f4:	e795      	b.n	8012722 <_svfprintf_r+0xc72>
 80127f6:	aa1f      	add	r2, sp, #124	; 0x7c
 80127f8:	4651      	mov	r1, sl
 80127fa:	4658      	mov	r0, fp
 80127fc:	f001 fee2 	bl	80145c4 <__ssprint_r>
 8012800:	2800      	cmp	r0, #0
 8012802:	f040 80b6 	bne.w	8012972 <_svfprintf_r+0xec2>
 8012806:	ac2c      	add	r4, sp, #176	; 0xb0
 8012808:	e7a1      	b.n	801274e <_svfprintf_r+0xc9e>
 801280a:	aa1f      	add	r2, sp, #124	; 0x7c
 801280c:	4651      	mov	r1, sl
 801280e:	4658      	mov	r0, fp
 8012810:	f001 fed8 	bl	80145c4 <__ssprint_r>
 8012814:	2800      	cmp	r0, #0
 8012816:	f040 80ac 	bne.w	8012972 <_svfprintf_r+0xec2>
 801281a:	ac2c      	add	r4, sp, #176	; 0xb0
 801281c:	e7b4      	b.n	8012788 <_svfprintf_r+0xcd8>
 801281e:	bf00      	nop
 8012820:	080196de 	.word	0x080196de
 8012824:	080196f0 	.word	0x080196f0
 8012828:	9b03      	ldr	r3, [sp, #12]
 801282a:	2b01      	cmp	r3, #1
 801282c:	dc01      	bgt.n	8012832 <_svfprintf_r+0xd82>
 801282e:	07ea      	lsls	r2, r5, #31
 8012830:	d576      	bpl.n	8012920 <_svfprintf_r+0xe70>
 8012832:	2301      	movs	r3, #1
 8012834:	6063      	str	r3, [r4, #4]
 8012836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012838:	f8c4 8000 	str.w	r8, [r4]
 801283c:	3301      	adds	r3, #1
 801283e:	9321      	str	r3, [sp, #132]	; 0x84
 8012840:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012842:	3301      	adds	r3, #1
 8012844:	2b07      	cmp	r3, #7
 8012846:	9320      	str	r3, [sp, #128]	; 0x80
 8012848:	dc36      	bgt.n	80128b8 <_svfprintf_r+0xe08>
 801284a:	3408      	adds	r4, #8
 801284c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801284e:	6023      	str	r3, [r4, #0]
 8012850:	9b08      	ldr	r3, [sp, #32]
 8012852:	6063      	str	r3, [r4, #4]
 8012854:	9a08      	ldr	r2, [sp, #32]
 8012856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012858:	4413      	add	r3, r2
 801285a:	9321      	str	r3, [sp, #132]	; 0x84
 801285c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801285e:	3301      	adds	r3, #1
 8012860:	2b07      	cmp	r3, #7
 8012862:	9320      	str	r3, [sp, #128]	; 0x80
 8012864:	dc31      	bgt.n	80128ca <_svfprintf_r+0xe1a>
 8012866:	3408      	adds	r4, #8
 8012868:	2300      	movs	r3, #0
 801286a:	2200      	movs	r2, #0
 801286c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012870:	f7f4 fc88 	bl	8007184 <__aeabi_dcmpeq>
 8012874:	9b03      	ldr	r3, [sp, #12]
 8012876:	1e5e      	subs	r6, r3, #1
 8012878:	2800      	cmp	r0, #0
 801287a:	d12f      	bne.n	80128dc <_svfprintf_r+0xe2c>
 801287c:	f108 0301 	add.w	r3, r8, #1
 8012880:	e884 0048 	stmia.w	r4, {r3, r6}
 8012884:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012886:	9a03      	ldr	r2, [sp, #12]
 8012888:	3b01      	subs	r3, #1
 801288a:	4413      	add	r3, r2
 801288c:	9321      	str	r3, [sp, #132]	; 0x84
 801288e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012890:	3301      	adds	r3, #1
 8012892:	2b07      	cmp	r3, #7
 8012894:	9320      	str	r3, [sp, #128]	; 0x80
 8012896:	dd4a      	ble.n	801292e <_svfprintf_r+0xe7e>
 8012898:	aa1f      	add	r2, sp, #124	; 0x7c
 801289a:	4651      	mov	r1, sl
 801289c:	4658      	mov	r0, fp
 801289e:	f001 fe91 	bl	80145c4 <__ssprint_r>
 80128a2:	2800      	cmp	r0, #0
 80128a4:	d165      	bne.n	8012972 <_svfprintf_r+0xec2>
 80128a6:	ac2c      	add	r4, sp, #176	; 0xb0
 80128a8:	ab1b      	add	r3, sp, #108	; 0x6c
 80128aa:	6023      	str	r3, [r4, #0]
 80128ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80128ae:	6063      	str	r3, [r4, #4]
 80128b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80128b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80128b4:	4413      	add	r3, r2
 80128b6:	e41c      	b.n	80120f2 <_svfprintf_r+0x642>
 80128b8:	aa1f      	add	r2, sp, #124	; 0x7c
 80128ba:	4651      	mov	r1, sl
 80128bc:	4658      	mov	r0, fp
 80128be:	f001 fe81 	bl	80145c4 <__ssprint_r>
 80128c2:	2800      	cmp	r0, #0
 80128c4:	d155      	bne.n	8012972 <_svfprintf_r+0xec2>
 80128c6:	ac2c      	add	r4, sp, #176	; 0xb0
 80128c8:	e7c0      	b.n	801284c <_svfprintf_r+0xd9c>
 80128ca:	aa1f      	add	r2, sp, #124	; 0x7c
 80128cc:	4651      	mov	r1, sl
 80128ce:	4658      	mov	r0, fp
 80128d0:	f001 fe78 	bl	80145c4 <__ssprint_r>
 80128d4:	2800      	cmp	r0, #0
 80128d6:	d14c      	bne.n	8012972 <_svfprintf_r+0xec2>
 80128d8:	ac2c      	add	r4, sp, #176	; 0xb0
 80128da:	e7c5      	b.n	8012868 <_svfprintf_r+0xdb8>
 80128dc:	2e00      	cmp	r6, #0
 80128de:	dde3      	ble.n	80128a8 <_svfprintf_r+0xdf8>
 80128e0:	4f59      	ldr	r7, [pc, #356]	; (8012a48 <_svfprintf_r+0xf98>)
 80128e2:	f04f 0810 	mov.w	r8, #16
 80128e6:	2e10      	cmp	r6, #16
 80128e8:	6027      	str	r7, [r4, #0]
 80128ea:	dc04      	bgt.n	80128f6 <_svfprintf_r+0xe46>
 80128ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80128ee:	6066      	str	r6, [r4, #4]
 80128f0:	441e      	add	r6, r3
 80128f2:	9621      	str	r6, [sp, #132]	; 0x84
 80128f4:	e7cb      	b.n	801288e <_svfprintf_r+0xdde>
 80128f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80128f8:	f8c4 8004 	str.w	r8, [r4, #4]
 80128fc:	3310      	adds	r3, #16
 80128fe:	9321      	str	r3, [sp, #132]	; 0x84
 8012900:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012902:	3301      	adds	r3, #1
 8012904:	2b07      	cmp	r3, #7
 8012906:	9320      	str	r3, [sp, #128]	; 0x80
 8012908:	dc02      	bgt.n	8012910 <_svfprintf_r+0xe60>
 801290a:	3408      	adds	r4, #8
 801290c:	3e10      	subs	r6, #16
 801290e:	e7ea      	b.n	80128e6 <_svfprintf_r+0xe36>
 8012910:	aa1f      	add	r2, sp, #124	; 0x7c
 8012912:	4651      	mov	r1, sl
 8012914:	4658      	mov	r0, fp
 8012916:	f001 fe55 	bl	80145c4 <__ssprint_r>
 801291a:	bb50      	cbnz	r0, 8012972 <_svfprintf_r+0xec2>
 801291c:	ac2c      	add	r4, sp, #176	; 0xb0
 801291e:	e7f5      	b.n	801290c <_svfprintf_r+0xe5c>
 8012920:	2301      	movs	r3, #1
 8012922:	6063      	str	r3, [r4, #4]
 8012924:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012926:	f8c4 8000 	str.w	r8, [r4]
 801292a:	3301      	adds	r3, #1
 801292c:	e7ae      	b.n	801288c <_svfprintf_r+0xddc>
 801292e:	3408      	adds	r4, #8
 8012930:	e7ba      	b.n	80128a8 <_svfprintf_r+0xdf8>
 8012932:	3408      	adds	r4, #8
 8012934:	f7ff bbed 	b.w	8012112 <_svfprintf_r+0x662>
 8012938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801293a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801293c:	1a9d      	subs	r5, r3, r2
 801293e:	2d00      	cmp	r5, #0
 8012940:	f77f abea 	ble.w	8012118 <_svfprintf_r+0x668>
 8012944:	2610      	movs	r6, #16
 8012946:	4b41      	ldr	r3, [pc, #260]	; (8012a4c <_svfprintf_r+0xf9c>)
 8012948:	6023      	str	r3, [r4, #0]
 801294a:	2d10      	cmp	r5, #16
 801294c:	dc1b      	bgt.n	8012986 <_svfprintf_r+0xed6>
 801294e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012950:	6065      	str	r5, [r4, #4]
 8012952:	441d      	add	r5, r3
 8012954:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012956:	9521      	str	r5, [sp, #132]	; 0x84
 8012958:	3301      	adds	r3, #1
 801295a:	2b07      	cmp	r3, #7
 801295c:	9320      	str	r3, [sp, #128]	; 0x80
 801295e:	f77f abdb 	ble.w	8012118 <_svfprintf_r+0x668>
 8012962:	aa1f      	add	r2, sp, #124	; 0x7c
 8012964:	4651      	mov	r1, sl
 8012966:	4658      	mov	r0, fp
 8012968:	f001 fe2c 	bl	80145c4 <__ssprint_r>
 801296c:	2800      	cmp	r0, #0
 801296e:	f43f abd3 	beq.w	8012118 <_svfprintf_r+0x668>
 8012972:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8012976:	f013 0f40 	tst.w	r3, #64	; 0x40
 801297a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801297c:	bf18      	it	ne
 801297e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8012982:	f7ff b8b9 	b.w	8011af8 <_svfprintf_r+0x48>
 8012986:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012988:	6066      	str	r6, [r4, #4]
 801298a:	3310      	adds	r3, #16
 801298c:	9321      	str	r3, [sp, #132]	; 0x84
 801298e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8012990:	3301      	adds	r3, #1
 8012992:	2b07      	cmp	r3, #7
 8012994:	9320      	str	r3, [sp, #128]	; 0x80
 8012996:	dc02      	bgt.n	801299e <_svfprintf_r+0xeee>
 8012998:	3408      	adds	r4, #8
 801299a:	3d10      	subs	r5, #16
 801299c:	e7d3      	b.n	8012946 <_svfprintf_r+0xe96>
 801299e:	aa1f      	add	r2, sp, #124	; 0x7c
 80129a0:	4651      	mov	r1, sl
 80129a2:	4658      	mov	r0, fp
 80129a4:	f001 fe0e 	bl	80145c4 <__ssprint_r>
 80129a8:	2800      	cmp	r0, #0
 80129aa:	d1e2      	bne.n	8012972 <_svfprintf_r+0xec2>
 80129ac:	ac2c      	add	r4, sp, #176	; 0xb0
 80129ae:	e7f4      	b.n	801299a <_svfprintf_r+0xeea>
 80129b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d0dd      	beq.n	8012972 <_svfprintf_r+0xec2>
 80129b6:	aa1f      	add	r2, sp, #124	; 0x7c
 80129b8:	4651      	mov	r1, sl
 80129ba:	4658      	mov	r0, fp
 80129bc:	f001 fe02 	bl	80145c4 <__ssprint_r>
 80129c0:	e7d7      	b.n	8012972 <_svfprintf_r+0xec2>
 80129c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80129c6:	4610      	mov	r0, r2
 80129c8:	4619      	mov	r1, r3
 80129ca:	f7f4 fc0d 	bl	80071e8 <__aeabi_dcmpun>
 80129ce:	2800      	cmp	r0, #0
 80129d0:	f43f aa44 	beq.w	8011e5c <_svfprintf_r+0x3ac>
 80129d4:	4b1e      	ldr	r3, [pc, #120]	; (8012a50 <_svfprintf_r+0xfa0>)
 80129d6:	4a1f      	ldr	r2, [pc, #124]	; (8012a54 <_svfprintf_r+0xfa4>)
 80129d8:	f7ff ba34 	b.w	8011e44 <_svfprintf_r+0x394>
 80129dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80129de:	eba3 0308 	sub.w	r3, r3, r8
 80129e2:	9303      	str	r3, [sp, #12]
 80129e4:	f7ff bab5 	b.w	8011f52 <_svfprintf_r+0x4a2>
 80129e8:	ea56 0207 	orrs.w	r2, r6, r7
 80129ec:	950b      	str	r5, [sp, #44]	; 0x2c
 80129ee:	f43f ac2b 	beq.w	8012248 <_svfprintf_r+0x798>
 80129f2:	2b01      	cmp	r3, #1
 80129f4:	f43f ac9d 	beq.w	8012332 <_svfprintf_r+0x882>
 80129f8:	2b02      	cmp	r3, #2
 80129fa:	f43f acbd 	beq.w	8012378 <_svfprintf_r+0x8c8>
 80129fe:	ab2c      	add	r3, sp, #176	; 0xb0
 8012a00:	08f1      	lsrs	r1, r6, #3
 8012a02:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8012a06:	08f8      	lsrs	r0, r7, #3
 8012a08:	f006 0207 	and.w	r2, r6, #7
 8012a0c:	4607      	mov	r7, r0
 8012a0e:	460e      	mov	r6, r1
 8012a10:	3230      	adds	r2, #48	; 0x30
 8012a12:	ea56 0107 	orrs.w	r1, r6, r7
 8012a16:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8012a1a:	f803 2c01 	strb.w	r2, [r3, #-1]
 8012a1e:	f47f ac86 	bne.w	801232e <_svfprintf_r+0x87e>
 8012a22:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012a24:	07c9      	lsls	r1, r1, #31
 8012a26:	d506      	bpl.n	8012a36 <_svfprintf_r+0xf86>
 8012a28:	2a30      	cmp	r2, #48	; 0x30
 8012a2a:	d004      	beq.n	8012a36 <_svfprintf_r+0xf86>
 8012a2c:	2230      	movs	r2, #48	; 0x30
 8012a2e:	f808 2c01 	strb.w	r2, [r8, #-1]
 8012a32:	f1a3 0802 	sub.w	r8, r3, #2
 8012a36:	464e      	mov	r6, r9
 8012a38:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8012a3c:	eba9 0908 	sub.w	r9, r9, r8
 8012a40:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8012a42:	2700      	movs	r7, #0
 8012a44:	f7ff bad1 	b.w	8011fea <_svfprintf_r+0x53a>
 8012a48:	080196f0 	.word	0x080196f0
 8012a4c:	080196e0 	.word	0x080196e0
 8012a50:	080196b4 	.word	0x080196b4
 8012a54:	080196b8 	.word	0x080196b8

08012a58 <_user_strerror>:
 8012a58:	2000      	movs	r0, #0
 8012a5a:	4770      	bx	lr

08012a5c <__swbuf_r>:
 8012a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a5e:	460e      	mov	r6, r1
 8012a60:	4614      	mov	r4, r2
 8012a62:	4605      	mov	r5, r0
 8012a64:	b118      	cbz	r0, 8012a6e <__swbuf_r+0x12>
 8012a66:	6983      	ldr	r3, [r0, #24]
 8012a68:	b90b      	cbnz	r3, 8012a6e <__swbuf_r+0x12>
 8012a6a:	f001 f8e9 	bl	8013c40 <__sinit>
 8012a6e:	4b27      	ldr	r3, [pc, #156]	; (8012b0c <__swbuf_r+0xb0>)
 8012a70:	429c      	cmp	r4, r3
 8012a72:	d12f      	bne.n	8012ad4 <__swbuf_r+0x78>
 8012a74:	686c      	ldr	r4, [r5, #4]
 8012a76:	69a3      	ldr	r3, [r4, #24]
 8012a78:	60a3      	str	r3, [r4, #8]
 8012a7a:	89a3      	ldrh	r3, [r4, #12]
 8012a7c:	0719      	lsls	r1, r3, #28
 8012a7e:	d533      	bpl.n	8012ae8 <__swbuf_r+0x8c>
 8012a80:	6923      	ldr	r3, [r4, #16]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d030      	beq.n	8012ae8 <__swbuf_r+0x8c>
 8012a86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012a8a:	b2f6      	uxtb	r6, r6
 8012a8c:	049a      	lsls	r2, r3, #18
 8012a8e:	4637      	mov	r7, r6
 8012a90:	d534      	bpl.n	8012afc <__swbuf_r+0xa0>
 8012a92:	6923      	ldr	r3, [r4, #16]
 8012a94:	6820      	ldr	r0, [r4, #0]
 8012a96:	1ac0      	subs	r0, r0, r3
 8012a98:	6963      	ldr	r3, [r4, #20]
 8012a9a:	4298      	cmp	r0, r3
 8012a9c:	db04      	blt.n	8012aa8 <__swbuf_r+0x4c>
 8012a9e:	4621      	mov	r1, r4
 8012aa0:	4628      	mov	r0, r5
 8012aa2:	f001 f839 	bl	8013b18 <_fflush_r>
 8012aa6:	bb28      	cbnz	r0, 8012af4 <__swbuf_r+0x98>
 8012aa8:	68a3      	ldr	r3, [r4, #8]
 8012aaa:	3b01      	subs	r3, #1
 8012aac:	60a3      	str	r3, [r4, #8]
 8012aae:	6823      	ldr	r3, [r4, #0]
 8012ab0:	1c5a      	adds	r2, r3, #1
 8012ab2:	6022      	str	r2, [r4, #0]
 8012ab4:	701e      	strb	r6, [r3, #0]
 8012ab6:	6963      	ldr	r3, [r4, #20]
 8012ab8:	3001      	adds	r0, #1
 8012aba:	4298      	cmp	r0, r3
 8012abc:	d004      	beq.n	8012ac8 <__swbuf_r+0x6c>
 8012abe:	89a3      	ldrh	r3, [r4, #12]
 8012ac0:	07db      	lsls	r3, r3, #31
 8012ac2:	d519      	bpl.n	8012af8 <__swbuf_r+0x9c>
 8012ac4:	2e0a      	cmp	r6, #10
 8012ac6:	d117      	bne.n	8012af8 <__swbuf_r+0x9c>
 8012ac8:	4621      	mov	r1, r4
 8012aca:	4628      	mov	r0, r5
 8012acc:	f001 f824 	bl	8013b18 <_fflush_r>
 8012ad0:	b190      	cbz	r0, 8012af8 <__swbuf_r+0x9c>
 8012ad2:	e00f      	b.n	8012af4 <__swbuf_r+0x98>
 8012ad4:	4b0e      	ldr	r3, [pc, #56]	; (8012b10 <__swbuf_r+0xb4>)
 8012ad6:	429c      	cmp	r4, r3
 8012ad8:	d101      	bne.n	8012ade <__swbuf_r+0x82>
 8012ada:	68ac      	ldr	r4, [r5, #8]
 8012adc:	e7cb      	b.n	8012a76 <__swbuf_r+0x1a>
 8012ade:	4b0d      	ldr	r3, [pc, #52]	; (8012b14 <__swbuf_r+0xb8>)
 8012ae0:	429c      	cmp	r4, r3
 8012ae2:	bf08      	it	eq
 8012ae4:	68ec      	ldreq	r4, [r5, #12]
 8012ae6:	e7c6      	b.n	8012a76 <__swbuf_r+0x1a>
 8012ae8:	4621      	mov	r1, r4
 8012aea:	4628      	mov	r0, r5
 8012aec:	f000 f834 	bl	8012b58 <__swsetup_r>
 8012af0:	2800      	cmp	r0, #0
 8012af2:	d0c8      	beq.n	8012a86 <__swbuf_r+0x2a>
 8012af4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012af8:	4638      	mov	r0, r7
 8012afa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012afc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8012b00:	81a3      	strh	r3, [r4, #12]
 8012b02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012b04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8012b08:	6663      	str	r3, [r4, #100]	; 0x64
 8012b0a:	e7c2      	b.n	8012a92 <__swbuf_r+0x36>
 8012b0c:	08019730 	.word	0x08019730
 8012b10:	08019750 	.word	0x08019750
 8012b14:	08019710 	.word	0x08019710

08012b18 <__ascii_wctomb>:
 8012b18:	b149      	cbz	r1, 8012b2e <__ascii_wctomb+0x16>
 8012b1a:	2aff      	cmp	r2, #255	; 0xff
 8012b1c:	bf85      	ittet	hi
 8012b1e:	238a      	movhi	r3, #138	; 0x8a
 8012b20:	6003      	strhi	r3, [r0, #0]
 8012b22:	700a      	strbls	r2, [r1, #0]
 8012b24:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012b28:	bf98      	it	ls
 8012b2a:	2001      	movls	r0, #1
 8012b2c:	4770      	bx	lr
 8012b2e:	4608      	mov	r0, r1
 8012b30:	4770      	bx	lr
	...

08012b34 <_write_r>:
 8012b34:	b538      	push	{r3, r4, r5, lr}
 8012b36:	4c07      	ldr	r4, [pc, #28]	; (8012b54 <_write_r+0x20>)
 8012b38:	4605      	mov	r5, r0
 8012b3a:	4608      	mov	r0, r1
 8012b3c:	4611      	mov	r1, r2
 8012b3e:	2200      	movs	r2, #0
 8012b40:	6022      	str	r2, [r4, #0]
 8012b42:	461a      	mov	r2, r3
 8012b44:	f001 fe98 	bl	8014878 <_write>
 8012b48:	1c43      	adds	r3, r0, #1
 8012b4a:	d102      	bne.n	8012b52 <_write_r+0x1e>
 8012b4c:	6823      	ldr	r3, [r4, #0]
 8012b4e:	b103      	cbz	r3, 8012b52 <_write_r+0x1e>
 8012b50:	602b      	str	r3, [r5, #0]
 8012b52:	bd38      	pop	{r3, r4, r5, pc}
 8012b54:	2000ce8c 	.word	0x2000ce8c

08012b58 <__swsetup_r>:
 8012b58:	4b32      	ldr	r3, [pc, #200]	; (8012c24 <__swsetup_r+0xcc>)
 8012b5a:	b570      	push	{r4, r5, r6, lr}
 8012b5c:	681d      	ldr	r5, [r3, #0]
 8012b5e:	4606      	mov	r6, r0
 8012b60:	460c      	mov	r4, r1
 8012b62:	b125      	cbz	r5, 8012b6e <__swsetup_r+0x16>
 8012b64:	69ab      	ldr	r3, [r5, #24]
 8012b66:	b913      	cbnz	r3, 8012b6e <__swsetup_r+0x16>
 8012b68:	4628      	mov	r0, r5
 8012b6a:	f001 f869 	bl	8013c40 <__sinit>
 8012b6e:	4b2e      	ldr	r3, [pc, #184]	; (8012c28 <__swsetup_r+0xd0>)
 8012b70:	429c      	cmp	r4, r3
 8012b72:	d10f      	bne.n	8012b94 <__swsetup_r+0x3c>
 8012b74:	686c      	ldr	r4, [r5, #4]
 8012b76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012b7a:	b29a      	uxth	r2, r3
 8012b7c:	0715      	lsls	r5, r2, #28
 8012b7e:	d42c      	bmi.n	8012bda <__swsetup_r+0x82>
 8012b80:	06d0      	lsls	r0, r2, #27
 8012b82:	d411      	bmi.n	8012ba8 <__swsetup_r+0x50>
 8012b84:	2209      	movs	r2, #9
 8012b86:	6032      	str	r2, [r6, #0]
 8012b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012b8c:	81a3      	strh	r3, [r4, #12]
 8012b8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012b92:	bd70      	pop	{r4, r5, r6, pc}
 8012b94:	4b25      	ldr	r3, [pc, #148]	; (8012c2c <__swsetup_r+0xd4>)
 8012b96:	429c      	cmp	r4, r3
 8012b98:	d101      	bne.n	8012b9e <__swsetup_r+0x46>
 8012b9a:	68ac      	ldr	r4, [r5, #8]
 8012b9c:	e7eb      	b.n	8012b76 <__swsetup_r+0x1e>
 8012b9e:	4b24      	ldr	r3, [pc, #144]	; (8012c30 <__swsetup_r+0xd8>)
 8012ba0:	429c      	cmp	r4, r3
 8012ba2:	bf08      	it	eq
 8012ba4:	68ec      	ldreq	r4, [r5, #12]
 8012ba6:	e7e6      	b.n	8012b76 <__swsetup_r+0x1e>
 8012ba8:	0751      	lsls	r1, r2, #29
 8012baa:	d512      	bpl.n	8012bd2 <__swsetup_r+0x7a>
 8012bac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012bae:	b141      	cbz	r1, 8012bc2 <__swsetup_r+0x6a>
 8012bb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012bb4:	4299      	cmp	r1, r3
 8012bb6:	d002      	beq.n	8012bbe <__swsetup_r+0x66>
 8012bb8:	4630      	mov	r0, r6
 8012bba:	f001 f917 	bl	8013dec <_free_r>
 8012bbe:	2300      	movs	r3, #0
 8012bc0:	6363      	str	r3, [r4, #52]	; 0x34
 8012bc2:	89a3      	ldrh	r3, [r4, #12]
 8012bc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012bc8:	81a3      	strh	r3, [r4, #12]
 8012bca:	2300      	movs	r3, #0
 8012bcc:	6063      	str	r3, [r4, #4]
 8012bce:	6923      	ldr	r3, [r4, #16]
 8012bd0:	6023      	str	r3, [r4, #0]
 8012bd2:	89a3      	ldrh	r3, [r4, #12]
 8012bd4:	f043 0308 	orr.w	r3, r3, #8
 8012bd8:	81a3      	strh	r3, [r4, #12]
 8012bda:	6923      	ldr	r3, [r4, #16]
 8012bdc:	b94b      	cbnz	r3, 8012bf2 <__swsetup_r+0x9a>
 8012bde:	89a3      	ldrh	r3, [r4, #12]
 8012be0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012be4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012be8:	d003      	beq.n	8012bf2 <__swsetup_r+0x9a>
 8012bea:	4621      	mov	r1, r4
 8012bec:	4630      	mov	r0, r6
 8012bee:	f7fd ffb1 	bl	8010b54 <__smakebuf_r>
 8012bf2:	89a2      	ldrh	r2, [r4, #12]
 8012bf4:	f012 0301 	ands.w	r3, r2, #1
 8012bf8:	d00c      	beq.n	8012c14 <__swsetup_r+0xbc>
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	60a3      	str	r3, [r4, #8]
 8012bfe:	6963      	ldr	r3, [r4, #20]
 8012c00:	425b      	negs	r3, r3
 8012c02:	61a3      	str	r3, [r4, #24]
 8012c04:	6923      	ldr	r3, [r4, #16]
 8012c06:	b953      	cbnz	r3, 8012c1e <__swsetup_r+0xc6>
 8012c08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012c0c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012c10:	d1ba      	bne.n	8012b88 <__swsetup_r+0x30>
 8012c12:	bd70      	pop	{r4, r5, r6, pc}
 8012c14:	0792      	lsls	r2, r2, #30
 8012c16:	bf58      	it	pl
 8012c18:	6963      	ldrpl	r3, [r4, #20]
 8012c1a:	60a3      	str	r3, [r4, #8]
 8012c1c:	e7f2      	b.n	8012c04 <__swsetup_r+0xac>
 8012c1e:	2000      	movs	r0, #0
 8012c20:	e7f7      	b.n	8012c12 <__swsetup_r+0xba>
 8012c22:	bf00      	nop
 8012c24:	20000028 	.word	0x20000028
 8012c28:	08019730 	.word	0x08019730
 8012c2c:	08019750 	.word	0x08019750
 8012c30:	08019710 	.word	0x08019710

08012c34 <__register_exitproc>:
 8012c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c38:	4d35      	ldr	r5, [pc, #212]	; (8012d10 <__register_exitproc+0xdc>)
 8012c3a:	4680      	mov	r8, r0
 8012c3c:	6828      	ldr	r0, [r5, #0]
 8012c3e:	4699      	mov	r9, r3
 8012c40:	460f      	mov	r7, r1
 8012c42:	4692      	mov	sl, r2
 8012c44:	f7fd ff58 	bl	8010af8 <__retarget_lock_acquire_recursive>
 8012c48:	4b32      	ldr	r3, [pc, #200]	; (8012d14 <__register_exitproc+0xe0>)
 8012c4a:	681e      	ldr	r6, [r3, #0]
 8012c4c:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8012c4e:	b93c      	cbnz	r4, 8012c60 <__register_exitproc+0x2c>
 8012c50:	4b31      	ldr	r3, [pc, #196]	; (8012d18 <__register_exitproc+0xe4>)
 8012c52:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 8012c56:	64b4      	str	r4, [r6, #72]	; 0x48
 8012c58:	b113      	cbz	r3, 8012c60 <__register_exitproc+0x2c>
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
 8012c60:	6863      	ldr	r3, [r4, #4]
 8012c62:	2b1f      	cmp	r3, #31
 8012c64:	dd46      	ble.n	8012cf4 <__register_exitproc+0xc0>
 8012c66:	4b2d      	ldr	r3, [pc, #180]	; (8012d1c <__register_exitproc+0xe8>)
 8012c68:	b933      	cbnz	r3, 8012c78 <__register_exitproc+0x44>
 8012c6a:	6828      	ldr	r0, [r5, #0]
 8012c6c:	f7fd ff46 	bl	8010afc <__retarget_lock_release_recursive>
 8012c70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c78:	208c      	movs	r0, #140	; 0x8c
 8012c7a:	f7fd ffab 	bl	8010bd4 <malloc>
 8012c7e:	4604      	mov	r4, r0
 8012c80:	2800      	cmp	r0, #0
 8012c82:	d0f2      	beq.n	8012c6a <__register_exitproc+0x36>
 8012c84:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8012c86:	6003      	str	r3, [r0, #0]
 8012c88:	2200      	movs	r2, #0
 8012c8a:	6042      	str	r2, [r0, #4]
 8012c8c:	64b0      	str	r0, [r6, #72]	; 0x48
 8012c8e:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 8012c92:	f1b8 0f00 	cmp.w	r8, #0
 8012c96:	d021      	beq.n	8012cdc <__register_exitproc+0xa8>
 8012c98:	f44f 7084 	mov.w	r0, #264	; 0x108
 8012c9c:	f7fd ff9a 	bl	8010bd4 <malloc>
 8012ca0:	b390      	cbz	r0, 8012d08 <__register_exitproc+0xd4>
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8012ca8:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8012cac:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8012cb0:	6862      	ldr	r2, [r4, #4]
 8012cb2:	f840 a022 	str.w	sl, [r0, r2, lsl #2]
 8012cb6:	2301      	movs	r3, #1
 8012cb8:	4093      	lsls	r3, r2
 8012cba:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8012cbe:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8012cc2:	431a      	orrs	r2, r3
 8012cc4:	f1b8 0f02 	cmp.w	r8, #2
 8012cc8:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8012ccc:	f8c1 9080 	str.w	r9, [r1, #128]	; 0x80
 8012cd0:	bf02      	ittt	eq
 8012cd2:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8012cd6:	4313      	orreq	r3, r2
 8012cd8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8012cdc:	6863      	ldr	r3, [r4, #4]
 8012cde:	6828      	ldr	r0, [r5, #0]
 8012ce0:	1c5a      	adds	r2, r3, #1
 8012ce2:	3302      	adds	r3, #2
 8012ce4:	6062      	str	r2, [r4, #4]
 8012ce6:	f844 7023 	str.w	r7, [r4, r3, lsl #2]
 8012cea:	f7fd ff07 	bl	8010afc <__retarget_lock_release_recursive>
 8012cee:	2000      	movs	r0, #0
 8012cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cf4:	f1b8 0f00 	cmp.w	r8, #0
 8012cf8:	d0f0      	beq.n	8012cdc <__register_exitproc+0xa8>
 8012cfa:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8012cfe:	2800      	cmp	r0, #0
 8012d00:	d1d6      	bne.n	8012cb0 <__register_exitproc+0x7c>
 8012d02:	4b06      	ldr	r3, [pc, #24]	; (8012d1c <__register_exitproc+0xe8>)
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d1c7      	bne.n	8012c98 <__register_exitproc+0x64>
 8012d08:	6828      	ldr	r0, [r5, #0]
 8012d0a:	f7fd fef6 	bl	8010afa <__retarget_lock_release>
 8012d0e:	e7af      	b.n	8012c70 <__register_exitproc+0x3c>
 8012d10:	20000698 	.word	0x20000698
 8012d14:	08019000 	.word	0x08019000
 8012d18:	08019010 	.word	0x08019010
 8012d1c:	08010bd5 	.word	0x08010bd5

08012d20 <_close_r>:
 8012d20:	b538      	push	{r3, r4, r5, lr}
 8012d22:	4c06      	ldr	r4, [pc, #24]	; (8012d3c <_close_r+0x1c>)
 8012d24:	2300      	movs	r3, #0
 8012d26:	4605      	mov	r5, r0
 8012d28:	4608      	mov	r0, r1
 8012d2a:	6023      	str	r3, [r4, #0]
 8012d2c:	f001 fd5e 	bl	80147ec <_close>
 8012d30:	1c43      	adds	r3, r0, #1
 8012d32:	d102      	bne.n	8012d3a <_close_r+0x1a>
 8012d34:	6823      	ldr	r3, [r4, #0]
 8012d36:	b103      	cbz	r3, 8012d3a <_close_r+0x1a>
 8012d38:	602b      	str	r3, [r5, #0]
 8012d3a:	bd38      	pop	{r3, r4, r5, pc}
 8012d3c:	2000ce8c 	.word	0x2000ce8c

08012d40 <quorem>:
 8012d40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d44:	6903      	ldr	r3, [r0, #16]
 8012d46:	690c      	ldr	r4, [r1, #16]
 8012d48:	429c      	cmp	r4, r3
 8012d4a:	4680      	mov	r8, r0
 8012d4c:	f300 8082 	bgt.w	8012e54 <quorem+0x114>
 8012d50:	3c01      	subs	r4, #1
 8012d52:	f101 0714 	add.w	r7, r1, #20
 8012d56:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8012d5a:	f100 0614 	add.w	r6, r0, #20
 8012d5e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8012d62:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012d66:	eb06 030e 	add.w	r3, r6, lr
 8012d6a:	3501      	adds	r5, #1
 8012d6c:	eb07 090e 	add.w	r9, r7, lr
 8012d70:	9301      	str	r3, [sp, #4]
 8012d72:	fbb0 f5f5 	udiv	r5, r0, r5
 8012d76:	b395      	cbz	r5, 8012dde <quorem+0x9e>
 8012d78:	f04f 0a00 	mov.w	sl, #0
 8012d7c:	4638      	mov	r0, r7
 8012d7e:	46b4      	mov	ip, r6
 8012d80:	46d3      	mov	fp, sl
 8012d82:	f850 2b04 	ldr.w	r2, [r0], #4
 8012d86:	b293      	uxth	r3, r2
 8012d88:	fb05 a303 	mla	r3, r5, r3, sl
 8012d8c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012d90:	b29b      	uxth	r3, r3
 8012d92:	ebab 0303 	sub.w	r3, fp, r3
 8012d96:	0c12      	lsrs	r2, r2, #16
 8012d98:	f8bc b000 	ldrh.w	fp, [ip]
 8012d9c:	fb05 a202 	mla	r2, r5, r2, sl
 8012da0:	fa13 f38b 	uxtah	r3, r3, fp
 8012da4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012da8:	fa1f fb82 	uxth.w	fp, r2
 8012dac:	f8dc 2000 	ldr.w	r2, [ip]
 8012db0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012db4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012db8:	b29b      	uxth	r3, r3
 8012dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012dbe:	4581      	cmp	r9, r0
 8012dc0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012dc4:	f84c 3b04 	str.w	r3, [ip], #4
 8012dc8:	d2db      	bcs.n	8012d82 <quorem+0x42>
 8012dca:	f856 300e 	ldr.w	r3, [r6, lr]
 8012dce:	b933      	cbnz	r3, 8012dde <quorem+0x9e>
 8012dd0:	9b01      	ldr	r3, [sp, #4]
 8012dd2:	3b04      	subs	r3, #4
 8012dd4:	429e      	cmp	r6, r3
 8012dd6:	461a      	mov	r2, r3
 8012dd8:	d330      	bcc.n	8012e3c <quorem+0xfc>
 8012dda:	f8c8 4010 	str.w	r4, [r8, #16]
 8012dde:	4640      	mov	r0, r8
 8012de0:	f001 fb17 	bl	8014412 <__mcmp>
 8012de4:	2800      	cmp	r0, #0
 8012de6:	db25      	blt.n	8012e34 <quorem+0xf4>
 8012de8:	3501      	adds	r5, #1
 8012dea:	4630      	mov	r0, r6
 8012dec:	f04f 0e00 	mov.w	lr, #0
 8012df0:	f857 2b04 	ldr.w	r2, [r7], #4
 8012df4:	f8d0 c000 	ldr.w	ip, [r0]
 8012df8:	b293      	uxth	r3, r2
 8012dfa:	ebae 0303 	sub.w	r3, lr, r3
 8012dfe:	0c12      	lsrs	r2, r2, #16
 8012e00:	fa13 f38c 	uxtah	r3, r3, ip
 8012e04:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8012e08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012e0c:	b29b      	uxth	r3, r3
 8012e0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012e12:	45b9      	cmp	r9, r7
 8012e14:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8012e18:	f840 3b04 	str.w	r3, [r0], #4
 8012e1c:	d2e8      	bcs.n	8012df0 <quorem+0xb0>
 8012e1e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8012e22:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8012e26:	b92a      	cbnz	r2, 8012e34 <quorem+0xf4>
 8012e28:	3b04      	subs	r3, #4
 8012e2a:	429e      	cmp	r6, r3
 8012e2c:	461a      	mov	r2, r3
 8012e2e:	d30b      	bcc.n	8012e48 <quorem+0x108>
 8012e30:	f8c8 4010 	str.w	r4, [r8, #16]
 8012e34:	4628      	mov	r0, r5
 8012e36:	b003      	add	sp, #12
 8012e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e3c:	6812      	ldr	r2, [r2, #0]
 8012e3e:	3b04      	subs	r3, #4
 8012e40:	2a00      	cmp	r2, #0
 8012e42:	d1ca      	bne.n	8012dda <quorem+0x9a>
 8012e44:	3c01      	subs	r4, #1
 8012e46:	e7c5      	b.n	8012dd4 <quorem+0x94>
 8012e48:	6812      	ldr	r2, [r2, #0]
 8012e4a:	3b04      	subs	r3, #4
 8012e4c:	2a00      	cmp	r2, #0
 8012e4e:	d1ef      	bne.n	8012e30 <quorem+0xf0>
 8012e50:	3c01      	subs	r4, #1
 8012e52:	e7ea      	b.n	8012e2a <quorem+0xea>
 8012e54:	2000      	movs	r0, #0
 8012e56:	e7ee      	b.n	8012e36 <quorem+0xf6>

08012e58 <_dtoa_r>:
 8012e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e5c:	ec57 6b10 	vmov	r6, r7, d0
 8012e60:	b097      	sub	sp, #92	; 0x5c
 8012e62:	e9cd 6700 	strd	r6, r7, [sp]
 8012e66:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8012e68:	9107      	str	r1, [sp, #28]
 8012e6a:	4604      	mov	r4, r0
 8012e6c:	920a      	str	r2, [sp, #40]	; 0x28
 8012e6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012e70:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8012e72:	b93e      	cbnz	r6, 8012e84 <_dtoa_r+0x2c>
 8012e74:	2010      	movs	r0, #16
 8012e76:	f7fd fead 	bl	8010bd4 <malloc>
 8012e7a:	6260      	str	r0, [r4, #36]	; 0x24
 8012e7c:	6046      	str	r6, [r0, #4]
 8012e7e:	6086      	str	r6, [r0, #8]
 8012e80:	6006      	str	r6, [r0, #0]
 8012e82:	60c6      	str	r6, [r0, #12]
 8012e84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e86:	6819      	ldr	r1, [r3, #0]
 8012e88:	b151      	cbz	r1, 8012ea0 <_dtoa_r+0x48>
 8012e8a:	685a      	ldr	r2, [r3, #4]
 8012e8c:	604a      	str	r2, [r1, #4]
 8012e8e:	2301      	movs	r3, #1
 8012e90:	4093      	lsls	r3, r2
 8012e92:	608b      	str	r3, [r1, #8]
 8012e94:	4620      	mov	r0, r4
 8012e96:	f001 f8e7 	bl	8014068 <_Bfree>
 8012e9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	601a      	str	r2, [r3, #0]
 8012ea0:	9b01      	ldr	r3, [sp, #4]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	bfbf      	itttt	lt
 8012ea6:	2301      	movlt	r3, #1
 8012ea8:	602b      	strlt	r3, [r5, #0]
 8012eaa:	9b01      	ldrlt	r3, [sp, #4]
 8012eac:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012eb0:	bfb2      	itee	lt
 8012eb2:	9301      	strlt	r3, [sp, #4]
 8012eb4:	2300      	movge	r3, #0
 8012eb6:	602b      	strge	r3, [r5, #0]
 8012eb8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012ebc:	4ba8      	ldr	r3, [pc, #672]	; (8013160 <_dtoa_r+0x308>)
 8012ebe:	ea33 0308 	bics.w	r3, r3, r8
 8012ec2:	d11b      	bne.n	8012efc <_dtoa_r+0xa4>
 8012ec4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012ec6:	f242 730f 	movw	r3, #9999	; 0x270f
 8012eca:	6013      	str	r3, [r2, #0]
 8012ecc:	9b00      	ldr	r3, [sp, #0]
 8012ece:	b923      	cbnz	r3, 8012eda <_dtoa_r+0x82>
 8012ed0:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8012ed4:	2800      	cmp	r0, #0
 8012ed6:	f000 8578 	beq.w	80139ca <_dtoa_r+0xb72>
 8012eda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012edc:	b953      	cbnz	r3, 8012ef4 <_dtoa_r+0x9c>
 8012ede:	4ba1      	ldr	r3, [pc, #644]	; (8013164 <_dtoa_r+0x30c>)
 8012ee0:	e021      	b.n	8012f26 <_dtoa_r+0xce>
 8012ee2:	4ba1      	ldr	r3, [pc, #644]	; (8013168 <_dtoa_r+0x310>)
 8012ee4:	9302      	str	r3, [sp, #8]
 8012ee6:	3308      	adds	r3, #8
 8012ee8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012eea:	6013      	str	r3, [r2, #0]
 8012eec:	9802      	ldr	r0, [sp, #8]
 8012eee:	b017      	add	sp, #92	; 0x5c
 8012ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ef4:	4b9b      	ldr	r3, [pc, #620]	; (8013164 <_dtoa_r+0x30c>)
 8012ef6:	9302      	str	r3, [sp, #8]
 8012ef8:	3303      	adds	r3, #3
 8012efa:	e7f5      	b.n	8012ee8 <_dtoa_r+0x90>
 8012efc:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012f00:	2200      	movs	r2, #0
 8012f02:	2300      	movs	r3, #0
 8012f04:	4630      	mov	r0, r6
 8012f06:	4639      	mov	r1, r7
 8012f08:	f7f4 f93c 	bl	8007184 <__aeabi_dcmpeq>
 8012f0c:	4681      	mov	r9, r0
 8012f0e:	b160      	cbz	r0, 8012f2a <_dtoa_r+0xd2>
 8012f10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8012f12:	2301      	movs	r3, #1
 8012f14:	6013      	str	r3, [r2, #0]
 8012f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	f000 8553 	beq.w	80139c4 <_dtoa_r+0xb6c>
 8012f1e:	4b93      	ldr	r3, [pc, #588]	; (801316c <_dtoa_r+0x314>)
 8012f20:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012f22:	6013      	str	r3, [r2, #0]
 8012f24:	3b01      	subs	r3, #1
 8012f26:	9302      	str	r3, [sp, #8]
 8012f28:	e7e0      	b.n	8012eec <_dtoa_r+0x94>
 8012f2a:	aa14      	add	r2, sp, #80	; 0x50
 8012f2c:	a915      	add	r1, sp, #84	; 0x54
 8012f2e:	ec47 6b10 	vmov	d0, r6, r7
 8012f32:	4620      	mov	r0, r4
 8012f34:	f001 fae5 	bl	8014502 <__d2b>
 8012f38:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8012f3c:	4682      	mov	sl, r0
 8012f3e:	2d00      	cmp	r5, #0
 8012f40:	d07e      	beq.n	8013040 <_dtoa_r+0x1e8>
 8012f42:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012f46:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8012f4a:	4630      	mov	r0, r6
 8012f4c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8012f50:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012f54:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8012f58:	2200      	movs	r2, #0
 8012f5a:	4b85      	ldr	r3, [pc, #532]	; (8013170 <_dtoa_r+0x318>)
 8012f5c:	f7f3 fcf6 	bl	800694c <__aeabi_dsub>
 8012f60:	a379      	add	r3, pc, #484	; (adr r3, 8013148 <_dtoa_r+0x2f0>)
 8012f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f66:	f7f3 fea5 	bl	8006cb4 <__aeabi_dmul>
 8012f6a:	a379      	add	r3, pc, #484	; (adr r3, 8013150 <_dtoa_r+0x2f8>)
 8012f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f70:	f7f3 fcee 	bl	8006950 <__adddf3>
 8012f74:	4606      	mov	r6, r0
 8012f76:	4628      	mov	r0, r5
 8012f78:	460f      	mov	r7, r1
 8012f7a:	f7f3 fe35 	bl	8006be8 <__aeabi_i2d>
 8012f7e:	a376      	add	r3, pc, #472	; (adr r3, 8013158 <_dtoa_r+0x300>)
 8012f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f84:	f7f3 fe96 	bl	8006cb4 <__aeabi_dmul>
 8012f88:	4602      	mov	r2, r0
 8012f8a:	460b      	mov	r3, r1
 8012f8c:	4630      	mov	r0, r6
 8012f8e:	4639      	mov	r1, r7
 8012f90:	f7f3 fcde 	bl	8006950 <__adddf3>
 8012f94:	4606      	mov	r6, r0
 8012f96:	460f      	mov	r7, r1
 8012f98:	f7f4 f93c 	bl	8007214 <__aeabi_d2iz>
 8012f9c:	2200      	movs	r2, #0
 8012f9e:	4683      	mov	fp, r0
 8012fa0:	2300      	movs	r3, #0
 8012fa2:	4630      	mov	r0, r6
 8012fa4:	4639      	mov	r1, r7
 8012fa6:	f7f4 f8f7 	bl	8007198 <__aeabi_dcmplt>
 8012faa:	b158      	cbz	r0, 8012fc4 <_dtoa_r+0x16c>
 8012fac:	4658      	mov	r0, fp
 8012fae:	f7f3 fe1b 	bl	8006be8 <__aeabi_i2d>
 8012fb2:	4602      	mov	r2, r0
 8012fb4:	460b      	mov	r3, r1
 8012fb6:	4630      	mov	r0, r6
 8012fb8:	4639      	mov	r1, r7
 8012fba:	f7f4 f8e3 	bl	8007184 <__aeabi_dcmpeq>
 8012fbe:	b908      	cbnz	r0, 8012fc4 <_dtoa_r+0x16c>
 8012fc0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012fc4:	f1bb 0f16 	cmp.w	fp, #22
 8012fc8:	d859      	bhi.n	801307e <_dtoa_r+0x226>
 8012fca:	496a      	ldr	r1, [pc, #424]	; (8013174 <_dtoa_r+0x31c>)
 8012fcc:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8012fd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012fd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012fd8:	f7f4 f8fc 	bl	80071d4 <__aeabi_dcmpgt>
 8012fdc:	2800      	cmp	r0, #0
 8012fde:	d050      	beq.n	8013082 <_dtoa_r+0x22a>
 8012fe0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	930e      	str	r3, [sp, #56]	; 0x38
 8012fe8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012fea:	1b5d      	subs	r5, r3, r5
 8012fec:	1e6b      	subs	r3, r5, #1
 8012fee:	9306      	str	r3, [sp, #24]
 8012ff0:	bf45      	ittet	mi
 8012ff2:	f1c5 0301 	rsbmi	r3, r5, #1
 8012ff6:	9305      	strmi	r3, [sp, #20]
 8012ff8:	2300      	movpl	r3, #0
 8012ffa:	2300      	movmi	r3, #0
 8012ffc:	bf4c      	ite	mi
 8012ffe:	9306      	strmi	r3, [sp, #24]
 8013000:	9305      	strpl	r3, [sp, #20]
 8013002:	f1bb 0f00 	cmp.w	fp, #0
 8013006:	db3e      	blt.n	8013086 <_dtoa_r+0x22e>
 8013008:	9b06      	ldr	r3, [sp, #24]
 801300a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801300e:	445b      	add	r3, fp
 8013010:	9306      	str	r3, [sp, #24]
 8013012:	2300      	movs	r3, #0
 8013014:	9308      	str	r3, [sp, #32]
 8013016:	9b07      	ldr	r3, [sp, #28]
 8013018:	2b09      	cmp	r3, #9
 801301a:	f200 80af 	bhi.w	801317c <_dtoa_r+0x324>
 801301e:	2b05      	cmp	r3, #5
 8013020:	bfc4      	itt	gt
 8013022:	3b04      	subgt	r3, #4
 8013024:	9307      	strgt	r3, [sp, #28]
 8013026:	9b07      	ldr	r3, [sp, #28]
 8013028:	f1a3 0302 	sub.w	r3, r3, #2
 801302c:	bfcc      	ite	gt
 801302e:	2600      	movgt	r6, #0
 8013030:	2601      	movle	r6, #1
 8013032:	2b03      	cmp	r3, #3
 8013034:	f200 80ae 	bhi.w	8013194 <_dtoa_r+0x33c>
 8013038:	e8df f003 	tbb	[pc, r3]
 801303c:	772f8482 	.word	0x772f8482
 8013040:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013042:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8013044:	441d      	add	r5, r3
 8013046:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801304a:	2b20      	cmp	r3, #32
 801304c:	dd11      	ble.n	8013072 <_dtoa_r+0x21a>
 801304e:	9a00      	ldr	r2, [sp, #0]
 8013050:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8013054:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8013058:	fa22 f000 	lsr.w	r0, r2, r0
 801305c:	fa08 f303 	lsl.w	r3, r8, r3
 8013060:	4318      	orrs	r0, r3
 8013062:	f7f3 fdb1 	bl	8006bc8 <__aeabi_ui2d>
 8013066:	2301      	movs	r3, #1
 8013068:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801306c:	3d01      	subs	r5, #1
 801306e:	9312      	str	r3, [sp, #72]	; 0x48
 8013070:	e772      	b.n	8012f58 <_dtoa_r+0x100>
 8013072:	f1c3 0020 	rsb	r0, r3, #32
 8013076:	9b00      	ldr	r3, [sp, #0]
 8013078:	fa03 f000 	lsl.w	r0, r3, r0
 801307c:	e7f1      	b.n	8013062 <_dtoa_r+0x20a>
 801307e:	2301      	movs	r3, #1
 8013080:	e7b1      	b.n	8012fe6 <_dtoa_r+0x18e>
 8013082:	900e      	str	r0, [sp, #56]	; 0x38
 8013084:	e7b0      	b.n	8012fe8 <_dtoa_r+0x190>
 8013086:	9b05      	ldr	r3, [sp, #20]
 8013088:	eba3 030b 	sub.w	r3, r3, fp
 801308c:	9305      	str	r3, [sp, #20]
 801308e:	f1cb 0300 	rsb	r3, fp, #0
 8013092:	9308      	str	r3, [sp, #32]
 8013094:	2300      	movs	r3, #0
 8013096:	930b      	str	r3, [sp, #44]	; 0x2c
 8013098:	e7bd      	b.n	8013016 <_dtoa_r+0x1be>
 801309a:	2301      	movs	r3, #1
 801309c:	9309      	str	r3, [sp, #36]	; 0x24
 801309e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	dd7a      	ble.n	801319a <_dtoa_r+0x342>
 80130a4:	9304      	str	r3, [sp, #16]
 80130a6:	9303      	str	r3, [sp, #12]
 80130a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80130aa:	2200      	movs	r2, #0
 80130ac:	606a      	str	r2, [r5, #4]
 80130ae:	2104      	movs	r1, #4
 80130b0:	f101 0214 	add.w	r2, r1, #20
 80130b4:	429a      	cmp	r2, r3
 80130b6:	d975      	bls.n	80131a4 <_dtoa_r+0x34c>
 80130b8:	6869      	ldr	r1, [r5, #4]
 80130ba:	4620      	mov	r0, r4
 80130bc:	f000 ffa0 	bl	8014000 <_Balloc>
 80130c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80130c2:	6028      	str	r0, [r5, #0]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	9302      	str	r3, [sp, #8]
 80130c8:	9b03      	ldr	r3, [sp, #12]
 80130ca:	2b0e      	cmp	r3, #14
 80130cc:	f200 80e5 	bhi.w	801329a <_dtoa_r+0x442>
 80130d0:	2e00      	cmp	r6, #0
 80130d2:	f000 80e2 	beq.w	801329a <_dtoa_r+0x442>
 80130d6:	ed9d 7b00 	vldr	d7, [sp]
 80130da:	f1bb 0f00 	cmp.w	fp, #0
 80130de:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80130e2:	dd74      	ble.n	80131ce <_dtoa_r+0x376>
 80130e4:	4a23      	ldr	r2, [pc, #140]	; (8013174 <_dtoa_r+0x31c>)
 80130e6:	f00b 030f 	and.w	r3, fp, #15
 80130ea:	ea4f 162b 	mov.w	r6, fp, asr #4
 80130ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80130f2:	06f0      	lsls	r0, r6, #27
 80130f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80130f8:	d559      	bpl.n	80131ae <_dtoa_r+0x356>
 80130fa:	4b1f      	ldr	r3, [pc, #124]	; (8013178 <_dtoa_r+0x320>)
 80130fc:	ec51 0b17 	vmov	r0, r1, d7
 8013100:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013104:	f7f3 ff00 	bl	8006f08 <__aeabi_ddiv>
 8013108:	e9cd 0100 	strd	r0, r1, [sp]
 801310c:	f006 060f 	and.w	r6, r6, #15
 8013110:	2503      	movs	r5, #3
 8013112:	4f19      	ldr	r7, [pc, #100]	; (8013178 <_dtoa_r+0x320>)
 8013114:	2e00      	cmp	r6, #0
 8013116:	d14c      	bne.n	80131b2 <_dtoa_r+0x35a>
 8013118:	4642      	mov	r2, r8
 801311a:	464b      	mov	r3, r9
 801311c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013120:	f7f3 fef2 	bl	8006f08 <__aeabi_ddiv>
 8013124:	e9cd 0100 	strd	r0, r1, [sp]
 8013128:	e06a      	b.n	8013200 <_dtoa_r+0x3a8>
 801312a:	2301      	movs	r3, #1
 801312c:	9309      	str	r3, [sp, #36]	; 0x24
 801312e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013130:	445b      	add	r3, fp
 8013132:	9304      	str	r3, [sp, #16]
 8013134:	3301      	adds	r3, #1
 8013136:	2b01      	cmp	r3, #1
 8013138:	9303      	str	r3, [sp, #12]
 801313a:	bfb8      	it	lt
 801313c:	2301      	movlt	r3, #1
 801313e:	e7b3      	b.n	80130a8 <_dtoa_r+0x250>
 8013140:	2300      	movs	r3, #0
 8013142:	e7ab      	b.n	801309c <_dtoa_r+0x244>
 8013144:	2300      	movs	r3, #0
 8013146:	e7f1      	b.n	801312c <_dtoa_r+0x2d4>
 8013148:	636f4361 	.word	0x636f4361
 801314c:	3fd287a7 	.word	0x3fd287a7
 8013150:	8b60c8b3 	.word	0x8b60c8b3
 8013154:	3fc68a28 	.word	0x3fc68a28
 8013158:	509f79fb 	.word	0x509f79fb
 801315c:	3fd34413 	.word	0x3fd34413
 8013160:	7ff00000 	.word	0x7ff00000
 8013164:	08019709 	.word	0x08019709
 8013168:	08019700 	.word	0x08019700
 801316c:	080196df 	.word	0x080196df
 8013170:	3ff80000 	.word	0x3ff80000
 8013174:	08019798 	.word	0x08019798
 8013178:	08019770 	.word	0x08019770
 801317c:	2601      	movs	r6, #1
 801317e:	2300      	movs	r3, #0
 8013180:	9307      	str	r3, [sp, #28]
 8013182:	9609      	str	r6, [sp, #36]	; 0x24
 8013184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013188:	9304      	str	r3, [sp, #16]
 801318a:	9303      	str	r3, [sp, #12]
 801318c:	2200      	movs	r2, #0
 801318e:	2312      	movs	r3, #18
 8013190:	920a      	str	r2, [sp, #40]	; 0x28
 8013192:	e789      	b.n	80130a8 <_dtoa_r+0x250>
 8013194:	2301      	movs	r3, #1
 8013196:	9309      	str	r3, [sp, #36]	; 0x24
 8013198:	e7f4      	b.n	8013184 <_dtoa_r+0x32c>
 801319a:	2301      	movs	r3, #1
 801319c:	9304      	str	r3, [sp, #16]
 801319e:	9303      	str	r3, [sp, #12]
 80131a0:	461a      	mov	r2, r3
 80131a2:	e7f5      	b.n	8013190 <_dtoa_r+0x338>
 80131a4:	686a      	ldr	r2, [r5, #4]
 80131a6:	3201      	adds	r2, #1
 80131a8:	606a      	str	r2, [r5, #4]
 80131aa:	0049      	lsls	r1, r1, #1
 80131ac:	e780      	b.n	80130b0 <_dtoa_r+0x258>
 80131ae:	2502      	movs	r5, #2
 80131b0:	e7af      	b.n	8013112 <_dtoa_r+0x2ba>
 80131b2:	07f1      	lsls	r1, r6, #31
 80131b4:	d508      	bpl.n	80131c8 <_dtoa_r+0x370>
 80131b6:	4640      	mov	r0, r8
 80131b8:	4649      	mov	r1, r9
 80131ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80131be:	f7f3 fd79 	bl	8006cb4 <__aeabi_dmul>
 80131c2:	3501      	adds	r5, #1
 80131c4:	4680      	mov	r8, r0
 80131c6:	4689      	mov	r9, r1
 80131c8:	1076      	asrs	r6, r6, #1
 80131ca:	3708      	adds	r7, #8
 80131cc:	e7a2      	b.n	8013114 <_dtoa_r+0x2bc>
 80131ce:	f000 809d 	beq.w	801330c <_dtoa_r+0x4b4>
 80131d2:	f1cb 0600 	rsb	r6, fp, #0
 80131d6:	4b9f      	ldr	r3, [pc, #636]	; (8013454 <_dtoa_r+0x5fc>)
 80131d8:	4f9f      	ldr	r7, [pc, #636]	; (8013458 <_dtoa_r+0x600>)
 80131da:	f006 020f 	and.w	r2, r6, #15
 80131de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80131e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80131ea:	f7f3 fd63 	bl	8006cb4 <__aeabi_dmul>
 80131ee:	e9cd 0100 	strd	r0, r1, [sp]
 80131f2:	1136      	asrs	r6, r6, #4
 80131f4:	2300      	movs	r3, #0
 80131f6:	2502      	movs	r5, #2
 80131f8:	2e00      	cmp	r6, #0
 80131fa:	d17c      	bne.n	80132f6 <_dtoa_r+0x49e>
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d191      	bne.n	8013124 <_dtoa_r+0x2cc>
 8013200:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013202:	2b00      	cmp	r3, #0
 8013204:	f000 8084 	beq.w	8013310 <_dtoa_r+0x4b8>
 8013208:	e9dd 8900 	ldrd	r8, r9, [sp]
 801320c:	2200      	movs	r2, #0
 801320e:	4b93      	ldr	r3, [pc, #588]	; (801345c <_dtoa_r+0x604>)
 8013210:	4640      	mov	r0, r8
 8013212:	4649      	mov	r1, r9
 8013214:	f7f3 ffc0 	bl	8007198 <__aeabi_dcmplt>
 8013218:	2800      	cmp	r0, #0
 801321a:	d079      	beq.n	8013310 <_dtoa_r+0x4b8>
 801321c:	9b03      	ldr	r3, [sp, #12]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d076      	beq.n	8013310 <_dtoa_r+0x4b8>
 8013222:	9b04      	ldr	r3, [sp, #16]
 8013224:	2b00      	cmp	r3, #0
 8013226:	dd34      	ble.n	8013292 <_dtoa_r+0x43a>
 8013228:	2200      	movs	r2, #0
 801322a:	4b8d      	ldr	r3, [pc, #564]	; (8013460 <_dtoa_r+0x608>)
 801322c:	4640      	mov	r0, r8
 801322e:	4649      	mov	r1, r9
 8013230:	f7f3 fd40 	bl	8006cb4 <__aeabi_dmul>
 8013234:	e9cd 0100 	strd	r0, r1, [sp]
 8013238:	9e04      	ldr	r6, [sp, #16]
 801323a:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 801323e:	3501      	adds	r5, #1
 8013240:	4628      	mov	r0, r5
 8013242:	f7f3 fcd1 	bl	8006be8 <__aeabi_i2d>
 8013246:	e9dd 2300 	ldrd	r2, r3, [sp]
 801324a:	f7f3 fd33 	bl	8006cb4 <__aeabi_dmul>
 801324e:	2200      	movs	r2, #0
 8013250:	4b84      	ldr	r3, [pc, #528]	; (8013464 <_dtoa_r+0x60c>)
 8013252:	f7f3 fb7d 	bl	8006950 <__adddf3>
 8013256:	4680      	mov	r8, r0
 8013258:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 801325c:	2e00      	cmp	r6, #0
 801325e:	d15a      	bne.n	8013316 <_dtoa_r+0x4be>
 8013260:	2200      	movs	r2, #0
 8013262:	4b81      	ldr	r3, [pc, #516]	; (8013468 <_dtoa_r+0x610>)
 8013264:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013268:	f7f3 fb70 	bl	800694c <__aeabi_dsub>
 801326c:	4642      	mov	r2, r8
 801326e:	464b      	mov	r3, r9
 8013270:	e9cd 0100 	strd	r0, r1, [sp]
 8013274:	f7f3 ffae 	bl	80071d4 <__aeabi_dcmpgt>
 8013278:	2800      	cmp	r0, #0
 801327a:	f040 829b 	bne.w	80137b4 <_dtoa_r+0x95c>
 801327e:	4642      	mov	r2, r8
 8013280:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013284:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013288:	f7f3 ff86 	bl	8007198 <__aeabi_dcmplt>
 801328c:	2800      	cmp	r0, #0
 801328e:	f040 828f 	bne.w	80137b0 <_dtoa_r+0x958>
 8013292:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013296:	e9cd 2300 	strd	r2, r3, [sp]
 801329a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801329c:	2b00      	cmp	r3, #0
 801329e:	f2c0 8150 	blt.w	8013542 <_dtoa_r+0x6ea>
 80132a2:	f1bb 0f0e 	cmp.w	fp, #14
 80132a6:	f300 814c 	bgt.w	8013542 <_dtoa_r+0x6ea>
 80132aa:	4b6a      	ldr	r3, [pc, #424]	; (8013454 <_dtoa_r+0x5fc>)
 80132ac:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80132b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80132b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	f280 80da 	bge.w	8013470 <_dtoa_r+0x618>
 80132bc:	9b03      	ldr	r3, [sp, #12]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	f300 80d6 	bgt.w	8013470 <_dtoa_r+0x618>
 80132c4:	f040 8273 	bne.w	80137ae <_dtoa_r+0x956>
 80132c8:	2200      	movs	r2, #0
 80132ca:	4b67      	ldr	r3, [pc, #412]	; (8013468 <_dtoa_r+0x610>)
 80132cc:	4640      	mov	r0, r8
 80132ce:	4649      	mov	r1, r9
 80132d0:	f7f3 fcf0 	bl	8006cb4 <__aeabi_dmul>
 80132d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80132d8:	f7f3 ff72 	bl	80071c0 <__aeabi_dcmpge>
 80132dc:	9e03      	ldr	r6, [sp, #12]
 80132de:	4637      	mov	r7, r6
 80132e0:	2800      	cmp	r0, #0
 80132e2:	f040 824a 	bne.w	801377a <_dtoa_r+0x922>
 80132e6:	9b02      	ldr	r3, [sp, #8]
 80132e8:	9a02      	ldr	r2, [sp, #8]
 80132ea:	1c5d      	adds	r5, r3, #1
 80132ec:	2331      	movs	r3, #49	; 0x31
 80132ee:	7013      	strb	r3, [r2, #0]
 80132f0:	f10b 0b01 	add.w	fp, fp, #1
 80132f4:	e245      	b.n	8013782 <_dtoa_r+0x92a>
 80132f6:	07f2      	lsls	r2, r6, #31
 80132f8:	d505      	bpl.n	8013306 <_dtoa_r+0x4ae>
 80132fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80132fe:	f7f3 fcd9 	bl	8006cb4 <__aeabi_dmul>
 8013302:	3501      	adds	r5, #1
 8013304:	2301      	movs	r3, #1
 8013306:	1076      	asrs	r6, r6, #1
 8013308:	3708      	adds	r7, #8
 801330a:	e775      	b.n	80131f8 <_dtoa_r+0x3a0>
 801330c:	2502      	movs	r5, #2
 801330e:	e777      	b.n	8013200 <_dtoa_r+0x3a8>
 8013310:	465f      	mov	r7, fp
 8013312:	9e03      	ldr	r6, [sp, #12]
 8013314:	e794      	b.n	8013240 <_dtoa_r+0x3e8>
 8013316:	9a02      	ldr	r2, [sp, #8]
 8013318:	4b4e      	ldr	r3, [pc, #312]	; (8013454 <_dtoa_r+0x5fc>)
 801331a:	4432      	add	r2, r6
 801331c:	9213      	str	r2, [sp, #76]	; 0x4c
 801331e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013320:	1e71      	subs	r1, r6, #1
 8013322:	2a00      	cmp	r2, #0
 8013324:	d048      	beq.n	80133b8 <_dtoa_r+0x560>
 8013326:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801332e:	2000      	movs	r0, #0
 8013330:	494e      	ldr	r1, [pc, #312]	; (801346c <_dtoa_r+0x614>)
 8013332:	f7f3 fde9 	bl	8006f08 <__aeabi_ddiv>
 8013336:	4642      	mov	r2, r8
 8013338:	464b      	mov	r3, r9
 801333a:	f7f3 fb07 	bl	800694c <__aeabi_dsub>
 801333e:	9d02      	ldr	r5, [sp, #8]
 8013340:	4680      	mov	r8, r0
 8013342:	4689      	mov	r9, r1
 8013344:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013348:	f7f3 ff64 	bl	8007214 <__aeabi_d2iz>
 801334c:	4606      	mov	r6, r0
 801334e:	f7f3 fc4b 	bl	8006be8 <__aeabi_i2d>
 8013352:	4602      	mov	r2, r0
 8013354:	460b      	mov	r3, r1
 8013356:	e9dd 0100 	ldrd	r0, r1, [sp]
 801335a:	f7f3 faf7 	bl	800694c <__aeabi_dsub>
 801335e:	3630      	adds	r6, #48	; 0x30
 8013360:	f805 6b01 	strb.w	r6, [r5], #1
 8013364:	4642      	mov	r2, r8
 8013366:	464b      	mov	r3, r9
 8013368:	e9cd 0100 	strd	r0, r1, [sp]
 801336c:	f7f3 ff14 	bl	8007198 <__aeabi_dcmplt>
 8013370:	2800      	cmp	r0, #0
 8013372:	d165      	bne.n	8013440 <_dtoa_r+0x5e8>
 8013374:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013378:	2000      	movs	r0, #0
 801337a:	4938      	ldr	r1, [pc, #224]	; (801345c <_dtoa_r+0x604>)
 801337c:	f7f3 fae6 	bl	800694c <__aeabi_dsub>
 8013380:	4642      	mov	r2, r8
 8013382:	464b      	mov	r3, r9
 8013384:	f7f3 ff08 	bl	8007198 <__aeabi_dcmplt>
 8013388:	2800      	cmp	r0, #0
 801338a:	f040 80ba 	bne.w	8013502 <_dtoa_r+0x6aa>
 801338e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013390:	429d      	cmp	r5, r3
 8013392:	f43f af7e 	beq.w	8013292 <_dtoa_r+0x43a>
 8013396:	2200      	movs	r2, #0
 8013398:	4b31      	ldr	r3, [pc, #196]	; (8013460 <_dtoa_r+0x608>)
 801339a:	4640      	mov	r0, r8
 801339c:	4649      	mov	r1, r9
 801339e:	f7f3 fc89 	bl	8006cb4 <__aeabi_dmul>
 80133a2:	2200      	movs	r2, #0
 80133a4:	4680      	mov	r8, r0
 80133a6:	4689      	mov	r9, r1
 80133a8:	4b2d      	ldr	r3, [pc, #180]	; (8013460 <_dtoa_r+0x608>)
 80133aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80133ae:	f7f3 fc81 	bl	8006cb4 <__aeabi_dmul>
 80133b2:	e9cd 0100 	strd	r0, r1, [sp]
 80133b6:	e7c5      	b.n	8013344 <_dtoa_r+0x4ec>
 80133b8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80133bc:	4642      	mov	r2, r8
 80133be:	464b      	mov	r3, r9
 80133c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133c4:	f7f3 fc76 	bl	8006cb4 <__aeabi_dmul>
 80133c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80133cc:	9d02      	ldr	r5, [sp, #8]
 80133ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80133d2:	f7f3 ff1f 	bl	8007214 <__aeabi_d2iz>
 80133d6:	4606      	mov	r6, r0
 80133d8:	f7f3 fc06 	bl	8006be8 <__aeabi_i2d>
 80133dc:	3630      	adds	r6, #48	; 0x30
 80133de:	4602      	mov	r2, r0
 80133e0:	460b      	mov	r3, r1
 80133e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80133e6:	f7f3 fab1 	bl	800694c <__aeabi_dsub>
 80133ea:	f805 6b01 	strb.w	r6, [r5], #1
 80133ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80133f0:	42ab      	cmp	r3, r5
 80133f2:	4680      	mov	r8, r0
 80133f4:	4689      	mov	r9, r1
 80133f6:	f04f 0200 	mov.w	r2, #0
 80133fa:	d125      	bne.n	8013448 <_dtoa_r+0x5f0>
 80133fc:	4b1b      	ldr	r3, [pc, #108]	; (801346c <_dtoa_r+0x614>)
 80133fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8013402:	f7f3 faa5 	bl	8006950 <__adddf3>
 8013406:	4602      	mov	r2, r0
 8013408:	460b      	mov	r3, r1
 801340a:	4640      	mov	r0, r8
 801340c:	4649      	mov	r1, r9
 801340e:	f7f3 fee1 	bl	80071d4 <__aeabi_dcmpgt>
 8013412:	2800      	cmp	r0, #0
 8013414:	d175      	bne.n	8013502 <_dtoa_r+0x6aa>
 8013416:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801341a:	2000      	movs	r0, #0
 801341c:	4913      	ldr	r1, [pc, #76]	; (801346c <_dtoa_r+0x614>)
 801341e:	f7f3 fa95 	bl	800694c <__aeabi_dsub>
 8013422:	4602      	mov	r2, r0
 8013424:	460b      	mov	r3, r1
 8013426:	4640      	mov	r0, r8
 8013428:	4649      	mov	r1, r9
 801342a:	f7f3 feb5 	bl	8007198 <__aeabi_dcmplt>
 801342e:	2800      	cmp	r0, #0
 8013430:	f43f af2f 	beq.w	8013292 <_dtoa_r+0x43a>
 8013434:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013438:	2b30      	cmp	r3, #48	; 0x30
 801343a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 801343e:	d001      	beq.n	8013444 <_dtoa_r+0x5ec>
 8013440:	46bb      	mov	fp, r7
 8013442:	e04d      	b.n	80134e0 <_dtoa_r+0x688>
 8013444:	4615      	mov	r5, r2
 8013446:	e7f5      	b.n	8013434 <_dtoa_r+0x5dc>
 8013448:	4b05      	ldr	r3, [pc, #20]	; (8013460 <_dtoa_r+0x608>)
 801344a:	f7f3 fc33 	bl	8006cb4 <__aeabi_dmul>
 801344e:	e9cd 0100 	strd	r0, r1, [sp]
 8013452:	e7bc      	b.n	80133ce <_dtoa_r+0x576>
 8013454:	08019798 	.word	0x08019798
 8013458:	08019770 	.word	0x08019770
 801345c:	3ff00000 	.word	0x3ff00000
 8013460:	40240000 	.word	0x40240000
 8013464:	401c0000 	.word	0x401c0000
 8013468:	40140000 	.word	0x40140000
 801346c:	3fe00000 	.word	0x3fe00000
 8013470:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013474:	9d02      	ldr	r5, [sp, #8]
 8013476:	4642      	mov	r2, r8
 8013478:	464b      	mov	r3, r9
 801347a:	4630      	mov	r0, r6
 801347c:	4639      	mov	r1, r7
 801347e:	f7f3 fd43 	bl	8006f08 <__aeabi_ddiv>
 8013482:	f7f3 fec7 	bl	8007214 <__aeabi_d2iz>
 8013486:	9000      	str	r0, [sp, #0]
 8013488:	f7f3 fbae 	bl	8006be8 <__aeabi_i2d>
 801348c:	4642      	mov	r2, r8
 801348e:	464b      	mov	r3, r9
 8013490:	f7f3 fc10 	bl	8006cb4 <__aeabi_dmul>
 8013494:	4602      	mov	r2, r0
 8013496:	460b      	mov	r3, r1
 8013498:	4630      	mov	r0, r6
 801349a:	4639      	mov	r1, r7
 801349c:	f7f3 fa56 	bl	800694c <__aeabi_dsub>
 80134a0:	9e00      	ldr	r6, [sp, #0]
 80134a2:	9f03      	ldr	r7, [sp, #12]
 80134a4:	3630      	adds	r6, #48	; 0x30
 80134a6:	f805 6b01 	strb.w	r6, [r5], #1
 80134aa:	9e02      	ldr	r6, [sp, #8]
 80134ac:	1bae      	subs	r6, r5, r6
 80134ae:	42b7      	cmp	r7, r6
 80134b0:	4602      	mov	r2, r0
 80134b2:	460b      	mov	r3, r1
 80134b4:	d138      	bne.n	8013528 <_dtoa_r+0x6d0>
 80134b6:	f7f3 fa4b 	bl	8006950 <__adddf3>
 80134ba:	4606      	mov	r6, r0
 80134bc:	460f      	mov	r7, r1
 80134be:	4602      	mov	r2, r0
 80134c0:	460b      	mov	r3, r1
 80134c2:	4640      	mov	r0, r8
 80134c4:	4649      	mov	r1, r9
 80134c6:	f7f3 fe67 	bl	8007198 <__aeabi_dcmplt>
 80134ca:	b9c8      	cbnz	r0, 8013500 <_dtoa_r+0x6a8>
 80134cc:	4632      	mov	r2, r6
 80134ce:	463b      	mov	r3, r7
 80134d0:	4640      	mov	r0, r8
 80134d2:	4649      	mov	r1, r9
 80134d4:	f7f3 fe56 	bl	8007184 <__aeabi_dcmpeq>
 80134d8:	b110      	cbz	r0, 80134e0 <_dtoa_r+0x688>
 80134da:	9b00      	ldr	r3, [sp, #0]
 80134dc:	07db      	lsls	r3, r3, #31
 80134de:	d40f      	bmi.n	8013500 <_dtoa_r+0x6a8>
 80134e0:	4651      	mov	r1, sl
 80134e2:	4620      	mov	r0, r4
 80134e4:	f000 fdc0 	bl	8014068 <_Bfree>
 80134e8:	2300      	movs	r3, #0
 80134ea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80134ec:	702b      	strb	r3, [r5, #0]
 80134ee:	f10b 0301 	add.w	r3, fp, #1
 80134f2:	6013      	str	r3, [r2, #0]
 80134f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	f43f acf8 	beq.w	8012eec <_dtoa_r+0x94>
 80134fc:	601d      	str	r5, [r3, #0]
 80134fe:	e4f5      	b.n	8012eec <_dtoa_r+0x94>
 8013500:	465f      	mov	r7, fp
 8013502:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013506:	2a39      	cmp	r2, #57	; 0x39
 8013508:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 801350c:	d106      	bne.n	801351c <_dtoa_r+0x6c4>
 801350e:	9a02      	ldr	r2, [sp, #8]
 8013510:	429a      	cmp	r2, r3
 8013512:	d107      	bne.n	8013524 <_dtoa_r+0x6cc>
 8013514:	2330      	movs	r3, #48	; 0x30
 8013516:	7013      	strb	r3, [r2, #0]
 8013518:	3701      	adds	r7, #1
 801351a:	4613      	mov	r3, r2
 801351c:	781a      	ldrb	r2, [r3, #0]
 801351e:	3201      	adds	r2, #1
 8013520:	701a      	strb	r2, [r3, #0]
 8013522:	e78d      	b.n	8013440 <_dtoa_r+0x5e8>
 8013524:	461d      	mov	r5, r3
 8013526:	e7ec      	b.n	8013502 <_dtoa_r+0x6aa>
 8013528:	2200      	movs	r2, #0
 801352a:	4ba4      	ldr	r3, [pc, #656]	; (80137bc <_dtoa_r+0x964>)
 801352c:	f7f3 fbc2 	bl	8006cb4 <__aeabi_dmul>
 8013530:	2200      	movs	r2, #0
 8013532:	2300      	movs	r3, #0
 8013534:	4606      	mov	r6, r0
 8013536:	460f      	mov	r7, r1
 8013538:	f7f3 fe24 	bl	8007184 <__aeabi_dcmpeq>
 801353c:	2800      	cmp	r0, #0
 801353e:	d09a      	beq.n	8013476 <_dtoa_r+0x61e>
 8013540:	e7ce      	b.n	80134e0 <_dtoa_r+0x688>
 8013542:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013544:	2a00      	cmp	r2, #0
 8013546:	f000 80cd 	beq.w	80136e4 <_dtoa_r+0x88c>
 801354a:	9a07      	ldr	r2, [sp, #28]
 801354c:	2a01      	cmp	r2, #1
 801354e:	f300 80af 	bgt.w	80136b0 <_dtoa_r+0x858>
 8013552:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013554:	2a00      	cmp	r2, #0
 8013556:	f000 80a7 	beq.w	80136a8 <_dtoa_r+0x850>
 801355a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801355e:	9e08      	ldr	r6, [sp, #32]
 8013560:	9d05      	ldr	r5, [sp, #20]
 8013562:	9a05      	ldr	r2, [sp, #20]
 8013564:	441a      	add	r2, r3
 8013566:	9205      	str	r2, [sp, #20]
 8013568:	9a06      	ldr	r2, [sp, #24]
 801356a:	2101      	movs	r1, #1
 801356c:	441a      	add	r2, r3
 801356e:	4620      	mov	r0, r4
 8013570:	9206      	str	r2, [sp, #24]
 8013572:	f000 fe19 	bl	80141a8 <__i2b>
 8013576:	4607      	mov	r7, r0
 8013578:	2d00      	cmp	r5, #0
 801357a:	dd0c      	ble.n	8013596 <_dtoa_r+0x73e>
 801357c:	9b06      	ldr	r3, [sp, #24]
 801357e:	2b00      	cmp	r3, #0
 8013580:	dd09      	ble.n	8013596 <_dtoa_r+0x73e>
 8013582:	42ab      	cmp	r3, r5
 8013584:	9a05      	ldr	r2, [sp, #20]
 8013586:	bfa8      	it	ge
 8013588:	462b      	movge	r3, r5
 801358a:	1ad2      	subs	r2, r2, r3
 801358c:	9205      	str	r2, [sp, #20]
 801358e:	9a06      	ldr	r2, [sp, #24]
 8013590:	1aed      	subs	r5, r5, r3
 8013592:	1ad3      	subs	r3, r2, r3
 8013594:	9306      	str	r3, [sp, #24]
 8013596:	9b08      	ldr	r3, [sp, #32]
 8013598:	b1f3      	cbz	r3, 80135d8 <_dtoa_r+0x780>
 801359a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801359c:	2b00      	cmp	r3, #0
 801359e:	f000 80a5 	beq.w	80136ec <_dtoa_r+0x894>
 80135a2:	2e00      	cmp	r6, #0
 80135a4:	dd10      	ble.n	80135c8 <_dtoa_r+0x770>
 80135a6:	4639      	mov	r1, r7
 80135a8:	4632      	mov	r2, r6
 80135aa:	4620      	mov	r0, r4
 80135ac:	f000 fe92 	bl	80142d4 <__pow5mult>
 80135b0:	4652      	mov	r2, sl
 80135b2:	4601      	mov	r1, r0
 80135b4:	4607      	mov	r7, r0
 80135b6:	4620      	mov	r0, r4
 80135b8:	f000 fdff 	bl	80141ba <__multiply>
 80135bc:	4651      	mov	r1, sl
 80135be:	4680      	mov	r8, r0
 80135c0:	4620      	mov	r0, r4
 80135c2:	f000 fd51 	bl	8014068 <_Bfree>
 80135c6:	46c2      	mov	sl, r8
 80135c8:	9b08      	ldr	r3, [sp, #32]
 80135ca:	1b9a      	subs	r2, r3, r6
 80135cc:	d004      	beq.n	80135d8 <_dtoa_r+0x780>
 80135ce:	4651      	mov	r1, sl
 80135d0:	4620      	mov	r0, r4
 80135d2:	f000 fe7f 	bl	80142d4 <__pow5mult>
 80135d6:	4682      	mov	sl, r0
 80135d8:	2101      	movs	r1, #1
 80135da:	4620      	mov	r0, r4
 80135dc:	f000 fde4 	bl	80141a8 <__i2b>
 80135e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	4606      	mov	r6, r0
 80135e6:	f340 8083 	ble.w	80136f0 <_dtoa_r+0x898>
 80135ea:	461a      	mov	r2, r3
 80135ec:	4601      	mov	r1, r0
 80135ee:	4620      	mov	r0, r4
 80135f0:	f000 fe70 	bl	80142d4 <__pow5mult>
 80135f4:	9b07      	ldr	r3, [sp, #28]
 80135f6:	2b01      	cmp	r3, #1
 80135f8:	4606      	mov	r6, r0
 80135fa:	dd7c      	ble.n	80136f6 <_dtoa_r+0x89e>
 80135fc:	f04f 0800 	mov.w	r8, #0
 8013600:	6933      	ldr	r3, [r6, #16]
 8013602:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013606:	6918      	ldr	r0, [r3, #16]
 8013608:	f000 fd80 	bl	801410c <__hi0bits>
 801360c:	f1c0 0020 	rsb	r0, r0, #32
 8013610:	9b06      	ldr	r3, [sp, #24]
 8013612:	4418      	add	r0, r3
 8013614:	f010 001f 	ands.w	r0, r0, #31
 8013618:	f000 8096 	beq.w	8013748 <_dtoa_r+0x8f0>
 801361c:	f1c0 0320 	rsb	r3, r0, #32
 8013620:	2b04      	cmp	r3, #4
 8013622:	f340 8087 	ble.w	8013734 <_dtoa_r+0x8dc>
 8013626:	9b05      	ldr	r3, [sp, #20]
 8013628:	f1c0 001c 	rsb	r0, r0, #28
 801362c:	4403      	add	r3, r0
 801362e:	9305      	str	r3, [sp, #20]
 8013630:	9b06      	ldr	r3, [sp, #24]
 8013632:	4405      	add	r5, r0
 8013634:	4403      	add	r3, r0
 8013636:	9306      	str	r3, [sp, #24]
 8013638:	9b05      	ldr	r3, [sp, #20]
 801363a:	2b00      	cmp	r3, #0
 801363c:	dd05      	ble.n	801364a <_dtoa_r+0x7f2>
 801363e:	4651      	mov	r1, sl
 8013640:	461a      	mov	r2, r3
 8013642:	4620      	mov	r0, r4
 8013644:	f000 fe94 	bl	8014370 <__lshift>
 8013648:	4682      	mov	sl, r0
 801364a:	9b06      	ldr	r3, [sp, #24]
 801364c:	2b00      	cmp	r3, #0
 801364e:	dd05      	ble.n	801365c <_dtoa_r+0x804>
 8013650:	4631      	mov	r1, r6
 8013652:	461a      	mov	r2, r3
 8013654:	4620      	mov	r0, r4
 8013656:	f000 fe8b 	bl	8014370 <__lshift>
 801365a:	4606      	mov	r6, r0
 801365c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801365e:	2b00      	cmp	r3, #0
 8013660:	d074      	beq.n	801374c <_dtoa_r+0x8f4>
 8013662:	4631      	mov	r1, r6
 8013664:	4650      	mov	r0, sl
 8013666:	f000 fed4 	bl	8014412 <__mcmp>
 801366a:	2800      	cmp	r0, #0
 801366c:	da6e      	bge.n	801374c <_dtoa_r+0x8f4>
 801366e:	2300      	movs	r3, #0
 8013670:	4651      	mov	r1, sl
 8013672:	220a      	movs	r2, #10
 8013674:	4620      	mov	r0, r4
 8013676:	f000 fd0e 	bl	8014096 <__multadd>
 801367a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801367c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8013680:	4682      	mov	sl, r0
 8013682:	2b00      	cmp	r3, #0
 8013684:	f000 81a8 	beq.w	80139d8 <_dtoa_r+0xb80>
 8013688:	2300      	movs	r3, #0
 801368a:	4639      	mov	r1, r7
 801368c:	220a      	movs	r2, #10
 801368e:	4620      	mov	r0, r4
 8013690:	f000 fd01 	bl	8014096 <__multadd>
 8013694:	9b04      	ldr	r3, [sp, #16]
 8013696:	2b00      	cmp	r3, #0
 8013698:	4607      	mov	r7, r0
 801369a:	f300 80c8 	bgt.w	801382e <_dtoa_r+0x9d6>
 801369e:	9b07      	ldr	r3, [sp, #28]
 80136a0:	2b02      	cmp	r3, #2
 80136a2:	f340 80c4 	ble.w	801382e <_dtoa_r+0x9d6>
 80136a6:	e059      	b.n	801375c <_dtoa_r+0x904>
 80136a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80136aa:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80136ae:	e756      	b.n	801355e <_dtoa_r+0x706>
 80136b0:	9b03      	ldr	r3, [sp, #12]
 80136b2:	1e5e      	subs	r6, r3, #1
 80136b4:	9b08      	ldr	r3, [sp, #32]
 80136b6:	42b3      	cmp	r3, r6
 80136b8:	bfbf      	itttt	lt
 80136ba:	9b08      	ldrlt	r3, [sp, #32]
 80136bc:	9608      	strlt	r6, [sp, #32]
 80136be:	1af2      	sublt	r2, r6, r3
 80136c0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80136c2:	bfb6      	itet	lt
 80136c4:	189b      	addlt	r3, r3, r2
 80136c6:	1b9e      	subge	r6, r3, r6
 80136c8:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80136ca:	9b03      	ldr	r3, [sp, #12]
 80136cc:	bfb8      	it	lt
 80136ce:	2600      	movlt	r6, #0
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	bfb9      	ittee	lt
 80136d4:	9b05      	ldrlt	r3, [sp, #20]
 80136d6:	9a03      	ldrlt	r2, [sp, #12]
 80136d8:	9d05      	ldrge	r5, [sp, #20]
 80136da:	9b03      	ldrge	r3, [sp, #12]
 80136dc:	bfbc      	itt	lt
 80136de:	1a9d      	sublt	r5, r3, r2
 80136e0:	2300      	movlt	r3, #0
 80136e2:	e73e      	b.n	8013562 <_dtoa_r+0x70a>
 80136e4:	9e08      	ldr	r6, [sp, #32]
 80136e6:	9d05      	ldr	r5, [sp, #20]
 80136e8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80136ea:	e745      	b.n	8013578 <_dtoa_r+0x720>
 80136ec:	9a08      	ldr	r2, [sp, #32]
 80136ee:	e76e      	b.n	80135ce <_dtoa_r+0x776>
 80136f0:	9b07      	ldr	r3, [sp, #28]
 80136f2:	2b01      	cmp	r3, #1
 80136f4:	dc19      	bgt.n	801372a <_dtoa_r+0x8d2>
 80136f6:	9b00      	ldr	r3, [sp, #0]
 80136f8:	b9bb      	cbnz	r3, 801372a <_dtoa_r+0x8d2>
 80136fa:	9b01      	ldr	r3, [sp, #4]
 80136fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013700:	b99b      	cbnz	r3, 801372a <_dtoa_r+0x8d2>
 8013702:	9b01      	ldr	r3, [sp, #4]
 8013704:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013708:	0d1b      	lsrs	r3, r3, #20
 801370a:	051b      	lsls	r3, r3, #20
 801370c:	b183      	cbz	r3, 8013730 <_dtoa_r+0x8d8>
 801370e:	9b05      	ldr	r3, [sp, #20]
 8013710:	3301      	adds	r3, #1
 8013712:	9305      	str	r3, [sp, #20]
 8013714:	9b06      	ldr	r3, [sp, #24]
 8013716:	3301      	adds	r3, #1
 8013718:	9306      	str	r3, [sp, #24]
 801371a:	f04f 0801 	mov.w	r8, #1
 801371e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013720:	2b00      	cmp	r3, #0
 8013722:	f47f af6d 	bne.w	8013600 <_dtoa_r+0x7a8>
 8013726:	2001      	movs	r0, #1
 8013728:	e772      	b.n	8013610 <_dtoa_r+0x7b8>
 801372a:	f04f 0800 	mov.w	r8, #0
 801372e:	e7f6      	b.n	801371e <_dtoa_r+0x8c6>
 8013730:	4698      	mov	r8, r3
 8013732:	e7f4      	b.n	801371e <_dtoa_r+0x8c6>
 8013734:	d080      	beq.n	8013638 <_dtoa_r+0x7e0>
 8013736:	9a05      	ldr	r2, [sp, #20]
 8013738:	331c      	adds	r3, #28
 801373a:	441a      	add	r2, r3
 801373c:	9205      	str	r2, [sp, #20]
 801373e:	9a06      	ldr	r2, [sp, #24]
 8013740:	441a      	add	r2, r3
 8013742:	441d      	add	r5, r3
 8013744:	4613      	mov	r3, r2
 8013746:	e776      	b.n	8013636 <_dtoa_r+0x7de>
 8013748:	4603      	mov	r3, r0
 801374a:	e7f4      	b.n	8013736 <_dtoa_r+0x8de>
 801374c:	9b03      	ldr	r3, [sp, #12]
 801374e:	2b00      	cmp	r3, #0
 8013750:	dc36      	bgt.n	80137c0 <_dtoa_r+0x968>
 8013752:	9b07      	ldr	r3, [sp, #28]
 8013754:	2b02      	cmp	r3, #2
 8013756:	dd33      	ble.n	80137c0 <_dtoa_r+0x968>
 8013758:	9b03      	ldr	r3, [sp, #12]
 801375a:	9304      	str	r3, [sp, #16]
 801375c:	9b04      	ldr	r3, [sp, #16]
 801375e:	b963      	cbnz	r3, 801377a <_dtoa_r+0x922>
 8013760:	4631      	mov	r1, r6
 8013762:	2205      	movs	r2, #5
 8013764:	4620      	mov	r0, r4
 8013766:	f000 fc96 	bl	8014096 <__multadd>
 801376a:	4601      	mov	r1, r0
 801376c:	4606      	mov	r6, r0
 801376e:	4650      	mov	r0, sl
 8013770:	f000 fe4f 	bl	8014412 <__mcmp>
 8013774:	2800      	cmp	r0, #0
 8013776:	f73f adb6 	bgt.w	80132e6 <_dtoa_r+0x48e>
 801377a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801377c:	9d02      	ldr	r5, [sp, #8]
 801377e:	ea6f 0b03 	mvn.w	fp, r3
 8013782:	2300      	movs	r3, #0
 8013784:	9303      	str	r3, [sp, #12]
 8013786:	4631      	mov	r1, r6
 8013788:	4620      	mov	r0, r4
 801378a:	f000 fc6d 	bl	8014068 <_Bfree>
 801378e:	2f00      	cmp	r7, #0
 8013790:	f43f aea6 	beq.w	80134e0 <_dtoa_r+0x688>
 8013794:	9b03      	ldr	r3, [sp, #12]
 8013796:	b12b      	cbz	r3, 80137a4 <_dtoa_r+0x94c>
 8013798:	42bb      	cmp	r3, r7
 801379a:	d003      	beq.n	80137a4 <_dtoa_r+0x94c>
 801379c:	4619      	mov	r1, r3
 801379e:	4620      	mov	r0, r4
 80137a0:	f000 fc62 	bl	8014068 <_Bfree>
 80137a4:	4639      	mov	r1, r7
 80137a6:	4620      	mov	r0, r4
 80137a8:	f000 fc5e 	bl	8014068 <_Bfree>
 80137ac:	e698      	b.n	80134e0 <_dtoa_r+0x688>
 80137ae:	2600      	movs	r6, #0
 80137b0:	4637      	mov	r7, r6
 80137b2:	e7e2      	b.n	801377a <_dtoa_r+0x922>
 80137b4:	46bb      	mov	fp, r7
 80137b6:	4637      	mov	r7, r6
 80137b8:	e595      	b.n	80132e6 <_dtoa_r+0x48e>
 80137ba:	bf00      	nop
 80137bc:	40240000 	.word	0x40240000
 80137c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137c2:	bb93      	cbnz	r3, 801382a <_dtoa_r+0x9d2>
 80137c4:	9b03      	ldr	r3, [sp, #12]
 80137c6:	9304      	str	r3, [sp, #16]
 80137c8:	9d02      	ldr	r5, [sp, #8]
 80137ca:	4631      	mov	r1, r6
 80137cc:	4650      	mov	r0, sl
 80137ce:	f7ff fab7 	bl	8012d40 <quorem>
 80137d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80137d6:	f805 9b01 	strb.w	r9, [r5], #1
 80137da:	9b02      	ldr	r3, [sp, #8]
 80137dc:	9a04      	ldr	r2, [sp, #16]
 80137de:	1aeb      	subs	r3, r5, r3
 80137e0:	429a      	cmp	r2, r3
 80137e2:	f300 80dc 	bgt.w	801399e <_dtoa_r+0xb46>
 80137e6:	9b02      	ldr	r3, [sp, #8]
 80137e8:	2a01      	cmp	r2, #1
 80137ea:	bfac      	ite	ge
 80137ec:	189b      	addge	r3, r3, r2
 80137ee:	3301      	addlt	r3, #1
 80137f0:	4698      	mov	r8, r3
 80137f2:	2300      	movs	r3, #0
 80137f4:	9303      	str	r3, [sp, #12]
 80137f6:	4651      	mov	r1, sl
 80137f8:	2201      	movs	r2, #1
 80137fa:	4620      	mov	r0, r4
 80137fc:	f000 fdb8 	bl	8014370 <__lshift>
 8013800:	4631      	mov	r1, r6
 8013802:	4682      	mov	sl, r0
 8013804:	f000 fe05 	bl	8014412 <__mcmp>
 8013808:	2800      	cmp	r0, #0
 801380a:	f300 808d 	bgt.w	8013928 <_dtoa_r+0xad0>
 801380e:	d103      	bne.n	8013818 <_dtoa_r+0x9c0>
 8013810:	f019 0f01 	tst.w	r9, #1
 8013814:	f040 8088 	bne.w	8013928 <_dtoa_r+0xad0>
 8013818:	4645      	mov	r5, r8
 801381a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801381e:	2b30      	cmp	r3, #48	; 0x30
 8013820:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8013824:	d1af      	bne.n	8013786 <_dtoa_r+0x92e>
 8013826:	4615      	mov	r5, r2
 8013828:	e7f7      	b.n	801381a <_dtoa_r+0x9c2>
 801382a:	9b03      	ldr	r3, [sp, #12]
 801382c:	9304      	str	r3, [sp, #16]
 801382e:	2d00      	cmp	r5, #0
 8013830:	dd05      	ble.n	801383e <_dtoa_r+0x9e6>
 8013832:	4639      	mov	r1, r7
 8013834:	462a      	mov	r2, r5
 8013836:	4620      	mov	r0, r4
 8013838:	f000 fd9a 	bl	8014370 <__lshift>
 801383c:	4607      	mov	r7, r0
 801383e:	f1b8 0f00 	cmp.w	r8, #0
 8013842:	d04c      	beq.n	80138de <_dtoa_r+0xa86>
 8013844:	6879      	ldr	r1, [r7, #4]
 8013846:	4620      	mov	r0, r4
 8013848:	f000 fbda 	bl	8014000 <_Balloc>
 801384c:	693a      	ldr	r2, [r7, #16]
 801384e:	3202      	adds	r2, #2
 8013850:	4605      	mov	r5, r0
 8013852:	0092      	lsls	r2, r2, #2
 8013854:	f107 010c 	add.w	r1, r7, #12
 8013858:	300c      	adds	r0, #12
 801385a:	f7fd fbfa 	bl	8011052 <memcpy>
 801385e:	2201      	movs	r2, #1
 8013860:	4629      	mov	r1, r5
 8013862:	4620      	mov	r0, r4
 8013864:	f000 fd84 	bl	8014370 <__lshift>
 8013868:	9b00      	ldr	r3, [sp, #0]
 801386a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801386e:	9703      	str	r7, [sp, #12]
 8013870:	f003 0301 	and.w	r3, r3, #1
 8013874:	4607      	mov	r7, r0
 8013876:	9305      	str	r3, [sp, #20]
 8013878:	4631      	mov	r1, r6
 801387a:	4650      	mov	r0, sl
 801387c:	f7ff fa60 	bl	8012d40 <quorem>
 8013880:	9903      	ldr	r1, [sp, #12]
 8013882:	4605      	mov	r5, r0
 8013884:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8013888:	4650      	mov	r0, sl
 801388a:	f000 fdc2 	bl	8014412 <__mcmp>
 801388e:	463a      	mov	r2, r7
 8013890:	9000      	str	r0, [sp, #0]
 8013892:	4631      	mov	r1, r6
 8013894:	4620      	mov	r0, r4
 8013896:	f000 fdd6 	bl	8014446 <__mdiff>
 801389a:	68c3      	ldr	r3, [r0, #12]
 801389c:	4602      	mov	r2, r0
 801389e:	bb03      	cbnz	r3, 80138e2 <_dtoa_r+0xa8a>
 80138a0:	4601      	mov	r1, r0
 80138a2:	9006      	str	r0, [sp, #24]
 80138a4:	4650      	mov	r0, sl
 80138a6:	f000 fdb4 	bl	8014412 <__mcmp>
 80138aa:	9a06      	ldr	r2, [sp, #24]
 80138ac:	4603      	mov	r3, r0
 80138ae:	4611      	mov	r1, r2
 80138b0:	4620      	mov	r0, r4
 80138b2:	9306      	str	r3, [sp, #24]
 80138b4:	f000 fbd8 	bl	8014068 <_Bfree>
 80138b8:	9b06      	ldr	r3, [sp, #24]
 80138ba:	b9a3      	cbnz	r3, 80138e6 <_dtoa_r+0xa8e>
 80138bc:	9a07      	ldr	r2, [sp, #28]
 80138be:	b992      	cbnz	r2, 80138e6 <_dtoa_r+0xa8e>
 80138c0:	9a05      	ldr	r2, [sp, #20]
 80138c2:	b982      	cbnz	r2, 80138e6 <_dtoa_r+0xa8e>
 80138c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80138c8:	d029      	beq.n	801391e <_dtoa_r+0xac6>
 80138ca:	9b00      	ldr	r3, [sp, #0]
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	dd01      	ble.n	80138d4 <_dtoa_r+0xa7c>
 80138d0:	f105 0931 	add.w	r9, r5, #49	; 0x31
 80138d4:	f108 0501 	add.w	r5, r8, #1
 80138d8:	f888 9000 	strb.w	r9, [r8]
 80138dc:	e753      	b.n	8013786 <_dtoa_r+0x92e>
 80138de:	4638      	mov	r0, r7
 80138e0:	e7c2      	b.n	8013868 <_dtoa_r+0xa10>
 80138e2:	2301      	movs	r3, #1
 80138e4:	e7e3      	b.n	80138ae <_dtoa_r+0xa56>
 80138e6:	9a00      	ldr	r2, [sp, #0]
 80138e8:	2a00      	cmp	r2, #0
 80138ea:	db04      	blt.n	80138f6 <_dtoa_r+0xa9e>
 80138ec:	d125      	bne.n	801393a <_dtoa_r+0xae2>
 80138ee:	9a07      	ldr	r2, [sp, #28]
 80138f0:	bb1a      	cbnz	r2, 801393a <_dtoa_r+0xae2>
 80138f2:	9a05      	ldr	r2, [sp, #20]
 80138f4:	bb0a      	cbnz	r2, 801393a <_dtoa_r+0xae2>
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	ddec      	ble.n	80138d4 <_dtoa_r+0xa7c>
 80138fa:	4651      	mov	r1, sl
 80138fc:	2201      	movs	r2, #1
 80138fe:	4620      	mov	r0, r4
 8013900:	f000 fd36 	bl	8014370 <__lshift>
 8013904:	4631      	mov	r1, r6
 8013906:	4682      	mov	sl, r0
 8013908:	f000 fd83 	bl	8014412 <__mcmp>
 801390c:	2800      	cmp	r0, #0
 801390e:	dc03      	bgt.n	8013918 <_dtoa_r+0xac0>
 8013910:	d1e0      	bne.n	80138d4 <_dtoa_r+0xa7c>
 8013912:	f019 0f01 	tst.w	r9, #1
 8013916:	d0dd      	beq.n	80138d4 <_dtoa_r+0xa7c>
 8013918:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 801391c:	d1d8      	bne.n	80138d0 <_dtoa_r+0xa78>
 801391e:	2339      	movs	r3, #57	; 0x39
 8013920:	f888 3000 	strb.w	r3, [r8]
 8013924:	f108 0801 	add.w	r8, r8, #1
 8013928:	4645      	mov	r5, r8
 801392a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801392e:	2b39      	cmp	r3, #57	; 0x39
 8013930:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8013934:	d03b      	beq.n	80139ae <_dtoa_r+0xb56>
 8013936:	3301      	adds	r3, #1
 8013938:	e040      	b.n	80139bc <_dtoa_r+0xb64>
 801393a:	2b00      	cmp	r3, #0
 801393c:	f108 0501 	add.w	r5, r8, #1
 8013940:	dd05      	ble.n	801394e <_dtoa_r+0xaf6>
 8013942:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8013946:	d0ea      	beq.n	801391e <_dtoa_r+0xac6>
 8013948:	f109 0901 	add.w	r9, r9, #1
 801394c:	e7c4      	b.n	80138d8 <_dtoa_r+0xa80>
 801394e:	9b02      	ldr	r3, [sp, #8]
 8013950:	9a04      	ldr	r2, [sp, #16]
 8013952:	f805 9c01 	strb.w	r9, [r5, #-1]
 8013956:	1aeb      	subs	r3, r5, r3
 8013958:	4293      	cmp	r3, r2
 801395a:	46a8      	mov	r8, r5
 801395c:	f43f af4b 	beq.w	80137f6 <_dtoa_r+0x99e>
 8013960:	4651      	mov	r1, sl
 8013962:	2300      	movs	r3, #0
 8013964:	220a      	movs	r2, #10
 8013966:	4620      	mov	r0, r4
 8013968:	f000 fb95 	bl	8014096 <__multadd>
 801396c:	9b03      	ldr	r3, [sp, #12]
 801396e:	9903      	ldr	r1, [sp, #12]
 8013970:	42bb      	cmp	r3, r7
 8013972:	4682      	mov	sl, r0
 8013974:	f04f 0300 	mov.w	r3, #0
 8013978:	f04f 020a 	mov.w	r2, #10
 801397c:	4620      	mov	r0, r4
 801397e:	d104      	bne.n	801398a <_dtoa_r+0xb32>
 8013980:	f000 fb89 	bl	8014096 <__multadd>
 8013984:	9003      	str	r0, [sp, #12]
 8013986:	4607      	mov	r7, r0
 8013988:	e776      	b.n	8013878 <_dtoa_r+0xa20>
 801398a:	f000 fb84 	bl	8014096 <__multadd>
 801398e:	2300      	movs	r3, #0
 8013990:	9003      	str	r0, [sp, #12]
 8013992:	220a      	movs	r2, #10
 8013994:	4639      	mov	r1, r7
 8013996:	4620      	mov	r0, r4
 8013998:	f000 fb7d 	bl	8014096 <__multadd>
 801399c:	e7f3      	b.n	8013986 <_dtoa_r+0xb2e>
 801399e:	4651      	mov	r1, sl
 80139a0:	2300      	movs	r3, #0
 80139a2:	220a      	movs	r2, #10
 80139a4:	4620      	mov	r0, r4
 80139a6:	f000 fb76 	bl	8014096 <__multadd>
 80139aa:	4682      	mov	sl, r0
 80139ac:	e70d      	b.n	80137ca <_dtoa_r+0x972>
 80139ae:	9b02      	ldr	r3, [sp, #8]
 80139b0:	4293      	cmp	r3, r2
 80139b2:	d105      	bne.n	80139c0 <_dtoa_r+0xb68>
 80139b4:	9a02      	ldr	r2, [sp, #8]
 80139b6:	f10b 0b01 	add.w	fp, fp, #1
 80139ba:	2331      	movs	r3, #49	; 0x31
 80139bc:	7013      	strb	r3, [r2, #0]
 80139be:	e6e2      	b.n	8013786 <_dtoa_r+0x92e>
 80139c0:	4615      	mov	r5, r2
 80139c2:	e7b2      	b.n	801392a <_dtoa_r+0xad2>
 80139c4:	4b09      	ldr	r3, [pc, #36]	; (80139ec <_dtoa_r+0xb94>)
 80139c6:	f7ff baae 	b.w	8012f26 <_dtoa_r+0xce>
 80139ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	f47f aa88 	bne.w	8012ee2 <_dtoa_r+0x8a>
 80139d2:	4b07      	ldr	r3, [pc, #28]	; (80139f0 <_dtoa_r+0xb98>)
 80139d4:	f7ff baa7 	b.w	8012f26 <_dtoa_r+0xce>
 80139d8:	9b04      	ldr	r3, [sp, #16]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	f73f aef4 	bgt.w	80137c8 <_dtoa_r+0x970>
 80139e0:	9b07      	ldr	r3, [sp, #28]
 80139e2:	2b02      	cmp	r3, #2
 80139e4:	f77f aef0 	ble.w	80137c8 <_dtoa_r+0x970>
 80139e8:	e6b8      	b.n	801375c <_dtoa_r+0x904>
 80139ea:	bf00      	nop
 80139ec:	080196de 	.word	0x080196de
 80139f0:	08019700 	.word	0x08019700

080139f4 <__sflush_r>:
 80139f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80139f8:	b293      	uxth	r3, r2
 80139fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139fe:	4605      	mov	r5, r0
 8013a00:	0718      	lsls	r0, r3, #28
 8013a02:	460c      	mov	r4, r1
 8013a04:	d461      	bmi.n	8013aca <__sflush_r+0xd6>
 8013a06:	684b      	ldr	r3, [r1, #4]
 8013a08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	818a      	strh	r2, [r1, #12]
 8013a10:	dc05      	bgt.n	8013a1e <__sflush_r+0x2a>
 8013a12:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	dc02      	bgt.n	8013a1e <__sflush_r+0x2a>
 8013a18:	2000      	movs	r0, #0
 8013a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a20:	2e00      	cmp	r6, #0
 8013a22:	d0f9      	beq.n	8013a18 <__sflush_r+0x24>
 8013a24:	2300      	movs	r3, #0
 8013a26:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013a2a:	682f      	ldr	r7, [r5, #0]
 8013a2c:	602b      	str	r3, [r5, #0]
 8013a2e:	d037      	beq.n	8013aa0 <__sflush_r+0xac>
 8013a30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013a32:	89a3      	ldrh	r3, [r4, #12]
 8013a34:	075a      	lsls	r2, r3, #29
 8013a36:	d505      	bpl.n	8013a44 <__sflush_r+0x50>
 8013a38:	6863      	ldr	r3, [r4, #4]
 8013a3a:	1ac0      	subs	r0, r0, r3
 8013a3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013a3e:	b10b      	cbz	r3, 8013a44 <__sflush_r+0x50>
 8013a40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013a42:	1ac0      	subs	r0, r0, r3
 8013a44:	2300      	movs	r3, #0
 8013a46:	4602      	mov	r2, r0
 8013a48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013a4a:	6a21      	ldr	r1, [r4, #32]
 8013a4c:	4628      	mov	r0, r5
 8013a4e:	47b0      	blx	r6
 8013a50:	1c43      	adds	r3, r0, #1
 8013a52:	89a3      	ldrh	r3, [r4, #12]
 8013a54:	d106      	bne.n	8013a64 <__sflush_r+0x70>
 8013a56:	6829      	ldr	r1, [r5, #0]
 8013a58:	291d      	cmp	r1, #29
 8013a5a:	d84f      	bhi.n	8013afc <__sflush_r+0x108>
 8013a5c:	4a2d      	ldr	r2, [pc, #180]	; (8013b14 <__sflush_r+0x120>)
 8013a5e:	40ca      	lsrs	r2, r1
 8013a60:	07d6      	lsls	r6, r2, #31
 8013a62:	d54b      	bpl.n	8013afc <__sflush_r+0x108>
 8013a64:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013a68:	b21b      	sxth	r3, r3
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	6062      	str	r2, [r4, #4]
 8013a6e:	04d9      	lsls	r1, r3, #19
 8013a70:	6922      	ldr	r2, [r4, #16]
 8013a72:	81a3      	strh	r3, [r4, #12]
 8013a74:	6022      	str	r2, [r4, #0]
 8013a76:	d504      	bpl.n	8013a82 <__sflush_r+0x8e>
 8013a78:	1c42      	adds	r2, r0, #1
 8013a7a:	d101      	bne.n	8013a80 <__sflush_r+0x8c>
 8013a7c:	682b      	ldr	r3, [r5, #0]
 8013a7e:	b903      	cbnz	r3, 8013a82 <__sflush_r+0x8e>
 8013a80:	6560      	str	r0, [r4, #84]	; 0x54
 8013a82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a84:	602f      	str	r7, [r5, #0]
 8013a86:	2900      	cmp	r1, #0
 8013a88:	d0c6      	beq.n	8013a18 <__sflush_r+0x24>
 8013a8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013a8e:	4299      	cmp	r1, r3
 8013a90:	d002      	beq.n	8013a98 <__sflush_r+0xa4>
 8013a92:	4628      	mov	r0, r5
 8013a94:	f000 f9aa 	bl	8013dec <_free_r>
 8013a98:	2000      	movs	r0, #0
 8013a9a:	6360      	str	r0, [r4, #52]	; 0x34
 8013a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013aa0:	6a21      	ldr	r1, [r4, #32]
 8013aa2:	2301      	movs	r3, #1
 8013aa4:	4628      	mov	r0, r5
 8013aa6:	47b0      	blx	r6
 8013aa8:	1c41      	adds	r1, r0, #1
 8013aaa:	d1c2      	bne.n	8013a32 <__sflush_r+0x3e>
 8013aac:	682b      	ldr	r3, [r5, #0]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	d0bf      	beq.n	8013a32 <__sflush_r+0x3e>
 8013ab2:	2b1d      	cmp	r3, #29
 8013ab4:	d001      	beq.n	8013aba <__sflush_r+0xc6>
 8013ab6:	2b16      	cmp	r3, #22
 8013ab8:	d101      	bne.n	8013abe <__sflush_r+0xca>
 8013aba:	602f      	str	r7, [r5, #0]
 8013abc:	e7ac      	b.n	8013a18 <__sflush_r+0x24>
 8013abe:	89a3      	ldrh	r3, [r4, #12]
 8013ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ac4:	81a3      	strh	r3, [r4, #12]
 8013ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013aca:	690f      	ldr	r7, [r1, #16]
 8013acc:	2f00      	cmp	r7, #0
 8013ace:	d0a3      	beq.n	8013a18 <__sflush_r+0x24>
 8013ad0:	079b      	lsls	r3, r3, #30
 8013ad2:	680e      	ldr	r6, [r1, #0]
 8013ad4:	bf08      	it	eq
 8013ad6:	694b      	ldreq	r3, [r1, #20]
 8013ad8:	600f      	str	r7, [r1, #0]
 8013ada:	bf18      	it	ne
 8013adc:	2300      	movne	r3, #0
 8013ade:	eba6 0807 	sub.w	r8, r6, r7
 8013ae2:	608b      	str	r3, [r1, #8]
 8013ae4:	f1b8 0f00 	cmp.w	r8, #0
 8013ae8:	dd96      	ble.n	8013a18 <__sflush_r+0x24>
 8013aea:	4643      	mov	r3, r8
 8013aec:	463a      	mov	r2, r7
 8013aee:	6a21      	ldr	r1, [r4, #32]
 8013af0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013af2:	4628      	mov	r0, r5
 8013af4:	47b0      	blx	r6
 8013af6:	2800      	cmp	r0, #0
 8013af8:	dc07      	bgt.n	8013b0a <__sflush_r+0x116>
 8013afa:	89a3      	ldrh	r3, [r4, #12]
 8013afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013b00:	81a3      	strh	r3, [r4, #12]
 8013b02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b0a:	4407      	add	r7, r0
 8013b0c:	eba8 0800 	sub.w	r8, r8, r0
 8013b10:	e7e8      	b.n	8013ae4 <__sflush_r+0xf0>
 8013b12:	bf00      	nop
 8013b14:	20400001 	.word	0x20400001

08013b18 <_fflush_r>:
 8013b18:	b538      	push	{r3, r4, r5, lr}
 8013b1a:	690b      	ldr	r3, [r1, #16]
 8013b1c:	4605      	mov	r5, r0
 8013b1e:	460c      	mov	r4, r1
 8013b20:	b913      	cbnz	r3, 8013b28 <_fflush_r+0x10>
 8013b22:	2500      	movs	r5, #0
 8013b24:	4628      	mov	r0, r5
 8013b26:	bd38      	pop	{r3, r4, r5, pc}
 8013b28:	b118      	cbz	r0, 8013b32 <_fflush_r+0x1a>
 8013b2a:	6983      	ldr	r3, [r0, #24]
 8013b2c:	b90b      	cbnz	r3, 8013b32 <_fflush_r+0x1a>
 8013b2e:	f000 f887 	bl	8013c40 <__sinit>
 8013b32:	4b14      	ldr	r3, [pc, #80]	; (8013b84 <_fflush_r+0x6c>)
 8013b34:	429c      	cmp	r4, r3
 8013b36:	d11b      	bne.n	8013b70 <_fflush_r+0x58>
 8013b38:	686c      	ldr	r4, [r5, #4]
 8013b3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d0ef      	beq.n	8013b22 <_fflush_r+0xa>
 8013b42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013b44:	07d0      	lsls	r0, r2, #31
 8013b46:	d404      	bmi.n	8013b52 <_fflush_r+0x3a>
 8013b48:	0599      	lsls	r1, r3, #22
 8013b4a:	d402      	bmi.n	8013b52 <_fflush_r+0x3a>
 8013b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b4e:	f7fc ffd3 	bl	8010af8 <__retarget_lock_acquire_recursive>
 8013b52:	4628      	mov	r0, r5
 8013b54:	4621      	mov	r1, r4
 8013b56:	f7ff ff4d 	bl	80139f4 <__sflush_r>
 8013b5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013b5c:	07da      	lsls	r2, r3, #31
 8013b5e:	4605      	mov	r5, r0
 8013b60:	d4e0      	bmi.n	8013b24 <_fflush_r+0xc>
 8013b62:	89a3      	ldrh	r3, [r4, #12]
 8013b64:	059b      	lsls	r3, r3, #22
 8013b66:	d4dd      	bmi.n	8013b24 <_fflush_r+0xc>
 8013b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b6a:	f7fc ffc7 	bl	8010afc <__retarget_lock_release_recursive>
 8013b6e:	e7d9      	b.n	8013b24 <_fflush_r+0xc>
 8013b70:	4b05      	ldr	r3, [pc, #20]	; (8013b88 <_fflush_r+0x70>)
 8013b72:	429c      	cmp	r4, r3
 8013b74:	d101      	bne.n	8013b7a <_fflush_r+0x62>
 8013b76:	68ac      	ldr	r4, [r5, #8]
 8013b78:	e7df      	b.n	8013b3a <_fflush_r+0x22>
 8013b7a:	4b04      	ldr	r3, [pc, #16]	; (8013b8c <_fflush_r+0x74>)
 8013b7c:	429c      	cmp	r4, r3
 8013b7e:	bf08      	it	eq
 8013b80:	68ec      	ldreq	r4, [r5, #12]
 8013b82:	e7da      	b.n	8013b3a <_fflush_r+0x22>
 8013b84:	08019730 	.word	0x08019730
 8013b88:	08019750 	.word	0x08019750
 8013b8c:	08019710 	.word	0x08019710

08013b90 <_cleanup_r>:
 8013b90:	4901      	ldr	r1, [pc, #4]	; (8013b98 <_cleanup_r+0x8>)
 8013b92:	f000 b9e7 	b.w	8013f64 <_fwalk_reent>
 8013b96:	bf00      	nop
 8013b98:	08014715 	.word	0x08014715

08013b9c <std.isra.0>:
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	b510      	push	{r4, lr}
 8013ba0:	4604      	mov	r4, r0
 8013ba2:	6003      	str	r3, [r0, #0]
 8013ba4:	6043      	str	r3, [r0, #4]
 8013ba6:	6083      	str	r3, [r0, #8]
 8013ba8:	8181      	strh	r1, [r0, #12]
 8013baa:	6643      	str	r3, [r0, #100]	; 0x64
 8013bac:	81c2      	strh	r2, [r0, #14]
 8013bae:	6103      	str	r3, [r0, #16]
 8013bb0:	6143      	str	r3, [r0, #20]
 8013bb2:	6183      	str	r3, [r0, #24]
 8013bb4:	4619      	mov	r1, r3
 8013bb6:	2208      	movs	r2, #8
 8013bb8:	305c      	adds	r0, #92	; 0x5c
 8013bba:	f7fd fa6f 	bl	801109c <memset>
 8013bbe:	4b05      	ldr	r3, [pc, #20]	; (8013bd4 <std.isra.0+0x38>)
 8013bc0:	6263      	str	r3, [r4, #36]	; 0x24
 8013bc2:	4b05      	ldr	r3, [pc, #20]	; (8013bd8 <std.isra.0+0x3c>)
 8013bc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8013bc6:	4b05      	ldr	r3, [pc, #20]	; (8013bdc <std.isra.0+0x40>)
 8013bc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013bca:	4b05      	ldr	r3, [pc, #20]	; (8013be0 <std.isra.0+0x44>)
 8013bcc:	6224      	str	r4, [r4, #32]
 8013bce:	6323      	str	r3, [r4, #48]	; 0x30
 8013bd0:	bd10      	pop	{r4, pc}
 8013bd2:	bf00      	nop
 8013bd4:	08011625 	.word	0x08011625
 8013bd8:	08011647 	.word	0x08011647
 8013bdc:	0801167f 	.word	0x0801167f
 8013be0:	080116a3 	.word	0x080116a3

08013be4 <__sfmoreglue>:
 8013be4:	b570      	push	{r4, r5, r6, lr}
 8013be6:	1e4a      	subs	r2, r1, #1
 8013be8:	2568      	movs	r5, #104	; 0x68
 8013bea:	4355      	muls	r5, r2
 8013bec:	460e      	mov	r6, r1
 8013bee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013bf2:	f7fc ffff 	bl	8010bf4 <_malloc_r>
 8013bf6:	4604      	mov	r4, r0
 8013bf8:	b140      	cbz	r0, 8013c0c <__sfmoreglue+0x28>
 8013bfa:	2100      	movs	r1, #0
 8013bfc:	e880 0042 	stmia.w	r0, {r1, r6}
 8013c00:	300c      	adds	r0, #12
 8013c02:	60a0      	str	r0, [r4, #8]
 8013c04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013c08:	f7fd fa48 	bl	801109c <memset>
 8013c0c:	4620      	mov	r0, r4
 8013c0e:	bd70      	pop	{r4, r5, r6, pc}

08013c10 <__sfp_lock_acquire>:
 8013c10:	4801      	ldr	r0, [pc, #4]	; (8013c18 <__sfp_lock_acquire+0x8>)
 8013c12:	f7fc bf71 	b.w	8010af8 <__retarget_lock_acquire_recursive>
 8013c16:	bf00      	nop
 8013c18:	2000ce86 	.word	0x2000ce86

08013c1c <__sfp_lock_release>:
 8013c1c:	4801      	ldr	r0, [pc, #4]	; (8013c24 <__sfp_lock_release+0x8>)
 8013c1e:	f7fc bf6d 	b.w	8010afc <__retarget_lock_release_recursive>
 8013c22:	bf00      	nop
 8013c24:	2000ce86 	.word	0x2000ce86

08013c28 <__sinit_lock_acquire>:
 8013c28:	4801      	ldr	r0, [pc, #4]	; (8013c30 <__sinit_lock_acquire+0x8>)
 8013c2a:	f7fc bf65 	b.w	8010af8 <__retarget_lock_acquire_recursive>
 8013c2e:	bf00      	nop
 8013c30:	2000ce85 	.word	0x2000ce85

08013c34 <__sinit_lock_release>:
 8013c34:	4801      	ldr	r0, [pc, #4]	; (8013c3c <__sinit_lock_release+0x8>)
 8013c36:	f7fc bf61 	b.w	8010afc <__retarget_lock_release_recursive>
 8013c3a:	bf00      	nop
 8013c3c:	2000ce85 	.word	0x2000ce85

08013c40 <__sinit>:
 8013c40:	b510      	push	{r4, lr}
 8013c42:	4604      	mov	r4, r0
 8013c44:	f7ff fff0 	bl	8013c28 <__sinit_lock_acquire>
 8013c48:	69a3      	ldr	r3, [r4, #24]
 8013c4a:	b11b      	cbz	r3, 8013c54 <__sinit+0x14>
 8013c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c50:	f7ff bff0 	b.w	8013c34 <__sinit_lock_release>
 8013c54:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
 8013c58:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
 8013c5c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 8013c60:	4b12      	ldr	r3, [pc, #72]	; (8013cac <__sinit+0x6c>)
 8013c62:	4a13      	ldr	r2, [pc, #76]	; (8013cb0 <__sinit+0x70>)
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	62a2      	str	r2, [r4, #40]	; 0x28
 8013c68:	429c      	cmp	r4, r3
 8013c6a:	bf04      	itt	eq
 8013c6c:	2301      	moveq	r3, #1
 8013c6e:	61a3      	streq	r3, [r4, #24]
 8013c70:	4620      	mov	r0, r4
 8013c72:	f000 f81f 	bl	8013cb4 <__sfp>
 8013c76:	6060      	str	r0, [r4, #4]
 8013c78:	4620      	mov	r0, r4
 8013c7a:	f000 f81b 	bl	8013cb4 <__sfp>
 8013c7e:	60a0      	str	r0, [r4, #8]
 8013c80:	4620      	mov	r0, r4
 8013c82:	f000 f817 	bl	8013cb4 <__sfp>
 8013c86:	2200      	movs	r2, #0
 8013c88:	60e0      	str	r0, [r4, #12]
 8013c8a:	2104      	movs	r1, #4
 8013c8c:	6860      	ldr	r0, [r4, #4]
 8013c8e:	f7ff ff85 	bl	8013b9c <std.isra.0>
 8013c92:	2201      	movs	r2, #1
 8013c94:	2109      	movs	r1, #9
 8013c96:	68a0      	ldr	r0, [r4, #8]
 8013c98:	f7ff ff80 	bl	8013b9c <std.isra.0>
 8013c9c:	2202      	movs	r2, #2
 8013c9e:	2112      	movs	r1, #18
 8013ca0:	68e0      	ldr	r0, [r4, #12]
 8013ca2:	f7ff ff7b 	bl	8013b9c <std.isra.0>
 8013ca6:	2301      	movs	r3, #1
 8013ca8:	61a3      	str	r3, [r4, #24]
 8013caa:	e7cf      	b.n	8013c4c <__sinit+0xc>
 8013cac:	08019000 	.word	0x08019000
 8013cb0:	08013b91 	.word	0x08013b91

08013cb4 <__sfp>:
 8013cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cb6:	4607      	mov	r7, r0
 8013cb8:	f7ff ffaa 	bl	8013c10 <__sfp_lock_acquire>
 8013cbc:	4b1f      	ldr	r3, [pc, #124]	; (8013d3c <__sfp+0x88>)
 8013cbe:	681e      	ldr	r6, [r3, #0]
 8013cc0:	69b3      	ldr	r3, [r6, #24]
 8013cc2:	b913      	cbnz	r3, 8013cca <__sfp+0x16>
 8013cc4:	4630      	mov	r0, r6
 8013cc6:	f7ff ffbb 	bl	8013c40 <__sinit>
 8013cca:	36d8      	adds	r6, #216	; 0xd8
 8013ccc:	68b4      	ldr	r4, [r6, #8]
 8013cce:	6873      	ldr	r3, [r6, #4]
 8013cd0:	3b01      	subs	r3, #1
 8013cd2:	d503      	bpl.n	8013cdc <__sfp+0x28>
 8013cd4:	6833      	ldr	r3, [r6, #0]
 8013cd6:	b133      	cbz	r3, 8013ce6 <__sfp+0x32>
 8013cd8:	6836      	ldr	r6, [r6, #0]
 8013cda:	e7f7      	b.n	8013ccc <__sfp+0x18>
 8013cdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013ce0:	b17d      	cbz	r5, 8013d02 <__sfp+0x4e>
 8013ce2:	3468      	adds	r4, #104	; 0x68
 8013ce4:	e7f4      	b.n	8013cd0 <__sfp+0x1c>
 8013ce6:	2104      	movs	r1, #4
 8013ce8:	4638      	mov	r0, r7
 8013cea:	f7ff ff7b 	bl	8013be4 <__sfmoreglue>
 8013cee:	4604      	mov	r4, r0
 8013cf0:	6030      	str	r0, [r6, #0]
 8013cf2:	2800      	cmp	r0, #0
 8013cf4:	d1f0      	bne.n	8013cd8 <__sfp+0x24>
 8013cf6:	f7ff ff91 	bl	8013c1c <__sfp_lock_release>
 8013cfa:	230c      	movs	r3, #12
 8013cfc:	603b      	str	r3, [r7, #0]
 8013cfe:	4620      	mov	r0, r4
 8013d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013d02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013d06:	81e3      	strh	r3, [r4, #14]
 8013d08:	2301      	movs	r3, #1
 8013d0a:	81a3      	strh	r3, [r4, #12]
 8013d0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013d10:	6665      	str	r5, [r4, #100]	; 0x64
 8013d12:	f7fc feef 	bl	8010af4 <__retarget_lock_init_recursive>
 8013d16:	f7ff ff81 	bl	8013c1c <__sfp_lock_release>
 8013d1a:	6025      	str	r5, [r4, #0]
 8013d1c:	60a5      	str	r5, [r4, #8]
 8013d1e:	6065      	str	r5, [r4, #4]
 8013d20:	6125      	str	r5, [r4, #16]
 8013d22:	6165      	str	r5, [r4, #20]
 8013d24:	61a5      	str	r5, [r4, #24]
 8013d26:	2208      	movs	r2, #8
 8013d28:	4629      	mov	r1, r5
 8013d2a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013d2e:	f7fd f9b5 	bl	801109c <memset>
 8013d32:	6365      	str	r5, [r4, #52]	; 0x34
 8013d34:	63a5      	str	r5, [r4, #56]	; 0x38
 8013d36:	64a5      	str	r5, [r4, #72]	; 0x48
 8013d38:	64e5      	str	r5, [r4, #76]	; 0x4c
 8013d3a:	e7e0      	b.n	8013cfe <__sfp+0x4a>
 8013d3c:	08019000 	.word	0x08019000

08013d40 <_malloc_trim_r>:
 8013d40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d44:	4f25      	ldr	r7, [pc, #148]	; (8013ddc <_malloc_trim_r+0x9c>)
 8013d46:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8013de8 <_malloc_trim_r+0xa8>
 8013d4a:	4689      	mov	r9, r1
 8013d4c:	4606      	mov	r6, r0
 8013d4e:	f7fd f9ad 	bl	80110ac <__malloc_lock>
 8013d52:	68bb      	ldr	r3, [r7, #8]
 8013d54:	685d      	ldr	r5, [r3, #4]
 8013d56:	f1a8 0411 	sub.w	r4, r8, #17
 8013d5a:	f025 0503 	bic.w	r5, r5, #3
 8013d5e:	eba4 0409 	sub.w	r4, r4, r9
 8013d62:	442c      	add	r4, r5
 8013d64:	fbb4 f4f8 	udiv	r4, r4, r8
 8013d68:	3c01      	subs	r4, #1
 8013d6a:	fb08 f404 	mul.w	r4, r8, r4
 8013d6e:	4544      	cmp	r4, r8
 8013d70:	da05      	bge.n	8013d7e <_malloc_trim_r+0x3e>
 8013d72:	4630      	mov	r0, r6
 8013d74:	f7fd f9a0 	bl	80110b8 <__malloc_unlock>
 8013d78:	2000      	movs	r0, #0
 8013d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d7e:	2100      	movs	r1, #0
 8013d80:	4630      	mov	r0, r6
 8013d82:	f7fd fbd7 	bl	8011534 <_sbrk_r>
 8013d86:	68bb      	ldr	r3, [r7, #8]
 8013d88:	442b      	add	r3, r5
 8013d8a:	4298      	cmp	r0, r3
 8013d8c:	d1f1      	bne.n	8013d72 <_malloc_trim_r+0x32>
 8013d8e:	4261      	negs	r1, r4
 8013d90:	4630      	mov	r0, r6
 8013d92:	f7fd fbcf 	bl	8011534 <_sbrk_r>
 8013d96:	3001      	adds	r0, #1
 8013d98:	d110      	bne.n	8013dbc <_malloc_trim_r+0x7c>
 8013d9a:	2100      	movs	r1, #0
 8013d9c:	4630      	mov	r0, r6
 8013d9e:	f7fd fbc9 	bl	8011534 <_sbrk_r>
 8013da2:	68ba      	ldr	r2, [r7, #8]
 8013da4:	1a83      	subs	r3, r0, r2
 8013da6:	2b0f      	cmp	r3, #15
 8013da8:	dde3      	ble.n	8013d72 <_malloc_trim_r+0x32>
 8013daa:	490d      	ldr	r1, [pc, #52]	; (8013de0 <_malloc_trim_r+0xa0>)
 8013dac:	6809      	ldr	r1, [r1, #0]
 8013dae:	1a40      	subs	r0, r0, r1
 8013db0:	490c      	ldr	r1, [pc, #48]	; (8013de4 <_malloc_trim_r+0xa4>)
 8013db2:	f043 0301 	orr.w	r3, r3, #1
 8013db6:	6008      	str	r0, [r1, #0]
 8013db8:	6053      	str	r3, [r2, #4]
 8013dba:	e7da      	b.n	8013d72 <_malloc_trim_r+0x32>
 8013dbc:	68bb      	ldr	r3, [r7, #8]
 8013dbe:	4a09      	ldr	r2, [pc, #36]	; (8013de4 <_malloc_trim_r+0xa4>)
 8013dc0:	1b2d      	subs	r5, r5, r4
 8013dc2:	f045 0501 	orr.w	r5, r5, #1
 8013dc6:	605d      	str	r5, [r3, #4]
 8013dc8:	6813      	ldr	r3, [r2, #0]
 8013dca:	4630      	mov	r0, r6
 8013dcc:	1b1c      	subs	r4, r3, r4
 8013dce:	6014      	str	r4, [r2, #0]
 8013dd0:	f7fd f972 	bl	80110b8 <__malloc_unlock>
 8013dd4:	2001      	movs	r0, #1
 8013dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013dda:	bf00      	nop
 8013ddc:	20000288 	.word	0x20000288
 8013de0:	20000690 	.word	0x20000690
 8013de4:	20008d34 	.word	0x20008d34
 8013de8:	00001000 	.word	0x00001000

08013dec <_free_r>:
 8013dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013df0:	4604      	mov	r4, r0
 8013df2:	4688      	mov	r8, r1
 8013df4:	2900      	cmp	r1, #0
 8013df6:	f000 80ab 	beq.w	8013f50 <_free_r+0x164>
 8013dfa:	f7fd f957 	bl	80110ac <__malloc_lock>
 8013dfe:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8013e02:	4d54      	ldr	r5, [pc, #336]	; (8013f54 <_free_r+0x168>)
 8013e04:	f022 0001 	bic.w	r0, r2, #1
 8013e08:	f1a8 0308 	sub.w	r3, r8, #8
 8013e0c:	181f      	adds	r7, r3, r0
 8013e0e:	68a9      	ldr	r1, [r5, #8]
 8013e10:	687e      	ldr	r6, [r7, #4]
 8013e12:	428f      	cmp	r7, r1
 8013e14:	f026 0603 	bic.w	r6, r6, #3
 8013e18:	f002 0201 	and.w	r2, r2, #1
 8013e1c:	d11b      	bne.n	8013e56 <_free_r+0x6a>
 8013e1e:	4430      	add	r0, r6
 8013e20:	b93a      	cbnz	r2, 8013e32 <_free_r+0x46>
 8013e22:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8013e26:	1a9b      	subs	r3, r3, r2
 8013e28:	4410      	add	r0, r2
 8013e2a:	6899      	ldr	r1, [r3, #8]
 8013e2c:	68da      	ldr	r2, [r3, #12]
 8013e2e:	60ca      	str	r2, [r1, #12]
 8013e30:	6091      	str	r1, [r2, #8]
 8013e32:	f040 0201 	orr.w	r2, r0, #1
 8013e36:	605a      	str	r2, [r3, #4]
 8013e38:	60ab      	str	r3, [r5, #8]
 8013e3a:	4b47      	ldr	r3, [pc, #284]	; (8013f58 <_free_r+0x16c>)
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	4298      	cmp	r0, r3
 8013e40:	d304      	bcc.n	8013e4c <_free_r+0x60>
 8013e42:	4b46      	ldr	r3, [pc, #280]	; (8013f5c <_free_r+0x170>)
 8013e44:	4620      	mov	r0, r4
 8013e46:	6819      	ldr	r1, [r3, #0]
 8013e48:	f7ff ff7a 	bl	8013d40 <_malloc_trim_r>
 8013e4c:	4620      	mov	r0, r4
 8013e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e52:	f7fd b931 	b.w	80110b8 <__malloc_unlock>
 8013e56:	607e      	str	r6, [r7, #4]
 8013e58:	2a00      	cmp	r2, #0
 8013e5a:	d139      	bne.n	8013ed0 <_free_r+0xe4>
 8013e5c:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8013e60:	1a5b      	subs	r3, r3, r1
 8013e62:	4408      	add	r0, r1
 8013e64:	6899      	ldr	r1, [r3, #8]
 8013e66:	f105 0e08 	add.w	lr, r5, #8
 8013e6a:	4571      	cmp	r1, lr
 8013e6c:	d032      	beq.n	8013ed4 <_free_r+0xe8>
 8013e6e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8013e72:	f8c1 e00c 	str.w	lr, [r1, #12]
 8013e76:	f8ce 1008 	str.w	r1, [lr, #8]
 8013e7a:	19b9      	adds	r1, r7, r6
 8013e7c:	6849      	ldr	r1, [r1, #4]
 8013e7e:	07c9      	lsls	r1, r1, #31
 8013e80:	d40a      	bmi.n	8013e98 <_free_r+0xac>
 8013e82:	4430      	add	r0, r6
 8013e84:	68b9      	ldr	r1, [r7, #8]
 8013e86:	bb3a      	cbnz	r2, 8013ed8 <_free_r+0xec>
 8013e88:	4e35      	ldr	r6, [pc, #212]	; (8013f60 <_free_r+0x174>)
 8013e8a:	42b1      	cmp	r1, r6
 8013e8c:	d124      	bne.n	8013ed8 <_free_r+0xec>
 8013e8e:	616b      	str	r3, [r5, #20]
 8013e90:	612b      	str	r3, [r5, #16]
 8013e92:	2201      	movs	r2, #1
 8013e94:	60d9      	str	r1, [r3, #12]
 8013e96:	6099      	str	r1, [r3, #8]
 8013e98:	f040 0101 	orr.w	r1, r0, #1
 8013e9c:	6059      	str	r1, [r3, #4]
 8013e9e:	5018      	str	r0, [r3, r0]
 8013ea0:	2a00      	cmp	r2, #0
 8013ea2:	d1d3      	bne.n	8013e4c <_free_r+0x60>
 8013ea4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8013ea8:	d21a      	bcs.n	8013ee0 <_free_r+0xf4>
 8013eaa:	08c0      	lsrs	r0, r0, #3
 8013eac:	1081      	asrs	r1, r0, #2
 8013eae:	2201      	movs	r2, #1
 8013eb0:	408a      	lsls	r2, r1
 8013eb2:	6869      	ldr	r1, [r5, #4]
 8013eb4:	3001      	adds	r0, #1
 8013eb6:	430a      	orrs	r2, r1
 8013eb8:	606a      	str	r2, [r5, #4]
 8013eba:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8013ebe:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8013ec2:	6099      	str	r1, [r3, #8]
 8013ec4:	3a08      	subs	r2, #8
 8013ec6:	60da      	str	r2, [r3, #12]
 8013ec8:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8013ecc:	60cb      	str	r3, [r1, #12]
 8013ece:	e7bd      	b.n	8013e4c <_free_r+0x60>
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	e7d2      	b.n	8013e7a <_free_r+0x8e>
 8013ed4:	2201      	movs	r2, #1
 8013ed6:	e7d0      	b.n	8013e7a <_free_r+0x8e>
 8013ed8:	68fe      	ldr	r6, [r7, #12]
 8013eda:	60ce      	str	r6, [r1, #12]
 8013edc:	60b1      	str	r1, [r6, #8]
 8013ede:	e7db      	b.n	8013e98 <_free_r+0xac>
 8013ee0:	0a42      	lsrs	r2, r0, #9
 8013ee2:	2a04      	cmp	r2, #4
 8013ee4:	d813      	bhi.n	8013f0e <_free_r+0x122>
 8013ee6:	0982      	lsrs	r2, r0, #6
 8013ee8:	3238      	adds	r2, #56	; 0x38
 8013eea:	1c51      	adds	r1, r2, #1
 8013eec:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8013ef0:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8013ef4:	428e      	cmp	r6, r1
 8013ef6:	d124      	bne.n	8013f42 <_free_r+0x156>
 8013ef8:	2001      	movs	r0, #1
 8013efa:	1092      	asrs	r2, r2, #2
 8013efc:	fa00 f202 	lsl.w	r2, r0, r2
 8013f00:	6868      	ldr	r0, [r5, #4]
 8013f02:	4302      	orrs	r2, r0
 8013f04:	606a      	str	r2, [r5, #4]
 8013f06:	60de      	str	r6, [r3, #12]
 8013f08:	6099      	str	r1, [r3, #8]
 8013f0a:	60b3      	str	r3, [r6, #8]
 8013f0c:	e7de      	b.n	8013ecc <_free_r+0xe0>
 8013f0e:	2a14      	cmp	r2, #20
 8013f10:	d801      	bhi.n	8013f16 <_free_r+0x12a>
 8013f12:	325b      	adds	r2, #91	; 0x5b
 8013f14:	e7e9      	b.n	8013eea <_free_r+0xfe>
 8013f16:	2a54      	cmp	r2, #84	; 0x54
 8013f18:	d802      	bhi.n	8013f20 <_free_r+0x134>
 8013f1a:	0b02      	lsrs	r2, r0, #12
 8013f1c:	326e      	adds	r2, #110	; 0x6e
 8013f1e:	e7e4      	b.n	8013eea <_free_r+0xfe>
 8013f20:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8013f24:	d802      	bhi.n	8013f2c <_free_r+0x140>
 8013f26:	0bc2      	lsrs	r2, r0, #15
 8013f28:	3277      	adds	r2, #119	; 0x77
 8013f2a:	e7de      	b.n	8013eea <_free_r+0xfe>
 8013f2c:	f240 5154 	movw	r1, #1364	; 0x554
 8013f30:	428a      	cmp	r2, r1
 8013f32:	bf9a      	itte	ls
 8013f34:	0c82      	lsrls	r2, r0, #18
 8013f36:	327c      	addls	r2, #124	; 0x7c
 8013f38:	227e      	movhi	r2, #126	; 0x7e
 8013f3a:	e7d6      	b.n	8013eea <_free_r+0xfe>
 8013f3c:	6889      	ldr	r1, [r1, #8]
 8013f3e:	428e      	cmp	r6, r1
 8013f40:	d004      	beq.n	8013f4c <_free_r+0x160>
 8013f42:	684a      	ldr	r2, [r1, #4]
 8013f44:	f022 0203 	bic.w	r2, r2, #3
 8013f48:	4290      	cmp	r0, r2
 8013f4a:	d3f7      	bcc.n	8013f3c <_free_r+0x150>
 8013f4c:	68ce      	ldr	r6, [r1, #12]
 8013f4e:	e7da      	b.n	8013f06 <_free_r+0x11a>
 8013f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f54:	20000288 	.word	0x20000288
 8013f58:	20000694 	.word	0x20000694
 8013f5c:	20008d64 	.word	0x20008d64
 8013f60:	20000290 	.word	0x20000290

08013f64 <_fwalk_reent>:
 8013f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013f68:	4680      	mov	r8, r0
 8013f6a:	4689      	mov	r9, r1
 8013f6c:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8013f70:	2600      	movs	r6, #0
 8013f72:	b914      	cbnz	r4, 8013f7a <_fwalk_reent+0x16>
 8013f74:	4630      	mov	r0, r6
 8013f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f7a:	68a5      	ldr	r5, [r4, #8]
 8013f7c:	6867      	ldr	r7, [r4, #4]
 8013f7e:	3f01      	subs	r7, #1
 8013f80:	d501      	bpl.n	8013f86 <_fwalk_reent+0x22>
 8013f82:	6824      	ldr	r4, [r4, #0]
 8013f84:	e7f5      	b.n	8013f72 <_fwalk_reent+0xe>
 8013f86:	89ab      	ldrh	r3, [r5, #12]
 8013f88:	2b01      	cmp	r3, #1
 8013f8a:	d907      	bls.n	8013f9c <_fwalk_reent+0x38>
 8013f8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013f90:	3301      	adds	r3, #1
 8013f92:	d003      	beq.n	8013f9c <_fwalk_reent+0x38>
 8013f94:	4629      	mov	r1, r5
 8013f96:	4640      	mov	r0, r8
 8013f98:	47c8      	blx	r9
 8013f9a:	4306      	orrs	r6, r0
 8013f9c:	3568      	adds	r5, #104	; 0x68
 8013f9e:	e7ee      	b.n	8013f7e <_fwalk_reent+0x1a>

08013fa0 <_isatty_r>:
 8013fa0:	b538      	push	{r3, r4, r5, lr}
 8013fa2:	4c06      	ldr	r4, [pc, #24]	; (8013fbc <_isatty_r+0x1c>)
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	4605      	mov	r5, r0
 8013fa8:	4608      	mov	r0, r1
 8013faa:	6023      	str	r3, [r4, #0]
 8013fac:	f000 fc36 	bl	801481c <_isatty>
 8013fb0:	1c43      	adds	r3, r0, #1
 8013fb2:	d102      	bne.n	8013fba <_isatty_r+0x1a>
 8013fb4:	6823      	ldr	r3, [r4, #0]
 8013fb6:	b103      	cbz	r3, 8013fba <_isatty_r+0x1a>
 8013fb8:	602b      	str	r3, [r5, #0]
 8013fba:	bd38      	pop	{r3, r4, r5, pc}
 8013fbc:	2000ce8c 	.word	0x2000ce8c

08013fc0 <_localeconv_r>:
 8013fc0:	4b04      	ldr	r3, [pc, #16]	; (8013fd4 <_localeconv_r+0x14>)
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	6a18      	ldr	r0, [r3, #32]
 8013fc6:	4b04      	ldr	r3, [pc, #16]	; (8013fd8 <_localeconv_r+0x18>)
 8013fc8:	2800      	cmp	r0, #0
 8013fca:	bf08      	it	eq
 8013fcc:	4618      	moveq	r0, r3
 8013fce:	30f0      	adds	r0, #240	; 0xf0
 8013fd0:	4770      	bx	lr
 8013fd2:	bf00      	nop
 8013fd4:	20000028 	.word	0x20000028
 8013fd8:	2000011c 	.word	0x2000011c

08013fdc <_lseek_r>:
 8013fdc:	b538      	push	{r3, r4, r5, lr}
 8013fde:	4c07      	ldr	r4, [pc, #28]	; (8013ffc <_lseek_r+0x20>)
 8013fe0:	4605      	mov	r5, r0
 8013fe2:	4608      	mov	r0, r1
 8013fe4:	4611      	mov	r1, r2
 8013fe6:	2200      	movs	r2, #0
 8013fe8:	6022      	str	r2, [r4, #0]
 8013fea:	461a      	mov	r2, r3
 8013fec:	f000 fc26 	bl	801483c <_lseek>
 8013ff0:	1c43      	adds	r3, r0, #1
 8013ff2:	d102      	bne.n	8013ffa <_lseek_r+0x1e>
 8013ff4:	6823      	ldr	r3, [r4, #0]
 8013ff6:	b103      	cbz	r3, 8013ffa <_lseek_r+0x1e>
 8013ff8:	602b      	str	r3, [r5, #0]
 8013ffa:	bd38      	pop	{r3, r4, r5, pc}
 8013ffc:	2000ce8c 	.word	0x2000ce8c

08014000 <_Balloc>:
 8014000:	b570      	push	{r4, r5, r6, lr}
 8014002:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014004:	4604      	mov	r4, r0
 8014006:	460e      	mov	r6, r1
 8014008:	b93d      	cbnz	r5, 801401a <_Balloc+0x1a>
 801400a:	2010      	movs	r0, #16
 801400c:	f7fc fde2 	bl	8010bd4 <malloc>
 8014010:	6260      	str	r0, [r4, #36]	; 0x24
 8014012:	6045      	str	r5, [r0, #4]
 8014014:	6085      	str	r5, [r0, #8]
 8014016:	6005      	str	r5, [r0, #0]
 8014018:	60c5      	str	r5, [r0, #12]
 801401a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801401c:	68eb      	ldr	r3, [r5, #12]
 801401e:	b183      	cbz	r3, 8014042 <_Balloc+0x42>
 8014020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014022:	68db      	ldr	r3, [r3, #12]
 8014024:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014028:	b9b8      	cbnz	r0, 801405a <_Balloc+0x5a>
 801402a:	2101      	movs	r1, #1
 801402c:	fa01 f506 	lsl.w	r5, r1, r6
 8014030:	1d6a      	adds	r2, r5, #5
 8014032:	0092      	lsls	r2, r2, #2
 8014034:	4620      	mov	r0, r4
 8014036:	f000 fb3f 	bl	80146b8 <_calloc_r>
 801403a:	b160      	cbz	r0, 8014056 <_Balloc+0x56>
 801403c:	6046      	str	r6, [r0, #4]
 801403e:	6085      	str	r5, [r0, #8]
 8014040:	e00e      	b.n	8014060 <_Balloc+0x60>
 8014042:	2221      	movs	r2, #33	; 0x21
 8014044:	2104      	movs	r1, #4
 8014046:	4620      	mov	r0, r4
 8014048:	f000 fb36 	bl	80146b8 <_calloc_r>
 801404c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801404e:	60e8      	str	r0, [r5, #12]
 8014050:	68db      	ldr	r3, [r3, #12]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d1e4      	bne.n	8014020 <_Balloc+0x20>
 8014056:	2000      	movs	r0, #0
 8014058:	bd70      	pop	{r4, r5, r6, pc}
 801405a:	6802      	ldr	r2, [r0, #0]
 801405c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8014060:	2300      	movs	r3, #0
 8014062:	6103      	str	r3, [r0, #16]
 8014064:	60c3      	str	r3, [r0, #12]
 8014066:	bd70      	pop	{r4, r5, r6, pc}

08014068 <_Bfree>:
 8014068:	b570      	push	{r4, r5, r6, lr}
 801406a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801406c:	4606      	mov	r6, r0
 801406e:	460d      	mov	r5, r1
 8014070:	b93c      	cbnz	r4, 8014082 <_Bfree+0x1a>
 8014072:	2010      	movs	r0, #16
 8014074:	f7fc fdae 	bl	8010bd4 <malloc>
 8014078:	6270      	str	r0, [r6, #36]	; 0x24
 801407a:	6044      	str	r4, [r0, #4]
 801407c:	6084      	str	r4, [r0, #8]
 801407e:	6004      	str	r4, [r0, #0]
 8014080:	60c4      	str	r4, [r0, #12]
 8014082:	b13d      	cbz	r5, 8014094 <_Bfree+0x2c>
 8014084:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014086:	686a      	ldr	r2, [r5, #4]
 8014088:	68db      	ldr	r3, [r3, #12]
 801408a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801408e:	6029      	str	r1, [r5, #0]
 8014090:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8014094:	bd70      	pop	{r4, r5, r6, pc}

08014096 <__multadd>:
 8014096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801409a:	690d      	ldr	r5, [r1, #16]
 801409c:	461f      	mov	r7, r3
 801409e:	4606      	mov	r6, r0
 80140a0:	460c      	mov	r4, r1
 80140a2:	f101 0e14 	add.w	lr, r1, #20
 80140a6:	2300      	movs	r3, #0
 80140a8:	f8de 0000 	ldr.w	r0, [lr]
 80140ac:	b281      	uxth	r1, r0
 80140ae:	fb02 7101 	mla	r1, r2, r1, r7
 80140b2:	0c0f      	lsrs	r7, r1, #16
 80140b4:	0c00      	lsrs	r0, r0, #16
 80140b6:	fb02 7000 	mla	r0, r2, r0, r7
 80140ba:	b289      	uxth	r1, r1
 80140bc:	3301      	adds	r3, #1
 80140be:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80140c2:	429d      	cmp	r5, r3
 80140c4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80140c8:	f84e 1b04 	str.w	r1, [lr], #4
 80140cc:	dcec      	bgt.n	80140a8 <__multadd+0x12>
 80140ce:	b1d7      	cbz	r7, 8014106 <__multadd+0x70>
 80140d0:	68a3      	ldr	r3, [r4, #8]
 80140d2:	429d      	cmp	r5, r3
 80140d4:	db12      	blt.n	80140fc <__multadd+0x66>
 80140d6:	6861      	ldr	r1, [r4, #4]
 80140d8:	4630      	mov	r0, r6
 80140da:	3101      	adds	r1, #1
 80140dc:	f7ff ff90 	bl	8014000 <_Balloc>
 80140e0:	6922      	ldr	r2, [r4, #16]
 80140e2:	3202      	adds	r2, #2
 80140e4:	f104 010c 	add.w	r1, r4, #12
 80140e8:	4680      	mov	r8, r0
 80140ea:	0092      	lsls	r2, r2, #2
 80140ec:	300c      	adds	r0, #12
 80140ee:	f7fc ffb0 	bl	8011052 <memcpy>
 80140f2:	4621      	mov	r1, r4
 80140f4:	4630      	mov	r0, r6
 80140f6:	f7ff ffb7 	bl	8014068 <_Bfree>
 80140fa:	4644      	mov	r4, r8
 80140fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014100:	3501      	adds	r5, #1
 8014102:	615f      	str	r7, [r3, #20]
 8014104:	6125      	str	r5, [r4, #16]
 8014106:	4620      	mov	r0, r4
 8014108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801410c <__hi0bits>:
 801410c:	0c02      	lsrs	r2, r0, #16
 801410e:	0412      	lsls	r2, r2, #16
 8014110:	4603      	mov	r3, r0
 8014112:	b9b2      	cbnz	r2, 8014142 <__hi0bits+0x36>
 8014114:	0403      	lsls	r3, r0, #16
 8014116:	2010      	movs	r0, #16
 8014118:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801411c:	bf04      	itt	eq
 801411e:	021b      	lsleq	r3, r3, #8
 8014120:	3008      	addeq	r0, #8
 8014122:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8014126:	bf04      	itt	eq
 8014128:	011b      	lsleq	r3, r3, #4
 801412a:	3004      	addeq	r0, #4
 801412c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8014130:	bf04      	itt	eq
 8014132:	009b      	lsleq	r3, r3, #2
 8014134:	3002      	addeq	r0, #2
 8014136:	2b00      	cmp	r3, #0
 8014138:	db06      	blt.n	8014148 <__hi0bits+0x3c>
 801413a:	005b      	lsls	r3, r3, #1
 801413c:	d503      	bpl.n	8014146 <__hi0bits+0x3a>
 801413e:	3001      	adds	r0, #1
 8014140:	4770      	bx	lr
 8014142:	2000      	movs	r0, #0
 8014144:	e7e8      	b.n	8014118 <__hi0bits+0xc>
 8014146:	2020      	movs	r0, #32
 8014148:	4770      	bx	lr

0801414a <__lo0bits>:
 801414a:	6803      	ldr	r3, [r0, #0]
 801414c:	f013 0207 	ands.w	r2, r3, #7
 8014150:	4601      	mov	r1, r0
 8014152:	d00b      	beq.n	801416c <__lo0bits+0x22>
 8014154:	07da      	lsls	r2, r3, #31
 8014156:	d423      	bmi.n	80141a0 <__lo0bits+0x56>
 8014158:	0798      	lsls	r0, r3, #30
 801415a:	bf49      	itett	mi
 801415c:	085b      	lsrmi	r3, r3, #1
 801415e:	089b      	lsrpl	r3, r3, #2
 8014160:	2001      	movmi	r0, #1
 8014162:	600b      	strmi	r3, [r1, #0]
 8014164:	bf5c      	itt	pl
 8014166:	600b      	strpl	r3, [r1, #0]
 8014168:	2002      	movpl	r0, #2
 801416a:	4770      	bx	lr
 801416c:	b298      	uxth	r0, r3
 801416e:	b9a8      	cbnz	r0, 801419c <__lo0bits+0x52>
 8014170:	0c1b      	lsrs	r3, r3, #16
 8014172:	2010      	movs	r0, #16
 8014174:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014178:	bf04      	itt	eq
 801417a:	0a1b      	lsreq	r3, r3, #8
 801417c:	3008      	addeq	r0, #8
 801417e:	071a      	lsls	r2, r3, #28
 8014180:	bf04      	itt	eq
 8014182:	091b      	lsreq	r3, r3, #4
 8014184:	3004      	addeq	r0, #4
 8014186:	079a      	lsls	r2, r3, #30
 8014188:	bf04      	itt	eq
 801418a:	089b      	lsreq	r3, r3, #2
 801418c:	3002      	addeq	r0, #2
 801418e:	07da      	lsls	r2, r3, #31
 8014190:	d402      	bmi.n	8014198 <__lo0bits+0x4e>
 8014192:	085b      	lsrs	r3, r3, #1
 8014194:	d006      	beq.n	80141a4 <__lo0bits+0x5a>
 8014196:	3001      	adds	r0, #1
 8014198:	600b      	str	r3, [r1, #0]
 801419a:	4770      	bx	lr
 801419c:	4610      	mov	r0, r2
 801419e:	e7e9      	b.n	8014174 <__lo0bits+0x2a>
 80141a0:	2000      	movs	r0, #0
 80141a2:	4770      	bx	lr
 80141a4:	2020      	movs	r0, #32
 80141a6:	4770      	bx	lr

080141a8 <__i2b>:
 80141a8:	b510      	push	{r4, lr}
 80141aa:	460c      	mov	r4, r1
 80141ac:	2101      	movs	r1, #1
 80141ae:	f7ff ff27 	bl	8014000 <_Balloc>
 80141b2:	2201      	movs	r2, #1
 80141b4:	6144      	str	r4, [r0, #20]
 80141b6:	6102      	str	r2, [r0, #16]
 80141b8:	bd10      	pop	{r4, pc}

080141ba <__multiply>:
 80141ba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141be:	4614      	mov	r4, r2
 80141c0:	690a      	ldr	r2, [r1, #16]
 80141c2:	6923      	ldr	r3, [r4, #16]
 80141c4:	429a      	cmp	r2, r3
 80141c6:	bfb8      	it	lt
 80141c8:	460b      	movlt	r3, r1
 80141ca:	4689      	mov	r9, r1
 80141cc:	bfbc      	itt	lt
 80141ce:	46a1      	movlt	r9, r4
 80141d0:	461c      	movlt	r4, r3
 80141d2:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80141d6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80141da:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80141de:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80141e2:	eb07 060a 	add.w	r6, r7, sl
 80141e6:	429e      	cmp	r6, r3
 80141e8:	bfc8      	it	gt
 80141ea:	3101      	addgt	r1, #1
 80141ec:	f7ff ff08 	bl	8014000 <_Balloc>
 80141f0:	f100 0514 	add.w	r5, r0, #20
 80141f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80141f8:	462b      	mov	r3, r5
 80141fa:	2200      	movs	r2, #0
 80141fc:	4543      	cmp	r3, r8
 80141fe:	d316      	bcc.n	801422e <__multiply+0x74>
 8014200:	f104 0214 	add.w	r2, r4, #20
 8014204:	f109 0114 	add.w	r1, r9, #20
 8014208:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 801420c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8014210:	9301      	str	r3, [sp, #4]
 8014212:	9c01      	ldr	r4, [sp, #4]
 8014214:	4294      	cmp	r4, r2
 8014216:	4613      	mov	r3, r2
 8014218:	d80c      	bhi.n	8014234 <__multiply+0x7a>
 801421a:	2e00      	cmp	r6, #0
 801421c:	dd03      	ble.n	8014226 <__multiply+0x6c>
 801421e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014222:	2b00      	cmp	r3, #0
 8014224:	d054      	beq.n	80142d0 <__multiply+0x116>
 8014226:	6106      	str	r6, [r0, #16]
 8014228:	b003      	add	sp, #12
 801422a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801422e:	f843 2b04 	str.w	r2, [r3], #4
 8014232:	e7e3      	b.n	80141fc <__multiply+0x42>
 8014234:	f8b3 a000 	ldrh.w	sl, [r3]
 8014238:	3204      	adds	r2, #4
 801423a:	f1ba 0f00 	cmp.w	sl, #0
 801423e:	d020      	beq.n	8014282 <__multiply+0xc8>
 8014240:	46ae      	mov	lr, r5
 8014242:	4689      	mov	r9, r1
 8014244:	f04f 0c00 	mov.w	ip, #0
 8014248:	f859 4b04 	ldr.w	r4, [r9], #4
 801424c:	f8be b000 	ldrh.w	fp, [lr]
 8014250:	b2a3      	uxth	r3, r4
 8014252:	fb0a b303 	mla	r3, sl, r3, fp
 8014256:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 801425a:	f8de 4000 	ldr.w	r4, [lr]
 801425e:	4463      	add	r3, ip
 8014260:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8014264:	fb0a c40b 	mla	r4, sl, fp, ip
 8014268:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801426c:	b29b      	uxth	r3, r3
 801426e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014272:	454f      	cmp	r7, r9
 8014274:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8014278:	f84e 3b04 	str.w	r3, [lr], #4
 801427c:	d8e4      	bhi.n	8014248 <__multiply+0x8e>
 801427e:	f8ce c000 	str.w	ip, [lr]
 8014282:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8014286:	f1b9 0f00 	cmp.w	r9, #0
 801428a:	d01f      	beq.n	80142cc <__multiply+0x112>
 801428c:	682b      	ldr	r3, [r5, #0]
 801428e:	46ae      	mov	lr, r5
 8014290:	468c      	mov	ip, r1
 8014292:	f04f 0a00 	mov.w	sl, #0
 8014296:	f8bc 4000 	ldrh.w	r4, [ip]
 801429a:	f8be b002 	ldrh.w	fp, [lr, #2]
 801429e:	fb09 b404 	mla	r4, r9, r4, fp
 80142a2:	44a2      	add	sl, r4
 80142a4:	b29b      	uxth	r3, r3
 80142a6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80142aa:	f84e 3b04 	str.w	r3, [lr], #4
 80142ae:	f85c 3b04 	ldr.w	r3, [ip], #4
 80142b2:	f8be 4000 	ldrh.w	r4, [lr]
 80142b6:	0c1b      	lsrs	r3, r3, #16
 80142b8:	fb09 4303 	mla	r3, r9, r3, r4
 80142bc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80142c0:	4567      	cmp	r7, ip
 80142c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80142c6:	d8e6      	bhi.n	8014296 <__multiply+0xdc>
 80142c8:	f8ce 3000 	str.w	r3, [lr]
 80142cc:	3504      	adds	r5, #4
 80142ce:	e7a0      	b.n	8014212 <__multiply+0x58>
 80142d0:	3e01      	subs	r6, #1
 80142d2:	e7a2      	b.n	801421a <__multiply+0x60>

080142d4 <__pow5mult>:
 80142d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142d8:	4615      	mov	r5, r2
 80142da:	f012 0203 	ands.w	r2, r2, #3
 80142de:	4606      	mov	r6, r0
 80142e0:	460f      	mov	r7, r1
 80142e2:	d007      	beq.n	80142f4 <__pow5mult+0x20>
 80142e4:	3a01      	subs	r2, #1
 80142e6:	4c21      	ldr	r4, [pc, #132]	; (801436c <__pow5mult+0x98>)
 80142e8:	2300      	movs	r3, #0
 80142ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80142ee:	f7ff fed2 	bl	8014096 <__multadd>
 80142f2:	4607      	mov	r7, r0
 80142f4:	10ad      	asrs	r5, r5, #2
 80142f6:	d035      	beq.n	8014364 <__pow5mult+0x90>
 80142f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80142fa:	b93c      	cbnz	r4, 801430c <__pow5mult+0x38>
 80142fc:	2010      	movs	r0, #16
 80142fe:	f7fc fc69 	bl	8010bd4 <malloc>
 8014302:	6270      	str	r0, [r6, #36]	; 0x24
 8014304:	6044      	str	r4, [r0, #4]
 8014306:	6084      	str	r4, [r0, #8]
 8014308:	6004      	str	r4, [r0, #0]
 801430a:	60c4      	str	r4, [r0, #12]
 801430c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014310:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014314:	b94c      	cbnz	r4, 801432a <__pow5mult+0x56>
 8014316:	f240 2171 	movw	r1, #625	; 0x271
 801431a:	4630      	mov	r0, r6
 801431c:	f7ff ff44 	bl	80141a8 <__i2b>
 8014320:	2300      	movs	r3, #0
 8014322:	f8c8 0008 	str.w	r0, [r8, #8]
 8014326:	4604      	mov	r4, r0
 8014328:	6003      	str	r3, [r0, #0]
 801432a:	f04f 0800 	mov.w	r8, #0
 801432e:	07eb      	lsls	r3, r5, #31
 8014330:	d50a      	bpl.n	8014348 <__pow5mult+0x74>
 8014332:	4639      	mov	r1, r7
 8014334:	4622      	mov	r2, r4
 8014336:	4630      	mov	r0, r6
 8014338:	f7ff ff3f 	bl	80141ba <__multiply>
 801433c:	4639      	mov	r1, r7
 801433e:	4681      	mov	r9, r0
 8014340:	4630      	mov	r0, r6
 8014342:	f7ff fe91 	bl	8014068 <_Bfree>
 8014346:	464f      	mov	r7, r9
 8014348:	106d      	asrs	r5, r5, #1
 801434a:	d00b      	beq.n	8014364 <__pow5mult+0x90>
 801434c:	6820      	ldr	r0, [r4, #0]
 801434e:	b938      	cbnz	r0, 8014360 <__pow5mult+0x8c>
 8014350:	4622      	mov	r2, r4
 8014352:	4621      	mov	r1, r4
 8014354:	4630      	mov	r0, r6
 8014356:	f7ff ff30 	bl	80141ba <__multiply>
 801435a:	6020      	str	r0, [r4, #0]
 801435c:	f8c0 8000 	str.w	r8, [r0]
 8014360:	4604      	mov	r4, r0
 8014362:	e7e4      	b.n	801432e <__pow5mult+0x5a>
 8014364:	4638      	mov	r0, r7
 8014366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801436a:	bf00      	nop
 801436c:	08019860 	.word	0x08019860

08014370 <__lshift>:
 8014370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014374:	460c      	mov	r4, r1
 8014376:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801437a:	6923      	ldr	r3, [r4, #16]
 801437c:	6849      	ldr	r1, [r1, #4]
 801437e:	eb0a 0903 	add.w	r9, sl, r3
 8014382:	68a3      	ldr	r3, [r4, #8]
 8014384:	4607      	mov	r7, r0
 8014386:	4616      	mov	r6, r2
 8014388:	f109 0501 	add.w	r5, r9, #1
 801438c:	42ab      	cmp	r3, r5
 801438e:	db31      	blt.n	80143f4 <__lshift+0x84>
 8014390:	4638      	mov	r0, r7
 8014392:	f7ff fe35 	bl	8014000 <_Balloc>
 8014396:	2200      	movs	r2, #0
 8014398:	4680      	mov	r8, r0
 801439a:	f100 0314 	add.w	r3, r0, #20
 801439e:	4611      	mov	r1, r2
 80143a0:	4552      	cmp	r2, sl
 80143a2:	db2a      	blt.n	80143fa <__lshift+0x8a>
 80143a4:	6920      	ldr	r0, [r4, #16]
 80143a6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80143aa:	f104 0114 	add.w	r1, r4, #20
 80143ae:	f016 021f 	ands.w	r2, r6, #31
 80143b2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80143b6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80143ba:	d022      	beq.n	8014402 <__lshift+0x92>
 80143bc:	f1c2 0c20 	rsb	ip, r2, #32
 80143c0:	2000      	movs	r0, #0
 80143c2:	680e      	ldr	r6, [r1, #0]
 80143c4:	4096      	lsls	r6, r2
 80143c6:	4330      	orrs	r0, r6
 80143c8:	f843 0b04 	str.w	r0, [r3], #4
 80143cc:	f851 0b04 	ldr.w	r0, [r1], #4
 80143d0:	458e      	cmp	lr, r1
 80143d2:	fa20 f00c 	lsr.w	r0, r0, ip
 80143d6:	d8f4      	bhi.n	80143c2 <__lshift+0x52>
 80143d8:	6018      	str	r0, [r3, #0]
 80143da:	b108      	cbz	r0, 80143e0 <__lshift+0x70>
 80143dc:	f109 0502 	add.w	r5, r9, #2
 80143e0:	3d01      	subs	r5, #1
 80143e2:	4638      	mov	r0, r7
 80143e4:	f8c8 5010 	str.w	r5, [r8, #16]
 80143e8:	4621      	mov	r1, r4
 80143ea:	f7ff fe3d 	bl	8014068 <_Bfree>
 80143ee:	4640      	mov	r0, r8
 80143f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143f4:	3101      	adds	r1, #1
 80143f6:	005b      	lsls	r3, r3, #1
 80143f8:	e7c8      	b.n	801438c <__lshift+0x1c>
 80143fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80143fe:	3201      	adds	r2, #1
 8014400:	e7ce      	b.n	80143a0 <__lshift+0x30>
 8014402:	3b04      	subs	r3, #4
 8014404:	f851 2b04 	ldr.w	r2, [r1], #4
 8014408:	f843 2f04 	str.w	r2, [r3, #4]!
 801440c:	458e      	cmp	lr, r1
 801440e:	d8f9      	bhi.n	8014404 <__lshift+0x94>
 8014410:	e7e6      	b.n	80143e0 <__lshift+0x70>

08014412 <__mcmp>:
 8014412:	6903      	ldr	r3, [r0, #16]
 8014414:	690a      	ldr	r2, [r1, #16]
 8014416:	1a9b      	subs	r3, r3, r2
 8014418:	b530      	push	{r4, r5, lr}
 801441a:	d10c      	bne.n	8014436 <__mcmp+0x24>
 801441c:	0092      	lsls	r2, r2, #2
 801441e:	3014      	adds	r0, #20
 8014420:	3114      	adds	r1, #20
 8014422:	1884      	adds	r4, r0, r2
 8014424:	4411      	add	r1, r2
 8014426:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801442a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801442e:	4295      	cmp	r5, r2
 8014430:	d003      	beq.n	801443a <__mcmp+0x28>
 8014432:	d305      	bcc.n	8014440 <__mcmp+0x2e>
 8014434:	2301      	movs	r3, #1
 8014436:	4618      	mov	r0, r3
 8014438:	bd30      	pop	{r4, r5, pc}
 801443a:	42a0      	cmp	r0, r4
 801443c:	d3f3      	bcc.n	8014426 <__mcmp+0x14>
 801443e:	e7fa      	b.n	8014436 <__mcmp+0x24>
 8014440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014444:	e7f7      	b.n	8014436 <__mcmp+0x24>

08014446 <__mdiff>:
 8014446:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801444a:	460d      	mov	r5, r1
 801444c:	4607      	mov	r7, r0
 801444e:	4611      	mov	r1, r2
 8014450:	4628      	mov	r0, r5
 8014452:	4614      	mov	r4, r2
 8014454:	f7ff ffdd 	bl	8014412 <__mcmp>
 8014458:	1e06      	subs	r6, r0, #0
 801445a:	d108      	bne.n	801446e <__mdiff+0x28>
 801445c:	4631      	mov	r1, r6
 801445e:	4638      	mov	r0, r7
 8014460:	f7ff fdce 	bl	8014000 <_Balloc>
 8014464:	2301      	movs	r3, #1
 8014466:	6103      	str	r3, [r0, #16]
 8014468:	6146      	str	r6, [r0, #20]
 801446a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801446e:	bfa4      	itt	ge
 8014470:	4623      	movge	r3, r4
 8014472:	462c      	movge	r4, r5
 8014474:	4638      	mov	r0, r7
 8014476:	6861      	ldr	r1, [r4, #4]
 8014478:	bfa6      	itte	ge
 801447a:	461d      	movge	r5, r3
 801447c:	2600      	movge	r6, #0
 801447e:	2601      	movlt	r6, #1
 8014480:	f7ff fdbe 	bl	8014000 <_Balloc>
 8014484:	692b      	ldr	r3, [r5, #16]
 8014486:	60c6      	str	r6, [r0, #12]
 8014488:	6926      	ldr	r6, [r4, #16]
 801448a:	f105 0914 	add.w	r9, r5, #20
 801448e:	f104 0214 	add.w	r2, r4, #20
 8014492:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8014496:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801449a:	f100 0514 	add.w	r5, r0, #20
 801449e:	f04f 0c00 	mov.w	ip, #0
 80144a2:	f852 ab04 	ldr.w	sl, [r2], #4
 80144a6:	f859 4b04 	ldr.w	r4, [r9], #4
 80144aa:	fa1c f18a 	uxtah	r1, ip, sl
 80144ae:	b2a3      	uxth	r3, r4
 80144b0:	1ac9      	subs	r1, r1, r3
 80144b2:	0c23      	lsrs	r3, r4, #16
 80144b4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80144b8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80144bc:	b289      	uxth	r1, r1
 80144be:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80144c2:	45c8      	cmp	r8, r9
 80144c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80144c8:	4696      	mov	lr, r2
 80144ca:	f845 3b04 	str.w	r3, [r5], #4
 80144ce:	d8e8      	bhi.n	80144a2 <__mdiff+0x5c>
 80144d0:	45be      	cmp	lr, r7
 80144d2:	d305      	bcc.n	80144e0 <__mdiff+0x9a>
 80144d4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80144d8:	b18b      	cbz	r3, 80144fe <__mdiff+0xb8>
 80144da:	6106      	str	r6, [r0, #16]
 80144dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144e0:	f85e 1b04 	ldr.w	r1, [lr], #4
 80144e4:	fa1c f381 	uxtah	r3, ip, r1
 80144e8:	141a      	asrs	r2, r3, #16
 80144ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80144ee:	b29b      	uxth	r3, r3
 80144f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80144f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80144f8:	f845 3b04 	str.w	r3, [r5], #4
 80144fc:	e7e8      	b.n	80144d0 <__mdiff+0x8a>
 80144fe:	3e01      	subs	r6, #1
 8014500:	e7e8      	b.n	80144d4 <__mdiff+0x8e>

08014502 <__d2b>:
 8014502:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014506:	460e      	mov	r6, r1
 8014508:	2101      	movs	r1, #1
 801450a:	ec59 8b10 	vmov	r8, r9, d0
 801450e:	4615      	mov	r5, r2
 8014510:	f7ff fd76 	bl	8014000 <_Balloc>
 8014514:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8014518:	4607      	mov	r7, r0
 801451a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801451e:	bb34      	cbnz	r4, 801456e <__d2b+0x6c>
 8014520:	9301      	str	r3, [sp, #4]
 8014522:	f1b8 0f00 	cmp.w	r8, #0
 8014526:	d027      	beq.n	8014578 <__d2b+0x76>
 8014528:	a802      	add	r0, sp, #8
 801452a:	f840 8d08 	str.w	r8, [r0, #-8]!
 801452e:	f7ff fe0c 	bl	801414a <__lo0bits>
 8014532:	9900      	ldr	r1, [sp, #0]
 8014534:	b1f0      	cbz	r0, 8014574 <__d2b+0x72>
 8014536:	9a01      	ldr	r2, [sp, #4]
 8014538:	f1c0 0320 	rsb	r3, r0, #32
 801453c:	fa02 f303 	lsl.w	r3, r2, r3
 8014540:	430b      	orrs	r3, r1
 8014542:	40c2      	lsrs	r2, r0
 8014544:	617b      	str	r3, [r7, #20]
 8014546:	9201      	str	r2, [sp, #4]
 8014548:	9b01      	ldr	r3, [sp, #4]
 801454a:	61bb      	str	r3, [r7, #24]
 801454c:	2b00      	cmp	r3, #0
 801454e:	bf14      	ite	ne
 8014550:	2102      	movne	r1, #2
 8014552:	2101      	moveq	r1, #1
 8014554:	6139      	str	r1, [r7, #16]
 8014556:	b1c4      	cbz	r4, 801458a <__d2b+0x88>
 8014558:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 801455c:	4404      	add	r4, r0
 801455e:	6034      	str	r4, [r6, #0]
 8014560:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014564:	6028      	str	r0, [r5, #0]
 8014566:	4638      	mov	r0, r7
 8014568:	b003      	add	sp, #12
 801456a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801456e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014572:	e7d5      	b.n	8014520 <__d2b+0x1e>
 8014574:	6179      	str	r1, [r7, #20]
 8014576:	e7e7      	b.n	8014548 <__d2b+0x46>
 8014578:	a801      	add	r0, sp, #4
 801457a:	f7ff fde6 	bl	801414a <__lo0bits>
 801457e:	9b01      	ldr	r3, [sp, #4]
 8014580:	617b      	str	r3, [r7, #20]
 8014582:	2101      	movs	r1, #1
 8014584:	6139      	str	r1, [r7, #16]
 8014586:	3020      	adds	r0, #32
 8014588:	e7e5      	b.n	8014556 <__d2b+0x54>
 801458a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801458e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014592:	6030      	str	r0, [r6, #0]
 8014594:	6918      	ldr	r0, [r3, #16]
 8014596:	f7ff fdb9 	bl	801410c <__hi0bits>
 801459a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801459e:	e7e1      	b.n	8014564 <__d2b+0x62>

080145a0 <_read_r>:
 80145a0:	b538      	push	{r3, r4, r5, lr}
 80145a2:	4c07      	ldr	r4, [pc, #28]	; (80145c0 <_read_r+0x20>)
 80145a4:	4605      	mov	r5, r0
 80145a6:	4608      	mov	r0, r1
 80145a8:	4611      	mov	r1, r2
 80145aa:	2200      	movs	r2, #0
 80145ac:	6022      	str	r2, [r4, #0]
 80145ae:	461a      	mov	r2, r3
 80145b0:	f000 f94c 	bl	801484c <_read>
 80145b4:	1c43      	adds	r3, r0, #1
 80145b6:	d102      	bne.n	80145be <_read_r+0x1e>
 80145b8:	6823      	ldr	r3, [r4, #0]
 80145ba:	b103      	cbz	r3, 80145be <_read_r+0x1e>
 80145bc:	602b      	str	r3, [r5, #0]
 80145be:	bd38      	pop	{r3, r4, r5, pc}
 80145c0:	2000ce8c 	.word	0x2000ce8c

080145c4 <__ssprint_r>:
 80145c4:	6893      	ldr	r3, [r2, #8]
 80145c6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145ca:	4681      	mov	r9, r0
 80145cc:	460c      	mov	r4, r1
 80145ce:	4617      	mov	r7, r2
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	d060      	beq.n	8014696 <__ssprint_r+0xd2>
 80145d4:	f04f 0b00 	mov.w	fp, #0
 80145d8:	f8d2 a000 	ldr.w	sl, [r2]
 80145dc:	465e      	mov	r6, fp
 80145de:	b356      	cbz	r6, 8014636 <__ssprint_r+0x72>
 80145e0:	68a3      	ldr	r3, [r4, #8]
 80145e2:	429e      	cmp	r6, r3
 80145e4:	d344      	bcc.n	8014670 <__ssprint_r+0xac>
 80145e6:	89a2      	ldrh	r2, [r4, #12]
 80145e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80145ec:	d03e      	beq.n	801466c <__ssprint_r+0xa8>
 80145ee:	6825      	ldr	r5, [r4, #0]
 80145f0:	6921      	ldr	r1, [r4, #16]
 80145f2:	eba5 0801 	sub.w	r8, r5, r1
 80145f6:	6965      	ldr	r5, [r4, #20]
 80145f8:	2302      	movs	r3, #2
 80145fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80145fe:	fb95 f5f3 	sdiv	r5, r5, r3
 8014602:	f108 0301 	add.w	r3, r8, #1
 8014606:	4433      	add	r3, r6
 8014608:	429d      	cmp	r5, r3
 801460a:	bf38      	it	cc
 801460c:	461d      	movcc	r5, r3
 801460e:	0553      	lsls	r3, r2, #21
 8014610:	d546      	bpl.n	80146a0 <__ssprint_r+0xdc>
 8014612:	4629      	mov	r1, r5
 8014614:	4648      	mov	r0, r9
 8014616:	f7fc faed 	bl	8010bf4 <_malloc_r>
 801461a:	b998      	cbnz	r0, 8014644 <__ssprint_r+0x80>
 801461c:	230c      	movs	r3, #12
 801461e:	f8c9 3000 	str.w	r3, [r9]
 8014622:	89a3      	ldrh	r3, [r4, #12]
 8014624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014628:	81a3      	strh	r3, [r4, #12]
 801462a:	2300      	movs	r3, #0
 801462c:	60bb      	str	r3, [r7, #8]
 801462e:	607b      	str	r3, [r7, #4]
 8014630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014634:	e031      	b.n	801469a <__ssprint_r+0xd6>
 8014636:	f8da b000 	ldr.w	fp, [sl]
 801463a:	f8da 6004 	ldr.w	r6, [sl, #4]
 801463e:	f10a 0a08 	add.w	sl, sl, #8
 8014642:	e7cc      	b.n	80145de <__ssprint_r+0x1a>
 8014644:	4642      	mov	r2, r8
 8014646:	6921      	ldr	r1, [r4, #16]
 8014648:	9001      	str	r0, [sp, #4]
 801464a:	f7fc fd02 	bl	8011052 <memcpy>
 801464e:	89a2      	ldrh	r2, [r4, #12]
 8014650:	9b01      	ldr	r3, [sp, #4]
 8014652:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8014656:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 801465a:	81a2      	strh	r2, [r4, #12]
 801465c:	6123      	str	r3, [r4, #16]
 801465e:	6165      	str	r5, [r4, #20]
 8014660:	4443      	add	r3, r8
 8014662:	eba5 0508 	sub.w	r5, r5, r8
 8014666:	6023      	str	r3, [r4, #0]
 8014668:	60a5      	str	r5, [r4, #8]
 801466a:	4633      	mov	r3, r6
 801466c:	429e      	cmp	r6, r3
 801466e:	d200      	bcs.n	8014672 <__ssprint_r+0xae>
 8014670:	4633      	mov	r3, r6
 8014672:	461a      	mov	r2, r3
 8014674:	4659      	mov	r1, fp
 8014676:	6820      	ldr	r0, [r4, #0]
 8014678:	9301      	str	r3, [sp, #4]
 801467a:	f7fc fcf5 	bl	8011068 <memmove>
 801467e:	68a2      	ldr	r2, [r4, #8]
 8014680:	9b01      	ldr	r3, [sp, #4]
 8014682:	1ad2      	subs	r2, r2, r3
 8014684:	60a2      	str	r2, [r4, #8]
 8014686:	6822      	ldr	r2, [r4, #0]
 8014688:	4413      	add	r3, r2
 801468a:	6023      	str	r3, [r4, #0]
 801468c:	68bb      	ldr	r3, [r7, #8]
 801468e:	1b9e      	subs	r6, r3, r6
 8014690:	60be      	str	r6, [r7, #8]
 8014692:	2e00      	cmp	r6, #0
 8014694:	d1cf      	bne.n	8014636 <__ssprint_r+0x72>
 8014696:	2000      	movs	r0, #0
 8014698:	6078      	str	r0, [r7, #4]
 801469a:	b003      	add	sp, #12
 801469c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146a0:	462a      	mov	r2, r5
 80146a2:	4648      	mov	r0, r9
 80146a4:	f7fc fdc6 	bl	8011234 <_realloc_r>
 80146a8:	4603      	mov	r3, r0
 80146aa:	2800      	cmp	r0, #0
 80146ac:	d1d6      	bne.n	801465c <__ssprint_r+0x98>
 80146ae:	6921      	ldr	r1, [r4, #16]
 80146b0:	4648      	mov	r0, r9
 80146b2:	f7ff fb9b 	bl	8013dec <_free_r>
 80146b6:	e7b1      	b.n	801461c <__ssprint_r+0x58>

080146b8 <_calloc_r>:
 80146b8:	b510      	push	{r4, lr}
 80146ba:	4351      	muls	r1, r2
 80146bc:	f7fc fa9a 	bl	8010bf4 <_malloc_r>
 80146c0:	4604      	mov	r4, r0
 80146c2:	b198      	cbz	r0, 80146ec <_calloc_r+0x34>
 80146c4:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80146c8:	f022 0203 	bic.w	r2, r2, #3
 80146cc:	3a04      	subs	r2, #4
 80146ce:	2a24      	cmp	r2, #36	; 0x24
 80146d0:	d81b      	bhi.n	801470a <_calloc_r+0x52>
 80146d2:	2a13      	cmp	r2, #19
 80146d4:	d917      	bls.n	8014706 <_calloc_r+0x4e>
 80146d6:	2100      	movs	r1, #0
 80146d8:	2a1b      	cmp	r2, #27
 80146da:	6001      	str	r1, [r0, #0]
 80146dc:	6041      	str	r1, [r0, #4]
 80146de:	d807      	bhi.n	80146f0 <_calloc_r+0x38>
 80146e0:	f100 0308 	add.w	r3, r0, #8
 80146e4:	2200      	movs	r2, #0
 80146e6:	601a      	str	r2, [r3, #0]
 80146e8:	605a      	str	r2, [r3, #4]
 80146ea:	609a      	str	r2, [r3, #8]
 80146ec:	4620      	mov	r0, r4
 80146ee:	bd10      	pop	{r4, pc}
 80146f0:	2a24      	cmp	r2, #36	; 0x24
 80146f2:	6081      	str	r1, [r0, #8]
 80146f4:	60c1      	str	r1, [r0, #12]
 80146f6:	bf11      	iteee	ne
 80146f8:	f100 0310 	addne.w	r3, r0, #16
 80146fc:	6101      	streq	r1, [r0, #16]
 80146fe:	f100 0318 	addeq.w	r3, r0, #24
 8014702:	6141      	streq	r1, [r0, #20]
 8014704:	e7ee      	b.n	80146e4 <_calloc_r+0x2c>
 8014706:	4603      	mov	r3, r0
 8014708:	e7ec      	b.n	80146e4 <_calloc_r+0x2c>
 801470a:	2100      	movs	r1, #0
 801470c:	f7fc fcc6 	bl	801109c <memset>
 8014710:	e7ec      	b.n	80146ec <_calloc_r+0x34>
	...

08014714 <_fclose_r>:
 8014714:	b570      	push	{r4, r5, r6, lr}
 8014716:	4605      	mov	r5, r0
 8014718:	460c      	mov	r4, r1
 801471a:	b911      	cbnz	r1, 8014722 <_fclose_r+0xe>
 801471c:	2600      	movs	r6, #0
 801471e:	4630      	mov	r0, r6
 8014720:	bd70      	pop	{r4, r5, r6, pc}
 8014722:	b118      	cbz	r0, 801472c <_fclose_r+0x18>
 8014724:	6983      	ldr	r3, [r0, #24]
 8014726:	b90b      	cbnz	r3, 801472c <_fclose_r+0x18>
 8014728:	f7ff fa8a 	bl	8013c40 <__sinit>
 801472c:	4b2c      	ldr	r3, [pc, #176]	; (80147e0 <_fclose_r+0xcc>)
 801472e:	429c      	cmp	r4, r3
 8014730:	d114      	bne.n	801475c <_fclose_r+0x48>
 8014732:	686c      	ldr	r4, [r5, #4]
 8014734:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014736:	07d8      	lsls	r0, r3, #31
 8014738:	d405      	bmi.n	8014746 <_fclose_r+0x32>
 801473a:	89a3      	ldrh	r3, [r4, #12]
 801473c:	0599      	lsls	r1, r3, #22
 801473e:	d402      	bmi.n	8014746 <_fclose_r+0x32>
 8014740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014742:	f7fc f9d9 	bl	8010af8 <__retarget_lock_acquire_recursive>
 8014746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801474a:	b98b      	cbnz	r3, 8014770 <_fclose_r+0x5c>
 801474c:	6e66      	ldr	r6, [r4, #100]	; 0x64
 801474e:	f016 0601 	ands.w	r6, r6, #1
 8014752:	d1e3      	bne.n	801471c <_fclose_r+0x8>
 8014754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014756:	f7fc f9d1 	bl	8010afc <__retarget_lock_release_recursive>
 801475a:	e7e0      	b.n	801471e <_fclose_r+0xa>
 801475c:	4b21      	ldr	r3, [pc, #132]	; (80147e4 <_fclose_r+0xd0>)
 801475e:	429c      	cmp	r4, r3
 8014760:	d101      	bne.n	8014766 <_fclose_r+0x52>
 8014762:	68ac      	ldr	r4, [r5, #8]
 8014764:	e7e6      	b.n	8014734 <_fclose_r+0x20>
 8014766:	4b20      	ldr	r3, [pc, #128]	; (80147e8 <_fclose_r+0xd4>)
 8014768:	429c      	cmp	r4, r3
 801476a:	bf08      	it	eq
 801476c:	68ec      	ldreq	r4, [r5, #12]
 801476e:	e7e1      	b.n	8014734 <_fclose_r+0x20>
 8014770:	4621      	mov	r1, r4
 8014772:	4628      	mov	r0, r5
 8014774:	f7ff f93e 	bl	80139f4 <__sflush_r>
 8014778:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801477a:	4606      	mov	r6, r0
 801477c:	b133      	cbz	r3, 801478c <_fclose_r+0x78>
 801477e:	6a21      	ldr	r1, [r4, #32]
 8014780:	4628      	mov	r0, r5
 8014782:	4798      	blx	r3
 8014784:	2800      	cmp	r0, #0
 8014786:	bfb8      	it	lt
 8014788:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
 801478c:	89a3      	ldrh	r3, [r4, #12]
 801478e:	061a      	lsls	r2, r3, #24
 8014790:	d503      	bpl.n	801479a <_fclose_r+0x86>
 8014792:	6921      	ldr	r1, [r4, #16]
 8014794:	4628      	mov	r0, r5
 8014796:	f7ff fb29 	bl	8013dec <_free_r>
 801479a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801479c:	b141      	cbz	r1, 80147b0 <_fclose_r+0x9c>
 801479e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80147a2:	4299      	cmp	r1, r3
 80147a4:	d002      	beq.n	80147ac <_fclose_r+0x98>
 80147a6:	4628      	mov	r0, r5
 80147a8:	f7ff fb20 	bl	8013dec <_free_r>
 80147ac:	2300      	movs	r3, #0
 80147ae:	6363      	str	r3, [r4, #52]	; 0x34
 80147b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80147b2:	b121      	cbz	r1, 80147be <_fclose_r+0xaa>
 80147b4:	4628      	mov	r0, r5
 80147b6:	f7ff fb19 	bl	8013dec <_free_r>
 80147ba:	2300      	movs	r3, #0
 80147bc:	64a3      	str	r3, [r4, #72]	; 0x48
 80147be:	f7ff fa27 	bl	8013c10 <__sfp_lock_acquire>
 80147c2:	2300      	movs	r3, #0
 80147c4:	81a3      	strh	r3, [r4, #12]
 80147c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80147c8:	07db      	lsls	r3, r3, #31
 80147ca:	d402      	bmi.n	80147d2 <_fclose_r+0xbe>
 80147cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147ce:	f7fc f995 	bl	8010afc <__retarget_lock_release_recursive>
 80147d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80147d4:	f7fc f98f 	bl	8010af6 <__retarget_lock_close_recursive>
 80147d8:	f7ff fa20 	bl	8013c1c <__sfp_lock_release>
 80147dc:	e79f      	b.n	801471e <_fclose_r+0xa>
 80147de:	bf00      	nop
 80147e0:	08019730 	.word	0x08019730
 80147e4:	08019750 	.word	0x08019750
 80147e8:	08019710 	.word	0x08019710

080147ec <_close>:
 80147ec:	4b02      	ldr	r3, [pc, #8]	; (80147f8 <_close+0xc>)
 80147ee:	2258      	movs	r2, #88	; 0x58
 80147f0:	601a      	str	r2, [r3, #0]
 80147f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80147f6:	4770      	bx	lr
 80147f8:	2000ce8c 	.word	0x2000ce8c

080147fc <_fstat>:
 80147fc:	4b02      	ldr	r3, [pc, #8]	; (8014808 <_fstat+0xc>)
 80147fe:	2258      	movs	r2, #88	; 0x58
 8014800:	601a      	str	r2, [r3, #0]
 8014802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014806:	4770      	bx	lr
 8014808:	2000ce8c 	.word	0x2000ce8c

0801480c <_getpid>:
 801480c:	4b02      	ldr	r3, [pc, #8]	; (8014818 <_getpid+0xc>)
 801480e:	2258      	movs	r2, #88	; 0x58
 8014810:	601a      	str	r2, [r3, #0]
 8014812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014816:	4770      	bx	lr
 8014818:	2000ce8c 	.word	0x2000ce8c

0801481c <_isatty>:
 801481c:	4b02      	ldr	r3, [pc, #8]	; (8014828 <_isatty+0xc>)
 801481e:	2258      	movs	r2, #88	; 0x58
 8014820:	601a      	str	r2, [r3, #0]
 8014822:	2000      	movs	r0, #0
 8014824:	4770      	bx	lr
 8014826:	bf00      	nop
 8014828:	2000ce8c 	.word	0x2000ce8c

0801482c <_kill>:
 801482c:	4b02      	ldr	r3, [pc, #8]	; (8014838 <_kill+0xc>)
 801482e:	2258      	movs	r2, #88	; 0x58
 8014830:	601a      	str	r2, [r3, #0]
 8014832:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014836:	4770      	bx	lr
 8014838:	2000ce8c 	.word	0x2000ce8c

0801483c <_lseek>:
 801483c:	4b02      	ldr	r3, [pc, #8]	; (8014848 <_lseek+0xc>)
 801483e:	2258      	movs	r2, #88	; 0x58
 8014840:	601a      	str	r2, [r3, #0]
 8014842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014846:	4770      	bx	lr
 8014848:	2000ce8c 	.word	0x2000ce8c

0801484c <_read>:
 801484c:	4b02      	ldr	r3, [pc, #8]	; (8014858 <_read+0xc>)
 801484e:	2258      	movs	r2, #88	; 0x58
 8014850:	601a      	str	r2, [r3, #0]
 8014852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014856:	4770      	bx	lr
 8014858:	2000ce8c 	.word	0x2000ce8c

0801485c <_sbrk>:
 801485c:	4b04      	ldr	r3, [pc, #16]	; (8014870 <_sbrk+0x14>)
 801485e:	6819      	ldr	r1, [r3, #0]
 8014860:	4602      	mov	r2, r0
 8014862:	b909      	cbnz	r1, 8014868 <_sbrk+0xc>
 8014864:	4903      	ldr	r1, [pc, #12]	; (8014874 <_sbrk+0x18>)
 8014866:	6019      	str	r1, [r3, #0]
 8014868:	6818      	ldr	r0, [r3, #0]
 801486a:	4402      	add	r2, r0
 801486c:	601a      	str	r2, [r3, #0]
 801486e:	4770      	bx	lr
 8014870:	20008e70 	.word	0x20008e70
 8014874:	2000ce90 	.word	0x2000ce90

08014878 <_write>:
 8014878:	4b02      	ldr	r3, [pc, #8]	; (8014884 <_write+0xc>)
 801487a:	2258      	movs	r2, #88	; 0x58
 801487c:	601a      	str	r2, [r3, #0]
 801487e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014882:	4770      	bx	lr
 8014884:	2000ce8c 	.word	0x2000ce8c

08014888 <_exit>:
 8014888:	e7fe      	b.n	8014888 <_exit>
	...

0801488c <_init>:
 801488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801488e:	bf00      	nop
 8014890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014892:	bc08      	pop	{r3}
 8014894:	469e      	mov	lr, r3
 8014896:	4770      	bx	lr

08014898 <_fini>:
 8014898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801489a:	bf00      	nop
 801489c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801489e:	bc08      	pop	{r3}
 80148a0:	469e      	mov	lr, r3
 80148a2:	4770      	bx	lr
