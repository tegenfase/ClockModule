
ClockModule.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004020  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080041b0  080041b0  000141b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000084  08004210  08004210  00014210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000128  08004294  08004294  00014294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000008  080043bc  080043bc  000143bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080043c4  080043c4  000143c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000074  20000000  080043c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  9 .bss          0000015c  20000074  20000074  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  200001d0  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012951  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000243d  00000000  00000000  000329f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005b31  00000000  00000000  00034e32  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000910  00000000  00000000  0003a968  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000aa8  00000000  00000000  0003b278  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004bbc  00000000  00000000  0003bd20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003b37  00000000  00000000  000408dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007c  00000000  00000000  00044413  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f94  00000000  00000000  00044490  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      00000076  00000000  00000000  00046424  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004198 	.word	0x08004198

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004198 	.word	0x08004198

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f001 b8f6 	b.w	8001474 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <selfrel_offset31>:
 800057c:	6803      	ldr	r3, [r0, #0]
 800057e:	005a      	lsls	r2, r3, #1
 8000580:	bf4c      	ite	mi
 8000582:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000586:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800058a:	4418      	add	r0, r3
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <search_EIT_table>:
 8000590:	b361      	cbz	r1, 80005ec <search_EIT_table+0x5c>
 8000592:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000596:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 800059a:	4690      	mov	r8, r2
 800059c:	4606      	mov	r6, r0
 800059e:	46d1      	mov	r9, sl
 80005a0:	2700      	movs	r7, #0
 80005a2:	eb07 0409 	add.w	r4, r7, r9
 80005a6:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80005aa:	1064      	asrs	r4, r4, #1
 80005ac:	00e5      	lsls	r5, r4, #3
 80005ae:	1971      	adds	r1, r6, r5
 80005b0:	4608      	mov	r0, r1
 80005b2:	f7ff ffe3 	bl	800057c <selfrel_offset31>
 80005b6:	45a2      	cmp	sl, r4
 80005b8:	4683      	mov	fp, r0
 80005ba:	f105 0008 	add.w	r0, r5, #8
 80005be:	4430      	add	r0, r6
 80005c0:	d009      	beq.n	80005d6 <search_EIT_table+0x46>
 80005c2:	f7ff ffdb 	bl	800057c <selfrel_offset31>
 80005c6:	45c3      	cmp	fp, r8
 80005c8:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 80005cc:	d805      	bhi.n	80005da <search_EIT_table+0x4a>
 80005ce:	4540      	cmp	r0, r8
 80005d0:	d209      	bcs.n	80005e6 <search_EIT_table+0x56>
 80005d2:	1c67      	adds	r7, r4, #1
 80005d4:	e7e5      	b.n	80005a2 <search_EIT_table+0x12>
 80005d6:	45c3      	cmp	fp, r8
 80005d8:	d905      	bls.n	80005e6 <search_EIT_table+0x56>
 80005da:	42a7      	cmp	r7, r4
 80005dc:	d002      	beq.n	80005e4 <search_EIT_table+0x54>
 80005de:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
 80005e2:	e7de      	b.n	80005a2 <search_EIT_table+0x12>
 80005e4:	2100      	movs	r1, #0
 80005e6:	4608      	mov	r0, r1
 80005e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005ec:	4608      	mov	r0, r1
 80005ee:	4770      	bx	lr

080005f0 <__gnu_unwind_get_pr_addr>:
 80005f0:	2801      	cmp	r0, #1
 80005f2:	d007      	beq.n	8000604 <__gnu_unwind_get_pr_addr+0x14>
 80005f4:	2802      	cmp	r0, #2
 80005f6:	d007      	beq.n	8000608 <__gnu_unwind_get_pr_addr+0x18>
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__gnu_unwind_get_pr_addr+0x1c>)
 80005fa:	2800      	cmp	r0, #0
 80005fc:	bf0c      	ite	eq
 80005fe:	4618      	moveq	r0, r3
 8000600:	2000      	movne	r0, #0
 8000602:	4770      	bx	lr
 8000604:	4802      	ldr	r0, [pc, #8]	; (8000610 <__gnu_unwind_get_pr_addr+0x20>)
 8000606:	4770      	bx	lr
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <__gnu_unwind_get_pr_addr+0x24>)
 800060a:	4770      	bx	lr
 800060c:	08000cf5 	.word	0x08000cf5
 8000610:	08000cf9 	.word	0x08000cf9
 8000614:	08000cfd 	.word	0x08000cfd

08000618 <get_eit_entry>:
 8000618:	b530      	push	{r4, r5, lr}
 800061a:	4b24      	ldr	r3, [pc, #144]	; (80006ac <get_eit_entry+0x94>)
 800061c:	b083      	sub	sp, #12
 800061e:	4604      	mov	r4, r0
 8000620:	1e8d      	subs	r5, r1, #2
 8000622:	b37b      	cbz	r3, 8000684 <get_eit_entry+0x6c>
 8000624:	a901      	add	r1, sp, #4
 8000626:	4628      	mov	r0, r5
 8000628:	f3af 8000 	nop.w
 800062c:	b320      	cbz	r0, 8000678 <get_eit_entry+0x60>
 800062e:	9901      	ldr	r1, [sp, #4]
 8000630:	462a      	mov	r2, r5
 8000632:	f7ff ffad 	bl	8000590 <search_EIT_table>
 8000636:	4601      	mov	r1, r0
 8000638:	b1f0      	cbz	r0, 8000678 <get_eit_entry+0x60>
 800063a:	f7ff ff9f 	bl	800057c <selfrel_offset31>
 800063e:	684b      	ldr	r3, [r1, #4]
 8000640:	64a0      	str	r0, [r4, #72]	; 0x48
 8000642:	2b01      	cmp	r3, #1
 8000644:	d012      	beq.n	800066c <get_eit_entry+0x54>
 8000646:	2b00      	cmp	r3, #0
 8000648:	f101 0004 	add.w	r0, r1, #4
 800064c:	db20      	blt.n	8000690 <get_eit_entry+0x78>
 800064e:	f7ff ff95 	bl	800057c <selfrel_offset31>
 8000652:	2300      	movs	r3, #0
 8000654:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000656:	6523      	str	r3, [r4, #80]	; 0x50
 8000658:	6803      	ldr	r3, [r0, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	db1c      	blt.n	8000698 <get_eit_entry+0x80>
 800065e:	f7ff ff8d 	bl	800057c <selfrel_offset31>
 8000662:	2300      	movs	r3, #0
 8000664:	6120      	str	r0, [r4, #16]
 8000666:	4618      	mov	r0, r3
 8000668:	b003      	add	sp, #12
 800066a:	bd30      	pop	{r4, r5, pc}
 800066c:	2300      	movs	r3, #0
 800066e:	6123      	str	r3, [r4, #16]
 8000670:	2305      	movs	r3, #5
 8000672:	4618      	mov	r0, r3
 8000674:	b003      	add	sp, #12
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	2300      	movs	r3, #0
 800067a:	6123      	str	r3, [r4, #16]
 800067c:	2309      	movs	r3, #9
 800067e:	4618      	mov	r0, r3
 8000680:	b003      	add	sp, #12
 8000682:	bd30      	pop	{r4, r5, pc}
 8000684:	490a      	ldr	r1, [pc, #40]	; (80006b0 <get_eit_entry+0x98>)
 8000686:	480b      	ldr	r0, [pc, #44]	; (80006b4 <get_eit_entry+0x9c>)
 8000688:	1a09      	subs	r1, r1, r0
 800068a:	10c9      	asrs	r1, r1, #3
 800068c:	9101      	str	r1, [sp, #4]
 800068e:	e7cf      	b.n	8000630 <get_eit_entry+0x18>
 8000690:	2301      	movs	r3, #1
 8000692:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000694:	6523      	str	r3, [r4, #80]	; 0x50
 8000696:	e7df      	b.n	8000658 <get_eit_entry+0x40>
 8000698:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800069c:	f7ff ffa8 	bl	80005f0 <__gnu_unwind_get_pr_addr>
 80006a0:	2800      	cmp	r0, #0
 80006a2:	6120      	str	r0, [r4, #16]
 80006a4:	bf14      	ite	ne
 80006a6:	2300      	movne	r3, #0
 80006a8:	2309      	moveq	r3, #9
 80006aa:	e7dc      	b.n	8000666 <get_eit_entry+0x4e>
 80006ac:	00000000 	.word	0x00000000
 80006b0:	080043bc 	.word	0x080043bc
 80006b4:	08004294 	.word	0x08004294

080006b8 <restore_non_core_regs>:
 80006b8:	6803      	ldr	r3, [r0, #0]
 80006ba:	07da      	lsls	r2, r3, #31
 80006bc:	b510      	push	{r4, lr}
 80006be:	4604      	mov	r4, r0
 80006c0:	d406      	bmi.n	80006d0 <restore_non_core_regs+0x18>
 80006c2:	079b      	lsls	r3, r3, #30
 80006c4:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80006c8:	d509      	bpl.n	80006de <restore_non_core_regs+0x26>
 80006ca:	f000 fc51 	bl	8000f70 <__gnu_Unwind_Restore_VFP_D>
 80006ce:	6823      	ldr	r3, [r4, #0]
 80006d0:	0759      	lsls	r1, r3, #29
 80006d2:	d509      	bpl.n	80006e8 <restore_non_core_regs+0x30>
 80006d4:	071a      	lsls	r2, r3, #28
 80006d6:	d50e      	bpl.n	80006f6 <restore_non_core_regs+0x3e>
 80006d8:	06db      	lsls	r3, r3, #27
 80006da:	d513      	bpl.n	8000704 <restore_non_core_regs+0x4c>
 80006dc:	bd10      	pop	{r4, pc}
 80006de:	f000 fc3f 	bl	8000f60 <__gnu_Unwind_Restore_VFP>
 80006e2:	6823      	ldr	r3, [r4, #0]
 80006e4:	0759      	lsls	r1, r3, #29
 80006e6:	d4f5      	bmi.n	80006d4 <restore_non_core_regs+0x1c>
 80006e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006ec:	f000 fc48 	bl	8000f80 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	071a      	lsls	r2, r3, #28
 80006f4:	d4f0      	bmi.n	80006d8 <restore_non_core_regs+0x20>
 80006f6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80006fa:	f000 fc49 	bl	8000f90 <__gnu_Unwind_Restore_WMMXD>
 80006fe:	6823      	ldr	r3, [r4, #0]
 8000700:	06db      	lsls	r3, r3, #27
 8000702:	d4eb      	bmi.n	80006dc <restore_non_core_regs+0x24>
 8000704:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800070c:	f000 bc84 	b.w	8001018 <__gnu_Unwind_Restore_WMMXC>

08000710 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000710:	6803      	ldr	r3, [r0, #0]
 8000712:	b103      	cbz	r3, 8000716 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000714:	4403      	add	r3, r0
 8000716:	4618      	mov	r0, r3
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop

0800071c <__gnu_unwind_24bit.isra.1>:
 800071c:	2009      	movs	r0, #9
 800071e:	4770      	bx	lr

08000720 <_Unwind_DebugHook>:
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop

08000724 <unwind_phase2>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	4604      	mov	r4, r0
 8000728:	460d      	mov	r5, r1
 800072a:	e008      	b.n	800073e <unwind_phase2+0x1a>
 800072c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800072e:	6163      	str	r3, [r4, #20]
 8000730:	462a      	mov	r2, r5
 8000732:	6923      	ldr	r3, [r4, #16]
 8000734:	4621      	mov	r1, r4
 8000736:	2001      	movs	r0, #1
 8000738:	4798      	blx	r3
 800073a:	2808      	cmp	r0, #8
 800073c:	d108      	bne.n	8000750 <unwind_phase2+0x2c>
 800073e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000740:	4620      	mov	r0, r4
 8000742:	f7ff ff69 	bl	8000618 <get_eit_entry>
 8000746:	4606      	mov	r6, r0
 8000748:	2800      	cmp	r0, #0
 800074a:	d0ef      	beq.n	800072c <unwind_phase2+0x8>
 800074c:	f003 fcb9 	bl	80040c2 <abort>
 8000750:	2807      	cmp	r0, #7
 8000752:	d1fb      	bne.n	800074c <unwind_phase2+0x28>
 8000754:	4630      	mov	r0, r6
 8000756:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000758:	f7ff ffe2 	bl	8000720 <_Unwind_DebugHook>
 800075c:	1d28      	adds	r0, r5, #4
 800075e:	f000 fbf3 	bl	8000f48 <__restore_core_regs>
 8000762:	bf00      	nop

08000764 <unwind_phase2_forced>:
 8000764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000768:	1d0c      	adds	r4, r1, #4
 800076a:	4605      	mov	r5, r0
 800076c:	4692      	mov	sl, r2
 800076e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000770:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000774:	ae03      	add	r6, sp, #12
 8000776:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800077a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800077c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800077e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000780:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000784:	ac02      	add	r4, sp, #8
 8000786:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800078a:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800078e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000792:	2300      	movs	r3, #0
 8000794:	4628      	mov	r0, r5
 8000796:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000798:	6023      	str	r3, [r4, #0]
 800079a:	f7ff ff3d 	bl	8000618 <get_eit_entry>
 800079e:	f1ba 0f00 	cmp.w	sl, #0
 80007a2:	4607      	mov	r7, r0
 80007a4:	bf14      	ite	ne
 80007a6:	260a      	movne	r6, #10
 80007a8:	2609      	moveq	r6, #9
 80007aa:	b17f      	cbz	r7, 80007cc <unwind_phase2_forced+0x68>
 80007ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80007ae:	f046 0110 	orr.w	r1, r6, #16
 80007b2:	e88d 0210 	stmia.w	sp, {r4, r9}
 80007b6:	462a      	mov	r2, r5
 80007b8:	6463      	str	r3, [r4, #68]	; 0x44
 80007ba:	2001      	movs	r0, #1
 80007bc:	462b      	mov	r3, r5
 80007be:	47c0      	blx	r8
 80007c0:	bb78      	cbnz	r0, 8000822 <unwind_phase2_forced+0xbe>
 80007c2:	4638      	mov	r0, r7
 80007c4:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007ce:	616b      	str	r3, [r5, #20]
 80007d0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80007d4:	4621      	mov	r1, r4
 80007d6:	a87a      	add	r0, sp, #488	; 0x1e8
 80007d8:	f003 fb60 	bl	8003e9c <memcpy>
 80007dc:	692b      	ldr	r3, [r5, #16]
 80007de:	aa7a      	add	r2, sp, #488	; 0x1e8
 80007e0:	4629      	mov	r1, r5
 80007e2:	4630      	mov	r0, r6
 80007e4:	4798      	blx	r3
 80007e6:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80007e8:	4682      	mov	sl, r0
 80007ea:	e88d 0210 	stmia.w	sp, {r4, r9}
 80007ee:	4631      	mov	r1, r6
 80007f0:	6463      	str	r3, [r4, #68]	; 0x44
 80007f2:	462a      	mov	r2, r5
 80007f4:	462b      	mov	r3, r5
 80007f6:	2001      	movs	r0, #1
 80007f8:	47c0      	blx	r8
 80007fa:	b990      	cbnz	r0, 8000822 <unwind_phase2_forced+0xbe>
 80007fc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000800:	a97a      	add	r1, sp, #488	; 0x1e8
 8000802:	4620      	mov	r0, r4
 8000804:	f003 fb4a 	bl	8003e9c <memcpy>
 8000808:	f1ba 0f08 	cmp.w	sl, #8
 800080c:	d106      	bne.n	800081c <unwind_phase2_forced+0xb8>
 800080e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000810:	4628      	mov	r0, r5
 8000812:	f7ff ff01 	bl	8000618 <get_eit_entry>
 8000816:	2609      	movs	r6, #9
 8000818:	4607      	mov	r7, r0
 800081a:	e7c6      	b.n	80007aa <unwind_phase2_forced+0x46>
 800081c:	f1ba 0f07 	cmp.w	sl, #7
 8000820:	d005      	beq.n	800082e <unwind_phase2_forced+0xca>
 8000822:	2709      	movs	r7, #9
 8000824:	4638      	mov	r0, r7
 8000826:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800082a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800082e:	4638      	mov	r0, r7
 8000830:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000832:	f7ff ff75 	bl	8000720 <_Unwind_DebugHook>
 8000836:	a803      	add	r0, sp, #12
 8000838:	f000 fb86 	bl	8000f48 <__restore_core_regs>

0800083c <_Unwind_GetCFA>:
 800083c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800083e:	4770      	bx	lr

08000840 <__gnu_Unwind_RaiseException>:
 8000840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000842:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000844:	640b      	str	r3, [r1, #64]	; 0x40
 8000846:	1d0e      	adds	r6, r1, #4
 8000848:	460f      	mov	r7, r1
 800084a:	4604      	mov	r4, r0
 800084c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800084e:	b0f9      	sub	sp, #484	; 0x1e4
 8000850:	ad01      	add	r5, sp, #4
 8000852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000854:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000858:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800085a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800085c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000860:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000864:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000868:	9600      	str	r6, [sp, #0]
 800086a:	e006      	b.n	800087a <__gnu_Unwind_RaiseException+0x3a>
 800086c:	6923      	ldr	r3, [r4, #16]
 800086e:	466a      	mov	r2, sp
 8000870:	4621      	mov	r1, r4
 8000872:	4798      	blx	r3
 8000874:	2808      	cmp	r0, #8
 8000876:	4605      	mov	r5, r0
 8000878:	d108      	bne.n	800088c <__gnu_Unwind_RaiseException+0x4c>
 800087a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800087c:	4620      	mov	r0, r4
 800087e:	f7ff fecb 	bl	8000618 <get_eit_entry>
 8000882:	2800      	cmp	r0, #0
 8000884:	d0f2      	beq.n	800086c <__gnu_Unwind_RaiseException+0x2c>
 8000886:	2009      	movs	r0, #9
 8000888:	b079      	add	sp, #484	; 0x1e4
 800088a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088c:	4668      	mov	r0, sp
 800088e:	f7ff ff13 	bl	80006b8 <restore_non_core_regs>
 8000892:	2d06      	cmp	r5, #6
 8000894:	d1f7      	bne.n	8000886 <__gnu_Unwind_RaiseException+0x46>
 8000896:	4639      	mov	r1, r7
 8000898:	4620      	mov	r0, r4
 800089a:	f7ff ff43 	bl	8000724 <unwind_phase2>
 800089e:	bf00      	nop

080008a0 <__gnu_Unwind_ForcedUnwind>:
 80008a0:	b430      	push	{r4, r5}
 80008a2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80008a4:	60c1      	str	r1, [r0, #12]
 80008a6:	6182      	str	r2, [r0, #24]
 80008a8:	4619      	mov	r1, r3
 80008aa:	641d      	str	r5, [r3, #64]	; 0x40
 80008ac:	2200      	movs	r2, #0
 80008ae:	bc30      	pop	{r4, r5}
 80008b0:	e758      	b.n	8000764 <unwind_phase2_forced>
 80008b2:	bf00      	nop

080008b4 <__gnu_Unwind_Resume>:
 80008b4:	b570      	push	{r4, r5, r6, lr}
 80008b6:	68c6      	ldr	r6, [r0, #12]
 80008b8:	6943      	ldr	r3, [r0, #20]
 80008ba:	640b      	str	r3, [r1, #64]	; 0x40
 80008bc:	b126      	cbz	r6, 80008c8 <__gnu_Unwind_Resume+0x14>
 80008be:	2201      	movs	r2, #1
 80008c0:	f7ff ff50 	bl	8000764 <unwind_phase2_forced>
 80008c4:	f003 fbfd 	bl	80040c2 <abort>
 80008c8:	6903      	ldr	r3, [r0, #16]
 80008ca:	460a      	mov	r2, r1
 80008cc:	4604      	mov	r4, r0
 80008ce:	460d      	mov	r5, r1
 80008d0:	4601      	mov	r1, r0
 80008d2:	2002      	movs	r0, #2
 80008d4:	4798      	blx	r3
 80008d6:	2807      	cmp	r0, #7
 80008d8:	d007      	beq.n	80008ea <__gnu_Unwind_Resume+0x36>
 80008da:	2808      	cmp	r0, #8
 80008dc:	d103      	bne.n	80008e6 <__gnu_Unwind_Resume+0x32>
 80008de:	4629      	mov	r1, r5
 80008e0:	4620      	mov	r0, r4
 80008e2:	f7ff ff1f 	bl	8000724 <unwind_phase2>
 80008e6:	f003 fbec 	bl	80040c2 <abort>
 80008ea:	4630      	mov	r0, r6
 80008ec:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80008ee:	f7ff ff17 	bl	8000720 <_Unwind_DebugHook>
 80008f2:	1d28      	adds	r0, r5, #4
 80008f4:	f000 fb28 	bl	8000f48 <__restore_core_regs>

080008f8 <__gnu_Unwind_Resume_or_Rethrow>:
 80008f8:	68c2      	ldr	r2, [r0, #12]
 80008fa:	b11a      	cbz	r2, 8000904 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80008fc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80008fe:	640a      	str	r2, [r1, #64]	; 0x40
 8000900:	2200      	movs	r2, #0
 8000902:	e72f      	b.n	8000764 <unwind_phase2_forced>
 8000904:	e79c      	b.n	8000840 <__gnu_Unwind_RaiseException>
 8000906:	bf00      	nop

08000908 <_Unwind_Complete>:
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <_Unwind_DeleteException>:
 800090c:	6883      	ldr	r3, [r0, #8]
 800090e:	b113      	cbz	r3, 8000916 <_Unwind_DeleteException+0xa>
 8000910:	4601      	mov	r1, r0
 8000912:	2001      	movs	r0, #1
 8000914:	4718      	bx	r3
 8000916:	4770      	bx	lr

08000918 <_Unwind_VRS_Get>:
 8000918:	b500      	push	{lr}
 800091a:	2904      	cmp	r1, #4
 800091c:	d807      	bhi.n	800092e <_Unwind_VRS_Get+0x16>
 800091e:	e8df f001 	tbb	[pc, r1]
 8000922:	0903      	.short	0x0903
 8000924:	0906      	.short	0x0906
 8000926:	09          	.byte	0x09
 8000927:	00          	.byte	0x00
 8000928:	b90b      	cbnz	r3, 800092e <_Unwind_VRS_Get+0x16>
 800092a:	2a0f      	cmp	r2, #15
 800092c:	d905      	bls.n	800093a <_Unwind_VRS_Get+0x22>
 800092e:	2002      	movs	r0, #2
 8000930:	f85d fb04 	ldr.w	pc, [sp], #4
 8000934:	2001      	movs	r0, #1
 8000936:	f85d fb04 	ldr.w	pc, [sp], #4
 800093a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800093e:	4618      	mov	r0, r3
 8000940:	6853      	ldr	r3, [r2, #4]
 8000942:	9a01      	ldr	r2, [sp, #4]
 8000944:	6013      	str	r3, [r2, #0]
 8000946:	f85d fb04 	ldr.w	pc, [sp], #4
 800094a:	bf00      	nop

0800094c <_Unwind_GetGR>:
 800094c:	b510      	push	{r4, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	2300      	movs	r3, #0
 8000952:	ac03      	add	r4, sp, #12
 8000954:	460a      	mov	r2, r1
 8000956:	9400      	str	r4, [sp, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	f7ff ffdd 	bl	8000918 <_Unwind_VRS_Get>
 800095e:	9803      	ldr	r0, [sp, #12]
 8000960:	b004      	add	sp, #16
 8000962:	bd10      	pop	{r4, pc}

08000964 <_Unwind_VRS_Set>:
 8000964:	b500      	push	{lr}
 8000966:	2904      	cmp	r1, #4
 8000968:	d807      	bhi.n	800097a <_Unwind_VRS_Set+0x16>
 800096a:	e8df f001 	tbb	[pc, r1]
 800096e:	0903      	.short	0x0903
 8000970:	0906      	.short	0x0906
 8000972:	09          	.byte	0x09
 8000973:	00          	.byte	0x00
 8000974:	b90b      	cbnz	r3, 800097a <_Unwind_VRS_Set+0x16>
 8000976:	2a0f      	cmp	r2, #15
 8000978:	d905      	bls.n	8000986 <_Unwind_VRS_Set+0x22>
 800097a:	2002      	movs	r0, #2
 800097c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000980:	2001      	movs	r0, #1
 8000982:	f85d fb04 	ldr.w	pc, [sp], #4
 8000986:	9901      	ldr	r1, [sp, #4]
 8000988:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800098c:	6809      	ldr	r1, [r1, #0]
 800098e:	6051      	str	r1, [r2, #4]
 8000990:	4618      	mov	r0, r3
 8000992:	f85d fb04 	ldr.w	pc, [sp], #4
 8000996:	bf00      	nop

08000998 <_Unwind_SetGR>:
 8000998:	b510      	push	{r4, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	ac04      	add	r4, sp, #16
 800099e:	2300      	movs	r3, #0
 80009a0:	f844 2d04 	str.w	r2, [r4, #-4]!
 80009a4:	460a      	mov	r2, r1
 80009a6:	9400      	str	r4, [sp, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f7ff ffdb 	bl	8000964 <_Unwind_VRS_Set>
 80009ae:	b004      	add	sp, #16
 80009b0:	bd10      	pop	{r4, pc}
 80009b2:	bf00      	nop

080009b4 <__gnu_Unwind_Backtrace>:
 80009b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	1d15      	adds	r5, r2, #4
 80009bc:	4607      	mov	r7, r0
 80009be:	460e      	mov	r6, r1
 80009c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80009c6:	ac17      	add	r4, sp, #92	; 0x5c
 80009c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009d6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80009da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80009de:	9516      	str	r5, [sp, #88]	; 0x58
 80009e0:	e010      	b.n	8000a04 <__gnu_Unwind_Backtrace+0x50>
 80009e2:	a816      	add	r0, sp, #88	; 0x58
 80009e4:	f7ff ffd8 	bl	8000998 <_Unwind_SetGR>
 80009e8:	4631      	mov	r1, r6
 80009ea:	a816      	add	r0, sp, #88	; 0x58
 80009ec:	47b8      	blx	r7
 80009ee:	aa16      	add	r2, sp, #88	; 0x58
 80009f0:	4669      	mov	r1, sp
 80009f2:	b978      	cbnz	r0, 8000a14 <__gnu_Unwind_Backtrace+0x60>
 80009f4:	9b04      	ldr	r3, [sp, #16]
 80009f6:	2008      	movs	r0, #8
 80009f8:	4798      	blx	r3
 80009fa:	2805      	cmp	r0, #5
 80009fc:	4604      	mov	r4, r0
 80009fe:	d00a      	beq.n	8000a16 <__gnu_Unwind_Backtrace+0x62>
 8000a00:	2809      	cmp	r0, #9
 8000a02:	d007      	beq.n	8000a14 <__gnu_Unwind_Backtrace+0x60>
 8000a04:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000a06:	4668      	mov	r0, sp
 8000a08:	f7ff fe06 	bl	8000618 <get_eit_entry>
 8000a0c:	466a      	mov	r2, sp
 8000a0e:	210c      	movs	r1, #12
 8000a10:	2800      	cmp	r0, #0
 8000a12:	d0e6      	beq.n	80009e2 <__gnu_Unwind_Backtrace+0x2e>
 8000a14:	2409      	movs	r4, #9
 8000a16:	a816      	add	r0, sp, #88	; 0x58
 8000a18:	f7ff fe4e 	bl	80006b8 <restore_non_core_regs>
 8000a1c:	4620      	mov	r0, r4
 8000a1e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000a22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a24 <__gnu_unwind_pr_common>:
 8000a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a28:	460d      	mov	r5, r1
 8000a2a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000a2c:	b08b      	sub	sp, #44	; 0x2c
 8000a2e:	1d0c      	adds	r4, r1, #4
 8000a30:	6809      	ldr	r1, [r1, #0]
 8000a32:	9107      	str	r1, [sp, #28]
 8000a34:	4691      	mov	r9, r2
 8000a36:	9408      	str	r4, [sp, #32]
 8000a38:	f000 0b03 	and.w	fp, r0, #3
 8000a3c:	461e      	mov	r6, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d160      	bne.n	8000b04 <__gnu_unwind_pr_common+0xe0>
 8000a42:	0209      	lsls	r1, r1, #8
 8000a44:	2303      	movs	r3, #3
 8000a46:	9107      	str	r1, [sp, #28]
 8000a48:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000a4c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000a50:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a52:	f1bb 0f02 	cmp.w	fp, #2
 8000a56:	bf08      	it	eq
 8000a58:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000a5a:	f013 0301 	ands.w	r3, r3, #1
 8000a5e:	d140      	bne.n	8000ae2 <__gnu_unwind_pr_common+0xbe>
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	f000 0308 	and.w	r3, r0, #8
 8000a66:	9303      	str	r3, [sp, #12]
 8000a68:	f8d4 8000 	ldr.w	r8, [r4]
 8000a6c:	f1b8 0f00 	cmp.w	r8, #0
 8000a70:	d039      	beq.n	8000ae6 <__gnu_unwind_pr_common+0xc2>
 8000a72:	2e02      	cmp	r6, #2
 8000a74:	d043      	beq.n	8000afe <__gnu_unwind_pr_common+0xda>
 8000a76:	f8b4 8000 	ldrh.w	r8, [r4]
 8000a7a:	8867      	ldrh	r7, [r4, #2]
 8000a7c:	3404      	adds	r4, #4
 8000a7e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000a80:	f027 0a01 	bic.w	sl, r7, #1
 8000a84:	210f      	movs	r1, #15
 8000a86:	4648      	mov	r0, r9
 8000a88:	449a      	add	sl, r3
 8000a8a:	f7ff ff5f 	bl	800094c <_Unwind_GetGR>
 8000a8e:	4582      	cmp	sl, r0
 8000a90:	d833      	bhi.n	8000afa <__gnu_unwind_pr_common+0xd6>
 8000a92:	f028 0301 	bic.w	r3, r8, #1
 8000a96:	449a      	add	sl, r3
 8000a98:	4550      	cmp	r0, sl
 8000a9a:	bf2c      	ite	cs
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	007f      	lsls	r7, r7, #1
 8000aa2:	f007 0702 	and.w	r7, r7, #2
 8000aa6:	f008 0801 	and.w	r8, r8, #1
 8000aaa:	ea47 0708 	orr.w	r7, r7, r8
 8000aae:	2f01      	cmp	r7, #1
 8000ab0:	d03e      	beq.n	8000b30 <__gnu_unwind_pr_common+0x10c>
 8000ab2:	d335      	bcc.n	8000b20 <__gnu_unwind_pr_common+0xfc>
 8000ab4:	2f02      	cmp	r7, #2
 8000ab6:	d11c      	bne.n	8000af2 <__gnu_unwind_pr_common+0xce>
 8000ab8:	6823      	ldr	r3, [r4, #0]
 8000aba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000abe:	9202      	str	r2, [sp, #8]
 8000ac0:	f1bb 0f00 	cmp.w	fp, #0
 8000ac4:	d176      	bne.n	8000bb4 <__gnu_unwind_pr_common+0x190>
 8000ac6:	b128      	cbz	r0, 8000ad4 <__gnu_unwind_pr_common+0xb0>
 8000ac8:	9903      	ldr	r1, [sp, #12]
 8000aca:	2900      	cmp	r1, #0
 8000acc:	d07e      	beq.n	8000bcc <__gnu_unwind_pr_common+0x1a8>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	f000 80a6 	beq.w	8000c20 <__gnu_unwind_pr_common+0x1fc>
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db77      	blt.n	8000bc8 <__gnu_unwind_pr_common+0x1a4>
 8000ad8:	9b02      	ldr	r3, [sp, #8]
 8000ada:	3301      	adds	r3, #1
 8000adc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000ae0:	e7c2      	b.n	8000a68 <__gnu_unwind_pr_common+0x44>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	9301      	str	r3, [sp, #4]
 8000ae6:	2e02      	cmp	r6, #2
 8000ae8:	dd3e      	ble.n	8000b68 <__gnu_unwind_pr_common+0x144>
 8000aea:	f7ff fe17 	bl	800071c <__gnu_unwind_24bit.isra.1>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	d040      	beq.n	8000b74 <__gnu_unwind_pr_common+0x150>
 8000af2:	2009      	movs	r0, #9
 8000af4:	b00b      	add	sp, #44	; 0x2c
 8000af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000afa:	2000      	movs	r0, #0
 8000afc:	e7d0      	b.n	8000aa0 <__gnu_unwind_pr_common+0x7c>
 8000afe:	6867      	ldr	r7, [r4, #4]
 8000b00:	3408      	adds	r4, #8
 8000b02:	e7bc      	b.n	8000a7e <__gnu_unwind_pr_common+0x5a>
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	dca3      	bgt.n	8000a50 <__gnu_unwind_pr_common+0x2c>
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	0409      	lsls	r1, r1, #16
 8000b0e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000b12:	2302      	movs	r3, #2
 8000b14:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000b18:	9107      	str	r1, [sp, #28]
 8000b1a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000b1e:	e797      	b.n	8000a50 <__gnu_unwind_pr_common+0x2c>
 8000b20:	f1bb 0f00 	cmp.w	fp, #0
 8000b24:	d002      	beq.n	8000b2c <__gnu_unwind_pr_common+0x108>
 8000b26:	2800      	cmp	r0, #0
 8000b28:	f040 80bd 	bne.w	8000ca6 <__gnu_unwind_pr_common+0x282>
 8000b2c:	3404      	adds	r4, #4
 8000b2e:	e79b      	b.n	8000a68 <__gnu_unwind_pr_common+0x44>
 8000b30:	f1bb 0f00 	cmp.w	fp, #0
 8000b34:	d125      	bne.n	8000b82 <__gnu_unwind_pr_common+0x15e>
 8000b36:	b1a8      	cbz	r0, 8000b64 <__gnu_unwind_pr_common+0x140>
 8000b38:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000b3c:	1c99      	adds	r1, r3, #2
 8000b3e:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000b42:	d0d6      	beq.n	8000af2 <__gnu_unwind_pr_common+0xce>
 8000b44:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000b48:	3301      	adds	r3, #1
 8000b4a:	9106      	str	r1, [sp, #24]
 8000b4c:	f000 80a3 	beq.w	8000c96 <__gnu_unwind_pr_common+0x272>
 8000b50:	1d20      	adds	r0, r4, #4
 8000b52:	f7ff fddd 	bl	8000710 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b56:	ab06      	add	r3, sp, #24
 8000b58:	4601      	mov	r1, r0
 8000b5a:	4628      	mov	r0, r5
 8000b5c:	f3af 8000 	nop.w
 8000b60:	2800      	cmp	r0, #0
 8000b62:	d177      	bne.n	8000c54 <__gnu_unwind_pr_common+0x230>
 8000b64:	3408      	adds	r4, #8
 8000b66:	e77f      	b.n	8000a68 <__gnu_unwind_pr_common+0x44>
 8000b68:	a907      	add	r1, sp, #28
 8000b6a:	4648      	mov	r0, r9
 8000b6c:	f000 faee 	bl	800114c <__gnu_unwind_execute>
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d1be      	bne.n	8000af2 <__gnu_unwind_pr_common+0xce>
 8000b74:	9b01      	ldr	r3, [sp, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d15c      	bne.n	8000c34 <__gnu_unwind_pr_common+0x210>
 8000b7a:	2008      	movs	r0, #8
 8000b7c:	b00b      	add	sp, #44	; 0x2c
 8000b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b82:	210d      	movs	r1, #13
 8000b84:	4648      	mov	r0, r9
 8000b86:	6a2f      	ldr	r7, [r5, #32]
 8000b88:	f7ff fee0 	bl	800094c <_Unwind_GetGR>
 8000b8c:	4287      	cmp	r7, r0
 8000b8e:	d1e9      	bne.n	8000b64 <__gnu_unwind_pr_common+0x140>
 8000b90:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b92:	429c      	cmp	r4, r3
 8000b94:	d1e6      	bne.n	8000b64 <__gnu_unwind_pr_common+0x140>
 8000b96:	4620      	mov	r0, r4
 8000b98:	f7ff fcf0 	bl	800057c <selfrel_offset31>
 8000b9c:	210f      	movs	r1, #15
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	4648      	mov	r0, r9
 8000ba2:	f7ff fef9 	bl	8000998 <_Unwind_SetGR>
 8000ba6:	4648      	mov	r0, r9
 8000ba8:	462a      	mov	r2, r5
 8000baa:	2100      	movs	r1, #0
 8000bac:	f7ff fef4 	bl	8000998 <_Unwind_SetGR>
 8000bb0:	2007      	movs	r0, #7
 8000bb2:	e79f      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000bb4:	210d      	movs	r1, #13
 8000bb6:	4648      	mov	r0, r9
 8000bb8:	6a2f      	ldr	r7, [r5, #32]
 8000bba:	f7ff fec7 	bl	800094c <_Unwind_GetGR>
 8000bbe:	4287      	cmp	r7, r0
 8000bc0:	d058      	beq.n	8000c74 <__gnu_unwind_pr_common+0x250>
 8000bc2:	6823      	ldr	r3, [r4, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	da87      	bge.n	8000ad8 <__gnu_unwind_pr_common+0xb4>
 8000bc8:	3404      	adds	r4, #4
 8000bca:	e785      	b.n	8000ad8 <__gnu_unwind_pr_common+0xb4>
 8000bcc:	9b02      	ldr	r3, [sp, #8]
 8000bce:	b33b      	cbz	r3, 8000c20 <__gnu_unwind_pr_common+0x1fc>
 8000bd0:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000bd4:	1d27      	adds	r7, r4, #4
 8000bd6:	f8cd b010 	str.w	fp, [sp, #16]
 8000bda:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000bde:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000be2:	9605      	str	r6, [sp, #20]
 8000be4:	46a3      	mov	fp, r4
 8000be6:	461c      	mov	r4, r3
 8000be8:	e002      	b.n	8000bf0 <__gnu_unwind_pr_common+0x1cc>
 8000bea:	45b2      	cmp	sl, r6
 8000bec:	46b0      	mov	r8, r6
 8000bee:	d016      	beq.n	8000c1e <__gnu_unwind_pr_common+0x1fa>
 8000bf0:	4638      	mov	r0, r7
 8000bf2:	9406      	str	r4, [sp, #24]
 8000bf4:	f7ff fd8c 	bl	8000710 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000bf8:	ab06      	add	r3, sp, #24
 8000bfa:	4601      	mov	r1, r0
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4628      	mov	r0, r5
 8000c00:	f3af 8000 	nop.w
 8000c04:	f108 0601 	add.w	r6, r8, #1
 8000c08:	3704      	adds	r7, #4
 8000c0a:	2800      	cmp	r0, #0
 8000c0c:	d0ed      	beq.n	8000bea <__gnu_unwind_pr_common+0x1c6>
 8000c0e:	9b02      	ldr	r3, [sp, #8]
 8000c10:	9e05      	ldr	r6, [sp, #20]
 8000c12:	4543      	cmp	r3, r8
 8000c14:	465c      	mov	r4, fp
 8000c16:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000c1a:	d1d2      	bne.n	8000bc2 <__gnu_unwind_pr_common+0x19e>
 8000c1c:	e000      	b.n	8000c20 <__gnu_unwind_pr_common+0x1fc>
 8000c1e:	465c      	mov	r4, fp
 8000c20:	4648      	mov	r0, r9
 8000c22:	210d      	movs	r1, #13
 8000c24:	f7ff fe92 	bl	800094c <_Unwind_GetGR>
 8000c28:	9b06      	ldr	r3, [sp, #24]
 8000c2a:	6228      	str	r0, [r5, #32]
 8000c2c:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c2e:	626b      	str	r3, [r5, #36]	; 0x24
 8000c30:	2006      	movs	r0, #6
 8000c32:	e75f      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4648      	mov	r0, r9
 8000c38:	f7ff fe88 	bl	800094c <_Unwind_GetGR>
 8000c3c:	210e      	movs	r1, #14
 8000c3e:	4602      	mov	r2, r0
 8000c40:	4648      	mov	r0, r9
 8000c42:	f7ff fea9 	bl	8000998 <_Unwind_SetGR>
 8000c46:	4648      	mov	r0, r9
 8000c48:	4a29      	ldr	r2, [pc, #164]	; (8000cf0 <__gnu_unwind_pr_common+0x2cc>)
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f7ff fea4 	bl	8000998 <_Unwind_SetGR>
 8000c50:	2007      	movs	r0, #7
 8000c52:	e74f      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000c54:	4607      	mov	r7, r0
 8000c56:	210d      	movs	r1, #13
 8000c58:	4648      	mov	r0, r9
 8000c5a:	f7ff fe77 	bl	800094c <_Unwind_GetGR>
 8000c5e:	2f02      	cmp	r7, #2
 8000c60:	6228      	str	r0, [r5, #32]
 8000c62:	d11d      	bne.n	8000ca0 <__gnu_unwind_pr_common+0x27c>
 8000c64:	462b      	mov	r3, r5
 8000c66:	9a06      	ldr	r2, [sp, #24]
 8000c68:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000c6c:	626b      	str	r3, [r5, #36]	; 0x24
 8000c6e:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c70:	2006      	movs	r0, #6
 8000c72:	e73f      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000c74:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c76:	429c      	cmp	r4, r3
 8000c78:	d1a3      	bne.n	8000bc2 <__gnu_unwind_pr_common+0x19e>
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	18a3      	adds	r3, r4, r2
 8000c80:	9902      	ldr	r1, [sp, #8]
 8000c82:	62a9      	str	r1, [r5, #40]	; 0x28
 8000c84:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000c86:	632a      	str	r2, [r5, #48]	; 0x30
 8000c88:	636b      	str	r3, [r5, #52]	; 0x34
 8000c8a:	6823      	ldr	r3, [r4, #0]
 8000c8c:	42bb      	cmp	r3, r7
 8000c8e:	db1d      	blt.n	8000ccc <__gnu_unwind_pr_common+0x2a8>
 8000c90:	2301      	movs	r3, #1
 8000c92:	9301      	str	r3, [sp, #4]
 8000c94:	e720      	b.n	8000ad8 <__gnu_unwind_pr_common+0xb4>
 8000c96:	4648      	mov	r0, r9
 8000c98:	210d      	movs	r1, #13
 8000c9a:	f7ff fe57 	bl	800094c <_Unwind_GetGR>
 8000c9e:	6228      	str	r0, [r5, #32]
 8000ca0:	9b06      	ldr	r3, [sp, #24]
 8000ca2:	626b      	str	r3, [r5, #36]	; 0x24
 8000ca4:	e7e3      	b.n	8000c6e <__gnu_unwind_pr_common+0x24a>
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f7ff fc68 	bl	800057c <selfrel_offset31>
 8000cac:	3404      	adds	r4, #4
 8000cae:	4606      	mov	r6, r0
 8000cb0:	63ac      	str	r4, [r5, #56]	; 0x38
 8000cb2:	4628      	mov	r0, r5
 8000cb4:	f3af 8000 	nop.w
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	f43f af1a 	beq.w	8000af2 <__gnu_unwind_pr_common+0xce>
 8000cbe:	4648      	mov	r0, r9
 8000cc0:	4632      	mov	r2, r6
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f7ff fe68 	bl	8000998 <_Unwind_SetGR>
 8000cc8:	2007      	movs	r0, #7
 8000cca:	e713      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000ccc:	4608      	mov	r0, r1
 8000cce:	3001      	adds	r0, #1
 8000cd0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000cd4:	f7ff fc52 	bl	800057c <selfrel_offset31>
 8000cd8:	210f      	movs	r1, #15
 8000cda:	4602      	mov	r2, r0
 8000cdc:	4648      	mov	r0, r9
 8000cde:	f7ff fe5b 	bl	8000998 <_Unwind_SetGR>
 8000ce2:	4648      	mov	r0, r9
 8000ce4:	462a      	mov	r2, r5
 8000ce6:	4639      	mov	r1, r7
 8000ce8:	f7ff fe56 	bl	8000998 <_Unwind_SetGR>
 8000cec:	2007      	movs	r0, #7
 8000cee:	e701      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000cf0:	00000000 	.word	0x00000000

08000cf4 <__aeabi_unwind_cpp_pr0>:
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e695      	b.n	8000a24 <__gnu_unwind_pr_common>

08000cf8 <__aeabi_unwind_cpp_pr1>:
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e693      	b.n	8000a24 <__gnu_unwind_pr_common>

08000cfc <__aeabi_unwind_cpp_pr2>:
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	e691      	b.n	8000a24 <__gnu_unwind_pr_common>

08000d00 <_Unwind_VRS_Pop>:
 8000d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d02:	4604      	mov	r4, r0
 8000d04:	b0c5      	sub	sp, #276	; 0x114
 8000d06:	2904      	cmp	r1, #4
 8000d08:	d80d      	bhi.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000d0a:	e8df f001 	tbb	[pc, r1]
 8000d0e:	0353      	.short	0x0353
 8000d10:	310c      	.short	0x310c
 8000d12:	0f          	.byte	0x0f
 8000d13:	00          	.byte	0x00
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000d1a:	b295      	uxth	r5, r2
 8000d1c:	d162      	bne.n	8000de4 <_Unwind_VRS_Pop+0xe4>
 8000d1e:	1972      	adds	r2, r6, r5
 8000d20:	2a10      	cmp	r2, #16
 8000d22:	f240 809b 	bls.w	8000e5c <_Unwind_VRS_Pop+0x15c>
 8000d26:	2002      	movs	r0, #2
 8000d28:	b045      	add	sp, #276	; 0x114
 8000d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1fa      	bne.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000d30:	2a10      	cmp	r2, #16
 8000d32:	d8f8      	bhi.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000d34:	6823      	ldr	r3, [r4, #0]
 8000d36:	06d8      	lsls	r0, r3, #27
 8000d38:	f100 80c6 	bmi.w	8000ec8 <_Unwind_VRS_Pop+0x1c8>
 8000d3c:	ae22      	add	r6, sp, #136	; 0x88
 8000d3e:	4630      	mov	r0, r6
 8000d40:	9201      	str	r2, [sp, #4]
 8000d42:	f000 f973 	bl	800102c <__gnu_Unwind_Save_WMMXC>
 8000d46:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d48:	9a01      	ldr	r2, [sp, #4]
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	2501      	movs	r5, #1
 8000d4e:	fa05 f103 	lsl.w	r1, r5, r3
 8000d52:	4211      	tst	r1, r2
 8000d54:	d003      	beq.n	8000d5e <_Unwind_VRS_Pop+0x5e>
 8000d56:	6801      	ldr	r1, [r0, #0]
 8000d58:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000d5c:	3004      	adds	r0, #4
 8000d5e:	3301      	adds	r3, #1
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	d1f4      	bne.n	8000d4e <_Unwind_VRS_Pop+0x4e>
 8000d64:	63a0      	str	r0, [r4, #56]	; 0x38
 8000d66:	4630      	mov	r0, r6
 8000d68:	f000 f956 	bl	8001018 <__gnu_Unwind_Restore_WMMXC>
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	e7db      	b.n	8000d28 <_Unwind_VRS_Pop+0x28>
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d1d8      	bne.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000d74:	0c15      	lsrs	r5, r2, #16
 8000d76:	b297      	uxth	r7, r2
 8000d78:	19eb      	adds	r3, r5, r7
 8000d7a:	2b10      	cmp	r3, #16
 8000d7c:	d8d3      	bhi.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	071e      	lsls	r6, r3, #28
 8000d82:	f100 80b5 	bmi.w	8000ef0 <_Unwind_VRS_Pop+0x1f0>
 8000d86:	ae22      	add	r6, sp, #136	; 0x88
 8000d88:	4630      	mov	r0, r6
 8000d8a:	f000 f923 	bl	8000fd4 <__gnu_Unwind_Save_WMMXD>
 8000d8e:	00ed      	lsls	r5, r5, #3
 8000d90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d92:	b14f      	cbz	r7, 8000da8 <_Unwind_VRS_Pop+0xa8>
 8000d94:	3d04      	subs	r5, #4
 8000d96:	1971      	adds	r1, r6, r5
 8000d98:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000da0:	f841 2f04 	str.w	r2, [r1, #4]!
 8000da4:	4283      	cmp	r3, r0
 8000da6:	d1f9      	bne.n	8000d9c <_Unwind_VRS_Pop+0x9c>
 8000da8:	4630      	mov	r0, r6
 8000daa:	63a3      	str	r3, [r4, #56]	; 0x38
 8000dac:	f000 f8f0 	bl	8000f90 <__gnu_Unwind_Restore_WMMXD>
 8000db0:	2000      	movs	r0, #0
 8000db2:	e7b9      	b.n	8000d28 <_Unwind_VRS_Pop+0x28>
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1b6      	bne.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000db8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000dba:	b297      	uxth	r7, r2
 8000dbc:	1d20      	adds	r0, r4, #4
 8000dbe:	2601      	movs	r6, #1
 8000dc0:	fa06 f103 	lsl.w	r1, r6, r3
 8000dc4:	4239      	tst	r1, r7
 8000dc6:	f103 0301 	add.w	r3, r3, #1
 8000dca:	d002      	beq.n	8000dd2 <_Unwind_VRS_Pop+0xd2>
 8000dcc:	6829      	ldr	r1, [r5, #0]
 8000dce:	6001      	str	r1, [r0, #0]
 8000dd0:	3504      	adds	r5, #4
 8000dd2:	2b10      	cmp	r3, #16
 8000dd4:	f100 0004 	add.w	r0, r0, #4
 8000dd8:	d1f2      	bne.n	8000dc0 <_Unwind_VRS_Pop+0xc0>
 8000dda:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000dde:	d13b      	bne.n	8000e58 <_Unwind_VRS_Pop+0x158>
 8000de0:	63a5      	str	r5, [r4, #56]	; 0x38
 8000de2:	e7a1      	b.n	8000d28 <_Unwind_VRS_Pop+0x28>
 8000de4:	2b05      	cmp	r3, #5
 8000de6:	d19e      	bne.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000de8:	1977      	adds	r7, r6, r5
 8000dea:	2f20      	cmp	r7, #32
 8000dec:	d89b      	bhi.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000dee:	2e0f      	cmp	r6, #15
 8000df0:	d966      	bls.n	8000ec0 <_Unwind_VRS_Pop+0x1c0>
 8000df2:	462f      	mov	r7, r5
 8000df4:	2d00      	cmp	r5, #0
 8000df6:	d13a      	bne.n	8000e6e <_Unwind_VRS_Pop+0x16e>
 8000df8:	462a      	mov	r2, r5
 8000dfa:	2700      	movs	r7, #0
 8000dfc:	2a00      	cmp	r2, #0
 8000dfe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e00:	dd72      	ble.n	8000ee8 <_Unwind_VRS_Pop+0x1e8>
 8000e02:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000e06:	4601      	mov	r1, r0
 8000e08:	a844      	add	r0, sp, #272	; 0x110
 8000e0a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000e0e:	388c      	subs	r0, #140	; 0x8c
 8000e10:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e14:	f840 5f04 	str.w	r5, [r0, #4]!
 8000e18:	4291      	cmp	r1, r2
 8000e1a:	d1f9      	bne.n	8000e10 <_Unwind_VRS_Pop+0x110>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	b197      	cbz	r7, 8000e46 <_Unwind_VRS_Pop+0x146>
 8000e20:	2e10      	cmp	r6, #16
 8000e22:	4632      	mov	r2, r6
 8000e24:	a944      	add	r1, sp, #272	; 0x110
 8000e26:	bf38      	it	cc
 8000e28:	2210      	movcc	r2, #16
 8000e2a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000e2e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000e32:	0079      	lsls	r1, r7, #1
 8000e34:	3a04      	subs	r2, #4
 8000e36:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000e3a:	f850 5b04 	ldr.w	r5, [r0], #4
 8000e3e:	f842 5f04 	str.w	r5, [r2, #4]!
 8000e42:	4288      	cmp	r0, r1
 8000e44:	d1f9      	bne.n	8000e3a <_Unwind_VRS_Pop+0x13a>
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d048      	beq.n	8000edc <_Unwind_VRS_Pop+0x1dc>
 8000e4a:	2e0f      	cmp	r6, #15
 8000e4c:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e4e:	d933      	bls.n	8000eb8 <_Unwind_VRS_Pop+0x1b8>
 8000e50:	b117      	cbz	r7, 8000e58 <_Unwind_VRS_Pop+0x158>
 8000e52:	a802      	add	r0, sp, #8
 8000e54:	f000 f894 	bl	8000f80 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000e58:	2000      	movs	r0, #0
 8000e5a:	e765      	b.n	8000d28 <_Unwind_VRS_Pop+0x28>
 8000e5c:	2e0f      	cmp	r6, #15
 8000e5e:	f63f af62 	bhi.w	8000d26 <_Unwind_VRS_Pop+0x26>
 8000e62:	2700      	movs	r7, #0
 8000e64:	6822      	ldr	r2, [r4, #0]
 8000e66:	07d1      	lsls	r1, r2, #31
 8000e68:	d417      	bmi.n	8000e9a <_Unwind_VRS_Pop+0x19a>
 8000e6a:	2f00      	cmp	r7, #0
 8000e6c:	d060      	beq.n	8000f30 <_Unwind_VRS_Pop+0x230>
 8000e6e:	6822      	ldr	r2, [r4, #0]
 8000e70:	0751      	lsls	r1, r2, #29
 8000e72:	d445      	bmi.n	8000f00 <_Unwind_VRS_Pop+0x200>
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d04d      	beq.n	8000f14 <_Unwind_VRS_Pop+0x214>
 8000e78:	2e0f      	cmp	r6, #15
 8000e7a:	d806      	bhi.n	8000e8a <_Unwind_VRS_Pop+0x18a>
 8000e7c:	a822      	add	r0, sp, #136	; 0x88
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	f000 f87a 	bl	8000f78 <__gnu_Unwind_Save_VFP_D>
 8000e84:	9b01      	ldr	r3, [sp, #4]
 8000e86:	2f00      	cmp	r7, #0
 8000e88:	d0b6      	beq.n	8000df8 <_Unwind_VRS_Pop+0xf8>
 8000e8a:	a802      	add	r0, sp, #8
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	f000 f87b 	bl	8000f88 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e92:	9b01      	ldr	r3, [sp, #4]
 8000e94:	f1c6 0210 	rsb	r2, r6, #16
 8000e98:	e7b0      	b.n	8000dfc <_Unwind_VRS_Pop+0xfc>
 8000e9a:	f022 0101 	bic.w	r1, r2, #1
 8000e9e:	2b05      	cmp	r3, #5
 8000ea0:	6021      	str	r1, [r4, #0]
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	d03b      	beq.n	8000f20 <_Unwind_VRS_Pop+0x220>
 8000ea8:	f022 0203 	bic.w	r2, r2, #3
 8000eac:	f840 2b48 	str.w	r2, [r0], #72
 8000eb0:	f000 f85a 	bl	8000f68 <__gnu_Unwind_Save_VFP>
 8000eb4:	9b01      	ldr	r3, [sp, #4]
 8000eb6:	e7d8      	b.n	8000e6a <_Unwind_VRS_Pop+0x16a>
 8000eb8:	a822      	add	r0, sp, #136	; 0x88
 8000eba:	f000 f859 	bl	8000f70 <__gnu_Unwind_Restore_VFP_D>
 8000ebe:	e7c7      	b.n	8000e50 <_Unwind_VRS_Pop+0x150>
 8000ec0:	2f10      	cmp	r7, #16
 8000ec2:	d9ce      	bls.n	8000e62 <_Unwind_VRS_Pop+0x162>
 8000ec4:	3f10      	subs	r7, #16
 8000ec6:	e7cd      	b.n	8000e64 <_Unwind_VRS_Pop+0x164>
 8000ec8:	f023 0310 	bic.w	r3, r3, #16
 8000ecc:	6023      	str	r3, [r4, #0]
 8000ece:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000ed2:	9201      	str	r2, [sp, #4]
 8000ed4:	f000 f8aa 	bl	800102c <__gnu_Unwind_Save_WMMXC>
 8000ed8:	9a01      	ldr	r2, [sp, #4]
 8000eda:	e72f      	b.n	8000d3c <_Unwind_VRS_Pop+0x3c>
 8000edc:	3104      	adds	r1, #4
 8000ede:	63a1      	str	r1, [r4, #56]	; 0x38
 8000ee0:	a822      	add	r0, sp, #136	; 0x88
 8000ee2:	f000 f83d 	bl	8000f60 <__gnu_Unwind_Restore_VFP>
 8000ee6:	e7b7      	b.n	8000e58 <_Unwind_VRS_Pop+0x158>
 8000ee8:	2f00      	cmp	r7, #0
 8000eea:	d199      	bne.n	8000e20 <_Unwind_VRS_Pop+0x120>
 8000eec:	4601      	mov	r1, r0
 8000eee:	e7aa      	b.n	8000e46 <_Unwind_VRS_Pop+0x146>
 8000ef0:	f023 0308 	bic.w	r3, r3, #8
 8000ef4:	6023      	str	r3, [r4, #0]
 8000ef6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000efa:	f000 f86b 	bl	8000fd4 <__gnu_Unwind_Save_WMMXD>
 8000efe:	e742      	b.n	8000d86 <_Unwind_VRS_Pop+0x86>
 8000f00:	4620      	mov	r0, r4
 8000f02:	f022 0204 	bic.w	r2, r2, #4
 8000f06:	f840 2bd0 	str.w	r2, [r0], #208
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	f000 f83c 	bl	8000f88 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f10:	9b01      	ldr	r3, [sp, #4]
 8000f12:	e7af      	b.n	8000e74 <_Unwind_VRS_Pop+0x174>
 8000f14:	a822      	add	r0, sp, #136	; 0x88
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	f000 f826 	bl	8000f68 <__gnu_Unwind_Save_VFP>
 8000f1c:	9b01      	ldr	r3, [sp, #4]
 8000f1e:	e7b9      	b.n	8000e94 <_Unwind_VRS_Pop+0x194>
 8000f20:	f041 0102 	orr.w	r1, r1, #2
 8000f24:	f840 1b48 	str.w	r1, [r0], #72
 8000f28:	f000 f826 	bl	8000f78 <__gnu_Unwind_Save_VFP_D>
 8000f2c:	9b01      	ldr	r3, [sp, #4]
 8000f2e:	e79c      	b.n	8000e6a <_Unwind_VRS_Pop+0x16a>
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d003      	beq.n	8000f3c <_Unwind_VRS_Pop+0x23c>
 8000f34:	2e0f      	cmp	r6, #15
 8000f36:	f63f af5f 	bhi.w	8000df8 <_Unwind_VRS_Pop+0xf8>
 8000f3a:	e79f      	b.n	8000e7c <_Unwind_VRS_Pop+0x17c>
 8000f3c:	a822      	add	r0, sp, #136	; 0x88
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	f000 f812 	bl	8000f68 <__gnu_Unwind_Save_VFP>
 8000f44:	9b01      	ldr	r3, [sp, #4]
 8000f46:	e757      	b.n	8000df8 <_Unwind_VRS_Pop+0xf8>

08000f48 <__restore_core_regs>:
 8000f48:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000f4c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000f50:	469c      	mov	ip, r3
 8000f52:	46a6      	mov	lr, r4
 8000f54:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000f58:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000f5c:	46e5      	mov	sp, ip
 8000f5e:	bd00      	pop	{pc}

08000f60 <__gnu_Unwind_Restore_VFP>:
 8000f60:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <__gnu_Unwind_Save_VFP>:
 8000f68:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <__gnu_Unwind_Restore_VFP_D>:
 8000f70:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <__gnu_Unwind_Save_VFP_D>:
 8000f78:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f80:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f88:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__gnu_Unwind_Restore_WMMXD>:
 8000f90:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f94:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f98:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f9c:	ecf0 3102 	ldfe	f3, [r0], #8
 8000fa0:	ecf0 4102 	ldfe	f4, [r0], #8
 8000fa4:	ecf0 5102 	ldfe	f5, [r0], #8
 8000fa8:	ecf0 6102 	ldfe	f6, [r0], #8
 8000fac:	ecf0 7102 	ldfe	f7, [r0], #8
 8000fb0:	ecf0 8102 	ldfp	f0, [r0], #8
 8000fb4:	ecf0 9102 	ldfp	f1, [r0], #8
 8000fb8:	ecf0 a102 	ldfp	f2, [r0], #8
 8000fbc:	ecf0 b102 	ldfp	f3, [r0], #8
 8000fc0:	ecf0 c102 	ldfp	f4, [r0], #8
 8000fc4:	ecf0 d102 	ldfp	f5, [r0], #8
 8000fc8:	ecf0 e102 	ldfp	f6, [r0], #8
 8000fcc:	ecf0 f102 	ldfp	f7, [r0], #8
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <__gnu_Unwind_Save_WMMXD>:
 8000fd4:	ece0 0102 	stfe	f0, [r0], #8
 8000fd8:	ece0 1102 	stfe	f1, [r0], #8
 8000fdc:	ece0 2102 	stfe	f2, [r0], #8
 8000fe0:	ece0 3102 	stfe	f3, [r0], #8
 8000fe4:	ece0 4102 	stfe	f4, [r0], #8
 8000fe8:	ece0 5102 	stfe	f5, [r0], #8
 8000fec:	ece0 6102 	stfe	f6, [r0], #8
 8000ff0:	ece0 7102 	stfe	f7, [r0], #8
 8000ff4:	ece0 8102 	stfp	f0, [r0], #8
 8000ff8:	ece0 9102 	stfp	f1, [r0], #8
 8000ffc:	ece0 a102 	stfp	f2, [r0], #8
 8001000:	ece0 b102 	stfp	f3, [r0], #8
 8001004:	ece0 c102 	stfp	f4, [r0], #8
 8001008:	ece0 d102 	stfp	f5, [r0], #8
 800100c:	ece0 e102 	stfp	f6, [r0], #8
 8001010:	ece0 f102 	stfp	f7, [r0], #8
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__gnu_Unwind_Restore_WMMXC>:
 8001018:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800101c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001020:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001024:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <__gnu_Unwind_Save_WMMXC>:
 800102c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001030:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001034:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001038:	fca0 b101 	stc2	1, cr11, [r0], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <_Unwind_RaiseException>:
 8001040:	46ec      	mov	ip, sp
 8001042:	b500      	push	{lr}
 8001044:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001048:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001054:	a901      	add	r1, sp, #4
 8001056:	f7ff fbf3 	bl	8000840 <__gnu_Unwind_RaiseException>
 800105a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800105e:	b012      	add	sp, #72	; 0x48
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <_Unwind_Resume>:
 8001064:	46ec      	mov	ip, sp
 8001066:	b500      	push	{lr}
 8001068:	e92d 5000 	stmdb	sp!, {ip, lr}
 800106c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001078:	a901      	add	r1, sp, #4
 800107a:	f7ff fc1b 	bl	80008b4 <__gnu_Unwind_Resume>
 800107e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001082:	b012      	add	sp, #72	; 0x48
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <_Unwind_Resume_or_Rethrow>:
 8001088:	46ec      	mov	ip, sp
 800108a:	b500      	push	{lr}
 800108c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001090:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	e92d 000c 	stmdb	sp!, {r2, r3}
 800109c:	a901      	add	r1, sp, #4
 800109e:	f7ff fc2b 	bl	80008f8 <__gnu_Unwind_Resume_or_Rethrow>
 80010a2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010a6:	b012      	add	sp, #72	; 0x48
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <_Unwind_ForcedUnwind>:
 80010ac:	46ec      	mov	ip, sp
 80010ae:	b500      	push	{lr}
 80010b0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010b4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010c0:	ab01      	add	r3, sp, #4
 80010c2:	f7ff fbed 	bl	80008a0 <__gnu_Unwind_ForcedUnwind>
 80010c6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010ca:	b012      	add	sp, #72	; 0x48
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <_Unwind_Backtrace>:
 80010d0:	46ec      	mov	ip, sp
 80010d2:	b500      	push	{lr}
 80010d4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010d8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010e4:	aa01      	add	r2, sp, #4
 80010e6:	f7ff fc65 	bl	80009b4 <__gnu_Unwind_Backtrace>
 80010ea:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010ee:	b012      	add	sp, #72	; 0x48
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <next_unwind_byte>:
 80010f4:	7a02      	ldrb	r2, [r0, #8]
 80010f6:	b91a      	cbnz	r2, 8001100 <next_unwind_byte+0xc>
 80010f8:	7a43      	ldrb	r3, [r0, #9]
 80010fa:	b943      	cbnz	r3, 800110e <next_unwind_byte+0x1a>
 80010fc:	20b0      	movs	r0, #176	; 0xb0
 80010fe:	4770      	bx	lr
 8001100:	6803      	ldr	r3, [r0, #0]
 8001102:	3a01      	subs	r2, #1
 8001104:	7202      	strb	r2, [r0, #8]
 8001106:	021a      	lsls	r2, r3, #8
 8001108:	6002      	str	r2, [r0, #0]
 800110a:	0e18      	lsrs	r0, r3, #24
 800110c:	4770      	bx	lr
 800110e:	6842      	ldr	r2, [r0, #4]
 8001110:	3b01      	subs	r3, #1
 8001112:	b410      	push	{r4}
 8001114:	7243      	strb	r3, [r0, #9]
 8001116:	6813      	ldr	r3, [r2, #0]
 8001118:	2103      	movs	r1, #3
 800111a:	1d14      	adds	r4, r2, #4
 800111c:	7201      	strb	r1, [r0, #8]
 800111e:	021a      	lsls	r2, r3, #8
 8001120:	6044      	str	r4, [r0, #4]
 8001122:	6002      	str	r2, [r0, #0]
 8001124:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001128:	0e18      	lsrs	r0, r3, #24
 800112a:	4770      	bx	lr

0800112c <_Unwind_GetGR.constprop.0>:
 800112c:	b500      	push	{lr}
 800112e:	b085      	sub	sp, #20
 8001130:	aa03      	add	r2, sp, #12
 8001132:	2300      	movs	r3, #0
 8001134:	9200      	str	r2, [sp, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	220c      	movs	r2, #12
 800113a:	f7ff fbed 	bl	8000918 <_Unwind_VRS_Get>
 800113e:	9803      	ldr	r0, [sp, #12]
 8001140:	b005      	add	sp, #20
 8001142:	f85d fb04 	ldr.w	pc, [sp], #4
 8001146:	bf00      	nop

08001148 <unwind_UCB_from_context>:
 8001148:	e7f0      	b.n	800112c <_Unwind_GetGR.constprop.0>
 800114a:	bf00      	nop

0800114c <__gnu_unwind_execute>:
 800114c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001150:	4606      	mov	r6, r0
 8001152:	b085      	sub	sp, #20
 8001154:	460f      	mov	r7, r1
 8001156:	f04f 0800 	mov.w	r8, #0
 800115a:	4638      	mov	r0, r7
 800115c:	f7ff ffca 	bl	80010f4 <next_unwind_byte>
 8001160:	28b0      	cmp	r0, #176	; 0xb0
 8001162:	4604      	mov	r4, r0
 8001164:	d023      	beq.n	80011ae <__gnu_unwind_execute+0x62>
 8001166:	0605      	lsls	r5, r0, #24
 8001168:	d427      	bmi.n	80011ba <__gnu_unwind_execute+0x6e>
 800116a:	2300      	movs	r3, #0
 800116c:	f10d 090c 	add.w	r9, sp, #12
 8001170:	4619      	mov	r1, r3
 8001172:	0085      	lsls	r5, r0, #2
 8001174:	220d      	movs	r2, #13
 8001176:	f8cd 9000 	str.w	r9, [sp]
 800117a:	4630      	mov	r0, r6
 800117c:	f7ff fbcc 	bl	8000918 <_Unwind_VRS_Get>
 8001180:	b2ed      	uxtb	r5, r5
 8001182:	9b03      	ldr	r3, [sp, #12]
 8001184:	f8cd 9000 	str.w	r9, [sp]
 8001188:	0660      	lsls	r0, r4, #25
 800118a:	f105 0504 	add.w	r5, r5, #4
 800118e:	bf4c      	ite	mi
 8001190:	1b5d      	submi	r5, r3, r5
 8001192:	18ed      	addpl	r5, r5, r3
 8001194:	2300      	movs	r3, #0
 8001196:	4619      	mov	r1, r3
 8001198:	220d      	movs	r2, #13
 800119a:	4630      	mov	r0, r6
 800119c:	9503      	str	r5, [sp, #12]
 800119e:	f7ff fbe1 	bl	8000964 <_Unwind_VRS_Set>
 80011a2:	4638      	mov	r0, r7
 80011a4:	f7ff ffa6 	bl	80010f4 <next_unwind_byte>
 80011a8:	28b0      	cmp	r0, #176	; 0xb0
 80011aa:	4604      	mov	r4, r0
 80011ac:	d1db      	bne.n	8001166 <__gnu_unwind_execute+0x1a>
 80011ae:	f1b8 0f00 	cmp.w	r8, #0
 80011b2:	f000 8095 	beq.w	80012e0 <__gnu_unwind_execute+0x194>
 80011b6:	2000      	movs	r0, #0
 80011b8:	e01c      	b.n	80011f4 <__gnu_unwind_execute+0xa8>
 80011ba:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80011be:	2b80      	cmp	r3, #128	; 0x80
 80011c0:	d05d      	beq.n	800127e <__gnu_unwind_execute+0x132>
 80011c2:	2b90      	cmp	r3, #144	; 0x90
 80011c4:	d019      	beq.n	80011fa <__gnu_unwind_execute+0xae>
 80011c6:	2ba0      	cmp	r3, #160	; 0xa0
 80011c8:	d02c      	beq.n	8001224 <__gnu_unwind_execute+0xd8>
 80011ca:	2bb0      	cmp	r3, #176	; 0xb0
 80011cc:	d03f      	beq.n	800124e <__gnu_unwind_execute+0x102>
 80011ce:	2bc0      	cmp	r3, #192	; 0xc0
 80011d0:	d06c      	beq.n	80012ac <__gnu_unwind_execute+0x160>
 80011d2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80011d6:	2bd0      	cmp	r3, #208	; 0xd0
 80011d8:	d10b      	bne.n	80011f2 <__gnu_unwind_execute+0xa6>
 80011da:	f000 0207 	and.w	r2, r0, #7
 80011de:	3201      	adds	r2, #1
 80011e0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011e4:	2305      	movs	r3, #5
 80011e6:	2101      	movs	r1, #1
 80011e8:	4630      	mov	r0, r6
 80011ea:	f7ff fd89 	bl	8000d00 <_Unwind_VRS_Pop>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d0b3      	beq.n	800115a <__gnu_unwind_execute+0xe>
 80011f2:	2009      	movs	r0, #9
 80011f4:	b005      	add	sp, #20
 80011f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011fa:	f000 030d 	and.w	r3, r0, #13
 80011fe:	2b0d      	cmp	r3, #13
 8001200:	d0f7      	beq.n	80011f2 <__gnu_unwind_execute+0xa6>
 8001202:	ad03      	add	r5, sp, #12
 8001204:	2300      	movs	r3, #0
 8001206:	f000 020f 	and.w	r2, r0, #15
 800120a:	4619      	mov	r1, r3
 800120c:	9500      	str	r5, [sp, #0]
 800120e:	4630      	mov	r0, r6
 8001210:	f7ff fb82 	bl	8000918 <_Unwind_VRS_Get>
 8001214:	2300      	movs	r3, #0
 8001216:	9500      	str	r5, [sp, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	220d      	movs	r2, #13
 800121c:	4630      	mov	r0, r6
 800121e:	f7ff fba1 	bl	8000964 <_Unwind_VRS_Set>
 8001222:	e79a      	b.n	800115a <__gnu_unwind_execute+0xe>
 8001224:	43c2      	mvns	r2, r0
 8001226:	f002 0307 	and.w	r3, r2, #7
 800122a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800122e:	411a      	asrs	r2, r3
 8001230:	0701      	lsls	r1, r0, #28
 8001232:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	bf48      	it	mi
 800123c:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001240:	4619      	mov	r1, r3
 8001242:	4630      	mov	r0, r6
 8001244:	f7ff fd5c 	bl	8000d00 <_Unwind_VRS_Pop>
 8001248:	2800      	cmp	r0, #0
 800124a:	d1d2      	bne.n	80011f2 <__gnu_unwind_execute+0xa6>
 800124c:	e785      	b.n	800115a <__gnu_unwind_execute+0xe>
 800124e:	28b1      	cmp	r0, #177	; 0xb1
 8001250:	d057      	beq.n	8001302 <__gnu_unwind_execute+0x1b6>
 8001252:	28b2      	cmp	r0, #178	; 0xb2
 8001254:	d068      	beq.n	8001328 <__gnu_unwind_execute+0x1dc>
 8001256:	28b3      	cmp	r0, #179	; 0xb3
 8001258:	f000 8095 	beq.w	8001386 <__gnu_unwind_execute+0x23a>
 800125c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001260:	2bb4      	cmp	r3, #180	; 0xb4
 8001262:	d0c6      	beq.n	80011f2 <__gnu_unwind_execute+0xa6>
 8001264:	f000 0207 	and.w	r2, r0, #7
 8001268:	3201      	adds	r2, #1
 800126a:	2301      	movs	r3, #1
 800126c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001270:	4619      	mov	r1, r3
 8001272:	4630      	mov	r0, r6
 8001274:	f7ff fd44 	bl	8000d00 <_Unwind_VRS_Pop>
 8001278:	2800      	cmp	r0, #0
 800127a:	d1ba      	bne.n	80011f2 <__gnu_unwind_execute+0xa6>
 800127c:	e76d      	b.n	800115a <__gnu_unwind_execute+0xe>
 800127e:	4638      	mov	r0, r7
 8001280:	f7ff ff38 	bl	80010f4 <next_unwind_byte>
 8001284:	0224      	lsls	r4, r4, #8
 8001286:	4304      	orrs	r4, r0
 8001288:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800128c:	d0b1      	beq.n	80011f2 <__gnu_unwind_execute+0xa6>
 800128e:	0124      	lsls	r4, r4, #4
 8001290:	2300      	movs	r3, #0
 8001292:	b2a2      	uxth	r2, r4
 8001294:	4619      	mov	r1, r3
 8001296:	4630      	mov	r0, r6
 8001298:	f7ff fd32 	bl	8000d00 <_Unwind_VRS_Pop>
 800129c:	2800      	cmp	r0, #0
 800129e:	d1a8      	bne.n	80011f2 <__gnu_unwind_execute+0xa6>
 80012a0:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80012a4:	bf18      	it	ne
 80012a6:	f04f 0801 	movne.w	r8, #1
 80012aa:	e756      	b.n	800115a <__gnu_unwind_execute+0xe>
 80012ac:	28c6      	cmp	r0, #198	; 0xc6
 80012ae:	d07d      	beq.n	80013ac <__gnu_unwind_execute+0x260>
 80012b0:	28c7      	cmp	r0, #199	; 0xc7
 80012b2:	f000 8086 	beq.w	80013c2 <__gnu_unwind_execute+0x276>
 80012b6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80012ba:	2bc0      	cmp	r3, #192	; 0xc0
 80012bc:	f000 8094 	beq.w	80013e8 <__gnu_unwind_execute+0x29c>
 80012c0:	28c8      	cmp	r0, #200	; 0xc8
 80012c2:	f000 809f 	beq.w	8001404 <__gnu_unwind_execute+0x2b8>
 80012c6:	28c9      	cmp	r0, #201	; 0xc9
 80012c8:	d193      	bne.n	80011f2 <__gnu_unwind_execute+0xa6>
 80012ca:	4638      	mov	r0, r7
 80012cc:	f7ff ff12 	bl	80010f4 <next_unwind_byte>
 80012d0:	0302      	lsls	r2, r0, #12
 80012d2:	f000 000f 	and.w	r0, r0, #15
 80012d6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80012da:	3001      	adds	r0, #1
 80012dc:	4302      	orrs	r2, r0
 80012de:	e781      	b.n	80011e4 <__gnu_unwind_execute+0x98>
 80012e0:	ac03      	add	r4, sp, #12
 80012e2:	4643      	mov	r3, r8
 80012e4:	220e      	movs	r2, #14
 80012e6:	4641      	mov	r1, r8
 80012e8:	9400      	str	r4, [sp, #0]
 80012ea:	4630      	mov	r0, r6
 80012ec:	f7ff fb14 	bl	8000918 <_Unwind_VRS_Get>
 80012f0:	9400      	str	r4, [sp, #0]
 80012f2:	4630      	mov	r0, r6
 80012f4:	4643      	mov	r3, r8
 80012f6:	220f      	movs	r2, #15
 80012f8:	4641      	mov	r1, r8
 80012fa:	f7ff fb33 	bl	8000964 <_Unwind_VRS_Set>
 80012fe:	4640      	mov	r0, r8
 8001300:	e778      	b.n	80011f4 <__gnu_unwind_execute+0xa8>
 8001302:	4638      	mov	r0, r7
 8001304:	f7ff fef6 	bl	80010f4 <next_unwind_byte>
 8001308:	2800      	cmp	r0, #0
 800130a:	f43f af72 	beq.w	80011f2 <__gnu_unwind_execute+0xa6>
 800130e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001312:	f47f af6e 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 8001316:	4602      	mov	r2, r0
 8001318:	4619      	mov	r1, r3
 800131a:	4630      	mov	r0, r6
 800131c:	f7ff fcf0 	bl	8000d00 <_Unwind_VRS_Pop>
 8001320:	2800      	cmp	r0, #0
 8001322:	f47f af66 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 8001326:	e718      	b.n	800115a <__gnu_unwind_execute+0xe>
 8001328:	2300      	movs	r3, #0
 800132a:	f10d 090c 	add.w	r9, sp, #12
 800132e:	220d      	movs	r2, #13
 8001330:	4619      	mov	r1, r3
 8001332:	f8cd 9000 	str.w	r9, [sp]
 8001336:	4630      	mov	r0, r6
 8001338:	f7ff faee 	bl	8000918 <_Unwind_VRS_Get>
 800133c:	4638      	mov	r0, r7
 800133e:	f7ff fed9 	bl	80010f4 <next_unwind_byte>
 8001342:	0602      	lsls	r2, r0, #24
 8001344:	f04f 0402 	mov.w	r4, #2
 8001348:	d50c      	bpl.n	8001364 <__gnu_unwind_execute+0x218>
 800134a:	9b03      	ldr	r3, [sp, #12]
 800134c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001350:	40a0      	lsls	r0, r4
 8001352:	4403      	add	r3, r0
 8001354:	4638      	mov	r0, r7
 8001356:	9303      	str	r3, [sp, #12]
 8001358:	f7ff fecc 	bl	80010f4 <next_unwind_byte>
 800135c:	0603      	lsls	r3, r0, #24
 800135e:	f104 0407 	add.w	r4, r4, #7
 8001362:	d4f2      	bmi.n	800134a <__gnu_unwind_execute+0x1fe>
 8001364:	9b03      	ldr	r3, [sp, #12]
 8001366:	f8cd 9000 	str.w	r9, [sp]
 800136a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800136e:	40a2      	lsls	r2, r4
 8001370:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001374:	2300      	movs	r3, #0
 8001376:	4414      	add	r4, r2
 8001378:	4619      	mov	r1, r3
 800137a:	220d      	movs	r2, #13
 800137c:	4630      	mov	r0, r6
 800137e:	9403      	str	r4, [sp, #12]
 8001380:	f7ff faf0 	bl	8000964 <_Unwind_VRS_Set>
 8001384:	e6e9      	b.n	800115a <__gnu_unwind_execute+0xe>
 8001386:	4638      	mov	r0, r7
 8001388:	f7ff feb4 	bl	80010f4 <next_unwind_byte>
 800138c:	0301      	lsls	r1, r0, #12
 800138e:	f000 000f 	and.w	r0, r0, #15
 8001392:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001396:	1c42      	adds	r2, r0, #1
 8001398:	2301      	movs	r3, #1
 800139a:	430a      	orrs	r2, r1
 800139c:	4630      	mov	r0, r6
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fcae 	bl	8000d00 <_Unwind_VRS_Pop>
 80013a4:	2800      	cmp	r0, #0
 80013a6:	f47f af24 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 80013aa:	e6d6      	b.n	800115a <__gnu_unwind_execute+0xe>
 80013ac:	4638      	mov	r0, r7
 80013ae:	f7ff fea1 	bl	80010f4 <next_unwind_byte>
 80013b2:	0301      	lsls	r1, r0, #12
 80013b4:	f000 000f 	and.w	r0, r0, #15
 80013b8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80013bc:	1c42      	adds	r2, r0, #1
 80013be:	2303      	movs	r3, #3
 80013c0:	e7eb      	b.n	800139a <__gnu_unwind_execute+0x24e>
 80013c2:	4638      	mov	r0, r7
 80013c4:	f7ff fe96 	bl	80010f4 <next_unwind_byte>
 80013c8:	2800      	cmp	r0, #0
 80013ca:	f43f af12 	beq.w	80011f2 <__gnu_unwind_execute+0xa6>
 80013ce:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80013d2:	f47f af0e 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 80013d6:	4602      	mov	r2, r0
 80013d8:	2104      	movs	r1, #4
 80013da:	4630      	mov	r0, r6
 80013dc:	f7ff fc90 	bl	8000d00 <_Unwind_VRS_Pop>
 80013e0:	2800      	cmp	r0, #0
 80013e2:	f47f af06 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 80013e6:	e6b8      	b.n	800115a <__gnu_unwind_execute+0xe>
 80013e8:	f000 020f 	and.w	r2, r0, #15
 80013ec:	3201      	adds	r2, #1
 80013ee:	2303      	movs	r3, #3
 80013f0:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80013f4:	4619      	mov	r1, r3
 80013f6:	4630      	mov	r0, r6
 80013f8:	f7ff fc82 	bl	8000d00 <_Unwind_VRS_Pop>
 80013fc:	2800      	cmp	r0, #0
 80013fe:	f47f aef8 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 8001402:	e6aa      	b.n	800115a <__gnu_unwind_execute+0xe>
 8001404:	4638      	mov	r0, r7
 8001406:	f7ff fe75 	bl	80010f4 <next_unwind_byte>
 800140a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800140e:	f000 030f 	and.w	r3, r0, #15
 8001412:	3210      	adds	r2, #16
 8001414:	3301      	adds	r3, #1
 8001416:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800141a:	e6e3      	b.n	80011e4 <__gnu_unwind_execute+0x98>

0800141c <__gnu_unwind_frame>:
 800141c:	b510      	push	{r4, lr}
 800141e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001420:	b084      	sub	sp, #16
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	2003      	movs	r0, #3
 8001426:	f88d 000c 	strb.w	r0, [sp, #12]
 800142a:	79dc      	ldrb	r4, [r3, #7]
 800142c:	f88d 400d 	strb.w	r4, [sp, #13]
 8001430:	0212      	lsls	r2, r2, #8
 8001432:	3308      	adds	r3, #8
 8001434:	4608      	mov	r0, r1
 8001436:	a901      	add	r1, sp, #4
 8001438:	9201      	str	r2, [sp, #4]
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	f7ff fe86 	bl	800114c <__gnu_unwind_execute>
 8001440:	b004      	add	sp, #16
 8001442:	bd10      	pop	{r4, pc}

08001444 <_Unwind_GetRegionStart>:
 8001444:	b508      	push	{r3, lr}
 8001446:	f7ff fe7f 	bl	8001148 <unwind_UCB_from_context>
 800144a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800144c:	bd08      	pop	{r3, pc}
 800144e:	bf00      	nop

08001450 <_Unwind_GetLanguageSpecificData>:
 8001450:	b508      	push	{r3, lr}
 8001452:	f7ff fe79 	bl	8001148 <unwind_UCB_from_context>
 8001456:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001458:	79c3      	ldrb	r3, [r0, #7]
 800145a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800145e:	3008      	adds	r0, #8
 8001460:	bd08      	pop	{r3, pc}
 8001462:	bf00      	nop

08001464 <_Unwind_GetTextRelBase>:
 8001464:	b508      	push	{r3, lr}
 8001466:	f002 fe2c 	bl	80040c2 <abort>
 800146a:	bf00      	nop

0800146c <_Unwind_GetDataRelBase>:
 800146c:	b508      	push	{r3, lr}
 800146e:	f7ff fff9 	bl	8001464 <_Unwind_GetTextRelBase>
 8001472:	bf00      	nop

08001474 <__aeabi_idiv0>:
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop

08001478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001478:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800147a:	4a0e      	ldr	r2, [pc, #56]	; (80014b4 <HAL_InitTick+0x3c>)
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_InitTick+0x40>)
{
 800147e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001480:	7818      	ldrb	r0, [r3, #0]
 8001482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001486:	fbb3 f3f0 	udiv	r3, r3, r0
 800148a:	6810      	ldr	r0, [r2, #0]
 800148c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001490:	f000 f894 	bl	80015bc <HAL_SYSTICK_Config>
 8001494:	4604      	mov	r4, r0
 8001496:	b958      	cbnz	r0, 80014b0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001498:	2d0f      	cmp	r5, #15
 800149a:	d809      	bhi.n	80014b0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800149c:	4602      	mov	r2, r0
 800149e:	4629      	mov	r1, r5
 80014a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014a4:	f000 f84a 	bl	800153c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014a8:	4b04      	ldr	r3, [pc, #16]	; (80014bc <HAL_InitTick+0x44>)
 80014aa:	4620      	mov	r0, r4
 80014ac:	601d      	str	r5, [r3, #0]
 80014ae:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80014b0:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80014b2:	bd38      	pop	{r3, r4, r5, pc}
 80014b4:	2000000c 	.word	0x2000000c
 80014b8:	20000004 	.word	0x20000004
 80014bc:	20000008 	.word	0x20000008

080014c0 <HAL_Init>:
{
 80014c0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014c2:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_Init+0x30>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80014ca:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80014d2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014da:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014dc:	2003      	movs	r0, #3
 80014de:	f000 f81b 	bl	8001518 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff ffc8 	bl	8001478 <HAL_InitTick>
  HAL_MspInit();
 80014e8:	f001 fe52 	bl	8003190 <HAL_MspInit>
}
 80014ec:	2000      	movs	r0, #0
 80014ee:	bd08      	pop	{r3, pc}
 80014f0:	40023c00 	.word	0x40023c00

080014f4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80014f4:	4a03      	ldr	r2, [pc, #12]	; (8001504 <HAL_IncTick+0x10>)
 80014f6:	4b04      	ldr	r3, [pc, #16]	; (8001508 <HAL_IncTick+0x14>)
 80014f8:	6811      	ldr	r1, [r2, #0]
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	440b      	add	r3, r1
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	200001c8 	.word	0x200001c8
 8001508:	20000004 	.word	0x20000004

0800150c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800150c:	4b01      	ldr	r3, [pc, #4]	; (8001514 <HAL_GetTick+0x8>)
 800150e:	6818      	ldr	r0, [r3, #0]
}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	200001c8 	.word	0x200001c8

08001518 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001518:	4a07      	ldr	r2, [pc, #28]	; (8001538 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800151a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001520:	041b      	lsls	r3, r3, #16
 8001522:	0c1b      	lsrs	r3, r3, #16
 8001524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001528:	0200      	lsls	r0, r0, #8
 800152a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001532:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001534:	60d3      	str	r3, [r2, #12]
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800153c:	4b17      	ldr	r3, [pc, #92]	; (800159c <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153e:	b530      	push	{r4, r5, lr}
 8001540:	68dc      	ldr	r4, [r3, #12]
 8001542:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001546:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154c:	2b04      	cmp	r3, #4
 800154e:	bf28      	it	cs
 8001550:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001552:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	f04f 0501 	mov.w	r5, #1
 8001558:	fa05 f303 	lsl.w	r3, r5, r3
 800155c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001560:	bf8c      	ite	hi
 8001562:	3c03      	subhi	r4, #3
 8001564:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001566:	4019      	ands	r1, r3
 8001568:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800156a:	fa05 f404 	lsl.w	r4, r5, r4
 800156e:	3c01      	subs	r4, #1
 8001570:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001572:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001574:	ea42 0201 	orr.w	r2, r2, r1
 8001578:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800157c:	bfaf      	iteee	ge
 800157e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001582:	f000 000f 	andlt.w	r0, r0, #15
 8001586:	4b06      	ldrlt	r3, [pc, #24]	; (80015a0 <HAL_NVIC_SetPriority+0x64>)
 8001588:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800158a:	bfa5      	ittet	ge
 800158c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001590:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001592:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001594:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001598:	bd30      	pop	{r4, r5, pc}
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00
 80015a0:	e000ed14 	.word	0xe000ed14

080015a4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80015a4:	0942      	lsrs	r2, r0, #5
 80015a6:	2301      	movs	r3, #1
 80015a8:	f000 001f 	and.w	r0, r0, #31
 80015ac:	fa03 f000 	lsl.w	r0, r3, r0
 80015b0:	4b01      	ldr	r3, [pc, #4]	; (80015b8 <HAL_NVIC_EnableIRQ+0x14>)
 80015b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80015b6:	4770      	bx	lr
 80015b8:	e000e100 	.word	0xe000e100

080015bc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015bc:	3801      	subs	r0, #1
 80015be:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80015c2:	d20a      	bcs.n	80015da <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c6:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015c8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	21f0      	movs	r1, #240	; 0xf0
 80015cc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015d4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80015da:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000e010 	.word	0xe000e010
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015ec:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ee:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80017a0 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015f4:	4a68      	ldr	r2, [pc, #416]	; (8001798 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015f6:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80017a4 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015fa:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fc:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80015fe:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001602:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001604:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001608:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 800160c:	45b6      	cmp	lr, r6
 800160e:	f040 80ae 	bne.w	800176e <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001612:	684c      	ldr	r4, [r1, #4]
 8001614:	f024 0710 	bic.w	r7, r4, #16
 8001618:	2f02      	cmp	r7, #2
 800161a:	d116      	bne.n	800164a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 800161c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001620:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001624:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001628:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800162c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001630:	f04f 0c0f 	mov.w	ip, #15
 8001634:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001638:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800163c:	690d      	ldr	r5, [r1, #16]
 800163e:	fa05 f50b 	lsl.w	r5, r5, fp
 8001642:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001646:	f8ca 5020 	str.w	r5, [sl, #32]
 800164a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800164e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001650:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001654:	fa05 f50a 	lsl.w	r5, r5, sl
 8001658:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800165a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800165e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001662:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001666:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001668:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800166c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800166e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001672:	d811      	bhi.n	8001698 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001674:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001676:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800167a:	68cf      	ldr	r7, [r1, #12]
 800167c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8001680:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001684:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001686:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001688:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800168c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001690:	409f      	lsls	r7, r3
 8001692:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001696:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8001698:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800169a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800169c:	688f      	ldr	r7, [r1, #8]
 800169e:	fa07 f70a 	lsl.w	r7, r7, sl
 80016a2:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80016a4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016a6:	00e5      	lsls	r5, r4, #3
 80016a8:	d561      	bpl.n	800176e <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016aa:	f04f 0b00 	mov.w	fp, #0
 80016ae:	f8cd b00c 	str.w	fp, [sp, #12]
 80016b2:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016b6:	4d39      	ldr	r5, [pc, #228]	; (800179c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b8:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80016bc:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80016c0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80016c4:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80016c8:	9703      	str	r7, [sp, #12]
 80016ca:	9f03      	ldr	r7, [sp, #12]
 80016cc:	f023 0703 	bic.w	r7, r3, #3
 80016d0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80016d4:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016d8:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80016dc:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016e0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80016e4:	f04f 0e0f 	mov.w	lr, #15
 80016e8:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ec:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016ee:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016f2:	d043      	beq.n	800177c <HAL_GPIO_Init+0x194>
 80016f4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80016f8:	42a8      	cmp	r0, r5
 80016fa:	d041      	beq.n	8001780 <HAL_GPIO_Init+0x198>
 80016fc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001700:	42a8      	cmp	r0, r5
 8001702:	d03f      	beq.n	8001784 <HAL_GPIO_Init+0x19c>
 8001704:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001708:	42a8      	cmp	r0, r5
 800170a:	d03d      	beq.n	8001788 <HAL_GPIO_Init+0x1a0>
 800170c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001710:	42a8      	cmp	r0, r5
 8001712:	d03b      	beq.n	800178c <HAL_GPIO_Init+0x1a4>
 8001714:	4548      	cmp	r0, r9
 8001716:	d03b      	beq.n	8001790 <HAL_GPIO_Init+0x1a8>
 8001718:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800171c:	42a8      	cmp	r0, r5
 800171e:	d039      	beq.n	8001794 <HAL_GPIO_Init+0x1ac>
 8001720:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001724:	42a8      	cmp	r0, r5
 8001726:	bf14      	ite	ne
 8001728:	2508      	movne	r5, #8
 800172a:	2507      	moveq	r5, #7
 800172c:	fa05 f50c 	lsl.w	r5, r5, ip
 8001730:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001734:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001736:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001738:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800173a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800173e:	bf0c      	ite	eq
 8001740:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001742:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001744:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001746:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001748:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800174c:	bf0c      	ite	eq
 800174e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8001750:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001752:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001754:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001756:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800175a:	bf0c      	ite	eq
 800175c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800175e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8001760:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8001762:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001764:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001766:	bf54      	ite	pl
 8001768:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800176a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800176c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800176e:	3301      	adds	r3, #1
 8001770:	2b10      	cmp	r3, #16
 8001772:	f47f af44 	bne.w	80015fe <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001776:	b005      	add	sp, #20
 8001778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800177c:	465d      	mov	r5, fp
 800177e:	e7d5      	b.n	800172c <HAL_GPIO_Init+0x144>
 8001780:	2501      	movs	r5, #1
 8001782:	e7d3      	b.n	800172c <HAL_GPIO_Init+0x144>
 8001784:	2502      	movs	r5, #2
 8001786:	e7d1      	b.n	800172c <HAL_GPIO_Init+0x144>
 8001788:	2503      	movs	r5, #3
 800178a:	e7cf      	b.n	800172c <HAL_GPIO_Init+0x144>
 800178c:	2504      	movs	r5, #4
 800178e:	e7cd      	b.n	800172c <HAL_GPIO_Init+0x144>
 8001790:	2505      	movs	r5, #5
 8001792:	e7cb      	b.n	800172c <HAL_GPIO_Init+0x144>
 8001794:	2506      	movs	r5, #6
 8001796:	e7c9      	b.n	800172c <HAL_GPIO_Init+0x144>
 8001798:	40013c00 	.word	0x40013c00
 800179c:	40020000 	.word	0x40020000
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40021400 	.word	0x40021400

080017a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017a8:	b10a      	cbz	r2, 80017ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017aa:	6181      	str	r1, [r0, #24]
 80017ac:	4770      	bx	lr
 80017ae:	0409      	lsls	r1, r1, #16
 80017b0:	e7fb      	b.n	80017aa <HAL_GPIO_WritePin+0x2>
	...

080017b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017b8:	4604      	mov	r4, r0
 80017ba:	b918      	cbnz	r0, 80017c4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80017bc:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 80017be:	b002      	add	sp, #8
 80017c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c4:	6803      	ldr	r3, [r0, #0]
 80017c6:	07dd      	lsls	r5, r3, #31
 80017c8:	d410      	bmi.n	80017ec <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ca:	6823      	ldr	r3, [r4, #0]
 80017cc:	0798      	lsls	r0, r3, #30
 80017ce:	d458      	bmi.n	8001882 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d0:	6823      	ldr	r3, [r4, #0]
 80017d2:	071a      	lsls	r2, r3, #28
 80017d4:	f100 809a 	bmi.w	800190c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d8:	6823      	ldr	r3, [r4, #0]
 80017da:	075b      	lsls	r3, r3, #29
 80017dc:	f100 80b8 	bmi.w	8001950 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017e0:	69a2      	ldr	r2, [r4, #24]
 80017e2:	2a00      	cmp	r2, #0
 80017e4:	f040 8119 	bne.w	8001a1a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 80017e8:	2000      	movs	r0, #0
 80017ea:	e7e8      	b.n	80017be <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017ec:	4ba6      	ldr	r3, [pc, #664]	; (8001a88 <HAL_RCC_OscConfig+0x2d4>)
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	f002 020c 	and.w	r2, r2, #12
 80017f4:	2a04      	cmp	r2, #4
 80017f6:	d007      	beq.n	8001808 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017fe:	2a08      	cmp	r2, #8
 8001800:	d10a      	bne.n	8001818 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	0259      	lsls	r1, r3, #9
 8001806:	d507      	bpl.n	8001818 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001808:	4b9f      	ldr	r3, [pc, #636]	; (8001a88 <HAL_RCC_OscConfig+0x2d4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	039a      	lsls	r2, r3, #14
 800180e:	d5dc      	bpl.n	80017ca <HAL_RCC_OscConfig+0x16>
 8001810:	6863      	ldr	r3, [r4, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1d9      	bne.n	80017ca <HAL_RCC_OscConfig+0x16>
 8001816:	e7d1      	b.n	80017bc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001818:	6863      	ldr	r3, [r4, #4]
 800181a:	4d9b      	ldr	r5, [pc, #620]	; (8001a88 <HAL_RCC_OscConfig+0x2d4>)
 800181c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001820:	d111      	bne.n	8001846 <HAL_RCC_OscConfig+0x92>
 8001822:	682b      	ldr	r3, [r5, #0]
 8001824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001828:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800182a:	f7ff fe6f 	bl	800150c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182e:	4d96      	ldr	r5, [pc, #600]	; (8001a88 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001830:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	682b      	ldr	r3, [r5, #0]
 8001834:	039b      	lsls	r3, r3, #14
 8001836:	d4c8      	bmi.n	80017ca <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001838:	f7ff fe68 	bl	800150c <HAL_GetTick>
 800183c:	1b80      	subs	r0, r0, r6
 800183e:	2864      	cmp	r0, #100	; 0x64
 8001840:	d9f7      	bls.n	8001832 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001842:	2003      	movs	r0, #3
 8001844:	e7bb      	b.n	80017be <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001846:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800184a:	d104      	bne.n	8001856 <HAL_RCC_OscConfig+0xa2>
 800184c:	682b      	ldr	r3, [r5, #0]
 800184e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001852:	602b      	str	r3, [r5, #0]
 8001854:	e7e5      	b.n	8001822 <HAL_RCC_OscConfig+0x6e>
 8001856:	682a      	ldr	r2, [r5, #0]
 8001858:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800185c:	602a      	str	r2, [r5, #0]
 800185e:	682a      	ldr	r2, [r5, #0]
 8001860:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001864:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001866:	2b00      	cmp	r3, #0
 8001868:	d1df      	bne.n	800182a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800186a:	f7ff fe4f 	bl	800150c <HAL_GetTick>
 800186e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001870:	682b      	ldr	r3, [r5, #0]
 8001872:	039f      	lsls	r7, r3, #14
 8001874:	d5a9      	bpl.n	80017ca <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001876:	f7ff fe49 	bl	800150c <HAL_GetTick>
 800187a:	1b80      	subs	r0, r0, r6
 800187c:	2864      	cmp	r0, #100	; 0x64
 800187e:	d9f7      	bls.n	8001870 <HAL_RCC_OscConfig+0xbc>
 8001880:	e7df      	b.n	8001842 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001882:	4b81      	ldr	r3, [pc, #516]	; (8001a88 <HAL_RCC_OscConfig+0x2d4>)
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	f012 0f0c 	tst.w	r2, #12
 800188a:	d007      	beq.n	800189c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001892:	2a08      	cmp	r2, #8
 8001894:	d111      	bne.n	80018ba <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	025e      	lsls	r6, r3, #9
 800189a:	d40e      	bmi.n	80018ba <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189c:	4b7a      	ldr	r3, [pc, #488]	; (8001a88 <HAL_RCC_OscConfig+0x2d4>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	0795      	lsls	r5, r2, #30
 80018a2:	d502      	bpl.n	80018aa <HAL_RCC_OscConfig+0xf6>
 80018a4:	68e2      	ldr	r2, [r4, #12]
 80018a6:	2a01      	cmp	r2, #1
 80018a8:	d188      	bne.n	80017bc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	6921      	ldr	r1, [r4, #16]
 80018ae:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80018b2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80018b6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b8:	e78a      	b.n	80017d0 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018ba:	68e2      	ldr	r2, [r4, #12]
 80018bc:	4b73      	ldr	r3, [pc, #460]	; (8001a8c <HAL_RCC_OscConfig+0x2d8>)
 80018be:	b1b2      	cbz	r2, 80018ee <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 80018c0:	2201      	movs	r2, #1
 80018c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018c4:	f7ff fe22 	bl	800150c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c8:	4d6f      	ldr	r5, [pc, #444]	; (8001a88 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80018ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018cc:	682b      	ldr	r3, [r5, #0]
 80018ce:	0798      	lsls	r0, r3, #30
 80018d0:	d507      	bpl.n	80018e2 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d2:	682b      	ldr	r3, [r5, #0]
 80018d4:	6922      	ldr	r2, [r4, #16]
 80018d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80018da:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80018de:	602b      	str	r3, [r5, #0]
 80018e0:	e776      	b.n	80017d0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e2:	f7ff fe13 	bl	800150c <HAL_GetTick>
 80018e6:	1b80      	subs	r0, r0, r6
 80018e8:	2802      	cmp	r0, #2
 80018ea:	d9ef      	bls.n	80018cc <HAL_RCC_OscConfig+0x118>
 80018ec:	e7a9      	b.n	8001842 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 80018ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018f0:	f7ff fe0c 	bl	800150c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f4:	4d64      	ldr	r5, [pc, #400]	; (8001a88 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80018f6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f8:	682b      	ldr	r3, [r5, #0]
 80018fa:	0799      	lsls	r1, r3, #30
 80018fc:	f57f af68 	bpl.w	80017d0 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001900:	f7ff fe04 	bl	800150c <HAL_GetTick>
 8001904:	1b80      	subs	r0, r0, r6
 8001906:	2802      	cmp	r0, #2
 8001908:	d9f6      	bls.n	80018f8 <HAL_RCC_OscConfig+0x144>
 800190a:	e79a      	b.n	8001842 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800190c:	6962      	ldr	r2, [r4, #20]
 800190e:	4b60      	ldr	r3, [pc, #384]	; (8001a90 <HAL_RCC_OscConfig+0x2dc>)
 8001910:	b17a      	cbz	r2, 8001932 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001912:	2201      	movs	r2, #1
 8001914:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001916:	f7ff fdf9 	bl	800150c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191a:	4d5b      	ldr	r5, [pc, #364]	; (8001a88 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800191c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800191e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001920:	079f      	lsls	r7, r3, #30
 8001922:	f53f af59 	bmi.w	80017d8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001926:	f7ff fdf1 	bl	800150c <HAL_GetTick>
 800192a:	1b80      	subs	r0, r0, r6
 800192c:	2802      	cmp	r0, #2
 800192e:	d9f6      	bls.n	800191e <HAL_RCC_OscConfig+0x16a>
 8001930:	e787      	b.n	8001842 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001932:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001934:	f7ff fdea 	bl	800150c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001938:	4d53      	ldr	r5, [pc, #332]	; (8001a88 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800193a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800193c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800193e:	0798      	lsls	r0, r3, #30
 8001940:	f57f af4a 	bpl.w	80017d8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001944:	f7ff fde2 	bl	800150c <HAL_GetTick>
 8001948:	1b80      	subs	r0, r0, r6
 800194a:	2802      	cmp	r0, #2
 800194c:	d9f6      	bls.n	800193c <HAL_RCC_OscConfig+0x188>
 800194e:	e778      	b.n	8001842 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001950:	4b4d      	ldr	r3, [pc, #308]	; (8001a88 <HAL_RCC_OscConfig+0x2d4>)
 8001952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001954:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001958:	d128      	bne.n	80019ac <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	9201      	str	r2, [sp, #4]
 800195c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800195e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001962:	641a      	str	r2, [r3, #64]	; 0x40
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	9301      	str	r3, [sp, #4]
 800196c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800196e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001970:	4d48      	ldr	r5, [pc, #288]	; (8001a94 <HAL_RCC_OscConfig+0x2e0>)
 8001972:	682b      	ldr	r3, [r5, #0]
 8001974:	05d9      	lsls	r1, r3, #23
 8001976:	d51b      	bpl.n	80019b0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001978:	68a3      	ldr	r3, [r4, #8]
 800197a:	4d43      	ldr	r5, [pc, #268]	; (8001a88 <HAL_RCC_OscConfig+0x2d4>)
 800197c:	2b01      	cmp	r3, #1
 800197e:	d127      	bne.n	80019d0 <HAL_RCC_OscConfig+0x21c>
 8001980:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001982:	f043 0301 	orr.w	r3, r3, #1
 8001986:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001988:	f7ff fdc0 	bl	800150c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800198c:	4d3e      	ldr	r5, [pc, #248]	; (8001a88 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800198e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001990:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001994:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001996:	079b      	lsls	r3, r3, #30
 8001998:	d539      	bpl.n	8001a0e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800199a:	2e00      	cmp	r6, #0
 800199c:	f43f af20 	beq.w	80017e0 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a0:	4a39      	ldr	r2, [pc, #228]	; (8001a88 <HAL_RCC_OscConfig+0x2d4>)
 80019a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80019a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a8:	6413      	str	r3, [r2, #64]	; 0x40
 80019aa:	e719      	b.n	80017e0 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80019ac:	2600      	movs	r6, #0
 80019ae:	e7df      	b.n	8001970 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b0:	682b      	ldr	r3, [r5, #0]
 80019b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80019b8:	f7ff fda8 	bl	800150c <HAL_GetTick>
 80019bc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019be:	682b      	ldr	r3, [r5, #0]
 80019c0:	05da      	lsls	r2, r3, #23
 80019c2:	d4d9      	bmi.n	8001978 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c4:	f7ff fda2 	bl	800150c <HAL_GetTick>
 80019c8:	1bc0      	subs	r0, r0, r7
 80019ca:	2802      	cmp	r0, #2
 80019cc:	d9f7      	bls.n	80019be <HAL_RCC_OscConfig+0x20a>
 80019ce:	e738      	b.n	8001842 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019d0:	2b05      	cmp	r3, #5
 80019d2:	d104      	bne.n	80019de <HAL_RCC_OscConfig+0x22a>
 80019d4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019d6:	f043 0304 	orr.w	r3, r3, #4
 80019da:	672b      	str	r3, [r5, #112]	; 0x70
 80019dc:	e7d0      	b.n	8001980 <HAL_RCC_OscConfig+0x1cc>
 80019de:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80019e0:	f022 0201 	bic.w	r2, r2, #1
 80019e4:	672a      	str	r2, [r5, #112]	; 0x70
 80019e6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80019e8:	f022 0204 	bic.w	r2, r2, #4
 80019ec:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1ca      	bne.n	8001988 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 80019f2:	f7ff fd8b 	bl	800150c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019f6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80019fa:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019fc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019fe:	0798      	lsls	r0, r3, #30
 8001a00:	d5cb      	bpl.n	800199a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a02:	f7ff fd83 	bl	800150c <HAL_GetTick>
 8001a06:	1bc0      	subs	r0, r0, r7
 8001a08:	4540      	cmp	r0, r8
 8001a0a:	d9f7      	bls.n	80019fc <HAL_RCC_OscConfig+0x248>
 8001a0c:	e719      	b.n	8001842 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0e:	f7ff fd7d 	bl	800150c <HAL_GetTick>
 8001a12:	1bc0      	subs	r0, r0, r7
 8001a14:	4540      	cmp	r0, r8
 8001a16:	d9bd      	bls.n	8001994 <HAL_RCC_OscConfig+0x1e0>
 8001a18:	e713      	b.n	8001842 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a1a:	4d1b      	ldr	r5, [pc, #108]	; (8001a88 <HAL_RCC_OscConfig+0x2d4>)
 8001a1c:	68ab      	ldr	r3, [r5, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	f43f aeca 	beq.w	80017bc <HAL_RCC_OscConfig+0x8>
 8001a28:	4e1b      	ldr	r6, [pc, #108]	; (8001a98 <HAL_RCC_OscConfig+0x2e4>)
 8001a2a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a2c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001a2e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a30:	d134      	bne.n	8001a9c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001a32:	f7ff fd6b 	bl	800150c <HAL_GetTick>
 8001a36:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a38:	682b      	ldr	r3, [r5, #0]
 8001a3a:	0199      	lsls	r1, r3, #6
 8001a3c:	d41e      	bmi.n	8001a7c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a3e:	6a22      	ldr	r2, [r4, #32]
 8001a40:	69e3      	ldr	r3, [r4, #28]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a46:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001a4a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a4c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a50:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a52:	4c0d      	ldr	r4, [pc, #52]	; (8001a88 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a54:	0852      	lsrs	r2, r2, #1
 8001a56:	3a01      	subs	r2, #1
 8001a58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001a5c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001a5e:	2301      	movs	r3, #1
 8001a60:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001a62:	f7ff fd53 	bl	800150c <HAL_GetTick>
 8001a66:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a68:	6823      	ldr	r3, [r4, #0]
 8001a6a:	019a      	lsls	r2, r3, #6
 8001a6c:	f53f aebc 	bmi.w	80017e8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a70:	f7ff fd4c 	bl	800150c <HAL_GetTick>
 8001a74:	1b40      	subs	r0, r0, r5
 8001a76:	2802      	cmp	r0, #2
 8001a78:	d9f6      	bls.n	8001a68 <HAL_RCC_OscConfig+0x2b4>
 8001a7a:	e6e2      	b.n	8001842 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7ff fd46 	bl	800150c <HAL_GetTick>
 8001a80:	1bc0      	subs	r0, r0, r7
 8001a82:	2802      	cmp	r0, #2
 8001a84:	d9d8      	bls.n	8001a38 <HAL_RCC_OscConfig+0x284>
 8001a86:	e6dc      	b.n	8001842 <HAL_RCC_OscConfig+0x8e>
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	42470000 	.word	0x42470000
 8001a90:	42470e80 	.word	0x42470e80
 8001a94:	40007000 	.word	0x40007000
 8001a98:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fd36 	bl	800150c <HAL_GetTick>
 8001aa0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa2:	682b      	ldr	r3, [r5, #0]
 8001aa4:	019b      	lsls	r3, r3, #6
 8001aa6:	f57f ae9f 	bpl.w	80017e8 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aaa:	f7ff fd2f 	bl	800150c <HAL_GetTick>
 8001aae:	1b00      	subs	r0, r0, r4
 8001ab0:	2802      	cmp	r0, #2
 8001ab2:	d9f6      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x2ee>
 8001ab4:	e6c5      	b.n	8001842 <HAL_RCC_OscConfig+0x8e>
 8001ab6:	bf00      	nop

08001ab8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ab8:	4913      	ldr	r1, [pc, #76]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001aba:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001abc:	688b      	ldr	r3, [r1, #8]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d003      	beq.n	8001ace <HAL_RCC_GetSysClockFreq+0x16>
 8001ac6:	2b08      	cmp	r3, #8
 8001ac8:	d003      	beq.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aca:	4810      	ldr	r0, [pc, #64]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001acc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001ace:	4810      	ldr	r0, [pc, #64]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x58>)
 8001ad0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ad2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ad4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ad6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ad8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001adc:	bf14      	ite	ne
 8001ade:	480c      	ldrne	r0, [pc, #48]	; (8001b10 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae0:	480a      	ldreq	r0, [pc, #40]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ae2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001ae6:	bf18      	it	ne
 8001ae8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aea:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aee:	fba1 0100 	umull	r0, r1, r1, r0
 8001af2:	f7fe fbbd 	bl	8000270 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001af6:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x50>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001afe:	3301      	adds	r3, #1
 8001b00:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001b02:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b06:	bd08      	pop	{r3, pc}
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	00f42400 	.word	0x00f42400
 8001b10:	017d7840 	.word	0x017d7840

08001b14 <HAL_RCC_ClockConfig>:
{
 8001b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b18:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001b1a:	4604      	mov	r4, r0
 8001b1c:	b910      	cbnz	r0, 8001b24 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001b1e:	2001      	movs	r0, #1
 8001b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b24:	4b44      	ldr	r3, [pc, #272]	; (8001c38 <HAL_RCC_ClockConfig+0x124>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	f002 020f 	and.w	r2, r2, #15
 8001b2c:	428a      	cmp	r2, r1
 8001b2e:	d328      	bcc.n	8001b82 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b30:	6821      	ldr	r1, [r4, #0]
 8001b32:	078f      	lsls	r7, r1, #30
 8001b34:	d42d      	bmi.n	8001b92 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b36:	07c8      	lsls	r0, r1, #31
 8001b38:	d440      	bmi.n	8001bbc <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b3a:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <HAL_RCC_ClockConfig+0x124>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	f002 020f 	and.w	r2, r2, #15
 8001b42:	4295      	cmp	r5, r2
 8001b44:	d366      	bcc.n	8001c14 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b46:	6822      	ldr	r2, [r4, #0]
 8001b48:	0751      	lsls	r1, r2, #29
 8001b4a:	d46c      	bmi.n	8001c26 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b4c:	0713      	lsls	r3, r2, #28
 8001b4e:	d507      	bpl.n	8001b60 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b50:	4a3a      	ldr	r2, [pc, #232]	; (8001c3c <HAL_RCC_ClockConfig+0x128>)
 8001b52:	6921      	ldr	r1, [r4, #16]
 8001b54:	6893      	ldr	r3, [r2, #8]
 8001b56:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001b5a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b5e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b60:	f7ff ffaa 	bl	8001ab8 <HAL_RCC_GetSysClockFreq>
 8001b64:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <HAL_RCC_ClockConfig+0x128>)
 8001b66:	4a36      	ldr	r2, [pc, #216]	; (8001c40 <HAL_RCC_ClockConfig+0x12c>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b6e:	5cd3      	ldrb	r3, [r2, r3]
 8001b70:	40d8      	lsrs	r0, r3
 8001b72:	4b34      	ldr	r3, [pc, #208]	; (8001c44 <HAL_RCC_ClockConfig+0x130>)
 8001b74:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b76:	2000      	movs	r0, #0
 8001b78:	f7ff fc7e 	bl	8001478 <HAL_InitTick>
  return HAL_OK;
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b82:	b2ca      	uxtb	r2, r1
 8001b84:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	4299      	cmp	r1, r3
 8001b8e:	d1c6      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xa>
 8001b90:	e7ce      	b.n	8001b30 <HAL_RCC_ClockConfig+0x1c>
 8001b92:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b94:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b98:	bf1e      	ittt	ne
 8001b9a:	689a      	ldrne	r2, [r3, #8]
 8001b9c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001ba0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ba4:	bf42      	ittt	mi
 8001ba6:	689a      	ldrmi	r2, [r3, #8]
 8001ba8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001bac:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	68a0      	ldr	r0, [r4, #8]
 8001bb2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001bb6:	4302      	orrs	r2, r0
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	e7bc      	b.n	8001b36 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bbc:	6862      	ldr	r2, [r4, #4]
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <HAL_RCC_ClockConfig+0x128>)
 8001bc0:	2a01      	cmp	r2, #1
 8001bc2:	d11d      	bne.n	8001c00 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bca:	d0a8      	beq.n	8001b1e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bcc:	4e1b      	ldr	r6, [pc, #108]	; (8001c3c <HAL_RCC_ClockConfig+0x128>)
 8001bce:	68b3      	ldr	r3, [r6, #8]
 8001bd0:	f023 0303 	bic.w	r3, r3, #3
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001bd8:	f7ff fc98 	bl	800150c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bdc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001be0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be2:	68b3      	ldr	r3, [r6, #8]
 8001be4:	6862      	ldr	r2, [r4, #4]
 8001be6:	f003 030c 	and.w	r3, r3, #12
 8001bea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001bee:	d0a4      	beq.n	8001b3a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf0:	f7ff fc8c 	bl	800150c <HAL_GetTick>
 8001bf4:	1bc0      	subs	r0, r0, r7
 8001bf6:	4540      	cmp	r0, r8
 8001bf8:	d9f3      	bls.n	8001be2 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001bfa:	2003      	movs	r0, #3
}
 8001bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c00:	1e91      	subs	r1, r2, #2
 8001c02:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c04:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c06:	d802      	bhi.n	8001c0e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c08:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001c0c:	e7dd      	b.n	8001bca <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0e:	f013 0f02 	tst.w	r3, #2
 8001c12:	e7da      	b.n	8001bca <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c14:	b2ea      	uxtb	r2, r5
 8001c16:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	429d      	cmp	r5, r3
 8001c20:	f47f af7d 	bne.w	8001b1e <HAL_RCC_ClockConfig+0xa>
 8001c24:	e78f      	b.n	8001b46 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c26:	4905      	ldr	r1, [pc, #20]	; (8001c3c <HAL_RCC_ClockConfig+0x128>)
 8001c28:	68e0      	ldr	r0, [r4, #12]
 8001c2a:	688b      	ldr	r3, [r1, #8]
 8001c2c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001c30:	4303      	orrs	r3, r0
 8001c32:	608b      	str	r3, [r1, #8]
 8001c34:	e78a      	b.n	8001b4c <HAL_RCC_ClockConfig+0x38>
 8001c36:	bf00      	nop
 8001c38:	40023c00 	.word	0x40023c00
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	080041c5 	.word	0x080041c5
 8001c44:	2000000c 	.word	0x2000000c

08001c48 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c48:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001c52:	5cd3      	ldrb	r3, [r2, r3]
 8001c54:	4a03      	ldr	r2, [pc, #12]	; (8001c64 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001c56:	6810      	ldr	r0, [r2, #0]
}
 8001c58:	40d8      	lsrs	r0, r3
 8001c5a:	4770      	bx	lr
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	080041d5 	.word	0x080041d5
 8001c64:	2000000c 	.word	0x2000000c

08001c68 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001c68:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <HAL_RCC_GetPCLK2Freq+0x14>)
 8001c6a:	4a05      	ldr	r2, [pc, #20]	; (8001c80 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001c72:	5cd3      	ldrb	r3, [r2, r3]
 8001c74:	4a03      	ldr	r2, [pc, #12]	; (8001c84 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001c76:	6810      	ldr	r0, [r2, #0]
}
 8001c78:	40d8      	lsrs	r0, r3
 8001c7a:	4770      	bx	lr
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	080041d5 	.word	0x080041d5
 8001c84:	2000000c 	.word	0x2000000c

08001c88 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c88:	6a03      	ldr	r3, [r0, #32]
 8001c8a:	f023 0301 	bic.w	r3, r3, #1
 8001c8e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001c90:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001c92:	6842      	ldr	r2, [r0, #4]
{
 8001c94:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001c96:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001c98:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001c9a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001c9e:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ca0:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001ca2:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001ca6:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001ca8:	4c0c      	ldr	r4, [pc, #48]	; (8001cdc <TIM_OC1_SetConfig+0x54>)
 8001caa:	42a0      	cmp	r0, r4
 8001cac:	d009      	beq.n	8001cc2 <TIM_OC1_SetConfig+0x3a>
 8001cae:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001cb2:	42a0      	cmp	r0, r4
 8001cb4:	d005      	beq.n	8001cc2 <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001cb6:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001cb8:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001cba:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001cbc:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001cbe:	6203      	str	r3, [r0, #32]
} 
 8001cc0:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 8001cc2:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cc4:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001cc6:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001cca:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001ccc:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001cce:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cd2:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001cd4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001cd8:	4322      	orrs	r2, r4
 8001cda:	e7ec      	b.n	8001cb6 <TIM_OC1_SetConfig+0x2e>
 8001cdc:	40010000 	.word	0x40010000

08001ce0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ce0:	6a03      	ldr	r3, [r0, #32]
 8001ce2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ce6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ce8:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001cea:	6842      	ldr	r2, [r0, #4]
{
 8001cec:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001cee:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001cf0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001cf2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001cf6:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001cf8:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001cfa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001cfe:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001d02:	4c0e      	ldr	r4, [pc, #56]	; (8001d3c <TIM_OC3_SetConfig+0x5c>)
 8001d04:	42a0      	cmp	r0, r4
 8001d06:	d009      	beq.n	8001d1c <TIM_OC3_SetConfig+0x3c>
 8001d08:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001d0c:	42a0      	cmp	r0, r4
 8001d0e:	d005      	beq.n	8001d1c <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d10:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001d12:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001d14:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001d16:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d18:	6203      	str	r3, [r0, #32]
}
 8001d1a:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d1c:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d1e:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001d20:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d24:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001d28:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001d2a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d2e:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001d30:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d34:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8001d38:	e7ea      	b.n	8001d10 <TIM_OC3_SetConfig+0x30>
 8001d3a:	bf00      	nop
 8001d3c:	40010000 	.word	0x40010000

08001d40 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001d40:	6a03      	ldr	r3, [r0, #32]
 8001d42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d46:	6203      	str	r3, [r0, #32]
{
 8001d48:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d4a:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8001d4c:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001d4e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d50:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001d52:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001d56:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001d5a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8001d5c:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001d60:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8001d64:	4d09      	ldr	r5, [pc, #36]	; (8001d8c <TIM_OC4_SetConfig+0x4c>)
 8001d66:	42a8      	cmp	r0, r5
 8001d68:	d009      	beq.n	8001d7e <TIM_OC4_SetConfig+0x3e>
 8001d6a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001d6e:	42a8      	cmp	r0, r5
 8001d70:	d005      	beq.n	8001d7e <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d72:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001d74:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001d76:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8001d78:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d7a:	6204      	str	r4, [r0, #32]
}
 8001d7c:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001d7e:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001d80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001d84:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8001d88:	e7f3      	b.n	8001d72 <TIM_OC4_SetConfig+0x32>
 8001d8a:	bf00      	nop
 8001d8c:	40010000 	.word	0x40010000

08001d90 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

 /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d90:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001d92:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001d94:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
{
 8001d9a:	b530      	push	{r4, r5, lr}
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001d9c:	4302      	orrs	r2, r0

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001d9e:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001da0:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001da4:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
  
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001da6:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8001da8:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 8001daa:	d021      	beq.n	8001df0 <TIM_SlaveTimer_SetConfig+0x60>
 8001dac:	d802      	bhi.n	8001db4 <TIM_SlaveTimer_SetConfig+0x24>
 8001dae:	2840      	cmp	r0, #64	; 0x40
 8001db0:	d010      	beq.n	8001dd4 <TIM_SlaveTimer_SetConfig+0x44>
 8001db2:	bd30      	pop	{r4, r5, pc}
 8001db4:	2860      	cmp	r0, #96	; 0x60
 8001db6:	d02d      	beq.n	8001e14 <TIM_SlaveTimer_SetConfig+0x84>
 8001db8:	2870      	cmp	r0, #112	; 0x70
 8001dba:	d13d      	bne.n	8001e38 <TIM_SlaveTimer_SetConfig+0xa8>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001dbc:	68ca      	ldr	r2, [r1, #12]
 8001dbe:	688c      	ldr	r4, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8001dc0:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001dc2:	6909      	ldr	r1, [r1, #16]
 8001dc4:	4322      	orrs	r2, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dc6:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001dca:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001dce:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	bd30      	pop	{r4, r5, pc}
      tmpccer = htim->Instance->CCER;
 8001dd4:	6a18      	ldr	r0, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001dd6:	6a1a      	ldr	r2, [r3, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001dd8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001dda:	f022 0201 	bic.w	r2, r2, #1
 8001dde:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 8001de0:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001de2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001de6:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8001dea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;                               
 8001dec:	6218      	str	r0, [r3, #32]
    break;
 8001dee:	bd30      	pop	{r4, r5, pc}
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001df0:	6888      	ldr	r0, [r1, #8]
 8001df2:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8001df4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001df6:	6a1c      	ldr	r4, [r3, #32]
 8001df8:	f024 0401 	bic.w	r4, r4, #1
 8001dfc:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001dfe:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001e00:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001e04:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001e08:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001e0c:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8001e0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e10:	6219      	str	r1, [r3, #32]
 8001e12:	bd30      	pop	{r4, r5, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e14:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001e16:	688c      	ldr	r4, [r1, #8]
 8001e18:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e1a:	f020 0010 	bic.w	r0, r0, #16
 8001e1e:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e20:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001e22:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e24:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001e2c:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8001e30:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8001e34:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e36:	621a      	str	r2, [r3, #32]
 8001e38:	bd30      	pop	{r4, r5, pc}

08001e3a <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e3a:	6803      	ldr	r3, [r0, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	f042 0201 	orr.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]
}
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	4770      	bx	lr

08001e50 <HAL_TIM_OC_MspInit>:
 8001e50:	4770      	bx	lr

08001e52 <HAL_TIM_IC_MspInit>:
 8001e52:	4770      	bx	lr

08001e54 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001e54:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001e58:	2b01      	cmp	r3, #1
{
 8001e5a:	b570      	push	{r4, r5, r6, lr}
 8001e5c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001e60:	d01c      	beq.n	8001e9c <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e62:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 8001e66:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8001e6e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e70:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001e74:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001e78:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001e7a:	680a      	ldr	r2, [r1, #0]
 8001e7c:	2a40      	cmp	r2, #64	; 0x40
 8001e7e:	d079      	beq.n	8001f74 <HAL_TIM_ConfigClockSource+0x120>
 8001e80:	d819      	bhi.n	8001eb6 <HAL_TIM_ConfigClockSource+0x62>
 8001e82:	2a10      	cmp	r2, #16
 8001e84:	f000 8093 	beq.w	8001fae <HAL_TIM_ConfigClockSource+0x15a>
 8001e88:	d80a      	bhi.n	8001ea0 <HAL_TIM_ConfigClockSource+0x4c>
 8001e8a:	2a00      	cmp	r2, #0
 8001e8c:	f000 8089 	beq.w	8001fa2 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001e90:	2301      	movs	r3, #1
 8001e92:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001e96:	2300      	movs	r3, #0
 8001e98:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001e9c:	4618      	mov	r0, r3
}
 8001e9e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001ea0:	2a20      	cmp	r2, #32
 8001ea2:	f000 808a 	beq.w	8001fba <HAL_TIM_ConfigClockSource+0x166>
 8001ea6:	2a30      	cmp	r2, #48	; 0x30
 8001ea8:	d1f2      	bne.n	8001e90 <HAL_TIM_ConfigClockSource+0x3c>
   tmpsmcr = TIMx->SMCR;
 8001eaa:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001eac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001eb0:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 8001eb4:	e036      	b.n	8001f24 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001eb6:	2a70      	cmp	r2, #112	; 0x70
 8001eb8:	d036      	beq.n	8001f28 <HAL_TIM_ConfigClockSource+0xd4>
 8001eba:	d81b      	bhi.n	8001ef4 <HAL_TIM_ConfigClockSource+0xa0>
 8001ebc:	2a50      	cmp	r2, #80	; 0x50
 8001ebe:	d042      	beq.n	8001f46 <HAL_TIM_ConfigClockSource+0xf2>
 8001ec0:	2a60      	cmp	r2, #96	; 0x60
 8001ec2:	d1e5      	bne.n	8001e90 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ec4:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001ec6:	684d      	ldr	r5, [r1, #4]
 8001ec8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001eca:	f024 0410 	bic.w	r4, r4, #16
 8001ece:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ed0:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8001ed2:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001ed4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ed8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001edc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001ee0:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001ee4:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ee6:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001ee8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001eea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001eee:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001ef2:	e017      	b.n	8001f24 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 8001ef4:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001ef8:	d011      	beq.n	8001f1e <HAL_TIM_ConfigClockSource+0xca>
 8001efa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001efe:	d1c7      	bne.n	8001e90 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001f00:	688a      	ldr	r2, [r1, #8]
 8001f02:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001f04:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001f06:	68c9      	ldr	r1, [r1, #12]
 8001f08:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f0a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001f0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f12:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001f14:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f1c:	e002      	b.n	8001f24 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	e7b3      	b.n	8001e90 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001f28:	688a      	ldr	r2, [r1, #8]
 8001f2a:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001f2c:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001f2e:	68c9      	ldr	r1, [r1, #12]
 8001f30:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f32:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001f36:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f3a:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001f3c:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001f3e:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f40:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001f44:	e7ee      	b.n	8001f24 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001f46:	684c      	ldr	r4, [r1, #4]
 8001f48:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001f4a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f4c:	6a1d      	ldr	r5, [r3, #32]
 8001f4e:	f025 0501 	bic.w	r5, r5, #1
 8001f52:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001f54:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f56:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f5a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f5e:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001f62:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001f64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f66:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001f68:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f6a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001f6e:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001f72:	e7d7      	b.n	8001f24 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001f74:	684c      	ldr	r4, [r1, #4]
 8001f76:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001f78:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f7a:	6a1d      	ldr	r5, [r3, #32]
 8001f7c:	f025 0501 	bic.w	r5, r5, #1
 8001f80:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001f82:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f84:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f88:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f8c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001f90:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f94:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001f96:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001f98:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001f9c:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001fa0:	e7c0      	b.n	8001f24 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001fa2:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fa4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001fa8:	f042 0207 	orr.w	r2, r2, #7
 8001fac:	e7ba      	b.n	8001f24 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001fae:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fb0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001fb4:	f042 0217 	orr.w	r2, r2, #23
 8001fb8:	e7b4      	b.n	8001f24 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001fba:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001fbc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001fc0:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001fc4:	e7ae      	b.n	8001f24 <HAL_TIM_ConfigClockSource+0xd0>

08001fc6 <HAL_TIM_SlaveConfigSynchronization>:
{
 8001fc6:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001fc8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001fcc:	2b01      	cmp	r3, #1
{
 8001fce:	4604      	mov	r4, r0
 8001fd0:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001fd4:	d015      	beq.n	8002002 <HAL_TIM_SlaveConfigSynchronization+0x3c>
 8001fd6:	2501      	movs	r5, #1
 8001fd8:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001fdc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8001fe0:	f7ff fed6 	bl	8001d90 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001fe4:	6823      	ldr	r3, [r4, #0]
 8001fe6:	68da      	ldr	r2, [r3, #12]
 8001fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fec:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001fee:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);  
 8001ff0:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001ff2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ff6:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8001ff8:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);  
 8001ffc:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8002000:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8002002:	4618      	mov	r0, r3
} 
 8002004:	bd38      	pop	{r3, r4, r5, pc}

08002006 <HAL_TIM_OC_DelayElapsedCallback>:
 8002006:	4770      	bx	lr

08002008 <HAL_TIM_TriggerCallback>:
 8002008:	4770      	bx	lr

0800200a <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800200a:	6803      	ldr	r3, [r0, #0]
 800200c:	691a      	ldr	r2, [r3, #16]
 800200e:	0791      	lsls	r1, r2, #30
{
 8002010:	b510      	push	{r4, lr}
 8002012:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002014:	d50e      	bpl.n	8002034 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002016:	68da      	ldr	r2, [r3, #12]
 8002018:	0792      	lsls	r2, r2, #30
 800201a:	d50b      	bpl.n	8002034 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800201c:	f06f 0202 	mvn.w	r2, #2
 8002020:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002022:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002024:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002026:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002028:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800202a:	d077      	beq.n	800211c <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800202c:	f000 fd18 	bl	8002a60 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002030:	2300      	movs	r3, #0
 8002032:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	0750      	lsls	r0, r2, #29
 800203a:	d510      	bpl.n	800205e <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	0751      	lsls	r1, r2, #29
 8002040:	d50d      	bpl.n	800205e <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002042:	f06f 0204 	mvn.w	r2, #4
 8002046:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002048:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800204a:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800204c:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002050:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002052:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002054:	d068      	beq.n	8002128 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002056:	f000 fd03 	bl	8002a60 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205a:	2300      	movs	r3, #0
 800205c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800205e:	6823      	ldr	r3, [r4, #0]
 8002060:	691a      	ldr	r2, [r3, #16]
 8002062:	0712      	lsls	r2, r2, #28
 8002064:	d50f      	bpl.n	8002086 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002066:	68da      	ldr	r2, [r3, #12]
 8002068:	0710      	lsls	r0, r2, #28
 800206a:	d50c      	bpl.n	8002086 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800206c:	f06f 0208 	mvn.w	r2, #8
 8002070:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002072:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002074:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002076:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002078:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800207a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800207c:	d05a      	beq.n	8002134 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800207e:	f000 fcef 	bl	8002a60 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002082:	2300      	movs	r3, #0
 8002084:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002086:	6823      	ldr	r3, [r4, #0]
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	06d2      	lsls	r2, r2, #27
 800208c:	d510      	bpl.n	80020b0 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800208e:	68da      	ldr	r2, [r3, #12]
 8002090:	06d0      	lsls	r0, r2, #27
 8002092:	d50d      	bpl.n	80020b0 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002094:	f06f 0210 	mvn.w	r2, #16
 8002098:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800209a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800209c:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800209e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020a2:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80020a4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020a6:	d04b      	beq.n	8002140 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80020a8:	f000 fcda 	bl	8002a60 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ac:	2300      	movs	r3, #0
 80020ae:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020b0:	6823      	ldr	r3, [r4, #0]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	07d1      	lsls	r1, r2, #31
 80020b6:	d508      	bpl.n	80020ca <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80020b8:	68da      	ldr	r2, [r3, #12]
 80020ba:	07d2      	lsls	r2, r2, #31
 80020bc:	d505      	bpl.n	80020ca <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020be:	f06f 0201 	mvn.w	r2, #1
 80020c2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80020c4:	4620      	mov	r0, r4
 80020c6:	f000 fd75 	bl	8002bb4 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020ca:	6823      	ldr	r3, [r4, #0]
 80020cc:	691a      	ldr	r2, [r3, #16]
 80020ce:	0610      	lsls	r0, r2, #24
 80020d0:	d508      	bpl.n	80020e4 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	0611      	lsls	r1, r2, #24
 80020d6:	d505      	bpl.n	80020e4 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80020d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80020dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80020de:	4620      	mov	r0, r4
 80020e0:	f000 faef 	bl	80026c2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020e4:	6823      	ldr	r3, [r4, #0]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	0652      	lsls	r2, r2, #25
 80020ea:	d508      	bpl.n	80020fe <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	0650      	lsls	r0, r2, #25
 80020f0:	d505      	bpl.n	80020fe <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020f6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80020f8:	4620      	mov	r0, r4
 80020fa:	f7ff ff85 	bl	8002008 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	0691      	lsls	r1, r2, #26
 8002104:	d522      	bpl.n	800214c <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	0692      	lsls	r2, r2, #26
 800210a:	d51f      	bpl.n	800214c <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800210c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8002110:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002112:	611a      	str	r2, [r3, #16]
}
 8002114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002118:	f000 bad2 	b.w	80026c0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800211c:	f7ff ff73 	bl	8002006 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002120:	4620      	mov	r0, r4
 8002122:	f000 fcfb 	bl	8002b1c <HAL_TIM_PWM_PulseFinishedCallback>
 8002126:	e783      	b.n	8002030 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002128:	f7ff ff6d 	bl	8002006 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212c:	4620      	mov	r0, r4
 800212e:	f000 fcf5 	bl	8002b1c <HAL_TIM_PWM_PulseFinishedCallback>
 8002132:	e792      	b.n	800205a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002134:	f7ff ff67 	bl	8002006 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002138:	4620      	mov	r0, r4
 800213a:	f000 fcef 	bl	8002b1c <HAL_TIM_PWM_PulseFinishedCallback>
 800213e:	e7a0      	b.n	8002082 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002140:	f7ff ff61 	bl	8002006 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002144:	4620      	mov	r0, r4
 8002146:	f000 fce9 	bl	8002b1c <HAL_TIM_PWM_PulseFinishedCallback>
 800214a:	e7af      	b.n	80020ac <HAL_TIM_IRQHandler+0xa2>
 800214c:	bd10      	pop	{r4, pc}
	...

08002150 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002150:	4a2e      	ldr	r2, [pc, #184]	; (800220c <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8002152:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002154:	4290      	cmp	r0, r2
 8002156:	d012      	beq.n	800217e <TIM_Base_SetConfig+0x2e>
 8002158:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800215c:	d00f      	beq.n	800217e <TIM_Base_SetConfig+0x2e>
 800215e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002162:	4290      	cmp	r0, r2
 8002164:	d00b      	beq.n	800217e <TIM_Base_SetConfig+0x2e>
 8002166:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800216a:	4290      	cmp	r0, r2
 800216c:	d007      	beq.n	800217e <TIM_Base_SetConfig+0x2e>
 800216e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002172:	4290      	cmp	r0, r2
 8002174:	d003      	beq.n	800217e <TIM_Base_SetConfig+0x2e>
 8002176:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800217a:	4290      	cmp	r0, r2
 800217c:	d11d      	bne.n	80021ba <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800217e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002184:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002186:	4a21      	ldr	r2, [pc, #132]	; (800220c <TIM_Base_SetConfig+0xbc>)
 8002188:	4290      	cmp	r0, r2
 800218a:	d104      	bne.n	8002196 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800218c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800218e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002192:	4313      	orrs	r3, r2
 8002194:	e028      	b.n	80021e8 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002196:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800219a:	d0f7      	beq.n	800218c <TIM_Base_SetConfig+0x3c>
 800219c:	4a1c      	ldr	r2, [pc, #112]	; (8002210 <TIM_Base_SetConfig+0xc0>)
 800219e:	4290      	cmp	r0, r2
 80021a0:	d0f4      	beq.n	800218c <TIM_Base_SetConfig+0x3c>
 80021a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021a6:	4290      	cmp	r0, r2
 80021a8:	d0f0      	beq.n	800218c <TIM_Base_SetConfig+0x3c>
 80021aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021ae:	4290      	cmp	r0, r2
 80021b0:	d0ec      	beq.n	800218c <TIM_Base_SetConfig+0x3c>
 80021b2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80021b6:	4290      	cmp	r0, r2
 80021b8:	d0e8      	beq.n	800218c <TIM_Base_SetConfig+0x3c>
 80021ba:	4a16      	ldr	r2, [pc, #88]	; (8002214 <TIM_Base_SetConfig+0xc4>)
 80021bc:	4290      	cmp	r0, r2
 80021be:	d0e5      	beq.n	800218c <TIM_Base_SetConfig+0x3c>
 80021c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021c4:	4290      	cmp	r0, r2
 80021c6:	d0e1      	beq.n	800218c <TIM_Base_SetConfig+0x3c>
 80021c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021cc:	4290      	cmp	r0, r2
 80021ce:	d0dd      	beq.n	800218c <TIM_Base_SetConfig+0x3c>
 80021d0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80021d4:	4290      	cmp	r0, r2
 80021d6:	d0d9      	beq.n	800218c <TIM_Base_SetConfig+0x3c>
 80021d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021dc:	4290      	cmp	r0, r2
 80021de:	d0d5      	beq.n	800218c <TIM_Base_SetConfig+0x3c>
 80021e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021e4:	4290      	cmp	r0, r2
 80021e6:	d0d1      	beq.n	800218c <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 80021e8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021ea:	688b      	ldr	r3, [r1, #8]
 80021ec:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80021ee:	680b      	ldr	r3, [r1, #0]
 80021f0:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80021f2:	4b06      	ldr	r3, [pc, #24]	; (800220c <TIM_Base_SetConfig+0xbc>)
 80021f4:	4298      	cmp	r0, r3
 80021f6:	d006      	beq.n	8002206 <TIM_Base_SetConfig+0xb6>
 80021f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021fc:	4298      	cmp	r0, r3
 80021fe:	d002      	beq.n	8002206 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8002200:	2301      	movs	r3, #1
 8002202:	6143      	str	r3, [r0, #20]
}
 8002204:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002206:	690b      	ldr	r3, [r1, #16]
 8002208:	6303      	str	r3, [r0, #48]	; 0x30
 800220a:	e7f9      	b.n	8002200 <TIM_Base_SetConfig+0xb0>
 800220c:	40010000 	.word	0x40010000
 8002210:	40000400 	.word	0x40000400
 8002214:	40014000 	.word	0x40014000

08002218 <HAL_TIM_Base_Init>:
{ 
 8002218:	b510      	push	{r4, lr}
  if(htim == NULL)
 800221a:	4604      	mov	r4, r0
 800221c:	b1a0      	cbz	r0, 8002248 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800221e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002222:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002226:	b91b      	cbnz	r3, 8002230 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002228:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800222c:	f000 ffcc 	bl	80031c8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002230:	2302      	movs	r3, #2
 8002232:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002236:	6820      	ldr	r0, [r4, #0]
 8002238:	1d21      	adds	r1, r4, #4
 800223a:	f7ff ff89 	bl	8002150 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800223e:	2301      	movs	r3, #1
 8002240:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002244:	2000      	movs	r0, #0
 8002246:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002248:	2001      	movs	r0, #1
}
 800224a:	bd10      	pop	{r4, pc}

0800224c <HAL_TIM_OC_Init>:
{
 800224c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800224e:	4604      	mov	r4, r0
 8002250:	b1a0      	cbz	r0, 800227c <HAL_TIM_OC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002252:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002256:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800225a:	b91b      	cbnz	r3, 8002264 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800225c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_OC_MspInit(htim);
 8002260:	f7ff fdf6 	bl	8001e50 <HAL_TIM_OC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002264:	2302      	movs	r3, #2
 8002266:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance,  &htim->Init); 
 800226a:	6820      	ldr	r0, [r4, #0]
 800226c:	1d21      	adds	r1, r4, #4
 800226e:	f7ff ff6f 	bl	8002150 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002272:	2301      	movs	r3, #1
 8002274:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002278:	2000      	movs	r0, #0
 800227a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800227c:	2001      	movs	r0, #1
}
 800227e:	bd10      	pop	{r4, pc}

08002280 <HAL_TIM_IC_Init>:
{
 8002280:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002282:	4604      	mov	r4, r0
 8002284:	b1a0      	cbz	r0, 80022b0 <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002286:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800228a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800228e:	b91b      	cbnz	r3, 8002298 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002290:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
 8002294:	f7ff fddd 	bl	8001e52 <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;   
 8002298:	2302      	movs	r3, #2
 800229a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800229e:	6820      	ldr	r0, [r4, #0]
 80022a0:	1d21      	adds	r1, r4, #4
 80022a2:	f7ff ff55 	bl	8002150 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80022a6:	2301      	movs	r3, #1
 80022a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80022ac:	2000      	movs	r0, #0
 80022ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80022b0:	2001      	movs	r0, #1
}
 80022b2:	bd10      	pop	{r4, pc}

080022b4 <TIM_TI1_SetConfig>:
{
 80022b4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022b6:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80022b8:	4e1a      	ldr	r6, [pc, #104]	; (8002324 <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022ba:	f024 0401 	bic.w	r4, r4, #1
 80022be:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022c0:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 80022c2:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80022c4:	42b0      	cmp	r0, r6
 80022c6:	f024 0403 	bic.w	r4, r4, #3
 80022ca:	d01a      	beq.n	8002302 <TIM_TI1_SetConfig+0x4e>
 80022cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80022d0:	d017      	beq.n	8002302 <TIM_TI1_SetConfig+0x4e>
 80022d2:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 80022d6:	42b0      	cmp	r0, r6
 80022d8:	d013      	beq.n	8002302 <TIM_TI1_SetConfig+0x4e>
 80022da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80022de:	42b0      	cmp	r0, r6
 80022e0:	d00f      	beq.n	8002302 <TIM_TI1_SetConfig+0x4e>
 80022e2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80022e6:	42b0      	cmp	r0, r6
 80022e8:	d00b      	beq.n	8002302 <TIM_TI1_SetConfig+0x4e>
 80022ea:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80022ee:	42b0      	cmp	r0, r6
 80022f0:	d007      	beq.n	8002302 <TIM_TI1_SetConfig+0x4e>
 80022f2:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80022f6:	42b0      	cmp	r0, r6
 80022f8:	d003      	beq.n	8002302 <TIM_TI1_SetConfig+0x4e>
 80022fa:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80022fe:	42b0      	cmp	r0, r6
 8002300:	d10d      	bne.n	800231e <TIM_TI1_SetConfig+0x6a>
    tmpccmr1 |= TIM_ICSelection;
 8002302:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002304:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002306:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800230a:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800230c:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002310:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002314:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002316:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8002318:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800231a:	6201      	str	r1, [r0, #32]
}
 800231c:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800231e:	f044 0201 	orr.w	r2, r4, #1
 8002322:	e7ef      	b.n	8002304 <TIM_TI1_SetConfig+0x50>
 8002324:	40010000 	.word	0x40010000

08002328 <HAL_TIM_IC_ConfigChannel>:
{
 8002328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800232a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800232e:	2b01      	cmp	r3, #1
{
 8002330:	4604      	mov	r4, r0
 8002332:	460d      	mov	r5, r1
 8002334:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002338:	d019      	beq.n	800236e <HAL_TIM_IC_ConfigChannel+0x46>
 800233a:	2301      	movs	r3, #1
 800233c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002340:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
 8002344:	b9a2      	cbnz	r2, 8002370 <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8002346:	68cb      	ldr	r3, [r1, #12]
 8002348:	6820      	ldr	r0, [r4, #0]
 800234a:	c906      	ldmia	r1, {r1, r2}
 800234c:	f7ff ffb2 	bl	80022b4 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002350:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002352:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002354:	699a      	ldr	r2, [r3, #24]
 8002356:	f022 020c 	bic.w	r2, r2, #12
 800235a:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800235c:	699a      	ldr	r2, [r3, #24]
 800235e:	430a      	orrs	r2, r1
 8002360:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002362:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002364:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002366:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 800236a:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800236e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8002370:	2a04      	cmp	r2, #4
 8002372:	688e      	ldr	r6, [r1, #8]
 8002374:	6823      	ldr	r3, [r4, #0]
 8002376:	68e8      	ldr	r0, [r5, #12]
 8002378:	c982      	ldmia	r1, {r1, r7}
 800237a:	d11f      	bne.n	80023bc <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800237c:	6a1a      	ldr	r2, [r3, #32]
 800237e:	f022 0210 	bic.w	r2, r2, #16
 8002382:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002384:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8002386:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002388:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800238c:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002390:	0300      	lsls	r0, r0, #12
 8002392:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002394:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002398:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800239a:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800239c:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023a0:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80023a4:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 80023a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023a8:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80023aa:	699a      	ldr	r2, [r3, #24]
 80023ac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80023b0:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80023b2:	699a      	ldr	r2, [r3, #24]
 80023b4:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 80023b8:	619e      	str	r6, [r3, #24]
 80023ba:	e7d2      	b.n	8002362 <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 80023bc:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023be:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 80023c0:	d11c      	bne.n	80023fc <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80023c8:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 80023ca:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80023cc:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 80023d0:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80023d2:	0100      	lsls	r0, r0, #4
 80023d4:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80023d6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80023da:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80023dc:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80023de:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80023e2:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80023e6:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 80023e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80023ea:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80023ec:	69da      	ldr	r2, [r3, #28]
 80023ee:	f022 020c 	bic.w	r2, r2, #12
 80023f2:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80023f4:	69da      	ldr	r2, [r3, #28]
 80023f6:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80023f8:	61de      	str	r6, [r3, #28]
 80023fa:	e7b2      	b.n	8002362 <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80023fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002400:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002402:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8002404:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002406:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800240a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800240e:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002410:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002414:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002416:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002418:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800241a:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800241e:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002422:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8002424:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002426:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002428:	69da      	ldr	r2, [r3, #28]
 800242a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800242e:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002430:	69da      	ldr	r2, [r3, #28]
 8002432:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8002436:	e7df      	b.n	80023f8 <HAL_TIM_IC_ConfigChannel+0xd0>

08002438 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002438:	6a03      	ldr	r3, [r0, #32]
 800243a:	f023 0310 	bic.w	r3, r3, #16
 800243e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002440:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002442:	6842      	ldr	r2, [r0, #4]
{
 8002444:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8002446:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002448:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800244a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800244e:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002452:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002454:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002458:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800245c:	4c0d      	ldr	r4, [pc, #52]	; (8002494 <TIM_OC2_SetConfig+0x5c>)
 800245e:	42a0      	cmp	r0, r4
 8002460:	d009      	beq.n	8002476 <TIM_OC2_SetConfig+0x3e>
 8002462:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002466:	42a0      	cmp	r0, r4
 8002468:	d005      	beq.n	8002476 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 800246a:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 800246c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 800246e:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002470:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002472:	6203      	str	r3, [r0, #32]
}
 8002474:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002476:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002478:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 800247a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800247e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002482:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002484:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002488:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800248a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800248e:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 8002492:	e7ea      	b.n	800246a <TIM_OC2_SetConfig+0x32>
 8002494:	40010000 	.word	0x40010000

08002498 <HAL_TIM_OC_ConfigChannel>:
{
 8002498:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim); 
 800249a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800249e:	2b01      	cmp	r3, #1
{
 80024a0:	4604      	mov	r4, r0
 80024a2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim); 
 80024a6:	d018      	beq.n	80024da <HAL_TIM_OC_ConfigChannel+0x42>
 80024a8:	2301      	movs	r3, #1
 80024aa:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80024ae:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
 80024b2:	461d      	mov	r5, r3
  switch (Channel)
 80024b4:	2a0c      	cmp	r2, #12
 80024b6:	d80b      	bhi.n	80024d0 <HAL_TIM_OC_ConfigChannel+0x38>
 80024b8:	e8df f002 	tbb	[pc, r2]
 80024bc:	0a0a0a07 	.word	0x0a0a0a07
 80024c0:	0a0a0a10 	.word	0x0a0a0a10
 80024c4:	0a0a0a14 	.word	0x0a0a0a14
 80024c8:	18          	.byte	0x18
 80024c9:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024ca:	6820      	ldr	r0, [r4, #0]
 80024cc:	f7ff fbdc 	bl	8001c88 <TIM_OC1_SetConfig>
  __HAL_UNLOCK(htim); 
 80024d0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80024d2:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim); 
 80024d6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 80024da:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024dc:	6820      	ldr	r0, [r4, #0]
 80024de:	f7ff ffab 	bl	8002438 <TIM_OC2_SetConfig>
    break;
 80024e2:	e7f5      	b.n	80024d0 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024e4:	6820      	ldr	r0, [r4, #0]
 80024e6:	f7ff fbfb 	bl	8001ce0 <TIM_OC3_SetConfig>
    break;
 80024ea:	e7f1      	b.n	80024d0 <HAL_TIM_OC_ConfigChannel+0x38>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024ec:	6820      	ldr	r0, [r4, #0]
 80024ee:	f7ff fc27 	bl	8001d40 <TIM_OC4_SetConfig>
    break;
 80024f2:	e7ed      	b.n	80024d0 <HAL_TIM_OC_ConfigChannel+0x38>

080024f4 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 80024f4:	6a03      	ldr	r3, [r0, #32]
{
 80024f6:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 80024f8:	2401      	movs	r4, #1
 80024fa:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80024fc:	ea23 0304 	bic.w	r3, r3, r4
 8002500:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002502:	6a03      	ldr	r3, [r0, #32]
 8002504:	408a      	lsls	r2, r1
 8002506:	431a      	orrs	r2, r3
 8002508:	6202      	str	r2, [r0, #32]
 800250a:	bd10      	pop	{r4, pc}

0800250c <HAL_TIM_PWM_Start_IT>:
{
 800250c:	b510      	push	{r4, lr}
 800250e:	4604      	mov	r4, r0
  switch (Channel)
 8002510:	290c      	cmp	r1, #12
 8002512:	d80d      	bhi.n	8002530 <HAL_TIM_PWM_Start_IT+0x24>
 8002514:	e8df f001 	tbb	[pc, r1]
 8002518:	0c0c0c07 	.word	0x0c0c0c07
 800251c:	0c0c0c22 	.word	0x0c0c0c22
 8002520:	0c0c0c27 	.word	0x0c0c0c27
 8002524:	2c          	.byte	0x2c
 8002525:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002526:	6802      	ldr	r2, [r0, #0]
 8002528:	68d3      	ldr	r3, [r2, #12]
 800252a:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800252e:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002530:	2201      	movs	r2, #1
 8002532:	6820      	ldr	r0, [r4, #0]
 8002534:	f7ff ffde 	bl	80024f4 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002538:	6823      	ldr	r3, [r4, #0]
 800253a:	4a10      	ldr	r2, [pc, #64]	; (800257c <HAL_TIM_PWM_Start_IT+0x70>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d003      	beq.n	8002548 <HAL_TIM_PWM_Start_IT+0x3c>
 8002540:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002544:	4293      	cmp	r3, r2
 8002546:	d103      	bne.n	8002550 <HAL_TIM_PWM_Start_IT+0x44>
    __HAL_TIM_MOE_ENABLE(htim);
 8002548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800254a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800254e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]
} 
 8002558:	2000      	movs	r0, #0
 800255a:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800255c:	6802      	ldr	r2, [r0, #0]
 800255e:	68d3      	ldr	r3, [r2, #12]
 8002560:	f043 0304 	orr.w	r3, r3, #4
 8002564:	e7e3      	b.n	800252e <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002566:	6802      	ldr	r2, [r0, #0]
 8002568:	68d3      	ldr	r3, [r2, #12]
 800256a:	f043 0308 	orr.w	r3, r3, #8
 800256e:	e7de      	b.n	800252e <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002570:	6802      	ldr	r2, [r0, #0]
 8002572:	68d3      	ldr	r3, [r2, #12]
 8002574:	f043 0310 	orr.w	r3, r3, #16
 8002578:	e7d9      	b.n	800252e <HAL_TIM_PWM_Start_IT+0x22>
 800257a:	bf00      	nop
 800257c:	40010000 	.word	0x40010000

08002580 <HAL_TIM_OC_Start_IT>:
 8002580:	f7ff bfc4 	b.w	800250c <HAL_TIM_PWM_Start_IT>

08002584 <HAL_TIM_PWM_Stop_IT>:
{
 8002584:	b510      	push	{r4, lr}
 8002586:	4604      	mov	r4, r0
  switch (Channel)
 8002588:	290c      	cmp	r1, #12
 800258a:	d80d      	bhi.n	80025a8 <HAL_TIM_PWM_Stop_IT+0x24>
 800258c:	e8df f001 	tbb	[pc, r1]
 8002590:	0c0c0c07 	.word	0x0c0c0c07
 8002594:	0c0c0c36 	.word	0x0c0c0c36
 8002598:	0c0c0c3b 	.word	0x0c0c0c3b
 800259c:	40          	.byte	0x40
 800259d:	00          	.byte	0x00
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800259e:	6802      	ldr	r2, [r0, #0]
 80025a0:	68d3      	ldr	r3, [r2, #12]
 80025a2:	f023 0302 	bic.w	r3, r3, #2
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80025a6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80025a8:	2200      	movs	r2, #0
 80025aa:	6820      	ldr	r0, [r4, #0]
 80025ac:	f7ff ffa2 	bl	80024f4 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80025b0:	6823      	ldr	r3, [r4, #0]
 80025b2:	4a1a      	ldr	r2, [pc, #104]	; (800261c <HAL_TIM_PWM_Stop_IT+0x98>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d003      	beq.n	80025c0 <HAL_TIM_PWM_Stop_IT+0x3c>
 80025b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80025bc:	4293      	cmp	r3, r2
 80025be:	d10d      	bne.n	80025dc <HAL_TIM_PWM_Stop_IT+0x58>
    __HAL_TIM_MOE_DISABLE(htim);
 80025c0:	6a19      	ldr	r1, [r3, #32]
 80025c2:	f241 1211 	movw	r2, #4369	; 0x1111
 80025c6:	4211      	tst	r1, r2
 80025c8:	d108      	bne.n	80025dc <HAL_TIM_PWM_Stop_IT+0x58>
 80025ca:	6a19      	ldr	r1, [r3, #32]
 80025cc:	f240 4244 	movw	r2, #1092	; 0x444
 80025d0:	4211      	tst	r1, r2
 80025d2:	bf02      	ittt	eq
 80025d4:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80025d6:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 80025da:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80025dc:	6a19      	ldr	r1, [r3, #32]
 80025de:	f241 1211 	movw	r2, #4369	; 0x1111
 80025e2:	4211      	tst	r1, r2
 80025e4:	d108      	bne.n	80025f8 <HAL_TIM_PWM_Stop_IT+0x74>
 80025e6:	6a19      	ldr	r1, [r3, #32]
 80025e8:	f240 4244 	movw	r2, #1092	; 0x444
 80025ec:	4211      	tst	r1, r2
 80025ee:	d103      	bne.n	80025f8 <HAL_TIM_PWM_Stop_IT+0x74>
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	f022 0201 	bic.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
} 
 80025f8:	2000      	movs	r0, #0
 80025fa:	bd10      	pop	{r4, pc}
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80025fc:	6802      	ldr	r2, [r0, #0]
 80025fe:	68d3      	ldr	r3, [r2, #12]
 8002600:	f023 0304 	bic.w	r3, r3, #4
 8002604:	e7cf      	b.n	80025a6 <HAL_TIM_PWM_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002606:	6802      	ldr	r2, [r0, #0]
 8002608:	68d3      	ldr	r3, [r2, #12]
 800260a:	f023 0308 	bic.w	r3, r3, #8
 800260e:	e7ca      	b.n	80025a6 <HAL_TIM_PWM_Stop_IT+0x22>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002610:	6802      	ldr	r2, [r0, #0]
 8002612:	68d3      	ldr	r3, [r2, #12]
 8002614:	f023 0310 	bic.w	r3, r3, #16
 8002618:	e7c5      	b.n	80025a6 <HAL_TIM_PWM_Stop_IT+0x22>
 800261a:	bf00      	nop
 800261c:	40010000 	.word	0x40010000

08002620 <HAL_TIM_OC_Stop_IT>:
 8002620:	f7ff bfb0 	b.w	8002584 <HAL_TIM_PWM_Stop_IT>

08002624 <HAL_TIM_IC_Start_IT>:
{
 8002624:	b510      	push	{r4, lr}
 8002626:	4604      	mov	r4, r0
  switch (Channel)
 8002628:	290c      	cmp	r1, #12
 800262a:	d80d      	bhi.n	8002648 <HAL_TIM_IC_Start_IT+0x24>
 800262c:	e8df f001 	tbb	[pc, r1]
 8002630:	0c0c0c07 	.word	0x0c0c0c07
 8002634:	0c0c0c17 	.word	0x0c0c0c17
 8002638:	0c0c0c1c 	.word	0x0c0c0c1c
 800263c:	21          	.byte	0x21
 800263d:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800263e:	6802      	ldr	r2, [r0, #0]
 8002640:	68d3      	ldr	r3, [r2, #12]
 8002642:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002646:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002648:	6820      	ldr	r0, [r4, #0]
 800264a:	2201      	movs	r2, #1
 800264c:	f7ff ff52 	bl	80024f4 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 8002650:	6822      	ldr	r2, [r4, #0]
 8002652:	6813      	ldr	r3, [r2, #0]
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6013      	str	r3, [r2, #0]
} 
 800265a:	2000      	movs	r0, #0
 800265c:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800265e:	6802      	ldr	r2, [r0, #0]
 8002660:	68d3      	ldr	r3, [r2, #12]
 8002662:	f043 0304 	orr.w	r3, r3, #4
 8002666:	e7ee      	b.n	8002646 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002668:	6802      	ldr	r2, [r0, #0]
 800266a:	68d3      	ldr	r3, [r2, #12]
 800266c:	f043 0308 	orr.w	r3, r3, #8
 8002670:	e7e9      	b.n	8002646 <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002672:	6802      	ldr	r2, [r0, #0]
 8002674:	68d3      	ldr	r3, [r2, #12]
 8002676:	f043 0310 	orr.w	r3, r3, #16
 800267a:	e7e4      	b.n	8002646 <HAL_TIM_IC_Start_IT+0x22>

0800267c <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 800267c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002680:	2b01      	cmp	r3, #1
{
 8002682:	b510      	push	{r4, lr}
 8002684:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002688:	d018      	beq.n	80026bc <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 800268a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800268e:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8002690:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002692:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8002694:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8002696:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800269a:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	4322      	orrs	r2, r4
 80026a0:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026a8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 80026b6:	2300      	movs	r3, #0
 80026b8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 80026bc:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 80026be:	bd10      	pop	{r4, pc}

080026c0 <HAL_TIMEx_CommutationCallback>:
 80026c0:	4770      	bx	lr

080026c2 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026c2:	4770      	bx	lr

080026c4 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80026c8:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80026ca:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 80026cc:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026ce:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80026d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80026d4:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 80026d6:	6133      	str	r3, [r6, #16]
{
 80026d8:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026da:	6883      	ldr	r3, [r0, #8]
 80026dc:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 80026de:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026e0:	4303      	orrs	r3, r0
 80026e2:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80026e4:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026e8:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 80026ea:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026ee:	430b      	orrs	r3, r1
 80026f0:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80026f2:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 80026f4:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80026f6:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80026f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 80026fc:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026fe:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8002702:	6173      	str	r3, [r6, #20]
 8002704:	4b7a      	ldr	r3, [pc, #488]	; (80028f0 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002706:	d17c      	bne.n	8002802 <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002708:	429e      	cmp	r6, r3
 800270a:	d003      	beq.n	8002714 <UART_SetConfig+0x50>
 800270c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002710:	429e      	cmp	r6, r3
 8002712:	d144      	bne.n	800279e <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002714:	f7ff faa8 	bl	8001c68 <HAL_RCC_GetPCLK2Freq>
 8002718:	2519      	movs	r5, #25
 800271a:	fb05 f300 	mul.w	r3, r5, r0
 800271e:	6860      	ldr	r0, [r4, #4]
 8002720:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002724:	0040      	lsls	r0, r0, #1
 8002726:	fbb3 f3f0 	udiv	r3, r3, r0
 800272a:	fbb3 f3f9 	udiv	r3, r3, r9
 800272e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002732:	f7ff fa99 	bl	8001c68 <HAL_RCC_GetPCLK2Freq>
 8002736:	6863      	ldr	r3, [r4, #4]
 8002738:	4368      	muls	r0, r5
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	fbb0 f7f3 	udiv	r7, r0, r3
 8002740:	f7ff fa92 	bl	8001c68 <HAL_RCC_GetPCLK2Freq>
 8002744:	6863      	ldr	r3, [r4, #4]
 8002746:	4368      	muls	r0, r5
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	fbb0 f3f3 	udiv	r3, r0, r3
 800274e:	fbb3 f3f9 	udiv	r3, r3, r9
 8002752:	fb09 7313 	mls	r3, r9, r3, r7
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	3332      	adds	r3, #50	; 0x32
 800275a:	fbb3 f3f9 	udiv	r3, r3, r9
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 8002764:	f7ff fa80 	bl	8001c68 <HAL_RCC_GetPCLK2Freq>
 8002768:	6862      	ldr	r2, [r4, #4]
 800276a:	4368      	muls	r0, r5
 800276c:	0052      	lsls	r2, r2, #1
 800276e:	fbb0 faf2 	udiv	sl, r0, r2
 8002772:	f7ff fa79 	bl	8001c68 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002776:	6863      	ldr	r3, [r4, #4]
 8002778:	4368      	muls	r0, r5
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002780:	fbb3 f3f9 	udiv	r3, r3, r9
 8002784:	fb09 a313 	mls	r3, r9, r3, sl
 8002788:	00db      	lsls	r3, r3, #3
 800278a:	3332      	adds	r3, #50	; 0x32
 800278c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002796:	443b      	add	r3, r7
 8002798:	60b3      	str	r3, [r6, #8]
 800279a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800279e:	f7ff fa53 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 80027a2:	2519      	movs	r5, #25
 80027a4:	fb05 f300 	mul.w	r3, r5, r0
 80027a8:	6860      	ldr	r0, [r4, #4]
 80027aa:	f04f 0964 	mov.w	r9, #100	; 0x64
 80027ae:	0040      	lsls	r0, r0, #1
 80027b0:	fbb3 f3f0 	udiv	r3, r3, r0
 80027b4:	fbb3 f3f9 	udiv	r3, r3, r9
 80027b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80027bc:	f7ff fa44 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 80027c0:	6863      	ldr	r3, [r4, #4]
 80027c2:	4368      	muls	r0, r5
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	fbb0 f7f3 	udiv	r7, r0, r3
 80027ca:	f7ff fa3d 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 80027ce:	6863      	ldr	r3, [r4, #4]
 80027d0:	4368      	muls	r0, r5
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d8:	fbb3 f3f9 	udiv	r3, r3, r9
 80027dc:	fb09 7313 	mls	r3, r9, r3, r7
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	3332      	adds	r3, #50	; 0x32
 80027e4:	fbb3 f3f9 	udiv	r3, r3, r9
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80027ee:	f7ff fa2b 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 80027f2:	6862      	ldr	r2, [r4, #4]
 80027f4:	4368      	muls	r0, r5
 80027f6:	0052      	lsls	r2, r2, #1
 80027f8:	fbb0 faf2 	udiv	sl, r0, r2
 80027fc:	f7ff fa24 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 8002800:	e7b9      	b.n	8002776 <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002802:	429e      	cmp	r6, r3
 8002804:	d002      	beq.n	800280c <UART_SetConfig+0x148>
 8002806:	4b3b      	ldr	r3, [pc, #236]	; (80028f4 <UART_SetConfig+0x230>)
 8002808:	429e      	cmp	r6, r3
 800280a:	d140      	bne.n	800288e <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800280c:	f7ff fa2c 	bl	8001c68 <HAL_RCC_GetPCLK2Freq>
 8002810:	6867      	ldr	r7, [r4, #4]
 8002812:	2519      	movs	r5, #25
 8002814:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002818:	fb05 f300 	mul.w	r3, r5, r0
 800281c:	00bf      	lsls	r7, r7, #2
 800281e:	fbb3 f3f7 	udiv	r3, r3, r7
 8002822:	fbb3 f3f9 	udiv	r3, r3, r9
 8002826:	011f      	lsls	r7, r3, #4
 8002828:	f7ff fa1e 	bl	8001c68 <HAL_RCC_GetPCLK2Freq>
 800282c:	6863      	ldr	r3, [r4, #4]
 800282e:	4368      	muls	r0, r5
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	fbb0 f8f3 	udiv	r8, r0, r3
 8002836:	f7ff fa17 	bl	8001c68 <HAL_RCC_GetPCLK2Freq>
 800283a:	6863      	ldr	r3, [r4, #4]
 800283c:	4368      	muls	r0, r5
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	fbb0 f3f3 	udiv	r3, r0, r3
 8002844:	fbb3 f3f9 	udiv	r3, r3, r9
 8002848:	fb09 8313 	mls	r3, r9, r3, r8
 800284c:	011b      	lsls	r3, r3, #4
 800284e:	3332      	adds	r3, #50	; 0x32
 8002850:	fbb3 f3f9 	udiv	r3, r3, r9
 8002854:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002858:	f7ff fa06 	bl	8001c68 <HAL_RCC_GetPCLK2Freq>
 800285c:	6862      	ldr	r2, [r4, #4]
 800285e:	4368      	muls	r0, r5
 8002860:	0092      	lsls	r2, r2, #2
 8002862:	fbb0 faf2 	udiv	sl, r0, r2
 8002866:	f7ff f9ff 	bl	8001c68 <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800286a:	6863      	ldr	r3, [r4, #4]
 800286c:	4368      	muls	r0, r5
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	fbb0 f3f3 	udiv	r3, r0, r3
 8002874:	fbb3 f3f9 	udiv	r3, r3, r9
 8002878:	fb09 a313 	mls	r3, r9, r3, sl
 800287c:	011b      	lsls	r3, r3, #4
 800287e:	3332      	adds	r3, #50	; 0x32
 8002880:	fbb3 f3f9 	udiv	r3, r3, r9
 8002884:	f003 030f 	and.w	r3, r3, #15
 8002888:	ea43 0308 	orr.w	r3, r3, r8
 800288c:	e783      	b.n	8002796 <UART_SetConfig+0xd2>
 800288e:	f7ff f9db 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 8002892:	6867      	ldr	r7, [r4, #4]
 8002894:	2519      	movs	r5, #25
 8002896:	f04f 0964 	mov.w	r9, #100	; 0x64
 800289a:	fb05 f300 	mul.w	r3, r5, r0
 800289e:	00bf      	lsls	r7, r7, #2
 80028a0:	fbb3 f3f7 	udiv	r3, r3, r7
 80028a4:	fbb3 f3f9 	udiv	r3, r3, r9
 80028a8:	011f      	lsls	r7, r3, #4
 80028aa:	f7ff f9cd 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 80028ae:	6863      	ldr	r3, [r4, #4]
 80028b0:	4368      	muls	r0, r5
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	fbb0 f8f3 	udiv	r8, r0, r3
 80028b8:	f7ff f9c6 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 80028bc:	6863      	ldr	r3, [r4, #4]
 80028be:	4368      	muls	r0, r5
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c6:	fbb3 f3f9 	udiv	r3, r3, r9
 80028ca:	fb09 8313 	mls	r3, r9, r3, r8
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	3332      	adds	r3, #50	; 0x32
 80028d2:	fbb3 f3f9 	udiv	r3, r3, r9
 80028d6:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80028da:	f7ff f9b5 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 80028de:	6862      	ldr	r2, [r4, #4]
 80028e0:	4368      	muls	r0, r5
 80028e2:	0092      	lsls	r2, r2, #2
 80028e4:	fbb0 faf2 	udiv	sl, r0, r2
 80028e8:	f7ff f9ae 	bl	8001c48 <HAL_RCC_GetPCLK1Freq>
 80028ec:	e7bd      	b.n	800286a <UART_SetConfig+0x1a6>
 80028ee:	bf00      	nop
 80028f0:	40011000 	.word	0x40011000
 80028f4:	40011400 	.word	0x40011400

080028f8 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80028f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fa:	4604      	mov	r4, r0
 80028fc:	460e      	mov	r6, r1
 80028fe:	4617      	mov	r7, r2
 8002900:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8002902:	6821      	ldr	r1, [r4, #0]
 8002904:	680b      	ldr	r3, [r1, #0]
 8002906:	ea36 0303 	bics.w	r3, r6, r3
 800290a:	d101      	bne.n	8002910 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 800290c:	2000      	movs	r0, #0
}
 800290e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002910:	1c6b      	adds	r3, r5, #1
 8002912:	d0f7      	beq.n	8002904 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002914:	b995      	cbnz	r5, 800293c <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002916:	6823      	ldr	r3, [r4, #0]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800291e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	f022 0201 	bic.w	r2, r2, #1
 8002926:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002928:	2320      	movs	r3, #32
 800292a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800292e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 8002932:	2300      	movs	r3, #0
 8002934:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002938:	2003      	movs	r0, #3
 800293a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800293c:	f7fe fde6 	bl	800150c <HAL_GetTick>
 8002940:	1bc0      	subs	r0, r0, r7
 8002942:	4285      	cmp	r5, r0
 8002944:	d2dd      	bcs.n	8002902 <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 8002946:	e7e6      	b.n	8002916 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002948 <HAL_UART_Init>:
{
 8002948:	b510      	push	{r4, lr}
  if(huart == NULL)
 800294a:	4604      	mov	r4, r0
 800294c:	b340      	cbz	r0, 80029a0 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 800294e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002952:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002956:	b91b      	cbnz	r3, 8002960 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002958:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800295c:	f000 fc86 	bl	800326c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002960:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002962:	2324      	movs	r3, #36	; 0x24
 8002964:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002968:	68d3      	ldr	r3, [r2, #12]
 800296a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800296e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002970:	4620      	mov	r0, r4
 8002972:	f7ff fea7 	bl	80026c4 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002976:	6823      	ldr	r3, [r4, #0]
 8002978:	691a      	ldr	r2, [r3, #16]
 800297a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800297e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002986:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002988:	68da      	ldr	r2, [r3, #12]
 800298a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800298e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002990:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002992:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002994:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002996:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800299a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800299e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80029a0:	2001      	movs	r0, #1
}
 80029a2:	bd10      	pop	{r4, pc}

080029a4 <HAL_UART_Transmit>:
{
 80029a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029a8:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 80029aa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80029ae:	2b20      	cmp	r3, #32
{
 80029b0:	4604      	mov	r4, r0
 80029b2:	460d      	mov	r5, r1
 80029b4:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 80029b6:	d14f      	bne.n	8002a58 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 80029b8:	2900      	cmp	r1, #0
 80029ba:	d04a      	beq.n	8002a52 <HAL_UART_Transmit+0xae>
 80029bc:	2a00      	cmp	r2, #0
 80029be:	d048      	beq.n	8002a52 <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80029c0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d047      	beq.n	8002a58 <HAL_UART_Transmit+0xb4>
 80029c8:	2301      	movs	r3, #1
 80029ca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ce:	2300      	movs	r3, #0
 80029d0:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029d2:	2321      	movs	r3, #33	; 0x21
 80029d4:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80029d8:	f7fe fd98 	bl	800150c <HAL_GetTick>
    huart->TxXferSize = Size;
 80029dc:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80029e0:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80029e2:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80029e6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	b96b      	cbnz	r3, 8002a08 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029ec:	463b      	mov	r3, r7
 80029ee:	4632      	mov	r2, r6
 80029f0:	2140      	movs	r1, #64	; 0x40
 80029f2:	4620      	mov	r0, r4
 80029f4:	f7ff ff80 	bl	80028f8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80029f8:	b9b0      	cbnz	r0, 8002a28 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 80029fa:	2320      	movs	r3, #32
 80029fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 8002a00:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8002a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8002a08:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a10:	68a3      	ldr	r3, [r4, #8]
 8002a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a16:	4632      	mov	r2, r6
 8002a18:	463b      	mov	r3, r7
 8002a1a:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002a1e:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002a20:	d10e      	bne.n	8002a40 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a22:	f7ff ff69 	bl	80028f8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002a26:	b110      	cbz	r0, 8002a2e <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002a28:	2003      	movs	r0, #3
 8002a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002a2e:	882b      	ldrh	r3, [r5, #0]
 8002a30:	6822      	ldr	r2, [r4, #0]
 8002a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a36:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002a38:	6923      	ldr	r3, [r4, #16]
 8002a3a:	b943      	cbnz	r3, 8002a4e <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8002a3c:	3502      	adds	r5, #2
 8002a3e:	e7d2      	b.n	80029e6 <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a40:	f7ff ff5a 	bl	80028f8 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8002a44:	2800      	cmp	r0, #0
 8002a46:	d1ef      	bne.n	8002a28 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	782a      	ldrb	r2, [r5, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	3501      	adds	r5, #1
 8002a50:	e7c9      	b.n	80029e6 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8002a52:	2001      	movs	r0, #1
 8002a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002a58:	2002      	movs	r0, #2
}
 8002a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002a60 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a70:	d149      	bne.n	8002b06 <HAL_TIM_IC_CaptureCallback+0xa6>
		htim2.Instance->CNT = 0;
 8002a72:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <HAL_TIM_IC_CaptureCallback+0xb0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2200      	movs	r2, #0
 8002a78:	625a      	str	r2, [r3, #36]	; 0x24
		clock.slaveTimer->Instance->CNT = 0;
 8002a7a:	4b26      	ldr	r3, [pc, #152]	; (8002b14 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2200      	movs	r2, #0
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24

		if(clock.clockSource==INTERNAL){

		}

		if(clock.addPeriodSample(clock.masterTimer->Instance->CCR1)){
 8002a84:	4b23      	ldr	r3, [pc, #140]	; (8002b14 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4821      	ldr	r0, [pc, #132]	; (8002b14 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002a90:	f000 fcab 	bl	80033ea <_ZN5Clock15addPeriodSampleEj>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bf14      	ite	ne
 8002a9a:	2301      	movne	r3, #1
 8002a9c:	2300      	moveq	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_TIM_IC_CaptureCallback+0x4c>
			clock.lock();
 8002aa4:	481b      	ldr	r0, [pc, #108]	; (8002b14 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002aa6:	f000 fddd 	bl	8003664 <_ZN5Clock4lockEv>
 8002aaa:	e002      	b.n	8002ab2 <HAL_TIM_IC_CaptureCallback+0x52>
		}
		else{
			clock.unlock();
 8002aac:	4819      	ldr	r0, [pc, #100]	; (8002b14 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002aae:	f000 fdf0 	bl	8003692 <_ZN5Clock6unlockEv>
		}

		if(clock.isLocked()){
 8002ab2:	4818      	ldr	r0, [pc, #96]	; (8002b14 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002ab4:	f000 fdfa 	bl	80036ac <_ZN5Clock8isLockedEv>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d01c      	beq.n	8002af8 <HAL_TIM_IC_CaptureCallback+0x98>
			clock.masterTick();
 8002abe:	4815      	ldr	r0, [pc, #84]	; (8002b14 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002ac0:	f000 fd92 	bl	80035e8 <_ZN5Clock10masterTickEv>
			clock.setPeriod(clock.averagedPeriod);
 8002ac4:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4812      	ldr	r0, [pc, #72]	; (8002b14 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002acc:	f000 fdfa 	bl	80036c4 <_ZN5Clock9setPeriodEj>
			clock.setSlaveDivision(8);
 8002ad0:	2108      	movs	r1, #8
 8002ad2:	4810      	ldr	r0, [pc, #64]	; (8002b14 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002ad4:	f000 fe4b 	bl	800376e <_ZN5Clock16setSlaveDivisionEj>
			HAL_GPIO_WritePin(OUT1_GPIO_Port,OUT1_Pin,GPIO_PIN_SET);
 8002ad8:	2201      	movs	r2, #1
 8002ada:	2101      	movs	r1, #1
 8002adc:	480e      	ldr	r0, [pc, #56]	; (8002b18 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002ade:	f7fe fe63 	bl	80017a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT2_GPIO_Port,OUT2_Pin,GPIO_PIN_SET);
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	2102      	movs	r1, #2
 8002ae6:	480c      	ldr	r0, [pc, #48]	; (8002b18 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002ae8:	f7fe fe5e 	bl	80017a8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(OUT3_GPIO_Port,OUT3_Pin,GPIO_PIN_SET);
 8002aec:	2201      	movs	r2, #1
 8002aee:	2104      	movs	r1, #4
 8002af0:	4809      	ldr	r0, [pc, #36]	; (8002b18 <HAL_TIM_IC_CaptureCallback+0xb8>)
 8002af2:	f7fe fe59 	bl	80017a8 <HAL_GPIO_WritePin>
			clock.setSlaveDivision(8);
		}

		}

}
 8002af6:	e006      	b.n	8002b06 <HAL_TIM_IC_CaptureCallback+0xa6>
			clock.masterTick();
 8002af8:	4806      	ldr	r0, [pc, #24]	; (8002b14 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002afa:	f000 fd75 	bl	80035e8 <_ZN5Clock10masterTickEv>
			clock.setSlaveDivision(8);
 8002afe:	2108      	movs	r1, #8
 8002b00:	4804      	ldr	r0, [pc, #16]	; (8002b14 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002b02:	f000 fe34 	bl	800376e <_ZN5Clock16setSlaveDivisionEj>
}
 8002b06:	bf00      	nop
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	20000090 	.word	0x20000090
 8002b14:	20000148 	.word	0x20000148
 8002b18:	40020400 	.word	0x40020400

08002b1c <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM2){
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2c:	d121      	bne.n	8002b72 <HAL_TIM_PWM_PulseFinishedCallback+0x56>
		htim2.Instance->CNT = 0;
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2200      	movs	r2, #0
 8002b34:	625a      	str	r2, [r3, #36]	; 0x24
		clock.slaveTimer->Instance->CNT = 0;
 8002b36:	4b1c      	ldr	r3, [pc, #112]	; (8002ba8 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	625a      	str	r2, [r3, #36]	; 0x24

		if(clock.clockSource==INTERNAL){
 8002b40:	4b19      	ldr	r3, [pc, #100]	; (8002ba8 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8002b42:	7a1b      	ldrb	r3, [r3, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d108      	bne.n	8002b5a <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
			clock.masterTick();
 8002b48:	4817      	ldr	r0, [pc, #92]	; (8002ba8 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8002b4a:	f000 fd4d 	bl	80035e8 <_ZN5Clock10masterTickEv>
			HAL_GPIO_WritePin(OUT1_GPIO_Port,OUT1_Pin,GPIO_PIN_SET);
 8002b4e:	2201      	movs	r2, #1
 8002b50:	2101      	movs	r1, #1
 8002b52:	4816      	ldr	r0, [pc, #88]	; (8002bac <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8002b54:	f7fe fe28 	bl	80017a8 <HAL_GPIO_WritePin>
 8002b58:	e00b      	b.n	8002b72 <HAL_TIM_PWM_PulseFinishedCallback+0x56>

		}
		else if(clock.clockSource==EXTERNAL){
 8002b5a:	4b13      	ldr	r3, [pc, #76]	; (8002ba8 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8002b5c:	7a1b      	ldrb	r3, [r3, #8]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d107      	bne.n	8002b72 <HAL_TIM_PWM_PulseFinishedCallback+0x56>
			clock.masterTick();
 8002b62:	4811      	ldr	r0, [pc, #68]	; (8002ba8 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8002b64:	f000 fd40 	bl	80035e8 <_ZN5Clock10masterTickEv>
			HAL_GPIO_WritePin(OUT1_GPIO_Port,OUT1_Pin,GPIO_PIN_SET);
 8002b68:	2201      	movs	r2, #1
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	480f      	ldr	r0, [pc, #60]	; (8002bac <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8002b6e:	f7fe fe1b 	bl	80017a8 <HAL_GPIO_WritePin>
		}
	}

	if(htim->Instance==TIM5){
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a0e      	ldr	r2, [pc, #56]	; (8002bb0 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d10e      	bne.n	8002b9a <HAL_TIM_PWM_PulseFinishedCallback+0x7e>
		HAL_GPIO_WritePin(OUT1_GPIO_Port,OUT1_Pin,GPIO_PIN_RESET);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	2101      	movs	r1, #1
 8002b80:	480a      	ldr	r0, [pc, #40]	; (8002bac <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8002b82:	f7fe fe11 	bl	80017a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT2_GPIO_Port,OUT2_Pin,GPIO_PIN_RESET);
 8002b86:	2200      	movs	r2, #0
 8002b88:	2102      	movs	r1, #2
 8002b8a:	4808      	ldr	r0, [pc, #32]	; (8002bac <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8002b8c:	f7fe fe0c 	bl	80017a8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(OUT3_GPIO_Port,OUT3_Pin,GPIO_PIN_RESET);
 8002b90:	2200      	movs	r2, #0
 8002b92:	2104      	movs	r1, #4
 8002b94:	4805      	ldr	r0, [pc, #20]	; (8002bac <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8002b96:	f7fe fe07 	bl	80017a8 <HAL_GPIO_WritePin>
	}

}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	20000090 	.word	0x20000090
 8002ba8:	20000148 	.word	0x20000148
 8002bac:	40020400 	.word	0x40020400
 8002bb0:	40000c00 	.word	0x40000c00

08002bb4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM5){
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d11e      	bne.n	8002c04 <HAL_TIM_PeriodElapsedCallback+0x50>

		if(clock.isLocked()){
 8002bc6:	4812      	ldr	r0, [pc, #72]	; (8002c10 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002bc8:	f000 fd70 	bl	80036ac <_ZN5Clock8isLockedEv>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d018      	beq.n	8002c04 <HAL_TIM_PeriodElapsedCallback+0x50>
			clock.subTick();
 8002bd2:	480f      	ldr	r0, [pc, #60]	; (8002c10 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002bd4:	f000 fd1a 	bl	800360c <_ZN5Clock7subTickEv>
			if(!(clock.sub%2)){HAL_GPIO_WritePin(OUT2_GPIO_Port,OUT2_Pin,GPIO_PIN_SET);}
 8002bd8:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d104      	bne.n	8002bee <HAL_TIM_PeriodElapsedCallback+0x3a>
 8002be4:	2201      	movs	r2, #1
 8002be6:	2102      	movs	r1, #2
 8002be8:	480a      	ldr	r0, [pc, #40]	; (8002c14 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002bea:	f7fe fddd 	bl	80017a8 <HAL_GPIO_WritePin>
			// else{HAL_GPIO_WritePin(OUT2_GPIO_Port,OUT2_Pin, GPIO_PIN_RESET);}
			if(!(clock.sub%4)){HAL_GPIO_WritePin(OUT3_GPIO_Port,OUT3_Pin, GPIO_PIN_SET);}
 8002bee:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d104      	bne.n	8002c04 <HAL_TIM_PeriodElapsedCallback+0x50>
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	2104      	movs	r1, #4
 8002bfe:	4805      	ldr	r0, [pc, #20]	; (8002c14 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002c00:	f7fe fdd2 	bl	80017a8 <HAL_GPIO_WritePin>
			// else{HAL_GPIO_WritePin(OUT3_GPIO_Port,OUT3_Pin, GPIO_PIN_RESET);}
		}

	}
}
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40000c00 	.word	0x40000c00
 8002c10:	20000148 	.word	0x20000148
 8002c14:	40020400 	.word	0x40020400

08002c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b094      	sub	sp, #80	; 0x50
 8002c1c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c1e:	f7fe fc4f 	bl	80014c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c22:	f000 f84b 	bl	8002cbc <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c26:	f000 fa3f 	bl	80030a8 <_ZL12MX_GPIO_Initv>
  MX_TIM2_Init();
 8002c2a:	f000 f8af 	bl	8002d8c <_ZL12MX_TIM2_Initv>
  MX_TIM5_Init();
 8002c2e:	f000 f965 	bl	8002efc <_ZL12MX_TIM5_Initv>
  MX_USART2_UART_Init();
 8002c32:	f000 fa0b 	bl	800304c <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim5);
 8002c36:	481b      	ldr	r0, [pc, #108]	; (8002ca4 <main+0x8c>)
 8002c38:	f7ff f8ff 	bl	8001e3a <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim5,TIM_CHANNEL_2);
 8002c3c:	2104      	movs	r1, #4
 8002c3e:	4819      	ldr	r0, [pc, #100]	; (8002ca4 <main+0x8c>)
 8002c40:	f7ff fc9e 	bl	8002580 <HAL_TIM_OC_Start_IT>
	  // HAL_TIM_IC_Start_IT(&htim5,TIM_CHANNEL_1);
  clock.setTimer(&htim2,&htim5);
 8002c44:	4a17      	ldr	r2, [pc, #92]	; (8002ca4 <main+0x8c>)
 8002c46:	4918      	ldr	r1, [pc, #96]	; (8002ca8 <main+0x90>)
 8002c48:	4818      	ldr	r0, [pc, #96]	; (8002cac <main+0x94>)
 8002c4a:	f000 fcf9 	bl	8003640 <_ZN5Clock8setTimerEP17TIM_HandleTypeDefS1_>
  clock.setSource(EXTERNAL);
 8002c4e:	2101      	movs	r1, #1
 8002c50:	4816      	ldr	r0, [pc, #88]	; (8002cac <main+0x94>)
 8002c52:	f000 fd60 	bl	8003716 <_ZN5Clock9setSourceE11ClockSource>
  clock.setPeriod(2000000);
 8002c56:	4916      	ldr	r1, [pc, #88]	; (8002cb0 <main+0x98>)
 8002c58:	4814      	ldr	r0, [pc, #80]	; (8002cac <main+0x94>)
 8002c5a:	f000 fd33 	bl	80036c4 <_ZN5Clock9setPeriodEj>
  clock.setSlaveDivision(16);
 8002c5e:	2110      	movs	r1, #16
 8002c60:	4812      	ldr	r0, [pc, #72]	; (8002cac <main+0x94>)
 8002c62:	f000 fd84 	bl	800376e <_ZN5Clock16setSlaveDivisionEj>
  clock.lock();
 8002c66:	4811      	ldr	r0, [pc, #68]	; (8002cac <main+0x94>)
 8002c68:	f000 fcfc 	bl	8003664 <_ZN5Clock4lockEv>

 int  temp;

  while (1)
  {
	  if(temp != clock.sub){
 8002c6c:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <main+0x94>)
 8002c6e:	699a      	ldr	r2, [r3, #24]
 8002c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d0fa      	beq.n	8002c6c <main+0x54>

			//if(clock.sub > 15){
				char stringTx[64];
				sprintf((char*)stringTx," M: %d S: %d P: %d \r",clock.master,clock.sub,clock.period);
 8002c76:	4b0d      	ldr	r3, [pc, #52]	; (8002cac <main+0x94>)
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <main+0x94>)
 8002c7c:	6999      	ldr	r1, [r3, #24]
 8002c7e:	4b0b      	ldr	r3, [pc, #44]	; (8002cac <main+0x94>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	1d38      	adds	r0, r7, #4
 8002c84:	9300      	str	r3, [sp, #0]
 8002c86:	460b      	mov	r3, r1
 8002c88:	490a      	ldr	r1, [pc, #40]	; (8002cb4 <main+0x9c>)
 8002c8a:	f000 fdfd 	bl	8003888 <siprintf>
				HAL_UART_Transmit(&huart2,(uint8_t*)stringTx,64,100);
 8002c8e:	1d39      	adds	r1, r7, #4
 8002c90:	2364      	movs	r3, #100	; 0x64
 8002c92:	2240      	movs	r2, #64	; 0x40
 8002c94:	4808      	ldr	r0, [pc, #32]	; (8002cb8 <main+0xa0>)
 8002c96:	f7ff fe85 	bl	80029a4 <HAL_UART_Transmit>
				temp = clock.sub;
 8002c9a:	4b04      	ldr	r3, [pc, #16]	; (8002cac <main+0x94>)
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	647b      	str	r3, [r7, #68]	; 0x44
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8002ca0:	e7e4      	b.n	8002c6c <main+0x54>
 8002ca2:	bf00      	nop
 8002ca4:	200000cc 	.word	0x200000cc
 8002ca8:	20000090 	.word	0x20000090
 8002cac:	20000148 	.word	0x20000148
 8002cb0:	001e8480 	.word	0x001e8480
 8002cb4:	080041b0 	.word	0x080041b0
 8002cb8:	20000108 	.word	0x20000108

08002cbc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b094      	sub	sp, #80	; 0x50
 8002cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cc2:	f107 0320 	add.w	r3, r7, #32
 8002cc6:	2230      	movs	r2, #48	; 0x30
 8002cc8:	2100      	movs	r1, #0
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fdd4 	bl	8003878 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cd0:	f107 030c 	add.w	r3, r7, #12
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	609a      	str	r2, [r3, #8]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	611a      	str	r2, [r3, #16]

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	4a27      	ldr	r2, [pc, #156]	; (8002d84 <_Z18SystemClock_Configv+0xc8>)
 8002ce6:	4b27      	ldr	r3, [pc, #156]	; (8002d84 <_Z18SystemClock_Configv+0xc8>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cee:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf0:	4b24      	ldr	r3, [pc, #144]	; (8002d84 <_Z18SystemClock_Configv+0xc8>)
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	4a21      	ldr	r2, [pc, #132]	; (8002d88 <_Z18SystemClock_Configv+0xcc>)
 8002d02:	4b21      	ldr	r3, [pc, #132]	; (8002d88 <_Z18SystemClock_Configv+0xcc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	4b1e      	ldr	r3, [pc, #120]	; (8002d88 <_Z18SystemClock_Configv+0xcc>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d14:	607b      	str	r3, [r7, #4]
 8002d16:	687b      	ldr	r3, [r7, #4]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d20:	2310      	movs	r3, #16
 8002d22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002d24:	2300      	movs	r3, #0
 8002d26:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d28:	f107 0320 	add.w	r3, r7, #32
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fe fd41 	bl	80017b4 <HAL_RCC_OscConfig>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	bf14      	ite	ne
 8002d38:	2301      	movne	r3, #1
 8002d3a:	2300      	moveq	r3, #0
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <_Z18SystemClock_Configv+0x8a>
  {
    Error_Handler();
 8002d42:	f000 f9f5 	bl	8003130 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d46:	230f      	movs	r3, #15
 8002d48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d56:	2300      	movs	r3, #0
 8002d58:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002d5a:	f107 030c 	add.w	r3, r7, #12
 8002d5e:	2100      	movs	r1, #0
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7fe fed7 	bl	8001b14 <HAL_RCC_ClockConfig>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf14      	ite	ne
 8002d6c:	2301      	movne	r3, #1
 8002d6e:	2300      	moveq	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 8002d76:	f000 f9db 	bl	8003130 <Error_Handler>
  }
}
 8002d7a:	bf00      	nop
 8002d7c:	3750      	adds	r7, #80	; 0x50
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40007000 	.word	0x40007000

08002d8c <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b092      	sub	sp, #72	; 0x48
 8002d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	605a      	str	r2, [r3, #4]
 8002d9c:	609a      	str	r2, [r3, #8]
 8002d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]
 8002da8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8002daa:	f107 0320 	add.w	r3, r7, #32
 8002dae:	2200      	movs	r2, #0
 8002db0:	601a      	str	r2, [r3, #0]
 8002db2:	605a      	str	r2, [r3, #4]
 8002db4:	609a      	str	r2, [r3, #8]
 8002db6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002db8:	1d3b      	adds	r3, r7, #4
 8002dba:	2200      	movs	r2, #0
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	605a      	str	r2, [r3, #4]
 8002dc0:	609a      	str	r2, [r3, #8]
 8002dc2:	60da      	str	r2, [r3, #12]
 8002dc4:	611a      	str	r2, [r3, #16]
 8002dc6:	615a      	str	r2, [r3, #20]
 8002dc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002dca:	4b49      	ldr	r3, [pc, #292]	; (8002ef0 <_ZL12MX_TIM2_Initv+0x164>)
 8002dcc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dd0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 8002dd2:	4b47      	ldr	r3, [pc, #284]	; (8002ef0 <_ZL12MX_TIM2_Initv+0x164>)
 8002dd4:	220f      	movs	r2, #15
 8002dd6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd8:	4b45      	ldr	r3, [pc, #276]	; (8002ef0 <_ZL12MX_TIM2_Initv+0x164>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000000000;
 8002dde:	4b44      	ldr	r3, [pc, #272]	; (8002ef0 <_ZL12MX_TIM2_Initv+0x164>)
 8002de0:	4a44      	ldr	r2, [pc, #272]	; (8002ef4 <_ZL12MX_TIM2_Initv+0x168>)
 8002de2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002de4:	4b42      	ldr	r3, [pc, #264]	; (8002ef0 <_ZL12MX_TIM2_Initv+0x164>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002dea:	4841      	ldr	r0, [pc, #260]	; (8002ef0 <_ZL12MX_TIM2_Initv+0x164>)
 8002dec:	f7ff fa14 	bl	8002218 <HAL_TIM_Base_Init>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	bf14      	ite	ne
 8002df6:	2301      	movne	r3, #1
 8002df8:	2300      	moveq	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <_ZL12MX_TIM2_Initv+0x78>
  {
    Error_Handler();
 8002e00:	f000 f996 	bl	8003130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e08:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e0a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002e0e:	4619      	mov	r1, r3
 8002e10:	4837      	ldr	r0, [pc, #220]	; (8002ef0 <_ZL12MX_TIM2_Initv+0x164>)
 8002e12:	f7ff f81f 	bl	8001e54 <HAL_TIM_ConfigClockSource>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf14      	ite	ne
 8002e1c:	2301      	movne	r3, #1
 8002e1e:	2300      	moveq	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d001      	beq.n	8002e2a <_ZL12MX_TIM2_Initv+0x9e>
  {
    Error_Handler();
 8002e26:	f000 f983 	bl	8003130 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002e2a:	4831      	ldr	r0, [pc, #196]	; (8002ef0 <_ZL12MX_TIM2_Initv+0x164>)
 8002e2c:	f7ff fa28 	bl	8002280 <HAL_TIM_IC_Init>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	bf14      	ite	ne
 8002e36:	2301      	movne	r3, #1
 8002e38:	2300      	moveq	r3, #0
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d001      	beq.n	8002e44 <_ZL12MX_TIM2_Initv+0xb8>
  {
    Error_Handler();
 8002e40:	f000 f976 	bl	8003130 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002e44:	482a      	ldr	r0, [pc, #168]	; (8002ef0 <_ZL12MX_TIM2_Initv+0x164>)
 8002e46:	f7ff fa01 	bl	800224c <HAL_TIM_OC_Init>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	bf14      	ite	ne
 8002e50:	2301      	movne	r3, #1
 8002e52:	2300      	moveq	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <_ZL12MX_TIM2_Initv+0xd2>
  {
    Error_Handler();
 8002e5a:	f000 f969 	bl	8003130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	633b      	str	r3, [r7, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8002e62:	2380      	movs	r3, #128	; 0x80
 8002e64:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	4820      	ldr	r0, [pc, #128]	; (8002ef0 <_ZL12MX_TIM2_Initv+0x164>)
 8002e6e:	f7ff fc05 	bl	800267c <HAL_TIMEx_MasterConfigSynchronization>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf14      	ite	ne
 8002e78:	2301      	movne	r3, #1
 8002e7a:	2300      	moveq	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d001      	beq.n	8002e86 <_ZL12MX_TIM2_Initv+0xfa>
  {
    Error_Handler();
 8002e82:	f000 f955 	bl	8003130 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002e86:	2300      	movs	r3, #0
 8002e88:	623b      	str	r3, [r7, #32]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigIC.ICFilter = 0;
 8002e92:	2300      	movs	r3, #0
 8002e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002e96:	f107 0320 	add.w	r3, r7, #32
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4814      	ldr	r0, [pc, #80]	; (8002ef0 <_ZL12MX_TIM2_Initv+0x164>)
 8002ea0:	f7ff fa42 	bl	8002328 <HAL_TIM_IC_ConfigChannel>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	bf14      	ite	ne
 8002eaa:	2301      	movne	r3, #1
 8002eac:	2300      	moveq	r3, #0
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <_ZL12MX_TIM2_Initv+0x12c>
  {
    Error_Handler();
 8002eb4:	f000 f93c 	bl	8003130 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000000000;
 8002ebc:	4b0e      	ldr	r3, [pc, #56]	; (8002ef8 <_ZL12MX_TIM2_Initv+0x16c>)
 8002ebe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ec8:	1d3b      	adds	r3, r7, #4
 8002eca:	2204      	movs	r2, #4
 8002ecc:	4619      	mov	r1, r3
 8002ece:	4808      	ldr	r0, [pc, #32]	; (8002ef0 <_ZL12MX_TIM2_Initv+0x164>)
 8002ed0:	f7ff fae2 	bl	8002498 <HAL_TIM_OC_ConfigChannel>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	bf14      	ite	ne
 8002eda:	2301      	movne	r3, #1
 8002edc:	2300      	moveq	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <_ZL12MX_TIM2_Initv+0x15c>
  {
    Error_Handler();
 8002ee4:	f000 f924 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002ee8:	bf00      	nop
 8002eea:	3748      	adds	r7, #72	; 0x48
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000090 	.word	0x20000090
 8002ef4:	ee6b2800 	.word	0xee6b2800
 8002ef8:	3b9aca00 	.word	0x3b9aca00

08002efc <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b092      	sub	sp, #72	; 0x48
 8002f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f06:	2200      	movs	r2, #0
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	605a      	str	r2, [r3, #4]
 8002f0c:	609a      	str	r2, [r3, #8]
 8002f0e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	60da      	str	r2, [r3, #12]
 8002f1e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f20:	f107 031c 	add.w	r3, r7, #28
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f2a:	463b      	mov	r3, r7
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	60da      	str	r2, [r3, #12]
 8002f36:	611a      	str	r2, [r3, #16]
 8002f38:	615a      	str	r2, [r3, #20]
 8002f3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002f3c:	4b3f      	ldr	r3, [pc, #252]	; (800303c <_ZL12MX_TIM5_Initv+0x140>)
 8002f3e:	4a40      	ldr	r2, [pc, #256]	; (8003040 <_ZL12MX_TIM5_Initv+0x144>)
 8002f40:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 15;
 8002f42:	4b3e      	ldr	r3, [pc, #248]	; (800303c <_ZL12MX_TIM5_Initv+0x140>)
 8002f44:	220f      	movs	r2, #15
 8002f46:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f48:	4b3c      	ldr	r3, [pc, #240]	; (800303c <_ZL12MX_TIM5_Initv+0x140>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4000000000;
 8002f4e:	4b3b      	ldr	r3, [pc, #236]	; (800303c <_ZL12MX_TIM5_Initv+0x140>)
 8002f50:	4a3c      	ldr	r2, [pc, #240]	; (8003044 <_ZL12MX_TIM5_Initv+0x148>)
 8002f52:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f54:	4b39      	ldr	r3, [pc, #228]	; (800303c <_ZL12MX_TIM5_Initv+0x140>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002f5a:	4838      	ldr	r0, [pc, #224]	; (800303c <_ZL12MX_TIM5_Initv+0x140>)
 8002f5c:	f7ff f95c 	bl	8002218 <HAL_TIM_Base_Init>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	bf14      	ite	ne
 8002f66:	2301      	movne	r3, #1
 8002f68:	2300      	moveq	r3, #0
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <_ZL12MX_TIM5_Initv+0x78>
  {
    Error_Handler();
 8002f70:	f000 f8de 	bl	8003130 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f78:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002f7a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f7e:	4619      	mov	r1, r3
 8002f80:	482e      	ldr	r0, [pc, #184]	; (800303c <_ZL12MX_TIM5_Initv+0x140>)
 8002f82:	f7fe ff67 	bl	8001e54 <HAL_TIM_ConfigClockSource>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf14      	ite	ne
 8002f8c:	2301      	movne	r3, #1
 8002f8e:	2300      	moveq	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <_ZL12MX_TIM5_Initv+0x9e>
  {
    Error_Handler();
 8002f96:	f000 f8cb 	bl	8003130 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
 8002f9a:	4828      	ldr	r0, [pc, #160]	; (800303c <_ZL12MX_TIM5_Initv+0x140>)
 8002f9c:	f7ff f956 	bl	800224c <HAL_TIM_OC_Init>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bf14      	ite	ne
 8002fa6:	2301      	movne	r3, #1
 8002fa8:	2300      	moveq	r3, #0
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <_ZL12MX_TIM5_Initv+0xb8>
  {
    Error_Handler();
 8002fb0:	f000 f8be 	bl	8003130 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchronization(&htim5, &sSlaveConfig) != HAL_OK)
 8002fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	481e      	ldr	r0, [pc, #120]	; (800303c <_ZL12MX_TIM5_Initv+0x140>)
 8002fc4:	f7fe ffff 	bl	8001fc6 <HAL_TIM_SlaveConfigSynchronization>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	bf14      	ite	ne
 8002fce:	2301      	movne	r3, #1
 8002fd0:	2300      	moveq	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <_ZL12MX_TIM5_Initv+0xe0>
  {
    Error_Handler();
 8002fd8:	f000 f8aa 	bl	8003130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002fe4:	f107 031c 	add.w	r3, r7, #28
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4814      	ldr	r0, [pc, #80]	; (800303c <_ZL12MX_TIM5_Initv+0x140>)
 8002fec:	f7ff fb46 	bl	800267c <HAL_TIMEx_MasterConfigSynchronization>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	bf14      	ite	ne
 8002ff6:	2301      	movne	r3, #1
 8002ff8:	2300      	moveq	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <_ZL12MX_TIM5_Initv+0x108>
  {
    Error_Handler();
 8003000:	f000 f896 	bl	8003130 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003004:	2300      	movs	r3, #0
 8003006:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000000000;
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <_ZL12MX_TIM5_Initv+0x14c>)
 800300a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800300c:	2300      	movs	r3, #0
 800300e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003010:	2300      	movs	r3, #0
 8003012:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003014:	463b      	mov	r3, r7
 8003016:	2204      	movs	r2, #4
 8003018:	4619      	mov	r1, r3
 800301a:	4808      	ldr	r0, [pc, #32]	; (800303c <_ZL12MX_TIM5_Initv+0x140>)
 800301c:	f7ff fa3c 	bl	8002498 <HAL_TIM_OC_ConfigChannel>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	bf14      	ite	ne
 8003026:	2301      	movne	r3, #1
 8003028:	2300      	moveq	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	2b00      	cmp	r3, #0
 800302e:	d001      	beq.n	8003034 <_ZL12MX_TIM5_Initv+0x138>
  {
    Error_Handler();
 8003030:	f000 f87e 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003034:	bf00      	nop
 8003036:	3748      	adds	r7, #72	; 0x48
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	200000cc 	.word	0x200000cc
 8003040:	40000c00 	.word	0x40000c00
 8003044:	ee6b2800 	.word	0xee6b2800
 8003048:	540be400 	.word	0x540be400

0800304c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003050:	4b13      	ldr	r3, [pc, #76]	; (80030a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003052:	4a14      	ldr	r2, [pc, #80]	; (80030a4 <_ZL19MX_USART2_UART_Initv+0x58>)
 8003054:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003056:	4b12      	ldr	r3, [pc, #72]	; (80030a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800305c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800305e:	4b10      	ldr	r3, [pc, #64]	; (80030a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003060:	2200      	movs	r2, #0
 8003062:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003064:	4b0e      	ldr	r3, [pc, #56]	; (80030a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003066:	2200      	movs	r2, #0
 8003068:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800306a:	4b0d      	ldr	r3, [pc, #52]	; (80030a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800306c:	2200      	movs	r2, #0
 800306e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003070:	4b0b      	ldr	r3, [pc, #44]	; (80030a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003072:	220c      	movs	r2, #12
 8003074:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003076:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003078:	2200      	movs	r2, #0
 800307a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800307c:	4b08      	ldr	r3, [pc, #32]	; (80030a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800307e:	2200      	movs	r2, #0
 8003080:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003082:	4807      	ldr	r0, [pc, #28]	; (80030a0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003084:	f7ff fc60 	bl	8002948 <HAL_UART_Init>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	bf14      	ite	ne
 800308e:	2301      	movne	r3, #1
 8003090:	2300      	moveq	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8003098:	f000 f84a 	bl	8003130 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800309c:	bf00      	nop
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	20000108 	.word	0x20000108
 80030a4:	40004400 	.word	0x40004400

080030a8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b088      	sub	sp, #32
 80030ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ae:	f107 030c 	add.w	r3, r7, #12
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	605a      	str	r2, [r3, #4]
 80030b8:	609a      	str	r2, [r3, #8]
 80030ba:	60da      	str	r2, [r3, #12]
 80030bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	60bb      	str	r3, [r7, #8]
 80030c2:	4a19      	ldr	r2, [pc, #100]	; (8003128 <_ZL12MX_GPIO_Initv+0x80>)
 80030c4:	4b18      	ldr	r3, [pc, #96]	; (8003128 <_ZL12MX_GPIO_Initv+0x80>)
 80030c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c8:	f043 0301 	orr.w	r3, r3, #1
 80030cc:	6313      	str	r3, [r2, #48]	; 0x30
 80030ce:	4b16      	ldr	r3, [pc, #88]	; (8003128 <_ZL12MX_GPIO_Initv+0x80>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	4a12      	ldr	r2, [pc, #72]	; (8003128 <_ZL12MX_GPIO_Initv+0x80>)
 80030e0:	4b11      	ldr	r3, [pc, #68]	; (8003128 <_ZL12MX_GPIO_Initv+0x80>)
 80030e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e4:	f043 0302 	orr.w	r3, r3, #2
 80030e8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ea:	4b0f      	ldr	r3, [pc, #60]	; (8003128 <_ZL12MX_GPIO_Initv+0x80>)
 80030ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	607b      	str	r3, [r7, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin, GPIO_PIN_RESET);
 80030f6:	2200      	movs	r2, #0
 80030f8:	f240 4107 	movw	r1, #1031	; 0x407
 80030fc:	480b      	ldr	r0, [pc, #44]	; (800312c <_ZL12MX_GPIO_Initv+0x84>)
 80030fe:	f7fe fb53 	bl	80017a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT1_Pin OUT2_Pin OUT3_Pin OUT4_Pin */
  GPIO_InitStruct.Pin = OUT1_Pin|OUT2_Pin|OUT3_Pin|OUT4_Pin;
 8003102:	f240 4307 	movw	r3, #1031	; 0x407
 8003106:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003108:	2301      	movs	r3, #1
 800310a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003110:	2300      	movs	r3, #0
 8003112:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003114:	f107 030c 	add.w	r3, r7, #12
 8003118:	4619      	mov	r1, r3
 800311a:	4804      	ldr	r0, [pc, #16]	; (800312c <_ZL12MX_GPIO_Initv+0x84>)
 800311c:	f7fe fa64 	bl	80015e8 <HAL_GPIO_Init>

}
 8003120:	bf00      	nop
 8003122:	3720      	adds	r7, #32
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40023800 	.word	0x40023800
 800312c:	40020400 	.word	0x40020400

08003130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <_Z41__static_initialization_and_destruction_0ii>:
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b01      	cmp	r3, #1
 800314e:	d10c      	bne.n	800316a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003156:	4293      	cmp	r3, r2
 8003158:	d107      	bne.n	800316a <_Z41__static_initialization_and_destruction_0ii+0x2a>
Clock clock;
 800315a:	4806      	ldr	r0, [pc, #24]	; (8003174 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800315c:	f000 f926 	bl	80033ac <_ZN5ClockC1Ev>
 8003160:	4a05      	ldr	r2, [pc, #20]	; (8003178 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003162:	4906      	ldr	r1, [pc, #24]	; (800317c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003164:	4803      	ldr	r0, [pc, #12]	; (8003174 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003166:	f000 fb50 	bl	800380a <__aeabi_atexit>
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000148 	.word	0x20000148
 8003178:	20000000 	.word	0x20000000
 800317c:	080033d5 	.word	0x080033d5

08003180 <_GLOBAL__sub_I_htim2>:
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
 8003184:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003188:	2001      	movs	r0, #1
 800318a:	f7ff ffd9 	bl	8003140 <_Z41__static_initialization_and_destruction_0ii>
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003190:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003192:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <HAL_MspInit+0x34>)
 8003194:	2100      	movs	r1, #0
 8003196:	9100      	str	r1, [sp, #0]
 8003198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800319a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800319e:	645a      	str	r2, [r3, #68]	; 0x44
 80031a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031a2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80031a6:	9200      	str	r2, [sp, #0]
 80031a8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031aa:	9101      	str	r1, [sp, #4]
 80031ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ba:	9301      	str	r3, [sp, #4]
 80031bc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031be:	b002      	add	sp, #8
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800

080031c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031c8:	b510      	push	{r4, lr}
 80031ca:	4604      	mov	r4, r0
 80031cc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ce:	2214      	movs	r2, #20
 80031d0:	2100      	movs	r1, #0
 80031d2:	a803      	add	r0, sp, #12
 80031d4:	f000 fb50 	bl	8003878 <memset>
  if(htim_base->Instance==TIM2)
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031de:	d129      	bne.n	8003234 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031e0:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 80031e4:	2400      	movs	r4, #0
 80031e6:	9400      	str	r4, [sp, #0]
 80031e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ea:	481d      	ldr	r0, [pc, #116]	; (8003260 <HAL_TIM_Base_MspInit+0x98>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031ec:	f042 0201 	orr.w	r2, r2, #1
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40
 80031f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031f4:	f002 0201 	and.w	r2, r2, #1
 80031f8:	9200      	str	r2, [sp, #0]
 80031fa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031fc:	9401      	str	r4, [sp, #4]
 80031fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003200:	f042 0201 	orr.w	r2, r2, #1
 8003204:	631a      	str	r2, [r3, #48]	; 0x30
 8003206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320e:	2202      	movs	r2, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003210:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003212:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003214:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003216:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003218:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800321a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800321c:	f7fe f9e4 	bl	80015e8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003220:	201c      	movs	r0, #28
 8003222:	4622      	mov	r2, r4
 8003224:	4621      	mov	r1, r4
 8003226:	f7fe f989 	bl	800153c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800322a:	201c      	movs	r0, #28
  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800322c:	f7fe f9ba 	bl	80015a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003230:	b008      	add	sp, #32
 8003232:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM5)
 8003234:	4a0b      	ldr	r2, [pc, #44]	; (8003264 <HAL_TIM_Base_MspInit+0x9c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d1fa      	bne.n	8003230 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800323a:	4b0b      	ldr	r3, [pc, #44]	; (8003268 <HAL_TIM_Base_MspInit+0xa0>)
 800323c:	2200      	movs	r2, #0
 800323e:	9202      	str	r2, [sp, #8]
 8003240:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003242:	f041 0108 	orr.w	r1, r1, #8
 8003246:	6419      	str	r1, [r3, #64]	; 0x40
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8003250:	2032      	movs	r0, #50	; 0x32
 8003252:	2101      	movs	r1, #1
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003254:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8003256:	f7fe f971 	bl	800153c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800325a:	2032      	movs	r0, #50	; 0x32
 800325c:	e7e6      	b.n	800322c <HAL_TIM_Base_MspInit+0x64>
 800325e:	bf00      	nop
 8003260:	40020000 	.word	0x40020000
 8003264:	40000c00 	.word	0x40000c00
 8003268:	40023800 	.word	0x40023800

0800326c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800326c:	b510      	push	{r4, lr}
 800326e:	4604      	mov	r4, r0
 8003270:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003272:	2214      	movs	r2, #20
 8003274:	2100      	movs	r1, #0
 8003276:	a803      	add	r0, sp, #12
 8003278:	f000 fafe 	bl	8003878 <memset>
  if(huart->Instance==USART2)
 800327c:	6822      	ldr	r2, [r4, #0]
 800327e:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <HAL_UART_MspInit+0x68>)
 8003280:	429a      	cmp	r2, r3
 8003282:	d124      	bne.n	80032ce <HAL_UART_MspInit+0x62>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003284:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8003288:	2100      	movs	r1, #0
 800328a:	9101      	str	r1, [sp, #4]
 800328c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800328e:	4812      	ldr	r0, [pc, #72]	; (80032d8 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003290:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003294:	641a      	str	r2, [r3, #64]	; 0x40
 8003296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003298:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800329c:	9201      	str	r2, [sp, #4]
 800329e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a0:	9102      	str	r1, [sp, #8]
 80032a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032a4:	f042 0201 	orr.w	r2, r2, #1
 80032a8:	631a      	str	r2, [r3, #48]	; 0x30
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	9302      	str	r3, [sp, #8]
 80032b2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80032b4:	230c      	movs	r3, #12
 80032b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b8:	2302      	movs	r3, #2
 80032ba:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80032bc:	2301      	movs	r3, #1
 80032be:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032c0:	2303      	movs	r3, #3
 80032c2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032c6:	2307      	movs	r3, #7
 80032c8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ca:	f7fe f98d 	bl	80015e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80032ce:	b008      	add	sp, #32
 80032d0:	bd10      	pop	{r4, pc}
 80032d2:	bf00      	nop
 80032d4:	40004400 	.word	0x40004400
 80032d8:	40020000 	.word	0x40020000

080032dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80032e0:	bf00      	nop
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032ea:	b480      	push	{r7}
 80032ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032ee:	e7fe      	b.n	80032ee <HardFault_Handler+0x4>

080032f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032f4:	e7fe      	b.n	80032f4 <MemManage_Handler+0x4>

080032f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032f6:	b480      	push	{r7}
 80032f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032fa:	e7fe      	b.n	80032fa <BusFault_Handler+0x4>

080032fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003300:	e7fe      	b.n	8003300 <UsageFault_Handler+0x4>

08003302 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003302:	b480      	push	{r7}
 8003304:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003306:	bf00      	nop
 8003308:	46bd      	mov	sp, r7
 800330a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330e:	4770      	bx	lr

08003310 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800331e:	b480      	push	{r7}
 8003320:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0




  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003330:	f7fe f8e0 	bl	80014f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003334:	bf00      	nop
 8003336:	bd80      	pop	{r7, pc}

08003338 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800333c:	4802      	ldr	r0, [pc, #8]	; (8003348 <TIM2_IRQHandler+0x10>)
 800333e:	f7fe fe64 	bl	800200a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  // htim5.Instance->CCR2=htim2.Instance->CCR1/2;

  /* USER CODE END TIM2_IRQn 1 */
}
 8003342:	bf00      	nop
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	20000090 	.word	0x20000090

0800334c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  // HAL_GPIO_TogglePin(OUT3_GPIO_Port,OUT3_Pin);
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003350:	4802      	ldr	r0, [pc, #8]	; (800335c <TIM5_IRQHandler+0x10>)
 8003352:	f7fe fe5a 	bl	800200a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003356:	bf00      	nop
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	200000cc 	.word	0x200000cc

08003360 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003360:	490f      	ldr	r1, [pc, #60]	; (80033a0 <SystemInit+0x40>)
 8003362:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003366:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800336e:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <SystemInit+0x44>)
 8003370:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003372:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003374:	f042 0201 	orr.w	r2, r2, #1
 8003378:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800337a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003382:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003386:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003388:	4a07      	ldr	r2, [pc, #28]	; (80033a8 <SystemInit+0x48>)
 800338a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003392:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003394:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003396:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800339a:	608b      	str	r3, [r1, #8]
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	e000ed00 	.word	0xe000ed00
 80033a4:	40023800 	.word	0x40023800
 80033a8:	24003010 	.word	0x24003010

080033ac <_ZN5ClockC1Ev>:
 */
#include "clock.hpp"
#include "stm32f4xx.h"

// Constructor
Clock::Clock(){
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
	averagingWindow = 16;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2210      	movs	r2, #16
 80033b8:	621a      	str	r2, [r3, #32]
	acceptableOutlierPercentage = 0.1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a04      	ldr	r2, [pc, #16]	; (80033d0 <_ZN5ClockC1Ev+0x24>)
 80033be:	629a      	str	r2, [r3, #40]	; 0x28
	;
}
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4618      	mov	r0, r3
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	3dcccccd 	.word	0x3dcccccd

080033d4 <_ZN5ClockD1Ev>:
// Destructor
Clock::~Clock(void){
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
	;
}
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4618      	mov	r0, r3
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr

080033ea <_ZN5Clock15addPeriodSampleEj>:
//
unsigned int Clock::addPeriodSample(unsigned int periodSample){
 80033ea:	b480      	push	{r7}
 80033ec:	b089      	sub	sp, #36	; 0x24
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	6039      	str	r1, [r7, #0]
	// If the sample buffer has not overflown and this is one of the first samples always add it
	if((sampleIndex  == 0) && (sampleBufferFull == false)){
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d125      	bne.n	8003448 <_ZN5Clock15addPeriodSampleEj+0x5e>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003402:	2b00      	cmp	r3, #0
 8003404:	d120      	bne.n	8003448 <_ZN5Clock15addPeriodSampleEj+0x5e>
		sampleBuffer[sampleIndex] = periodSample;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	330c      	adds	r3, #12
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	683a      	ldr	r2, [r7, #0]
 8003414:	605a      	str	r2, [r3, #4]
		acceptableDeviation = periodSample*acceptableOutlierPercentage;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	ee07 3a90 	vmov	s15, r3
 800341c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800342a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800342e:	ee17 2a90 	vmov	r2, s15
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	62da      	str	r2, [r3, #44]	; 0x2c
		averagedPeriod = periodSample;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	61da      	str	r2, [r3, #28]
		sampleIndex++;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	1c5a      	adds	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	625a      	str	r2, [r3, #36]	; 0x24
 8003446:	e05b      	b.n	8003500 <_ZN5Clock15addPeriodSampleEj+0x116>
	}
	else if(sampleIndex < averagingWindow){
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	429a      	cmp	r2, r3
 8003452:	da41      	bge.n	80034d8 <_ZN5Clock15addPeriodSampleEj+0xee>
		// Check if the sample falls within the acceptable deviation bounds
		if(((periodSample+acceptableDeviation)>averagedPeriod)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	461a      	mov	r2, r3
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	441a      	add	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	429a      	cmp	r2, r3
 8003464:	d916      	bls.n	8003494 <_ZN5Clock15addPeriodSampleEj+0xaa>
			&& ((periodSample-acceptableDeviation)<averagedPeriod)){
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	461a      	mov	r2, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	1a9a      	subs	r2, r3, r2
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	429a      	cmp	r2, r3
 8003476:	d20d      	bcs.n	8003494 <_ZN5Clock15addPeriodSampleEj+0xaa>

			// Add the sampled clock period to the cyclic buffer
			sampleBuffer[sampleIndex] = periodSample;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	330c      	adds	r3, #12
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	683a      	ldr	r2, [r7, #0]
 8003486:	605a      	str	r2, [r3, #4]
			sampleIndex++;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	625a      	str	r2, [r3, #36]	; 0x24
 8003492:	e035      	b.n	8003500 <_ZN5Clock15addPeriodSampleEj+0x116>
		}
		else{
			// Reset the buffer, store the sample anyway.
			sampleIndex = 0; sampleBufferFull = false;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	625a      	str	r2, [r3, #36]	; 0x24
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			for(int i = 0; i < averagingWindow; i++){
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a1a      	ldr	r2, [r3, #32]
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	dd0a      	ble.n	80034c6 <_ZN5Clock15addPeriodSampleEj+0xdc>
				sampleBuffer[i] = 0;
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	330c      	adds	r3, #12
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	2200      	movs	r2, #0
 80034bc:	605a      	str	r2, [r3, #4]
			for(int i = 0; i < averagingWindow; i++){
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3301      	adds	r3, #1
 80034c2:	61fb      	str	r3, [r7, #28]
 80034c4:	e7ef      	b.n	80034a6 <_ZN5Clock15addPeriodSampleEj+0xbc>
			}
			sampleBuffer[sampleIndex] = periodSample;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	330c      	adds	r3, #12
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	e013      	b.n	8003500 <_ZN5Clock15addPeriodSampleEj+0x116>
			// sampleIndex++;
		}
	}
	else{sampleIndex = 0; sampleBufferFull = true;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	625a      	str	r2, [r3, #36]	; 0x24
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			sampleBuffer[sampleIndex] = periodSample;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	330c      	adds	r3, #12
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	605a      	str	r2, [r3, #4]
			sampleIndex++;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	1c5a      	adds	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	625a      	str	r2, [r3, #36]	; 0x24
	}

	// Check if there is more than 1 sample, then average and calculate bounds. If there is only 1 sample return false.
	// We need 2 edges to capture a period length...
	if(sampleBufferFull){
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003506:	2b00      	cmp	r3, #0
 8003508:	d031      	beq.n	800356e <_ZN5Clock15addPeriodSampleEj+0x184>
		unsigned int temp = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	61bb      	str	r3, [r7, #24]
		for(int i = 0; i < averagingWindow ; i++){
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1a      	ldr	r2, [r3, #32]
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	429a      	cmp	r2, r3
 800351a:	dd0c      	ble.n	8003536 <_ZN5Clock15addPeriodSampleEj+0x14c>
			temp+=sampleBuffer[i];
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	330c      	adds	r3, #12
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4413      	add	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
		for(int i = 0; i < averagingWindow ; i++){
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	3301      	adds	r3, #1
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	e7ed      	b.n	8003512 <_ZN5Clock15addPeriodSampleEj+0x128>
		}
		averagedPeriod = temp/(averagingWindow);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	461a      	mov	r2, r3
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	61da      	str	r2, [r3, #28]

		// Calculate the bounds for the next sample<
		acceptableDeviation = averagedPeriod*acceptableOutlierPercentage;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	ee07 3a90 	vmov	s15, r3
 800354e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8003558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800355c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003560:	ee17 2a90 	vmov	r2, s15
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	62da      	str	r2, [r3, #44]	; 0x2c
		return averagedPeriod;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	e036      	b.n	80035dc <_ZN5Clock15addPeriodSampleEj+0x1f2>
	}
	else if(sampleIndex > 1){
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003572:	2b01      	cmp	r3, #1
 8003574:	dd31      	ble.n	80035da <_ZN5Clock15addPeriodSampleEj+0x1f0>
		unsigned int temp = 0;
 8003576:	2300      	movs	r3, #0
 8003578:	613b      	str	r3, [r7, #16]
		for(int i = 0; i < sampleIndex; i++){
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	429a      	cmp	r2, r3
 8003586:	dd0c      	ble.n	80035a2 <_ZN5Clock15addPeriodSampleEj+0x1b8>
			temp+=sampleBuffer[i];
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	330c      	adds	r3, #12
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4413      	add	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
		for(int i = 0; i < sampleIndex; i++){
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	3301      	adds	r3, #1
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	e7ed      	b.n	800357e <_ZN5Clock15addPeriodSampleEj+0x194>
		}
		averagedPeriod = temp/(sampleIndex);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	461a      	mov	r2, r3
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	61da      	str	r2, [r3, #28]

		acceptableDeviation = averagedPeriod*acceptableOutlierPercentage;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	ee07 3a90 	vmov	s15, r3
 80035ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80035c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035cc:	ee17 2a90 	vmov	r2, s15
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	62da      	str	r2, [r3, #44]	; 0x2c
		return averagedPeriod;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	e000      	b.n	80035dc <_ZN5Clock15addPeriodSampleEj+0x1f2>
	}
	else{
		// If only 1 sample has been captured:

		return 0;
 80035da:	2300      	movs	r3, #0
	}
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3724      	adds	r7, #36	; 0x24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <_ZN5Clock10masterTickEv>:
void Clock::masterTick(void){
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	master++;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	615a      	str	r2, [r3, #20]
	sub = 0;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	619a      	str	r2, [r3, #24]
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <_ZN5Clock7subTickEv>:
void Clock::subTick(void){
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
	if(sub < subDiv){
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	699a      	ldr	r2, [r3, #24]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	429a      	cmp	r2, r3
 800361e:	d205      	bcs.n	800362c <_ZN5Clock7subTickEv+0x20>
		sub++;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	619a      	str	r2, [r3, #24]
	}
	else{
		sub = subDiv;
	}
}
 800362a:	e003      	b.n	8003634 <_ZN5Clock7subTickEv+0x28>
		sub = subDiv;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691a      	ldr	r2, [r3, #16]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	619a      	str	r2, [r3, #24]
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <_ZN5Clock8setTimerEP17TIM_HandleTypeDefS1_>:
// This should happen in the constructor!
void Clock::setTimer(TIM_HandleTypeDef* master, TIM_HandleTypeDef* slave){
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	60f8      	str	r0, [r7, #12]
 8003648:	60b9      	str	r1, [r7, #8]
 800364a:	607a      	str	r2, [r7, #4]
	masterTimer = master;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	601a      	str	r2, [r3, #0]
	slaveTimer = slave;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	605a      	str	r2, [r3, #4]
}
 8003658:	bf00      	nop
 800365a:	3714      	adds	r7, #20
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <_ZN5Clock4lockEv>:

// Implement averaging routine! and Reset on master pulse.
// Maybe inline these functions!
void Clock::lock(){
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
	if(!lockState){
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	7a5b      	ldrb	r3, [r3, #9]
 8003670:	f083 0301 	eor.w	r3, r3, #1
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d005      	beq.n	8003686 <_ZN5Clock4lockEv+0x22>
		lockState = true;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	725a      	strb	r2, [r3, #9]
		sub = 0;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	619a      	str	r2, [r3, #24]
	}
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <_ZN5Clock6unlockEv>:
void Clock::unlock(){
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
	lockState = false;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	725a      	strb	r2, [r3, #9]
}
 80036a0:	bf00      	nop
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <_ZN5Clock8isLockedEv>:
bool Clock::isLocked(void){
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
	return lockState;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	7a5b      	ldrb	r3, [r3, #9]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <_ZN5Clock9setPeriodEj>:
	else if(clockSource == EXTERNAL){
	     period = masterTimer->Instance->CCR1;
	     masterTimer->Instance->CCR2 = period;
	}
}
void Clock::setPeriod(unsigned int value){
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
	if(clockSource == INTERNAL){
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	7a1b      	ldrb	r3, [r3, #8]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <_ZN5Clock9setPeriodEj+0x26>
		period = value;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	60da      	str	r2, [r3, #12]
		masterTimer->Instance->CCR2 = period;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	68d2      	ldr	r2, [r2, #12]
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38
	}
	else if(clockSource == EXTERNAL){
		period = masterTimer->Instance->CCR1;
		masterTimer->Instance->CCR2 = period;
	}
}
 80036e8:	e00f      	b.n	800370a <_ZN5Clock9setPeriodEj+0x46>
	else if(clockSource == EXTERNAL){
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	7a1b      	ldrb	r3, [r3, #8]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d10b      	bne.n	800370a <_ZN5Clock9setPeriodEj+0x46>
		period = masterTimer->Instance->CCR1;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	60da      	str	r2, [r3, #12]
		masterTimer->Instance->CCR2 = period;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	68d2      	ldr	r2, [r2, #12]
 8003708:	639a      	str	r2, [r3, #56]	; 0x38
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <_ZN5Clock9setSourceE11ClockSource>:

void Clock::setSource(enum ClockSource source){
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	460b      	mov	r3, r1
 8003720:	70fb      	strb	r3, [r7, #3]
	clockSource = source;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	78fa      	ldrb	r2, [r7, #3]
 8003726:	721a      	strb	r2, [r3, #8]
	if(source == INTERNAL){
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10c      	bne.n	8003748 <_ZN5Clock9setSourceE11ClockSource+0x32>
		// Do not use the external trigger
		HAL_TIM_IC_Start_IT(masterTimer, TIM_CHANNEL_1);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2100      	movs	r1, #0
 8003734:	4618      	mov	r0, r3
 8003736:	f7fe ff75 	bl	8002624 <HAL_TIM_IC_Start_IT>
		HAL_TIM_OC_Start_IT(masterTimer, TIM_CHANNEL_2);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2104      	movs	r1, #4
 8003740:	4618      	mov	r0, r3
 8003742:	f7fe ff1d 	bl	8002580 <HAL_TIM_OC_Start_IT>
	else if(source == EXTERNAL){
		HAL_TIM_OC_Stop_IT(masterTimer, TIM_CHANNEL_2);
		HAL_TIM_IC_Start_IT(masterTimer, TIM_CHANNEL_1);

	}
}
 8003746:	e00e      	b.n	8003766 <_ZN5Clock9setSourceE11ClockSource+0x50>
	else if(source == EXTERNAL){
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d10b      	bne.n	8003766 <_ZN5Clock9setSourceE11ClockSource+0x50>
		HAL_TIM_OC_Stop_IT(masterTimer, TIM_CHANNEL_2);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2104      	movs	r1, #4
 8003754:	4618      	mov	r0, r3
 8003756:	f7fe ff63 	bl	8002620 <HAL_TIM_OC_Stop_IT>
		HAL_TIM_IC_Start_IT(masterTimer, TIM_CHANNEL_1);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2100      	movs	r1, #0
 8003760:	4618      	mov	r0, r3
 8003762:	f7fe ff5f 	bl	8002624 <HAL_TIM_IC_Start_IT>
}
 8003766:	bf00      	nop
 8003768:	3708      	adds	r7, #8
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}

0800376e <_ZN5Clock16setSlaveDivisionEj>:
volatile unsigned int Clock::getPeriod(void){
	return period;
}

void Clock::setSlaveDivision(unsigned int division){
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	6039      	str	r1, [r7, #0]
	subDiv = division;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	611a      	str	r2, [r3, #16]
	// Bit hacky, to make sure there are only 'division' amounts of pulses in a period.
	// This may be necessary if a shoddy clock input is used
	slaveTimer->Instance->CNT = 0;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	2200      	movs	r2, #0
 8003786:	625a      	str	r2, [r3, #36]	; 0x24
	slaveTimer->Instance->ARR = (period+50)/subDiv;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	68d2      	ldr	r2, [r2, #12]
 8003792:	f102 0132 	add.w	r1, r2, #50	; 0x32
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6912      	ldr	r2, [r2, #16]
 800379a:	fbb1 f2f2 	udiv	r2, r1, r2
 800379e:	62da      	str	r2, [r3, #44]	; 0x2c
	slaveTimer->Instance->CCR2 = 1000;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037aa:	639a      	str	r2, [r3, #56]	; 0x38

	// slaveTimer->Instance->ARR = ((period)/division);//+(period%division);
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80037b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80037bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80037be:	e003      	b.n	80037c8 <LoopCopyDataInit>

080037c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80037c0:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80037c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80037c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80037c6:	3104      	adds	r1, #4

080037c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80037c8:	480b      	ldr	r0, [pc, #44]	; (80037f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80037ca:	4b0c      	ldr	r3, [pc, #48]	; (80037fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80037cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80037ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80037d0:	d3f6      	bcc.n	80037c0 <CopyDataInit>
  ldr  r2, =_sbss
 80037d2:	4a0b      	ldr	r2, [pc, #44]	; (8003800 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80037d4:	e002      	b.n	80037dc <LoopFillZerobss>

080037d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80037d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80037d8:	f842 3b04 	str.w	r3, [r2], #4

080037dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80037dc:	4b09      	ldr	r3, [pc, #36]	; (8003804 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80037de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80037e0:	d3f9      	bcc.n	80037d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80037e2:	f7ff fdbd 	bl	8003360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037e6:	f000 f823 	bl	8003830 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037ea:	f7ff fa15 	bl	8002c18 <main>
  bx  lr    
 80037ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80037f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80037f4:	080043c8 	.word	0x080043c8
  ldr  r0, =_sdata
 80037f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80037fc:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8003800:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8003804:	200001d0 	.word	0x200001d0

08003808 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003808:	e7fe      	b.n	8003808 <ADC_IRQHandler>

0800380a <__aeabi_atexit>:
 800380a:	460b      	mov	r3, r1
 800380c:	4601      	mov	r1, r0
 800380e:	4618      	mov	r0, r3
 8003810:	f000 b800 	b.w	8003814 <__cxa_atexit>

08003814 <__cxa_atexit>:
 8003814:	b510      	push	{r4, lr}
 8003816:	4c05      	ldr	r4, [pc, #20]	; (800382c <__cxa_atexit+0x18>)
 8003818:	4613      	mov	r3, r2
 800381a:	b12c      	cbz	r4, 8003828 <__cxa_atexit+0x14>
 800381c:	460a      	mov	r2, r1
 800381e:	4601      	mov	r1, r0
 8003820:	2002      	movs	r0, #2
 8003822:	f3af 8000 	nop.w
 8003826:	bd10      	pop	{r4, pc}
 8003828:	4620      	mov	r0, r4
 800382a:	bd10      	pop	{r4, pc}
 800382c:	00000000 	.word	0x00000000

08003830 <__libc_init_array>:
 8003830:	b570      	push	{r4, r5, r6, lr}
 8003832:	4e0d      	ldr	r6, [pc, #52]	; (8003868 <__libc_init_array+0x38>)
 8003834:	4c0d      	ldr	r4, [pc, #52]	; (800386c <__libc_init_array+0x3c>)
 8003836:	1ba4      	subs	r4, r4, r6
 8003838:	10a4      	asrs	r4, r4, #2
 800383a:	2500      	movs	r5, #0
 800383c:	42a5      	cmp	r5, r4
 800383e:	d109      	bne.n	8003854 <__libc_init_array+0x24>
 8003840:	4e0b      	ldr	r6, [pc, #44]	; (8003870 <__libc_init_array+0x40>)
 8003842:	4c0c      	ldr	r4, [pc, #48]	; (8003874 <__libc_init_array+0x44>)
 8003844:	f000 fca8 	bl	8004198 <_init>
 8003848:	1ba4      	subs	r4, r4, r6
 800384a:	10a4      	asrs	r4, r4, #2
 800384c:	2500      	movs	r5, #0
 800384e:	42a5      	cmp	r5, r4
 8003850:	d105      	bne.n	800385e <__libc_init_array+0x2e>
 8003852:	bd70      	pop	{r4, r5, r6, pc}
 8003854:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003858:	4798      	blx	r3
 800385a:	3501      	adds	r5, #1
 800385c:	e7ee      	b.n	800383c <__libc_init_array+0xc>
 800385e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003862:	4798      	blx	r3
 8003864:	3501      	adds	r5, #1
 8003866:	e7f2      	b.n	800384e <__libc_init_array+0x1e>
 8003868:	080043bc 	.word	0x080043bc
 800386c:	080043bc 	.word	0x080043bc
 8003870:	080043bc 	.word	0x080043bc
 8003874:	080043c4 	.word	0x080043c4

08003878 <memset>:
 8003878:	4402      	add	r2, r0
 800387a:	4603      	mov	r3, r0
 800387c:	4293      	cmp	r3, r2
 800387e:	d100      	bne.n	8003882 <memset+0xa>
 8003880:	4770      	bx	lr
 8003882:	f803 1b01 	strb.w	r1, [r3], #1
 8003886:	e7f9      	b.n	800387c <memset+0x4>

08003888 <siprintf>:
 8003888:	b40e      	push	{r1, r2, r3}
 800388a:	b500      	push	{lr}
 800388c:	b09c      	sub	sp, #112	; 0x70
 800388e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003892:	ab1d      	add	r3, sp, #116	; 0x74
 8003894:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003898:	9002      	str	r0, [sp, #8]
 800389a:	9006      	str	r0, [sp, #24]
 800389c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80038a0:	480a      	ldr	r0, [pc, #40]	; (80038cc <siprintf+0x44>)
 80038a2:	9104      	str	r1, [sp, #16]
 80038a4:	9107      	str	r1, [sp, #28]
 80038a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80038aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80038ae:	f8ad 1016 	strh.w	r1, [sp, #22]
 80038b2:	6800      	ldr	r0, [r0, #0]
 80038b4:	9301      	str	r3, [sp, #4]
 80038b6:	a902      	add	r1, sp, #8
 80038b8:	f000 f866 	bl	8003988 <_svfiprintf_r>
 80038bc:	9b02      	ldr	r3, [sp, #8]
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]
 80038c2:	b01c      	add	sp, #112	; 0x70
 80038c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80038c8:	b003      	add	sp, #12
 80038ca:	4770      	bx	lr
 80038cc:	20000010 	.word	0x20000010

080038d0 <__ssputs_r>:
 80038d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038d4:	688e      	ldr	r6, [r1, #8]
 80038d6:	429e      	cmp	r6, r3
 80038d8:	4682      	mov	sl, r0
 80038da:	460c      	mov	r4, r1
 80038dc:	4691      	mov	r9, r2
 80038de:	4698      	mov	r8, r3
 80038e0:	d835      	bhi.n	800394e <__ssputs_r+0x7e>
 80038e2:	898a      	ldrh	r2, [r1, #12]
 80038e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80038e8:	d031      	beq.n	800394e <__ssputs_r+0x7e>
 80038ea:	6825      	ldr	r5, [r4, #0]
 80038ec:	6909      	ldr	r1, [r1, #16]
 80038ee:	1a6f      	subs	r7, r5, r1
 80038f0:	6965      	ldr	r5, [r4, #20]
 80038f2:	2302      	movs	r3, #2
 80038f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80038fc:	f108 0301 	add.w	r3, r8, #1
 8003900:	443b      	add	r3, r7
 8003902:	429d      	cmp	r5, r3
 8003904:	bf38      	it	cc
 8003906:	461d      	movcc	r5, r3
 8003908:	0553      	lsls	r3, r2, #21
 800390a:	d531      	bpl.n	8003970 <__ssputs_r+0xa0>
 800390c:	4629      	mov	r1, r5
 800390e:	f000 fb39 	bl	8003f84 <_malloc_r>
 8003912:	4606      	mov	r6, r0
 8003914:	b950      	cbnz	r0, 800392c <__ssputs_r+0x5c>
 8003916:	230c      	movs	r3, #12
 8003918:	f8ca 3000 	str.w	r3, [sl]
 800391c:	89a3      	ldrh	r3, [r4, #12]
 800391e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003922:	81a3      	strh	r3, [r4, #12]
 8003924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800392c:	463a      	mov	r2, r7
 800392e:	6921      	ldr	r1, [r4, #16]
 8003930:	f000 fab4 	bl	8003e9c <memcpy>
 8003934:	89a3      	ldrh	r3, [r4, #12]
 8003936:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800393a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800393e:	81a3      	strh	r3, [r4, #12]
 8003940:	6126      	str	r6, [r4, #16]
 8003942:	6165      	str	r5, [r4, #20]
 8003944:	443e      	add	r6, r7
 8003946:	1bed      	subs	r5, r5, r7
 8003948:	6026      	str	r6, [r4, #0]
 800394a:	60a5      	str	r5, [r4, #8]
 800394c:	4646      	mov	r6, r8
 800394e:	4546      	cmp	r6, r8
 8003950:	bf28      	it	cs
 8003952:	4646      	movcs	r6, r8
 8003954:	4632      	mov	r2, r6
 8003956:	4649      	mov	r1, r9
 8003958:	6820      	ldr	r0, [r4, #0]
 800395a:	f000 faaa 	bl	8003eb2 <memmove>
 800395e:	68a3      	ldr	r3, [r4, #8]
 8003960:	1b9b      	subs	r3, r3, r6
 8003962:	60a3      	str	r3, [r4, #8]
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	441e      	add	r6, r3
 8003968:	6026      	str	r6, [r4, #0]
 800396a:	2000      	movs	r0, #0
 800396c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003970:	462a      	mov	r2, r5
 8003972:	f000 fb65 	bl	8004040 <_realloc_r>
 8003976:	4606      	mov	r6, r0
 8003978:	2800      	cmp	r0, #0
 800397a:	d1e1      	bne.n	8003940 <__ssputs_r+0x70>
 800397c:	6921      	ldr	r1, [r4, #16]
 800397e:	4650      	mov	r0, sl
 8003980:	f000 fab2 	bl	8003ee8 <_free_r>
 8003984:	e7c7      	b.n	8003916 <__ssputs_r+0x46>
	...

08003988 <_svfiprintf_r>:
 8003988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800398c:	b09d      	sub	sp, #116	; 0x74
 800398e:	4680      	mov	r8, r0
 8003990:	9303      	str	r3, [sp, #12]
 8003992:	898b      	ldrh	r3, [r1, #12]
 8003994:	061c      	lsls	r4, r3, #24
 8003996:	460d      	mov	r5, r1
 8003998:	4616      	mov	r6, r2
 800399a:	d50f      	bpl.n	80039bc <_svfiprintf_r+0x34>
 800399c:	690b      	ldr	r3, [r1, #16]
 800399e:	b96b      	cbnz	r3, 80039bc <_svfiprintf_r+0x34>
 80039a0:	2140      	movs	r1, #64	; 0x40
 80039a2:	f000 faef 	bl	8003f84 <_malloc_r>
 80039a6:	6028      	str	r0, [r5, #0]
 80039a8:	6128      	str	r0, [r5, #16]
 80039aa:	b928      	cbnz	r0, 80039b8 <_svfiprintf_r+0x30>
 80039ac:	230c      	movs	r3, #12
 80039ae:	f8c8 3000 	str.w	r3, [r8]
 80039b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039b6:	e0c5      	b.n	8003b44 <_svfiprintf_r+0x1bc>
 80039b8:	2340      	movs	r3, #64	; 0x40
 80039ba:	616b      	str	r3, [r5, #20]
 80039bc:	2300      	movs	r3, #0
 80039be:	9309      	str	r3, [sp, #36]	; 0x24
 80039c0:	2320      	movs	r3, #32
 80039c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039c6:	2330      	movs	r3, #48	; 0x30
 80039c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039cc:	f04f 0b01 	mov.w	fp, #1
 80039d0:	4637      	mov	r7, r6
 80039d2:	463c      	mov	r4, r7
 80039d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d13c      	bne.n	8003a56 <_svfiprintf_r+0xce>
 80039dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80039e0:	d00b      	beq.n	80039fa <_svfiprintf_r+0x72>
 80039e2:	4653      	mov	r3, sl
 80039e4:	4632      	mov	r2, r6
 80039e6:	4629      	mov	r1, r5
 80039e8:	4640      	mov	r0, r8
 80039ea:	f7ff ff71 	bl	80038d0 <__ssputs_r>
 80039ee:	3001      	adds	r0, #1
 80039f0:	f000 80a3 	beq.w	8003b3a <_svfiprintf_r+0x1b2>
 80039f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039f6:	4453      	add	r3, sl
 80039f8:	9309      	str	r3, [sp, #36]	; 0x24
 80039fa:	783b      	ldrb	r3, [r7, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 809c 	beq.w	8003b3a <_svfiprintf_r+0x1b2>
 8003a02:	2300      	movs	r3, #0
 8003a04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003a08:	9304      	str	r3, [sp, #16]
 8003a0a:	9307      	str	r3, [sp, #28]
 8003a0c:	9205      	str	r2, [sp, #20]
 8003a0e:	9306      	str	r3, [sp, #24]
 8003a10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a14:	931a      	str	r3, [sp, #104]	; 0x68
 8003a16:	2205      	movs	r2, #5
 8003a18:	7821      	ldrb	r1, [r4, #0]
 8003a1a:	4850      	ldr	r0, [pc, #320]	; (8003b5c <_svfiprintf_r+0x1d4>)
 8003a1c:	f7fc fbd8 	bl	80001d0 <memchr>
 8003a20:	1c67      	adds	r7, r4, #1
 8003a22:	9b04      	ldr	r3, [sp, #16]
 8003a24:	b9d8      	cbnz	r0, 8003a5e <_svfiprintf_r+0xd6>
 8003a26:	06d9      	lsls	r1, r3, #27
 8003a28:	bf44      	itt	mi
 8003a2a:	2220      	movmi	r2, #32
 8003a2c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a30:	071a      	lsls	r2, r3, #28
 8003a32:	bf44      	itt	mi
 8003a34:	222b      	movmi	r2, #43	; 0x2b
 8003a36:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003a3a:	7822      	ldrb	r2, [r4, #0]
 8003a3c:	2a2a      	cmp	r2, #42	; 0x2a
 8003a3e:	d016      	beq.n	8003a6e <_svfiprintf_r+0xe6>
 8003a40:	9a07      	ldr	r2, [sp, #28]
 8003a42:	2100      	movs	r1, #0
 8003a44:	200a      	movs	r0, #10
 8003a46:	4627      	mov	r7, r4
 8003a48:	3401      	adds	r4, #1
 8003a4a:	783b      	ldrb	r3, [r7, #0]
 8003a4c:	3b30      	subs	r3, #48	; 0x30
 8003a4e:	2b09      	cmp	r3, #9
 8003a50:	d951      	bls.n	8003af6 <_svfiprintf_r+0x16e>
 8003a52:	b1c9      	cbz	r1, 8003a88 <_svfiprintf_r+0x100>
 8003a54:	e011      	b.n	8003a7a <_svfiprintf_r+0xf2>
 8003a56:	2b25      	cmp	r3, #37	; 0x25
 8003a58:	d0c0      	beq.n	80039dc <_svfiprintf_r+0x54>
 8003a5a:	4627      	mov	r7, r4
 8003a5c:	e7b9      	b.n	80039d2 <_svfiprintf_r+0x4a>
 8003a5e:	4a3f      	ldr	r2, [pc, #252]	; (8003b5c <_svfiprintf_r+0x1d4>)
 8003a60:	1a80      	subs	r0, r0, r2
 8003a62:	fa0b f000 	lsl.w	r0, fp, r0
 8003a66:	4318      	orrs	r0, r3
 8003a68:	9004      	str	r0, [sp, #16]
 8003a6a:	463c      	mov	r4, r7
 8003a6c:	e7d3      	b.n	8003a16 <_svfiprintf_r+0x8e>
 8003a6e:	9a03      	ldr	r2, [sp, #12]
 8003a70:	1d11      	adds	r1, r2, #4
 8003a72:	6812      	ldr	r2, [r2, #0]
 8003a74:	9103      	str	r1, [sp, #12]
 8003a76:	2a00      	cmp	r2, #0
 8003a78:	db01      	blt.n	8003a7e <_svfiprintf_r+0xf6>
 8003a7a:	9207      	str	r2, [sp, #28]
 8003a7c:	e004      	b.n	8003a88 <_svfiprintf_r+0x100>
 8003a7e:	4252      	negs	r2, r2
 8003a80:	f043 0302 	orr.w	r3, r3, #2
 8003a84:	9207      	str	r2, [sp, #28]
 8003a86:	9304      	str	r3, [sp, #16]
 8003a88:	783b      	ldrb	r3, [r7, #0]
 8003a8a:	2b2e      	cmp	r3, #46	; 0x2e
 8003a8c:	d10e      	bne.n	8003aac <_svfiprintf_r+0x124>
 8003a8e:	787b      	ldrb	r3, [r7, #1]
 8003a90:	2b2a      	cmp	r3, #42	; 0x2a
 8003a92:	f107 0101 	add.w	r1, r7, #1
 8003a96:	d132      	bne.n	8003afe <_svfiprintf_r+0x176>
 8003a98:	9b03      	ldr	r3, [sp, #12]
 8003a9a:	1d1a      	adds	r2, r3, #4
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	9203      	str	r2, [sp, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bfb8      	it	lt
 8003aa4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003aa8:	3702      	adds	r7, #2
 8003aaa:	9305      	str	r3, [sp, #20]
 8003aac:	4c2c      	ldr	r4, [pc, #176]	; (8003b60 <_svfiprintf_r+0x1d8>)
 8003aae:	7839      	ldrb	r1, [r7, #0]
 8003ab0:	2203      	movs	r2, #3
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	f7fc fb8c 	bl	80001d0 <memchr>
 8003ab8:	b138      	cbz	r0, 8003aca <_svfiprintf_r+0x142>
 8003aba:	2340      	movs	r3, #64	; 0x40
 8003abc:	1b00      	subs	r0, r0, r4
 8003abe:	fa03 f000 	lsl.w	r0, r3, r0
 8003ac2:	9b04      	ldr	r3, [sp, #16]
 8003ac4:	4303      	orrs	r3, r0
 8003ac6:	9304      	str	r3, [sp, #16]
 8003ac8:	3701      	adds	r7, #1
 8003aca:	7839      	ldrb	r1, [r7, #0]
 8003acc:	4825      	ldr	r0, [pc, #148]	; (8003b64 <_svfiprintf_r+0x1dc>)
 8003ace:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003ad2:	2206      	movs	r2, #6
 8003ad4:	1c7e      	adds	r6, r7, #1
 8003ad6:	f7fc fb7b 	bl	80001d0 <memchr>
 8003ada:	2800      	cmp	r0, #0
 8003adc:	d035      	beq.n	8003b4a <_svfiprintf_r+0x1c2>
 8003ade:	4b22      	ldr	r3, [pc, #136]	; (8003b68 <_svfiprintf_r+0x1e0>)
 8003ae0:	b9fb      	cbnz	r3, 8003b22 <_svfiprintf_r+0x19a>
 8003ae2:	9b03      	ldr	r3, [sp, #12]
 8003ae4:	3307      	adds	r3, #7
 8003ae6:	f023 0307 	bic.w	r3, r3, #7
 8003aea:	3308      	adds	r3, #8
 8003aec:	9303      	str	r3, [sp, #12]
 8003aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003af0:	444b      	add	r3, r9
 8003af2:	9309      	str	r3, [sp, #36]	; 0x24
 8003af4:	e76c      	b.n	80039d0 <_svfiprintf_r+0x48>
 8003af6:	fb00 3202 	mla	r2, r0, r2, r3
 8003afa:	2101      	movs	r1, #1
 8003afc:	e7a3      	b.n	8003a46 <_svfiprintf_r+0xbe>
 8003afe:	2300      	movs	r3, #0
 8003b00:	9305      	str	r3, [sp, #20]
 8003b02:	4618      	mov	r0, r3
 8003b04:	240a      	movs	r4, #10
 8003b06:	460f      	mov	r7, r1
 8003b08:	3101      	adds	r1, #1
 8003b0a:	783a      	ldrb	r2, [r7, #0]
 8003b0c:	3a30      	subs	r2, #48	; 0x30
 8003b0e:	2a09      	cmp	r2, #9
 8003b10:	d903      	bls.n	8003b1a <_svfiprintf_r+0x192>
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d0ca      	beq.n	8003aac <_svfiprintf_r+0x124>
 8003b16:	9005      	str	r0, [sp, #20]
 8003b18:	e7c8      	b.n	8003aac <_svfiprintf_r+0x124>
 8003b1a:	fb04 2000 	mla	r0, r4, r0, r2
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e7f1      	b.n	8003b06 <_svfiprintf_r+0x17e>
 8003b22:	ab03      	add	r3, sp, #12
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	462a      	mov	r2, r5
 8003b28:	4b10      	ldr	r3, [pc, #64]	; (8003b6c <_svfiprintf_r+0x1e4>)
 8003b2a:	a904      	add	r1, sp, #16
 8003b2c:	4640      	mov	r0, r8
 8003b2e:	f3af 8000 	nop.w
 8003b32:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003b36:	4681      	mov	r9, r0
 8003b38:	d1d9      	bne.n	8003aee <_svfiprintf_r+0x166>
 8003b3a:	89ab      	ldrh	r3, [r5, #12]
 8003b3c:	065b      	lsls	r3, r3, #25
 8003b3e:	f53f af38 	bmi.w	80039b2 <_svfiprintf_r+0x2a>
 8003b42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b44:	b01d      	add	sp, #116	; 0x74
 8003b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b4a:	ab03      	add	r3, sp, #12
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	462a      	mov	r2, r5
 8003b50:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <_svfiprintf_r+0x1e4>)
 8003b52:	a904      	add	r1, sp, #16
 8003b54:	4640      	mov	r0, r8
 8003b56:	f000 f881 	bl	8003c5c <_printf_i>
 8003b5a:	e7ea      	b.n	8003b32 <_svfiprintf_r+0x1aa>
 8003b5c:	080041dd 	.word	0x080041dd
 8003b60:	080041e3 	.word	0x080041e3
 8003b64:	080041e7 	.word	0x080041e7
 8003b68:	00000000 	.word	0x00000000
 8003b6c:	080038d1 	.word	0x080038d1

08003b70 <_printf_common>:
 8003b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b74:	4691      	mov	r9, r2
 8003b76:	461f      	mov	r7, r3
 8003b78:	688a      	ldr	r2, [r1, #8]
 8003b7a:	690b      	ldr	r3, [r1, #16]
 8003b7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b80:	4293      	cmp	r3, r2
 8003b82:	bfb8      	it	lt
 8003b84:	4613      	movlt	r3, r2
 8003b86:	f8c9 3000 	str.w	r3, [r9]
 8003b8a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b8e:	4606      	mov	r6, r0
 8003b90:	460c      	mov	r4, r1
 8003b92:	b112      	cbz	r2, 8003b9a <_printf_common+0x2a>
 8003b94:	3301      	adds	r3, #1
 8003b96:	f8c9 3000 	str.w	r3, [r9]
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	0699      	lsls	r1, r3, #26
 8003b9e:	bf42      	ittt	mi
 8003ba0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003ba4:	3302      	addmi	r3, #2
 8003ba6:	f8c9 3000 	strmi.w	r3, [r9]
 8003baa:	6825      	ldr	r5, [r4, #0]
 8003bac:	f015 0506 	ands.w	r5, r5, #6
 8003bb0:	d107      	bne.n	8003bc2 <_printf_common+0x52>
 8003bb2:	f104 0a19 	add.w	sl, r4, #25
 8003bb6:	68e3      	ldr	r3, [r4, #12]
 8003bb8:	f8d9 2000 	ldr.w	r2, [r9]
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	429d      	cmp	r5, r3
 8003bc0:	db29      	blt.n	8003c16 <_printf_common+0xa6>
 8003bc2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003bc6:	6822      	ldr	r2, [r4, #0]
 8003bc8:	3300      	adds	r3, #0
 8003bca:	bf18      	it	ne
 8003bcc:	2301      	movne	r3, #1
 8003bce:	0692      	lsls	r2, r2, #26
 8003bd0:	d42e      	bmi.n	8003c30 <_printf_common+0xc0>
 8003bd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003bd6:	4639      	mov	r1, r7
 8003bd8:	4630      	mov	r0, r6
 8003bda:	47c0      	blx	r8
 8003bdc:	3001      	adds	r0, #1
 8003bde:	d021      	beq.n	8003c24 <_printf_common+0xb4>
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	68e5      	ldr	r5, [r4, #12]
 8003be4:	f8d9 2000 	ldr.w	r2, [r9]
 8003be8:	f003 0306 	and.w	r3, r3, #6
 8003bec:	2b04      	cmp	r3, #4
 8003bee:	bf08      	it	eq
 8003bf0:	1aad      	subeq	r5, r5, r2
 8003bf2:	68a3      	ldr	r3, [r4, #8]
 8003bf4:	6922      	ldr	r2, [r4, #16]
 8003bf6:	bf0c      	ite	eq
 8003bf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bfc:	2500      	movne	r5, #0
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	bfc4      	itt	gt
 8003c02:	1a9b      	subgt	r3, r3, r2
 8003c04:	18ed      	addgt	r5, r5, r3
 8003c06:	f04f 0900 	mov.w	r9, #0
 8003c0a:	341a      	adds	r4, #26
 8003c0c:	454d      	cmp	r5, r9
 8003c0e:	d11b      	bne.n	8003c48 <_printf_common+0xd8>
 8003c10:	2000      	movs	r0, #0
 8003c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c16:	2301      	movs	r3, #1
 8003c18:	4652      	mov	r2, sl
 8003c1a:	4639      	mov	r1, r7
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	47c0      	blx	r8
 8003c20:	3001      	adds	r0, #1
 8003c22:	d103      	bne.n	8003c2c <_printf_common+0xbc>
 8003c24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c2c:	3501      	adds	r5, #1
 8003c2e:	e7c2      	b.n	8003bb6 <_printf_common+0x46>
 8003c30:	18e1      	adds	r1, r4, r3
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	2030      	movs	r0, #48	; 0x30
 8003c36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c3a:	4422      	add	r2, r4
 8003c3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c44:	3302      	adds	r3, #2
 8003c46:	e7c4      	b.n	8003bd2 <_printf_common+0x62>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	4622      	mov	r2, r4
 8003c4c:	4639      	mov	r1, r7
 8003c4e:	4630      	mov	r0, r6
 8003c50:	47c0      	blx	r8
 8003c52:	3001      	adds	r0, #1
 8003c54:	d0e6      	beq.n	8003c24 <_printf_common+0xb4>
 8003c56:	f109 0901 	add.w	r9, r9, #1
 8003c5a:	e7d7      	b.n	8003c0c <_printf_common+0x9c>

08003c5c <_printf_i>:
 8003c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c60:	4617      	mov	r7, r2
 8003c62:	7e0a      	ldrb	r2, [r1, #24]
 8003c64:	b085      	sub	sp, #20
 8003c66:	2a6e      	cmp	r2, #110	; 0x6e
 8003c68:	4698      	mov	r8, r3
 8003c6a:	4606      	mov	r6, r0
 8003c6c:	460c      	mov	r4, r1
 8003c6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c70:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003c74:	f000 80bc 	beq.w	8003df0 <_printf_i+0x194>
 8003c78:	d81a      	bhi.n	8003cb0 <_printf_i+0x54>
 8003c7a:	2a63      	cmp	r2, #99	; 0x63
 8003c7c:	d02e      	beq.n	8003cdc <_printf_i+0x80>
 8003c7e:	d80a      	bhi.n	8003c96 <_printf_i+0x3a>
 8003c80:	2a00      	cmp	r2, #0
 8003c82:	f000 80c8 	beq.w	8003e16 <_printf_i+0x1ba>
 8003c86:	2a58      	cmp	r2, #88	; 0x58
 8003c88:	f000 808a 	beq.w	8003da0 <_printf_i+0x144>
 8003c8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c90:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8003c94:	e02a      	b.n	8003cec <_printf_i+0x90>
 8003c96:	2a64      	cmp	r2, #100	; 0x64
 8003c98:	d001      	beq.n	8003c9e <_printf_i+0x42>
 8003c9a:	2a69      	cmp	r2, #105	; 0x69
 8003c9c:	d1f6      	bne.n	8003c8c <_printf_i+0x30>
 8003c9e:	6821      	ldr	r1, [r4, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	f011 0f80 	tst.w	r1, #128	; 0x80
 8003ca6:	d023      	beq.n	8003cf0 <_printf_i+0x94>
 8003ca8:	1d11      	adds	r1, r2, #4
 8003caa:	6019      	str	r1, [r3, #0]
 8003cac:	6813      	ldr	r3, [r2, #0]
 8003cae:	e027      	b.n	8003d00 <_printf_i+0xa4>
 8003cb0:	2a73      	cmp	r2, #115	; 0x73
 8003cb2:	f000 80b4 	beq.w	8003e1e <_printf_i+0x1c2>
 8003cb6:	d808      	bhi.n	8003cca <_printf_i+0x6e>
 8003cb8:	2a6f      	cmp	r2, #111	; 0x6f
 8003cba:	d02a      	beq.n	8003d12 <_printf_i+0xb6>
 8003cbc:	2a70      	cmp	r2, #112	; 0x70
 8003cbe:	d1e5      	bne.n	8003c8c <_printf_i+0x30>
 8003cc0:	680a      	ldr	r2, [r1, #0]
 8003cc2:	f042 0220 	orr.w	r2, r2, #32
 8003cc6:	600a      	str	r2, [r1, #0]
 8003cc8:	e003      	b.n	8003cd2 <_printf_i+0x76>
 8003cca:	2a75      	cmp	r2, #117	; 0x75
 8003ccc:	d021      	beq.n	8003d12 <_printf_i+0xb6>
 8003cce:	2a78      	cmp	r2, #120	; 0x78
 8003cd0:	d1dc      	bne.n	8003c8c <_printf_i+0x30>
 8003cd2:	2278      	movs	r2, #120	; 0x78
 8003cd4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8003cd8:	496e      	ldr	r1, [pc, #440]	; (8003e94 <_printf_i+0x238>)
 8003cda:	e064      	b.n	8003da6 <_printf_i+0x14a>
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8003ce2:	1d11      	adds	r1, r2, #4
 8003ce4:	6019      	str	r1, [r3, #0]
 8003ce6:	6813      	ldr	r3, [r2, #0]
 8003ce8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0a3      	b.n	8003e38 <_printf_i+0x1dc>
 8003cf0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003cf4:	f102 0104 	add.w	r1, r2, #4
 8003cf8:	6019      	str	r1, [r3, #0]
 8003cfa:	d0d7      	beq.n	8003cac <_printf_i+0x50>
 8003cfc:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	da03      	bge.n	8003d0c <_printf_i+0xb0>
 8003d04:	222d      	movs	r2, #45	; 0x2d
 8003d06:	425b      	negs	r3, r3
 8003d08:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003d0c:	4962      	ldr	r1, [pc, #392]	; (8003e98 <_printf_i+0x23c>)
 8003d0e:	220a      	movs	r2, #10
 8003d10:	e017      	b.n	8003d42 <_printf_i+0xe6>
 8003d12:	6820      	ldr	r0, [r4, #0]
 8003d14:	6819      	ldr	r1, [r3, #0]
 8003d16:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003d1a:	d003      	beq.n	8003d24 <_printf_i+0xc8>
 8003d1c:	1d08      	adds	r0, r1, #4
 8003d1e:	6018      	str	r0, [r3, #0]
 8003d20:	680b      	ldr	r3, [r1, #0]
 8003d22:	e006      	b.n	8003d32 <_printf_i+0xd6>
 8003d24:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d28:	f101 0004 	add.w	r0, r1, #4
 8003d2c:	6018      	str	r0, [r3, #0]
 8003d2e:	d0f7      	beq.n	8003d20 <_printf_i+0xc4>
 8003d30:	880b      	ldrh	r3, [r1, #0]
 8003d32:	4959      	ldr	r1, [pc, #356]	; (8003e98 <_printf_i+0x23c>)
 8003d34:	2a6f      	cmp	r2, #111	; 0x6f
 8003d36:	bf14      	ite	ne
 8003d38:	220a      	movne	r2, #10
 8003d3a:	2208      	moveq	r2, #8
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003d42:	6865      	ldr	r5, [r4, #4]
 8003d44:	60a5      	str	r5, [r4, #8]
 8003d46:	2d00      	cmp	r5, #0
 8003d48:	f2c0 809c 	blt.w	8003e84 <_printf_i+0x228>
 8003d4c:	6820      	ldr	r0, [r4, #0]
 8003d4e:	f020 0004 	bic.w	r0, r0, #4
 8003d52:	6020      	str	r0, [r4, #0]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d13f      	bne.n	8003dd8 <_printf_i+0x17c>
 8003d58:	2d00      	cmp	r5, #0
 8003d5a:	f040 8095 	bne.w	8003e88 <_printf_i+0x22c>
 8003d5e:	4675      	mov	r5, lr
 8003d60:	2a08      	cmp	r2, #8
 8003d62:	d10b      	bne.n	8003d7c <_printf_i+0x120>
 8003d64:	6823      	ldr	r3, [r4, #0]
 8003d66:	07da      	lsls	r2, r3, #31
 8003d68:	d508      	bpl.n	8003d7c <_printf_i+0x120>
 8003d6a:	6923      	ldr	r3, [r4, #16]
 8003d6c:	6862      	ldr	r2, [r4, #4]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	bfde      	ittt	le
 8003d72:	2330      	movle	r3, #48	; 0x30
 8003d74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d78:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003d7c:	ebae 0305 	sub.w	r3, lr, r5
 8003d80:	6123      	str	r3, [r4, #16]
 8003d82:	f8cd 8000 	str.w	r8, [sp]
 8003d86:	463b      	mov	r3, r7
 8003d88:	aa03      	add	r2, sp, #12
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	f7ff feef 	bl	8003b70 <_printf_common>
 8003d92:	3001      	adds	r0, #1
 8003d94:	d155      	bne.n	8003e42 <_printf_i+0x1e6>
 8003d96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d9a:	b005      	add	sp, #20
 8003d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003da0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8003da4:	493c      	ldr	r1, [pc, #240]	; (8003e98 <_printf_i+0x23c>)
 8003da6:	6822      	ldr	r2, [r4, #0]
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003dae:	f100 0504 	add.w	r5, r0, #4
 8003db2:	601d      	str	r5, [r3, #0]
 8003db4:	d001      	beq.n	8003dba <_printf_i+0x15e>
 8003db6:	6803      	ldr	r3, [r0, #0]
 8003db8:	e002      	b.n	8003dc0 <_printf_i+0x164>
 8003dba:	0655      	lsls	r5, r2, #25
 8003dbc:	d5fb      	bpl.n	8003db6 <_printf_i+0x15a>
 8003dbe:	8803      	ldrh	r3, [r0, #0]
 8003dc0:	07d0      	lsls	r0, r2, #31
 8003dc2:	bf44      	itt	mi
 8003dc4:	f042 0220 	orrmi.w	r2, r2, #32
 8003dc8:	6022      	strmi	r2, [r4, #0]
 8003dca:	b91b      	cbnz	r3, 8003dd4 <_printf_i+0x178>
 8003dcc:	6822      	ldr	r2, [r4, #0]
 8003dce:	f022 0220 	bic.w	r2, r2, #32
 8003dd2:	6022      	str	r2, [r4, #0]
 8003dd4:	2210      	movs	r2, #16
 8003dd6:	e7b1      	b.n	8003d3c <_printf_i+0xe0>
 8003dd8:	4675      	mov	r5, lr
 8003dda:	fbb3 f0f2 	udiv	r0, r3, r2
 8003dde:	fb02 3310 	mls	r3, r2, r0, r3
 8003de2:	5ccb      	ldrb	r3, [r1, r3]
 8003de4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003de8:	4603      	mov	r3, r0
 8003dea:	2800      	cmp	r0, #0
 8003dec:	d1f5      	bne.n	8003dda <_printf_i+0x17e>
 8003dee:	e7b7      	b.n	8003d60 <_printf_i+0x104>
 8003df0:	6808      	ldr	r0, [r1, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	6949      	ldr	r1, [r1, #20]
 8003df6:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003dfa:	d004      	beq.n	8003e06 <_printf_i+0x1aa>
 8003dfc:	1d10      	adds	r0, r2, #4
 8003dfe:	6018      	str	r0, [r3, #0]
 8003e00:	6813      	ldr	r3, [r2, #0]
 8003e02:	6019      	str	r1, [r3, #0]
 8003e04:	e007      	b.n	8003e16 <_printf_i+0x1ba>
 8003e06:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003e0a:	f102 0004 	add.w	r0, r2, #4
 8003e0e:	6018      	str	r0, [r3, #0]
 8003e10:	6813      	ldr	r3, [r2, #0]
 8003e12:	d0f6      	beq.n	8003e02 <_printf_i+0x1a6>
 8003e14:	8019      	strh	r1, [r3, #0]
 8003e16:	2300      	movs	r3, #0
 8003e18:	6123      	str	r3, [r4, #16]
 8003e1a:	4675      	mov	r5, lr
 8003e1c:	e7b1      	b.n	8003d82 <_printf_i+0x126>
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	1d11      	adds	r1, r2, #4
 8003e22:	6019      	str	r1, [r3, #0]
 8003e24:	6815      	ldr	r5, [r2, #0]
 8003e26:	6862      	ldr	r2, [r4, #4]
 8003e28:	2100      	movs	r1, #0
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	f7fc f9d0 	bl	80001d0 <memchr>
 8003e30:	b108      	cbz	r0, 8003e36 <_printf_i+0x1da>
 8003e32:	1b40      	subs	r0, r0, r5
 8003e34:	6060      	str	r0, [r4, #4]
 8003e36:	6863      	ldr	r3, [r4, #4]
 8003e38:	6123      	str	r3, [r4, #16]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e40:	e79f      	b.n	8003d82 <_printf_i+0x126>
 8003e42:	6923      	ldr	r3, [r4, #16]
 8003e44:	462a      	mov	r2, r5
 8003e46:	4639      	mov	r1, r7
 8003e48:	4630      	mov	r0, r6
 8003e4a:	47c0      	blx	r8
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	d0a2      	beq.n	8003d96 <_printf_i+0x13a>
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	079b      	lsls	r3, r3, #30
 8003e54:	d507      	bpl.n	8003e66 <_printf_i+0x20a>
 8003e56:	2500      	movs	r5, #0
 8003e58:	f104 0919 	add.w	r9, r4, #25
 8003e5c:	68e3      	ldr	r3, [r4, #12]
 8003e5e:	9a03      	ldr	r2, [sp, #12]
 8003e60:	1a9b      	subs	r3, r3, r2
 8003e62:	429d      	cmp	r5, r3
 8003e64:	db05      	blt.n	8003e72 <_printf_i+0x216>
 8003e66:	68e0      	ldr	r0, [r4, #12]
 8003e68:	9b03      	ldr	r3, [sp, #12]
 8003e6a:	4298      	cmp	r0, r3
 8003e6c:	bfb8      	it	lt
 8003e6e:	4618      	movlt	r0, r3
 8003e70:	e793      	b.n	8003d9a <_printf_i+0x13e>
 8003e72:	2301      	movs	r3, #1
 8003e74:	464a      	mov	r2, r9
 8003e76:	4639      	mov	r1, r7
 8003e78:	4630      	mov	r0, r6
 8003e7a:	47c0      	blx	r8
 8003e7c:	3001      	adds	r0, #1
 8003e7e:	d08a      	beq.n	8003d96 <_printf_i+0x13a>
 8003e80:	3501      	adds	r5, #1
 8003e82:	e7eb      	b.n	8003e5c <_printf_i+0x200>
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1a7      	bne.n	8003dd8 <_printf_i+0x17c>
 8003e88:	780b      	ldrb	r3, [r1, #0]
 8003e8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003e8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e92:	e765      	b.n	8003d60 <_printf_i+0x104>
 8003e94:	080041ff 	.word	0x080041ff
 8003e98:	080041ee 	.word	0x080041ee

08003e9c <memcpy>:
 8003e9c:	b510      	push	{r4, lr}
 8003e9e:	1e43      	subs	r3, r0, #1
 8003ea0:	440a      	add	r2, r1
 8003ea2:	4291      	cmp	r1, r2
 8003ea4:	d100      	bne.n	8003ea8 <memcpy+0xc>
 8003ea6:	bd10      	pop	{r4, pc}
 8003ea8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003eb0:	e7f7      	b.n	8003ea2 <memcpy+0x6>

08003eb2 <memmove>:
 8003eb2:	4288      	cmp	r0, r1
 8003eb4:	b510      	push	{r4, lr}
 8003eb6:	eb01 0302 	add.w	r3, r1, r2
 8003eba:	d803      	bhi.n	8003ec4 <memmove+0x12>
 8003ebc:	1e42      	subs	r2, r0, #1
 8003ebe:	4299      	cmp	r1, r3
 8003ec0:	d10c      	bne.n	8003edc <memmove+0x2a>
 8003ec2:	bd10      	pop	{r4, pc}
 8003ec4:	4298      	cmp	r0, r3
 8003ec6:	d2f9      	bcs.n	8003ebc <memmove+0xa>
 8003ec8:	1881      	adds	r1, r0, r2
 8003eca:	1ad2      	subs	r2, r2, r3
 8003ecc:	42d3      	cmn	r3, r2
 8003ece:	d100      	bne.n	8003ed2 <memmove+0x20>
 8003ed0:	bd10      	pop	{r4, pc}
 8003ed2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ed6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003eda:	e7f7      	b.n	8003ecc <memmove+0x1a>
 8003edc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ee0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003ee4:	e7eb      	b.n	8003ebe <memmove+0xc>
	...

08003ee8 <_free_r>:
 8003ee8:	b538      	push	{r3, r4, r5, lr}
 8003eea:	4605      	mov	r5, r0
 8003eec:	2900      	cmp	r1, #0
 8003eee:	d045      	beq.n	8003f7c <_free_r+0x94>
 8003ef0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ef4:	1f0c      	subs	r4, r1, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	bfb8      	it	lt
 8003efa:	18e4      	addlt	r4, r4, r3
 8003efc:	f000 f8d6 	bl	80040ac <__malloc_lock>
 8003f00:	4a1f      	ldr	r2, [pc, #124]	; (8003f80 <_free_r+0x98>)
 8003f02:	6813      	ldr	r3, [r2, #0]
 8003f04:	4610      	mov	r0, r2
 8003f06:	b933      	cbnz	r3, 8003f16 <_free_r+0x2e>
 8003f08:	6063      	str	r3, [r4, #4]
 8003f0a:	6014      	str	r4, [r2, #0]
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f12:	f000 b8cc 	b.w	80040ae <__malloc_unlock>
 8003f16:	42a3      	cmp	r3, r4
 8003f18:	d90c      	bls.n	8003f34 <_free_r+0x4c>
 8003f1a:	6821      	ldr	r1, [r4, #0]
 8003f1c:	1862      	adds	r2, r4, r1
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	bf04      	itt	eq
 8003f22:	681a      	ldreq	r2, [r3, #0]
 8003f24:	685b      	ldreq	r3, [r3, #4]
 8003f26:	6063      	str	r3, [r4, #4]
 8003f28:	bf04      	itt	eq
 8003f2a:	1852      	addeq	r2, r2, r1
 8003f2c:	6022      	streq	r2, [r4, #0]
 8003f2e:	6004      	str	r4, [r0, #0]
 8003f30:	e7ec      	b.n	8003f0c <_free_r+0x24>
 8003f32:	4613      	mov	r3, r2
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	b10a      	cbz	r2, 8003f3c <_free_r+0x54>
 8003f38:	42a2      	cmp	r2, r4
 8003f3a:	d9fa      	bls.n	8003f32 <_free_r+0x4a>
 8003f3c:	6819      	ldr	r1, [r3, #0]
 8003f3e:	1858      	adds	r0, r3, r1
 8003f40:	42a0      	cmp	r0, r4
 8003f42:	d10b      	bne.n	8003f5c <_free_r+0x74>
 8003f44:	6820      	ldr	r0, [r4, #0]
 8003f46:	4401      	add	r1, r0
 8003f48:	1858      	adds	r0, r3, r1
 8003f4a:	4282      	cmp	r2, r0
 8003f4c:	6019      	str	r1, [r3, #0]
 8003f4e:	d1dd      	bne.n	8003f0c <_free_r+0x24>
 8003f50:	6810      	ldr	r0, [r2, #0]
 8003f52:	6852      	ldr	r2, [r2, #4]
 8003f54:	605a      	str	r2, [r3, #4]
 8003f56:	4401      	add	r1, r0
 8003f58:	6019      	str	r1, [r3, #0]
 8003f5a:	e7d7      	b.n	8003f0c <_free_r+0x24>
 8003f5c:	d902      	bls.n	8003f64 <_free_r+0x7c>
 8003f5e:	230c      	movs	r3, #12
 8003f60:	602b      	str	r3, [r5, #0]
 8003f62:	e7d3      	b.n	8003f0c <_free_r+0x24>
 8003f64:	6820      	ldr	r0, [r4, #0]
 8003f66:	1821      	adds	r1, r4, r0
 8003f68:	428a      	cmp	r2, r1
 8003f6a:	bf04      	itt	eq
 8003f6c:	6811      	ldreq	r1, [r2, #0]
 8003f6e:	6852      	ldreq	r2, [r2, #4]
 8003f70:	6062      	str	r2, [r4, #4]
 8003f72:	bf04      	itt	eq
 8003f74:	1809      	addeq	r1, r1, r0
 8003f76:	6021      	streq	r1, [r4, #0]
 8003f78:	605c      	str	r4, [r3, #4]
 8003f7a:	e7c7      	b.n	8003f0c <_free_r+0x24>
 8003f7c:	bd38      	pop	{r3, r4, r5, pc}
 8003f7e:	bf00      	nop
 8003f80:	200001bc 	.word	0x200001bc

08003f84 <_malloc_r>:
 8003f84:	b570      	push	{r4, r5, r6, lr}
 8003f86:	1ccd      	adds	r5, r1, #3
 8003f88:	f025 0503 	bic.w	r5, r5, #3
 8003f8c:	3508      	adds	r5, #8
 8003f8e:	2d0c      	cmp	r5, #12
 8003f90:	bf38      	it	cc
 8003f92:	250c      	movcc	r5, #12
 8003f94:	2d00      	cmp	r5, #0
 8003f96:	4606      	mov	r6, r0
 8003f98:	db01      	blt.n	8003f9e <_malloc_r+0x1a>
 8003f9a:	42a9      	cmp	r1, r5
 8003f9c:	d903      	bls.n	8003fa6 <_malloc_r+0x22>
 8003f9e:	230c      	movs	r3, #12
 8003fa0:	6033      	str	r3, [r6, #0]
 8003fa2:	2000      	movs	r0, #0
 8003fa4:	bd70      	pop	{r4, r5, r6, pc}
 8003fa6:	f000 f881 	bl	80040ac <__malloc_lock>
 8003faa:	4a23      	ldr	r2, [pc, #140]	; (8004038 <_malloc_r+0xb4>)
 8003fac:	6814      	ldr	r4, [r2, #0]
 8003fae:	4621      	mov	r1, r4
 8003fb0:	b991      	cbnz	r1, 8003fd8 <_malloc_r+0x54>
 8003fb2:	4c22      	ldr	r4, [pc, #136]	; (800403c <_malloc_r+0xb8>)
 8003fb4:	6823      	ldr	r3, [r4, #0]
 8003fb6:	b91b      	cbnz	r3, 8003fc0 <_malloc_r+0x3c>
 8003fb8:	4630      	mov	r0, r6
 8003fba:	f000 f867 	bl	800408c <_sbrk_r>
 8003fbe:	6020      	str	r0, [r4, #0]
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	4630      	mov	r0, r6
 8003fc4:	f000 f862 	bl	800408c <_sbrk_r>
 8003fc8:	1c43      	adds	r3, r0, #1
 8003fca:	d126      	bne.n	800401a <_malloc_r+0x96>
 8003fcc:	230c      	movs	r3, #12
 8003fce:	6033      	str	r3, [r6, #0]
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	f000 f86c 	bl	80040ae <__malloc_unlock>
 8003fd6:	e7e4      	b.n	8003fa2 <_malloc_r+0x1e>
 8003fd8:	680b      	ldr	r3, [r1, #0]
 8003fda:	1b5b      	subs	r3, r3, r5
 8003fdc:	d41a      	bmi.n	8004014 <_malloc_r+0x90>
 8003fde:	2b0b      	cmp	r3, #11
 8003fe0:	d90f      	bls.n	8004002 <_malloc_r+0x7e>
 8003fe2:	600b      	str	r3, [r1, #0]
 8003fe4:	50cd      	str	r5, [r1, r3]
 8003fe6:	18cc      	adds	r4, r1, r3
 8003fe8:	4630      	mov	r0, r6
 8003fea:	f000 f860 	bl	80040ae <__malloc_unlock>
 8003fee:	f104 000b 	add.w	r0, r4, #11
 8003ff2:	1d23      	adds	r3, r4, #4
 8003ff4:	f020 0007 	bic.w	r0, r0, #7
 8003ff8:	1ac3      	subs	r3, r0, r3
 8003ffa:	d01b      	beq.n	8004034 <_malloc_r+0xb0>
 8003ffc:	425a      	negs	r2, r3
 8003ffe:	50e2      	str	r2, [r4, r3]
 8004000:	bd70      	pop	{r4, r5, r6, pc}
 8004002:	428c      	cmp	r4, r1
 8004004:	bf0d      	iteet	eq
 8004006:	6863      	ldreq	r3, [r4, #4]
 8004008:	684b      	ldrne	r3, [r1, #4]
 800400a:	6063      	strne	r3, [r4, #4]
 800400c:	6013      	streq	r3, [r2, #0]
 800400e:	bf18      	it	ne
 8004010:	460c      	movne	r4, r1
 8004012:	e7e9      	b.n	8003fe8 <_malloc_r+0x64>
 8004014:	460c      	mov	r4, r1
 8004016:	6849      	ldr	r1, [r1, #4]
 8004018:	e7ca      	b.n	8003fb0 <_malloc_r+0x2c>
 800401a:	1cc4      	adds	r4, r0, #3
 800401c:	f024 0403 	bic.w	r4, r4, #3
 8004020:	42a0      	cmp	r0, r4
 8004022:	d005      	beq.n	8004030 <_malloc_r+0xac>
 8004024:	1a21      	subs	r1, r4, r0
 8004026:	4630      	mov	r0, r6
 8004028:	f000 f830 	bl	800408c <_sbrk_r>
 800402c:	3001      	adds	r0, #1
 800402e:	d0cd      	beq.n	8003fcc <_malloc_r+0x48>
 8004030:	6025      	str	r5, [r4, #0]
 8004032:	e7d9      	b.n	8003fe8 <_malloc_r+0x64>
 8004034:	bd70      	pop	{r4, r5, r6, pc}
 8004036:	bf00      	nop
 8004038:	200001bc 	.word	0x200001bc
 800403c:	200001c0 	.word	0x200001c0

08004040 <_realloc_r>:
 8004040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004042:	4607      	mov	r7, r0
 8004044:	4614      	mov	r4, r2
 8004046:	460e      	mov	r6, r1
 8004048:	b921      	cbnz	r1, 8004054 <_realloc_r+0x14>
 800404a:	4611      	mov	r1, r2
 800404c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004050:	f7ff bf98 	b.w	8003f84 <_malloc_r>
 8004054:	b922      	cbnz	r2, 8004060 <_realloc_r+0x20>
 8004056:	f7ff ff47 	bl	8003ee8 <_free_r>
 800405a:	4625      	mov	r5, r4
 800405c:	4628      	mov	r0, r5
 800405e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004060:	f000 f826 	bl	80040b0 <_malloc_usable_size_r>
 8004064:	4284      	cmp	r4, r0
 8004066:	d90f      	bls.n	8004088 <_realloc_r+0x48>
 8004068:	4621      	mov	r1, r4
 800406a:	4638      	mov	r0, r7
 800406c:	f7ff ff8a 	bl	8003f84 <_malloc_r>
 8004070:	4605      	mov	r5, r0
 8004072:	2800      	cmp	r0, #0
 8004074:	d0f2      	beq.n	800405c <_realloc_r+0x1c>
 8004076:	4631      	mov	r1, r6
 8004078:	4622      	mov	r2, r4
 800407a:	f7ff ff0f 	bl	8003e9c <memcpy>
 800407e:	4631      	mov	r1, r6
 8004080:	4638      	mov	r0, r7
 8004082:	f7ff ff31 	bl	8003ee8 <_free_r>
 8004086:	e7e9      	b.n	800405c <_realloc_r+0x1c>
 8004088:	4635      	mov	r5, r6
 800408a:	e7e7      	b.n	800405c <_realloc_r+0x1c>

0800408c <_sbrk_r>:
 800408c:	b538      	push	{r3, r4, r5, lr}
 800408e:	4c06      	ldr	r4, [pc, #24]	; (80040a8 <_sbrk_r+0x1c>)
 8004090:	2300      	movs	r3, #0
 8004092:	4605      	mov	r5, r0
 8004094:	4608      	mov	r0, r1
 8004096:	6023      	str	r3, [r4, #0]
 8004098:	f000 f86e 	bl	8004178 <_sbrk>
 800409c:	1c43      	adds	r3, r0, #1
 800409e:	d102      	bne.n	80040a6 <_sbrk_r+0x1a>
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	b103      	cbz	r3, 80040a6 <_sbrk_r+0x1a>
 80040a4:	602b      	str	r3, [r5, #0]
 80040a6:	bd38      	pop	{r3, r4, r5, pc}
 80040a8:	200001cc 	.word	0x200001cc

080040ac <__malloc_lock>:
 80040ac:	4770      	bx	lr

080040ae <__malloc_unlock>:
 80040ae:	4770      	bx	lr

080040b0 <_malloc_usable_size_r>:
 80040b0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80040b4:	2800      	cmp	r0, #0
 80040b6:	f1a0 0004 	sub.w	r0, r0, #4
 80040ba:	bfbc      	itt	lt
 80040bc:	580b      	ldrlt	r3, [r1, r0]
 80040be:	18c0      	addlt	r0, r0, r3
 80040c0:	4770      	bx	lr

080040c2 <abort>:
 80040c2:	b508      	push	{r3, lr}
 80040c4:	2006      	movs	r0, #6
 80040c6:	f000 f82b 	bl	8004120 <raise>
 80040ca:	2001      	movs	r0, #1
 80040cc:	f000 f862 	bl	8004194 <_exit>

080040d0 <_raise_r>:
 80040d0:	291f      	cmp	r1, #31
 80040d2:	b538      	push	{r3, r4, r5, lr}
 80040d4:	4604      	mov	r4, r0
 80040d6:	460d      	mov	r5, r1
 80040d8:	d904      	bls.n	80040e4 <_raise_r+0x14>
 80040da:	2316      	movs	r3, #22
 80040dc:	6003      	str	r3, [r0, #0]
 80040de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80040e2:	bd38      	pop	{r3, r4, r5, pc}
 80040e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80040e6:	b112      	cbz	r2, 80040ee <_raise_r+0x1e>
 80040e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80040ec:	b94b      	cbnz	r3, 8004102 <_raise_r+0x32>
 80040ee:	4620      	mov	r0, r4
 80040f0:	f000 f830 	bl	8004154 <_getpid_r>
 80040f4:	462a      	mov	r2, r5
 80040f6:	4601      	mov	r1, r0
 80040f8:	4620      	mov	r0, r4
 80040fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040fe:	f000 b817 	b.w	8004130 <_kill_r>
 8004102:	2b01      	cmp	r3, #1
 8004104:	d00a      	beq.n	800411c <_raise_r+0x4c>
 8004106:	1c59      	adds	r1, r3, #1
 8004108:	d103      	bne.n	8004112 <_raise_r+0x42>
 800410a:	2316      	movs	r3, #22
 800410c:	6003      	str	r3, [r0, #0]
 800410e:	2001      	movs	r0, #1
 8004110:	bd38      	pop	{r3, r4, r5, pc}
 8004112:	2400      	movs	r4, #0
 8004114:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004118:	4628      	mov	r0, r5
 800411a:	4798      	blx	r3
 800411c:	2000      	movs	r0, #0
 800411e:	bd38      	pop	{r3, r4, r5, pc}

08004120 <raise>:
 8004120:	4b02      	ldr	r3, [pc, #8]	; (800412c <raise+0xc>)
 8004122:	4601      	mov	r1, r0
 8004124:	6818      	ldr	r0, [r3, #0]
 8004126:	f7ff bfd3 	b.w	80040d0 <_raise_r>
 800412a:	bf00      	nop
 800412c:	20000010 	.word	0x20000010

08004130 <_kill_r>:
 8004130:	b538      	push	{r3, r4, r5, lr}
 8004132:	4c07      	ldr	r4, [pc, #28]	; (8004150 <_kill_r+0x20>)
 8004134:	2300      	movs	r3, #0
 8004136:	4605      	mov	r5, r0
 8004138:	4608      	mov	r0, r1
 800413a:	4611      	mov	r1, r2
 800413c:	6023      	str	r3, [r4, #0]
 800413e:	f000 f813 	bl	8004168 <_kill>
 8004142:	1c43      	adds	r3, r0, #1
 8004144:	d102      	bne.n	800414c <_kill_r+0x1c>
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	b103      	cbz	r3, 800414c <_kill_r+0x1c>
 800414a:	602b      	str	r3, [r5, #0]
 800414c:	bd38      	pop	{r3, r4, r5, pc}
 800414e:	bf00      	nop
 8004150:	200001cc 	.word	0x200001cc

08004154 <_getpid_r>:
 8004154:	f000 b800 	b.w	8004158 <_getpid>

08004158 <_getpid>:
 8004158:	4b02      	ldr	r3, [pc, #8]	; (8004164 <_getpid+0xc>)
 800415a:	2258      	movs	r2, #88	; 0x58
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004162:	4770      	bx	lr
 8004164:	200001cc 	.word	0x200001cc

08004168 <_kill>:
 8004168:	4b02      	ldr	r3, [pc, #8]	; (8004174 <_kill+0xc>)
 800416a:	2258      	movs	r2, #88	; 0x58
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004172:	4770      	bx	lr
 8004174:	200001cc 	.word	0x200001cc

08004178 <_sbrk>:
 8004178:	4b04      	ldr	r3, [pc, #16]	; (800418c <_sbrk+0x14>)
 800417a:	6819      	ldr	r1, [r3, #0]
 800417c:	4602      	mov	r2, r0
 800417e:	b909      	cbnz	r1, 8004184 <_sbrk+0xc>
 8004180:	4903      	ldr	r1, [pc, #12]	; (8004190 <_sbrk+0x18>)
 8004182:	6019      	str	r1, [r3, #0]
 8004184:	6818      	ldr	r0, [r3, #0]
 8004186:	4402      	add	r2, r0
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	4770      	bx	lr
 800418c:	200001c4 	.word	0x200001c4
 8004190:	200001d0 	.word	0x200001d0

08004194 <_exit>:
 8004194:	e7fe      	b.n	8004194 <_exit>
	...

08004198 <_init>:
 8004198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800419a:	bf00      	nop
 800419c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800419e:	bc08      	pop	{r3}
 80041a0:	469e      	mov	lr, r3
 80041a2:	4770      	bx	lr

080041a4 <_fini>:
 80041a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041a6:	bf00      	nop
 80041a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041aa:	bc08      	pop	{r3}
 80041ac:	469e      	mov	lr, r3
 80041ae:	4770      	bx	lr
